
STM32F407VGT6_CTS_A5_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017684  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010f0  08017818  08017818  00027818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018908  08018908  00030330  2**0
                  CONTENTS
  4 .ARM          00000008  08018908  08018908  00028908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018910  08018910  00030330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018910  08018910  00028910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08018914  08018914  00028914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000330  20000000  08018918  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030330  2**0
                  CONTENTS
 10 .bss          0000720c  20000330  20000330  00030330  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000753c  2000753c  00030330  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a601  00000000  00000000  000303a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007c79  00000000  00000000  0005a9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  00062620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001bef  00000000  00000000  00064a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031679  00000000  00000000  00066687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c810  00000000  00000000  00097d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ec508  00000000  00000000  000d4510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a94c  00000000  00000000  001c0a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  001cb364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080177fc 	.word	0x080177fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	080177fc 	.word	0x080177fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <analogRead>:

long map(long x, long in_min, long in_max, long out_min, long out_max);

/* Read ADC value based on the provided label */
uint32_t analogRead(ADC_Label label)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
    uint32_t adc_value = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]

    switch (label)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b04      	cmp	r3, #4
 8001010:	f200 809a 	bhi.w	8001148 <analogRead+0x158>
 8001014:	a201      	add	r2, pc, #4	; (adr r2, 800101c <analogRead+0x2c>)
 8001016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101a:	bf00      	nop
 800101c:	08001031 	.word	0x08001031
 8001020:	08001069 	.word	0x08001069
 8001024:	080010a1 	.word	0x080010a1
 8001028:	080010d9 	.word	0x080010d9
 800102c:	08001111 	.word	0x08001111
    {
        case Curr_Sensor_ServoDC_M1:
            // Configure ADC3 for Curr_Sensor_ServoDC (GPIOC_PIN_2)
            sConfig.Channel = ADC_CHANNEL_12;
 8001030:	230c      	movs	r3, #12
 8001032:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001034:	2301      	movs	r3, #1
 8001036:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	4845      	ldr	r0, [pc, #276]	; (8001158 <analogRead+0x168>)
 8001044:	f005 feba 	bl	8006dbc <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 8001048:	4843      	ldr	r0, [pc, #268]	; (8001158 <analogRead+0x168>)
 800104a:	f005 fd19 	bl	8006a80 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800104e:	f04f 31ff 	mov.w	r1, #4294967295
 8001052:	4841      	ldr	r0, [pc, #260]	; (8001158 <analogRead+0x168>)
 8001054:	f005 fe19 	bl	8006c8a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 8001058:	483f      	ldr	r0, [pc, #252]	; (8001158 <analogRead+0x168>)
 800105a:	f005 fea1 	bl	8006da0 <HAL_ADC_GetValue>
 800105e:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 8001060:	483d      	ldr	r0, [pc, #244]	; (8001158 <analogRead+0x168>)
 8001062:	f005 fddf 	bl	8006c24 <HAL_ADC_Stop>
            break;
 8001066:	e071      	b.n	800114c <analogRead+0x15c>

        case Curr_Sensor_Clamp_M2:
            // Configure ADC3 for Curr_Sensor_Clamp (GPIOC_PIN_3)
            sConfig.Channel = ADC_CHANNEL_13;
 8001068:	230d      	movs	r3, #13
 800106a:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4837      	ldr	r0, [pc, #220]	; (8001158 <analogRead+0x168>)
 800107c:	f005 fe9e 	bl	8006dbc <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 8001080:	4835      	ldr	r0, [pc, #212]	; (8001158 <analogRead+0x168>)
 8001082:	f005 fcfd 	bl	8006a80 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001086:	f04f 31ff 	mov.w	r1, #4294967295
 800108a:	4833      	ldr	r0, [pc, #204]	; (8001158 <analogRead+0x168>)
 800108c:	f005 fdfd 	bl	8006c8a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 8001090:	4831      	ldr	r0, [pc, #196]	; (8001158 <analogRead+0x168>)
 8001092:	f005 fe85 	bl	8006da0 <HAL_ADC_GetValue>
 8001096:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 8001098:	482f      	ldr	r0, [pc, #188]	; (8001158 <analogRead+0x168>)
 800109a:	f005 fdc3 	bl	8006c24 <HAL_ADC_Stop>
            break;
 800109e:	e055      	b.n	800114c <analogRead+0x15c>

        case Curr_Sensor_Spindle_M3:
            // Configure ADC3 for Curr_Sensor_Spindle (GPIOA_PIN_0)
            sConfig.Channel = ADC_CHANNEL_0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	4829      	ldr	r0, [pc, #164]	; (8001158 <analogRead+0x168>)
 80010b4:	f005 fe82 	bl	8006dbc <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 80010b8:	4827      	ldr	r0, [pc, #156]	; (8001158 <analogRead+0x168>)
 80010ba:	f005 fce1 	bl	8006a80 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80010be:	f04f 31ff 	mov.w	r1, #4294967295
 80010c2:	4825      	ldr	r0, [pc, #148]	; (8001158 <analogRead+0x168>)
 80010c4:	f005 fde1 	bl	8006c8a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 80010c8:	4823      	ldr	r0, [pc, #140]	; (8001158 <analogRead+0x168>)
 80010ca:	f005 fe69 	bl	8006da0 <HAL_ADC_GetValue>
 80010ce:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 80010d0:	4821      	ldr	r0, [pc, #132]	; (8001158 <analogRead+0x168>)
 80010d2:	f005 fda7 	bl	8006c24 <HAL_ADC_Stop>
            break;
 80010d6:	e039      	b.n	800114c <analogRead+0x15c>

        case V12:
            // Configure ADC2 for V12 (GPIOA_PIN_1)
            sConfig.Channel = ADC_CHANNEL_1;
 80010d8:	2301      	movs	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	4619      	mov	r1, r3
 80010ea:	481c      	ldr	r0, [pc, #112]	; (800115c <analogRead+0x16c>)
 80010ec:	f005 fe66 	bl	8006dbc <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc2);
 80010f0:	481a      	ldr	r0, [pc, #104]	; (800115c <analogRead+0x16c>)
 80010f2:	f005 fcc5 	bl	8006a80 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80010f6:	f04f 31ff 	mov.w	r1, #4294967295
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <analogRead+0x16c>)
 80010fc:	f005 fdc5 	bl	8006c8a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc2);
 8001100:	4816      	ldr	r0, [pc, #88]	; (800115c <analogRead+0x16c>)
 8001102:	f005 fe4d 	bl	8006da0 <HAL_ADC_GetValue>
 8001106:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc2);
 8001108:	4814      	ldr	r0, [pc, #80]	; (800115c <analogRead+0x16c>)
 800110a:	f005 fd8b 	bl	8006c24 <HAL_ADC_Stop>
            break;
 800110e:	e01d      	b.n	800114c <analogRead+0x15c>

        case Sensor_Pressure:
            // Configure ADC1 for Sensor_Pressure (GPIOC_PIN_4)
            sConfig.Channel = ADC_CHANNEL_14;
 8001110:	230e      	movs	r3, #14
 8001112:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <analogRead+0x170>)
 8001124:	f005 fe4a 	bl	8006dbc <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc1);
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <analogRead+0x170>)
 800112a:	f005 fca9 	bl	8006a80 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800112e:	f04f 31ff 	mov.w	r1, #4294967295
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <analogRead+0x170>)
 8001134:	f005 fda9 	bl	8006c8a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8001138:	4809      	ldr	r0, [pc, #36]	; (8001160 <analogRead+0x170>)
 800113a:	f005 fe31 	bl	8006da0 <HAL_ADC_GetValue>
 800113e:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc1);
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <analogRead+0x170>)
 8001142:	f005 fd6f 	bl	8006c24 <HAL_ADC_Stop>
            break;
 8001146:	e001      	b.n	800114c <analogRead+0x15c>

        default:
            // Handle invalid label case
            return 0;
 8001148:	2300      	movs	r3, #0
 800114a:	e000      	b.n	800114e <analogRead+0x15e>
    }
    return adc_value;
 800114c:	69fb      	ldr	r3, [r7, #28]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20002878 	.word	0x20002878
 800115c:	20002830 	.word	0x20002830
 8001160:	200027e8 	.word	0x200027e8

08001164 <pressureSensorReading>:

/* map Function to the sensor voltage to pressure */
float pressureSensorReading(void){
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af02      	add	r7, sp, #8

  uint32_t PressureRead  =  analogRead(Sensor_Pressure);
 800116a:	2004      	movs	r0, #4
 800116c:	f7ff ff40 	bl	8000ff0 <analogRead>
 8001170:	6078      	str	r0, [r7, #4]
   pressurechange	 =  map(PressureRead,314,3030,0,5300); //5300 -5 bar  4300 -4  //3300 -3 bar //2200 -2bar // 1120 - 1bar
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f241 43b4 	movw	r3, #5300	; 0x14b4
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	f640 32d6 	movw	r2, #3030	; 0xbd6
 8001180:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8001184:	f000 f812 	bl	80011ac <map>
 8001188:	ee07 0a90 	vmov	s15, r0
 800118c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <pressureSensorReading+0x44>)
 8001192:	edc3 7a00 	vstr	s15, [r3]
  return pressurechange;
 8001196:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <pressureSensorReading+0x44>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	ee07 3a90 	vmov	s15, r3

}
 800119e:	eeb0 0a67 	vmov.f32	s0, s15
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000039c 	.word	0x2000039c

080011ac <map>:

/* map Function  */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	603b      	str	r3, [r7, #0]
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	69b9      	ldr	r1, [r7, #24]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	1a8a      	subs	r2, r1, r2
 80011c6:	fb03 f202 	mul.w	r2, r3, r2
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	1acb      	subs	r3, r1, r3
 80011d0:	fb92 f2f3 	sdiv	r2, r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4413      	add	r3, r2
    }
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Convert_ADC_To_Current>:

// Function to convert ADC value to current in milliAmperes
int Convert_ADC_To_Current(uint16_t adc_value) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	int16_t current =   map(adc_value,0,4095,-10000,10000);
 80011ee:	88f8      	ldrh	r0, [r7, #6]
 80011f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <Convert_ADC_To_Current+0x40>)
 80011f8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80011fc:	2100      	movs	r1, #0
 80011fe:	f7ff ffd5 	bl	80011ac <map>
 8001202:	4603      	mov	r3, r0
 8001204:	81fb      	strh	r3, [r7, #14]
	 if(current < 0)
 8001206:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800120a:	2b00      	cmp	r3, #0
 800120c:	da03      	bge.n	8001216 <Convert_ADC_To_Current+0x32>
	 {
		 current = current *(-1);
 800120e:	89fb      	ldrh	r3, [r7, #14]
 8001210:	425b      	negs	r3, r3
 8001212:	b29b      	uxth	r3, r3
 8001214:	81fb      	strh	r3, [r7, #14]
	 }
    return (int)current * 2;  // Return the calculated current in amperes
 8001216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121a:	005b      	lsls	r3, r3, #1
}
 800121c:	4618      	mov	r0, r3
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	ffffd8f0 	.word	0xffffd8f0

08001228 <CustomerFrontEnd>:




void CustomerFrontEnd(void *pvParameters)
{
 8001228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800122c:	b08c      	sub	sp, #48	; 0x30
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
    LCDMessage_t msg;

    LCDRGBControl(WHITE);
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f001 fed2 	bl	8002fdc <LCDRGBControl>
    TareAll();
 8001238:	f001 ff5c 	bl	80030f4 <TareAll>

    while (TRUE)
    {
        LoadingFunc(BLINK, LOADING);
 800123c:	2101      	movs	r1, #1
 800123e:	2002      	movs	r0, #2
 8001240:	f001 fc38 	bl	8002ab4 <LoadingFunc>
        LCD_Init();
 8001244:	f001 fc74 	bl	8002b30 <LCD_Init>
        LCD_Clear();
 8001248:	f001 fd5c 	bl	8002d04 <LCD_Clear>

        do
        {
            InitializeMachine();
 800124c:	f001 f89e 	bl	800238c <InitializeMachine>
            LoadingFunc(ON, NOT_LOADING);
 8001250:	2100      	movs	r1, #0
 8001252:	2001      	movs	r0, #1
 8001254:	f001 fc2e 	bl	8002ab4 <LoadingFunc>
            vTaskDelay(pdMS_TO_TICKS(10));
 8001258:	200a      	movs	r0, #10
 800125a:	f00f ffe9 	bl	8011230 <vTaskDelay>
            LCD_Clear();
 800125e:	f001 fd51 	bl	8002d04 <LCD_Clear>

            // Send "Can on" message
            strcpy(msg.message, "Can on");
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	4a6b      	ldr	r2, [pc, #428]	; (8001414 <CustomerFrontEnd+0x1ec>)
 8001268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126c:	6018      	str	r0, [r3, #0]
 800126e:	3304      	adds	r3, #4
 8001270:	8019      	strh	r1, [r3, #0]
 8001272:	3302      	adds	r3, #2
 8001274:	0c0a      	lsrs	r2, r1, #16
 8001276:	701a      	strb	r2, [r3, #0]
            msg.symbol = ENTER_SYMBOL;
 8001278:	2301      	movs	r3, #1
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
            xQueueSend(LCD_Q, &msg, portMAX_DELAY);
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <CustomerFrontEnd+0x1f0>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	f107 010c 	add.w	r1, r7, #12
 8001284:	2300      	movs	r3, #0
 8001286:	f04f 32ff 	mov.w	r2, #4294967295
 800128a:	f00f f9af 	bl	80105ec <xQueueGenericSend>

            while (digitalRead(Button_Enter_Input_PullUp) == HIGH)
 800128e:	e06a      	b.n	8001366 <CustomerFrontEnd+0x13e>
            {
            	vTaskDelay(pdMS_TO_TICKS(10));
 8001290:	200a      	movs	r0, #10
 8001292:	f00f ffcd 	bl	8011230 <vTaskDelay>
                DeveloperMenu();
 8001296:	f002 fe23 	bl	8003ee0 <DeveloperMenu>

                if (HAL_GetTick() - StoringTime >= 1000)
 800129a:	f005 fb7d 	bl	8006998 <HAL_GetTick>
 800129e:	4603      	mov	r3, r0
 80012a0:	2200      	movs	r2, #0
 80012a2:	4698      	mov	r8, r3
 80012a4:	4691      	mov	r9, r2
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <CustomerFrontEnd+0x1f4>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	ebb8 0402 	subs.w	r4, r8, r2
 80012b0:	eb69 0503 	sbc.w	r5, r9, r3
 80012b4:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80012b8:	f175 0300 	sbcs.w	r3, r5, #0
 80012bc:	d30c      	bcc.n	80012d8 <CustomerFrontEnd+0xb0>
                {
                    StoringTime = HAL_GetTick();
 80012be:	f005 fb6b 	bl	8006998 <HAL_GetTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2200      	movs	r2, #0
 80012c6:	469a      	mov	sl, r3
 80012c8:	4693      	mov	fp, r2
 80012ca:	4b54      	ldr	r3, [pc, #336]	; (800141c <CustomerFrontEnd+0x1f4>)
 80012cc:	e9c3 ab00 	strd	sl, fp, [r3]
                    tareSend = Tareweight;
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <CustomerFrontEnd+0x1f8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a53      	ldr	r2, [pc, #332]	; (8001424 <CustomerFrontEnd+0x1fc>)
 80012d6:	6013      	str	r3, [r2, #0]
                }

                if (readKeypadNonBlock(ALL) == PLAYSTOPKEY)
 80012d8:	2000      	movs	r0, #0
 80012da:	f001 fa0b 	bl	80026f4 <readKeypadNonBlock>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b0d      	cmp	r3, #13
 80012e2:	d130      	bne.n	8001346 <CustomerFrontEnd+0x11e>
                {
                    // Send "TARE" message
                    strcpy(msg.message, "TARE");
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <CustomerFrontEnd+0x200>)
 80012ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012ee:	6018      	str	r0, [r3, #0]
 80012f0:	3304      	adds	r3, #4
 80012f2:	7019      	strb	r1, [r3, #0]
                    msg.symbol = NO_SYMBOL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    xQueueSend(LCD_Q, &msg, portMAX_DELAY);
 80012f8:	4b47      	ldr	r3, [pc, #284]	; (8001418 <CustomerFrontEnd+0x1f0>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f107 010c 	add.w	r1, r7, #12
 8001300:	2300      	movs	r3, #0
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	f00f f971 	bl	80105ec <xQueueGenericSend>

                    SubInit();
 800130a:	f001 f953 	bl	80025b4 <SubInit>
                    TareAll();
 800130e:	f001 fef1 	bl	80030f4 <TareAll>
                    vTaskDelay(pdMS_TO_TICKS(500));
 8001312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001316:	f00f ff8b 	bl	8011230 <vTaskDelay>

                    // Send "Can on" message again
                    strcpy(msg.message, "Can on");
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <CustomerFrontEnd+0x1ec>)
 8001320:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001324:	6018      	str	r0, [r3, #0]
 8001326:	3304      	adds	r3, #4
 8001328:	8019      	strh	r1, [r3, #0]
 800132a:	3302      	adds	r3, #2
 800132c:	0c0a      	lsrs	r2, r1, #16
 800132e:	701a      	strb	r2, [r3, #0]
                    msg.symbol = ENTER_SYMBOL;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
                    xQueueSend(LCD_Q, &msg, portMAX_DELAY);
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <CustomerFrontEnd+0x1f0>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	f107 010c 	add.w	r1, r7, #12
 800133c:	2300      	movs	r3, #0
 800133e:	f04f 32ff 	mov.w	r2, #4294967295
 8001342:	f00f f953 	bl	80105ec <xQueueGenericSend>
                }

                printLCDInt(2, "Curr.Weigh ", Tareweight, 0);
 8001346:	4b36      	ldr	r3, [pc, #216]	; (8001420 <CustomerFrontEnd+0x1f8>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	4937      	ldr	r1, [pc, #220]	; (800142c <CustomerFrontEnd+0x204>)
 800134e:	2002      	movs	r0, #2
 8001350:	f001 fd54 	bl	8002dfc <printLCDInt>
                UpdateTimeToSDCard(hours, minutes, seconds);
 8001354:	4b36      	ldr	r3, [pc, #216]	; (8001430 <CustomerFrontEnd+0x208>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a36      	ldr	r2, [pc, #216]	; (8001434 <CustomerFrontEnd+0x20c>)
 800135a:	6811      	ldr	r1, [r2, #0]
 800135c:	4a36      	ldr	r2, [pc, #216]	; (8001438 <CustomerFrontEnd+0x210>)
 800135e:	6812      	ldr	r2, [r2, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 f8ab 	bl	80034bc <UpdateTimeToSDCard>
            while (digitalRead(Button_Enter_Input_PullUp) == HIGH)
 8001366:	200d      	movs	r0, #13
 8001368:	f000 f8a6 	bl	80014b8 <digitalRead>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d08e      	beq.n	8001290 <CustomerFrontEnd+0x68>
            }

            Unclamped_Weight = Total_Weight;
 8001372:	4b32      	ldr	r3, [pc, #200]	; (800143c <CustomerFrontEnd+0x214>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <CustomerFrontEnd+0x218>)
 8001378:	6013      	str	r3, [r2, #0]
            LoadingFunc(BLINK, LOADING);
 800137a:	2101      	movs	r1, #1
 800137c:	2002      	movs	r0, #2
 800137e:	f001 fb99 	bl	8002ab4 <LoadingFunc>
            moveMotorClampToLocBlock(M1POS2VAL);
 8001382:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8001386:	f000 f90b 	bl	80015a0 <moveMotorClampToLocBlock>
            LoadingFunc(BLINK, LOADING);
 800138a:	2101      	movs	r1, #1
 800138c:	2002      	movs	r0, #2
 800138e:	f001 fb91 	bl	8002ab4 <LoadingFunc>
            vTaskDelay(pdMS_TO_TICKS(1000));
 8001392:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001396:	f00f ff4b 	bl	8011230 <vTaskDelay>

            if (Total_Weight <= NO_BOTTLE_WEIGHT)
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <CustomerFrontEnd+0x214>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	dc2c      	bgt.n	80013fc <CustomerFrontEnd+0x1d4>
            {
                LoadingFunc(BLINK, NOT_LOADING);
 80013a2:	2100      	movs	r1, #0
 80013a4:	2002      	movs	r0, #2
 80013a6:	f001 fb85 	bl	8002ab4 <LoadingFunc>
                LCD_Clear();
 80013aa:	f001 fcab 	bl	8002d04 <LCD_Clear>

                // Send "no can" message
                strcpy(msg.message, "no can");
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <CustomerFrontEnd+0x21c>)
 80013b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013b8:	6018      	str	r0, [r3, #0]
 80013ba:	3304      	adds	r3, #4
 80013bc:	8019      	strh	r1, [r3, #0]
 80013be:	3302      	adds	r3, #2
 80013c0:	0c0a      	lsrs	r2, r1, #16
 80013c2:	701a      	strb	r2, [r3, #0]
                msg.symbol = NO_SYMBOL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                xQueueSend(LCD_Q, &msg, portMAX_DELAY);
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <CustomerFrontEnd+0x1f0>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	f107 010c 	add.w	r1, r7, #12
 80013d0:	2300      	movs	r3, #0
 80013d2:	f04f 32ff 	mov.w	r2, #4294967295
 80013d6:	f00f f909 	bl	80105ec <xQueueGenericSend>

                vTaskDelay(pdMS_TO_TICKS(5000));
 80013da:	f241 3088 	movw	r0, #5000	; 0x1388
 80013de:	f00f ff27 	bl	8011230 <vTaskDelay>
                LoadingFunc(BLINK, NOT_LOADING);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2002      	movs	r0, #2
 80013e6:	f001 fb65 	bl	8002ab4 <LoadingFunc>
                moveMotorSpindleToLocBlock(M2POS1VAL);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f8ac 	bl	8001548 <moveMotorSpindleToLocBlock>
                vTaskDelay(pdMS_TO_TICKS(500));
 80013f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f4:	f00f ff1c 	bl	8011230 <vTaskDelay>
                UnlockCannister();
 80013f8:	f000 f828 	bl	800144c <UnlockCannister>
            }
        } while (Total_Weight <= NO_BOTTLE_WEIGHT);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <CustomerFrontEnd+0x214>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	f77f af23 	ble.w	800124c <CustomerFrontEnd+0x24>

        Servo_SetPercent(90);
 8001406:	205a      	movs	r0, #90	; 0x5a
 8001408:	f002 f9ee 	bl	80037e8 <Servo_SetPercent>
        isAutoOperation = TRUE;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <CustomerFrontEnd+0x220>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
        LoadingFunc(BLINK, LOADING);
 8001412:	e713      	b.n	800123c <CustomerFrontEnd+0x14>
 8001414:	08017818 	.word	0x08017818
 8001418:	200004cc 	.word	0x200004cc
 800141c:	20000350 	.word	0x20000350
 8001420:	20000364 	.word	0x20000364
 8001424:	20000384 	.word	0x20000384
 8001428:	08017820 	.word	0x08017820
 800142c:	08017828 	.word	0x08017828
 8001430:	20000394 	.word	0x20000394
 8001434:	20000390 	.word	0x20000390
 8001438:	2000038c 	.word	0x2000038c
 800143c:	2000035c 	.word	0x2000035c
 8001440:	20000370 	.word	0x20000370
 8001444:	08017834 	.word	0x08017834
 8001448:	2000010b 	.word	0x2000010b

0800144c <UnlockCannister>:
	}
}


static void UnlockCannister(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001450:	f001 fc58 	bl	8002d04 <LCD_Clear>
	vTaskDelay(pdMS_TO_TICKS(500));
 8001454:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001458:	f00f feea 	bl	8011230 <vTaskDelay>
//	HAL_Delay(500);
	LoadingFunc(ON, NOT_LOADING);
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f001 fb28 	bl	8002ab4 <LoadingFunc>
	printLCD(0, "Unlock ", ENTER_SYMBOL);
 8001464:	2201      	movs	r2, #1
 8001466:	4911      	ldr	r1, [pc, #68]	; (80014ac <UnlockCannister+0x60>)
 8001468:	2000      	movs	r0, #0
 800146a:	f001 fd4b 	bl	8002f04 <printLCD>
	vTaskDelay(pdMS_TO_TICKS(1000));
 800146e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001472:	f00f fedd 	bl	8011230 <vTaskDelay>
//	HAL_Delay(1000);
	while(TRUE){
		ReadKeypadVar(CONTROL);
 8001476:	2002      	movs	r0, #2
 8001478:	f001 f8f0 	bl	800265c <ReadKeypadVar>
		if(lastKeyPressed == ENTERKEY){
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <UnlockCannister+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b0b      	cmp	r3, #11
 8001482:	d1f8      	bne.n	8001476 <UnlockCannister+0x2a>
			moveMotorSpindleToLocBlock(M2POS1VAL);
 8001484:	2000      	movs	r0, #0
 8001486:	f000 f85f 	bl	8001548 <moveMotorSpindleToLocBlock>
			moveMotorClampToLocBlock(M1POS1VAL);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f888 	bl	80015a0 <moveMotorClampToLocBlock>
			LCD_Clear();
 8001490:	f001 fc38 	bl	8002d04 <LCD_Clear>
			vTaskDelay(pdMS_TO_TICKS(200));
 8001494:	20c8      	movs	r0, #200	; 0xc8
 8001496:	f00f fecb 	bl	8011230 <vTaskDelay>
//			HAL_Delay(200);
			CleaningExitCounter = 0;
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <UnlockCannister+0x68>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			LoadingFunc(BLINK, LOADING);
 80014a0:	2101      	movs	r1, #1
 80014a2:	2002      	movs	r0, #2
 80014a4:	f001 fb06 	bl	8002ab4 <LoadingFunc>
			return;
 80014a8:	bf00      	nop
			CleaningExitCounter = 0;
			return;
		}*/
	}
	UpdateTimeToSDCard( hours,  minutes,  seconds);
}
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	08017a7c 	.word	0x08017a7c
 80014b0:	2000010c 	.word	0x2000010c
 80014b4:	20000381 	.word	0x20000381

080014b8 <digitalRead>:
    {Button_Enter_Input_PullUp_GPIO_Port, Button_Enter_Input_PullUp_Pin}, 		// BUTTON_ENTER_Input_Pullup
    {Button_Comma_Input_PullUp_GPIO_Port, Button_Comma_Input_PullUp_Pin}  		// BUTTON_COMMA_Input_Pullup
};


GPIO_PinState digitalRead(UserLabel label) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
    if (label >= sizeof(gpioMap) / sizeof(GPIO_Map)) {
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b0e      	cmp	r3, #14
 80014c6:	d901      	bls.n	80014cc <digitalRead+0x14>
        // Handle invalid label
        return GPIO_PIN_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e010      	b.n	80014ee <digitalRead+0x36>
    }

    GPIO_Map map = gpioMap[label];
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	490a      	ldr	r1, [pc, #40]	; (80014f8 <digitalRead+0x40>)
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014dc:	e882 0003 	stmia.w	r2, {r0, r1}
    return HAL_GPIO_ReadPin(map.port, map.pin);
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	89ba      	ldrh	r2, [r7, #12]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f006 fe9e 	bl	8008228 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000

080014fc <digitalWrite>:
	{EN_DCDC_5V_Output_GPIO_Port, EN_DCDC_5V_Output_Pin},				// EN_DCDC_5V_Output
	{EN_DCDC_8V_Output_GPIO_Port, EN_DCDC_8V_Output_Pin},				// EN_DCDC_8V_Output
};

void digitalWrite(OutputLabel label, int state)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
    if (label >= sizeof(outputMap) / sizeof(GPIO_OutputMap))
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	2b0e      	cmp	r3, #14
 800150c:	d815      	bhi.n	800153a <digitalWrite+0x3e>
    {
        // Handle invalid label
        return;
    }

    GPIO_OutputMap map = outputMap[label];
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <digitalWrite+0x48>)
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800151e:	e882 0003 	stmia.w	r2, {r0, r1}
    HAL_GPIO_WritePin(map.port, map.pin, (state != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	89b9      	ldrh	r1, [r7, #12]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	f006 fe90 	bl	8008258 <HAL_GPIO_WritePin>
 8001538:	e000      	b.n	800153c <digitalWrite+0x40>
        return;
 800153a:	bf00      	nop
}
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000078 	.word	0x20000078

08001548 <moveMotorSpindleToLocBlock>:

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;

void moveMotorSpindleToLocBlock(long posM2) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	int DelayRequired = FALSE;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
	while (!moveMotorSpindleToLocNoneBlock(posM2)) {
 8001554:	e001      	b.n	800155a <moveMotorSpindleToLocBlock+0x12>
		DelayRequired = TRUE;
 8001556:	2301      	movs	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
	while (!moveMotorSpindleToLocNoneBlock(posM2)) {
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f84c 	bl	80015f8 <moveMotorSpindleToLocNoneBlock>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f7      	beq.n	8001556 <moveMotorSpindleToLocBlock+0xe>
	}
	if (DelayRequired == TRUE) {
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d115      	bne.n	8001598 <moveMotorSpindleToLocBlock+0x50>
		for(uint16_t j = 0; j < 1000; j++){
 800156c:	2300      	movs	r3, #0
 800156e:	817b      	strh	r3, [r7, #10]
 8001570:	e00e      	b.n	8001590 <moveMotorSpindleToLocBlock+0x48>
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8001572:	2300      	movs	r3, #0
 8001574:	813b      	strh	r3, [r7, #8]
 8001576:	e003      	b.n	8001580 <moveMotorSpindleToLocBlock+0x38>
				__NOP();
 8001578:	bf00      	nop
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 800157a:	893b      	ldrh	r3, [r7, #8]
 800157c:	3301      	adds	r3, #1
 800157e:	813b      	strh	r3, [r7, #8]
 8001580:	893b      	ldrh	r3, [r7, #8]
 8001582:	f243 62af 	movw	r2, #13999	; 0x36af
 8001586:	4293      	cmp	r3, r2
 8001588:	d9f6      	bls.n	8001578 <moveMotorSpindleToLocBlock+0x30>
		for(uint16_t j = 0; j < 1000; j++){
 800158a:	897b      	ldrh	r3, [r7, #10]
 800158c:	3301      	adds	r3, #1
 800158e:	817b      	strh	r3, [r7, #10]
 8001590:	897b      	ldrh	r3, [r7, #10]
 8001592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001596:	d3ec      	bcc.n	8001572 <moveMotorSpindleToLocBlock+0x2a>
			}
		}
	}

}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <moveMotorClampToLocBlock>:

void moveMotorClampToLocBlock(long posM1) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	int DelayRequired = FALSE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
	while (!moveMotorClampToLocNoneBlock(posM1)) {
 80015ac:	e001      	b.n	80015b2 <moveMotorClampToLocBlock+0x12>
		DelayRequired = TRUE;
 80015ae:	2301      	movs	r3, #1
 80015b0:	60fb      	str	r3, [r7, #12]
	while (!moveMotorClampToLocNoneBlock(posM1)) {
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f8a6 	bl	8001704 <moveMotorClampToLocNoneBlock>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f7      	beq.n	80015ae <moveMotorClampToLocBlock+0xe>
	}
	if (DelayRequired == TRUE) {
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d115      	bne.n	80015f0 <moveMotorClampToLocBlock+0x50>
		for(uint16_t j = 0; j < 1000; j++){
 80015c4:	2300      	movs	r3, #0
 80015c6:	817b      	strh	r3, [r7, #10]
 80015c8:	e00e      	b.n	80015e8 <moveMotorClampToLocBlock+0x48>
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 80015ca:	2300      	movs	r3, #0
 80015cc:	813b      	strh	r3, [r7, #8]
 80015ce:	e003      	b.n	80015d8 <moveMotorClampToLocBlock+0x38>
				__NOP();
 80015d0:	bf00      	nop
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 80015d2:	893b      	ldrh	r3, [r7, #8]
 80015d4:	3301      	adds	r3, #1
 80015d6:	813b      	strh	r3, [r7, #8]
 80015d8:	893b      	ldrh	r3, [r7, #8]
 80015da:	f243 62af 	movw	r2, #13999	; 0x36af
 80015de:	4293      	cmp	r3, r2
 80015e0:	d9f6      	bls.n	80015d0 <moveMotorClampToLocBlock+0x30>
		for(uint16_t j = 0; j < 1000; j++){
 80015e2:	897b      	ldrh	r3, [r7, #10]
 80015e4:	3301      	adds	r3, #1
 80015e6:	817b      	strh	r3, [r7, #10]
 80015e8:	897b      	ldrh	r3, [r7, #10]
 80015ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015ee:	d3ec      	bcc.n	80015ca <moveMotorClampToLocBlock+0x2a>
			}
		}
	}
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <moveMotorSpindleToLocNoneBlock>:

uint8_t moveMotorSpindleToLocNoneBlock(long posM2) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	int M2Dir;
	uint8_t isSuccess = FALSE; // 0 for false, 1 for true
 8001600:	2300      	movs	r3, #0
 8001602:	72fb      	strb	r3, [r7, #11]

	if (posM2 == M2POS1VAL && Spindle_M3_EncA_Pulses > M2POS1VAL) { //Going back home
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <moveMotorSpindleToLocNoneBlock+0x20>
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	dd02      	ble.n	8001618 <moveMotorSpindleToLocNoneBlock+0x20>
		M2Dir = CCW;
 8001612:	2302      	movs	r3, #2
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e028      	b.n	800166a <moveMotorSpindleToLocNoneBlock+0x72>
	}
	else if (abs(Spindle_M3_EncA_Pulses - posM2) <= M2ACCEPTEDERROR || posM2 == NONE) {
 8001618:	4b38      	ldr	r3, [pc, #224]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001624:	db05      	blt.n	8001632 <moveMotorSpindleToLocNoneBlock+0x3a>
 8001626:	4b35      	ldr	r3, [pc, #212]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	dd03      	ble.n	800163a <moveMotorSpindleToLocNoneBlock+0x42>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d10d      	bne.n	8001656 <moveMotorSpindleToLocNoneBlock+0x5e>
		M2Dir = OFF;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
		posM2 = Spindle_M3_EncA_Pulses;
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	607b      	str	r3, [r7, #4]
		moveMotor(CAPMOTOR, OFF, INT_INF);
 8001644:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <moveMotorSpindleToLocNoneBlock+0x108>)
 8001646:	2100      	movs	r1, #0
 8001648:	2002      	movs	r0, #2
 800164a:	f000 f8ed 	bl	8001828 <moveMotor>
		isSuccess = TRUE;
 800164e:	2301      	movs	r3, #1
 8001650:	72fb      	strb	r3, [r7, #11]
		return isSuccess;
 8001652:	7afb      	ldrb	r3, [r7, #11]
 8001654:	e04d      	b.n	80016f2 <moveMotorSpindleToLocNoneBlock+0xfa>
	}
	else if (Spindle_M3_EncA_Pulses < posM2) {
 8001656:	4b29      	ldr	r3, [pc, #164]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	dd02      	ble.n	8001666 <moveMotorSpindleToLocNoneBlock+0x6e>
		M2Dir = CW; //before CW changed while testing
 8001660:	2301      	movs	r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	e001      	b.n	800166a <moveMotorSpindleToLocNoneBlock+0x72>
	}
	else {
		M2Dir = CCW; //before CCw
 8001666:	2302      	movs	r3, #2
 8001668:	60fb      	str	r3, [r7, #12]
	}

	if (Spindle_M3_EncA_Pulses != posM2) {
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	429a      	cmp	r2, r3
 8001672:	d036      	beq.n	80016e2 <moveMotorSpindleToLocNoneBlock+0xea>

		// Motor 2 Movement Logic
		if (M2Dir == CW) {
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d113      	bne.n	80016a2 <moveMotorSpindleToLocNoneBlock+0xaa>
			if (Spindle_M3_EncA_Pulses < posM2) {
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dd05      	ble.n	8001690 <moveMotorSpindleToLocNoneBlock+0x98>
				moveMotor(CAPMOTOR, CW, posM2);
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	2101      	movs	r1, #1
 8001688:	2002      	movs	r0, #2
 800168a:	f000 f8cd 	bl	8001828 <moveMotor>
 800168e:	e02f      	b.n	80016f0 <moveMotorSpindleToLocNoneBlock+0xf8>
			} else {
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8001690:	4a1b      	ldr	r2, [pc, #108]	; (8001700 <moveMotorSpindleToLocNoneBlock+0x108>)
 8001692:	2100      	movs	r1, #0
 8001694:	2002      	movs	r0, #2
 8001696:	f000 f8c7 	bl	8001828 <moveMotor>
				posM2 = Spindle_M3_EncA_Pulses;
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	e026      	b.n	80016f0 <moveMotorSpindleToLocNoneBlock+0xf8>
			}
		} else if (M2Dir == CCW) {
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d113      	bne.n	80016d0 <moveMotorSpindleToLocNoneBlock+0xd8>
			if (Spindle_M3_EncA_Pulses > posM2) {
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	da05      	bge.n	80016be <moveMotorSpindleToLocNoneBlock+0xc6>
				moveMotor(CAPMOTOR, CCW, posM2);
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	2102      	movs	r1, #2
 80016b6:	2002      	movs	r0, #2
 80016b8:	f000 f8b6 	bl	8001828 <moveMotor>
 80016bc:	e018      	b.n	80016f0 <moveMotorSpindleToLocNoneBlock+0xf8>
			} else {
				moveMotor(CAPMOTOR, OFF, INT_INF);
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <moveMotorSpindleToLocNoneBlock+0x108>)
 80016c0:	2100      	movs	r1, #0
 80016c2:	2002      	movs	r0, #2
 80016c4:	f000 f8b0 	bl	8001828 <moveMotor>
				posM2 = Spindle_M3_EncA_Pulses;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	e00f      	b.n	80016f0 <moveMotorSpindleToLocNoneBlock+0xf8>
			}
		} else {
			moveMotor(CAPMOTOR, OFF, INT_INF);
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <moveMotorSpindleToLocNoneBlock+0x108>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	2002      	movs	r0, #2
 80016d6:	f000 f8a7 	bl	8001828 <moveMotor>
			posM2 = Spindle_M3_EncA_Pulses;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <moveMotorSpindleToLocNoneBlock+0x104>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	e006      	b.n	80016f0 <moveMotorSpindleToLocNoneBlock+0xf8>
		}
	} else {
		moveMotor(CAPMOTOR, OFF, INT_INF);
 80016e2:	4a07      	ldr	r2, [pc, #28]	; (8001700 <moveMotorSpindleToLocNoneBlock+0x108>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	2002      	movs	r0, #2
 80016e8:	f000 f89e 	bl	8001828 <moveMotor>
		isSuccess = TRUE;
 80016ec:	2301      	movs	r3, #1
 80016ee:	72fb      	strb	r3, [r7, #11]
	}
	return isSuccess;
 80016f0:	7afb      	ldrb	r3, [r7, #11]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000100 	.word	0x20000100
 8001700:	0098967f 	.word	0x0098967f

08001704 <moveMotorClampToLocNoneBlock>:

uint8_t moveMotorClampToLocNoneBlock(long posM1) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	int M1Dir;

	uint8_t isSuccess = FALSE; // 0 for false, 1 for true
 800170c:	2300      	movs	r3, #0
 800170e:	72fb      	strb	r3, [r7, #11]

	if (posM1 == M1POS1VAL && Clamp_M2_EncA_Pulses > M1POS1VAL) { //Going back home
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d106      	bne.n	8001724 <moveMotorClampToLocNoneBlock+0x20>
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	dd02      	ble.n	8001724 <moveMotorClampToLocNoneBlock+0x20>
		M1Dir = CW;
 800171e:	2301      	movs	r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	e02b      	b.n	800177c <moveMotorClampToLocNoneBlock+0x78>
	} else if (abs(Clamp_M2_EncA_Pulses - posM1) <= M1ACCEPTEDERROR || posM1 == NONE) {
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001730:	db05      	blt.n	800173e <moveMotorClampToLocNoneBlock+0x3a>
 8001732:	4b39      	ldr	r3, [pc, #228]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	dd03      	ble.n	8001746 <moveMotorClampToLocNoneBlock+0x42>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d110      	bne.n	8001768 <moveMotorClampToLocNoneBlock+0x64>
		M1Dir = OFF;
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
		posM1 = Clamp_M2_EncA_Pulses;
 800174a:	4b33      	ldr	r3, [pc, #204]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	607b      	str	r3, [r7, #4]
		moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8001750:	4a32      	ldr	r2, [pc, #200]	; (800181c <moveMotorClampToLocNoneBlock+0x118>)
 8001752:	2100      	movs	r1, #0
 8001754:	2001      	movs	r0, #1
 8001756:	f000 f867 	bl	8001828 <moveMotor>
		isSuccess = TRUE;
 800175a:	2301      	movs	r3, #1
 800175c:	72fb      	strb	r3, [r7, #11]
		SerialPrintln("SUCCESS CLAMP");
 800175e:	4830      	ldr	r0, [pc, #192]	; (8001820 <moveMotorClampToLocNoneBlock+0x11c>)
 8001760:	f001 ffa4 	bl	80036ac <SerialPrintln>
		return isSuccess;
 8001764:	7afb      	ldrb	r3, [r7, #11]
 8001766:	e052      	b.n	800180e <moveMotorClampToLocNoneBlock+0x10a>
	} else if (Clamp_M2_EncA_Pulses < posM1) {
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	dd02      	ble.n	8001778 <moveMotorClampToLocNoneBlock+0x74>
		M1Dir = CCW;
 8001772:	2302      	movs	r3, #2
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	e001      	b.n	800177c <moveMotorClampToLocNoneBlock+0x78>
	} else {
		M1Dir = CW;
 8001778:	2301      	movs	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
	}

	if (Clamp_M2_EncA_Pulses != posM1) {
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d038      	beq.n	80017f8 <moveMotorClampToLocNoneBlock+0xf4>

		// Motor 1 Movement Logic
		if (M1Dir == CCW) {
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d113      	bne.n	80017b4 <moveMotorClampToLocNoneBlock+0xb0>
			if (Clamp_M2_EncA_Pulses < posM1) {
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	dd05      	ble.n	80017a2 <moveMotorClampToLocNoneBlock+0x9e>
				moveMotor(CLAMPMOTOR, CCW, posM1);
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	2102      	movs	r1, #2
 800179a:	2001      	movs	r0, #1
 800179c:	f000 f844 	bl	8001828 <moveMotor>
 80017a0:	e027      	b.n	80017f2 <moveMotorClampToLocNoneBlock+0xee>
			} else {
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <moveMotorClampToLocNoneBlock+0x118>)
 80017a4:	2100      	movs	r1, #0
 80017a6:	2001      	movs	r0, #1
 80017a8:	f000 f83e 	bl	8001828 <moveMotor>
				posM1 = Clamp_M2_EncA_Pulses;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	e01e      	b.n	80017f2 <moveMotorClampToLocNoneBlock+0xee>
			}
		} else if (M1Dir == CW) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d113      	bne.n	80017e2 <moveMotorClampToLocNoneBlock+0xde>
			if (Clamp_M2_EncA_Pulses > posM1) {
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	da05      	bge.n	80017d0 <moveMotorClampToLocNoneBlock+0xcc>
				moveMotor(CLAMPMOTOR, CW, posM1);
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	2101      	movs	r1, #1
 80017c8:	2001      	movs	r0, #1
 80017ca:	f000 f82d 	bl	8001828 <moveMotor>
 80017ce:	e010      	b.n	80017f2 <moveMotorClampToLocNoneBlock+0xee>
			} else {
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80017d0:	4a12      	ldr	r2, [pc, #72]	; (800181c <moveMotorClampToLocNoneBlock+0x118>)
 80017d2:	2100      	movs	r1, #0
 80017d4:	2001      	movs	r0, #1
 80017d6:	f000 f827 	bl	8001828 <moveMotor>
				posM1 = Clamp_M2_EncA_Pulses;
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	e007      	b.n	80017f2 <moveMotorClampToLocNoneBlock+0xee>
			}
		} else {
			moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80017e2:	4a0e      	ldr	r2, [pc, #56]	; (800181c <moveMotorClampToLocNoneBlock+0x118>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	2001      	movs	r0, #1
 80017e8:	f000 f81e 	bl	8001828 <moveMotor>
			posM1 = Clamp_M2_EncA_Pulses;
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <moveMotorClampToLocNoneBlock+0x114>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	607b      	str	r3, [r7, #4]
		}

		isSuccess = FALSE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	72fb      	strb	r3, [r7, #11]
 80017f6:	e009      	b.n	800180c <moveMotorClampToLocNoneBlock+0x108>
	} else {
		SerialPrintln("POSITION REACHED");
 80017f8:	480a      	ldr	r0, [pc, #40]	; (8001824 <moveMotorClampToLocNoneBlock+0x120>)
 80017fa:	f001 ff57 	bl	80036ac <SerialPrintln>
		moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <moveMotorClampToLocNoneBlock+0x118>)
 8001800:	2100      	movs	r1, #0
 8001802:	2001      	movs	r0, #1
 8001804:	f000 f810 	bl	8001828 <moveMotor>
		isSuccess = TRUE;
 8001808:	2301      	movs	r3, #1
 800180a:	72fb      	strb	r3, [r7, #11]
	}
	return isSuccess;
 800180c:	7afb      	ldrb	r3, [r7, #11]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200000f8 	.word	0x200000f8
 800181c:	0098967f 	.word	0x0098967f
 8001820:	08017a90 	.word	0x08017a90
 8001824:	08017aa0 	.word	0x08017aa0

08001828 <moveMotor>:

void moveMotor(int motorNum, int Dir, int targetPoint) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
	if (motorNum == CLAMPMOTOR) {
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d147      	bne.n	80018ca <moveMotor+0xa2>
		if (Dir == CW) {
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <moveMotor+0x28>
			ClampMotorState = CW;
 8001840:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <moveMotor+0x19c>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
			digitalWrite(Clamp_M2_Dir_Output, LOW);
 8001846:	2100      	movs	r1, #0
 8001848:	2005      	movs	r0, #5
 800184a:	f7ff fe57 	bl	80014fc <digitalWrite>
 800184e:	e00f      	b.n	8001870 <moveMotor+0x48>
		} else if (Dir == CCW) {
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d107      	bne.n	8001866 <moveMotor+0x3e>
			ClampMotorState = CCW;
 8001856:	4b5b      	ldr	r3, [pc, #364]	; (80019c4 <moveMotor+0x19c>)
 8001858:	2202      	movs	r2, #2
 800185a:	601a      	str	r2, [r3, #0]
			digitalWrite(Clamp_M2_Dir_Output, HIGH);
 800185c:	2101      	movs	r1, #1
 800185e:	2005      	movs	r0, #5
 8001860:	f7ff fe4c 	bl	80014fc <digitalWrite>
 8001864:	e004      	b.n	8001870 <moveMotor+0x48>
		} else {
			pwm(Clamp_M2_PWM, OFF);
 8001866:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80019c8 <moveMotor+0x1a0>
 800186a:	2001      	movs	r0, #1
 800186c:	f003 fe0e 	bl	800548c <pwm>
		}

		if (Dir != OFF) {
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 80a2 	beq.w	80019bc <moveMotor+0x194>
			checkFaultsMotors(CLAMPMOTOR);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 f8bd 	bl	80019f8 <checkFaultsMotors>
			if (abs(Clamp_M2_EncA_Pulses - targetPoint) < MOVEM1SLOWPULSES) { //If we are close to our target, move slowly
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <moveMotor+0x1a4>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 800188a:	dd12      	ble.n	80018b2 <moveMotor+0x8a>
 800188c:	4b4f      	ldr	r3, [pc, #316]	; (80019cc <moveMotor+0x1a4>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001898:	da0b      	bge.n	80018b2 <moveMotor+0x8a>
				pwm(Clamp_M2_PWM, PWM_SLOW);
 800189a:	4b4d      	ldr	r3, [pc, #308]	; (80019d0 <moveMotor+0x1a8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	ee07 3a90 	vmov	s15, r3
 80018a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	2001      	movs	r0, #1
 80018ac:	f003 fdee 	bl	800548c <pwm>
 80018b0:	e084      	b.n	80019bc <moveMotor+0x194>
			} else { //Else go with high speed
				pwm(Clamp_M2_PWM, PWM_FAST);
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <moveMotor+0x1ac>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018be:	eeb0 0a67 	vmov.f32	s0, s15
 80018c2:	2001      	movs	r0, #1
 80018c4:	f003 fde2 	bl	800548c <pwm>
			FreshValveStatus = 0;

		}
	}

}
 80018c8:	e078      	b.n	80019bc <moveMotor+0x194>
	} else if (motorNum == CAPMOTOR) {
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d153      	bne.n	8001978 <moveMotor+0x150>
		if (Dir == CW) {
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d107      	bne.n	80018e6 <moveMotor+0xbe>
			SpindleMotorState = CW;
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <moveMotor+0x1b0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
			digitalWrite(Spindle_M3_Dir_Output, LOW);
 80018dc:	2100      	movs	r1, #0
 80018de:	2004      	movs	r0, #4
 80018e0:	f7ff fe0c 	bl	80014fc <digitalWrite>
 80018e4:	e00f      	b.n	8001906 <moveMotor+0xde>
		} else if (Dir == CCW) {
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d107      	bne.n	80018fc <moveMotor+0xd4>
			SpindleMotorState = CCW;
 80018ec:	4b3a      	ldr	r3, [pc, #232]	; (80019d8 <moveMotor+0x1b0>)
 80018ee:	2202      	movs	r2, #2
 80018f0:	601a      	str	r2, [r3, #0]
			digitalWrite(Spindle_M3_Dir_Output, HIGH);
 80018f2:	2101      	movs	r1, #1
 80018f4:	2004      	movs	r0, #4
 80018f6:	f7ff fe01 	bl	80014fc <digitalWrite>
 80018fa:	e004      	b.n	8001906 <moveMotor+0xde>
			pwm(Spindle_M3_PWM, OFF);
 80018fc:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80019c8 <moveMotor+0x1a0>
 8001900:	2002      	movs	r0, #2
 8001902:	f003 fdc3 	bl	800548c <pwm>
		if (Dir != OFF) {
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d057      	beq.n	80019bc <moveMotor+0x194>
			if (abs(Spindle_M3_EncA_Pulses - targetPoint) < MOVEM2SLOWPULSES) { //If we are close to our target, move slowly
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <moveMotor+0x1b4>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001918:	dd12      	ble.n	8001940 <moveMotor+0x118>
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <moveMotor+0x1b4>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001926:	da0b      	bge.n	8001940 <moveMotor+0x118>
				pwm(Spindle_M3_PWM, PWM_SLOW);
 8001928:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <moveMotor+0x1a8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	eeb0 0a67 	vmov.f32	s0, s15
 8001938:	2002      	movs	r0, #2
 800193a:	f003 fda7 	bl	800548c <pwm>
 800193e:	e03d      	b.n	80019bc <moveMotor+0x194>
			} else if(CleaningFlag == TRUE){ //Else go with high speed
 8001940:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <moveMotor+0x1b8>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10b      	bne.n	8001960 <moveMotor+0x138>
				pwm(Spindle_M3_PWM, PWM_CLEANING);
 8001948:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <moveMotor+0x1bc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	eeb0 0a67 	vmov.f32	s0, s15
 8001958:	2002      	movs	r0, #2
 800195a:	f003 fd97 	bl	800548c <pwm>
}
 800195e:	e02d      	b.n	80019bc <moveMotor+0x194>
				pwm(Spindle_M3_PWM, PWM_FAST);
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <moveMotor+0x1ac>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196c:	eeb0 0a67 	vmov.f32	s0, s15
 8001970:	2002      	movs	r0, #2
 8001972:	f003 fd8b 	bl	800548c <pwm>
}
 8001976:	e021      	b.n	80019bc <moveMotor+0x194>
	} else if (motorNum == VALVEMOTOR) {
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d11e      	bne.n	80019bc <moveMotor+0x194>
		if (Dir == ON) {
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10d      	bne.n	80019a0 <moveMotor+0x178>
			digitalWrite(Relay_Output, HIGH);
 8001984:	2101      	movs	r1, #1
 8001986:	2003      	movs	r0, #3
 8001988:	f7ff fdb8 	bl	80014fc <digitalWrite>
			strcpy(ValveStatus, "Open");
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <moveMotor+0x1c0>)
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <moveMotor+0x1c4>)
 8001990:	6810      	ldr	r0, [r2, #0]
 8001992:	6018      	str	r0, [r3, #0]
 8001994:	7912      	ldrb	r2, [r2, #4]
 8001996:	711a      	strb	r2, [r3, #4]
			FreshValveStatus = 1;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <moveMotor+0x1c8>)
 800199a:	2201      	movs	r2, #1
 800199c:	701a      	strb	r2, [r3, #0]
}
 800199e:	e00d      	b.n	80019bc <moveMotor+0x194>
			digitalWrite(Relay_Output, LOW);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2003      	movs	r0, #3
 80019a4:	f7ff fdaa 	bl	80014fc <digitalWrite>
			strcpy(ValveStatus, "Close");
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <moveMotor+0x1c0>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <moveMotor+0x1cc>)
 80019ac:	6810      	ldr	r0, [r2, #0]
 80019ae:	6018      	str	r0, [r3, #0]
 80019b0:	8892      	ldrh	r2, [r2, #4]
 80019b2:	809a      	strh	r2, [r3, #4]
			FreshValveStatus = 0;
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <moveMotor+0x1c8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
}
 80019ba:	e7ff      	b.n	80019bc <moveMotor+0x194>
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200003ac 	.word	0x200003ac
 80019c8:	00000000 	.word	0x00000000
 80019cc:	200000f8 	.word	0x200000f8
 80019d0:	2000013c 	.word	0x2000013c
 80019d4:	20000138 	.word	0x20000138
 80019d8:	200003b0 	.word	0x200003b0
 80019dc:	20000100 	.word	0x20000100
 80019e0:	2000037e 	.word	0x2000037e
 80019e4:	20000140 	.word	0x20000140
 80019e8:	20000374 	.word	0x20000374
 80019ec:	08017ab4 	.word	0x08017ab4
 80019f0:	20000382 	.word	0x20000382
 80019f4:	08017abc 	.word	0x08017abc

080019f8 <checkFaultsMotors>:


void checkFaultsMotors(uint8_t x) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]

	GetADC();
 8001a02:	f000 f851 	bl	8001aa8 <GetADC>
	// Used to check pause status
	ReadKeypadVar(CONTROL);
 8001a06:	2002      	movs	r0, #2
 8001a08:	f000 fe28 	bl	800265c <ReadKeypadVar>
	if (isPausedOperation == TRUE) {
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <checkFaultsMotors+0x90>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d135      	bne.n	8001a80 <checkFaultsMotors+0x88>
		printLCD(3, "PAUSE", NO_SYMBOL);
 8001a14:	2200      	movs	r2, #0
 8001a16:	491d      	ldr	r1, [pc, #116]	; (8001a8c <checkFaultsMotors+0x94>)
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f001 fa73 	bl	8002f04 <printLCD>
		int isvalveopenOld = isValveOpen; // Store last valve state
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <checkFaultsMotors+0x98>)
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	60fb      	str	r3, [r7, #12]

		while (isPausedOperation == TRUE) {
 8001a24:	e014      	b.n	8001a50 <checkFaultsMotors+0x58>
			SerialPrintln("STUCK IN PAUSE");
 8001a26:	481b      	ldr	r0, [pc, #108]	; (8001a94 <checkFaultsMotors+0x9c>)
 8001a28:	f001 fe40 	bl	80036ac <SerialPrintln>
			ReadKeypadVar(CONTROL);
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f000 fe15 	bl	800265c <ReadKeypadVar>
			moveMotor(CAPMOTOR, OFF, INT_INF);
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <checkFaultsMotors+0xa0>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	2002      	movs	r0, #2
 8001a38:	f7ff fef6 	bl	8001828 <moveMotor>
			moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8001a3c:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <checkFaultsMotors+0xa0>)
 8001a3e:	2100      	movs	r1, #0
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff fef1 	bl	8001828 <moveMotor>
			moveMotor(VALVEMOTOR, OFF, INT_INF);
 8001a46:	4a14      	ldr	r2, [pc, #80]	; (8001a98 <checkFaultsMotors+0xa0>)
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f7ff feec 	bl	8001828 <moveMotor>
		while (isPausedOperation == TRUE) {
 8001a50:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <checkFaultsMotors+0x90>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d0e6      	beq.n	8001a26 <checkFaultsMotors+0x2e>
		}

		// Display relevant information on LCD based on the operation mode
		if (isDemoCleaning == TRUE) {
 8001a58:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <checkFaultsMotors+0xa4>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <checkFaultsMotors+0x74>
			printLCD(3, "CLEANING", NO_SYMBOL);
 8001a60:	2200      	movs	r2, #0
 8001a62:	490f      	ldr	r1, [pc, #60]	; (8001aa0 <checkFaultsMotors+0xa8>)
 8001a64:	2003      	movs	r0, #3
 8001a66:	f001 fa4d 	bl	8002f04 <printLCD>
 8001a6a:	e004      	b.n	8001a76 <checkFaultsMotors+0x7e>
		} else {
			printLCD(3, " ", NO_SYMBOL);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	490d      	ldr	r1, [pc, #52]	; (8001aa4 <checkFaultsMotors+0xac>)
 8001a70:	2003      	movs	r0, #3
 8001a72:	f001 fa47 	bl	8002f04 <printLCD>
		}

		// Resume operation after pause
		moveMotor(VALVEMOTOR, isvalveopenOld, INT_INF); // Revert valve to its previous state
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <checkFaultsMotors+0xa0>)
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f7ff fed4 	bl	8001828 <moveMotor>
	}
}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200003dd 	.word	0x200003dd
 8001a8c:	08017ac4 	.word	0x08017ac4
 8001a90:	2000036c 	.word	0x2000036c
 8001a94:	08017acc 	.word	0x08017acc
 8001a98:	0098967f 	.word	0x0098967f
 8001a9c:	200003e0 	.word	0x200003e0
 8001aa0:	08017adc 	.word	0x08017adc
 8001aa4:	08017ae8 	.word	0x08017ae8

08001aa8 <GetADC>:

void GetADC()
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0

}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001abc:	f3bf 8f4f 	dsb	sy
}
 8001ac0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <__NVIC_SystemReset+0x24>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001aca:	4904      	ldr	r1, [pc, #16]	; (8001adc <__NVIC_SystemReset+0x24>)
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <__NVIC_SystemReset+0x28>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad2:	f3bf 8f4f 	dsb	sy
}
 8001ad6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <__NVIC_SystemReset+0x20>
 8001adc:	e000ed00 	.word	0xe000ed00
 8001ae0:	05fa0004 	.word	0x05fa0004

08001ae4 <HAL_GPIO_EXTI_Callback>:
 * @brief  GPIO Interrupt Check Callback Function when Triggered for using interrupts.
 * @param  GPIO_Pin :Pin number for the interrupt
 * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) /* @fn Callback Function*/
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
// Check which pin triggered the interrupt and Callbacks Power Button Interrupts for turning on and turning off the machine
	// Check button state
	if (GPIO_Pin == Button_Power_Interrupt_PullUp_Pin) {
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d11b      	bne.n	8001b2c <HAL_GPIO_EXTI_Callback+0x48>
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear interrupt flag
 8001af4:	4a99      	ldr	r2, [pc, #612]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x278>)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	6153      	str	r3, [r2, #20]

		if (HAL_GPIO_ReadPin(Button_Power_Interrupt_PullUp_GPIO_Port, Button_Power_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) {
 8001afa:	2110      	movs	r1, #16
 8001afc:	4898      	ldr	r0, [pc, #608]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001afe:	f006 fb93 	bl	8008228 <HAL_GPIO_ReadPin>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10b      	bne.n	8001b20 <HAL_GPIO_EXTI_Callback+0x3c>
			// Button pressed: Record press time and reset action flag
			PowerButtonPressTime = HAL_GetTick();
 8001b08:	f004 ff46 	bl	8006998 <HAL_GetTick>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a95      	ldr	r2, [pc, #596]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b10:	6013      	str	r3, [r2, #0]
			actionTaken = 0;
 8001b12:	4b95      	ldr	r3, [pc, #596]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x284>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
			SerialPrintln("Power Button Pressed");
 8001b18:	4894      	ldr	r0, [pc, #592]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x288>)
 8001b1a:	f001 fdc7 	bl	80036ac <SerialPrintln>
 8001b1e:	e005      	b.n	8001b2c <HAL_GPIO_EXTI_Callback+0x48>
		} else {
			// Button released: Reset press time
			PowerButtonPressTime = 0;
 8001b20:	4b90      	ldr	r3, [pc, #576]	; (8001d64 <HAL_GPIO_EXTI_Callback+0x280>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
			SerialPrintln("Power Button Released");
 8001b26:	4892      	ldr	r0, [pc, #584]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001b28:	f001 fdc0 	bl	80036ac <SerialPrintln>
	                }
	            }
	        }
	   }
*/
	if (GPIO_Pin == Button_Clean_Interrupt_PullUp_Pin) {
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d17c      	bne.n	8001c2c <HAL_GPIO_EXTI_Callback+0x148>
		        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the interrupt flag
 8001b32:	4a8a      	ldr	r2, [pc, #552]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x278>)
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	6153      	str	r3, [r2, #20]
		        SerialPrintln("Cleaning Started at start\n");
 8001b38:	488e      	ldr	r0, [pc, #568]	; (8001d74 <HAL_GPIO_EXTI_Callback+0x290>)
 8001b3a:	f001 fdb7 	bl	80036ac <SerialPrintln>
		        static uint32_t buttonPressStartTime = 0; // Track when the button was pressed
		        static uint8_t buttonState = 0;          // 0: Released, 1: Pressed
		        static uint8_t buttonPressCount = 0;     // Tracks button presses during cleaning

		        if (HAL_GPIO_ReadPin(Button_Clean_Interrupt_PullUp_GPIO_Port, Button_Clean_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) {
 8001b3e:	2104      	movs	r1, #4
 8001b40:	4887      	ldr	r0, [pc, #540]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001b42:	f006 fb71 	bl	8008228 <HAL_GPIO_ReadPin>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d110      	bne.n	8001b6e <HAL_GPIO_EXTI_Callback+0x8a>
		            // Button pressed
		            if (buttonState == 0) { // Detect initial press
 8001b4c:	4b8a      	ldr	r3, [pc, #552]	; (8001d78 <HAL_GPIO_EXTI_Callback+0x294>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f040 81d1 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
		                buttonPressStartTime = HAL_GetTick(); // Record press start time
 8001b56:	f004 ff1f 	bl	8006998 <HAL_GetTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4a87      	ldr	r2, [pc, #540]	; (8001d7c <HAL_GPIO_EXTI_Callback+0x298>)
 8001b5e:	6013      	str	r3, [r2, #0]
		                buttonState = 1;
 8001b60:	4b85      	ldr	r3, [pc, #532]	; (8001d78 <HAL_GPIO_EXTI_Callback+0x294>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
		                SerialPrintln("Button State Change at start\n");
 8001b66:	4886      	ldr	r0, [pc, #536]	; (8001d80 <HAL_GPIO_EXTI_Callback+0x29c>)
 8001b68:	f001 fda0 	bl	80036ac <SerialPrintln>
					ServoDC_M1_EncB_Pulses--;
				}
			}
		}

}
 8001b6c:	e1c4      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
		            if (buttonState == 1) { // Detect release
 8001b6e:	4b82      	ldr	r3, [pc, #520]	; (8001d78 <HAL_GPIO_EXTI_Callback+0x294>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	f040 81c0 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
		                uint32_t pressDuration = HAL_GetTick() - buttonPressStartTime; // Calculate press duration
 8001b78:	f004 ff0e 	bl	8006998 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_GPIO_EXTI_Callback+0x298>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	60fb      	str	r3, [r7, #12]
		                buttonState = 0;
 8001b86:	4b7c      	ldr	r3, [pc, #496]	; (8001d78 <HAL_GPIO_EXTI_Callback+0x294>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
		                if (CleaningOperationFlag == FALSE && pressDuration >= BUTTON_HOLD_TIME_ON ) {
 8001b8c:	4b7d      	ldr	r3, [pc, #500]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d113      	bne.n	8001bbe <HAL_GPIO_EXTI_Callback+0xda>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001b9c:	d30f      	bcc.n	8001bbe <HAL_GPIO_EXTI_Callback+0xda>
		                	CleaningOperationFlag = TRUE; // Start cleaning
 8001b9e:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]
		                	cleanLongPressed = TRUE;
 8001ba4:	4b78      	ldr	r3, [pc, #480]	; (8001d88 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
							UserCleaningCycleNumber = 1;  // Initialize cleaning cycle count
 8001baa:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
							buttonPressCount = 0;         // Reset button press count
 8001bb0:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
							SerialPrintln("Cleaning Started\n");
 8001bb6:	4877      	ldr	r0, [pc, #476]	; (8001d94 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8001bb8:	f001 fd78 	bl	80036ac <SerialPrintln>
}
 8001bbc:	e19c      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
		                    if (CleaningOperationFlag == TRUE && pressDuration < 500) { // Short press
 8001bbe:	4b71      	ldr	r3, [pc, #452]	; (8001d84 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	f040 8197 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bd0:	f080 8192 	bcs.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
		                        buttonPressCount++;
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001bde:	701a      	strb	r2, [r3, #0]
							   if (buttonPressCount > 3) {
 8001be0:	4b6b      	ldr	r3, [pc, #428]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d910      	bls.n	8001c0a <HAL_GPIO_EXTI_Callback+0x126>
								   if (UserCleaningCycleNumber > 1) {
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d907      	bls.n	8001c02 <HAL_GPIO_EXTI_Callback+0x11e>
									    if(UserCleaningCycleNumber > 3)
 8001bf2:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d902      	bls.n	8001c02 <HAL_GPIO_EXTI_Callback+0x11e>
									    	UserCleaningCycleNumber = 1;
 8001bfc:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
								   buttonPressCount = 0; // Reset press count
 8001c02:	4b63      	ldr	r3, [pc, #396]	; (8001d90 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
}
 8001c08:	e176      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
								   if (UserCleaningCycleNumber < MAXCLEANCYCLESALLOWED) {
 8001c0a:	4b60      	ldr	r3, [pc, #384]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	f200 8171 	bhi.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
									   UserCleaningCycleNumber++;
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_GPIO_EXTI_Callback+0x2a8>)
 8001c22:	701a      	strb	r2, [r3, #0]
									   SerialPrintln("Increased Cleaning Cycle\n");
 8001c24:	485c      	ldr	r0, [pc, #368]	; (8001d98 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8001c26:	f001 fd41 	bl	80036ac <SerialPrintln>
}
 8001c2a:	e165      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Clamp_M2_Prox_Interrupt_Pin)
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d128      	bne.n	8001c84 <HAL_GPIO_EXTI_Callback+0x1a0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c32:	4a4a      	ldr	r2, [pc, #296]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x278>)
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) == 1) {
 8001c38:	2101      	movs	r1, #1
 8001c3a:	4858      	ldr	r0, [pc, #352]	; (8001d9c <HAL_GPIO_EXTI_Callback+0x2b8>)
 8001c3c:	f006 faf4 	bl	8008228 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d111      	bne.n	8001c6a <HAL_GPIO_EXTI_Callback+0x186>
			Clamp_M2_EncA_Pulses = 0;
 8001c46:	4b56      	ldr	r3, [pc, #344]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
			Clamp_M2_EncB_Pulses = 0;
 8001c4c:	4b55      	ldr	r3, [pc, #340]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
			pwm(Clamp_M2_PWM, 0);
 8001c52:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8001da8 <HAL_GPIO_EXTI_Callback+0x2c4>
 8001c56:	2001      	movs	r0, #1
 8001c58:	f003 fc18 	bl	800548c <pwm>
			isClampLimitSwitchReached = TRUE;
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
			SerialPrint("Clamp Interrupt M2 Limit rising\n");
 8001c62:	4853      	ldr	r0, [pc, #332]	; (8001db0 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001c64:	f001 fd0c 	bl	8003680 <SerialPrint>
}
 8001c68:	e146      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			Clamp_M2_EncA_Pulses = 1;
 8001c6a:	4b4d      	ldr	r3, [pc, #308]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
			Clamp_M2_EncB_Pulses = 1;
 8001c70:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]
			isClampLimitSwitchReached = FALSE;
 8001c76:	4b4d      	ldr	r3, [pc, #308]	; (8001dac <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
			SerialPrint("Clamp Interrupt M2 Limit falling\n");
 8001c7c:	484d      	ldr	r0, [pc, #308]	; (8001db4 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001c7e:	f001 fcff 	bl	8003680 <SerialPrint>
}
 8001c82:	e139      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Clamp_M2_EncA_Interrupt_Pin)
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	d121      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0x1ea>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c8a:	4a34      	ldr	r2, [pc, #208]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x278>)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	6153      	str	r3, [r2, #20]
		if(!isClampLimitSwitchReached){
 8001c90:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 812f 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			if(ClampMotorState == CCW){
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d105      	bne.n	8001cae <HAL_GPIO_EXTI_Callback+0x1ca>
				Clamp_M2_EncA_Pulses++;
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a3d      	ldr	r2, [pc, #244]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	e124      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			else if(ClampMotorState == CW && Clamp_M2_EncA_Pulses > 1){
 8001cae:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	f040 8120 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001cb8:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f340 811b 	ble.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				Clamp_M2_EncA_Pulses--;
 8001cc2:	4b37      	ldr	r3, [pc, #220]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	4a35      	ldr	r2, [pc, #212]	; (8001da0 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	e114      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Clamp_M2_EncB__Interrupt_Pin)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d121      	bne.n	8001d18 <HAL_GPIO_EXTI_Callback+0x234>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd4:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x278>)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	6153      	str	r3, [r2, #20]
			if(!isClampLimitSwitchReached){
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f040 810a 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				if(ClampMotorState == CCW){
 8001ce4:	4b34      	ldr	r3, [pc, #208]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d105      	bne.n	8001cf8 <HAL_GPIO_EXTI_Callback+0x214>
					Clamp_M2_EncB_Pulses++;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4a2c      	ldr	r2, [pc, #176]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001cf4:	6013      	str	r3, [r2, #0]
}
 8001cf6:	e0ff      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				else if(ClampMotorState == CW && Clamp_M2_EncB_Pulses > 1){
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	f040 80fb 	bne.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	f340 80f6 	ble.w	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
					Clamp_M2_EncB_Pulses--;
 8001d0c:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <HAL_GPIO_EXTI_Callback+0x2c0>)
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	e0ef      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Spindle_M3_Prox_Interrupt_Pin)
 8001d18:	88fb      	ldrh	r3, [r7, #6]
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1e:	d162      	bne.n	8001de6 <HAL_GPIO_EXTI_Callback+0x302>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_GPIO_EXTI_Callback+0x278>)
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) == 1) {
 8001d26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001d2c:	f006 fa7c 	bl	8008228 <HAL_GPIO_ReadPin>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d14a      	bne.n	8001dcc <HAL_GPIO_EXTI_Callback+0x2e8>
			Spindle_M3_EncA_Pulses=0;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_GPIO_EXTI_Callback+0x2d8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
			Spindle_M3_EncB_Pulses=0;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
			pwm(Spindle_M3_PWM, 0);
 8001d42:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001da8 <HAL_GPIO_EXTI_Callback+0x2c4>
 8001d46:	2002      	movs	r0, #2
 8001d48:	f003 fba0 	bl	800548c <pwm>
			isSpindleLimitSwitchReached = TRUE;
 8001d4c:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
			SerialPrint("Spindle Interrupt M3 Limit rising\n");
 8001d52:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001d54:	f001 fc94 	bl	8003680 <SerialPrint>
}
 8001d58:	e0ce      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001d5a:	bf00      	nop
 8001d5c:	40013c00 	.word	0x40013c00
 8001d60:	40020000 	.word	0x40020000
 8001d64:	200003d8 	.word	0x200003d8
 8001d68:	200003a8 	.word	0x200003a8
 8001d6c:	08017aec 	.word	0x08017aec
 8001d70:	08017b04 	.word	0x08017b04
 8001d74:	08017b1c 	.word	0x08017b1c
 8001d78:	200003c8 	.word	0x200003c8
 8001d7c:	200003cc 	.word	0x200003cc
 8001d80:	08017b38 	.word	0x08017b38
 8001d84:	2000037f 	.word	0x2000037f
 8001d88:	200003de 	.word	0x200003de
 8001d8c:	200000f1 	.word	0x200000f1
 8001d90:	200003d0 	.word	0x200003d0
 8001d94:	08017b58 	.word	0x08017b58
 8001d98:	08017b6c 	.word	0x08017b6c
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	200000f8 	.word	0x200000f8
 8001da4:	200000fc 	.word	0x200000fc
 8001da8:	00000000 	.word	0x00000000
 8001dac:	20000108 	.word	0x20000108
 8001db0:	08017b88 	.word	0x08017b88
 8001db4:	08017bac 	.word	0x08017bac
 8001db8:	200003ac 	.word	0x200003ac
 8001dbc:	20000100 	.word	0x20000100
 8001dc0:	20000104 	.word	0x20000104
 8001dc4:	20000109 	.word	0x20000109
 8001dc8:	08017bd0 	.word	0x08017bd0
			Spindle_M3_EncA_Pulses = 1;
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
			Spindle_M3_EncB_Pulses = 1;
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x420>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
			isSpindleLimitSwitchReached = FALSE;
 8001dd8:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x424>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
			SerialPrint("Spindle Interrupt M3 Limit falling\n");
 8001dde:	484b      	ldr	r0, [pc, #300]	; (8001f0c <HAL_GPIO_EXTI_Callback+0x428>)
 8001de0:	f001 fc4e 	bl	8003680 <SerialPrint>
}
 8001de4:	e088      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Spindle_M3_EncA_Interrupt_Pin)
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d11e      	bne.n	8001e2a <HAL_GPIO_EXTI_Callback+0x346>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x42c>)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	6153      	str	r3, [r2, #20]
		if(!isSpindleLimitSwitchReached){
 8001df2:	4b45      	ldr	r3, [pc, #276]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x424>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d17e      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			if(SpindleMotorState == CW){
 8001dfa:	4b46      	ldr	r3, [pc, #280]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x430>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_GPIO_EXTI_Callback+0x32a>
				Spindle_M3_EncA_Pulses++;
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	e074      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			else if(SpindleMotorState == CCW && Spindle_M3_EncA_Pulses > 1){
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x430>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d170      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001e16:	4b3a      	ldr	r3, [pc, #232]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	dd6c      	ble.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				Spindle_M3_EncA_Pulses--;
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <HAL_GPIO_EXTI_Callback+0x41c>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	e066      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Spindle_M3_EncB_Interrupt_Pin)
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e30:	d11e      	bne.n	8001e70 <HAL_GPIO_EXTI_Callback+0x38c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e32:	4a37      	ldr	r2, [pc, #220]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x42c>)
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	6153      	str	r3, [r2, #20]
		if(!isSpindleLimitSwitchReached){
 8001e38:	4b33      	ldr	r3, [pc, #204]	; (8001f08 <HAL_GPIO_EXTI_Callback+0x424>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d15b      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			if(SpindleMotorState == CW){
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x430>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_GPIO_EXTI_Callback+0x370>
				Spindle_M3_EncB_Pulses++;
 8001e48:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x420>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x420>)
 8001e50:	6013      	str	r3, [r2, #0]
}
 8001e52:	e051      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			else if(SpindleMotorState == CCW && Spindle_M3_EncB_Pulses > 1){
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_GPIO_EXTI_Callback+0x430>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d14d      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x420>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	dd49      	ble.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				Spindle_M3_EncB_Pulses--;
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x420>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	4a26      	ldr	r2, [pc, #152]	; (8001f04 <HAL_GPIO_EXTI_Callback+0x420>)
 8001e6c:	6013      	str	r3, [r2, #0]
}
 8001e6e:	e043      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == ServoDC_M1_Prox_Interrupt_Pin)
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e76:	d11d      	bne.n	8001eb4 <HAL_GPIO_EXTI_Callback+0x3d0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e78:	4a25      	ldr	r2, [pc, #148]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x42c>)
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) == 1) {
 8001e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e82:	4825      	ldr	r0, [pc, #148]	; (8001f18 <HAL_GPIO_EXTI_Callback+0x434>)
 8001e84:	f006 f9d0 	bl	8008228 <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_GPIO_EXTI_Callback+0x3c2>
			isServoLimitSwitchReached = TRUE;
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x438>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
			SerialPrint("Interrupt Servo/DC Limit rising\n");
 8001e94:	4822      	ldr	r0, [pc, #136]	; (8001f20 <HAL_GPIO_EXTI_Callback+0x43c>)
 8001e96:	f001 fbf3 	bl	8003680 <SerialPrint>
			pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt,0);
 8001e9a:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001f24 <HAL_GPIO_EXTI_Callback+0x440>
 8001e9e:	2005      	movs	r0, #5
 8001ea0:	f003 faf4 	bl	800548c <pwm>
}
 8001ea4:	e028      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			isServoLimitSwitchReached = FALSE;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x438>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
			SerialPrint("Interrupt Servo/DC Limit falling\n");
 8001eac:	481e      	ldr	r0, [pc, #120]	; (8001f28 <HAL_GPIO_EXTI_Callback+0x444>)
 8001eae:	f001 fbe7 	bl	8003680 <SerialPrint>
}
 8001eb2:	e021      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == ServoDC_M1_EncB_Interrupt_Pin)
 8001eb4:	88fb      	ldrh	r3, [r7, #6]
 8001eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eba:	d11d      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <HAL_GPIO_EXTI_Callback+0x42c>)
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	6153      	str	r3, [r2, #20]
			if(!isServoLimitSwitchReached){
 8001ec2:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <HAL_GPIO_EXTI_Callback+0x438>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				if(ServoDCMotorState == CW){
 8001eca:	4b18      	ldr	r3, [pc, #96]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x448>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d105      	bne.n	8001ede <HAL_GPIO_EXTI_Callback+0x3fa>
					ServoDC_M1_EncB_Pulses++;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x44c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x44c>)
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	e00c      	b.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
				else if(ServoDCMotorState == CCW && ServoDC_M1_EncB_Pulses > 1){
 8001ede:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <HAL_GPIO_EXTI_Callback+0x448>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x44c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	dd04      	ble.n	8001ef8 <HAL_GPIO_EXTI_Callback+0x414>
					ServoDC_M1_EncB_Pulses--;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x44c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_GPIO_EXTI_Callback+0x44c>)
 8001ef6:	6013      	str	r3, [r2, #0]
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000100 	.word	0x20000100
 8001f04:	20000104 	.word	0x20000104
 8001f08:	20000109 	.word	0x20000109
 8001f0c:	08017bf4 	.word	0x08017bf4
 8001f10:	40013c00 	.word	0x40013c00
 8001f14:	200003b0 	.word	0x200003b0
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	2000010a 	.word	0x2000010a
 8001f20:	08017c18 	.word	0x08017c18
 8001f24:	00000000 	.word	0x00000000
 8001f28:	08017c3c 	.word	0x08017c3c
 8001f2c:	200003b4 	.word	0x200003b4
 8001f30:	200000f4 	.word	0x200000f4

08001f34 <Blink>:
/**
 * @brief  PowerButton Interrupt Check Callback Function when Triggered for using interrupts.
 * @param  None
 * @retval None
*/
void Blink() { // If the power button is not held, we can check for loadcell reading!
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Button_Power_Interrupt_PullUp_GPIO_Port, Button_Power_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) { // GPIO_PIN_RESET)
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	484c      	ldr	r0, [pc, #304]	; (8002070 <Blink+0x13c>)
 8001f3e:	f006 f973 	bl	8008228 <HAL_GPIO_ReadPin>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d13b      	bne.n	8001fc0 <Blink+0x8c>
	        // Button is being held
	        uint32_t holdTime = HAL_GetTick() - PowerButtonPressTime;
 8001f48:	f004 fd26 	bl	8006998 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <Blink+0x140>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]

	        if (!actionTaken) {
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <Blink+0x144>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d12f      	bne.n	8001fc0 <Blink+0x8c>
	            if (!isMachineOn && holdTime >= BUTTON_HOLD_TIME_ON) {
 8001f60:	4b46      	ldr	r3, [pc, #280]	; (800207c <Blink+0x148>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11b      	bne.n	8001fa0 <Blink+0x6c>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f6e:	d317      	bcc.n	8001fa0 <Blink+0x6c>
	                // Turn ON the system if held for 2 seconds
	            	isMachineOn = 1; // Set system state to ON
 8001f70:	4b42      	ldr	r3, [pc, #264]	; (800207c <Blink+0x148>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
	            	SerialPrintln("MACHINE ON");
 8001f76:	4842      	ldr	r0, [pc, #264]	; (8002080 <Blink+0x14c>)
 8001f78:	f001 fb98 	bl	80036ac <SerialPrintln>
	                actionTaken = 1; // Prevent repeated toggling
 8001f7c:	4b3e      	ldr	r3, [pc, #248]	; (8002078 <Blink+0x144>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
	             //just testing
				if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <Blink+0x150>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d11a      	bne.n	8001fc0 <Blink+0x8c>
						powerLEDControl(!isPowerLEDOn);
 8001f8a:	4b3f      	ldr	r3, [pc, #252]	; (8002088 <Blink+0x154>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bf0c      	ite	eq
 8001f92:	2301      	moveq	r3, #1
 8001f94:	2300      	movne	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f001 f841 	bl	8003020 <powerLEDControl>
				if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
 8001f9e:	e00f      	b.n	8001fc0 <Blink+0x8c>
					}
	            } else if (isMachineOn && holdTime >= BUTTON_HOLD_TIME_OFF) {
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <Blink+0x148>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <Blink+0x8c>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fae:	d307      	bcc.n	8001fc0 <Blink+0x8c>
	                // Turn OFF the system if held for 500 ms
	            	isMachineOn = 0; // Set system state to ON
 8001fb0:	4b32      	ldr	r3, [pc, #200]	; (800207c <Blink+0x148>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	            	SerialPrintln("MACHINE OFF");
 8001fb6:	4835      	ldr	r0, [pc, #212]	; (800208c <Blink+0x158>)
 8001fb8:	f001 fb78 	bl	80036ac <SerialPrintln>
	            	NVIC_SystemReset();  /// Reset the STM32 when turning off
 8001fbc:	f7ff fd7c 	bl	8001ab8 <__NVIC_SystemReset>
	    }

	/*if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
		powerLEDControl(!isPowerLEDOn);
	}*/
	if (isScreenLoading == TRUE) {
 8001fc0:	4b33      	ldr	r3, [pc, #204]	; (8002090 <Blink+0x15c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d11f      	bne.n	8002008 <Blink+0xd4>
		size_t len = strlen(DotString);
 8001fc8:	4832      	ldr	r0, [pc, #200]	; (8002094 <Blink+0x160>)
 8001fca:	f7fe f951 	bl	8000270 <strlen>
 8001fce:	6038      	str	r0, [r7, #0]
		if (len < LCD_COLUMN_COUNT) {
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	2b13      	cmp	r3, #19
 8001fd4:	d80a      	bhi.n	8001fec <Blink+0xb8>
			DotString[len] = '.';
 8001fd6:	4a2f      	ldr	r2, [pc, #188]	; (8002094 <Blink+0x160>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	222e      	movs	r2, #46	; 0x2e
 8001fde:	701a      	strb	r2, [r3, #0]
			DotString[len + 1] = '\0'; // Ensure string is null-terminated
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	; (8002094 <Blink+0x160>)
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	54d1      	strb	r1, [r2, r3]
 8001fea:	e008      	b.n	8001ffe <Blink+0xca>
		} else {
			memset(DotString, 0, strlen(DotString));
 8001fec:	4829      	ldr	r0, [pc, #164]	; (8002094 <Blink+0x160>)
 8001fee:	f7fe f93f 	bl	8000270 <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4826      	ldr	r0, [pc, #152]	; (8002094 <Blink+0x160>)
 8001ffa:	f012 f9b8 	bl	801436e <memset>
		}
		printLCD(0, DotString, NO_SYMBOL);
 8001ffe:	2200      	movs	r2, #0
 8002000:	4924      	ldr	r1, [pc, #144]	; (8002094 <Blink+0x160>)
 8002002:	2000      	movs	r0, #0
 8002004:	f000 ff7e 	bl	8002f04 <printLCD>
	}
	static uint8_t skipRead = FALSE;
	static long delTimer = 0;
	static uint8_t dellaststate = FALSE;
	if (skipRead == TRUE) {
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <Blink+0x164>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d103      	bne.n	8002018 <Blink+0xe4>
		skipRead = FALSE;
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <Blink+0x164>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
	}
	else{
		dellaststate = FALSE;
	}

}
 8002016:	e027      	b.n	8002068 <Blink+0x134>
	else if(digitalRead(Button_DelBack_Input_PullUp) == LOW){
 8002018:	2002      	movs	r0, #2
 800201a:	f7ff fa4d 	bl	80014b8 <digitalRead>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d11e      	bne.n	8002062 <Blink+0x12e>
		if(dellaststate == FALSE){
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <Blink+0x168>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <Blink+0x10c>
			dellaststate = TRUE;
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <Blink+0x168>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
			delTimer = HAL_GetTick();
 8002032:	f004 fcb1 	bl	8006998 <HAL_GetTick>
 8002036:	4603      	mov	r3, r0
 8002038:	461a      	mov	r2, r3
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <Blink+0x16c>)
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	e013      	b.n	8002068 <Blink+0x134>
		else if(HAL_GetTick() > delTimer + 900){
 8002040:	f004 fcaa 	bl	8006998 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <Blink+0x16c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f503 7361 	add.w	r3, r3, #900	; 0x384
 800204e:	429a      	cmp	r2, r3
 8002050:	d90a      	bls.n	8002068 <Blink+0x134>
			if(delLongPressed == FALSE){
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <Blink+0x170>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <Blink+0x134>
				delLongPressed = TRUE;
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <Blink+0x170>)
 800205c:	2201      	movs	r2, #1
 800205e:	701a      	strb	r2, [r3, #0]
}
 8002060:	e002      	b.n	8002068 <Blink+0x134>
		dellaststate = FALSE;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <Blink+0x168>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40020000 	.word	0x40020000
 8002074:	200003d8 	.word	0x200003d8
 8002078:	200003a8 	.word	0x200003a8
 800207c:	20000358 	.word	0x20000358
 8002080:	08017c60 	.word	0x08017c60
 8002084:	20000488 	.word	0x20000488
 8002088:	20000489 	.word	0x20000489
 800208c:	08017c6c 	.word	0x08017c6c
 8002090:	2000048a 	.word	0x2000048a
 8002094:	2000048c 	.word	0x2000048c
 8002098:	200003d1 	.word	0x200003d1
 800209c:	200003d2 	.word	0x200003d2
 80020a0:	200003d4 	.word	0x200003d4
 80020a4:	200003df 	.word	0x200003df

080020a8 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Timer Callback Function when Triggered for using interrupts.
 * @param  TIM_HandleTypeDef: Timer handler type.
 * @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a96      	ldr	r2, [pc, #600]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d101      	bne.n	80020be <HAL_TIM_PeriodElapsedCallback+0x16>
	    HAL_IncTick();
 80020ba:	f004 fc59 	bl	8006970 <HAL_IncTick>
	  }
	if(htim->Instance == TIM2){ /// Timer 2 Interrupt, called every 500mS
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c6:	d101      	bne.n	80020cc <HAL_TIM_PeriodElapsedCallback+0x24>
	 Blink();
 80020c8:	f7ff ff34 	bl	8001f34 <Blink>
			SerialPrint("CLEANING PROCESS STARTED\n");
			CleaningButtonStillHeld = FALSE; // Prevent repeated toggling while held
		}
*/
	}
	if (htim->Instance == TIM6) {		        // Increment time counters
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a90      	ldr	r2, [pc, #576]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d11f      	bne.n	8002116 <HAL_TIM_PeriodElapsedCallback+0x6e>
		seconds++;
 80020d6:	4b90      	ldr	r3, [pc, #576]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a8e      	ldr	r2, [pc, #568]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020de:	6013      	str	r3, [r2, #0]
		if (seconds >= 30) {
 80020e0:	4b8d      	ldr	r3, [pc, #564]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b1d      	cmp	r3, #29
 80020e6:	d913      	bls.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x68>
			seconds = 0;
 80020e8:	4b8b      	ldr	r3, [pc, #556]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
			minutes++;
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a89      	ldr	r2, [pc, #548]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020f6:	6013      	str	r3, [r2, #0]
			// Update the time to the SD card
			//UpdateTimeToSDCard(hours, minutes, seconds);
			if (minutes >= 60) {
 80020f8:	4b88      	ldr	r3, [pc, #544]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b3b      	cmp	r3, #59	; 0x3b
 80020fe:	d907      	bls.n	8002110 <HAL_TIM_PeriodElapsedCallback+0x68>
				minutes = 0;
 8002100:	4b86      	ldr	r3, [pc, #536]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
				hours++;
 8002106:	4b86      	ldr	r3, [pc, #536]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a84      	ldr	r2, [pc, #528]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800210e:	6013      	str	r3, [r2, #0]
				/*if (hours >= 24) {
					hours = 0; // Reset after 24 hours
				}*/
			}
		}
		log_to_sd_flag = 1;
 8002110:	4b84      	ldr	r3, [pc, #528]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
 }
	if (htim->Instance == TIM7){/// Timer 7 Interrupt, called every 100mS
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a83      	ldr	r2, [pc, #524]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800211c:	4293      	cmp	r3, r2
 800211e:	f040 8089 	bne.w	8002234 <HAL_TIM_PeriodElapsedCallback+0x18c>
		// Your code to execute every 100 ms
		Tareweight = Total_Weight;
 8002122:	4b82      	ldr	r3, [pc, #520]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a82      	ldr	r2, [pc, #520]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002128:	6013      	str	r3, [r2, #0]
		if (CleaningOperationFlag == TRUE) {
 800212a:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d11e      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0xca>
			//Cleaning exit logic
			if (readKeypadNonBlock(ALL) == ENTERKEY) {
 8002134:	2000      	movs	r0, #0
 8002136:	f000 fadd 	bl	80026f4 <readKeypadNonBlock>
 800213a:	4603      	mov	r3, r0
 800213c:	2b0b      	cmp	r3, #11
 800213e:	d118      	bne.n	8002172 <HAL_TIM_PeriodElapsedCallback+0xca>
				CleaningExitCounter = CleaningExitCounter + 1;
 8002140:	4b7d      	ldr	r3, [pc, #500]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800214a:	701a      	strb	r2, [r3, #0]
				if (CleaningExitCounter > 10) //3 Seconds Read button
 800214c:	4b7a      	ldr	r3, [pc, #488]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b0a      	cmp	r3, #10
 8002152:	d90e      	bls.n	8002172 <HAL_TIM_PeriodElapsedCallback+0xca>
				{
					CleaningExit = TRUE;
 8002154:	4b79      	ldr	r3, [pc, #484]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
					CleaningCancelFlag = TRUE;
 800215a:	4b79      	ldr	r3, [pc, #484]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
                    SerialPrintln("reached 10 times");
 8002160:	4878      	ldr	r0, [pc, #480]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002162:	f001 faa3 	bl	80036ac <SerialPrintln>
#endif
					CleaningExitCounter = 0;
 8002166:	4b74      	ldr	r3, [pc, #464]	; (8002338 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
					CleaningExit = FALSE;
 800216c:	4b73      	ldr	r3, [pc, #460]	; (800233c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
			  {
				   UserCleaningCycleNumber = cleancyclepressed;
			  }
			  */
		}
		if(adc_pressure > 100)
 8002172:	4b75      	ldr	r3, [pc, #468]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d904      	bls.n	8002184 <HAL_TIM_PeriodElapsedCallback+0xdc>
		{
			moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve OFF
 800217a:	4a74      	ldr	r2, [pc, #464]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800217c:	2100      	movs	r1, #0
 800217e:	2003      	movs	r0, #3
 8002180:	f7ff fb52 	bl	8001828 <moveMotor>
		}


#if DEBUG == 1
		 SerialPrintINT(Total_Weight);
 8002184:	4b69      	ldr	r3, [pc, #420]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f001 fac5 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 800218e:	4870      	ldr	r0, [pc, #448]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002190:	f001 fa76 	bl	8003680 <SerialPrint>
		 SerialPrintINT(Clamp_M2_EncA_Pulses);
 8002194:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f001 fabd 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 800219e:	486c      	ldr	r0, [pc, #432]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021a0:	f001 fa6e 	bl	8003680 <SerialPrint>
		 SerialPrintINT(Spindle_M3_EncA_Pulses);
 80021a4:	4b6c      	ldr	r3, [pc, #432]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f001 fab5 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 80021ae:	4868      	ldr	r0, [pc, #416]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021b0:	f001 fa66 	bl	8003680 <SerialPrint>
		 SerialPrintINT(percent);
 80021b4:	4b69      	ldr	r3, [pc, #420]	; (800235c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f001 faad 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 80021be:	4864      	ldr	r0, [pc, #400]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021c0:	f001 fa5e 	bl	8003680 <SerialPrint>
		 SerialPrintINT(adc_pressure);
 80021c4:	4b60      	ldr	r3, [pc, #384]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 faa5 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 80021ce:	4860      	ldr	r0, [pc, #384]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021d0:	f001 fa56 	bl	8003680 <SerialPrint>
		 SerialPrintINT(adc_CurrentSpindle);
 80021d4:	4b62      	ldr	r3, [pc, #392]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80021d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021da:	4618      	mov	r0, r3
 80021dc:	f001 fa9c 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 80021e0:	485b      	ldr	r0, [pc, #364]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021e2:	f001 fa4d 	bl	8003680 <SerialPrint>
		 SerialPrintINT(adc_CurrentServo);
 80021e6:	4b5f      	ldr	r3, [pc, #380]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80021e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f001 fa93 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 80021f2:	4857      	ldr	r0, [pc, #348]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80021f4:	f001 fa44 	bl	8003680 <SerialPrint>
		 SerialPrintINT(adc_CurrentClamp);
 80021f8:	4b5b      	ldr	r3, [pc, #364]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80021fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fe:	4618      	mov	r0, r3
 8002200:	f001 fa8a 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 8002204:	4852      	ldr	r0, [pc, #328]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002206:	f001 fa3b 	bl	8003680 <SerialPrint>
		 SerialPrintINT(Weight_Initial);
 800220a:	4b58      	ldr	r3, [pc, #352]	; (800236c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fa82 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 8002214:	484e      	ldr	r0, [pc, #312]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002216:	f001 fa33 	bl	8003680 <SerialPrint>
		 SerialPrintINT(Target_Weight);
 800221a:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f001 fa7a 	bl	8003718 <SerialPrintINT>
		 SerialPrint(",");
 8002224:	484a      	ldr	r0, [pc, #296]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002226:	f001 fa2b 	bl	8003680 <SerialPrint>
		 SerialPrintlnINT(FreshValveStatus);
 800222a:	4b52      	ldr	r3, [pc, #328]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f001 fa5c 	bl	80036ec <SerialPrintlnINT>


#endif
	 }

	if(htim->Instance == TIM10){ /// Timer 10 Interrupt, called every 1000mS - 1 Second
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d164      	bne.n	8002308 <HAL_TIM_PeriodElapsedCallback+0x260>
		 count1++;
 800223e:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	3301      	adds	r3, #1
 8002244:	4a4d      	ldr	r2, [pc, #308]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002246:	6013      	str	r3, [r2, #0]
		 adc_pressure  = pressureSensorReading();
 8002248:	f7fe ff8c 	bl	8001164 <pressureSensorReading>
 800224c:	eef0 7a40 	vmov.f32	s15, s0
 8002250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002254:	ee17 3a90 	vmov	r3, s15
 8002258:	b29a      	uxth	r2, r3
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800225c:	801a      	strh	r2, [r3, #0]
		 int temp_c1 =  analogRead(Curr_Sensor_Spindle_M3);
 800225e:	2002      	movs	r0, #2
 8002260:	f7fe fec6 	bl	8000ff0 <analogRead>
 8002264:	4603      	mov	r3, r0
 8002266:	617b      	str	r3, [r7, #20]
		 if(temp_c1 > temp_c11)
 8002268:	4b45      	ldr	r3, [pc, #276]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	429a      	cmp	r2, r3
 8002270:	dd02      	ble.n	8002278 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		 {
			 temp_c11 = temp_c1;
 8002272:	4a43      	ldr	r2, [pc, #268]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	6013      	str	r3, [r2, #0]
		 }

		 int  temp_c2 =  analogRead(Curr_Sensor_ServoDC_M1);
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe feb9 	bl	8000ff0 <analogRead>
 800227e:	4603      	mov	r3, r0
 8002280:	613b      	str	r3, [r7, #16]
		 if(temp_c2 > temp_c22)
 8002282:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	dd02      	ble.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x1ea>
		 {
			 temp_c22 = temp_c2;
 800228c:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	6013      	str	r3, [r2, #0]
		 }
		 int temp_c3 =  analogRead(Curr_Sensor_Clamp_M2);
 8002292:	2001      	movs	r0, #1
 8002294:	f7fe feac 	bl	8000ff0 <analogRead>
 8002298:	4603      	mov	r3, r0
 800229a:	60fb      	str	r3, [r7, #12]
		 if(temp_c3 > temp_c33)
 800229c:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dd02      	ble.n	80022ac <HAL_TIM_PeriodElapsedCallback+0x204>
		 {
			 temp_c33 = temp_c3;
 80022a6:	4a38      	ldr	r2, [pc, #224]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6013      	str	r3, [r2, #0]
		 }
		if(count1 == 10){
 80022ac:	4b33      	ldr	r3, [pc, #204]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b0a      	cmp	r3, #10
 80022b2:	d129      	bne.n	8002308 <HAL_TIM_PeriodElapsedCallback+0x260>
			 adc_CurrentSpindle = Convert_ADC_To_Current(temp_c11);
 80022b4:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe ff92 	bl	80011e4 <Convert_ADC_To_Current>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80022c6:	801a      	strh	r2, [r3, #0]
			 adc_CurrentClamp =  Convert_ADC_To_Current(temp_c33);
 80022c8:	4b2f      	ldr	r3, [pc, #188]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe ff88 	bl	80011e4 <Convert_ADC_To_Current>
 80022d4:	4603      	mov	r3, r0
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80022da:	801a      	strh	r2, [r3, #0]
			 adc_CurrentServo =  Convert_ADC_To_Current(temp_c22);
 80022dc:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe ff7e 	bl	80011e4 <Convert_ADC_To_Current>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80022ee:	801a      	strh	r2, [r3, #0]
			 temp_c11 = temp_c1 , temp_c22 =temp_c2, temp_c33 = temp_c3;
 80022f0:	4a23      	ldr	r2, [pc, #140]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6013      	str	r3, [r2, #0]
			 count1 = 0;
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
		  }
	}
}
 8002308:	bf00      	nop
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40010000 	.word	0x40010000
 8002314:	40001000 	.word	0x40001000
 8002318:	2000038c 	.word	0x2000038c
 800231c:	20000390 	.word	0x20000390
 8002320:	20000394 	.word	0x20000394
 8002324:	20000388 	.word	0x20000388
 8002328:	40001400 	.word	0x40001400
 800232c:	2000035c 	.word	0x2000035c
 8002330:	20000364 	.word	0x20000364
 8002334:	2000037f 	.word	0x2000037f
 8002338:	20000381 	.word	0x20000381
 800233c:	20000380 	.word	0x20000380
 8002340:	200000f0 	.word	0x200000f0
 8002344:	08017c78 	.word	0x08017c78
 8002348:	200003a0 	.word	0x200003a0
 800234c:	0098967f 	.word	0x0098967f
 8002350:	08017c8c 	.word	0x08017c8c
 8002354:	200000f8 	.word	0x200000f8
 8002358:	20000100 	.word	0x20000100
 800235c:	200027d4 	.word	0x200027d4
 8002360:	200003a2 	.word	0x200003a2
 8002364:	200003a4 	.word	0x200003a4
 8002368:	200003a6 	.word	0x200003a6
 800236c:	20000360 	.word	0x20000360
 8002370:	20000368 	.word	0x20000368
 8002374:	20000382 	.word	0x20000382
 8002378:	40014400 	.word	0x40014400
 800237c:	200003b8 	.word	0x200003b8
 8002380:	200003bc 	.word	0x200003bc
 8002384:	200003c0 	.word	0x200003c0
 8002388:	200003c4 	.word	0x200003c4

0800238c <InitializeMachine>:
#include <Initialize.h>
#include <FreeRTOS.h>
extern const char valuetosend;
void InitializeMachine2(void);

void InitializeMachine() {
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	InitComp = FALSE;
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <InitializeMachine+0x34>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
	LCD_Init();
 8002396:	f000 fbcb 	bl	8002b30 <LCD_Init>
		do{
			//UpdateTimeToSDCard( hours,  minutes,  seconds);
			InitializeMachine2();
 800239a:	f000 f85d 	bl	8002458 <InitializeMachine2>
			vTaskDelay(pdMS_TO_TICKS(1000));
 800239e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a2:	f00e ff45 	bl	8011230 <vTaskDelay>
//			HAL_Delay(1000);
		}while(isClampLimitSwitchReached == FALSE || isSpindleLimitSwitchReached == FALSE);
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <InitializeMachine+0x38>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f5      	beq.n	800239a <InitializeMachine+0xe>
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <InitializeMachine+0x3c>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f1      	beq.n	800239a <InitializeMachine+0xe>

		InitComp = TRUE;
 80023b6:	4b02      	ldr	r3, [pc, #8]	; (80023c0 <InitializeMachine+0x34>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000398 	.word	0x20000398
 80023c4:	20000108 	.word	0x20000108
 80023c8:	20000109 	.word	0x20000109

080023cc <CTS_Home_position>:


void CTS_Home_position(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
	 while(HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) != 1)
 80023d0:	e008      	b.n	80023e4 <CTS_Home_position+0x18>
	  {
		   digitalWrite(Spindle_M3_Dir_Output, HIGH); //LOW
 80023d2:	2101      	movs	r1, #1
 80023d4:	2004      	movs	r0, #4
 80023d6:	f7ff f891 	bl	80014fc <digitalWrite>
		   pwm(Spindle_M3_PWM, 90);
 80023da:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002444 <CTS_Home_position+0x78>
 80023de:	2002      	movs	r0, #2
 80023e0:	f003 f854 	bl	800548c <pwm>
	 while(HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) != 1)
 80023e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e8:	4817      	ldr	r0, [pc, #92]	; (8002448 <CTS_Home_position+0x7c>)
 80023ea:	f005 ff1d 	bl	8008228 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d1ee      	bne.n	80023d2 <CTS_Home_position+0x6>
	  }
	 digitalWrite(Spindle_M3_Dir_Output, LOW); //HIGH
 80023f4:	2100      	movs	r1, #0
 80023f6:	2004      	movs	r0, #4
 80023f8:	f7ff f880 	bl	80014fc <digitalWrite>
	 pwm(Spindle_M3_PWM, 0);
 80023fc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800244c <CTS_Home_position+0x80>
 8002400:	2002      	movs	r0, #2
 8002402:	f003 f843 	bl	800548c <pwm>
		while(HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) != 1)
 8002406:	e008      	b.n	800241a <CTS_Home_position+0x4e>
		{
		   digitalWrite(Clamp_M2_Dir_Output, LOW);
 8002408:	2100      	movs	r1, #0
 800240a:	2005      	movs	r0, #5
 800240c:	f7ff f876 	bl	80014fc <digitalWrite>
		   pwm(Clamp_M2_PWM,50);
 8002410:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002450 <CTS_Home_position+0x84>
 8002414:	2001      	movs	r0, #1
 8002416:	f003 f839 	bl	800548c <pwm>
		while(HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) != 1)
 800241a:	2101      	movs	r1, #1
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <CTS_Home_position+0x88>)
 800241e:	f005 ff03 	bl	8008228 <HAL_GPIO_ReadPin>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	d1ef      	bne.n	8002408 <CTS_Home_position+0x3c>
		}
		digitalWrite(Clamp_M2_Dir_Output, HIGH);
 8002428:	2101      	movs	r1, #1
 800242a:	2005      	movs	r0, #5
 800242c:	f7ff f866 	bl	80014fc <digitalWrite>
		pwm(Clamp_M2_PWM, 0);
 8002430:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800244c <CTS_Home_position+0x80>
 8002434:	2001      	movs	r0, #1
 8002436:	f003 f829 	bl	800548c <pwm>

		Servo_Home_Position();
 800243a:	f001 fa49 	bl	80038d0 <Servo_Home_Position>
		//HAL_Delay(2000);// this is delaying the system
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	42b40000 	.word	0x42b40000
 8002448:	40020000 	.word	0x40020000
 800244c:	00000000 	.word	0x00000000
 8002450:	42480000 	.word	0x42480000
 8002454:	40020800 	.word	0x40020800

08002458 <InitializeMachine2>:

void InitializeMachine2(void) {//Close valves, Drive down the Probe, Open clamps, tare load cells
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    // Print beginning initialization message
#if DEBUG == 1
    SerialPrintln("Begin Initialize");
 800245c:	4841      	ldr	r0, [pc, #260]	; (8002564 <InitializeMachine2+0x10c>)
 800245e:	f001 f925 	bl	80036ac <SerialPrintln>
#endif
    HAL_Delay(500);
 8002462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002466:	f004 faa3 	bl	80069b0 <HAL_Delay>
    Clamp_M2_EncA_Pulses = 1;
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <InitializeMachine2+0x110>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
    Clamp_M2_EncB_Pulses = 1;
 8002470:	4b3e      	ldr	r3, [pc, #248]	; (800256c <InitializeMachine2+0x114>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    Spindle_M3_EncA_Pulses = 1;
 8002476:	4b3e      	ldr	r3, [pc, #248]	; (8002570 <InitializeMachine2+0x118>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]
    Spindle_M3_EncB_Pulses = 1;
 800247c:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <InitializeMachine2+0x11c>)
 800247e:	2201      	movs	r2, #1
 8002480:	601a      	str	r2, [r3, #0]
    // Make sure valve is closed
    moveMotor(VALVEMOTOR, OFF, INT_INF); // Assuming 0 is a valid target point for VALVEMOTOR
 8002482:	4a3d      	ldr	r2, [pc, #244]	; (8002578 <InitializeMachine2+0x120>)
 8002484:	2100      	movs	r1, #0
 8002486:	2003      	movs	r0, #3
 8002488:	f7ff f9ce 	bl	8001828 <moveMotor>

    moveMotor(VALVEMOTOR, OFF, INT_INF);
 800248c:	4a3a      	ldr	r2, [pc, #232]	; (8002578 <InitializeMachine2+0x120>)
 800248e:	2100      	movs	r1, #0
 8002490:	2003      	movs	r0, #3
 8002492:	f7ff f9c9 	bl	8001828 <moveMotor>
#if DEBUG == 1
    SerialPrintln("Read limits");
 8002496:	4839      	ldr	r0, [pc, #228]	; (800257c <InitializeMachine2+0x124>)
 8002498:	f001 f908 	bl	80036ac <SerialPrintln>
#endif
    if (HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) == 1) {
 800249c:	2101      	movs	r1, #1
 800249e:	4838      	ldr	r0, [pc, #224]	; (8002580 <InitializeMachine2+0x128>)
 80024a0:	f005 fec2 	bl	8008228 <HAL_GPIO_ReadPin>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d111      	bne.n	80024ce <InitializeMachine2+0x76>
		Clamp_M2_EncA_Pulses = 0;
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <InitializeMachine2+0x110>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
		Clamp_M2_EncB_Pulses = 0;
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <InitializeMachine2+0x114>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
		pwm(Clamp_M2_PWM, 0);
 80024b6:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002584 <InitializeMachine2+0x12c>
 80024ba:	2001      	movs	r0, #1
 80024bc:	f002 ffe6 	bl	800548c <pwm>
		isClampLimitSwitchReached = TRUE;
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <InitializeMachine2+0x130>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M2 Limit HIGH\n");
 80024c6:	4831      	ldr	r0, [pc, #196]	; (800258c <InitializeMachine2+0x134>)
 80024c8:	f001 f8da 	bl	8003680 <SerialPrint>
 80024cc:	e005      	b.n	80024da <InitializeMachine2+0x82>
#endif
    } else {
    	isClampLimitSwitchReached = FALSE;
 80024ce:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <InitializeMachine2+0x130>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M2 Limit LOW\n");
 80024d4:	482e      	ldr	r0, [pc, #184]	; (8002590 <InitializeMachine2+0x138>)
 80024d6:	f001 f8d3 	bl	8003680 <SerialPrint>
#endif
    }

    if (HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) == 1) {
 80024da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024de:	482d      	ldr	r0, [pc, #180]	; (8002594 <InitializeMachine2+0x13c>)
 80024e0:	f005 fea2 	bl	8008228 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d111      	bne.n	800250e <InitializeMachine2+0xb6>
		Spindle_M3_EncA_Pulses=0;
 80024ea:	4b21      	ldr	r3, [pc, #132]	; (8002570 <InitializeMachine2+0x118>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
		Spindle_M3_EncB_Pulses=0;
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <InitializeMachine2+0x11c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
		pwm(Spindle_M3_PWM, 0);
 80024f6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8002584 <InitializeMachine2+0x12c>
 80024fa:	2002      	movs	r0, #2
 80024fc:	f002 ffc6 	bl	800548c <pwm>
		isSpindleLimitSwitchReached = TRUE;
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <InitializeMachine2+0x140>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M3 Limit HIGH\n");
 8002506:	4825      	ldr	r0, [pc, #148]	; (800259c <InitializeMachine2+0x144>)
 8002508:	f001 f8ba 	bl	8003680 <SerialPrint>
 800250c:	e00b      	b.n	8002526 <InitializeMachine2+0xce>
#endif
    } else {
    	isSpindleLimitSwitchReached = FALSE;
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <InitializeMachine2+0x140>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M3 Limit LOW\n");
 8002514:	4822      	ldr	r0, [pc, #136]	; (80025a0 <InitializeMachine2+0x148>)
 8002516:	f001 f8b3 	bl	8003680 <SerialPrint>
    	SerialPrintln("Servo Close");
 800251a:	4822      	ldr	r0, [pc, #136]	; (80025a4 <InitializeMachine2+0x14c>)
 800251c:	f001 f8c6 	bl	80036ac <SerialPrintln>
#endif
    	Servo_SetPercent(90); //Normally set to ValveClose
 8002520:	205a      	movs	r0, #90	; 0x5a
 8002522:	f001 f961 	bl	80037e8 <Servo_SetPercent>
    }
#if DEBUG == 1
    SerialPrintln("Check M3 position");
 8002526:	4820      	ldr	r0, [pc, #128]	; (80025a8 <InitializeMachine2+0x150>)
 8002528:	f001 f8c0 	bl	80036ac <SerialPrintln>
#endif
    // Read the state of Motor2 limit switch and reset its position
    if (isSpindleLimitSwitchReached == FALSE) {
 800252c:	4b1a      	ldr	r3, [pc, #104]	; (8002598 <InitializeMachine2+0x140>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d102      	bne.n	800253a <InitializeMachine2+0xe2>
    	moveMotorSpindleToLocBlock(M2POS1VAL);
 8002534:	2000      	movs	r0, #0
 8002536:	f7ff f807 	bl	8001548 <moveMotorSpindleToLocBlock>
    }
#if DEBUG == 1
    SerialPrintln("Check M1 position");
 800253a:	481c      	ldr	r0, [pc, #112]	; (80025ac <InitializeMachine2+0x154>)
 800253c:	f001 f8b6 	bl	80036ac <SerialPrintln>
#endif
    // Read the state of Motor1 limit switch and reset its position
    if (isClampLimitSwitchReached == FALSE) {
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <InitializeMachine2+0x130>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <InitializeMachine2+0xf6>
        moveMotorClampToLocBlock(M1POS1VAL);
 8002548:	2000      	movs	r0, #0
 800254a:	f7ff f829 	bl	80015a0 <moveMotorClampToLocBlock>
    }
#if DEBUG == 1
    SerialPrintln("Servo Close");
 800254e:	4815      	ldr	r0, [pc, #84]	; (80025a4 <InitializeMachine2+0x14c>)
 8002550:	f001 f8ac 	bl	80036ac <SerialPrintln>
#endif
    Servo_SetPercent(90);  //Normally set to ValveClose
 8002554:	205a      	movs	r0, #90	; 0x5a
 8002556:	f001 f947 	bl	80037e8 <Servo_SetPercent>
    // Delay to give time for load cell values to stabilize after motor movement ends
  //  HAL_Delay(1); // Use HAL_Delay for STM32
    //SerialPrintln("Zero load cells");
#if DEBUG == 1
    // Print finishing initialization message
    SerialPrintln("Finish Initialize");
 800255a:	4815      	ldr	r0, [pc, #84]	; (80025b0 <InitializeMachine2+0x158>)
 800255c:	f001 f8a6 	bl	80036ac <SerialPrintln>
#endif
}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	08017c90 	.word	0x08017c90
 8002568:	200000f8 	.word	0x200000f8
 800256c:	200000fc 	.word	0x200000fc
 8002570:	20000100 	.word	0x20000100
 8002574:	20000104 	.word	0x20000104
 8002578:	0098967f 	.word	0x0098967f
 800257c:	08017ca4 	.word	0x08017ca4
 8002580:	40020800 	.word	0x40020800
 8002584:	00000000 	.word	0x00000000
 8002588:	20000108 	.word	0x20000108
 800258c:	08017cb0 	.word	0x08017cb0
 8002590:	08017cc0 	.word	0x08017cc0
 8002594:	40020000 	.word	0x40020000
 8002598:	20000109 	.word	0x20000109
 800259c:	08017cd0 	.word	0x08017cd0
 80025a0:	08017ce0 	.word	0x08017ce0
 80025a4:	08017cf0 	.word	0x08017cf0
 80025a8:	08017cfc 	.word	0x08017cfc
 80025ac:	08017d10 	.word	0x08017d10
 80025b0:	08017d24 	.word	0x08017d24

080025b4 <SubInit>:

void SubInit(){								//Initialize LCD
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80025b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025bc:	f004 f9f8 	bl	80069b0 <HAL_Delay>
	LCD_Clear();								//Clear LCD
 80025c0:	f000 fba0 	bl	8002d04 <LCD_Clear>
	HAL_Delay(500);
 80025c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025c8:	f004 f9f2 	bl	80069b0 <HAL_Delay>
	HAL_Delay(1000);     // Wait for a second after initializing
 80025cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d0:	f004 f9ee 	bl	80069b0 <HAL_Delay>
	return;
 80025d4:	bf00      	nop
}
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <goToSleep>:

void goToSleep() { //Function goToSleep is only called by setup as it is a blocking function
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
    // Turn OFF LCD RGB
    LCDRGBControl(OFF);
 80025dc:	2000      	movs	r0, #0
 80025de:	f000 fcfd 	bl	8002fdc <LCDRGBControl>
    pwm(LCD_LED_PWM,0);
 80025e2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800264c <goToSleep+0x74>
 80025e6:	2004      	movs	r0, #4
 80025e8:	f002 ff50 	bl	800548c <pwm>
    pwm(LCD_Contrast_PWM,0);
 80025ec:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800264c <goToSleep+0x74>
 80025f0:	2003      	movs	r0, #3
 80025f2:	f002 ff4b 	bl	800548c <pwm>
    // Turn off power LED and stop loading screen
    LoadingFunc(OFF, NOT_LOADING);
 80025f6:	2100      	movs	r1, #0
 80025f8:	2000      	movs	r0, #0
 80025fa:	f000 fa5b 	bl	8002ab4 <LoadingFunc>
    // Initialize the machine (the same initialization is used for shutdown and startup)
    InitializeMachine();
 80025fe:	f7ff fec5 	bl	800238c <InitializeMachine>
    // Print message to Serial
#if DEBUG == 1
    SerialPrintln("Sleeping..");
 8002602:	4813      	ldr	r0, [pc, #76]	; (8002650 <goToSleep+0x78>)
 8002604:	f001 f852 	bl	80036ac <SerialPrintln>
#endif
    HAL_Delay(500);   // Delay for a short period
 8002608:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800260c:	f004 f9d0 	bl	80069b0 <HAL_Delay>
    //UpdateTimeToSDCard( hours,  minutes,  seconds);
    // Wait while the machine is off
    while(isMachineOn == FALSE) {
 8002610:	e002      	b.n	8002618 <goToSleep+0x40>
        HAL_Delay(100); // Use HAL_Delay instead of delay
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f004 f9cc 	bl	80069b0 <HAL_Delay>
    while(isMachineOn == FALSE) {
 8002618:	4b0e      	ldr	r3, [pc, #56]	; (8002654 <goToSleep+0x7c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0f8      	beq.n	8002612 <goToSleep+0x3a>
    }
    LoadingFunc(BLINK, LOADING);
 8002620:	2101      	movs	r1, #1
 8002622:	2002      	movs	r0, #2
 8002624:	f000 fa46 	bl	8002ab4 <LoadingFunc>
    // On waking up, print message to Serial
#if DEBUG == 1
    SerialPrintln("Waking up..");
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <goToSleep+0x80>)
 800262a:	f001 f83f 	bl	80036ac <SerialPrintln>
#endif
	 MX_TIM8_Init();
 800262e:	f003 fc6d 	bl	8005f0c <MX_TIM8_Init>
	 LCD_Init();
 8002632:	f000 fa7d 	bl	8002b30 <LCD_Init>
	 LCDRGBControl(WHITE);
 8002636:	2064      	movs	r0, #100	; 0x64
 8002638:	f000 fcd0 	bl	8002fdc <LCDRGBControl>
	 controlLCDContrast(100);
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	f000 fd0f 	bl	8003060 <controlLCDContrast>
    InitializeMachine();
 8002642:	f7ff fea3 	bl	800238c <InitializeMachine>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	00000000 	.word	0x00000000
 8002650:	08017d38 	.word	0x08017d38
 8002654:	20000358 	.word	0x20000358
 8002658:	08017d44 	.word	0x08017d44

0800265c <ReadKeypadVar>:
volatile uint8_t cleanLongPressed = FALSE; // State of long press of clean key
uint8_t delLongPressed = FALSE;
uint8_t isDemoCleaning = FALSE; // Demo cleaning state


int ReadKeypadVar(int group) {
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
    lastKeyPressed = readKeypad(group);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f8db 	bl	8002820 <readKeypad>
 800266a:	4603      	mov	r3, r0
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <ReadKeypadVar+0x88>)
 800266e:	6013      	str	r3, [r2, #0]
    if (lastKeyPressed == MANAUTOKEY) {
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <ReadKeypadVar+0x88>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d10a      	bne.n	800268e <ReadKeypadVar+0x32>
        isAutoOperation = !isAutoOperation;
 8002678:	4b1b      	ldr	r3, [pc, #108]	; (80026e8 <ReadKeypadVar+0x8c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <ReadKeypadVar+0x8c>)
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	e01c      	b.n	80026c8 <ReadKeypadVar+0x6c>
    } else if (lastKeyPressed == CLEANKEY) {
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <ReadKeypadVar+0x88>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b0f      	cmp	r3, #15
 8002694:	d10a      	bne.n	80026ac <ReadKeypadVar+0x50>
        isCleaningOperation = !isCleaningOperation;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <ReadKeypadVar+0x90>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b11      	ldr	r3, [pc, #68]	; (80026ec <ReadKeypadVar+0x90>)
 80026a8:	701a      	strb	r2, [r3, #0]
 80026aa:	e00d      	b.n	80026c8 <ReadKeypadVar+0x6c>
    } else if (lastKeyPressed == PLAYSTOPKEY) {
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <ReadKeypadVar+0x88>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b0d      	cmp	r3, #13
 80026b2:	d109      	bne.n	80026c8 <ReadKeypadVar+0x6c>
        isPausedOperation = !isPausedOperation;
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <ReadKeypadVar+0x94>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf0c      	ite	eq
 80026bc:	2301      	moveq	r3, #1
 80026be:	2300      	movne	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <ReadKeypadVar+0x94>)
 80026c6:	701a      	strb	r2, [r3, #0]
    }
    if (lastKeyPressed != 255) {
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <ReadKeypadVar+0x88>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2bff      	cmp	r3, #255	; 0xff
 80026ce:	d002      	beq.n	80026d6 <ReadKeypadVar+0x7a>
        HAL_Delay(5); // Delay for debounce, using HAL_Delay for STM32
 80026d0:	2005      	movs	r0, #5
 80026d2:	f004 f96d 	bl	80069b0 <HAL_Delay>
    }
    return lastKeyPressed;
 80026d6:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <ReadKeypadVar+0x88>)
 80026d8:	681b      	ldr	r3, [r3, #0]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000010c 	.word	0x2000010c
 80026e8:	2000010b 	.word	0x2000010b
 80026ec:	200003dc 	.word	0x200003dc
 80026f0:	200003dd 	.word	0x200003dd

080026f4 <readKeypadNonBlock>:

int readKeypadNonBlock(int group)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	//group=ALL;
  if (group == NUMPAD || group == ALL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d002      	beq.n	8002708 <readKeypadNonBlock+0x14>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d15f      	bne.n	80027c8 <readKeypadNonBlock+0xd4>
  {
    if (digitalRead(Button_1_Input_PullUp) == LOW) {
 8002708:	2003      	movs	r0, #3
 800270a:	f7fe fed5 	bl	80014b8 <digitalRead>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <readKeypadNonBlock+0x24>

      return 1;
 8002714:	2301      	movs	r3, #1
 8002716:	e07e      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_2_Input_PullUp) == LOW) {
 8002718:	2004      	movs	r0, #4
 800271a:	f7fe fecd 	bl	80014b8 <digitalRead>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <readKeypadNonBlock+0x34>

      return 2;
 8002724:	2302      	movs	r3, #2
 8002726:	e076      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_3_Input_PullUp) == LOW) {
 8002728:	2005      	movs	r0, #5
 800272a:	f7fe fec5 	bl	80014b8 <digitalRead>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <readKeypadNonBlock+0x44>

      return 3;
 8002734:	2303      	movs	r3, #3
 8002736:	e06e      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_4_Input_PullUp) == LOW) {
 8002738:	2006      	movs	r0, #6
 800273a:	f7fe febd 	bl	80014b8 <digitalRead>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <readKeypadNonBlock+0x54>

      return 4;
 8002744:	2304      	movs	r3, #4
 8002746:	e066      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_5_Input_PullUp) == LOW) {
 8002748:	2007      	movs	r0, #7
 800274a:	f7fe feb5 	bl	80014b8 <digitalRead>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <readKeypadNonBlock+0x64>

      return 5;
 8002754:	2305      	movs	r3, #5
 8002756:	e05e      	b.n	8002816 <readKeypadNonBlock+0x122>
    }else if (digitalRead(Button_6_Input_PullUp) == LOW) {
 8002758:	2008      	movs	r0, #8
 800275a:	f7fe fead 	bl	80014b8 <digitalRead>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <readKeypadNonBlock+0x74>

      return 6;
 8002764:	2306      	movs	r3, #6
 8002766:	e056      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_7_Input_PullUp) == LOW) {
 8002768:	2009      	movs	r0, #9
 800276a:	f7fe fea5 	bl	80014b8 <digitalRead>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <readKeypadNonBlock+0x84>

      return 7;
 8002774:	2307      	movs	r3, #7
 8002776:	e04e      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_8_Input_PullUp) == LOW) {
 8002778:	200a      	movs	r0, #10
 800277a:	f7fe fe9d 	bl	80014b8 <digitalRead>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <readKeypadNonBlock+0x94>

      return 8;
 8002784:	2308      	movs	r3, #8
 8002786:	e046      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_9_Input_PullUp) == LOW) {
 8002788:	200b      	movs	r0, #11
 800278a:	f7fe fe95 	bl	80014b8 <digitalRead>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <readKeypadNonBlock+0xa4>

      return 9;
 8002794:	2309      	movs	r3, #9
 8002796:	e03e      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_0_Input_PullUp) == LOW) {
 8002798:	200c      	movs	r0, #12
 800279a:	f7fe fe8d 	bl	80014b8 <digitalRead>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <readKeypadNonBlock+0xb4>

      return 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e036      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 80027a8:	200e      	movs	r0, #14
 80027aa:	f7fe fe85 	bl	80014b8 <digitalRead>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <readKeypadNonBlock+0xc4>

      return COMMAKEY;
 80027b4:	230a      	movs	r3, #10
 80027b6:	e02e      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80027b8:	200d      	movs	r0, #13
 80027ba:	f7fe fe7d 	bl	80014b8 <digitalRead>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <readKeypadNonBlock+0xd4>

      return ENTERKEY;
 80027c4:	230b      	movs	r3, #11
 80027c6:	e026      	b.n	8002816 <readKeypadNonBlock+0x122>
    }
  }
  if (group == CONTROL || group == ALL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d002      	beq.n	80027d4 <readKeypadNonBlock+0xe0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d11f      	bne.n	8002814 <readKeypadNonBlock+0x120>
  {
    if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80027d4:	200d      	movs	r0, #13
 80027d6:	f7fe fe6f 	bl	80014b8 <digitalRead>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <readKeypadNonBlock+0xf0>

      return ENTERKEY;
 80027e0:	230b      	movs	r3, #11
 80027e2:	e018      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7fe fe67 	bl	80014b8 <digitalRead>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <readKeypadNonBlock+0x100>

      return MANAUTOKEY;
 80027f0:	230c      	movs	r3, #12
 80027f2:	e010      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 80027f4:	2001      	movs	r0, #1
 80027f6:	f7fe fe5f 	bl	80014b8 <digitalRead>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <readKeypadNonBlock+0x110>

      return PLAYSTOPKEY;
 8002800:	230d      	movs	r3, #13
 8002802:	e008      	b.n	8002816 <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8002804:	2002      	movs	r0, #2
 8002806:	f7fe fe57 	bl	80014b8 <digitalRead>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <readKeypadNonBlock+0x120>

      return DELKEY;
 8002810:	230e      	movs	r3, #14
 8002812:	e000      	b.n	8002816 <readKeypadNonBlock+0x122>
    }
  }
  return 255;
 8002814:	23ff      	movs	r3, #255	; 0xff
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <readKeypad>:

int readKeypad(int group)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	//group = ALL;
  if (group == NUMPAD || group == ALL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <readKeypad+0x16>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 80d8 	bne.w	80029e6 <readKeypad+0x1c6>
  {
    if (digitalRead(Button_1_Input_PullUp) == LOW){
 8002836:	2003      	movs	r0, #3
 8002838:	f7fe fe3e 	bl	80014b8 <digitalRead>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <readKeypad+0x3a>
      while (digitalRead(Button_1_Input_PullUp) == LOW) {
 8002842:	e002      	b.n	800284a <readKeypad+0x2a>
        HAL_Delay(1);
 8002844:	2001      	movs	r0, #1
 8002846:	f004 f8b3 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_1_Input_PullUp) == LOW) {
 800284a:	2003      	movs	r0, #3
 800284c:	f7fe fe34 	bl	80014b8 <digitalRead>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f6      	beq.n	8002844 <readKeypad+0x24>
      }
      return 1;
 8002856:	2301      	movs	r3, #1
 8002858:	e126      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_2_Input_PullUp) == LOW){
 800285a:	2004      	movs	r0, #4
 800285c:	f7fe fe2c 	bl	80014b8 <digitalRead>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10b      	bne.n	800287e <readKeypad+0x5e>
      while (digitalRead(Button_2_Input_PullUp) == LOW){
 8002866:	e002      	b.n	800286e <readKeypad+0x4e>
    	  HAL_Delay(1);
 8002868:	2001      	movs	r0, #1
 800286a:	f004 f8a1 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_2_Input_PullUp) == LOW){
 800286e:	2004      	movs	r0, #4
 8002870:	f7fe fe22 	bl	80014b8 <digitalRead>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f6      	beq.n	8002868 <readKeypad+0x48>
      }
      return 2;
 800287a:	2302      	movs	r3, #2
 800287c:	e114      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_3_Input_PullUp) == LOW) {
 800287e:	2005      	movs	r0, #5
 8002880:	f7fe fe1a 	bl	80014b8 <digitalRead>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <readKeypad+0x82>
    	while (digitalRead(Button_3_Input_PullUp) == LOW) {
 800288a:	e002      	b.n	8002892 <readKeypad+0x72>
      HAL_Delay(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f004 f88f 	bl	80069b0 <HAL_Delay>
    	while (digitalRead(Button_3_Input_PullUp) == LOW) {
 8002892:	2005      	movs	r0, #5
 8002894:	f7fe fe10 	bl	80014b8 <digitalRead>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d0f6      	beq.n	800288c <readKeypad+0x6c>
      }
      return 3;
 800289e:	2303      	movs	r3, #3
 80028a0:	e102      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_4_Input_PullUp) == LOW) {
 80028a2:	2006      	movs	r0, #6
 80028a4:	f7fe fe08 	bl	80014b8 <digitalRead>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <readKeypad+0xa6>
      while (digitalRead(Button_4_Input_PullUp) == LOW) {
 80028ae:	e002      	b.n	80028b6 <readKeypad+0x96>
    	  HAL_Delay(1);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f004 f87d 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_4_Input_PullUp) == LOW) {
 80028b6:	2006      	movs	r0, #6
 80028b8:	f7fe fdfe 	bl	80014b8 <digitalRead>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f6      	beq.n	80028b0 <readKeypad+0x90>
      }
      return 4;
 80028c2:	2304      	movs	r3, #4
 80028c4:	e0f0      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_5_Input_PullUp) == LOW) {
 80028c6:	2007      	movs	r0, #7
 80028c8:	f7fe fdf6 	bl	80014b8 <digitalRead>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <readKeypad+0xca>
      while (digitalRead(Button_5_Input_PullUp) == LOW) {
 80028d2:	e002      	b.n	80028da <readKeypad+0xba>
    	  HAL_Delay(1);
 80028d4:	2001      	movs	r0, #1
 80028d6:	f004 f86b 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_5_Input_PullUp) == LOW) {
 80028da:	2007      	movs	r0, #7
 80028dc:	f7fe fdec 	bl	80014b8 <digitalRead>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f6      	beq.n	80028d4 <readKeypad+0xb4>
      }
      return 5;
 80028e6:	2305      	movs	r3, #5
 80028e8:	e0de      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_6_Input_PullUp) == LOW) {
 80028ea:	2008      	movs	r0, #8
 80028ec:	f7fe fde4 	bl	80014b8 <digitalRead>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10b      	bne.n	800290e <readKeypad+0xee>
      while (digitalRead(Button_6_Input_PullUp) == LOW) {
 80028f6:	e002      	b.n	80028fe <readKeypad+0xde>
    	  HAL_Delay(1);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f004 f859 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_6_Input_PullUp) == LOW) {
 80028fe:	2008      	movs	r0, #8
 8002900:	f7fe fdda 	bl	80014b8 <digitalRead>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f6      	beq.n	80028f8 <readKeypad+0xd8>
      }
      return 6;
 800290a:	2306      	movs	r3, #6
 800290c:	e0cc      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_7_Input_PullUp) == LOW) {
 800290e:	2009      	movs	r0, #9
 8002910:	f7fe fdd2 	bl	80014b8 <digitalRead>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10b      	bne.n	8002932 <readKeypad+0x112>
      while (digitalRead(Button_7_Input_PullUp) == LOW) {
 800291a:	e002      	b.n	8002922 <readKeypad+0x102>
    	  HAL_Delay(1);
 800291c:	2001      	movs	r0, #1
 800291e:	f004 f847 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_7_Input_PullUp) == LOW) {
 8002922:	2009      	movs	r0, #9
 8002924:	f7fe fdc8 	bl	80014b8 <digitalRead>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f6      	beq.n	800291c <readKeypad+0xfc>
      }
      return 7;
 800292e:	2307      	movs	r3, #7
 8002930:	e0ba      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_8_Input_PullUp) == LOW) {
 8002932:	200a      	movs	r0, #10
 8002934:	f7fe fdc0 	bl	80014b8 <digitalRead>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10b      	bne.n	8002956 <readKeypad+0x136>
      while (digitalRead(Button_8_Input_PullUp) == LOW) {
 800293e:	e002      	b.n	8002946 <readKeypad+0x126>
    	  HAL_Delay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f004 f835 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_8_Input_PullUp) == LOW) {
 8002946:	200a      	movs	r0, #10
 8002948:	f7fe fdb6 	bl	80014b8 <digitalRead>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f6      	beq.n	8002940 <readKeypad+0x120>
      }
      return 8;
 8002952:	2308      	movs	r3, #8
 8002954:	e0a8      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_9_Input_PullUp) == LOW) {
 8002956:	200b      	movs	r0, #11
 8002958:	f7fe fdae 	bl	80014b8 <digitalRead>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <readKeypad+0x15a>
      while (digitalRead(Button_9_Input_PullUp) == LOW) {
 8002962:	e002      	b.n	800296a <readKeypad+0x14a>
    	  HAL_Delay(1);
 8002964:	2001      	movs	r0, #1
 8002966:	f004 f823 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_9_Input_PullUp) == LOW) {
 800296a:	200b      	movs	r0, #11
 800296c:	f7fe fda4 	bl	80014b8 <digitalRead>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f6      	beq.n	8002964 <readKeypad+0x144>
      }
      return 9;
 8002976:	2309      	movs	r3, #9
 8002978:	e096      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_0_Input_PullUp) == LOW) {
 800297a:	200c      	movs	r0, #12
 800297c:	f7fe fd9c 	bl	80014b8 <digitalRead>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10b      	bne.n	800299e <readKeypad+0x17e>
      while (digitalRead(Button_0_Input_PullUp) == LOW) {
 8002986:	e002      	b.n	800298e <readKeypad+0x16e>
    	  HAL_Delay(1);
 8002988:	2001      	movs	r0, #1
 800298a:	f004 f811 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_0_Input_PullUp) == LOW) {
 800298e:	200c      	movs	r0, #12
 8002990:	f7fe fd92 	bl	80014b8 <digitalRead>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f6      	beq.n	8002988 <readKeypad+0x168>
      }

      return 0;
 800299a:	2300      	movs	r3, #0
 800299c:	e084      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 800299e:	200e      	movs	r0, #14
 80029a0:	f7fe fd8a 	bl	80014b8 <digitalRead>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <readKeypad+0x1a2>
      while (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 80029aa:	e002      	b.n	80029b2 <readKeypad+0x192>
    	  HAL_Delay(1);
 80029ac:	2001      	movs	r0, #1
 80029ae:	f003 ffff 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 80029b2:	200e      	movs	r0, #14
 80029b4:	f7fe fd80 	bl	80014b8 <digitalRead>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f6      	beq.n	80029ac <readKeypad+0x18c>
      }

      return COMMAKEY;
 80029be:	230a      	movs	r3, #10
 80029c0:	e072      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80029c2:	200d      	movs	r0, #13
 80029c4:	f7fe fd78 	bl	80014b8 <digitalRead>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10b      	bne.n	80029e6 <readKeypad+0x1c6>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80029ce:	e002      	b.n	80029d6 <readKeypad+0x1b6>
    	  HAL_Delay(1);
 80029d0:	2001      	movs	r0, #1
 80029d2:	f003 ffed 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80029d6:	200d      	movs	r0, #13
 80029d8:	f7fe fd6e 	bl	80014b8 <digitalRead>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f6      	beq.n	80029d0 <readKeypad+0x1b0>
      }

      return ENTERKEY;
 80029e2:	230b      	movs	r3, #11
 80029e4:	e060      	b.n	8002aa8 <readKeypad+0x288>
    }
  }
  if (group == CONTROL || group == ALL) {
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d002      	beq.n	80029f2 <readKeypad+0x1d2>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d159      	bne.n	8002aa6 <readKeypad+0x286>
    if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80029f2:	200d      	movs	r0, #13
 80029f4:	f7fe fd60 	bl	80014b8 <digitalRead>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10b      	bne.n	8002a16 <readKeypad+0x1f6>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80029fe:	e002      	b.n	8002a06 <readKeypad+0x1e6>
    	  HAL_Delay(1);
 8002a00:	2001      	movs	r0, #1
 8002a02:	f003 ffd5 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 8002a06:	200d      	movs	r0, #13
 8002a08:	f7fe fd56 	bl	80014b8 <digitalRead>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f6      	beq.n	8002a00 <readKeypad+0x1e0>
      }

      return ENTERKEY;
 8002a12:	230b      	movs	r3, #11
 8002a14:	e048      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fd4e 	bl	80014b8 <digitalRead>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10b      	bne.n	8002a3a <readKeypad+0x21a>
      while (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 8002a22:	e002      	b.n	8002a2a <readKeypad+0x20a>
    	  HAL_Delay(1);
 8002a24:	2001      	movs	r0, #1
 8002a26:	f003 ffc3 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7fe fd44 	bl	80014b8 <digitalRead>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f6      	beq.n	8002a24 <readKeypad+0x204>
      }

      return MANAUTOKEY;
 8002a36:	230c      	movs	r3, #12
 8002a38:	e036      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7fe fd3c 	bl	80014b8 <digitalRead>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <readKeypad+0x23e>
      while (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 8002a46:	e002      	b.n	8002a4e <readKeypad+0x22e>
    	  HAL_Delay(1);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f003 ffb1 	bl	80069b0 <HAL_Delay>
      while (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f7fe fd32 	bl	80014b8 <digitalRead>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f6      	beq.n	8002a48 <readKeypad+0x228>
      }

      return PLAYSTOPKEY;
 8002a5a:	230d      	movs	r3, #13
 8002a5c:	e024      	b.n	8002aa8 <readKeypad+0x288>
    } else if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7fe fd2a 	bl	80014b8 <digitalRead>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <readKeypad+0x286>
    	unsigned long localDelTimer = HAL_GetTick();
 8002a6a:	f003 ff95 	bl	8006998 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]
    	delLongPressed = FALSE;
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <readKeypad+0x290>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]
    	while (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8002a76:	e00e      	b.n	8002a96 <readKeypad+0x276>
    		HAL_Delay(1);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f003 ff99 	bl	80069b0 <HAL_Delay>
    		if (HAL_GetTick() - localDelTimer >= 2000) {
 8002a7e:	f003 ff8b 	bl	8006998 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a8c:	d303      	bcc.n	8002a96 <readKeypad+0x276>
    			delLongPressed = TRUE;
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <readKeypad+0x290>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    			break;
 8002a94:	e005      	b.n	8002aa2 <readKeypad+0x282>
    	while (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8002a96:	2002      	movs	r0, #2
 8002a98:	f7fe fd0e 	bl	80014b8 <digitalRead>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d0ea      	beq.n	8002a78 <readKeypad+0x258>
    		}
    	}

    	return DELKEY;
 8002aa2:	230e      	movs	r3, #14
 8002aa4:	e000      	b.n	8002aa8 <readKeypad+0x288>
    }
  }
  return 255;
 8002aa6:	23ff      	movs	r3, #255	; 0xff
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200003df 	.word	0x200003df

08002ab4 <LoadingFunc>:


void LoadingFunc(int blinkLED, uint8_t ScreenLoad) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	70fb      	strb	r3, [r7, #3]
    if (blinkLED == OFF) {
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <LoadingFunc+0x20>
        powerLEDControl(OFF);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f000 faaa 	bl	8003020 <powerLEDControl>
        isPowerLEDBlinking = FALSE;
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <LoadingFunc+0x6c>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e00f      	b.n	8002af4 <LoadingFunc+0x40>
    } else if (blinkLED == ON) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d106      	bne.n	8002ae8 <LoadingFunc+0x34>
       powerLEDControl(ON);
 8002ada:	2001      	movs	r0, #1
 8002adc:	f000 faa0 	bl	8003020 <powerLEDControl>
        isPowerLEDBlinking = FALSE;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <LoadingFunc+0x6c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e005      	b.n	8002af4 <LoadingFunc+0x40>
    } else if (blinkLED == BLINK) {
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d102      	bne.n	8002af4 <LoadingFunc+0x40>
        isPowerLEDBlinking = TRUE;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <LoadingFunc+0x6c>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
    }

    if (ScreenLoad==TRUE) {
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10b      	bne.n	8002b12 <LoadingFunc+0x5e>
        strcpy(DotString, ""); // Clear the DotString
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <LoadingFunc+0x70>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
        isScreenLoading = TRUE;
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <LoadingFunc+0x74>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
        printLCD(0, " ", NO_SYMBOL);
 8002b06:	2200      	movs	r2, #0
 8002b08:	4908      	ldr	r1, [pc, #32]	; (8002b2c <LoadingFunc+0x78>)
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 f9fa 	bl	8002f04 <printLCD>
    } else {
        isScreenLoading = FALSE;
    }
}
 8002b10:	e002      	b.n	8002b18 <LoadingFunc+0x64>
        isScreenLoading = FALSE;
 8002b12:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <LoadingFunc+0x74>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000488 	.word	0x20000488
 8002b24:	2000048c 	.word	0x2000048c
 8002b28:	2000048a 	.word	0x2000048a
 8002b2c:	08017d50 	.word	0x08017d50

08002b30 <LCD_Init>:
  0B01010
};


//Functions for LCD System
void LCD_Init() {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	// Assuming GPIO has been initialized

	HAL_Delay(15); // Wait for more than 15ms after Vcc rises to 4.5V
 8002b34:	200f      	movs	r0, #15
 8002b36:	f003 ff3b 	bl	80069b0 <HAL_Delay>

	// Function set: 8-bit mode
	LCD_SendHalfByte(0x03);
 8002b3a:	2003      	movs	r0, #3
 8002b3c:	f000 f8ee 	bl	8002d1c <LCD_SendHalfByte>
	HAL_Delay(5); // Wait for more than 4.1ms
 8002b40:	2005      	movs	r0, #5
 8002b42:	f003 ff35 	bl	80069b0 <HAL_Delay>
	LCD_SendHalfByte(0x03);
 8002b46:	2003      	movs	r0, #3
 8002b48:	f000 f8e8 	bl	8002d1c <LCD_SendHalfByte>
	HAL_Delay(1); // Wait for more than 100us
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f003 ff2f 	bl	80069b0 <HAL_Delay>
	LCD_SendHalfByte(0x03);
 8002b52:	2003      	movs	r0, #3
 8002b54:	f000 f8e2 	bl	8002d1c <LCD_SendHalfByte>

	// Function set: Switch to 4-bit mode
	LCD_SendHalfByte(0x02);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f000 f8df 	bl	8002d1c <LCD_SendHalfByte>

	// Complete function set: 4-bit mode, 2-line display, 5x8 font
	LCD_SendCommand(0x28);
 8002b5e:	2028      	movs	r0, #40	; 0x28
 8002b60:	f000 f838 	bl	8002bd4 <LCD_SendCommand>

	// Display ON, cursor OFF, blink OFF
	LCD_SendCommand(0x0C);
 8002b64:	200c      	movs	r0, #12
 8002b66:	f000 f835 	bl	8002bd4 <LCD_SendCommand>

	// Entry mode set: Increment cursor, no shift
	LCD_SendCommand(0x06);
 8002b6a:	2006      	movs	r0, #6
 8002b6c:	f000 f832 	bl	8002bd4 <LCD_SendCommand>

	// Clear display
	LCD_SendCommand(0x01);
 8002b70:	2001      	movs	r0, #1
 8002b72:	f000 f82f 	bl	8002bd4 <LCD_SendCommand>
	HAL_Delay(2); // Clearing the display takes 1.52ms
 8002b76:	2002      	movs	r0, #2
 8002b78:	f003 ff1a 	bl	80069b0 <HAL_Delay>

	LCD_CreateCustomChar(0, Custom_Blank_Symbol);
 8002b7c:	490f      	ldr	r1, [pc, #60]	; (8002bbc <LCD_Init+0x8c>)
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 f864 	bl	8002c4c <LCD_CreateCustomChar>
	LCD_CreateCustomChar(1, Custom_Enter_Symbol);
 8002b84:	490e      	ldr	r1, [pc, #56]	; (8002bc0 <LCD_Init+0x90>)
 8002b86:	2001      	movs	r0, #1
 8002b88:	f000 f860 	bl	8002c4c <LCD_CreateCustomChar>
	LCD_CreateCustomChar(2, Custom_Reclean_Symbol);
 8002b8c:	490d      	ldr	r1, [pc, #52]	; (8002bc4 <LCD_Init+0x94>)
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f000 f85c 	bl	8002c4c <LCD_CreateCustomChar>
	LCD_CreateCustomChar(3, Custom_Cursor_Symbol);
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <LCD_Init+0x98>)
 8002b96:	2003      	movs	r0, #3
 8002b98:	f000 f858 	bl	8002c4c <LCD_CreateCustomChar>
	LCD_CreateCustomChar(4, Custom_demo_cursor_Symbol);
 8002b9c:	490b      	ldr	r1, [pc, #44]	; (8002bcc <LCD_Init+0x9c>)
 8002b9e:	2004      	movs	r0, #4
 8002ba0:	f000 f854 	bl	8002c4c <LCD_CreateCustomChar>

	pwm(LCD_LED_PWM,50);
 8002ba4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002bd0 <LCD_Init+0xa0>
 8002ba8:	2004      	movs	r0, #4
 8002baa:	f002 fc6f 	bl	800548c <pwm>
	pwm(LCD_Contrast_PWM,10);
 8002bae:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002bb2:	2003      	movs	r0, #3
 8002bb4:	f002 fc6a 	bl	800548c <pwm>
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200004bc 	.word	0x200004bc
 8002bc0:	20000110 	.word	0x20000110
 8002bc4:	20000118 	.word	0x20000118
 8002bc8:	20000120 	.word	0x20000120
 8002bcc:	20000128 	.word	0x20000128
 8002bd0:	42480000 	.word	0x42480000

08002bd4 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_Output_GPIO_Port, LCD_RS_Output_Pin,
 8002bde:	2200      	movs	r2, #0
 8002be0:	2102      	movs	r1, #2
 8002be2:	480a      	ldr	r0, [pc, #40]	; (8002c0c <LCD_SendCommand+0x38>)
 8002be4:	f005 fb38 	bl	8008258 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET); // RS = 0 for command
	//HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET); // RW = 0 for write
	LCD_SendHalfByte(cmd >> 4); // Send higher nibble
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 f894 	bl	8002d1c <LCD_SendHalfByte>
	LCD_SendHalfByte(cmd & 0x0F); // Send lower nibble
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f000 f88d 	bl	8002d1c <LCD_SendHalfByte>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40020c00 	.word	0x40020c00

08002c10 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Output_GPIO_Port, LCD_RS_Output_Pin, GPIO_PIN_SET); // RS = 1 for data
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	480a      	ldr	r0, [pc, #40]	; (8002c48 <LCD_SendData+0x38>)
 8002c20:	f005 fb1a 	bl	8008258 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET); // RW = 0 for write

	LCD_SendHalfByte(data >> 4); // Send higher nibble
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f876 	bl	8002d1c <LCD_SendHalfByte>
	LCD_SendHalfByte(data & 0x0F); // Send lower nibble
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 f86f 	bl	8002d1c <LCD_SendHalfByte>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40020c00 	.word	0x40020c00

08002c4c <LCD_CreateCustomChar>:

void LCD_CreateCustomChar(uint8_t location, uint8_t charmap[]) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	6039      	str	r1, [r7, #0]
 8002c56:	71fb      	strb	r3, [r7, #7]
	location &= 0x07; // Only 8 locations (0-7)
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(0x40 | (location << 3)); // Set CGRAM address
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	b25b      	sxtb	r3, r3
 8002c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6a:	b25b      	sxtb	r3, r3
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff ffb0 	bl	8002bd4 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e009      	b.n	8002c8e <LCD_CreateCustomChar+0x42>
		LCD_SendData(charmap[i]);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ffc4 	bl	8002c10 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b07      	cmp	r3, #7
 8002c92:	ddf2      	ble.n	8002c7a <LCD_CreateCustomChar+0x2e>
	}
}
 8002c94:	bf00      	nop
 8002c96:	bf00      	nop
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	460a      	mov	r2, r1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	// Each row has different starting addresses
	switch (row) {
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d819      	bhi.n	8002cea <LCD_SetCursor+0x4a>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <LCD_SetCursor+0x1c>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ccd 	.word	0x08002ccd
 8002cc0:	08002cd3 	.word	0x08002cd3
 8002cc4:	08002cdb 	.word	0x08002cdb
 8002cc8:	08002ce3 	.word	0x08002ce3
	case 0:
		address = 0x00 + col;
 8002ccc:	79bb      	ldrb	r3, [r7, #6]
 8002cce:	73fb      	strb	r3, [r7, #15]
		break; // 1st row starting from 0x00
 8002cd0:	e00d      	b.n	8002cee <LCD_SetCursor+0x4e>
	case 1:
		address = 0x40 + col;
 8002cd2:	79bb      	ldrb	r3, [r7, #6]
 8002cd4:	3340      	adds	r3, #64	; 0x40
 8002cd6:	73fb      	strb	r3, [r7, #15]
		break; // 2nd row starting from 0x40
 8002cd8:	e009      	b.n	8002cee <LCD_SetCursor+0x4e>
	case 2:
		address = 0x14 + col;
 8002cda:	79bb      	ldrb	r3, [r7, #6]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	73fb      	strb	r3, [r7, #15]
		break; // 3rd row starting from 0x14
 8002ce0:	e005      	b.n	8002cee <LCD_SetCursor+0x4e>
	case 3:
		address = 0x54 + col;
 8002ce2:	79bb      	ldrb	r3, [r7, #6]
 8002ce4:	3354      	adds	r3, #84	; 0x54
 8002ce6:	73fb      	strb	r3, [r7, #15]
		break; // 4th row starting from 0x54
 8002ce8:	e001      	b.n	8002cee <LCD_SetCursor+0x4e>
	default:
		address = 0x00; // Default to first row if invalid row number
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
	}
	// Send command to set DDRAM address
	LCD_SendCommand(0x80 | address);
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff6c 	bl	8002bd4 <LCD_SendCommand>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <LCD_Clear>:

void LCD_Clear(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
	LCD_ClearStringBuffer();
 8002d08:	f000 f85e 	bl	8002dc8 <LCD_ClearStringBuffer>
	LCD_SendCommand(0x01); // Clear display command
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7ff ff61 	bl	8002bd4 <LCD_SendCommand>
	HAL_Delay(2); // Wait for the command to be processed (clearing takes time)
 8002d12:	2002      	movs	r0, #2
 8002d14:	f003 fe4c 	bl	80069b0 <HAL_Delay>
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <LCD_SendHalfByte>:
void LCD_SendHalfByte(uint8_t data) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_Output_GPIO_Port, LCD_D4_Output_Pin,
			(data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_Output_GPIO_Port, LCD_D4_Output_Pin,
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2108      	movs	r1, #8
 8002d32:	4824      	ldr	r0, [pc, #144]	; (8002dc4 <LCD_SendHalfByte+0xa8>)
 8002d34:	f005 fa90 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_Output_GPIO_Port, LCD_D5_Output_Pin,
			(data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	105b      	asrs	r3, r3, #1
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_Output_GPIO_Port, LCD_D5_Output_Pin,
 8002d44:	461a      	mov	r2, r3
 8002d46:	2110      	movs	r1, #16
 8002d48:	481e      	ldr	r0, [pc, #120]	; (8002dc4 <LCD_SendHalfByte+0xa8>)
 8002d4a:	f005 fa85 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_Output_GPIO_Port, LCD_D6_Output_Pin,
			(data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	109b      	asrs	r3, r3, #2
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_Output_GPIO_Port, LCD_D6_Output_Pin,
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2140      	movs	r1, #64	; 0x40
 8002d5e:	4819      	ldr	r0, [pc, #100]	; (8002dc4 <LCD_SendHalfByte+0xa8>)
 8002d60:	f005 fa7a 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_Output_GPIO_Port, LCD_D7_Output_Pin,
			(data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	10db      	asrs	r3, r3, #3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_Output_GPIO_Port, LCD_D7_Output_Pin,
 8002d70:	461a      	mov	r2, r3
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	4813      	ldr	r0, [pc, #76]	; (8002dc4 <LCD_SendHalfByte+0xa8>)
 8002d76:	f005 fa6f 	bl	8008258 <HAL_GPIO_WritePin>
	// Pulse the Enable pin
	HAL_GPIO_WritePin(LCD_EN_Output_GPIO_Port, LCD_EN_Output_Pin, GPIO_PIN_SET);
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <LCD_SendHalfByte+0xa8>)
 8002d80:	f005 fa6a 	bl	8008258 <HAL_GPIO_WritePin>
	//HAL_Delay(1); // Delay for enable pulse width
	for (uint16_t i = 0; i < 400; i++){ //140 is supposed to be 10uS
 8002d84:	2300      	movs	r3, #0
 8002d86:	81fb      	strh	r3, [r7, #14]
 8002d88:	e003      	b.n	8002d92 <LCD_SendHalfByte+0x76>
		__NOP();
 8002d8a:	bf00      	nop
	for (uint16_t i = 0; i < 400; i++){ //140 is supposed to be 10uS
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	81fb      	strh	r3, [r7, #14]
 8002d92:	89fb      	ldrh	r3, [r7, #14]
 8002d94:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002d98:	d3f7      	bcc.n	8002d8a <LCD_SendHalfByte+0x6e>
	}
	HAL_GPIO_WritePin(LCD_EN_Output_GPIO_Port, LCD_EN_Output_Pin,
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <LCD_SendHalfByte+0xa8>)
 8002da0:	f005 fa5a 	bl	8008258 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	//HAL_Delay(1);
	for (uint16_t i = 0; i < 400; i++){
 8002da4:	2300      	movs	r3, #0
 8002da6:	81bb      	strh	r3, [r7, #12]
 8002da8:	e003      	b.n	8002db2 <LCD_SendHalfByte+0x96>
		__NOP();
 8002daa:	bf00      	nop
	for (uint16_t i = 0; i < 400; i++){
 8002dac:	89bb      	ldrh	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	81bb      	strh	r3, [r7, #12]
 8002db2:	89bb      	ldrh	r3, [r7, #12]
 8002db4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002db8:	d3f7      	bcc.n	8002daa <LCD_SendHalfByte+0x8e>
	}
}
 8002dba:	bf00      	nop
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40020c00 	.word	0x40020c00

08002dc8 <LCD_ClearStringBuffer>:

void LCD_ClearStringBuffer(void) {
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(stringBuffer); i++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	e007      	b.n	8002de4 <LCD_ClearStringBuffer+0x1c>
		stringBuffer[i] = '\0';
 8002dd4:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <LCD_ClearStringBuffer+0x30>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4413      	add	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(stringBuffer); i++) {
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3301      	adds	r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b14      	cmp	r3, #20
 8002de8:	d9f4      	bls.n	8002dd4 <LCD_ClearStringBuffer+0xc>
	}

//	memset(stringBuffer, 0, 21);
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	200004a4 	.word	0x200004a4

08002dfc <printLCDInt>:
		}

	}
}

void printLCDInt(int row, char *data, int number,int totalCycle) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
    int localcounter = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    char numberStr[22];
    if (row < 0 || row >= LCD_ROW_COUNT) {
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db6c      	blt.n	8002eee <printLCDInt+0xf2>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	dc69      	bgt.n	8002eee <printLCDInt+0xf2>
        return;
    }
    strncpy(lastLCDData[row], data, MAX_STRING_LENGTH - 1);
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	00da      	lsls	r2, r3, #3
 8002e24:	1ad2      	subs	r2, r2, r3
 8002e26:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <printLCDInt+0xfc>)
 8002e28:	4413      	add	r3, r2
 8002e2a:	2214      	movs	r2, #20
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f011 fab7 	bl	80143a2 <strncpy>
    lastLCDData[row][MAX_STRING_LENGTH - 1] = '\0';
 8002e34:	4930      	ldr	r1, [pc, #192]	; (8002ef8 <printLCDInt+0xfc>)
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00da      	lsls	r2, r3, #3
 8002e40:	1ad2      	subs	r2, r2, r3
 8002e42:	188b      	adds	r3, r1, r2
 8002e44:	3314      	adds	r3, #20
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
    if(totalCycle > 0)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	dd09      	ble.n	8002e64 <printLCDInt+0x68>
    	snprintf(numberStr, sizeof(numberStr), "%d/%d", number,totalCycle);
 8002e50:	f107 0010 	add.w	r0, r7, #16
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a28      	ldr	r2, [pc, #160]	; (8002efc <printLCDInt+0x100>)
 8002e5c:	2116      	movs	r1, #22
 8002e5e:	f011 f9c1 	bl	80141e4 <sniprintf>
 8002e62:	e006      	b.n	8002e72 <printLCDInt+0x76>
    else
       	snprintf(numberStr, sizeof(numberStr), "%d", number);
 8002e64:	f107 0010 	add.w	r0, r7, #16
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <printLCDInt+0x104>)
 8002e6c:	2116      	movs	r1, #22
 8002e6e:	f011 f9b9 	bl	80141e4 <sniprintf>
    LCD_SetCursor(row, 0);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff11 	bl	8002ca0 <LCD_SetCursor>
    	// Print the data
    	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8002e7e:	e009      	b.n	8002e94 <printLCDInt+0x98>
    		LCD_SendData(*data++);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60ba      	str	r2, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fec1 	bl	8002c10 <LCD_SendData>
    		localcounter++;
 8002e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e90:	3301      	adds	r3, #1
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <printLCDInt+0xa6>
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	2b13      	cmp	r3, #19
 8002ea0:	ddee      	ble.n	8002e80 <printLCDInt+0x84>
    	}
    	for (int i = 0; numberStr[i] != '\0' && localcounter < LCD_COLUMN_COUNT; i++) {
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ea6:	e00d      	b.n	8002ec4 <printLCDInt+0xc8>
    	        LCD_SendData(numberStr[i]);
 8002ea8:	f107 0210 	add.w	r2, r7, #16
 8002eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff feac 	bl	8002c10 <LCD_SendData>
    	        localcounter++;
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	3301      	adds	r3, #1
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    	for (int i = 0; numberStr[i] != '\0' && localcounter < LCD_COLUMN_COUNT; i++) {
 8002ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ec4:	f107 0210 	add.w	r2, r7, #16
 8002ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <printLCDInt+0xea>
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	2b13      	cmp	r3, #19
 8002ed6:	dde7      	ble.n	8002ea8 <printLCDInt+0xac>
    	LCD_SendData(numberStr);
    	localcounter++;
    	}
    	*/
    	//Fill rest of column with empty space
    	while(localcounter < LCD_COLUMN_COUNT){
 8002ed8:	e005      	b.n	8002ee6 <printLCDInt+0xea>
    		LCD_SendData(0);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f7ff fe98 	bl	8002c10 <LCD_SendData>
    		localcounter++;
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    	while(localcounter < LCD_COLUMN_COUNT){
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b13      	cmp	r3, #19
 8002eea:	ddf6      	ble.n	8002eda <printLCDInt+0xde>
 8002eec:	e000      	b.n	8002ef0 <printLCDInt+0xf4>
        return;
 8002eee:	bf00      	nop
    }
}
 8002ef0:	3730      	adds	r7, #48	; 0x30
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200003e4 	.word	0x200003e4
 8002efc:	08017d8c 	.word	0x08017d8c
 8002f00:	08017d94 	.word	0x08017d94

08002f04 <printLCD>:
		localcounter++;
	}
}
*/

void printLCD(int row, char *data, int smiley) {
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	int localcounter = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
	if (row < 0 || row >= LCD_ROW_COUNT) {
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	db58      	blt.n	8002fcc <printLCD+0xc8>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	dc55      	bgt.n	8002fcc <printLCD+0xc8>
		return; // Row is out of bounds
	}
	// Store the data in the global array lastLCDData
	strncpy(lastLCDData[row], data, MAX_STRING_LENGTH - 1);
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	00da      	lsls	r2, r3, #3
 8002f2a:	1ad2      	subs	r2, r2, r3
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <printLCD+0xd0>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	2214      	movs	r2, #20
 8002f32:	68b9      	ldr	r1, [r7, #8]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f011 fa34 	bl	80143a2 <strncpy>
	lastLCDData[row][MAX_STRING_LENGTH - 1] = '\0'; // Ensure null termination
 8002f3a:	4926      	ldr	r1, [pc, #152]	; (8002fd4 <printLCD+0xd0>)
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	00da      	lsls	r2, r3, #3
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	188b      	adds	r3, r1, r2
 8002f4a:	3314      	adds	r3, #20
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
	// Store the smiley (custom character) code in lastLCDCustom
	lastLCDCustom[row] = smiley;
 8002f50:	4921      	ldr	r1, [pc, #132]	; (8002fd8 <printLCD+0xd4>)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Set cursor position
	LCD_SetCursor(row, 0);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fe9d 	bl	8002ca0 <LCD_SetCursor>
	// Print the data
	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8002f66:	e009      	b.n	8002f7c <printLCD+0x78>
		LCD_SendData(*data++);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fe4d 	bl	8002c10 <LCD_SendData>
		localcounter++;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <printLCD+0x86>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	2b13      	cmp	r3, #19
 8002f88:	ddee      	ble.n	8002f68 <printLCD+0x64>
	}
	// Check the length of the data and print the smiley if there is space
	if (strlen(lastLCDData[row]) < LCD_COLUMN_COUNT) {
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4413      	add	r3, r2
 8002f92:	00da      	lsls	r2, r3, #3
 8002f94:	1ad2      	subs	r2, r2, r3
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <printLCD+0xd0>)
 8002f98:	4413      	add	r3, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd f968 	bl	8000270 <strlen>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b13      	cmp	r3, #19
 8002fa4:	d80e      	bhi.n	8002fc4 <printLCD+0xc0>
		LCD_SendData(smiley);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fe30 	bl	8002c10 <LCD_SendData>
		localcounter++;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
	}
	//Fill rest of column with empty space
	while(localcounter < LCD_COLUMN_COUNT){
 8002fb6:	e005      	b.n	8002fc4 <printLCD+0xc0>
		LCD_SendData(0);
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f7ff fe29 	bl	8002c10 <LCD_SendData>
		localcounter++;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	617b      	str	r3, [r7, #20]
	while(localcounter < LCD_COLUMN_COUNT){
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b13      	cmp	r3, #19
 8002fc8:	ddf6      	ble.n	8002fb8 <printLCD+0xb4>
 8002fca:	e000      	b.n	8002fce <printLCD+0xca>
		return; // Row is out of bounds
 8002fcc:	bf00      	nop
	}
}
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	200003e4 	.word	0x200003e4
 8002fd8:	20000438 	.word	0x20000438

08002fdc <LCDRGBControl>:

void LCDRGBControl(int brightness) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
	if (brightness > 100) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b64      	cmp	r3, #100	; 0x64
 8002fe8:	dd02      	ble.n	8002ff0 <LCDRGBControl+0x14>
		brightness = 100;
 8002fea:	2364      	movs	r3, #100	; 0x64
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e004      	b.n	8002ffa <LCDRGBControl+0x1e>
		} else if (brightness < 0) {
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da01      	bge.n	8002ffa <LCDRGBControl+0x1e>
			brightness = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	607b      	str	r3, [r7, #4]
		}
		int contrast = 100 - brightness;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003000:	60fb      	str	r3, [r7, #12]
	pwm(LCD_Contrast_PWM, contrast);  //Pins are Common Anode
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300c:	eeb0 0a67 	vmov.f32	s0, s15
 8003010:	2003      	movs	r0, #3
 8003012:	f002 fa3b 	bl	800548c <pwm>
}
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <powerLEDControl>:
	for (int i = 0; i < LCD_ROW_COUNT; i++) {
		printLCD(i, lastLCDData[i], lastLCDCustom[i]);
	}
}

void powerLEDControl(int state) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	if (state == OFF) {
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d107      	bne.n	800303e <powerLEDControl+0x1e>
		digitalWrite(Power_LED_Output, LOW);
 800302e:	2100      	movs	r1, #0
 8003030:	2000      	movs	r0, #0
 8003032:	f7fe fa63 	bl	80014fc <digitalWrite>
		isPowerLEDOn = FALSE;
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <powerLEDControl+0x3c>)
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
	} else if (state == ON) {
		digitalWrite(Power_LED_Output, HIGH);
		isPowerLEDOn = TRUE;
	}
}
 800303c:	e009      	b.n	8003052 <powerLEDControl+0x32>
	} else if (state == ON) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d106      	bne.n	8003052 <powerLEDControl+0x32>
		digitalWrite(Power_LED_Output, HIGH);
 8003044:	2101      	movs	r1, #1
 8003046:	2000      	movs	r0, #0
 8003048:	f7fe fa58 	bl	80014fc <digitalWrite>
		isPowerLEDOn = TRUE;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <powerLEDControl+0x3c>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000489 	.word	0x20000489

08003060 <controlLCDContrast>:

void controlLCDContrast(int contrastLevel) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if (contrastLevel > 100) {
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	dd02      	ble.n	8003074 <controlLCDContrast+0x14>
		contrastLevel = 100;
 800306e:	2364      	movs	r3, #100	; 0x64
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	e004      	b.n	800307e <controlLCDContrast+0x1e>
	} else if (contrastLevel < 0) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da01      	bge.n	800307e <controlLCDContrast+0x1e>
		contrastLevel = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
	}
	int contrast = 100 - contrastLevel;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003084:	60fb      	str	r3, [r7, #12]
	pwm(LCD_Contrast_PWM, contrast);  //Change LCD contrast
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	ee07 3a90 	vmov	s15, r3
 800308c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003090:	eeb0 0a67 	vmov.f32	s0, s15
 8003094:	2003      	movs	r0, #3
 8003096:	f002 f9f9 	bl	800548c <pwm>
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <SendTareWeight>:
/**
  * @brief  Function to send the Weight after Sending TARE command.
  * @Param   TareWeight which is the total weight or the weight when not zero
  * @retval None
  */
static void SendTareWeight(int Tareweight) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
    char buffer[7]= {0};// Allocate enough space for the number (max 10 digits)
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	2100      	movs	r1, #0
 80030b6:	460a      	mov	r2, r1
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	460a      	mov	r2, r1
 80030bc:	709a      	strb	r2, [r3, #2]
    sprintf(buffer, "%d", Tareweight);  // Convert integer to string
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4909      	ldr	r1, [pc, #36]	; (80030ec <SendTareWeight+0x48>)
 80030c6:	4618      	mov	r0, r3
 80030c8:	f011 f8c0 	bl	801424c <siprintf>

    // Transmit data using DMA
    if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*)buffer,7) != HAL_OK) {
 80030cc:	f107 0308 	add.w	r3, r7, #8
 80030d0:	2207      	movs	r2, #7
 80030d2:	4619      	mov	r1, r3
 80030d4:	4806      	ldr	r0, [pc, #24]	; (80030f0 <SendTareWeight+0x4c>)
 80030d6:	f007 fbf1 	bl	800a8bc <HAL_UART_Transmit_DMA>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <SendTareWeight+0x40>
        Error_Handler();  // Handle errors if transmission fails
 80030e0:	f002 f9ce 	bl	8005480 <Error_Handler>
    }
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	08017d98 	.word	0x08017d98
 80030f0:	20002eb4 	.word	0x20002eb4

080030f4 <TareAll>:
/**
  * @brief  Function to send the "TARE" command using interrupt-based transmission.
  * @retval None
  */
void TareAll(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
	vTaskDelay(pdMS_TO_TICKS(2000));
 80030fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80030fe:	f00e f897 	bl	8011230 <vTaskDelay>
//	 HAL_Delay(2000);
    // Start interrupt-based transmission of the "TARE" string
	   uint8_t tare[4] = "TARE";
 8003102:	4b10      	ldr	r3, [pc, #64]	; (8003144 <TareAll+0x50>)
 8003104:	607b      	str	r3, [r7, #4]

	   //sprintf(char_buffer, "%s%d", Data,Total_Weight);
	   if(HAL_UART_Transmit_DMA(&huart3, tare, sizeof(tare))!= HAL_OK)
 8003106:	1d3b      	adds	r3, r7, #4
 8003108:	2204      	movs	r2, #4
 800310a:	4619      	mov	r1, r3
 800310c:	480e      	ldr	r0, [pc, #56]	; (8003148 <TareAll+0x54>)
 800310e:	f007 fbd5 	bl	800a8bc <HAL_UART_Transmit_DMA>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <TareAll+0x28>
	   {
			  Error_Handler();
 8003118:	f002 f9b2 	bl	8005480 <Error_Handler>
	   }
	   vTaskDelay(pdMS_TO_TICKS(10));
 800311c:	200a      	movs	r0, #10
 800311e:	f00e f887 	bl	8011230 <vTaskDelay>
//	   HAL_Delay(10);
	   SendTareWeight(tareSend);
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <TareAll+0x58>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ffbc 	bl	80030a4 <SendTareWeight>
	   SerialPrintln("Taring the system");
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <TareAll+0x5c>)
 800312e:	f000 fabd 	bl	80036ac <SerialPrintln>
	   vTaskDelay(pdMS_TO_TICKS(1000));
 8003132:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003136:	f00e f87b 	bl	8011230 <vTaskDelay>
//	   HAL_Delay(1000);
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	45524154 	.word	0x45524154
 8003148:	20002eb4 	.word	0x20002eb4
 800314c:	20000384 	.word	0x20000384
 8003150:	08017d9c 	.word	0x08017d9c

08003154 <ReadLoadCellAVG>:
  * @brief  Processes the received 8-byte message and displays the weight if valid.
  * @param  message: Pointer to the received 8-byte message buffer.
  * @retval None
  */
void ReadLoadCellAVG()
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
	int current_A = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
	//startUARTReception();
    uint32_t syncWord = (rxBuffer[0] << 24) | (rxBuffer[1] << 16) | (rxBuffer[2] << 8) | rxBuffer[3];
 800315e:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <ReadLoadCellAVG+0x94>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	061a      	lsls	r2, r3, #24
 8003164:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <ReadLoadCellAVG+0x94>)
 8003166:	785b      	ldrb	r3, [r3, #1]
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	4b1e      	ldr	r3, [pc, #120]	; (80031e8 <ReadLoadCellAVG+0x94>)
 800316e:	789b      	ldrb	r3, [r3, #2]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	4313      	orrs	r3, r2
 8003174:	4a1c      	ldr	r2, [pc, #112]	; (80031e8 <ReadLoadCellAVG+0x94>)
 8003176:	78d2      	ldrb	r2, [r2, #3]
 8003178:	4313      	orrs	r3, r2
 800317a:	607b      	str	r3, [r7, #4]
    if (syncWord != SYNCWORD)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8003182:	d129      	bne.n	80031d8 <ReadLoadCellAVG+0x84>
    {
        return;
    }
    //Extract the weight values
    int16_t value1 = (rxBuffer[4] << 8) | rxBuffer[5];  // First weight value
 8003184:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <ReadLoadCellAVG+0x94>)
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	b21a      	sxth	r2, r3
 800318c:	4b16      	ldr	r3, [pc, #88]	; (80031e8 <ReadLoadCellAVG+0x94>)
 800318e:	795b      	ldrb	r3, [r3, #5]
 8003190:	b21b      	sxth	r3, r3
 8003192:	4313      	orrs	r3, r2
 8003194:	807b      	strh	r3, [r7, #2]
    int16_t value2 = (rxBuffer[6] << 8) | rxBuffer[7];  // Repeated weight value
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <ReadLoadCellAVG+0x94>)
 8003198:	799b      	ldrb	r3, [r3, #6]
 800319a:	021b      	lsls	r3, r3, #8
 800319c:	b21a      	sxth	r2, r3
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <ReadLoadCellAVG+0x94>)
 80031a0:	79db      	ldrb	r3, [r3, #7]
 80031a2:	b21b      	sxth	r3, r3
 80031a4:	4313      	orrs	r3, r2
 80031a6:	803b      	strh	r3, [r7, #0]
    if (value1 != value2)
 80031a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80031ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d113      	bne.n	80031dc <ReadLoadCellAVG+0x88>
    {
        return;
    }
   // value1 = value1 * CORRECTION_FACTOR;
    for(int i = 0; i < AVERAGE; i++){
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	e007      	b.n	80031ca <ReadLoadCellAVG+0x76>
       	current_A = current_A + value1;
 80031ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4413      	add	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < AVERAGE; i++){
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	ddf4      	ble.n	80031ba <ReadLoadCellAVG+0x66>
    }
    current_A = current_A / AVERAGE;
    //futureFilter(current_A);
    Total_Weight = current_A;
 80031d0:	4a06      	ldr	r2, [pc, #24]	; (80031ec <ReadLoadCellAVG+0x98>)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e002      	b.n	80031de <ReadLoadCellAVG+0x8a>
        return;
 80031d8:	bf00      	nop
 80031da:	e000      	b.n	80031de <ReadLoadCellAVG+0x8a>
        return;
 80031dc:	bf00      	nop
    // Re-enable UART reception for the next message
    //startUARTReception();
}
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	20002b1c 	.word	0x20002b1c
 80031ec:	2000035c 	.word	0x2000035c

080031f0 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80031f6:	2300      	movs	r3, #0
 80031f8:	607b      	str	r3, [r7, #4]
 80031fa:	e007      	b.n	800320c <clear_buffer+0x1c>
 80031fc:	4a08      	ldr	r2, [pc, #32]	; (8003220 <clear_buffer+0x30>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	2200      	movs	r2, #0
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3301      	adds	r3, #1
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b7f      	cmp	r3, #127	; 0x7f
 8003210:	ddf4      	ble.n	80031fc <clear_buffer+0xc>
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	20002750 	.word	0x20002750

08003224 <send_uart>:

void send_uart (char *string)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd f81f 	bl	8000270 <strlen>
 8003232:	4603      	mov	r3, r0
 8003234:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	b29a      	uxth	r2, r3
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	6879      	ldr	r1, [r7, #4]
 8003240:	4803      	ldr	r0, [pc, #12]	; (8003250 <send_uart+0x2c>)
 8003242:	f007 faaf 	bl	800a7a4 <HAL_UART_Transmit>
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20002e6c 	.word	0x20002e6c

08003254 <sd_Card_Check>:


void sd_Card_Check(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af02      	add	r7, sp, #8
	 fresult = f_mount(&fs, "/", 1);
 800325a:	2201      	movs	r2, #1
 800325c:	4945      	ldr	r1, [pc, #276]	; (8003374 <sd_Card_Check+0x120>)
 800325e:	4846      	ldr	r0, [pc, #280]	; (8003378 <sd_Card_Check+0x124>)
 8003260:	f00b f9c8 	bl	800e5f4 <f_mount>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <sd_Card_Check+0x128>)
 800326a:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK){
 800326c:	4b43      	ldr	r3, [pc, #268]	; (800337c <sd_Card_Check+0x128>)
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01c      	beq.n	80032ae <sd_Card_Check+0x5a>
				send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8003274:	4842      	ldr	r0, [pc, #264]	; (8003380 <sd_Card_Check+0x12c>)
 8003276:	f7ff ffd5 	bl	8003224 <send_uart>
				if (f_mkfs("", FM_FAT32, 0, work, sizeof(work)) != FR_OK) {
 800327a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	4b40      	ldr	r3, [pc, #256]	; (8003384 <sd_Card_Check+0x130>)
 8003282:	2200      	movs	r2, #0
 8003284:	2102      	movs	r1, #2
 8003286:	4840      	ldr	r0, [pc, #256]	; (8003388 <sd_Card_Check+0x134>)
 8003288:	f00c f8b0 	bl	800f3ec <f_mkfs>
					// Handle format error
				}
				fresult = f_mount(&fs, "/", 1);
 800328c:	2201      	movs	r2, #1
 800328e:	4939      	ldr	r1, [pc, #228]	; (8003374 <sd_Card_Check+0x120>)
 8003290:	4839      	ldr	r0, [pc, #228]	; (8003378 <sd_Card_Check+0x124>)
 8003292:	f00b f9af 	bl	800e5f4 <f_mount>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <sd_Card_Check+0x128>)
 800329c:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK){
 800329e:	4b37      	ldr	r3, [pc, #220]	; (800337c <sd_Card_Check+0x128>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <sd_Card_Check+0x60>
					send_uart ("Mounted SD CARD Sucesfully ...\n\n");
 80032a6:	4839      	ldr	r0, [pc, #228]	; (800338c <sd_Card_Check+0x138>)
 80032a8:	f7ff ffbc 	bl	8003224 <send_uart>
 80032ac:	e002      	b.n	80032b4 <sd_Card_Check+0x60>
				}
	  		}
	  	else send_uart("SD CARD mounted successfully...\n\n");
 80032ae:	4838      	ldr	r0, [pc, #224]	; (8003390 <sd_Card_Check+0x13c>)
 80032b0:	f7ff ffb8 	bl	8003224 <send_uart>

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	 	f_getfree("", &fre_clust, &pfs);
 80032b4:	4a37      	ldr	r2, [pc, #220]	; (8003394 <sd_Card_Check+0x140>)
 80032b6:	4938      	ldr	r1, [pc, #224]	; (8003398 <sd_Card_Check+0x144>)
 80032b8:	4833      	ldr	r0, [pc, #204]	; (8003388 <sd_Card_Check+0x134>)
 80032ba:	f00b ffdb 	bl	800f274 <f_getfree>
	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80032be:	4b35      	ldr	r3, [pc, #212]	; (8003394 <sd_Card_Check+0x140>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	3b02      	subs	r3, #2
 80032c6:	4a33      	ldr	r2, [pc, #204]	; (8003394 <sd_Card_Check+0x140>)
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	8952      	ldrh	r2, [r2, #10]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f917 	bl	8000504 <__aeabi_ui2d>
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	4b30      	ldr	r3, [pc, #192]	; (800339c <sd_Card_Check+0x148>)
 80032dc:	f7fd f98c 	bl	80005f8 <__aeabi_dmul>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	f7fd fc5e 	bl	8000ba8 <__aeabi_d2uiz>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <sd_Card_Check+0x14c>)
 80032f0:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <sd_Card_Check+0x14c>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	492a      	ldr	r1, [pc, #168]	; (80033a4 <sd_Card_Check+0x150>)
 80032fa:	482b      	ldr	r0, [pc, #172]	; (80033a8 <sd_Card_Check+0x154>)
 80032fc:	f010 ffa6 	bl	801424c <siprintf>
	  	send_uart(buffer);
 8003300:	4829      	ldr	r0, [pc, #164]	; (80033a8 <sd_Card_Check+0x154>)
 8003302:	f7ff ff8f 	bl	8003224 <send_uart>
	  	clear_buffer();
 8003306:	f7ff ff73 	bl	80031f0 <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800330a:	4b22      	ldr	r3, [pc, #136]	; (8003394 <sd_Card_Check+0x140>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	895b      	ldrh	r3, [r3, #10]
 8003310:	461a      	mov	r2, r3
 8003312:	4b21      	ldr	r3, [pc, #132]	; (8003398 <sd_Card_Check+0x144>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	fb02 f303 	mul.w	r3, r2, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f8f2 	bl	8000504 <__aeabi_ui2d>
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	4b1d      	ldr	r3, [pc, #116]	; (800339c <sd_Card_Check+0x148>)
 8003326:	f7fd f967 	bl	80005f8 <__aeabi_dmul>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	f7fd fc39 	bl	8000ba8 <__aeabi_d2uiz>
 8003336:	4603      	mov	r3, r0
 8003338:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <sd_Card_Check+0x158>)
 800333a:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <sd_Card_Check+0x158>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	491b      	ldr	r1, [pc, #108]	; (80033b0 <sd_Card_Check+0x15c>)
 8003344:	4818      	ldr	r0, [pc, #96]	; (80033a8 <sd_Card_Check+0x154>)
 8003346:	f010 ff81 	bl	801424c <siprintf>
	  	send_uart(buffer);
 800334a:	4817      	ldr	r0, [pc, #92]	; (80033a8 <sd_Card_Check+0x154>)
 800334c:	f7ff ff6a 	bl	8003224 <send_uart>
	  	clear_buffer();
 8003350:	f7ff ff4e 	bl	80031f0 <clear_buffer>

	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	  	 fresult = f_open(&fil, "TimeLine.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8003354:	2213      	movs	r2, #19
 8003356:	4917      	ldr	r1, [pc, #92]	; (80033b4 <sd_Card_Check+0x160>)
 8003358:	4817      	ldr	r0, [pc, #92]	; (80033b8 <sd_Card_Check+0x164>)
 800335a:	f00b f9af 	bl	800e6bc <f_open>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <sd_Card_Check+0x128>)
 8003364:	701a      	strb	r2, [r3, #0]
	    send_uart(buffer);
	  	send_uart("\n\n");
*/


	  	f_close(&fil);
 8003366:	4814      	ldr	r0, [pc, #80]	; (80033b8 <sd_Card_Check+0x164>)
 8003368:	f00b ff55 	bl	800f216 <f_close>

}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	08017db0 	.word	0x08017db0
 8003378:	200004d0 	.word	0x200004d0
 800337c:	2000253c 	.word	0x2000253c
 8003380:	08017db4 	.word	0x08017db4
 8003384:	20002550 	.word	0x20002550
 8003388:	08017dd8 	.word	0x08017dd8
 800338c:	08017ddc 	.word	0x08017ddc
 8003390:	08017e00 	.word	0x08017e00
 8003394:	20002540 	.word	0x20002540
 8003398:	20002544 	.word	0x20002544
 800339c:	3fe00000 	.word	0x3fe00000
 80033a0:	20002548 	.word	0x20002548
 80033a4:	08017e24 	.word	0x08017e24
 80033a8:	20002750 	.word	0x20002750
 80033ac:	2000254c 	.word	0x2000254c
 80033b0:	08017e40 	.word	0x08017e40
 80033b4:	08017e5c 	.word	0x08017e5c
 80033b8:	2000150c 	.word	0x2000150c

080033bc <LoadTimeFromSDCard>:

void LoadTimeFromSDCard(uint32_t *hours, uint32_t *minutes, uint32_t *seconds) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 80033c2:	af02      	add	r7, sp, #8
 80033c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033c8:	f843 0c4c 	str.w	r0, [r3, #-76]
 80033cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033d0:	f843 1c50 	str.w	r1, [r3, #-80]
 80033d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033d8:	f843 2c54 	str.w	r2, [r3, #-84]
    FIL file;
    char time_str[16];
    FRESULT fresult;

    // Initialize time to zero in case of errors
    *hours = 0;
 80033dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033e0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
    *minutes = 0;
 80033e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033ec:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
    *seconds = 0;
 80033f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033f8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]

    /* Open file for reading */
    fresult = f_open(&file, "TimeLine.txt", FA_READ);
 8003400:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003404:	3b14      	subs	r3, #20
 8003406:	2201      	movs	r2, #1
 8003408:	492a      	ldr	r1, [pc, #168]	; (80034b4 <LoadTimeFromSDCard+0xf8>)
 800340a:	4618      	mov	r0, r3
 800340c:	f00b f956 	bl	800e6bc <f_open>
 8003410:	4603      	mov	r3, r0
 8003412:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003416:	f102 0217 	add.w	r2, r2, #23
 800341a:	7013      	strb	r3, [r2, #0]
    if (fresult == FR_OK) {
 800341c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003420:	f103 0317 	add.w	r3, r3, #23
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d13d      	bne.n	80034a6 <LoadTimeFromSDCard+0xea>
        // Read the last saved time from the file
        UINT bytes_read;
        fresult = f_read(&file, time_str, sizeof(time_str) - 1, &bytes_read);
 800342a:	f107 0318 	add.w	r3, r7, #24
 800342e:	3b08      	subs	r3, #8
 8003430:	f107 0118 	add.w	r1, r7, #24
 8003434:	3904      	subs	r1, #4
 8003436:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800343a:	3814      	subs	r0, #20
 800343c:	220f      	movs	r2, #15
 800343e:	f00b fb10 	bl	800ea62 <f_read>
 8003442:	4603      	mov	r3, r0
 8003444:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8003448:	f102 0217 	add.w	r2, r2, #23
 800344c:	7013      	strb	r3, [r2, #0]
        if (fresult == FR_OK) {
 800344e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003452:	f103 0317 	add.w	r3, r3, #23
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11e      	bne.n	800349a <LoadTimeFromSDCard+0xde>
            time_str[bytes_read] = '\0'; // Null-terminate the string
 800345c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003460:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8003464:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003468:	4413      	add	r3, r2
 800346a:	2200      	movs	r2, #0
 800346c:	f803 2c44 	strb.w	r2, [r3, #-68]
            sscanf(time_str, "%02lu:%02lu:%02lu", hours, minutes, seconds); // Parse the time
 8003470:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003474:	4619      	mov	r1, r3
 8003476:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800347a:	461a      	mov	r2, r3
 800347c:	f107 0018 	add.w	r0, r7, #24
 8003480:	3804      	subs	r0, #4
 8003482:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003486:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	f851 3c50 	ldr.w	r3, [r1, #-80]
 8003490:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8003494:	4908      	ldr	r1, [pc, #32]	; (80034b8 <LoadTimeFromSDCard+0xfc>)
 8003496:	f010 fef9 	bl	801428c <siscanf>
        }
        f_close(&file);
 800349a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800349e:	3b14      	subs	r3, #20
 80034a0:	4618      	mov	r0, r3
 80034a2:	f00b feb8 	bl	800f216 <f_close>
    } else {
        // Handle case where the file doesn't exist or can't be read
        // Time will remain initialized to 0:0:0
    }
}
 80034a6:	bf00      	nop
 80034a8:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	08017e5c 	.word	0x08017e5c
 80034b8:	08017e6c 	.word	0x08017e6c

080034bc <UpdateTimeToSDCard>:



void UpdateTimeToSDCard(uint32_t add_hours, uint32_t add_minutes, uint32_t add_seconds) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 80034c2:	b086      	sub	sp, #24
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034ca:	f843 0c64 	str.w	r0, [r3, #-100]
 80034ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034d2:	f843 1c68 	str.w	r1, [r3, #-104]
 80034d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034da:	f843 2c6c 	str.w	r2, [r3, #-108]
    uint32_t current_hours, current_minutes, current_seconds;

    if(log_to_sd_flag)
 80034de:	4b64      	ldr	r3, [pc, #400]	; (8003670 <UpdateTimeToSDCard+0x1b4>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80bd 	beq.w	8003664 <UpdateTimeToSDCard+0x1a8>
    {
    	log_to_sd_flag = 0;
 80034ea:	4b61      	ldr	r3, [pc, #388]	; (8003670 <UpdateTimeToSDCard+0x1b4>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
		// Load existing time from SD card
		LoadTimeFromSDCard(&current_hours, &current_minutes, &current_seconds);
 80034f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80034f4:	f102 0214 	add.w	r2, r2, #20
 80034f8:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80034fc:	f101 0118 	add.w	r1, r1, #24
 8003500:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003504:	f103 031c 	add.w	r3, r3, #28
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff57 	bl	80033bc <LoadTimeFromSDCard>

		// Add the new time values
		uint32_t total_seconds = current_seconds + add_seconds;
 800350e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003512:	f103 0314 	add.w	r3, r3, #20
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800351c:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 8003520:	4413      	add	r3, r2
 8003522:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003526:	f102 020c 	add.w	r2, r2, #12
 800352a:	6013      	str	r3, [r2, #0]
		uint32_t total_minutes = current_minutes + add_minutes + (total_seconds / 60);
 800352c:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003530:	f103 0318 	add.w	r3, r3, #24
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800353a:	f853 3c68 	ldr.w	r3, [r3, #-104]
 800353e:	441a      	add	r2, r3
 8003540:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003544:	f103 030c 	add.w	r3, r3, #12
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	494a      	ldr	r1, [pc, #296]	; (8003674 <UpdateTimeToSDCard+0x1b8>)
 800354c:	fba1 1303 	umull	r1, r3, r1, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	4413      	add	r3, r2
 8003554:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003558:	f102 0208 	add.w	r2, r2, #8
 800355c:	6013      	str	r3, [r2, #0]
		uint32_t total_hours = current_hours + add_hours + (total_minutes / 60);
 800355e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8003562:	f103 031c 	add.w	r3, r3, #28
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800356c:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8003570:	441a      	add	r2, r3
 8003572:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003576:	f103 0308 	add.w	r3, r3, #8
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	493d      	ldr	r1, [pc, #244]	; (8003674 <UpdateTimeToSDCard+0x1b8>)
 800357e:	fba1 1303 	umull	r1, r3, r1, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	4413      	add	r3, r2
 8003586:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800358a:	f102 0204 	add.w	r2, r2, #4
 800358e:	6013      	str	r3, [r2, #0]

		// Normalize the time
		total_seconds %= 60;
 8003590:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003594:	f103 030c 	add.w	r3, r3, #12
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <UpdateTimeToSDCard+0x1b8>)
 800359c:	fba3 1302 	umull	r1, r3, r3, r2
 80035a0:	0959      	lsrs	r1, r3, #5
 80035a2:	460b      	mov	r3, r1
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a5b      	subs	r3, r3, r1
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80035b0:	f102 020c 	add.w	r2, r2, #12
 80035b4:	6013      	str	r3, [r2, #0]
		total_minutes %= 60;
 80035b6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035ba:	f103 0308 	add.w	r3, r3, #8
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b2c      	ldr	r3, [pc, #176]	; (8003674 <UpdateTimeToSDCard+0x1b8>)
 80035c2:	fba3 1302 	umull	r1, r3, r3, r2
 80035c6:	0959      	lsrs	r1, r3, #5
 80035c8:	460b      	mov	r3, r1
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a5b      	subs	r3, r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80035d6:	f102 0208 	add.w	r2, r2, #8
 80035da:	6013      	str	r3, [r2, #0]

		// Save the updated time back to the SD card
		char time_str[16];
		snprintf(time_str, sizeof(time_str), "%02lu:%02lu:%02lu\n", total_hours, total_minutes, total_seconds);
 80035dc:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 80035e0:	f100 0004 	add.w	r0, r0, #4
 80035e4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035e8:	f103 030c 	add.w	r3, r3, #12
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80035f4:	f103 0308 	add.w	r3, r3, #8
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8003600:	f103 0304 	add.w	r3, r3, #4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1c      	ldr	r2, [pc, #112]	; (8003678 <UpdateTimeToSDCard+0x1bc>)
 8003608:	2110      	movs	r1, #16
 800360a:	f010 fdeb 	bl	80141e4 <sniprintf>
		FIL file;
		UINT bytes_written;
		FRESULT fresult;

		/* Open file to write/ create a file if it doesn't exist */
		fresult = f_open(&file, "TimeLine.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800360e:	f107 0310 	add.w	r3, r7, #16
 8003612:	220a      	movs	r2, #10
 8003614:	4919      	ldr	r1, [pc, #100]	; (800367c <UpdateTimeToSDCard+0x1c0>)
 8003616:	4618      	mov	r0, r3
 8003618:	f00b f850 	bl	800e6bc <f_open>
 800361c:	4603      	mov	r3, r0
 800361e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8003622:	f102 0203 	add.w	r2, r2, #3
 8003626:	7013      	strb	r3, [r2, #0]
		if (fresult == FR_OK) {
 8003628:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800362c:	f103 0303 	add.w	r3, r3, #3
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d116      	bne.n	8003664 <UpdateTimeToSDCard+0x1a8>
			f_write(&file, time_str, strlen(time_str), &bytes_written);
 8003636:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800363a:	f103 0304 	add.w	r3, r3, #4
 800363e:	4618      	mov	r0, r3
 8003640:	f7fc fe16 	bl	8000270 <strlen>
 8003644:	4602      	mov	r2, r0
 8003646:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800364a:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800364e:	f101 0104 	add.w	r1, r1, #4
 8003652:	f107 0010 	add.w	r0, r7, #16
 8003656:	f00b fb92 	bl	800ed7e <f_write>
			f_close(&file);
 800365a:	f107 0310 	add.w	r3, r7, #16
 800365e:	4618      	mov	r0, r3
 8003660:	f00b fdd9 	bl	800f216 <f_close>
		} else {
			// Handle error (e.g., SD card not inserted or write failure)
		}
    }
}
 8003664:	bf00      	nop
 8003666:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000388 	.word	0x20000388
 8003674:	88888889 	.word	0x88888889
 8003678:	08017e80 	.word	0x08017e80
 800367c:	08017e5c 	.word	0x08017e5c

08003680 <SerialPrint>:
extern UART_HandleTypeDef huart1;


/*Print character data without the new line at the end*/
void SerialPrint(const char* Data)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fc fdf1 	bl	8000270 <strlen>
 800368e:	4603      	mov	r3, r0
 8003690:	b29a      	uxth	r2, r3
 8003692:	f04f 33ff 	mov.w	r3, #4294967295
 8003696:	6879      	ldr	r1, [r7, #4]
 8003698:	4803      	ldr	r0, [pc, #12]	; (80036a8 <SerialPrint+0x28>)
 800369a:	f007 f883 	bl	800a7a4 <HAL_UART_Transmit>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20002e6c 	.word	0x20002e6c

080036ac <SerialPrintln>:

/*Print character data with the new line at the end*/
void SerialPrintln(const char* Data)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fc fddb 	bl	8000270 <strlen>
 80036ba:	4603      	mov	r3, r0
 80036bc:	b29a      	uxth	r2, r3
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4808      	ldr	r0, [pc, #32]	; (80036e8 <SerialPrintln+0x3c>)
 80036c6:	f007 f86d 	bl	800a7a4 <HAL_UART_Transmit>
    const char newline[2] = "\r\n"; // Newline characters for UART
 80036ca:	f640 230d 	movw	r3, #2573	; 0xa0d
 80036ce:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t*)newline, 2, HAL_MAX_DELAY);
 80036d0:	f107 010c 	add.w	r1, r7, #12
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295
 80036d8:	2202      	movs	r2, #2
 80036da:	4803      	ldr	r0, [pc, #12]	; (80036e8 <SerialPrintln+0x3c>)
 80036dc:	f007 f862 	bl	800a7a4 <HAL_UART_Transmit>
}
 80036e0:	bf00      	nop
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20002e6c 	.word	0x20002e6c

080036ec <SerialPrintlnINT>:

/*Print Numeric data with the new line at the end*/
void SerialPrintlnINT(int Data)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	/*Here the UART Buffer is being used to store the numeric values and present then as character array*/
	char buffer[10];
	sprintf(buffer, "%d", Data);
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4906      	ldr	r1, [pc, #24]	; (8003714 <SerialPrintlnINT+0x28>)
 80036fc:	4618      	mov	r0, r3
 80036fe:	f010 fda5 	bl	801424c <siprintf>
	SerialPrintln(buffer);
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ffd0 	bl	80036ac <SerialPrintln>
}
 800370c:	bf00      	nop
 800370e:	3718      	adds	r7, #24
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	08017e94 	.word	0x08017e94

08003718 <SerialPrintINT>:

/*Print Numeric data without the new line at the end*/
void SerialPrintINT(int Data)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/*Here the UART Buffer is being used to store the numeric values and present then as character array*/
	char buffer[10];
	sprintf(buffer, "%d", Data);
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	4906      	ldr	r1, [pc, #24]	; (8003740 <SerialPrintINT+0x28>)
 8003728:	4618      	mov	r0, r3
 800372a:	f010 fd8f 	bl	801424c <siprintf>
	SerialPrint(buffer);
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff ffa4 	bl	8003680 <SerialPrint>
}
 8003738:	bf00      	nop
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	08017e94 	.word	0x08017e94

08003744 <Servo_Init>:
int pulse = 0;
int16_t current_angle_offset = 0;
extern TIM_HandleTypeDef htim11; // Timer 11 is dedicated to the servo

// Initialize the servo control
void Servo_Init(void) {
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
	// Start the PWM signal on Timer 11, Channel 1
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8003748:	2100      	movs	r1, #0
 800374a:	4802      	ldr	r0, [pc, #8]	; (8003754 <Servo_Init+0x10>)
 800374c:	f006 f872 	bl	8009834 <HAL_TIM_PWM_Start>
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20002ddc 	.word	0x20002ddc

08003758 <Servo_SetAngle>:

// Set the servo angle
void Servo_SetAngle(int16_t degree) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
	// Constrain the angle within the defined minimum and maximum limits
	 //HAL_GPIO_WritePin(GPIOC,EN_DCDC_8V_Output_Pin, GPIO_PIN_RESET);
	degree += current_angle_offset;
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	4b1b      	ldr	r3, [pc, #108]	; (80037d4 <Servo_SetAngle+0x7c>)
 8003766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376a:	b29b      	uxth	r3, r3
 800376c:	4413      	add	r3, r2
 800376e:	b29b      	uxth	r3, r3
 8003770:	80fb      	strh	r3, [r7, #6]
	if (degree > SERVO_MAX_ANGLE) {
 8003772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003776:	2baf      	cmp	r3, #175	; 0xaf
 8003778:	dd02      	ble.n	8003780 <Servo_SetAngle+0x28>
		degree = SERVO_MAX_ANGLE;
 800377a:	23af      	movs	r3, #175	; 0xaf
 800377c:	80fb      	strh	r3, [r7, #6]
 800377e:	e005      	b.n	800378c <Servo_SetAngle+0x34>
	} else if (degree < SERVO_MIN_ANGLE) {
 8003780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003784:	2b04      	cmp	r3, #4
 8003786:	dc01      	bgt.n	800378c <Servo_SetAngle+0x34>
		degree = SERVO_MIN_ANGLE;
 8003788:	2305      	movs	r3, #5
 800378a:	80fb      	strh	r3, [r7, #6]
	}

	// Map the angle to the pulse width in microseconds
	uint32_t pulseWidth = SERVO_MIN_PULSE_WIDTH + (uint32_t) ((float) (degree - SERVO_MIN_ANGLE)
 800378c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003790:	3b05      	subs	r3, #5
 8003792:	ee07 3a90 	vmov	s15, r3
 8003796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			/ (float) (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE) * (SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH));
 800379a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80037d8 <Servo_SetAngle+0x80>
 800379e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80037dc <Servo_SetAngle+0x84>
 80037a6:	ee67 7a87 	vmul.f32	s15, s15, s14
	uint32_t pulseWidth = SERVO_MIN_PULSE_WIDTH + (uint32_t) ((float) (degree - SERVO_MIN_ANGLE)
 80037aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ae:	ee17 3a90 	vmov	r3, s15
 80037b2:	33aa      	adds	r3, #170	; 0xaa
 80037b4:	60fb      	str	r3, [r7, #12]

	pulse = pulseWidth;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4a09      	ldr	r2, [pc, #36]	; (80037e0 <Servo_SetAngle+0x88>)
 80037ba:	6013      	str	r3, [r2, #0]

	// Set the pulse width for PWM
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, pulseWidth);
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <Servo_SetAngle+0x8c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 80037c4:	2100      	movs	r1, #0
 80037c6:	4807      	ldr	r0, [pc, #28]	; (80037e4 <Servo_SetAngle+0x8c>)
 80037c8:	f006 f834 	bl	8009834 <HAL_TIM_PWM_Start>
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200027dc 	.word	0x200027dc
 80037d8:	432a0000 	.word	0x432a0000
 80037dc:	44098000 	.word	0x44098000
 80037e0:	200027d8 	.word	0x200027d8
 80037e4:	20002ddc 	.word	0x20002ddc

080037e8 <Servo_SetPercent>:

// Set the servo position based on a percentage
void Servo_SetPercent(int percentage) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	static int16_t old_angle = 1000; //Illogical number to ensure its not same as 1st input to function

	// Constrain the percentage to be between 0% and 100%
	if (percentage > 100) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	dd02      	ble.n	80037fc <Servo_SetPercent+0x14>
		percentage = 100;
 80037f6:	2364      	movs	r3, #100	; 0x64
 80037f8:	607b      	str	r3, [r7, #4]
 80037fa:	e004      	b.n	8003806 <Servo_SetPercent+0x1e>
	} else if (percentage < 0) {
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	da01      	bge.n	8003806 <Servo_SetPercent+0x1e>
		percentage = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
	}
   percent = percentage;
 8003806:	4a2d      	ldr	r2, [pc, #180]	; (80038bc <Servo_SetPercent+0xd4>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6013      	str	r3, [r2, #0]
  // Map the percentage to the corresponding angle
  	if(ISSERVOINTERTED == 1){
  		percentage = 100 - percentage;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003812:	607b      	str	r3, [r7, #4]
  	}
	// Map the percentage to the corresponding angle
	int16_t angle = SERVO_MIN_ANGLE + (int16_t) ((float) percentage / 100.0f * (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800381e:	eddf 6a28 	vldr	s13, [pc, #160]	; 80038c0 <Servo_SetPercent+0xd8>
 8003822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003826:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80038c4 <Servo_SetPercent+0xdc>
 800382a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800382e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003832:	ee17 3a90 	vmov	r3, s15
 8003836:	b21b      	sxth	r3, r3
 8003838:	b29b      	uxth	r3, r3
 800383a:	3305      	adds	r3, #5
 800383c:	b29b      	uxth	r3, r3
 800383e:	81fb      	strh	r3, [r7, #14]

	Servo_SetAngle(angle - current_angle_offset); // Account for the offset
 8003840:	89fa      	ldrh	r2, [r7, #14]
 8003842:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <Servo_SetPercent+0xe0>)
 8003844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003848:	b29b      	uxth	r3, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	b29b      	uxth	r3, r3
 800384e:	b21b      	sxth	r3, r3
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff81 	bl	8003758 <Servo_SetAngle>
	// Set the servo angle
	//Servo_SetAngle(angle);

	//Relax servo only if new angle is more than 10 degrees different than old one, plus conditions inside this
	if (abs(old_angle - angle) > 10) {
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <Servo_SetPercent+0xe4>)
 8003858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800385c:	461a      	mov	r2, r3
 800385e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	bfb8      	it	lt
 8003868:	425b      	neglt	r3, r3
 800386a:	2b0a      	cmp	r3, #10
 800386c:	dd1e      	ble.n	80038ac <Servo_SetPercent+0xc4>
		if (abs(percentage - ValveOpen) < 10) {
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3b64      	subs	r3, #100	; 0x64
 8003872:	f113 0f09 	cmn.w	r3, #9
 8003876:	db0b      	blt.n	8003890 <Servo_SetPercent+0xa8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b64      	subs	r3, #100	; 0x64
 800387c:	2b09      	cmp	r3, #9
 800387e:	dc07      	bgt.n	8003890 <Servo_SetPercent+0xa8>
			HAL_Delay(1000);
 8003880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003884:	f003 f894 	bl	80069b0 <HAL_Delay>
			if (ISSERVOINTERTED == 1) {
				Servo_SetAngle(SERVO_MAX_ANGLE - 5);
 8003888:	20aa      	movs	r0, #170	; 0xaa
 800388a:	f7ff ff65 	bl	8003758 <Servo_SetAngle>
			if (ISSERVOINTERTED == 1) {
 800388e:	e00d      	b.n	80038ac <Servo_SetPercent+0xc4>
			} else {
				Servo_SetAngle(SERVO_MIN_ANGLE + 5);
			}
		} else if (abs(percentage - ValveClose) < 10) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f113 0f09 	cmn.w	r3, #9
 8003896:	db09      	blt.n	80038ac <Servo_SetPercent+0xc4>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b09      	cmp	r3, #9
 800389c:	dc06      	bgt.n	80038ac <Servo_SetPercent+0xc4>
			HAL_Delay(1000);
 800389e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038a2:	f003 f885 	bl	80069b0 <HAL_Delay>
			if (ISSERVOINTERTED == 1) {
				Servo_SetAngle(SERVO_MIN_ANGLE + 5);
 80038a6:	200a      	movs	r0, #10
 80038a8:	f7ff ff56 	bl	8003758 <Servo_SetAngle>
			} else {
				Servo_SetAngle(SERVO_MAX_ANGLE - 5);
			}
		}
	}
	old_angle = angle;
 80038ac:	4a07      	ldr	r2, [pc, #28]	; (80038cc <Servo_SetPercent+0xe4>)
 80038ae:	89fb      	ldrh	r3, [r7, #14]
 80038b0:	8013      	strh	r3, [r2, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	200027d4 	.word	0x200027d4
 80038c0:	42c80000 	.word	0x42c80000
 80038c4:	432a0000 	.word	0x432a0000
 80038c8:	200027dc 	.word	0x200027dc
 80038cc:	20000130 	.word	0x20000130

080038d0 <Servo_Home_Position>:
    // Set the servo's current position as zero
    Servo_SetAngle(3); // Update internal logic if necessary to mark zero position
}

*/
void Servo_Home_Position(void) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
    static int16_t homing_angle = SERVO_MAX_ANGLE; // Start from maximum angle

    // Drive the servo to the limit switch
    while (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) != 1){
 80038d4:	e01a      	b.n	800390c <Servo_Home_Position+0x3c>
        // Gradually move the servo angle toward the limit
        Servo_SetAngle(homing_angle);
 80038d6:	4b21      	ldr	r3, [pc, #132]	; (800395c <Servo_Home_Position+0x8c>)
 80038d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ff3b 	bl	8003758 <Servo_SetAngle>
        homing_angle--;
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <Servo_Home_Position+0x8c>)
 80038e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b21a      	sxth	r2, r3
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <Servo_Home_Position+0x8c>)
 80038f2:	801a      	strh	r2, [r3, #0]

        // Ensure the angle does not go below the minimum
        if (homing_angle < SERVO_MIN_ANGLE) {
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <Servo_Home_Position+0x8c>)
 80038f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	dc03      	bgt.n	8003906 <Servo_Home_Position+0x36>
            homing_angle = SERVO_MIN_ANGLE;
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <Servo_Home_Position+0x8c>)
 8003900:	2205      	movs	r2, #5
 8003902:	801a      	strh	r2, [r3, #0]
            break; // Exit if the servo reaches the minimum without triggering the limit switch
 8003904:	e00a      	b.n	800391c <Servo_Home_Position+0x4c>
        }

        HAL_Delay(10); // Small delay to allow the servo to move and stabilize
 8003906:	200a      	movs	r0, #10
 8003908:	f003 f852 	bl	80069b0 <HAL_Delay>
    while (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) != 1){
 800390c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003910:	4813      	ldr	r0, [pc, #76]	; (8003960 <Servo_Home_Position+0x90>)
 8003912:	f004 fc89 	bl	8008228 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d1dc      	bne.n	80038d6 <Servo_Home_Position+0x6>
    }
    HAL_Delay(2000);
 800391c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003920:	f003 f846 	bl	80069b0 <HAL_Delay>

    // Once the limit switch is triggered, stop the servo
    Servo_SetAngle(homing_angle);
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <Servo_Home_Position+0x8c>)
 8003926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff14 	bl	8003758 <Servo_SetAngle>
#if DEBUG == 1
    SerialPrint("Servo During Homing");
 8003930:	480c      	ldr	r0, [pc, #48]	; (8003964 <Servo_Home_Position+0x94>)
 8003932:	f7ff fea5 	bl	8003680 <SerialPrint>
#endif
   	SerialPrintINT(homing_angle);
 8003936:	4b09      	ldr	r3, [pc, #36]	; (800395c <Servo_Home_Position+0x8c>)
 8003938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff feeb 	bl	8003718 <SerialPrintINT>

    // Update internal logic to mark the current position as zero
    current_angle_offset = homing_angle; // Store the "zero" offset
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <Servo_Home_Position+0x8c>)
 8003944:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <Servo_Home_Position+0x98>)
 800394a:	801a      	strh	r2, [r3, #0]
    angle = 0; // Reset the angle variable to zero for consistency
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <Servo_Home_Position+0x9c>)
 800394e:	2200      	movs	r2, #0
 8003950:	801a      	strh	r2, [r3, #0]
    percent = 0; // Reset percentage to zero if used in your logic
 8003952:	4b07      	ldr	r3, [pc, #28]	; (8003970 <Servo_Home_Position+0xa0>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

    // Adjust all future angle calculations to account for the offset
    //Servo_SetAngle(0); // Set servo to the logical zero position
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000132 	.word	0x20000132
 8003960:	40020000 	.word	0x40020000
 8003964:	08017ea0 	.word	0x08017ea0
 8003968:	200027dc 	.word	0x200027dc
 800396c:	200027d0 	.word	0x200027d0
 8003970:	200027d4 	.word	0x200027d4

08003974 <MotorTest>:

void DeveloperMenu(void);
int EnterPassword(void);
static uint64_t StoringTimedev = 0;

void MotorTest() {
 8003974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003978:	b0a4      	sub	sp, #144	; 0x90
 800397a:	af02      	add	r7, sp, #8
	//TareAll();
	LCDRGBControl(WHITE); //Turn on LCD backlight and set it to color
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	f7ff fb2d 	bl	8002fdc <LCDRGBControl>
	printLCD(0, "Initializing", NO_SYMBOL);
 8003982:	2200      	movs	r2, #0
 8003984:	49b5      	ldr	r1, [pc, #724]	; (8003c5c <MotorTest+0x2e8>)
 8003986:	2000      	movs	r0, #0
 8003988:	f7ff fabc 	bl	8002f04 <printLCD>
	//TareAll();
	while (TRUE) {
		 if (HAL_GetTick() - StoringTimedev >= 1000) {  // Check if 2 seconds passed
 800398c:	f003 f804 	bl	8006998 <HAL_GetTick>
 8003990:	4603      	mov	r3, r0
 8003992:	2200      	movs	r2, #0
 8003994:	4698      	mov	r8, r3
 8003996:	4691      	mov	r9, r2
 8003998:	4bb1      	ldr	r3, [pc, #708]	; (8003c60 <MotorTest+0x2ec>)
 800399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399e:	ebb8 0402 	subs.w	r4, r8, r2
 80039a2:	eb69 0503 	sbc.w	r5, r9, r3
 80039a6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80039aa:	f175 0300 	sbcs.w	r3, r5, #0
 80039ae:	d30c      	bcc.n	80039ca <MotorTest+0x56>
			 StoringTimedev = HAL_GetTick();  // Update the last tick time
 80039b0:	f002 fff2 	bl	8006998 <HAL_GetTick>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2200      	movs	r2, #0
 80039b8:	469a      	mov	sl, r3
 80039ba:	4693      	mov	fp, r2
 80039bc:	4ba8      	ldr	r3, [pc, #672]	; (8003c60 <MotorTest+0x2ec>)
 80039be:	e9c3 ab00 	strd	sl, fp, [r3]
			 tareSend = Tareweight;  // Update the variable
 80039c2:	4ba8      	ldr	r3, [pc, #672]	; (8003c64 <MotorTest+0x2f0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4aa8      	ldr	r2, [pc, #672]	; (8003c68 <MotorTest+0x2f4>)
 80039c8:	6013      	str	r3, [r2, #0]
		  }
		DeveloperMenu();
 80039ca:	f000 fa89 	bl	8003ee0 <DeveloperMenu>
		ReadKeypadVar(CONTROL);
 80039ce:	2002      	movs	r0, #2
 80039d0:	f7fe fe44 	bl	800265c <ReadKeypadVar>
		if (lastKeyPressed == PLAYSTOPKEY) {
 80039d4:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <MotorTest+0x2f8>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b0d      	cmp	r3, #13
 80039da:	d113      	bne.n	8003a04 <MotorTest+0x90>
			   	TareAll();
 80039dc:	f7ff fb8a 	bl	80030f4 <TareAll>
				printLCD(0, "TARE", NO_SYMBOL);
 80039e0:	2200      	movs	r2, #0
 80039e2:	49a3      	ldr	r1, [pc, #652]	; (8003c70 <MotorTest+0x2fc>)
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff fa8d 	bl	8002f04 <printLCD>
				//TareAll();
				HAL_Delay(1000);
 80039ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039ee:	f002 ffdf 	bl	80069b0 <HAL_Delay>
				lastKeyPressed = 255;
 80039f2:	4b9e      	ldr	r3, [pc, #632]	; (8003c6c <MotorTest+0x2f8>)
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	601a      	str	r2, [r3, #0]
				SerialPrintln("ALways here");
 80039f8:	489e      	ldr	r0, [pc, #632]	; (8003c74 <MotorTest+0x300>)
 80039fa:	f7ff fe57 	bl	80036ac <SerialPrintln>
				CleaningExitCounter =0;
 80039fe:	4b9e      	ldr	r3, [pc, #632]	; (8003c78 <MotorTest+0x304>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	701a      	strb	r2, [r3, #0]
		}

		if (isAutoOperation == FALSE) {
 8003a04:	4b9d      	ldr	r3, [pc, #628]	; (8003c7c <MotorTest+0x308>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 81c5 	bne.w	8003d98 <MotorTest+0x424>
			int var = readKeypadNonBlock(ALL);
 8003a0e:	2000      	movs	r0, #0
 8003a10:	f7fe fe70 	bl	80026f4 <readKeypadNonBlock>
 8003a14:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			if (var == DELKEY) {
 8003a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1c:	2b0e      	cmp	r3, #14
 8003a1e:	d12d      	bne.n	8003a7c <MotorTest+0x108>
				lastKeyPressed = DELKEY;
 8003a20:	4b92      	ldr	r3, [pc, #584]	; (8003c6c <MotorTest+0x2f8>)
 8003a22:	220e      	movs	r2, #14
 8003a24:	601a      	str	r2, [r3, #0]
				uint32_t hours, minutes, seconds;
				LoadTimeFromSDCard(&hours,&minutes,&seconds);
 8003a26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003a2a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003a2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fcc2 	bl	80033bc <LoadTimeFromSDCard>
				// Display the time on the LCD
				LCD_Clear();
 8003a38:	f7ff f964 	bl	8002d04 <LCD_Clear>
				printLCD(1, "System Run Time", NO_SYMBOL);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4990      	ldr	r1, [pc, #576]	; (8003c80 <MotorTest+0x30c>)
 8003a40:	2001      	movs	r0, #1
 8003a42:	f7ff fa5f 	bl	8002f04 <printLCD>
				char time_display[20];
				snprintf(time_display, sizeof(time_display), "Time: %02lu:%02lu:%02lu", hours, minutes, seconds);
 8003a46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a4c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003a50:	9201      	str	r2, [sp, #4]
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	4a8b      	ldr	r2, [pc, #556]	; (8003c84 <MotorTest+0x310>)
 8003a58:	2114      	movs	r1, #20
 8003a5a:	f010 fbc3 	bl	80141e4 <sniprintf>
				printLCD(2, time_display, NO_SYMBOL);
 8003a5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a62:	2200      	movs	r2, #0
 8003a64:	4619      	mov	r1, r3
 8003a66:	2002      	movs	r0, #2
 8003a68:	f7ff fa4c 	bl	8002f04 <printLCD>
				while(readKeypadNonBlock(ALL) != ENTERKEY);
 8003a6c:	bf00      	nop
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fe fe40 	bl	80026f4 <readKeypadNonBlock>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b0b      	cmp	r3, #11
 8003a78:	d1f9      	bne.n	8003a6e <MotorTest+0xfa>
 8003a7a:	e027      	b.n	8003acc <MotorTest+0x158>
			} else if (var == MANAUTOKEY) {
 8003a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	d10e      	bne.n	8003aa2 <MotorTest+0x12e>
				isAutoOperation = !isAutoOperation;
 8003a84:	4b7d      	ldr	r3, [pc, #500]	; (8003c7c <MotorTest+0x308>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	461a      	mov	r2, r3
 8003a94:	4b79      	ldr	r3, [pc, #484]	; (8003c7c <MotorTest+0x308>)
 8003a96:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1000);
 8003a98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a9c:	f002 ff88 	bl	80069b0 <HAL_Delay>
 8003aa0:	e014      	b.n	8003acc <MotorTest+0x158>
			}
			else if (var == PLAYSTOPKEY) {
 8003aa2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003aa6:	2b0d      	cmp	r3, #13
 8003aa8:	d110      	bne.n	8003acc <MotorTest+0x158>
				//lastKeyPressed = PLAYSTOPKEY;
				TareAll();
 8003aaa:	f7ff fb23 	bl	80030f4 <TareAll>
				printLCD(0, "TARE", NO_SYMBOL);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	496f      	ldr	r1, [pc, #444]	; (8003c70 <MotorTest+0x2fc>)
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f7ff fa26 	bl	8002f04 <printLCD>
				HAL_Delay(1000);
 8003ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003abc:	f002 ff78 	bl	80069b0 <HAL_Delay>
				lastKeyPressed = 255;
 8003ac0:	4b6a      	ldr	r3, [pc, #424]	; (8003c6c <MotorTest+0x2f8>)
 8003ac2:	22ff      	movs	r2, #255	; 0xff
 8003ac4:	601a      	str	r2, [r3, #0]
				CleaningExitCounter =0;
 8003ac6:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <MotorTest+0x304>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
			}
			char buffer1[21]; // Buffer to hold the formatted string
			char buffer2[21]; // Buffer to hold the formatted string
			sprintf(buffer1, "MC-W:%ld S:%d", Total_Weight,percent); //Point # 7
 8003acc:	4b6e      	ldr	r3, [pc, #440]	; (8003c88 <MotorTest+0x314>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b6e      	ldr	r3, [pc, #440]	; (8003c8c <MotorTest+0x318>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8003ad8:	496d      	ldr	r1, [pc, #436]	; (8003c90 <MotorTest+0x31c>)
 8003ada:	f010 fbb7 	bl	801424c <siprintf>
			printLCD(0, buffer1, NO_SYMBOL);
 8003ade:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7ff fa0c 	bl	8002f04 <printLCD>
			printLCD(1, "CAP    CLAMP   SERVO", NO_SYMBOL);
 8003aec:	2200      	movs	r2, #0
 8003aee:	4969      	ldr	r1, [pc, #420]	; (8003c94 <MotorTest+0x320>)
 8003af0:	2001      	movs	r0, #1
 8003af2:	f7ff fa07 	bl	8002f04 <printLCD>
			printLCD(2, "0/8     4/6      7/9", NO_SYMBOL);
 8003af6:	2200      	movs	r2, #0
 8003af8:	4967      	ldr	r1, [pc, #412]	; (8003c98 <MotorTest+0x324>)
 8003afa:	2002      	movs	r0, #2
 8003afc:	f7ff fa02 	bl	8002f04 <printLCD>
			sprintf(buffer2, "Valve: 1/3 %s", ValveStatus);
 8003b00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b04:	4a65      	ldr	r2, [pc, #404]	; (8003c9c <MotorTest+0x328>)
 8003b06:	4966      	ldr	r1, [pc, #408]	; (8003ca0 <MotorTest+0x32c>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f010 fb9f 	bl	801424c <siprintf>
			printLCD(3, buffer2, NO_SYMBOL);
 8003b0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b12:	2200      	movs	r2, #0
 8003b14:	4619      	mov	r1, r3
 8003b16:	2003      	movs	r0, #3
 8003b18:	f7ff f9f4 	bl	8002f04 <printLCD>

			//Make sure safety is active and motor turns off whenever it reaches min or max positions
			if ((Spindle_M3_EncA_Pulses <= M2POS1VAL|| Spindle_M3_EncB_Pulses <= M2POS1VAL) || (Spindle_M3_EncA_Pulses >= M2POS4VAL || Spindle_M3_EncB_Pulses >= M2POS4VAL)) {
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <MotorTest+0x330>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	dd0f      	ble.n	8003b44 <MotorTest+0x1d0>
 8003b24:	4b60      	ldr	r3, [pc, #384]	; (8003ca8 <MotorTest+0x334>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	dd0b      	ble.n	8003b44 <MotorTest+0x1d0>
 8003b2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ca4 <MotorTest+0x330>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8003b34:	4293      	cmp	r3, r2
 8003b36:	dc05      	bgt.n	8003b44 <MotorTest+0x1d0>
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <MotorTest+0x334>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8003b40:	4293      	cmp	r3, r2
 8003b42:	dd04      	ble.n	8003b4e <MotorTest+0x1da>
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8003b44:	4a59      	ldr	r2, [pc, #356]	; (8003cac <MotorTest+0x338>)
 8003b46:	2100      	movs	r1, #0
 8003b48:	2002      	movs	r0, #2
 8003b4a:	f7fd fe6d 	bl	8001828 <moveMotor>
			}
			if (Clamp_M2_EncA_Pulses <= M1POS1VAL  || percent >= ValveOpen) {
 8003b4e:	4b58      	ldr	r3, [pc, #352]	; (8003cb0 <MotorTest+0x33c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	dd03      	ble.n	8003b5e <MotorTest+0x1ea>
 8003b56:	4b4d      	ldr	r3, [pc, #308]	; (8003c8c <MotorTest+0x318>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b63      	cmp	r3, #99	; 0x63
 8003b5c:	dd04      	ble.n	8003b68 <MotorTest+0x1f4>
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003b5e:	4a53      	ldr	r2, [pc, #332]	; (8003cac <MotorTest+0x338>)
 8003b60:	2100      	movs	r1, #0
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fd fe60 	bl	8001828 <moveMotor>
			}
			if (var == 0) {
 8003b68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d11f      	bne.n	8003bb0 <MotorTest+0x23c>
				while (readKeypadNonBlock(ALL) == 0) {
 8003b70:	e012      	b.n	8003b98 <MotorTest+0x224>
					if (Spindle_M3_EncA_Pulses > M2POS1VAL || Spindle_M3_EncB_Pulses > M2POS1VAL) {
 8003b72:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <MotorTest+0x330>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	dc03      	bgt.n	8003b82 <MotorTest+0x20e>
 8003b7a:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <MotorTest+0x334>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	dd05      	ble.n	8003b8e <MotorTest+0x21a>
						moveMotor(CAPMOTOR, CCW, M2POS1VAL);
 8003b82:	2200      	movs	r2, #0
 8003b84:	2102      	movs	r1, #2
 8003b86:	2002      	movs	r0, #2
 8003b88:	f7fd fe4e 	bl	8001828 <moveMotor>
 8003b8c:	e004      	b.n	8003b98 <MotorTest+0x224>

					} else {
						moveMotor(CAPMOTOR, OFF, INT_INF);
 8003b8e:	4a47      	ldr	r2, [pc, #284]	; (8003cac <MotorTest+0x338>)
 8003b90:	2100      	movs	r1, #0
 8003b92:	2002      	movs	r0, #2
 8003b94:	f7fd fe48 	bl	8001828 <moveMotor>
				while (readKeypadNonBlock(ALL) == 0) {
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7fe fdab 	bl	80026f4 <readKeypadNonBlock>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0e6      	beq.n	8003b72 <MotorTest+0x1fe>
					}
				}
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8003ba4:	4a41      	ldr	r2, [pc, #260]	; (8003cac <MotorTest+0x338>)
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	2002      	movs	r0, #2
 8003baa:	f7fd fe3d 	bl	8001828 <moveMotor>
 8003bae:	e027      	b.n	8003c00 <MotorTest+0x28c>
			}
			else if (var == 8) {
 8003bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d123      	bne.n	8003c00 <MotorTest+0x28c>
				while (readKeypadNonBlock(ALL) == 8) {
 8003bb8:	e017      	b.n	8003bea <MotorTest+0x276>
					if (Spindle_M3_EncA_Pulses < M2POS4VAL ||  Spindle_M3_EncB_Pulses < M2POS4VAL) {
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <MotorTest+0x330>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	dd05      	ble.n	8003bd2 <MotorTest+0x25e>
 8003bc6:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <MotorTest+0x334>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	dc06      	bgt.n	8003be0 <MotorTest+0x26c>
						moveMotor(CAPMOTOR, CW, M2POS4VAL);
 8003bd2:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	2002      	movs	r0, #2
 8003bda:	f7fd fe25 	bl	8001828 <moveMotor>
 8003bde:	e004      	b.n	8003bea <MotorTest+0x276>
					} else {
						moveMotor(CAPMOTOR, OFF, INT_INF);
 8003be0:	4a32      	ldr	r2, [pc, #200]	; (8003cac <MotorTest+0x338>)
 8003be2:	2100      	movs	r1, #0
 8003be4:	2002      	movs	r0, #2
 8003be6:	f7fd fe1f 	bl	8001828 <moveMotor>
				while (readKeypadNonBlock(ALL) == 8) {
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fe fd82 	bl	80026f4 <readKeypadNonBlock>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d0e1      	beq.n	8003bba <MotorTest+0x246>
					}
				}
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8003bf6:	4a2d      	ldr	r2, [pc, #180]	; (8003cac <MotorTest+0x338>)
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2002      	movs	r0, #2
 8003bfc:	f7fd fe14 	bl	8001828 <moveMotor>
			}

			if (var == 4) {
 8003c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d124      	bne.n	8003c52 <MotorTest+0x2de>
				while (readKeypadNonBlock(ALL) == 4) {
 8003c08:	e017      	b.n	8003c3a <MotorTest+0x2c6>
					if (Clamp_M2_EncA_Pulses > M1POS1VAL || Clamp_M2_EncB_Pulses > M1POS1VAL) {
 8003c0a:	4b29      	ldr	r3, [pc, #164]	; (8003cb0 <MotorTest+0x33c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	dc03      	bgt.n	8003c1a <MotorTest+0x2a6>
 8003c12:	4b28      	ldr	r3, [pc, #160]	; (8003cb4 <MotorTest+0x340>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dd0a      	ble.n	8003c30 <MotorTest+0x2bc>
						SerialPrintlnINT(Clamp_M2_EncA_Pulses);
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <MotorTest+0x33c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fd64 	bl	80036ec <SerialPrintlnINT>
						moveMotor(CLAMPMOTOR, CW, M1POS1VAL);
 8003c24:	2200      	movs	r2, #0
 8003c26:	2101      	movs	r1, #1
 8003c28:	2001      	movs	r0, #1
 8003c2a:	f7fd fdfd 	bl	8001828 <moveMotor>
 8003c2e:	e004      	b.n	8003c3a <MotorTest+0x2c6>
					} else {
						moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003c30:	4a1e      	ldr	r2, [pc, #120]	; (8003cac <MotorTest+0x338>)
 8003c32:	2100      	movs	r1, #0
 8003c34:	2001      	movs	r0, #1
 8003c36:	f7fd fdf7 	bl	8001828 <moveMotor>
				while (readKeypadNonBlock(ALL) == 4) {
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fe fd5a 	bl	80026f4 <readKeypadNonBlock>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d0e1      	beq.n	8003c0a <MotorTest+0x296>
					}
				}
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003c46:	4a19      	ldr	r2, [pc, #100]	; (8003cac <MotorTest+0x338>)
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7fd fdec 	bl	8001828 <moveMotor>
 8003c50:	e69c      	b.n	800398c <MotorTest+0x18>
			}
			else if (var == 6) {
 8003c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c56:	2b06      	cmp	r3, #6
 8003c58:	d155      	bne.n	8003d06 <MotorTest+0x392>
				while (readKeypadNonBlock(ALL) == 6) {
 8003c5a:	e048      	b.n	8003cee <MotorTest+0x37a>
 8003c5c:	08017eb4 	.word	0x08017eb4
 8003c60:	200027e0 	.word	0x200027e0
 8003c64:	20000364 	.word	0x20000364
 8003c68:	20000384 	.word	0x20000384
 8003c6c:	2000010c 	.word	0x2000010c
 8003c70:	08017ec4 	.word	0x08017ec4
 8003c74:	08017ecc 	.word	0x08017ecc
 8003c78:	20000381 	.word	0x20000381
 8003c7c:	2000010b 	.word	0x2000010b
 8003c80:	08017ed8 	.word	0x08017ed8
 8003c84:	08017ee8 	.word	0x08017ee8
 8003c88:	2000035c 	.word	0x2000035c
 8003c8c:	200027d4 	.word	0x200027d4
 8003c90:	08017f00 	.word	0x08017f00
 8003c94:	08017f10 	.word	0x08017f10
 8003c98:	08017f28 	.word	0x08017f28
 8003c9c:	20000374 	.word	0x20000374
 8003ca0:	08017f40 	.word	0x08017f40
 8003ca4:	20000100 	.word	0x20000100
 8003ca8:	20000104 	.word	0x20000104
 8003cac:	0098967f 	.word	0x0098967f
 8003cb0:	200000f8 	.word	0x200000f8
 8003cb4:	200000fc 	.word	0x200000fc
					if (Clamp_M2_EncA_Pulses < (M1POS2VAL)  || Clamp_M2_EncB_Pulses < (M1POS2VAL)) {
 8003cb8:	4b7d      	ldr	r3, [pc, #500]	; (8003eb0 <MotorTest+0x53c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8003cc0:	db04      	blt.n	8003ccc <MotorTest+0x358>
 8003cc2:	4b7c      	ldr	r3, [pc, #496]	; (8003eb4 <MotorTest+0x540>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8003cca:	da0b      	bge.n	8003ce4 <MotorTest+0x370>
						SerialPrintlnINT(Clamp_M2_EncA_Pulses);
 8003ccc:	4b78      	ldr	r3, [pc, #480]	; (8003eb0 <MotorTest+0x53c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff fd0b 	bl	80036ec <SerialPrintlnINT>
						moveMotor(CLAMPMOTOR, CCW, (M1POS2VAL));
 8003cd6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003cda:	2102      	movs	r1, #2
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f7fd fda3 	bl	8001828 <moveMotor>
 8003ce2:	e004      	b.n	8003cee <MotorTest+0x37a>
					} else {
						moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003ce4:	4a74      	ldr	r2, [pc, #464]	; (8003eb8 <MotorTest+0x544>)
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2001      	movs	r0, #1
 8003cea:	f7fd fd9d 	bl	8001828 <moveMotor>
				while (readKeypadNonBlock(ALL) == 6) {
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fe fd00 	bl	80026f4 <readKeypadNonBlock>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d0de      	beq.n	8003cb8 <MotorTest+0x344>
					}
				}
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003cfa:	4a6f      	ldr	r2, [pc, #444]	; (8003eb8 <MotorTest+0x544>)
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f7fd fd92 	bl	8001828 <moveMotor>
 8003d04:	e642      	b.n	800398c <MotorTest+0x18>
			}
			else if (var == 9) { //Which thing should be controlled with it?
 8003d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d0a:	2b09      	cmp	r3, #9
 8003d0c:	d11f      	bne.n	8003d4e <MotorTest+0x3da>
				while (readKeypadNonBlock(ALL) == 9) {
 8003d0e:	e012      	b.n	8003d36 <MotorTest+0x3c2>
					if(ValveOpen > ValveClose){
						if (percent <= ValveOpen) {
 8003d10:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <MotorTest+0x548>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b64      	cmp	r3, #100	; 0x64
 8003d16:	dc09      	bgt.n	8003d2c <MotorTest+0x3b8>
							Servo_SetPercent(percent +1);//(angle + 1);
 8003d18:	4b68      	ldr	r3, [pc, #416]	; (8003ebc <MotorTest+0x548>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fd62 	bl	80037e8 <Servo_SetPercent>
							HAL_Delay(20);
 8003d24:	2014      	movs	r0, #20
 8003d26:	f002 fe43 	bl	80069b0 <HAL_Delay>
 8003d2a:	e004      	b.n	8003d36 <MotorTest+0x3c2>
						} else { //Do Nothing?
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8003d2c:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8003ec0 <MotorTest+0x54c>
 8003d30:	2005      	movs	r0, #5
 8003d32:	f001 fbab 	bl	800548c <pwm>
				while (readKeypadNonBlock(ALL) == 9) {
 8003d36:	2000      	movs	r0, #0
 8003d38:	f7fe fcdc 	bl	80026f4 <readKeypadNonBlock>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	d0e6      	beq.n	8003d10 <MotorTest+0x39c>
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
						}
					}
				}
				//moveMotor(CLAMPMOTOR, OFF, INT_INF);
				pwm(ServoDC_M1_PWM, 0);
 8003d42:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8003ec0 <MotorTest+0x54c>
 8003d46:	2000      	movs	r0, #0
 8003d48:	f001 fba0 	bl	800548c <pwm>
 8003d4c:	e61e      	b.n	800398c <MotorTest+0x18>

			}
			else if (var == 7) { //Which thing should be controlled with it?
 8003d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	f47f ae1a 	bne.w	800398c <MotorTest+0x18>
				while (readKeypadNonBlock(ALL) == 7) {
 8003d58:	e012      	b.n	8003d80 <MotorTest+0x40c>
					if(ValveOpen > ValveClose){
						if (percent >= ValveClose) {
 8003d5a:	4b58      	ldr	r3, [pc, #352]	; (8003ebc <MotorTest+0x548>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	db09      	blt.n	8003d76 <MotorTest+0x402>
							Servo_SetPercent(percent - 1);
 8003d62:	4b56      	ldr	r3, [pc, #344]	; (8003ebc <MotorTest+0x548>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff fd3d 	bl	80037e8 <Servo_SetPercent>
							HAL_Delay(20);
 8003d6e:	2014      	movs	r0, #20
 8003d70:	f002 fe1e 	bl	80069b0 <HAL_Delay>
 8003d74:	e004      	b.n	8003d80 <MotorTest+0x40c>
						} else { //Do Nothing?
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8003d76:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8003ec0 <MotorTest+0x54c>
 8003d7a:	2005      	movs	r0, #5
 8003d7c:	f001 fb86 	bl	800548c <pwm>
				while (readKeypadNonBlock(ALL) == 7) {
 8003d80:	2000      	movs	r0, #0
 8003d82:	f7fe fcb7 	bl	80026f4 <readKeypadNonBlock>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b07      	cmp	r3, #7
 8003d8a:	d0e6      	beq.n	8003d5a <MotorTest+0x3e6>
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
						}
					}
				}
				//moveMotor(CLAMPMOTOR, OFF, INT_INF);
				pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8003d8c:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8003ec0 <MotorTest+0x54c>
 8003d90:	2005      	movs	r0, #5
 8003d92:	f001 fb7b 	bl	800548c <pwm>
 8003d96:	e5f9      	b.n	800398c <MotorTest+0x18>
				//moveMotor(VALVEMOTOR, OFF, INT_INF);		//Relay Control ON
			} else if (var == 3) {
				//moveMotor(VALVEMOTOR, ON, INT_INF);	//Relay Control OFF
			}
		} else {
			ReadKeypadVar(ALL);
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f7fe fc5f 	bl	800265c <ReadKeypadVar>
			char buffer[21]; // Buffer to hold the formatted string
			char buffer2[21]; // Buffer to hold the formatted string
			sprintf(buffer, "AC-W:%ld S:%d", Total_Weight,percent);
 8003d9e:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <MotorTest+0x550>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4b46      	ldr	r3, [pc, #280]	; (8003ebc <MotorTest+0x548>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f107 001c 	add.w	r0, r7, #28
 8003daa:	4947      	ldr	r1, [pc, #284]	; (8003ec8 <MotorTest+0x554>)
 8003dac:	f010 fa4e 	bl	801424c <siprintf>
			printLCD(0, buffer, NO_SYMBOL);
 8003db0:	f107 031c 	add.w	r3, r7, #28
 8003db4:	2200      	movs	r2, #0
 8003db6:	4619      	mov	r1, r3
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7ff f8a3 	bl	8002f04 <printLCD>
			printLCD(1, "CAP    CLAMP   SERVO", NO_SYMBOL);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	4942      	ldr	r1, [pc, #264]	; (8003ecc <MotorTest+0x558>)
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f7ff f89e 	bl	8002f04 <printLCD>
			printLCD(2, "0,2,5,8   4/6    7/9", NO_SYMBOL);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4941      	ldr	r1, [pc, #260]	; (8003ed0 <MotorTest+0x55c>)
 8003dcc:	2002      	movs	r0, #2
 8003dce:	f7ff f899 	bl	8002f04 <printLCD>
			sprintf(buffer2, "Valve: 1/3 %s", ValveStatus);
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	4a3f      	ldr	r2, [pc, #252]	; (8003ed4 <MotorTest+0x560>)
 8003dd6:	4940      	ldr	r1, [pc, #256]	; (8003ed8 <MotorTest+0x564>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f010 fa37 	bl	801424c <siprintf>
			printLCD(3, buffer2, NO_SYMBOL);
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	2200      	movs	r2, #0
 8003de2:	4619      	mov	r1, r3
 8003de4:	2003      	movs	r0, #3
 8003de6:	f7ff f88d 	bl	8002f04 <printLCD>

			switch(lastKeyPressed){
 8003dea:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <MotorTest+0x568>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b0d      	cmp	r3, #13
 8003df0:	d857      	bhi.n	8003ea2 <MotorTest+0x52e>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <MotorTest+0x484>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e77 	.word	0x08003e77
 8003dfc:	08003e43 	.word	0x08003e43
 8003e00:	08003e7f 	.word	0x08003e7f
 8003e04:	08003e4f 	.word	0x08003e4f
 8003e08:	08003e31 	.word	0x08003e31
 8003e0c:	08003e89 	.word	0x08003e89
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e5b 	.word	0x08003e5b
 8003e18:	08003e93 	.word	0x08003e93
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003eab 	.word	0x08003eab
 8003e24:	08003ea3 	.word	0x08003ea3
 8003e28:	08003ea3 	.word	0x08003ea3
 8003e2c:	08003e9d 	.word	0x08003e9d
			case  4:
				moveMotorClampToLocBlock(M1POS1VAL);
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fd fbb5 	bl	80015a0 <moveMotorClampToLocBlock>
				break;
 8003e36:	e039      	b.n	8003eac <MotorTest+0x538>
			case  6:
				moveMotorClampToLocBlock(M1POS2VAL);
 8003e38:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8003e3c:	f7fd fbb0 	bl	80015a0 <moveMotorClampToLocBlock>
				break;
 8003e40:	e034      	b.n	8003eac <MotorTest+0x538>

			case  1:
				moveMotor(VALVEMOTOR, OFF, INT_INF);	//Relay Control ON
 8003e42:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <MotorTest+0x544>)
 8003e44:	2100      	movs	r1, #0
 8003e46:	2003      	movs	r0, #3
 8003e48:	f7fd fcee 	bl	8001828 <moveMotor>
				break;
 8003e4c:	e02e      	b.n	8003eac <MotorTest+0x538>

			case  3:
				moveMotor(VALVEMOTOR, ON, INT_INF);		//Relay Control OFF
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <MotorTest+0x544>)
 8003e50:	2101      	movs	r1, #1
 8003e52:	2003      	movs	r0, #3
 8003e54:	f7fd fce8 	bl	8001828 <moveMotor>
				break;
 8003e58:	e028      	b.n	8003eac <MotorTest+0x538>

			case  7:
				Servo_SetPercent(percent - 10);
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <MotorTest+0x548>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	3b0a      	subs	r3, #10
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fcc1 	bl	80037e8 <Servo_SetPercent>
				break;
 8003e66:	e021      	b.n	8003eac <MotorTest+0x538>
			case  9:
				Servo_SetPercent(percent + 10);
 8003e68:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <MotorTest+0x548>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330a      	adds	r3, #10
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fcba 	bl	80037e8 <Servo_SetPercent>
				break;
 8003e74:	e01a      	b.n	8003eac <MotorTest+0x538>
			case  0:
				moveMotorSpindleToLocBlock(M2POS1VAL);
 8003e76:	2000      	movs	r0, #0
 8003e78:	f7fd fb66 	bl	8001548 <moveMotorSpindleToLocBlock>
				break;
 8003e7c:	e016      	b.n	8003eac <MotorTest+0x538>

			case  2:
				moveMotorSpindleToLocBlock(M2POS2VAL);
 8003e7e:	f640 40b2 	movw	r0, #3250	; 0xcb2
 8003e82:	f7fd fb61 	bl	8001548 <moveMotorSpindleToLocBlock>
				break;
 8003e86:	e011      	b.n	8003eac <MotorTest+0x538>

			case  5:
				moveMotorSpindleToLocBlock(M2POS3VAL);
 8003e88:	f241 1094 	movw	r0, #4500	; 0x1194
 8003e8c:	f7fd fb5c 	bl	8001548 <moveMotorSpindleToLocBlock>
				break;
 8003e90:	e00c      	b.n	8003eac <MotorTest+0x538>

			case  8:
				moveMotorSpindleToLocBlock(M2POS4VAL);
 8003e92:	f641 30bc 	movw	r0, #7100	; 0x1bbc
 8003e96:	f7fd fb57 	bl	8001548 <moveMotorSpindleToLocBlock>
				break;
 8003e9a:	e007      	b.n	8003eac <MotorTest+0x538>

			case  10:
//				CustomerFrontEnd();
				break;
			case  13:
				TareAll();
 8003e9c:	f7ff f92a 	bl	80030f4 <TareAll>
				break;
 8003ea0:	e004      	b.n	8003eac <MotorTest+0x538>
			default :
				lastKeyPressed =255;
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <MotorTest+0x568>)
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	601a      	str	r2, [r3, #0]
				break;
 8003ea8:	e000      	b.n	8003eac <MotorTest+0x538>
				break;
 8003eaa:	bf00      	nop
		 if (HAL_GetTick() - StoringTimedev >= 1000) {  // Check if 2 seconds passed
 8003eac:	e56e      	b.n	800398c <MotorTest+0x18>
 8003eae:	bf00      	nop
 8003eb0:	200000f8 	.word	0x200000f8
 8003eb4:	200000fc 	.word	0x200000fc
 8003eb8:	0098967f 	.word	0x0098967f
 8003ebc:	200027d4 	.word	0x200027d4
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	2000035c 	.word	0x2000035c
 8003ec8:	08017f50 	.word	0x08017f50
 8003ecc:	08017f10 	.word	0x08017f10
 8003ed0:	08017f60 	.word	0x08017f60
 8003ed4:	20000374 	.word	0x20000374
 8003ed8:	08017f40 	.word	0x08017f40
 8003edc:	2000010c 	.word	0x2000010c

08003ee0 <DeveloperMenu>:
		}
	}

}

void DeveloperMenu(void) { //Enter developer menu under next condition
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
	int pass = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
	if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) { // Man/Auto, comma and delete are all pressed at same time
 8003eea:	2000      	movs	r0, #0
 8003eec:	f7fd fae4 	bl	80014b8 <digitalRead>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d115      	bne.n	8003f22 <DeveloperMenu+0x42>
		if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 8003ef6:	200e      	movs	r0, #14
 8003ef8:	f7fd fade 	bl	80014b8 <digitalRead>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <DeveloperMenu+0x42>
			if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8003f02:	2002      	movs	r0, #2
 8003f04:	f7fd fad8 	bl	80014b8 <digitalRead>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <DeveloperMenu+0x42>
				pass = EnterPassword();
 8003f0e:	f000 f80d 	bl	8003f2c <EnterPassword>
 8003f12:	6078      	str	r0, [r7, #4]
				if (pass == 4869) { //Then this password is entered
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f241 3205 	movw	r2, #4869	; 0x1305
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d101      	bne.n	8003f22 <DeveloperMenu+0x42>
					MotorTest();
 8003f1e:	f7ff fd29 	bl	8003974 <MotorTest>
					//CustomerFrontEnd();
				}
			}
		}
	}
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <EnterPassword>:

int EnterPassword(void) {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b090      	sub	sp, #64	; 0x40
 8003f30:	af00      	add	r7, sp, #0
	int Key = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	63fb      	str	r3, [r7, #60]	; 0x3c
	char stars[21] = { '\0' }; // Allocate a char array for the password asterisks
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	f107 0320 	add.w	r3, r7, #32
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	60da      	str	r2, [r3, #12]
 8003f48:	741a      	strb	r2, [r3, #16]
	char buffer[21];          // Buffer for converting numbers to strings

	LCD_Clear();
 8003f4a:	f7fe fedb 	bl	8002d04 <LCD_Clear>
	printLCD(0, "Enter password:", NO_SYMBOL);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	4936      	ldr	r1, [pc, #216]	; (800402c <EnterPassword+0x100>)
 8003f52:	2000      	movs	r0, #0
 8003f54:	f7fe ffd6 	bl	8002f04 <printLCD>
	ReadKeypadVar(ALL);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fe fb7f 	bl	800265c <ReadKeypadVar>

	while (lastKeyPressed != ENTERKEY) {
 8003f5e:	e056      	b.n	800400e <EnterPassword+0xe2>
		ReadKeypadVar(ALL);
 8003f60:	2000      	movs	r0, #0
 8003f62:	f7fe fb7b 	bl	800265c <ReadKeypadVar>
		if (lastKeyPressed >= 0 && lastKeyPressed <= 9) {
 8003f66:	4b32      	ldr	r3, [pc, #200]	; (8004030 <EnterPassword+0x104>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db2b      	blt.n	8003fc6 <EnterPassword+0x9a>
 8003f6e:	4b30      	ldr	r3, [pc, #192]	; (8004030 <EnterPassword+0x104>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b09      	cmp	r3, #9
 8003f74:	dc27      	bgt.n	8003fc6 <EnterPassword+0x9a>
			Key = Key * 10 + lastKeyPressed;
 8003f76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <EnterPassword+0x104>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4413      	add	r3, r2
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c

			int len = strlen(stars);
 8003f8a:	f107 031c 	add.w	r3, r7, #28
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc f96e 	bl	8000270 <strlen>
 8003f94:	4603      	mov	r3, r0
 8003f96:	63bb      	str	r3, [r7, #56]	; 0x38
			if (len < sizeof(stars) - 1) {
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	2b13      	cmp	r3, #19
 8003f9c:	d80c      	bhi.n	8003fb8 <EnterPassword+0x8c>
				stars[len] = '*';
 8003f9e:	f107 021c 	add.w	r2, r7, #28
 8003fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa4:	4413      	add	r3, r2
 8003fa6:	222a      	movs	r2, #42	; 0x2a
 8003fa8:	701a      	strb	r2, [r3, #0]
				stars[len + 1] = '\0';  // Null-terminate the string
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	3301      	adds	r3, #1
 8003fae:	3340      	adds	r3, #64	; 0x40
 8003fb0:	443b      	add	r3, r7
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f803 2c24 	strb.w	r2, [r3, #-36]
			}

			printLCD(1, stars, NO_SYMBOL);
 8003fb8:	f107 031c 	add.w	r3, r7, #28
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7fe ff9f 	bl	8002f04 <printLCD>
		}
		// If DELKEY is pressed, remove the last entered character
		if (lastKeyPressed == DELKEY) {
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <EnterPassword+0x104>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b0e      	cmp	r3, #14
 8003fcc:	d11f      	bne.n	800400e <EnterPassword+0xe2>
			Key /= 10;
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <EnterPassword+0x108>)
 8003fd2:	fb82 1203 	smull	r1, r2, r2, r3
 8003fd6:	1092      	asrs	r2, r2, #2
 8003fd8:	17db      	asrs	r3, r3, #31
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c

			int len = strlen(stars);
 8003fde:	f107 031c 	add.w	r3, r7, #28
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc f944 	bl	8000270 <strlen>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	637b      	str	r3, [r7, #52]	; 0x34
			if (len > 0) {
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	dd06      	ble.n	8004000 <EnterPassword+0xd4>
				stars[len - 1] = '\0';
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	3340      	adds	r3, #64	; 0x40
 8003ff8:	443b      	add	r3, r7
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
			printLCD(1, stars, NO_SYMBOL);
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	2200      	movs	r2, #0
 8004006:	4619      	mov	r1, r3
 8004008:	2001      	movs	r0, #1
 800400a:	f7fe ff7b 	bl	8002f04 <printLCD>
	while (lastKeyPressed != ENTERKEY) {
 800400e:	4b08      	ldr	r3, [pc, #32]	; (8004030 <EnterPassword+0x104>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b0b      	cmp	r3, #11
 8004014:	d1a4      	bne.n	8003f60 <EnterPassword+0x34>
		}
	}
	// Convert integer Key to string and print
	snprintf(buffer, sizeof(buffer), "Pass: %d", Key);
 8004016:	1d38      	adds	r0, r7, #4
 8004018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401a:	4a07      	ldr	r2, [pc, #28]	; (8004038 <EnterPassword+0x10c>)
 800401c:	2115      	movs	r1, #21
 800401e:	f010 f8e1 	bl	80141e4 <sniprintf>
	//SerialPrint(buffer);

	return Key;
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004024:	4618      	mov	r0, r3
 8004026:	3740      	adds	r7, #64	; 0x40
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	08017f78 	.word	0x08017f78
 8004030:	2000010c 	.word	0x2000010c
 8004034:	66666667 	.word	0x66666667
 8004038:	08017f88 	.word	0x08017f88

0800403c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004042:	463b      	mov	r3, r7
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	605a      	str	r2, [r3, #4]
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800404e:	4b21      	ldr	r3, [pc, #132]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <MX_ADC1_Init+0x9c>)
 8004052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8004054:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800405a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800405c:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <MX_ADC1_Init+0x98>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004062:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <MX_ADC1_Init+0x98>)
 800406a:	2200      	movs	r2, #0
 800406c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004076:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004078:	2200      	movs	r2, #0
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800407c:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <MX_ADC1_Init+0x98>)
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <MX_ADC1_Init+0xa0>)
 8004080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004084:	2200      	movs	r2, #0
 8004086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <MX_ADC1_Init+0x98>)
 800408a:	2201      	movs	r2, #1
 800408c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <MX_ADC1_Init+0x98>)
 8004098:	2201      	movs	r2, #1
 800409a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800409c:	480d      	ldr	r0, [pc, #52]	; (80040d4 <MX_ADC1_Init+0x98>)
 800409e:	f002 fcab 	bl	80069f8 <HAL_ADC_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80040a8:	f001 f9ea 	bl	8005480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80040ac:	230e      	movs	r3, #14
 80040ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040b0:	2301      	movs	r3, #1
 80040b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040b8:	463b      	mov	r3, r7
 80040ba:	4619      	mov	r1, r3
 80040bc:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MX_ADC1_Init+0x98>)
 80040be:	f002 fe7d 	bl	8006dbc <HAL_ADC_ConfigChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80040c8:	f001 f9da 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	200027e8 	.word	0x200027e8
 80040d8:	40012000 	.word	0x40012000
 80040dc:	0f000001 	.word	0x0f000001

080040e0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80040e6:	463b      	mov	r3, r7
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80040f2:	4b21      	ldr	r3, [pc, #132]	; (8004178 <MX_ADC2_Init+0x98>)
 80040f4:	4a21      	ldr	r2, [pc, #132]	; (800417c <MX_ADC2_Init+0x9c>)
 80040f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80040f8:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <MX_ADC2_Init+0x98>)
 80040fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <MX_ADC2_Init+0x98>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <MX_ADC2_Init+0x98>)
 8004108:	2200      	movs	r2, #0
 800410a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <MX_ADC2_Init+0x98>)
 800410e:	2200      	movs	r2, #0
 8004110:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004112:	4b19      	ldr	r3, [pc, #100]	; (8004178 <MX_ADC2_Init+0x98>)
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800411a:	4b17      	ldr	r3, [pc, #92]	; (8004178 <MX_ADC2_Init+0x98>)
 800411c:	2200      	movs	r2, #0
 800411e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004120:	4b15      	ldr	r3, [pc, #84]	; (8004178 <MX_ADC2_Init+0x98>)
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <MX_ADC2_Init+0xa0>)
 8004124:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <MX_ADC2_Init+0x98>)
 8004128:	2200      	movs	r2, #0
 800412a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <MX_ADC2_Init+0x98>)
 800412e:	2201      	movs	r2, #1
 8004130:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <MX_ADC2_Init+0x98>)
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800413a:	4b0f      	ldr	r3, [pc, #60]	; (8004178 <MX_ADC2_Init+0x98>)
 800413c:	2201      	movs	r2, #1
 800413e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004140:	480d      	ldr	r0, [pc, #52]	; (8004178 <MX_ADC2_Init+0x98>)
 8004142:	f002 fc59 	bl	80069f8 <HAL_ADC_Init>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800414c:	f001 f998 	bl	8005480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004150:	2301      	movs	r3, #1
 8004152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004154:	2301      	movs	r3, #1
 8004156:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800415c:	463b      	mov	r3, r7
 800415e:	4619      	mov	r1, r3
 8004160:	4805      	ldr	r0, [pc, #20]	; (8004178 <MX_ADC2_Init+0x98>)
 8004162:	f002 fe2b 	bl	8006dbc <HAL_ADC_ConfigChannel>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800416c:	f001 f988 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20002830 	.word	0x20002830
 800417c:	40012100 	.word	0x40012100
 8004180:	0f000001 	.word	0x0f000001

08004184 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800418a:	463b      	mov	r3, r7
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8004196:	4b21      	ldr	r3, [pc, #132]	; (800421c <MX_ADC3_Init+0x98>)
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <MX_ADC3_Init+0x9c>)
 800419a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800419c:	4b1f      	ldr	r3, [pc, #124]	; (800421c <MX_ADC3_Init+0x98>)
 800419e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80041a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <MX_ADC3_Init+0x98>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80041aa:	4b1c      	ldr	r3, [pc, #112]	; (800421c <MX_ADC3_Init+0x98>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <MX_ADC3_Init+0x98>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <MX_ADC3_Init+0x98>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <MX_ADC3_Init+0x98>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041c4:	4b15      	ldr	r3, [pc, #84]	; (800421c <MX_ADC3_Init+0x98>)
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <MX_ADC3_Init+0xa0>)
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041ca:	4b14      	ldr	r3, [pc, #80]	; (800421c <MX_ADC3_Init+0x98>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <MX_ADC3_Init+0x98>)
 80041d2:	2201      	movs	r2, #1
 80041d4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80041d6:	4b11      	ldr	r3, [pc, #68]	; (800421c <MX_ADC3_Init+0x98>)
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <MX_ADC3_Init+0x98>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80041e4:	480d      	ldr	r0, [pc, #52]	; (800421c <MX_ADC3_Init+0x98>)
 80041e6:	f002 fc07 	bl	80069f8 <HAL_ADC_Init>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80041f0:	f001 f946 	bl	8005480 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041f8:	2301      	movs	r3, #1
 80041fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004200:	463b      	mov	r3, r7
 8004202:	4619      	mov	r1, r3
 8004204:	4805      	ldr	r0, [pc, #20]	; (800421c <MX_ADC3_Init+0x98>)
 8004206:	f002 fdd9 	bl	8006dbc <HAL_ADC_ConfigChannel>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004210:	f001 f936 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20002878 	.word	0x20002878
 8004220:	40012200 	.word	0x40012200
 8004224:	0f000001 	.word	0x0f000001

08004228 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	; 0x38
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	60da      	str	r2, [r3, #12]
 800423e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a52      	ldr	r2, [pc, #328]	; (8004390 <HAL_ADC_MspInit+0x168>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d128      	bne.n	800429c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	4b51      	ldr	r3, [pc, #324]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004252:	4a50      	ldr	r2, [pc, #320]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	6453      	str	r3, [r2, #68]	; 0x44
 800425a:	4b4e      	ldr	r3, [pc, #312]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	4b4a      	ldr	r3, [pc, #296]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	4a49      	ldr	r2, [pc, #292]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	6313      	str	r3, [r2, #48]	; 0x30
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = Sensor_Pressure_ADC_Input_Pin;
 8004282:	2310      	movs	r3, #16
 8004284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004286:	2303      	movs	r3, #3
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Sensor_Pressure_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 800428e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004292:	4619      	mov	r1, r3
 8004294:	4840      	ldr	r0, [pc, #256]	; (8004398 <HAL_ADC_MspInit+0x170>)
 8004296:	f003 fe2b 	bl	8007ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800429a:	e074      	b.n	8004386 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3e      	ldr	r2, [pc, #248]	; (800439c <HAL_ADC_MspInit+0x174>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d128      	bne.n	80042f8 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80042a6:	2300      	movs	r3, #0
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	4b3a      	ldr	r3, [pc, #232]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	4a39      	ldr	r2, [pc, #228]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 80042b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042b4:	6453      	str	r3, [r2, #68]	; 0x44
 80042b6:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a32      	ldr	r2, [pc, #200]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = V12_ADC_Input_Pin;
 80042de:	2302      	movs	r3, #2
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042e2:	2303      	movs	r3, #3
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V12_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 80042ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ee:	4619      	mov	r1, r3
 80042f0:	482b      	ldr	r0, [pc, #172]	; (80043a0 <HAL_ADC_MspInit+0x178>)
 80042f2:	f003 fdfd 	bl	8007ef0 <HAL_GPIO_Init>
}
 80042f6:	e046      	b.n	8004386 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a29      	ldr	r2, [pc, #164]	; (80043a4 <HAL_ADC_MspInit+0x17c>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d141      	bne.n	8004386 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	4a22      	ldr	r2, [pc, #136]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 800430c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004310:	6453      	str	r3, [r2, #68]	; 0x44
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	4b1c      	ldr	r3, [pc, #112]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a14      	ldr	r2, [pc, #80]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b12      	ldr	r3, [pc, #72]	; (8004394 <HAL_ADC_MspInit+0x16c>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Curr_Sensor_ServoDC_ADC_Input_Pin|Curr_Sensor_Clamp_ADC_Input_Pin;
 8004356:	230c      	movs	r3, #12
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800435a:	2303      	movs	r3, #3
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435e:	2300      	movs	r3, #0
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004366:	4619      	mov	r1, r3
 8004368:	480b      	ldr	r0, [pc, #44]	; (8004398 <HAL_ADC_MspInit+0x170>)
 800436a:	f003 fdc1 	bl	8007ef0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Curr_Sensor_Spindle_ADC_Input_Pin;
 800436e:	2301      	movs	r3, #1
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004372:	2303      	movs	r3, #3
 8004374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Curr_Sensor_Spindle_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 800437a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800437e:	4619      	mov	r1, r3
 8004380:	4807      	ldr	r0, [pc, #28]	; (80043a0 <HAL_ADC_MspInit+0x178>)
 8004382:	f003 fdb5 	bl	8007ef0 <HAL_GPIO_Init>
}
 8004386:	bf00      	nop
 8004388:	3738      	adds	r7, #56	; 0x38
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40012000 	.word	0x40012000
 8004394:	40023800 	.word	0x40023800
 8004398:	40020800 	.word	0x40020800
 800439c:	40012100 	.word	0x40012100
 80043a0:	40020000 	.word	0x40020000
 80043a4:	40012200 	.word	0x40012200

080043a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <MX_DMA_Init+0x78>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	4a1a      	ldr	r2, [pc, #104]	; (8004420 <MX_DMA_Init+0x78>)
 80043b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043bc:	6313      	str	r3, [r2, #48]	; 0x30
 80043be:	4b18      	ldr	r3, [pc, #96]	; (8004420 <MX_DMA_Init+0x78>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	4b14      	ldr	r3, [pc, #80]	; (8004420 <MX_DMA_Init+0x78>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <MX_DMA_Init+0x78>)
 80043d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b11      	ldr	r3, [pc, #68]	; (8004420 <MX_DMA_Init+0x78>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	603b      	str	r3, [r7, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2105      	movs	r1, #5
 80043ea:	200c      	movs	r0, #12
 80043ec:	f002 ffbc 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80043f0:	200c      	movs	r0, #12
 80043f2:	f002 ffd5 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80043f6:	2200      	movs	r2, #0
 80043f8:	2105      	movs	r1, #5
 80043fa:	200e      	movs	r0, #14
 80043fc:	f002 ffb4 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004400:	200e      	movs	r0, #14
 8004402:	f002 ffcd 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2105      	movs	r1, #5
 800440a:	203a      	movs	r0, #58	; 0x3a
 800440c:	f002 ffac 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004410:	203a      	movs	r0, #58	; 0x3a
 8004412:	f002 ffc5 	bl	80073a0 <HAL_NVIC_EnableIRQ>

}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800

08004424 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8004428:	2200      	movs	r2, #0
 800442a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800442e:	4804      	ldr	r0, [pc, #16]	; (8004440 <SELECT+0x1c>)
 8004430:	f003 ff12 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004434:	2001      	movs	r0, #1
 8004436:	f002 fabb 	bl	80069b0 <HAL_Delay>
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40020000 	.word	0x40020000

08004444 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8004448:	2201      	movs	r2, #1
 800444a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800444e:	4804      	ldr	r0, [pc, #16]	; (8004460 <DESELECT+0x1c>)
 8004450:	f003 ff02 	bl	8008258 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004454:	2001      	movs	r0, #1
 8004456:	f002 faab 	bl	80069b0 <HAL_Delay>
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40020000 	.word	0x40020000

08004464 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800446e:	bf00      	nop
 8004470:	4b08      	ldr	r3, [pc, #32]	; (8004494 <SPI_TxByte+0x30>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b02      	cmp	r3, #2
 800447c:	d1f8      	bne.n	8004470 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800447e:	1df9      	adds	r1, r7, #7
 8004480:	2364      	movs	r3, #100	; 0x64
 8004482:	2201      	movs	r2, #1
 8004484:	4803      	ldr	r0, [pc, #12]	; (8004494 <SPI_TxByte+0x30>)
 8004486:	f004 fcec 	bl	8008e62 <HAL_SPI_Transmit>
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20002b3c 	.word	0x20002b3c

08004498 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80044a4:	bf00      	nop
 80044a6:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <SPI_TxBuffer+0x30>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d1f8      	bne.n	80044a6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80044b4:	887a      	ldrh	r2, [r7, #2]
 80044b6:	2364      	movs	r3, #100	; 0x64
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4803      	ldr	r0, [pc, #12]	; (80044c8 <SPI_TxBuffer+0x30>)
 80044bc:	f004 fcd1 	bl	8008e62 <HAL_SPI_Transmit>
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	20002b3c 	.word	0x20002b3c

080044cc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80044d2:	23ff      	movs	r3, #255	; 0xff
 80044d4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80044d6:	bf00      	nop
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <SPI_RxByte+0x34>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d1f8      	bne.n	80044d8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80044e6:	1dba      	adds	r2, r7, #6
 80044e8:	1df9      	adds	r1, r7, #7
 80044ea:	2364      	movs	r3, #100	; 0x64
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	2301      	movs	r3, #1
 80044f0:	4803      	ldr	r0, [pc, #12]	; (8004500 <SPI_RxByte+0x34>)
 80044f2:	f004 fdf9 	bl	80090e8 <HAL_SPI_TransmitReceive>

	return data;
 80044f6:	79bb      	ldrb	r3, [r7, #6]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20002b3c 	.word	0x20002b3c

08004504 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800450c:	f7ff ffde 	bl	80044cc <SPI_RxByte>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	701a      	strb	r2, [r3, #0]
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <SD_ReadyWait+0x30>)
 8004528:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800452c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800452e:	f7ff ffcd 	bl	80044cc <SPI_RxByte>
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2bff      	cmp	r3, #255	; 0xff
 800453a:	d004      	beq.n	8004546 <SD_ReadyWait+0x26>
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <SD_ReadyWait+0x30>)
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1f3      	bne.n	800452e <SD_ReadyWait+0xe>

	return res;
 8004546:	79fb      	ldrb	r3, [r7, #7]
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20002bdd 	.word	0x20002bdd

08004554 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800455a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800455e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8004560:	f7ff ff70 	bl	8004444 <DESELECT>
	for(int i = 0; i < 10; i++)
 8004564:	2300      	movs	r3, #0
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	e005      	b.n	8004576 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800456a:	20ff      	movs	r0, #255	; 0xff
 800456c:	f7ff ff7a 	bl	8004464 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3301      	adds	r3, #1
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b09      	cmp	r3, #9
 800457a:	ddf6      	ble.n	800456a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800457c:	f7ff ff52 	bl	8004424 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8004580:	2340      	movs	r3, #64	; 0x40
 8004582:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8004594:	2395      	movs	r3, #149	; 0x95
 8004596:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8004598:	463b      	mov	r3, r7
 800459a:	2106      	movs	r1, #6
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff ff7b 	bl	8004498 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80045a2:	e002      	b.n	80045aa <SD_PowerOn+0x56>
	{
		cnt--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80045aa:	f7ff ff8f 	bl	80044cc <SPI_RxByte>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d002      	beq.n	80045ba <SD_PowerOn+0x66>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f4      	bne.n	80045a4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80045ba:	f7ff ff43 	bl	8004444 <DESELECT>
	SPI_TxByte(0XFF);
 80045be:	20ff      	movs	r0, #255	; 0xff
 80045c0:	f7ff ff50 	bl	8004464 <SPI_TxByte>

	PowerFlag = 1;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <SD_PowerOn+0x80>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	701a      	strb	r2, [r3, #0]
}
 80045ca:	bf00      	nop
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200028c1 	.word	0x200028c1

080045d8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <SD_PowerOff+0x14>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	200028c1 	.word	0x200028c1

080045f0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <SD_CheckPower+0x14>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200028c1 	.word	0x200028c1

08004608 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8004612:	4b14      	ldr	r3, [pc, #80]	; (8004664 <SD_RxDataBlock+0x5c>)
 8004614:	22c8      	movs	r2, #200	; 0xc8
 8004616:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8004618:	f7ff ff58 	bl	80044cc <SPI_RxByte>
 800461c:	4603      	mov	r3, r0
 800461e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	2bff      	cmp	r3, #255	; 0xff
 8004624:	d104      	bne.n	8004630 <SD_RxDataBlock+0x28>
 8004626:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <SD_RxDataBlock+0x5c>)
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f3      	bne.n	8004618 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	2bfe      	cmp	r3, #254	; 0xfe
 8004634:	d001      	beq.n	800463a <SD_RxDataBlock+0x32>
 8004636:	2300      	movs	r3, #0
 8004638:	e00f      	b.n	800465a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff ff5f 	bl	8004504 <SPI_RxBytePtr>
	} while(len--);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	1e5a      	subs	r2, r3, #1
 800464a:	603a      	str	r2, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1f4      	bne.n	800463a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8004650:	f7ff ff3c 	bl	80044cc <SPI_RxByte>
	SPI_RxByte();
 8004654:	f7ff ff3a 	bl	80044cc <SPI_RxByte>

	return TRUE;
 8004658:	2301      	movs	r3, #1
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20002bdc 	.word	0x20002bdc

08004668 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8004678:	f7ff ff52 	bl	8004520 <SD_ReadyWait>
 800467c:	4603      	mov	r3, r0
 800467e:	2bff      	cmp	r3, #255	; 0xff
 8004680:	d001      	beq.n	8004686 <SD_TxDataBlock+0x1e>
 8004682:	2300      	movs	r3, #0
 8004684:	e02f      	b.n	80046e6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff feeb 	bl	8004464 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800468e:	78fb      	ldrb	r3, [r7, #3]
 8004690:	2bfd      	cmp	r3, #253	; 0xfd
 8004692:	d020      	beq.n	80046d6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8004694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff fefd 	bl	8004498 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800469e:	f7ff ff15 	bl	80044cc <SPI_RxByte>
		SPI_RxByte();
 80046a2:	f7ff ff13 	bl	80044cc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80046a6:	e00b      	b.n	80046c0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80046a8:	f7ff ff10 	bl	80044cc <SPI_RxByte>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2b05      	cmp	r3, #5
 80046b8:	d006      	beq.n	80046c8 <SD_TxDataBlock+0x60>
			i++;
 80046ba:	7bbb      	ldrb	r3, [r7, #14]
 80046bc:	3301      	adds	r3, #1
 80046be:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80046c0:	7bbb      	ldrb	r3, [r7, #14]
 80046c2:	2b40      	cmp	r3, #64	; 0x40
 80046c4:	d9f0      	bls.n	80046a8 <SD_TxDataBlock+0x40>
 80046c6:	e000      	b.n	80046ca <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80046c8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80046ca:	bf00      	nop
 80046cc:	f7ff fefe 	bl	80044cc <SPI_RxByte>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0fa      	beq.n	80046cc <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2b05      	cmp	r3, #5
 80046de:	d101      	bne.n	80046e4 <SD_TxDataBlock+0x7c>
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4603      	mov	r3, r0
 80046f6:	6039      	str	r1, [r7, #0]
 80046f8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80046fa:	f7ff ff11 	bl	8004520 <SD_ReadyWait>
 80046fe:	4603      	mov	r3, r0
 8004700:	2bff      	cmp	r3, #255	; 0xff
 8004702:	d001      	beq.n	8004708 <SD_SendCmd+0x1a>
 8004704:	23ff      	movs	r3, #255	; 0xff
 8004706:	e042      	b.n	800478e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8004708:	79fb      	ldrb	r3, [r7, #7]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff feaa 	bl	8004464 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	0e1b      	lsrs	r3, r3, #24
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff fea4 	bl	8004464 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	b2db      	uxtb	r3, r3
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fe9e 	bl	8004464 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fe98 	bl	8004464 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fe93 	bl	8004464 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b40      	cmp	r3, #64	; 0x40
 8004742:	d102      	bne.n	800474a <SD_SendCmd+0x5c>
 8004744:	2395      	movs	r3, #149	; 0x95
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e007      	b.n	800475a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	2b48      	cmp	r3, #72	; 0x48
 800474e:	d102      	bne.n	8004756 <SD_SendCmd+0x68>
 8004750:	2387      	movs	r3, #135	; 0x87
 8004752:	73fb      	strb	r3, [r7, #15]
 8004754:	e001      	b.n	800475a <SD_SendCmd+0x6c>
	else crc = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800475a:	7bfb      	ldrb	r3, [r7, #15]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fe81 	bl	8004464 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8004762:	79fb      	ldrb	r3, [r7, #7]
 8004764:	2b4c      	cmp	r3, #76	; 0x4c
 8004766:	d101      	bne.n	800476c <SD_SendCmd+0x7e>
 8004768:	f7ff feb0 	bl	80044cc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800476c:	230a      	movs	r3, #10
 800476e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8004770:	f7ff feac 	bl	80044cc <SPI_RxByte>
 8004774:	4603      	mov	r3, r0
 8004776:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8004778:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800477c:	2b00      	cmp	r3, #0
 800477e:	da05      	bge.n	800478c <SD_SendCmd+0x9e>
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	3b01      	subs	r3, #1
 8004784:	73bb      	strb	r3, [r7, #14]
 8004786:	7bbb      	ldrb	r3, [r7, #14]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1f1      	bne.n	8004770 <SD_SendCmd+0x82>

	return res;
 800478c:	7b7b      	ldrb	r3, [r7, #13]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	4603      	mov	r3, r0
 80047a0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <SD_disk_initialize+0x14>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0d6      	b.n	800495a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80047ac:	4b6d      	ldr	r3, [pc, #436]	; (8004964 <SD_disk_initialize+0x1cc>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <SD_disk_initialize+0x2a>
 80047ba:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <SD_disk_initialize+0x1cc>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	e0cb      	b.n	800495a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80047c2:	f7ff fec7 	bl	8004554 <SD_PowerOn>

	/* slave select */
	SELECT();
 80047c6:	f7ff fe2d 	bl	8004424 <SELECT>

	/* check disk type */
	type = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80047ce:	2100      	movs	r1, #0
 80047d0:	2040      	movs	r0, #64	; 0x40
 80047d2:	f7ff ff8c 	bl	80046ee <SD_SendCmd>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 80a6 	bne.w	800492a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80047de:	4b62      	ldr	r3, [pc, #392]	; (8004968 <SD_disk_initialize+0x1d0>)
 80047e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047e4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80047e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80047ea:	2048      	movs	r0, #72	; 0x48
 80047ec:	f7ff ff7f 	bl	80046ee <SD_SendCmd>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d158      	bne.n	80048a8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e00c      	b.n	8004816 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80047fc:	7bfc      	ldrb	r4, [r7, #15]
 80047fe:	f7ff fe65 	bl	80044cc <SPI_RxByte>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	f104 0310 	add.w	r3, r4, #16
 800480a:	443b      	add	r3, r7
 800480c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	3301      	adds	r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d9ef      	bls.n	80047fc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800481c:	7abb      	ldrb	r3, [r7, #10]
 800481e:	2b01      	cmp	r3, #1
 8004820:	f040 8083 	bne.w	800492a <SD_disk_initialize+0x192>
 8004824:	7afb      	ldrb	r3, [r7, #11]
 8004826:	2baa      	cmp	r3, #170	; 0xaa
 8004828:	d17f      	bne.n	800492a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800482a:	2100      	movs	r1, #0
 800482c:	2077      	movs	r0, #119	; 0x77
 800482e:	f7ff ff5e 	bl	80046ee <SD_SendCmd>
 8004832:	4603      	mov	r3, r0
 8004834:	2b01      	cmp	r3, #1
 8004836:	d807      	bhi.n	8004848 <SD_disk_initialize+0xb0>
 8004838:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800483c:	2069      	movs	r0, #105	; 0x69
 800483e:	f7ff ff56 	bl	80046ee <SD_SendCmd>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8004848:	4b47      	ldr	r3, [pc, #284]	; (8004968 <SD_disk_initialize+0x1d0>)
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1eb      	bne.n	800482a <SD_disk_initialize+0x92>
 8004852:	e000      	b.n	8004856 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8004854:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8004856:	4b44      	ldr	r3, [pc, #272]	; (8004968 <SD_disk_initialize+0x1d0>)
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	2b00      	cmp	r3, #0
 800485e:	d064      	beq.n	800492a <SD_disk_initialize+0x192>
 8004860:	2100      	movs	r1, #0
 8004862:	207a      	movs	r0, #122	; 0x7a
 8004864:	f7ff ff43 	bl	80046ee <SD_SendCmd>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d15d      	bne.n	800492a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
 8004872:	e00c      	b.n	800488e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8004874:	7bfc      	ldrb	r4, [r7, #15]
 8004876:	f7ff fe29 	bl	80044cc <SPI_RxByte>
 800487a:	4603      	mov	r3, r0
 800487c:	461a      	mov	r2, r3
 800487e:	f104 0310 	add.w	r3, r4, #16
 8004882:	443b      	add	r3, r7
 8004884:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	3301      	adds	r3, #1
 800488c:	73fb      	strb	r3, [r7, #15]
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	2b03      	cmp	r3, #3
 8004892:	d9ef      	bls.n	8004874 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004894:	7a3b      	ldrb	r3, [r7, #8]
 8004896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <SD_disk_initialize+0x10a>
 800489e:	230c      	movs	r3, #12
 80048a0:	e000      	b.n	80048a4 <SD_disk_initialize+0x10c>
 80048a2:	2304      	movs	r3, #4
 80048a4:	73bb      	strb	r3, [r7, #14]
 80048a6:	e040      	b.n	800492a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80048a8:	2100      	movs	r1, #0
 80048aa:	2077      	movs	r0, #119	; 0x77
 80048ac:	f7ff ff1f 	bl	80046ee <SD_SendCmd>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d808      	bhi.n	80048c8 <SD_disk_initialize+0x130>
 80048b6:	2100      	movs	r1, #0
 80048b8:	2069      	movs	r0, #105	; 0x69
 80048ba:	f7ff ff18 	bl	80046ee <SD_SendCmd>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d801      	bhi.n	80048c8 <SD_disk_initialize+0x130>
 80048c4:	2302      	movs	r3, #2
 80048c6:	e000      	b.n	80048ca <SD_disk_initialize+0x132>
 80048c8:	2301      	movs	r3, #1
 80048ca:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80048cc:	7bbb      	ldrb	r3, [r7, #14]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d10e      	bne.n	80048f0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80048d2:	2100      	movs	r1, #0
 80048d4:	2077      	movs	r0, #119	; 0x77
 80048d6:	f7ff ff0a 	bl	80046ee <SD_SendCmd>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d80e      	bhi.n	80048fe <SD_disk_initialize+0x166>
 80048e0:	2100      	movs	r1, #0
 80048e2:	2069      	movs	r0, #105	; 0x69
 80048e4:	f7ff ff03 	bl	80046ee <SD_SendCmd>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d107      	bne.n	80048fe <SD_disk_initialize+0x166>
 80048ee:	e00d      	b.n	800490c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80048f0:	2100      	movs	r1, #0
 80048f2:	2041      	movs	r0, #65	; 0x41
 80048f4:	f7ff fefb 	bl	80046ee <SD_SendCmd>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <SD_disk_initialize+0x1d0>)
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e1      	bne.n	80048cc <SD_disk_initialize+0x134>
 8004908:	e000      	b.n	800490c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800490a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <SD_disk_initialize+0x1d0>)
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <SD_disk_initialize+0x18e>
 8004916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800491a:	2050      	movs	r0, #80	; 0x50
 800491c:	f7ff fee7 	bl	80046ee <SD_SendCmd>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <SD_disk_initialize+0x192>
 8004926:	2300      	movs	r3, #0
 8004928:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <SD_disk_initialize+0x1d4>)
 800492c:	7bbb      	ldrb	r3, [r7, #14]
 800492e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8004930:	f7ff fd88 	bl	8004444 <DESELECT>
	SPI_RxByte();
 8004934:	f7ff fdca 	bl	80044cc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8004938:	7bbb      	ldrb	r3, [r7, #14]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800493e:	4b09      	ldr	r3, [pc, #36]	; (8004964 <SD_disk_initialize+0x1cc>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f023 0301 	bic.w	r3, r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <SD_disk_initialize+0x1cc>)
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	e001      	b.n	8004954 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8004950:	f7ff fe42 	bl	80045d8 <SD_PowerOff>
	}

	return Stat;
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <SD_disk_initialize+0x1cc>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b2db      	uxtb	r3, r3
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	bd90      	pop	{r4, r7, pc}
 8004962:	bf00      	nop
 8004964:	20000134 	.word	0x20000134
 8004968:	20002bdc 	.word	0x20002bdc
 800496c:	200028c0 	.word	0x200028c0

08004970 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	4603      	mov	r3, r0
 8004978:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <SD_disk_status+0x14>
 8004980:	2301      	movs	r3, #1
 8004982:	e002      	b.n	800498a <SD_disk_status+0x1a>
	return Stat;
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <SD_disk_status+0x28>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000134 	.word	0x20000134

0800499c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <SD_disk_read+0x1c>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <SD_disk_read+0x20>
 80049b8:	2304      	movs	r3, #4
 80049ba:	e051      	b.n	8004a60 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049bc:	4b2a      	ldr	r3, [pc, #168]	; (8004a68 <SD_disk_read+0xcc>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <SD_disk_read+0x32>
 80049ca:	2303      	movs	r3, #3
 80049cc:	e048      	b.n	8004a60 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80049ce:	4b27      	ldr	r3, [pc, #156]	; (8004a6c <SD_disk_read+0xd0>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <SD_disk_read+0x44>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	607b      	str	r3, [r7, #4]

	SELECT();
 80049e0:	f7ff fd20 	bl	8004424 <SELECT>

	if (count == 1)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d111      	bne.n	8004a0e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	2051      	movs	r0, #81	; 0x51
 80049ee:	f7ff fe7e 	bl	80046ee <SD_SendCmd>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d129      	bne.n	8004a4c <SD_disk_read+0xb0>
 80049f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049fc:	68b8      	ldr	r0, [r7, #8]
 80049fe:	f7ff fe03 	bl	8004608 <SD_RxDataBlock>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d021      	beq.n	8004a4c <SD_disk_read+0xb0>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	e01e      	b.n	8004a4c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	2052      	movs	r0, #82	; 0x52
 8004a12:	f7ff fe6c 	bl	80046ee <SD_SendCmd>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d117      	bne.n	8004a4c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8004a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a20:	68b8      	ldr	r0, [r7, #8]
 8004a22:	f7ff fdf1 	bl	8004608 <SD_RxDataBlock>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <SD_disk_read+0xa6>
				buff += 512;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004a32:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1ed      	bne.n	8004a1c <SD_disk_read+0x80>
 8004a40:	e000      	b.n	8004a44 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004a42:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8004a44:	2100      	movs	r1, #0
 8004a46:	204c      	movs	r0, #76	; 0x4c
 8004a48:	f7ff fe51 	bl	80046ee <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8004a4c:	f7ff fcfa 	bl	8004444 <DESELECT>
	SPI_RxByte();
 8004a50:	f7ff fd3c 	bl	80044cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	bf14      	ite	ne
 8004a5a:	2301      	movne	r3, #1
 8004a5c:	2300      	moveq	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000134 	.word	0x20000134
 8004a6c:	200028c0 	.word	0x200028c0

08004a70 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	607a      	str	r2, [r7, #4]
 8004a7a:	603b      	str	r3, [r7, #0]
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <SD_disk_write+0x1c>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <SD_disk_write+0x20>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	e06b      	b.n	8004b68 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004a90:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <SD_disk_write+0x100>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <SD_disk_write+0x32>
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e062      	b.n	8004b68 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004aa2:	4b33      	ldr	r3, [pc, #204]	; (8004b70 <SD_disk_write+0x100>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <SD_disk_write+0x44>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e059      	b.n	8004b68 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004ab4:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <SD_disk_write+0x104>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d102      	bne.n	8004ac6 <SD_disk_write+0x56>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	025b      	lsls	r3, r3, #9
 8004ac4:	607b      	str	r3, [r7, #4]

	SELECT();
 8004ac6:	f7ff fcad 	bl	8004424 <SELECT>

	if (count == 1)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d110      	bne.n	8004af2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	2058      	movs	r0, #88	; 0x58
 8004ad4:	f7ff fe0b 	bl	80046ee <SD_SendCmd>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d13a      	bne.n	8004b54 <SD_disk_write+0xe4>
 8004ade:	21fe      	movs	r1, #254	; 0xfe
 8004ae0:	68b8      	ldr	r0, [r7, #8]
 8004ae2:	f7ff fdc1 	bl	8004668 <SD_TxDataBlock>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d033      	beq.n	8004b54 <SD_disk_write+0xe4>
			count = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	e030      	b.n	8004b54 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8004af2:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <SD_disk_write+0x104>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2077      	movs	r0, #119	; 0x77
 8004b02:	f7ff fdf4 	bl	80046ee <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	2057      	movs	r0, #87	; 0x57
 8004b0a:	f7ff fdf0 	bl	80046ee <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	2059      	movs	r0, #89	; 0x59
 8004b12:	f7ff fdec 	bl	80046ee <SD_SendCmd>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d11b      	bne.n	8004b54 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004b1c:	21fc      	movs	r1, #252	; 0xfc
 8004b1e:	68b8      	ldr	r0, [r7, #8]
 8004b20:	f7ff fda2 	bl	8004668 <SD_TxDataBlock>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <SD_disk_write+0xd0>
				buff += 512;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004b30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ee      	bne.n	8004b1c <SD_disk_write+0xac>
 8004b3e:	e000      	b.n	8004b42 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8004b40:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8004b42:	21fd      	movs	r1, #253	; 0xfd
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7ff fd8f 	bl	8004668 <SD_TxDataBlock>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <SD_disk_write+0xe4>
			{
				count = 1;
 8004b50:	2301      	movs	r3, #1
 8004b52:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8004b54:	f7ff fc76 	bl	8004444 <DESELECT>
	SPI_RxByte();
 8004b58:	f7ff fcb8 	bl	80044cc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000134 	.word	0x20000134
 8004b74:	200028c0 	.word	0x200028c0

08004b78 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b08b      	sub	sp, #44	; 0x2c
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	603a      	str	r2, [r7, #0]
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	460b      	mov	r3, r1
 8004b86:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <SD_disk_ioctl+0x1e>
 8004b92:	2304      	movs	r3, #4
 8004b94:	e115      	b.n	8004dc2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8004b9c:	79bb      	ldrb	r3, [r7, #6]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d124      	bne.n	8004bec <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d012      	beq.n	8004bd0 <SD_disk_ioctl+0x58>
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	dc1a      	bgt.n	8004be4 <SD_disk_ioctl+0x6c>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <SD_disk_ioctl+0x40>
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d006      	beq.n	8004bc4 <SD_disk_ioctl+0x4c>
 8004bb6:	e015      	b.n	8004be4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8004bb8:	f7ff fd0e 	bl	80045d8 <SD_PowerOff>
			res = RES_OK;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bc2:	e0fc      	b.n	8004dbe <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8004bc4:	f7ff fcc6 	bl	8004554 <SD_PowerOn>
			res = RES_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004bce:	e0f6      	b.n	8004dbe <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8004bd0:	6a3b      	ldr	r3, [r7, #32]
 8004bd2:	1c5c      	adds	r4, r3, #1
 8004bd4:	f7ff fd0c 	bl	80045f0 <SD_CheckPower>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004be2:	e0ec      	b.n	8004dbe <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bea:	e0e8      	b.n	8004dbe <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004bec:	4b77      	ldr	r3, [pc, #476]	; (8004dcc <SD_disk_ioctl+0x254>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <SD_disk_ioctl+0x86>
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e0e1      	b.n	8004dc2 <SD_disk_ioctl+0x24a>

		SELECT();
 8004bfe:	f7ff fc11 	bl	8004424 <SELECT>

		switch (ctrl)
 8004c02:	79bb      	ldrb	r3, [r7, #6]
 8004c04:	2b0d      	cmp	r3, #13
 8004c06:	f200 80cb 	bhi.w	8004da0 <SD_disk_ioctl+0x228>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <SD_disk_ioctl+0x98>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004d0b 	.word	0x08004d0b
 8004c14:	08004c49 	.word	0x08004c49
 8004c18:	08004cfb 	.word	0x08004cfb
 8004c1c:	08004da1 	.word	0x08004da1
 8004c20:	08004da1 	.word	0x08004da1
 8004c24:	08004da1 	.word	0x08004da1
 8004c28:	08004da1 	.word	0x08004da1
 8004c2c:	08004da1 	.word	0x08004da1
 8004c30:	08004da1 	.word	0x08004da1
 8004c34:	08004da1 	.word	0x08004da1
 8004c38:	08004da1 	.word	0x08004da1
 8004c3c:	08004d1d 	.word	0x08004d1d
 8004c40:	08004d41 	.word	0x08004d41
 8004c44:	08004d65 	.word	0x08004d65
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2049      	movs	r0, #73	; 0x49
 8004c4c:	f7ff fd4f 	bl	80046ee <SD_SendCmd>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 80a8 	bne.w	8004da8 <SD_disk_ioctl+0x230>
 8004c58:	f107 030c 	add.w	r3, r7, #12
 8004c5c:	2110      	movs	r1, #16
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fcd2 	bl	8004608 <SD_RxDataBlock>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 809e 	beq.w	8004da8 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8004c6c:	7b3b      	ldrb	r3, [r7, #12]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d10e      	bne.n	8004c94 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8004c76:	7d7b      	ldrb	r3, [r7, #21]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	7d3b      	ldrb	r3, [r7, #20]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	4413      	add	r3, r2
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3301      	adds	r3, #1
 8004c88:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8004c8a:	8bfb      	ldrh	r3, [r7, #30]
 8004c8c:	029a      	lsls	r2, r3, #10
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e02e      	b.n	8004cf2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8004c94:	7c7b      	ldrb	r3, [r7, #17]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	7dbb      	ldrb	r3, [r7, #22]
 8004c9e:	09db      	lsrs	r3, r3, #7
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	7d7b      	ldrb	r3, [r7, #21]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	f003 0306 	and.w	r3, r3, #6
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8004cbc:	7d3b      	ldrb	r3, [r7, #20]
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	7cbb      	ldrb	r3, [r7, #18]
 8004cd2:	029b      	lsls	r3, r3, #10
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	4413      	add	r3, r2
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004ce4:	8bfa      	ldrh	r2, [r7, #30]
 8004ce6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cea:	3b09      	subs	r3, #9
 8004cec:	409a      	lsls	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8004cf8:	e056      	b.n	8004da8 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d00:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d08:	e055      	b.n	8004db6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004d0a:	f7ff fc09 	bl	8004520 <SD_ReadyWait>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2bff      	cmp	r3, #255	; 0xff
 8004d12:	d14b      	bne.n	8004dac <SD_disk_ioctl+0x234>
 8004d14:	2300      	movs	r3, #0
 8004d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d1a:	e047      	b.n	8004dac <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	2049      	movs	r0, #73	; 0x49
 8004d20:	f7ff fce5 	bl	80046ee <SD_SendCmd>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d142      	bne.n	8004db0 <SD_disk_ioctl+0x238>
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	6a38      	ldr	r0, [r7, #32]
 8004d2e:	f7ff fc6b 	bl	8004608 <SD_RxDataBlock>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d03b      	beq.n	8004db0 <SD_disk_ioctl+0x238>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d3e:	e037      	b.n	8004db0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004d40:	2100      	movs	r1, #0
 8004d42:	204a      	movs	r0, #74	; 0x4a
 8004d44:	f7ff fcd3 	bl	80046ee <SD_SendCmd>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d132      	bne.n	8004db4 <SD_disk_ioctl+0x23c>
 8004d4e:	2110      	movs	r1, #16
 8004d50:	6a38      	ldr	r0, [r7, #32]
 8004d52:	f7ff fc59 	bl	8004608 <SD_RxDataBlock>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02b      	beq.n	8004db4 <SD_disk_ioctl+0x23c>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8004d62:	e027      	b.n	8004db4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8004d64:	2100      	movs	r1, #0
 8004d66:	207a      	movs	r0, #122	; 0x7a
 8004d68:	f7ff fcc1 	bl	80046ee <SD_SendCmd>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d116      	bne.n	8004da0 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8004d72:	2300      	movs	r3, #0
 8004d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d78:	e00b      	b.n	8004d92 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8004d7a:	6a3c      	ldr	r4, [r7, #32]
 8004d7c:	1c63      	adds	r3, r4, #1
 8004d7e:	623b      	str	r3, [r7, #32]
 8004d80:	f7ff fba4 	bl	80044cc <SPI_RxByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8004d88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d9ef      	bls.n	8004d7a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004da6:	e006      	b.n	8004db6 <SD_disk_ioctl+0x23e>
			break;
 8004da8:	bf00      	nop
 8004daa:	e004      	b.n	8004db6 <SD_disk_ioctl+0x23e>
			break;
 8004dac:	bf00      	nop
 8004dae:	e002      	b.n	8004db6 <SD_disk_ioctl+0x23e>
			break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <SD_disk_ioctl+0x23e>
			break;
 8004db4:	bf00      	nop
		}

		DESELECT();
 8004db6:	f7ff fb45 	bl	8004444 <DESELECT>
		SPI_RxByte();
 8004dba:	f7ff fb87 	bl	80044cc <SPI_RxByte>
	}

	return res;
 8004dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	372c      	adds	r7, #44	; 0x2c
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd90      	pop	{r4, r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000134 	.word	0x20000134

08004dd0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a07      	ldr	r2, [pc, #28]	; (8004dfc <vApplicationGetIdleTaskMemory+0x2c>)
 8004de0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a06      	ldr	r2, [pc, #24]	; (8004e00 <vApplicationGetIdleTaskMemory+0x30>)
 8004de6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2280      	movs	r2, #128	; 0x80
 8004dec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	200028c8 	.word	0x200028c8
 8004e00:	2000291c 	.word	0x2000291c

08004e04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <MX_FREERTOS_Init+0x30>)
 8004e0c:	1d3c      	adds	r4, r7, #4
 8004e0e:	461d      	mov	r5, r3
 8004e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004e1c:	1d3b      	adds	r3, r7, #4
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f00b f8cb 	bl	800ffbc <osThreadCreate>
 8004e26:	4603      	mov	r3, r0
 8004e28:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <MX_FREERTOS_Init+0x34>)
 8004e2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8004e2c:	bf00      	nop
 8004e2e:	3720      	adds	r7, #32
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bdb0      	pop	{r4, r5, r7, pc}
 8004e34:	08017fa0 	.word	0x08017fa0
 8004e38:	200028c4 	.word	0x200028c4

08004e3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004e44:	2001      	movs	r0, #1
 8004e46:	f00b f905 	bl	8010054 <osDelay>
 8004e4a:	e7fb      	b.n	8004e44 <StartDefaultTask+0x8>

08004e4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	605a      	str	r2, [r3, #4]
 8004e5c:	609a      	str	r2, [r3, #8]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	4ba2      	ldr	r3, [pc, #648]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	4aa1      	ldr	r2, [pc, #644]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004e6c:	f043 0310 	orr.w	r3, r3, #16
 8004e70:	6313      	str	r3, [r2, #48]	; 0x30
 8004e72:	4b9f      	ldr	r3, [pc, #636]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	4b9b      	ldr	r3, [pc, #620]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	4a9a      	ldr	r2, [pc, #616]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8e:	4b98      	ldr	r3, [pc, #608]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	4b94      	ldr	r3, [pc, #592]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	4a93      	ldr	r2, [pc, #588]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8004eaa:	4b91      	ldr	r3, [pc, #580]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	613b      	str	r3, [r7, #16]
 8004eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	4b8d      	ldr	r3, [pc, #564]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebe:	4a8c      	ldr	r2, [pc, #560]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec6:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b86      	ldr	r3, [pc, #536]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	4a85      	ldr	r2, [pc, #532]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004edc:	f043 0302 	orr.w	r3, r3, #2
 8004ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee2:	4b83      	ldr	r3, [pc, #524]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef6:	4a7e      	ldr	r2, [pc, #504]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004ef8:	f043 0308 	orr.w	r3, r3, #8
 8004efc:	6313      	str	r3, [r2, #48]	; 0x30
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <MX_GPIO_Init+0x2a4>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_RESET);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8004f10:	4878      	ldr	r0, [pc, #480]	; (80050f4 <MX_GPIO_Init+0x2a8>)
 8004f12:	f003 f9a1 	bl	8008258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_LED_Output_GPIO_Port, Power_LED_Output_Pin, GPIO_PIN_RESET);
 8004f16:	2200      	movs	r2, #0
 8004f18:	2108      	movs	r1, #8
 8004f1a:	4877      	ldr	r0, [pc, #476]	; (80050f8 <MX_GPIO_Init+0x2ac>)
 8004f1c:	f003 f99c 	bl	8008258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ServoDC_M1_Dir_Output_Pin|USB_EN_Output_Pin, GPIO_PIN_RESET);
 8004f20:	2200      	movs	r2, #0
 8004f22:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8004f26:	4875      	ldr	r0, [pc, #468]	; (80050fc <MX_GPIO_Init+0x2b0>)
 8004f28:	f003 f996 	bl	8008258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin|Relay_Output_Pin|Spindle_M3_Dir_Output_Pin|Clamp_M2_Dir_Output_Pin
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f244 71de 	movw	r1, #18398	; 0x47de
 8004f32:	4873      	ldr	r0, [pc, #460]	; (8005100 <MX_GPIO_Init+0x2b4>)
 8004f34:	f003 f990 	bl	8008258 <HAL_GPIO_WritePin>
                          |LCD_RS_Output_Pin|LCD_EN_Output_Pin|LCD_D4_Output_Pin|LCD_D5_Output_Pin
                          |LCD_D6_Output_Pin|LCD_D7_Output_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Sensor_BottlePosition_Input_Pin|Sensor_RES_Input_Pin;
 8004f38:	2314      	movs	r3, #20
 8004f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f44:	f107 031c 	add.w	r3, r7, #28
 8004f48:	4619      	mov	r1, r3
 8004f4a:	486e      	ldr	r0, [pc, #440]	; (8005104 <MX_GPIO_Init+0x2b8>)
 8004f4c:	f002 ffd0 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Clamp_M2_EncA_Interrupt_Pin|Spindle_M3_EncA_Interrupt_Pin;
 8004f50:	2360      	movs	r3, #96	; 0x60
 8004f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f54:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f5e:	f107 031c 	add.w	r3, r7, #28
 8004f62:	4619      	mov	r1, r3
 8004f64:	4867      	ldr	r0, [pc, #412]	; (8005104 <MX_GPIO_Init+0x2b8>)
 8004f66:	f002 ffc3 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Spindle_M3_EncB_Interrupt_Pin|Clamp_M2_EncB__Interrupt_Pin;
 8004f6a:	f242 0302 	movw	r3, #8194	; 0x2002
 8004f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f70:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f7a:	f107 031c 	add.w	r3, r7, #28
 8004f7e:	4619      	mov	r1, r3
 8004f80:	485c      	ldr	r0, [pc, #368]	; (80050f4 <MX_GPIO_Init+0x2a8>)
 8004f82:	f002 ffb5 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin;
 8004f86:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f94:	2300      	movs	r3, #0
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f98:	f107 031c 	add.w	r3, r7, #28
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4855      	ldr	r0, [pc, #340]	; (80050f4 <MX_GPIO_Init+0x2a8>)
 8004fa0:	f002 ffa6 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Clamp_M2_Prox_Interrupt_Pin;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004fa8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8004fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Clamp_M2_Prox_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8004fb2:	f107 031c 	add.w	r3, r7, #28
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	484e      	ldr	r0, [pc, #312]	; (80050f4 <MX_GPIO_Init+0x2a8>)
 8004fba:	f002 ff99 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button_Clean_Interrupt_PullUp_Pin|Button_Power_Interrupt_PullUp_Pin;
 8004fbe:	2314      	movs	r3, #20
 8004fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004fc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fcc:	f107 031c 	add.w	r3, r7, #28
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4849      	ldr	r0, [pc, #292]	; (80050f8 <MX_GPIO_Init+0x2ac>)
 8004fd4:	f002 ff8c 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power_LED_Output_Pin;
 8004fd8:	2308      	movs	r3, #8
 8004fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Power_LED_Output_GPIO_Port, &GPIO_InitStruct);
 8004fe8:	f107 031c 	add.w	r3, r7, #28
 8004fec:	4619      	mov	r1, r3
 8004fee:	4842      	ldr	r0, [pc, #264]	; (80050f8 <MX_GPIO_Init+0x2ac>)
 8004ff0:	f002 ff7e 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Button_ManAuto_Input_PullUp_Pin|Button_PlayStop_Input_PullUp_Pin|Button_DelBack_Input_PullUp_Pin;
 8004ff4:	23e0      	movs	r3, #224	; 0xe0
 8004ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005000:	f107 031c 	add.w	r3, r7, #28
 8005004:	4619      	mov	r1, r3
 8005006:	483c      	ldr	r0, [pc, #240]	; (80050f8 <MX_GPIO_Init+0x2ac>)
 8005008:	f002 ff72 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_1_Input_PullUp_Pin;
 800500c:	2320      	movs	r3, #32
 800500e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005010:	2300      	movs	r3, #0
 8005012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005014:	2301      	movs	r3, #1
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_1_Input_PullUp_GPIO_Port, &GPIO_InitStruct);
 8005018:	f107 031c 	add.w	r3, r7, #28
 800501c:	4619      	mov	r1, r3
 800501e:	4835      	ldr	r0, [pc, #212]	; (80050f4 <MX_GPIO_Init+0x2a8>)
 8005020:	f002 ff66 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Button_2_Input_PullUp_Pin|Button_3_Input_PullUp_Pin|Button_4_Input_PullUp_Pin;
 8005024:	2307      	movs	r3, #7
 8005026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005028:	2300      	movs	r3, #0
 800502a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800502c:	2301      	movs	r3, #1
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005030:	f107 031c 	add.w	r3, r7, #28
 8005034:	4619      	mov	r1, r3
 8005036:	4831      	ldr	r0, [pc, #196]	; (80050fc <MX_GPIO_Init+0x2b0>)
 8005038:	f002 ff5a 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button_5_Input_PullUp_Pin|Button_6_Input_PullUp_Pin|Button_7_Input_PullUp_Pin|Button_8_Input_PullUp_Pin
 800503c:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8005040:	61fb      	str	r3, [r7, #28]
                          |Button_9_Input_PullUp_Pin|Button_0_Input_PullUp_Pin|Button_Enter_Input_PullUp_Pin|Button_Comma_Input_PullUp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005046:	2301      	movs	r3, #1
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800504a:	f107 031c 	add.w	r3, r7, #28
 800504e:	4619      	mov	r1, r3
 8005050:	482c      	ldr	r0, [pc, #176]	; (8005104 <MX_GPIO_Init+0x2b8>)
 8005052:	f002 ff4d 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USBFlag_Interrupt_PullUp_Pin;
 8005056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800505a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800505c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8005060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005062:	2301      	movs	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USBFlag_Interrupt_PullUp_GPIO_Port, &GPIO_InitStruct);
 8005066:	f107 031c 	add.w	r3, r7, #28
 800506a:	4619      	mov	r1, r3
 800506c:	4823      	ldr	r0, [pc, #140]	; (80050fc <MX_GPIO_Init+0x2b0>)
 800506e:	f002 ff3f 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ServoDC_M1_Dir_Output_Pin|USB_EN_Output_Pin;
 8005072:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005078:	2301      	movs	r3, #1
 800507a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005080:	2300      	movs	r3, #0
 8005082:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005084:	f107 031c 	add.w	r3, r7, #28
 8005088:	4619      	mov	r1, r3
 800508a:	481c      	ldr	r0, [pc, #112]	; (80050fc <MX_GPIO_Init+0x2b0>)
 800508c:	f002 ff30 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = nRESET_LPC_Output_Pin|Relay_Output_Pin|Spindle_M3_Dir_Output_Pin|Clamp_M2_Dir_Output_Pin
 8005090:	f244 73de 	movw	r3, #18398	; 0x47de
 8005094:	61fb      	str	r3, [r7, #28]
                          |LCD_RS_Output_Pin|LCD_EN_Output_Pin|LCD_D4_Output_Pin|LCD_D5_Output_Pin
                          |LCD_D6_Output_Pin|LCD_D7_Output_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005096:	2301      	movs	r3, #1
 8005098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509a:	2300      	movs	r3, #0
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800509e:	2300      	movs	r3, #0
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050a2:	f107 031c 	add.w	r3, r7, #28
 80050a6:	4619      	mov	r1, r3
 80050a8:	4815      	ldr	r0, [pc, #84]	; (8005100 <MX_GPIO_Init+0x2b4>)
 80050aa:	f002 ff21 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ServoDC_M1_EncB_Interrupt_Pin;
 80050ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80050b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80050b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ServoDC_M1_EncB_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80050be:	f107 031c 	add.w	r3, r7, #28
 80050c2:	4619      	mov	r1, r3
 80050c4:	480e      	ldr	r0, [pc, #56]	; (8005100 <MX_GPIO_Init+0x2b4>)
 80050c6:	f002 ff13 	bl	8007ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ServoDC_M1_Prox_Interrupt_Pin|Spindle_M3_Prox_Interrupt_Pin;
 80050ca:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80050ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80050d0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80050d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050da:	f107 031c 	add.w	r3, r7, #28
 80050de:	4619      	mov	r1, r3
 80050e0:	4805      	ldr	r0, [pc, #20]	; (80050f8 <MX_GPIO_Init+0x2ac>)
 80050e2:	f002 ff05 	bl	8007ef0 <HAL_GPIO_Init>

}
 80050e6:	bf00      	nop
 80050e8:	3730      	adds	r7, #48	; 0x30
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023800 	.word	0x40023800
 80050f4:	40020800 	.word	0x40020800
 80050f8:	40020000 	.word	0x40020000
 80050fc:	40020400 	.word	0x40020400
 8005100:	40020c00 	.word	0x40020c00
 8005104:	40021000 	.word	0x40021000

08005108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800510e:	f001 fc0d 	bl	800692c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005112:	f000 f8df 	bl	80052d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005116:	f7ff fe99 	bl	8004e4c <MX_GPIO_Init>
  MX_DMA_Init();
 800511a:	f7ff f945 	bl	80043a8 <MX_DMA_Init>
  MX_ADC1_Init();
 800511e:	f7fe ff8d 	bl	800403c <MX_ADC1_Init>
  MX_ADC2_Init();
 8005122:	f7fe ffdd 	bl	80040e0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8005126:	f7ff f82d 	bl	8004184 <MX_ADC3_Init>
  MX_SPI1_Init();
 800512a:	f000 fa47 	bl	80055bc <MX_SPI1_Init>
  MX_TIM3_Init();
 800512e:	f000 fd89 	bl	8005c44 <MX_TIM3_Init>
  MX_TIM4_Init();
 8005132:	f000 fdfd 	bl	8005d30 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005136:	f000 fee9 	bl	8005f0c <MX_TIM8_Init>
  MX_TIM11_Init();
 800513a:	f000 ffb7 	bl	80060ac <MX_TIM11_Init>
  MX_UART4_Init();
 800513e:	f001 f985 	bl	800644c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8005142:	f001 f9ad 	bl	80064a0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8005146:	f001 f9d5 	bl	80064f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 800514a:	f001 fb57 	bl	80067fc <MX_USB_OTG_FS_HCD_Init>
  MX_TIM2_Init();
 800514e:	f000 fd2b 	bl	8005ba8 <MX_TIM2_Init>
  MX_TIM7_Init();
 8005152:	f000 fea5 	bl	8005ea0 <MX_TIM7_Init>
  MX_TIM10_Init();
 8005156:	f000 ff85 	bl	8006064 <MX_TIM10_Init>
  MX_FATFS_Init();
 800515a:	f006 ffb5 	bl	800c0c8 <MX_FATFS_Init>
  MX_TIM6_Init();
 800515e:	f000 fe69 	bl	8005e34 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005162:	f000 f921 	bl	80053a8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8005166:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800516a:	f001 fc21 	bl	80069b0 <HAL_Delay>
	// Start Timer 7 in interrupt mode
  HAL_TIM_Base_Start_IT(&htim7);
 800516e:	4843      	ldr	r0, [pc, #268]	; (800527c <main+0x174>)
 8005170:	f004 fa96 	bl	80096a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8005174:	4842      	ldr	r0, [pc, #264]	; (8005280 <main+0x178>)
 8005176:	f004 fa93 	bl	80096a0 <HAL_TIM_Base_Start_IT>
  /** ENABLING LPC  AND THE LOAD CELLS WILL GET ACTIVATED **/
  HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_SET);
 800517a:	2201      	movs	r2, #1
 800517c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005180:	4840      	ldr	r0, [pc, #256]	; (8005284 <main+0x17c>)
 8005182:	f003 f869 	bl	8008258 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin, GPIO_PIN_SET);
  /********************************************************/
  HAL_Delay(1000);
 8005186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800518a:	f001 fc11 	bl	80069b0 <HAL_Delay>
  moveMotor(VALVEMOTOR, OFF, INT_INF);
 800518e:	4a3e      	ldr	r2, [pc, #248]	; (8005288 <main+0x180>)
 8005190:	2100      	movs	r1, #0
 8005192:	2003      	movs	r0, #3
 8005194:	f7fc fb48 	bl	8001828 <moveMotor>
  Servo_Init();
 8005198:	f7fe fad4 	bl	8003744 <Servo_Init>
  digitalWrite(Spindle_M3_Dir_Output, LOW);
 800519c:	2100      	movs	r1, #0
 800519e:	2004      	movs	r0, #4
 80051a0:	f7fc f9ac 	bl	80014fc <digitalWrite>
  digitalWrite(Clamp_M2_Dir_Output, LOW);
 80051a4:	2100      	movs	r1, #0
 80051a6:	2005      	movs	r0, #5
 80051a8:	f7fc f9a8 	bl	80014fc <digitalWrite>
  pwm(Spindle_M3_PWM, 0);
 80051ac:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800528c <main+0x184>
 80051b0:	2002      	movs	r0, #2
 80051b2:	f000 f96b 	bl	800548c <pwm>
  pwm(Clamp_M2_PWM, 0);
 80051b6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800528c <main+0x184>
 80051ba:	2001      	movs	r0, #1
 80051bc:	f000 f966 	bl	800548c <pwm>
  sd_Card_Check();
 80051c0:	f7fe f848 	bl	8003254 <sd_Card_Check>

  if (isMachineOn == FALSE) {
 80051c4:	4b32      	ldr	r3, [pc, #200]	; (8005290 <main+0x188>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <main+0xc8>
		goToSleep(); // Ensure goToSleep is adapted for STM32
 80051cc:	f7fd fa04 	bl	80025d8 <goToSleep>
	}

  //HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin, GPIO_PIN_SET);
 80051d0:	2201      	movs	r2, #1
 80051d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051d6:	482f      	ldr	r0, [pc, #188]	; (8005294 <main+0x18c>)
 80051d8:	f003 f83e 	bl	8008258 <HAL_GPIO_WritePin>
  //HAL_Delay(1000);
  HAL_TIM_Base_Start_IT(&htim6);
 80051dc:	482e      	ldr	r0, [pc, #184]	; (8005298 <main+0x190>)
 80051de:	f004 fa5f 	bl	80096a0 <HAL_TIM_Base_Start_IT>
	  LCD_Init();
	  LCDRGBControl(WHITE);
	  controlLCDContrast(100);
  */
  /* THIS iS DEVELOPER AND TESTING PURPOSE ONLE */
  printLCD(0, "SOFTWARE VER ", NO_SYMBOL);
 80051e2:	2200      	movs	r2, #0
 80051e4:	492d      	ldr	r1, [pc, #180]	; (800529c <main+0x194>)
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7fd fe8c 	bl	8002f04 <printLCD>
  snprintf(VERSION_NO, sizeof(VERSION_NO), "%d.%d.%d ", MAJOR_VERSION,MINOR_VERSION,PATCH_VERSION);
 80051ec:	2300      	movs	r3, #0
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	2306      	movs	r3, #6
 80051f6:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <main+0x198>)
 80051f8:	210a      	movs	r1, #10
 80051fa:	482a      	ldr	r0, [pc, #168]	; (80052a4 <main+0x19c>)
 80051fc:	f00e fff2 	bl	80141e4 <sniprintf>
  printLCD(1, VERSION_NO, NO_SYMBOL);
 8005200:	2200      	movs	r2, #0
 8005202:	4928      	ldr	r1, [pc, #160]	; (80052a4 <main+0x19c>)
 8005204:	2001      	movs	r0, #1
 8005206:	f7fd fe7d 	bl	8002f04 <printLCD>
  /************************************************/

  CTS_Home_position();
 800520a:	f7fd f8df 	bl	80023cc <CTS_Home_position>
  HAL_Delay(100);
 800520e:	2064      	movs	r0, #100	; 0x64
 8005210:	f001 fbce 	bl	80069b0 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, rxBuffer, 8);
 8005214:	2208      	movs	r2, #8
 8005216:	4924      	ldr	r1, [pc, #144]	; (80052a8 <main+0x1a0>)
 8005218:	4824      	ldr	r0, [pc, #144]	; (80052ac <main+0x1a4>)
 800521a:	f005 fbbf 	bl	800a99c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, rxBuffer1, 11);
 800521e:	220b      	movs	r2, #11
 8005220:	4923      	ldr	r1, [pc, #140]	; (80052b0 <main+0x1a8>)
 8005222:	4824      	ldr	r0, [pc, #144]	; (80052b4 <main+0x1ac>)
 8005224:	f005 fbba 	bl	800a99c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim10);
 8005228:	4823      	ldr	r0, [pc, #140]	; (80052b8 <main+0x1b0>)
 800522a:	f004 fa39 	bl	80096a0 <HAL_TIM_Base_Start_IT>
  LoadTimeFromSDCard(0,0,0);
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	2000      	movs	r0, #0
 8005234:	f7fe f8c2 	bl	80033bc <LoadTimeFromSDCard>
  UpdateTimeToSDCard(hours,  minutes,  seconds);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <main+0x1b4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <main+0x1b8>)
 800523e:	6811      	ldr	r1, [r2, #0]
 8005240:	4a20      	ldr	r2, [pc, #128]	; (80052c4 <main+0x1bc>)
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe f939 	bl	80034bc <UpdateTimeToSDCard>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800524a:	f7ff fddb 	bl	8004e04 <MX_FREERTOS_Init>

  /* Start scheduler */
  //osKernelStart();
  LCD_Q = xQueueCreate(5, sizeof(LCDMessage_t));
 800524e:	2200      	movs	r2, #0
 8005250:	2124      	movs	r1, #36	; 0x24
 8005252:	2005      	movs	r0, #5
 8005254:	f00b f970 	bl	8010538 <xQueueGenericCreate>
 8005258:	4603      	mov	r3, r0
 800525a:	4a1b      	ldr	r2, [pc, #108]	; (80052c8 <main+0x1c0>)
 800525c:	6013      	str	r3, [r2, #0]
  xTaskCreate(CustomerFrontEnd, "CustomerTask", 256, NULL, 2, NULL);
 800525e:	2300      	movs	r3, #0
 8005260:	9301      	str	r3, [sp, #4]
 8005262:	2302      	movs	r3, #2
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	2300      	movs	r3, #0
 8005268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800526c:	4917      	ldr	r1, [pc, #92]	; (80052cc <main+0x1c4>)
 800526e:	4818      	ldr	r0, [pc, #96]	; (80052d0 <main+0x1c8>)
 8005270:	f00b fea7 	bl	8010fc2 <xTaskCreate>
  vTaskStartScheduler();
 8005274:	f00c f810 	bl	8011298 <vTaskStartScheduler>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8005278:	e7fe      	b.n	8005278 <main+0x170>
 800527a:	bf00      	nop
 800527c:	20002d04 	.word	0x20002d04
 8005280:	20002be4 	.word	0x20002be4
 8005284:	40020800 	.word	0x40020800
 8005288:	0098967f 	.word	0x0098967f
 800528c:	00000000 	.word	0x00000000
 8005290:	20000358 	.word	0x20000358
 8005294:	40020c00 	.word	0x40020c00
 8005298:	20002cbc 	.word	0x20002cbc
 800529c:	08017fbc 	.word	0x08017fbc
 80052a0:	08017fcc 	.word	0x08017fcc
 80052a4:	20002b30 	.word	0x20002b30
 80052a8:	20002b1c 	.word	0x20002b1c
 80052ac:	20002eb4 	.word	0x20002eb4
 80052b0:	20002b24 	.word	0x20002b24
 80052b4:	20002e6c 	.word	0x20002e6c
 80052b8:	20002d94 	.word	0x20002d94
 80052bc:	20000394 	.word	0x20000394
 80052c0:	20000390 	.word	0x20000390
 80052c4:	2000038c 	.word	0x2000038c
 80052c8:	200004cc 	.word	0x200004cc
 80052cc:	08017fd8 	.word	0x08017fd8
 80052d0:	08001229 	.word	0x08001229

080052d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b094      	sub	sp, #80	; 0x50
 80052d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052da:	f107 0320 	add.w	r3, r7, #32
 80052de:	2230      	movs	r2, #48	; 0x30
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f00f f843 	bl	801436e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052e8:	f107 030c 	add.w	r3, r7, #12
 80052ec:	2200      	movs	r2, #0
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	605a      	str	r2, [r3, #4]
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	60da      	str	r2, [r3, #12]
 80052f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80052f8:	2300      	movs	r3, #0
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	4b28      	ldr	r3, [pc, #160]	; (80053a0 <SystemClock_Config+0xcc>)
 80052fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005300:	4a27      	ldr	r2, [pc, #156]	; (80053a0 <SystemClock_Config+0xcc>)
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005306:	6413      	str	r3, [r2, #64]	; 0x40
 8005308:	4b25      	ldr	r3, [pc, #148]	; (80053a0 <SystemClock_Config+0xcc>)
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005310:	60bb      	str	r3, [r7, #8]
 8005312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005314:	2300      	movs	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	4b22      	ldr	r3, [pc, #136]	; (80053a4 <SystemClock_Config+0xd0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a21      	ldr	r2, [pc, #132]	; (80053a4 <SystemClock_Config+0xd0>)
 800531e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <SystemClock_Config+0xd0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005330:	2301      	movs	r3, #1
 8005332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800533a:	2302      	movs	r3, #2
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800533e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005344:	2308      	movs	r3, #8
 8005346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005348:	23a8      	movs	r3, #168	; 0xa8
 800534a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800534c:	2302      	movs	r3, #2
 800534e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005350:	2307      	movs	r3, #7
 8005352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005354:	f107 0320 	add.w	r3, r7, #32
 8005358:	4618      	mov	r0, r3
 800535a:	f003 f831 	bl	80083c0 <HAL_RCC_OscConfig>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005364:	f000 f88c 	bl	8005480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005368:	230f      	movs	r3, #15
 800536a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800536c:	2302      	movs	r3, #2
 800536e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800537a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800537e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005380:	f107 030c 	add.w	r3, r7, #12
 8005384:	2105      	movs	r1, #5
 8005386:	4618      	mov	r0, r3
 8005388:	f003 fa92 	bl	80088b0 <HAL_RCC_ClockConfig>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8005392:	f000 f875 	bl	8005480 <Error_Handler>
  }
}
 8005396:	bf00      	nop
 8005398:	3750      	adds	r7, #80	; 0x50
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40007000 	.word	0x40007000

080053a8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80053ac:	2200      	movs	r2, #0
 80053ae:	2105      	movs	r1, #5
 80053b0:	2037      	movs	r0, #55	; 0x37
 80053b2:	f001 ffd9 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053b6:	2037      	movs	r0, #55	; 0x37
 80053b8:	f001 fff2 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2105      	movs	r1, #5
 80053c0:	2028      	movs	r0, #40	; 0x28
 80053c2:	f001 ffd1 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80053c6:	2028      	movs	r0, #40	; 0x28
 80053c8:	f001 ffea 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80053cc:	2200      	movs	r2, #0
 80053ce:	2105      	movs	r1, #5
 80053d0:	201c      	movs	r0, #28
 80053d2:	f001 ffc9 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80053d6:	201c      	movs	r0, #28
 80053d8:	f001 ffe2 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80053dc:	2200      	movs	r2, #0
 80053de:	2105      	movs	r1, #5
 80053e0:	2017      	movs	r0, #23
 80053e2:	f001 ffc1 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80053e6:	2017      	movs	r0, #23
 80053e8:	f001 ffda 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80053ec:	2200      	movs	r2, #0
 80053ee:	2105      	movs	r1, #5
 80053f0:	200a      	movs	r0, #10
 80053f2:	f001 ffb9 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80053f6:	200a      	movs	r0, #10
 80053f8:	f001 ffd2 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80053fc:	2200      	movs	r2, #0
 80053fe:	2105      	movs	r1, #5
 8005400:	2008      	movs	r0, #8
 8005402:	f001 ffb1 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005406:	2008      	movs	r0, #8
 8005408:	f001 ffca 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800540c:	2200      	movs	r2, #0
 800540e:	2105      	movs	r1, #5
 8005410:	2007      	movs	r0, #7
 8005412:	f001 ffa9 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005416:	2007      	movs	r0, #7
 8005418:	f001 ffc2 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800541c:	2200      	movs	r2, #0
 800541e:	2105      	movs	r1, #5
 8005420:	2006      	movs	r0, #6
 8005422:	f001 ffa1 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005426:	2006      	movs	r0, #6
 8005428:	f001 ffba 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800542c:	2200      	movs	r2, #0
 800542e:	2105      	movs	r1, #5
 8005430:	2001      	movs	r0, #1
 8005432:	f001 ff99 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8005436:	2001      	movs	r0, #1
 8005438:	f001 ffb2 	bl	80073a0 <HAL_NVIC_EnableIRQ>
}
 800543c:	bf00      	nop
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART3)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a09      	ldr	r2, [pc, #36]	; (8005474 <HAL_UART_RxCpltCallback+0x34>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10b      	bne.n	800546a <HAL_UART_RxCpltCallback+0x2a>
   {
	   memcpy(dst,rxBuffer,sizeof(rxBuffer));
 8005452:	4a09      	ldr	r2, [pc, #36]	; (8005478 <HAL_UART_RxCpltCallback+0x38>)
 8005454:	4b09      	ldr	r3, [pc, #36]	; (800547c <HAL_UART_RxCpltCallback+0x3c>)
 8005456:	cb03      	ldmia	r3!, {r0, r1}
 8005458:	6010      	str	r0, [r2, #0]
 800545a:	6051      	str	r1, [r2, #4]
	   ReadLoadCellAVG();
 800545c:	f7fd fe7a 	bl	8003154 <ReadLoadCellAVG>
       HAL_UART_Receive_DMA(huart, rxBuffer, 8);
 8005460:	2208      	movs	r2, #8
 8005462:	4906      	ldr	r1, [pc, #24]	; (800547c <HAL_UART_RxCpltCallback+0x3c>)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f005 fa99 	bl	800a99c <HAL_UART_Receive_DMA>
   }

}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	40004800 	.word	0x40004800
 8005478:	200004c4 	.word	0x200004c4
 800547c:	20002b1c 	.word	0x20002b1c

08005480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005484:	b672      	cpsid	i
}
 8005486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005488:	e7fe      	b.n	8005488 <Error_Handler+0x8>
	...

0800548c <pwm>:
int PWM_FAST=98;
int PWM_SLOW=90;
int PWM_CLEANING = 50;

void pwm(PWM_Label label, float percentage)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	ed87 0a00 	vstr	s0, [r7]
 8005498:	71fb      	strb	r3, [r7, #7]
    if (percentage < 0.0f) percentage = 0.0f;
 800549a:	edd7 7a00 	vldr	s15, [r7]
 800549e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a6:	d502      	bpl.n	80054ae <pwm+0x22>
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	603b      	str	r3, [r7, #0]
    if (percentage > 100.0f) percentage = 100.0f;
 80054ae:	edd7 7a00 	vldr	s15, [r7]
 80054b2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80055a4 <pwm+0x118>
 80054b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	dd01      	ble.n	80054c4 <pwm+0x38>
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <pwm+0x11c>)
 80054c2:	603b      	str	r3, [r7, #0]

    uint32_t pulse = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]
    TIM_HandleTypeDef* htim = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
    uint32_t channel = 0;
 80054cc:	2300      	movs	r3, #0
 80054ce:	613b      	str	r3, [r7, #16]

    switch (label)
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	2b05      	cmp	r3, #5
 80054d4:	d861      	bhi.n	800559a <pwm+0x10e>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <pwm+0x50>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054f5 	.word	0x080054f5
 80054e0:	080054ff 	.word	0x080054ff
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005513 	.word	0x08005513
 80054ec:	0800551d 	.word	0x0800551d
 80054f0:	08005527 	.word	0x08005527
    {
        case ServoDC_M1_PWM:
            htim = &htim3;
 80054f4:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <pwm+0x120>)
 80054f6:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_3;
 80054f8:	2308      	movs	r3, #8
 80054fa:	613b      	str	r3, [r7, #16]
            break;
 80054fc:	e018      	b.n	8005530 <pwm+0xa4>

        case Clamp_M2_PWM:
            htim = &htim4;
 80054fe:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <pwm+0x124>)
 8005500:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 8005502:	2300      	movs	r3, #0
 8005504:	613b      	str	r3, [r7, #16]
            break;
 8005506:	e013      	b.n	8005530 <pwm+0xa4>

        case Spindle_M3_PWM:
            htim = &htim4;
 8005508:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <pwm+0x124>)
 800550a:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_2;
 800550c:	2304      	movs	r3, #4
 800550e:	613b      	str	r3, [r7, #16]
            break;
 8005510:	e00e      	b.n	8005530 <pwm+0xa4>

        case LCD_Contrast_PWM:
            htim = &htim8;
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <pwm+0x128>)
 8005514:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
            break;
 800551a:	e009      	b.n	8005530 <pwm+0xa4>

        case LCD_LED_PWM:
            htim = &htim8;
 800551c:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <pwm+0x128>)
 800551e:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_2;
 8005520:	2304      	movs	r3, #4
 8005522:	613b      	str	r3, [r7, #16]
            break;
 8005524:	e004      	b.n	8005530 <pwm+0xa4>
#ifdef Servo
        case Servo_PWM_OR_DC_M1_EncA_Interrupt:
            htim = &htim11;
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <pwm+0x12c>)
 8005528:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 800552a:	2300      	movs	r3, #0
 800552c:	613b      	str	r3, [r7, #16]
            break;
 800552e:	bf00      	nop
        default:
            return; // Invalid label
    }

    // Calculate the pulse value based on percentage
    pulse = (uint32_t)((percentage / 100.0f) * (htim->Init.Period + 1));
 8005530:	edd7 7a00 	vldr	s15, [r7]
 8005534:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80055a4 <pwm+0x118>
 8005538:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	3301      	adds	r3, #1
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005552:	ee17 3a90 	vmov	r3, s15
 8005556:	60fb      	str	r3, [r7, #12]

    // Set the pulse value for the corresponding channel
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <pwm+0xdc>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	635a      	str	r2, [r3, #52]	; 0x34
 8005566:	e013      	b.n	8005590 <pwm+0x104>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d104      	bne.n	8005578 <pwm+0xec>
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6393      	str	r3, [r2, #56]	; 0x38
 8005576:	e00b      	b.n	8005590 <pwm+0x104>
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b08      	cmp	r3, #8
 800557c:	d104      	bne.n	8005588 <pwm+0xfc>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	63d3      	str	r3, [r2, #60]	; 0x3c
 8005586:	e003      	b.n	8005590 <pwm+0x104>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6413      	str	r3, [r2, #64]	; 0x40

    // Start PWM signal generation if not already running
    HAL_TIM_PWM_Start(htim, channel);
 8005590:	6939      	ldr	r1, [r7, #16]
 8005592:	6978      	ldr	r0, [r7, #20]
 8005594:	f004 f94e 	bl	8009834 <HAL_TIM_PWM_Start>
 8005598:	e000      	b.n	800559c <pwm+0x110>
            return; // Invalid label
 800559a:	bf00      	nop
}
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	42c80000 	.word	0x42c80000
 80055a8:	42c80000 	.word	0x42c80000
 80055ac:	20002c2c 	.word	0x20002c2c
 80055b0:	20002c74 	.word	0x20002c74
 80055b4:	20002d4c 	.word	0x20002d4c
 80055b8:	20002ddc 	.word	0x20002ddc

080055bc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80055c0:	4b17      	ldr	r3, [pc, #92]	; (8005620 <MX_SPI1_Init+0x64>)
 80055c2:	4a18      	ldr	r2, [pc, #96]	; (8005624 <MX_SPI1_Init+0x68>)
 80055c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80055c6:	4b16      	ldr	r3, [pc, #88]	; (8005620 <MX_SPI1_Init+0x64>)
 80055c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80055cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80055ce:	4b14      	ldr	r3, [pc, #80]	; (8005620 <MX_SPI1_Init+0x64>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80055d4:	4b12      	ldr	r3, [pc, #72]	; (8005620 <MX_SPI1_Init+0x64>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <MX_SPI1_Init+0x64>)
 80055dc:	2200      	movs	r2, #0
 80055de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <MX_SPI1_Init+0x64>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <MX_SPI1_Init+0x64>)
 80055e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80055ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80055ee:	4b0c      	ldr	r3, [pc, #48]	; (8005620 <MX_SPI1_Init+0x64>)
 80055f0:	2220      	movs	r2, #32
 80055f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <MX_SPI1_Init+0x64>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <MX_SPI1_Init+0x64>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005600:	4b07      	ldr	r3, [pc, #28]	; (8005620 <MX_SPI1_Init+0x64>)
 8005602:	2200      	movs	r2, #0
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005606:	4b06      	ldr	r3, [pc, #24]	; (8005620 <MX_SPI1_Init+0x64>)
 8005608:	220a      	movs	r2, #10
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800560c:	4804      	ldr	r0, [pc, #16]	; (8005620 <MX_SPI1_Init+0x64>)
 800560e:	f003 fb9f 	bl	8008d50 <HAL_SPI_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005618:	f7ff ff32 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800561c:	bf00      	nop
 800561e:	bd80      	pop	{r7, pc}
 8005620:	20002b3c 	.word	0x20002b3c
 8005624:	40013000 	.word	0x40013000

08005628 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	605a      	str	r2, [r3, #4]
 800563a:	609a      	str	r2, [r3, #8]
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <HAL_SPI_MspInit+0xc0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d14a      	bne.n	80056e0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	4b27      	ldr	r3, [pc, #156]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 8005650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005652:	4a26      	ldr	r2, [pc, #152]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 8005654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005658:	6453      	str	r3, [r2, #68]	; 0x44
 800565a:	4b24      	ldr	r3, [pc, #144]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 800565c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005662:	613b      	str	r3, [r7, #16]
 8005664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	4a1f      	ldr	r2, [pc, #124]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 8005670:	f043 0301 	orr.w	r3, r3, #1
 8005674:	6313      	str	r3, [r2, #48]	; 0x30
 8005676:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	4a18      	ldr	r2, [pc, #96]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	6313      	str	r3, [r2, #48]	; 0x30
 8005692:	4b16      	ldr	r3, [pc, #88]	; (80056ec <HAL_SPI_MspInit+0xc4>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	60bb      	str	r3, [r7, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_nSS_Pin;
 800569e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a4:	2302      	movs	r3, #2
 80056a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ac:	2303      	movs	r3, #3
 80056ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80056b0:	2305      	movs	r3, #5
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_nSS_GPIO_Port, &GPIO_InitStruct);
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4619      	mov	r1, r3
 80056ba:	480d      	ldr	r0, [pc, #52]	; (80056f0 <HAL_SPI_MspInit+0xc8>)
 80056bc:	f002 fc18 	bl	8007ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80056c0:	2338      	movs	r3, #56	; 0x38
 80056c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c4:	2302      	movs	r3, #2
 80056c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056cc:	2303      	movs	r3, #3
 80056ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80056d0:	2305      	movs	r3, #5
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d4:	f107 0314 	add.w	r3, r7, #20
 80056d8:	4619      	mov	r1, r3
 80056da:	4806      	ldr	r0, [pc, #24]	; (80056f4 <HAL_SPI_MspInit+0xcc>)
 80056dc:	f002 fc08 	bl	8007ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80056e0:	bf00      	nop
 80056e2:	3728      	adds	r7, #40	; 0x28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40013000 	.word	0x40013000
 80056ec:	40023800 	.word	0x40023800
 80056f0:	40020000 	.word	0x40020000
 80056f4:	40020400 	.word	0x40020400

080056f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056fe:	2300      	movs	r3, #0
 8005700:	607b      	str	r3, [r7, #4]
 8005702:	4b1a      	ldr	r3, [pc, #104]	; (800576c <HAL_MspInit+0x74>)
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_MspInit+0x74>)
 8005708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800570c:	6453      	str	r3, [r2, #68]	; 0x44
 800570e:	4b17      	ldr	r3, [pc, #92]	; (800576c <HAL_MspInit+0x74>)
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800571a:	2300      	movs	r3, #0
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <HAL_MspInit+0x74>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <HAL_MspInit+0x74>)
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
 800572a:	4b10      	ldr	r3, [pc, #64]	; (800576c <HAL_MspInit+0x74>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005736:	2200      	movs	r2, #0
 8005738:	210f      	movs	r1, #15
 800573a:	f06f 0001 	mvn.w	r0, #1
 800573e:	f001 fe13 	bl	8007368 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8005742:	2200      	movs	r2, #0
 8005744:	2105      	movs	r1, #5
 8005746:	2004      	movs	r0, #4
 8005748:	f001 fe0e 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800574c:	2004      	movs	r0, #4
 800574e:	f001 fe27 	bl	80073a0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8005752:	2200      	movs	r2, #0
 8005754:	2105      	movs	r1, #5
 8005756:	2005      	movs	r0, #5
 8005758:	f001 fe06 	bl	8007368 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800575c:	2005      	movs	r0, #5
 800575e:	f001 fe1f 	bl	80073a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005762:	bf00      	nop
 8005764:	3708      	adds	r7, #8
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40023800 	.word	0x40023800

08005770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b08c      	sub	sp, #48	; 0x30
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005780:	2300      	movs	r3, #0
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <HAL_InitTick+0xd4>)
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	4a2e      	ldr	r2, [pc, #184]	; (8005844 <HAL_InitTick+0xd4>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6453      	str	r3, [r2, #68]	; 0x44
 8005790:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <HAL_InitTick+0xd4>)
 8005792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800579c:	f107 020c 	add.w	r2, r7, #12
 80057a0:	f107 0310 	add.w	r3, r7, #16
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 faa0 	bl	8008cec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80057ac:	f003 fa8a 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 80057b0:	4603      	mov	r3, r0
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b8:	4a23      	ldr	r2, [pc, #140]	; (8005848 <HAL_InitTick+0xd8>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0c9b      	lsrs	r3, r3, #18
 80057c0:	3b01      	subs	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80057c4:	4b21      	ldr	r3, [pc, #132]	; (800584c <HAL_InitTick+0xdc>)
 80057c6:	4a22      	ldr	r2, [pc, #136]	; (8005850 <HAL_InitTick+0xe0>)
 80057c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80057ca:	4b20      	ldr	r3, [pc, #128]	; (800584c <HAL_InitTick+0xdc>)
 80057cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80057d2:	4a1e      	ldr	r2, [pc, #120]	; (800584c <HAL_InitTick+0xdc>)
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80057d8:	4b1c      	ldr	r3, [pc, #112]	; (800584c <HAL_InitTick+0xdc>)
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057de:	4b1b      	ldr	r3, [pc, #108]	; (800584c <HAL_InitTick+0xdc>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057e4:	4b19      	ldr	r3, [pc, #100]	; (800584c <HAL_InitTick+0xdc>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80057ea:	4818      	ldr	r0, [pc, #96]	; (800584c <HAL_InitTick+0xdc>)
 80057ec:	f003 ff08 	bl	8009600 <HAL_TIM_Base_Init>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80057f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d11b      	bne.n	8005836 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80057fe:	4813      	ldr	r0, [pc, #76]	; (800584c <HAL_InitTick+0xdc>)
 8005800:	f003 ff4e 	bl	80096a0 <HAL_TIM_Base_Start_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800580a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800580e:	2b00      	cmp	r3, #0
 8005810:	d111      	bne.n	8005836 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005812:	2019      	movs	r0, #25
 8005814:	f001 fdc4 	bl	80073a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b0f      	cmp	r3, #15
 800581c:	d808      	bhi.n	8005830 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800581e:	2200      	movs	r2, #0
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	2019      	movs	r0, #25
 8005824:	f001 fda0 	bl	8007368 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005828:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <HAL_InitTick+0xe4>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e002      	b.n	8005836 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800583a:	4618      	mov	r0, r3
 800583c:	3730      	adds	r7, #48	; 0x30
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800
 8005848:	431bde83 	.word	0x431bde83
 800584c:	20002b94 	.word	0x20002b94
 8005850:	40010000 	.word	0x40010000
 8005854:	20000148 	.word	0x20000148

08005858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800585c:	e7fe      	b.n	800585c <NMI_Handler+0x4>

0800585e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800585e:	b480      	push	{r7}
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005862:	e7fe      	b.n	8005862 <HardFault_Handler+0x4>

08005864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005868:	e7fe      	b.n	8005868 <MemManage_Handler+0x4>

0800586a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800586e:	e7fe      	b.n	800586e <BusFault_Handler+0x4>

08005870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005874:	e7fe      	b.n	8005874 <UsageFault_Handler+0x4>

08005876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005876:	b480      	push	{r7}
 8005878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8005888:	f002 fd80 	bl	800838c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800588c:	bf00      	nop
 800588e:	bd80      	pop	{r7, pc}

08005890 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8005894:	f002 f994 	bl	8007bc0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8005898:	bf00      	nop
 800589a:	bd80      	pop	{r7, pc}

0800589c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800589c:	b480      	push	{r7}
 800589e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80058a0:	bf00      	nop
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_Prox_Interrupt_Pin);
 80058ae:	2001      	movs	r0, #1
 80058b0:	f002 fcec 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80058b4:	bf00      	nop
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_EncB__Interrupt_Pin);
 80058bc:	2002      	movs	r0, #2
 80058be:	f002 fce5 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Clean_Interrupt_PullUp_Pin);
 80058ca:	2004      	movs	r0, #4
 80058cc:	f002 fcde 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80058d0:	bf00      	nop
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Power_Interrupt_PullUp_Pin);
 80058d8:	2010      	movs	r0, #16
 80058da:	f002 fcd7 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80058e8:	4802      	ldr	r0, [pc, #8]	; (80058f4 <DMA1_Stream1_IRQHandler+0x10>)
 80058ea:	f001 feff 	bl	80076ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20002f5c 	.word	0x20002f5c

080058f8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80058fc:	4802      	ldr	r0, [pc, #8]	; (8005908 <DMA1_Stream3_IRQHandler+0x10>)
 80058fe:	f001 fef5 	bl	80076ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20002fbc 	.word	0x20002fbc

0800590c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_EncA_Interrupt_Pin);
 8005910:	2020      	movs	r0, #32
 8005912:	f002 fcbb 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_EncA_Interrupt_Pin);
 8005916:	2040      	movs	r0, #64	; 0x40
 8005918:	f002 fcb8 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ServoDC_M1_Prox_Interrupt_Pin);
 800591c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005920:	f002 fcb4 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
//*  This  part will only work if we are using DC Motor instead of Servo Motor:
  #ifndef Servo
  HAL_GPIO_EXTI_IRQHandler(Servo_PWM_OR_DC_M1_EncA_Interrupt_Pin);
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}

08005928 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800592c:	4803      	ldr	r0, [pc, #12]	; (800593c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800592e:	f004 f849 	bl	80099c4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005932:	4803      	ldr	r0, [pc, #12]	; (8005940 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005934:	f004 f846 	bl	80099c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005938:	bf00      	nop
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20002b94 	.word	0x20002b94
 8005940:	20002d94 	.word	0x20002d94

08005944 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <TIM2_IRQHandler+0x10>)
 800594a:	f004 f83b 	bl	80099c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20002be4 	.word	0x20002be4

08005958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <USART1_IRQHandler+0x10>)
 800595e:	f005 f843 	bl	800a9e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	20002e6c 	.word	0x20002e6c

0800596c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <USART3_IRQHandler+0x10>)
 8005972:	f005 f839 	bl	800a9e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20002eb4 	.word	0x20002eb4

08005980 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_Prox_Interrupt_Pin);
 8005984:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005988:	f002 fc80 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USBFlag_Interrupt_PullUp_Pin);
 800598c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005990:	f002 fc7c 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_EncB_Interrupt_Pin);
 8005994:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005998:	f002 fc78 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ServoDC_M1_EncB_Interrupt_Pin);
 800599c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80059a0:	f002 fc74 	bl	800828c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80059ac:	4802      	ldr	r0, [pc, #8]	; (80059b8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80059ae:	f004 f809 	bl	80099c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80059b2:	bf00      	nop
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20002d4c 	.word	0x20002d4c

080059bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80059c0:	4802      	ldr	r0, [pc, #8]	; (80059cc <TIM6_DAC_IRQHandler+0x10>)
 80059c2:	f003 ffff 	bl	80099c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20002cbc 	.word	0x20002cbc

080059d0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80059d4:	4802      	ldr	r0, [pc, #8]	; (80059e0 <TIM7_IRQHandler+0x10>)
 80059d6:	f003 fff5 	bl	80099c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80059da:	bf00      	nop
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20002d04 	.word	0x20002d04

080059e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80059e8:	4802      	ldr	r0, [pc, #8]	; (80059f4 <DMA2_Stream2_IRQHandler+0x10>)
 80059ea:	f001 fe7f 	bl	80076ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20002efc 	.word	0x20002efc

080059f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  return 1;
 80059fc:	2301      	movs	r3, #1
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <_kill>:

int _kill(int pid, int sig)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005a12:	f00e fd23 	bl	801445c <__errno>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2216      	movs	r2, #22
 8005a1a:	601a      	str	r2, [r3, #0]
  return -1;
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_exit>:

void _exit (int status)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005a30:	f04f 31ff 	mov.w	r1, #4294967295
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7ff ffe7 	bl	8005a08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005a3a:	e7fe      	b.n	8005a3a <_exit+0x12>

08005a3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e00a      	b.n	8005a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005a4e:	f3af 8000 	nop.w
 8005a52:	4601      	mov	r1, r0
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	60ba      	str	r2, [r7, #8]
 8005a5a:	b2ca      	uxtb	r2, r1
 8005a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	3301      	adds	r3, #1
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	dbf0      	blt.n	8005a4e <_read+0x12>
  }

  return len;
 8005a6c:	687b      	ldr	r3, [r7, #4]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a82:	2300      	movs	r3, #0
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e009      	b.n	8005a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	60ba      	str	r2, [r7, #8]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	dbf1      	blt.n	8005a88 <_write+0x12>
  }
  return len;
 8005aa4:	687b      	ldr	r3, [r7, #4]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <_close>:

int _close(int file)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <_isatty>:

int _isatty(int file)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005aee:	2301      	movs	r3, #1
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b20:	4a14      	ldr	r2, [pc, #80]	; (8005b74 <_sbrk+0x5c>)
 8005b22:	4b15      	ldr	r3, [pc, #84]	; (8005b78 <_sbrk+0x60>)
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005b2c:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <_sbrk+0x64>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d102      	bne.n	8005b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005b34:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <_sbrk+0x64>)
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <_sbrk+0x68>)
 8005b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005b3a:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <_sbrk+0x64>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d207      	bcs.n	8005b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005b48:	f00e fc88 	bl	801445c <__errno>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	220c      	movs	r2, #12
 8005b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	e009      	b.n	8005b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005b58:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <_sbrk+0x64>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_sbrk+0x64>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <_sbrk+0x64>)
 8005b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20020000 	.word	0x20020000
 8005b78:	00000400 	.word	0x00000400
 8005b7c:	20002be0 	.word	0x20002be0
 8005b80:	20007540 	.word	0x20007540

08005b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b88:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <SystemInit+0x20>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <SystemInit+0x20>)
 8005b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	e000ed00 	.word	0xe000ed00

08005ba8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	609a      	str	r2, [r3, #8]
 8005bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005bc4:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005bc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005bca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16799;
 8005bcc:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005bce:	f244 129f 	movw	r2, #16799	; 0x419f
 8005bd2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bd4:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8005bda:	4b19      	ldr	r3, [pc, #100]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005bdc:	f241 3287 	movw	r2, #4999	; 0x1387
 8005be0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005be2:	4b17      	ldr	r3, [pc, #92]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005be8:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bee:	4814      	ldr	r0, [pc, #80]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005bf0:	f003 fd06 	bl	8009600 <HAL_TIM_Base_Init>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005bfa:	f7ff fc41 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	480d      	ldr	r0, [pc, #52]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005c0c:	f004 f88c 	bl	8009d28 <HAL_TIM_ConfigClockSource>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005c16:	f7ff fc33 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005c22:	463b      	mov	r3, r7
 8005c24:	4619      	mov	r1, r3
 8005c26:	4806      	ldr	r0, [pc, #24]	; (8005c40 <MX_TIM2_Init+0x98>)
 8005c28:	f004 fc8a 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005c32:	f7ff fc25 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005c36:	bf00      	nop
 8005c38:	3718      	adds	r7, #24
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20002be4 	.word	0x20002be4

08005c44 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	; 0x38
 8005c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
/**  ServoDC Connector PWM Timer Configuration for Servo*/
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c58:	f107 0320 	add.w	r3, r7, #32
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c62:	1d3b      	adds	r3, r7, #4
 8005c64:	2200      	movs	r2, #0
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	605a      	str	r2, [r3, #4]
 8005c6a:	609a      	str	r2, [r3, #8]
 8005c6c:	60da      	str	r2, [r3, #12]
 8005c6e:	611a      	str	r2, [r3, #16]
 8005c70:	615a      	str	r2, [r3, #20]
 8005c72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c74:	4b2c      	ldr	r3, [pc, #176]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c76:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <MX_TIM3_Init+0xe8>)
 8005c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8005c7a:	4b2b      	ldr	r3, [pc, #172]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c7c:	2253      	movs	r2, #83	; 0x53
 8005c7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c80:	4b29      	ldr	r3, [pc, #164]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c82:	2200      	movs	r2, #0
 8005c84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8005c86:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c88:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005c8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c8e:	4b26      	ldr	r3, [pc, #152]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c94:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005c9a:	4823      	ldr	r0, [pc, #140]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005c9c:	f003 fcb0 	bl	8009600 <HAL_TIM_Base_Init>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8005ca6:	f7ff fbeb 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005caa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005cb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	481c      	ldr	r0, [pc, #112]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005cb8:	f004 f836 	bl	8009d28 <HAL_TIM_ConfigClockSource>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8005cc2:	f7ff fbdd 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005cc6:	4818      	ldr	r0, [pc, #96]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005cc8:	f003 fd5a 	bl	8009780 <HAL_TIM_PWM_Init>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8005cd2:	f7ff fbd5 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005cde:	f107 0320 	add.w	r3, r7, #32
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4810      	ldr	r0, [pc, #64]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005ce6:	f004 fc2b 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8005cf0:	f7ff fbc6 	bl	8005480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cf4:	2360      	movs	r3, #96	; 0x60
 8005cf6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005d04:	1d3b      	adds	r3, r7, #4
 8005d06:	2208      	movs	r2, #8
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4807      	ldr	r0, [pc, #28]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005d0c:	f003 ff4a 	bl	8009ba4 <HAL_TIM_PWM_ConfigChannel>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8005d16:	f7ff fbb3 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005d1a:	4803      	ldr	r0, [pc, #12]	; (8005d28 <MX_TIM3_Init+0xe4>)
 8005d1c:	f000 fae4 	bl	80062e8 <HAL_TIM_MspPostInit>

}
 8005d20:	bf00      	nop
 8005d22:	3738      	adds	r7, #56	; 0x38
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20002c2c 	.word	0x20002c2c
 8005d2c:	40000400 	.word	0x40000400

08005d30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08e      	sub	sp, #56	; 0x38
 8005d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
/**  DC Clamp Motor and DC Spindle Motor PWM Timer Configration*/
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	609a      	str	r2, [r3, #8]
 8005d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d44:	f107 0320 	add.w	r3, r7, #32
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d4e:	1d3b      	adds	r3, r7, #4
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	609a      	str	r2, [r3, #8]
 8005d58:	60da      	str	r2, [r3, #12]
 8005d5a:	611a      	str	r2, [r3, #16]
 8005d5c:	615a      	str	r2, [r3, #20]
 8005d5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005d60:	4b32      	ldr	r3, [pc, #200]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d62:	4a33      	ldr	r2, [pc, #204]	; (8005e30 <MX_TIM4_Init+0x100>)
 8005d64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8005d66:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d68:	2253      	movs	r2, #83	; 0x53
 8005d6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d6c:	4b2f      	ldr	r3, [pc, #188]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8005d72:	4b2e      	ldr	r3, [pc, #184]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d74:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005d78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005d86:	4829      	ldr	r0, [pc, #164]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005d88:	f003 fc3a 	bl	8009600 <HAL_TIM_Base_Init>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005d92:	f7ff fb75 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005d9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005da0:	4619      	mov	r1, r3
 8005da2:	4822      	ldr	r0, [pc, #136]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005da4:	f003 ffc0 	bl	8009d28 <HAL_TIM_ConfigClockSource>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8005dae:	f7ff fb67 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005db2:	481e      	ldr	r0, [pc, #120]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005db4:	f003 fce4 	bl	8009780 <HAL_TIM_PWM_Init>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8005dbe:	f7ff fb5f 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005dca:	f107 0320 	add.w	r3, r7, #32
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4816      	ldr	r0, [pc, #88]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005dd2:	f004 fbb5 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8005ddc:	f7ff fb50 	bl	8005480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005de0:	2360      	movs	r3, #96	; 0x60
 8005de2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005df0:	1d3b      	adds	r3, r7, #4
 8005df2:	2200      	movs	r2, #0
 8005df4:	4619      	mov	r1, r3
 8005df6:	480d      	ldr	r0, [pc, #52]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005df8:	f003 fed4 	bl	8009ba4 <HAL_TIM_PWM_ConfigChannel>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005e02:	f7ff fb3d 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005e06:	1d3b      	adds	r3, r7, #4
 8005e08:	2204      	movs	r2, #4
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4807      	ldr	r0, [pc, #28]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005e0e:	f003 fec9 	bl	8009ba4 <HAL_TIM_PWM_ConfigChannel>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8005e18:	f7ff fb32 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005e1c:	4803      	ldr	r0, [pc, #12]	; (8005e2c <MX_TIM4_Init+0xfc>)
 8005e1e:	f000 fa63 	bl	80062e8 <HAL_TIM_MspPostInit>

}
 8005e22:	bf00      	nop
 8005e24:	3738      	adds	r7, #56	; 0x38
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20002c74 	.word	0x20002c74
 8005e30:	40000800 	.word	0x40000800

08005e34 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e3a:	463b      	mov	r3, r7
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005e42:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e44:	4a15      	ldr	r2, [pc, #84]	; (8005e9c <MX_TIM6_Init+0x68>)
 8005e46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e4a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005e4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e50:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e58:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005e5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e5e:	4b0e      	ldr	r3, [pc, #56]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005e64:	480c      	ldr	r0, [pc, #48]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e66:	f003 fbcb 	bl	8009600 <HAL_TIM_Base_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005e70:	f7ff fb06 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4805      	ldr	r0, [pc, #20]	; (8005e98 <MX_TIM6_Init+0x64>)
 8005e82:	f004 fb5d 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8005e8c:	f7ff faf8 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20002cbc 	.word	0x20002cbc
 8005e9c:	40001000 	.word	0x40001000

08005ea0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005eb0:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <MX_TIM7_Init+0x68>)
 8005eb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8005eb4:	4b13      	ldr	r3, [pc, #76]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005eb6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8005eba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ebc:	4b11      	ldr	r3, [pc, #68]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8005ec2:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005ec4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ec8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005eca:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005ed0:	480c      	ldr	r0, [pc, #48]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005ed2:	f003 fb95 	bl	8009600 <HAL_TIM_Base_Init>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005edc:	f7ff fad0 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005ee8:	463b      	mov	r3, r7
 8005eea:	4619      	mov	r1, r3
 8005eec:	4805      	ldr	r0, [pc, #20]	; (8005f04 <MX_TIM7_Init+0x64>)
 8005eee:	f004 fb27 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005ef8:	f7ff fac2 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20002d04 	.word	0x20002d04
 8005f08:	40001400 	.word	0x40001400

08005f0c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b096      	sub	sp, #88	; 0x58
 8005f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
/** LCD PWM Timer Configurations*/
  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	609a      	str	r2, [r3, #8]
 8005f36:	60da      	str	r2, [r3, #12]
 8005f38:	611a      	str	r2, [r3, #16]
 8005f3a:	615a      	str	r2, [r3, #20]
 8005f3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	2220      	movs	r2, #32
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f00e fa12 	bl	801436e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005f4a:	4b44      	ldr	r3, [pc, #272]	; (800605c <MX_TIM8_Init+0x150>)
 8005f4c:	4a44      	ldr	r2, [pc, #272]	; (8006060 <MX_TIM8_Init+0x154>)
 8005f4e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8005f50:	4b42      	ldr	r3, [pc, #264]	; (800605c <MX_TIM8_Init+0x150>)
 8005f52:	2253      	movs	r2, #83	; 0x53
 8005f54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f56:	4b41      	ldr	r3, [pc, #260]	; (800605c <MX_TIM8_Init+0x150>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 8005f5c:	4b3f      	ldr	r3, [pc, #252]	; (800605c <MX_TIM8_Init+0x150>)
 8005f5e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8005f62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <MX_TIM8_Init+0x150>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005f6a:	4b3c      	ldr	r3, [pc, #240]	; (800605c <MX_TIM8_Init+0x150>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f70:	4b3a      	ldr	r3, [pc, #232]	; (800605c <MX_TIM8_Init+0x150>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005f76:	4839      	ldr	r0, [pc, #228]	; (800605c <MX_TIM8_Init+0x150>)
 8005f78:	f003 fb42 	bl	8009600 <HAL_TIM_Base_Init>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8005f82:	f7ff fa7d 	bl	8005480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005f8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f90:	4619      	mov	r1, r3
 8005f92:	4832      	ldr	r0, [pc, #200]	; (800605c <MX_TIM8_Init+0x150>)
 8005f94:	f003 fec8 	bl	8009d28 <HAL_TIM_ConfigClockSource>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8005f9e:	f7ff fa6f 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005fa2:	482e      	ldr	r0, [pc, #184]	; (800605c <MX_TIM8_Init+0x150>)
 8005fa4:	f003 fbec 	bl	8009780 <HAL_TIM_PWM_Init>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8005fae:	f7ff fa67 	bl	8005480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005fba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4826      	ldr	r0, [pc, #152]	; (800605c <MX_TIM8_Init+0x150>)
 8005fc2:	f004 fabd 	bl	800a540 <HAL_TIMEx_MasterConfigSynchronization>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8005fcc:	f7ff fa58 	bl	8005480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fd0:	2360      	movs	r3, #96	; 0x60
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4819      	ldr	r0, [pc, #100]	; (800605c <MX_TIM8_Init+0x150>)
 8005ff6:	f003 fdd5 	bl	8009ba4 <HAL_TIM_PWM_ConfigChannel>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8006000:	f7ff fa3e 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006008:	2204      	movs	r2, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4813      	ldr	r0, [pc, #76]	; (800605c <MX_TIM8_Init+0x150>)
 800600e:	f003 fdc9 	bl	8009ba4 <HAL_TIM_PWM_ConfigChannel>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8006018:	f7ff fa32 	bl	8005480 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800601c:	2300      	movs	r3, #0
 800601e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006020:	2300      	movs	r3, #0
 8006022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800603a:	1d3b      	adds	r3, r7, #4
 800603c:	4619      	mov	r1, r3
 800603e:	4807      	ldr	r0, [pc, #28]	; (800605c <MX_TIM8_Init+0x150>)
 8006040:	f004 fafa 	bl	800a638 <HAL_TIMEx_ConfigBreakDeadTime>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800604a:	f7ff fa19 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800604e:	4803      	ldr	r0, [pc, #12]	; (800605c <MX_TIM8_Init+0x150>)
 8006050:	f000 f94a 	bl	80062e8 <HAL_TIM_MspPostInit>

}
 8006054:	bf00      	nop
 8006056:	3758      	adds	r7, #88	; 0x58
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	20002d4c 	.word	0x20002d4c
 8006060:	40010400 	.word	0x40010400

08006064 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8006068:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <MX_TIM10_Init+0x40>)
 800606a:	4a0f      	ldr	r2, [pc, #60]	; (80060a8 <MX_TIM10_Init+0x44>)
 800606c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 65535;
 800606e:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <MX_TIM10_Init+0x40>)
 8006070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006074:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006076:	4b0b      	ldr	r3, [pc, #44]	; (80060a4 <MX_TIM10_Init+0x40>)
 8006078:	2200      	movs	r2, #0
 800607a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 270;
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <MX_TIM10_Init+0x40>)
 800607e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8006082:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006084:	4b07      	ldr	r3, [pc, #28]	; (80060a4 <MX_TIM10_Init+0x40>)
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <MX_TIM10_Init+0x40>)
 800608c:	2200      	movs	r2, #0
 800608e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006090:	4804      	ldr	r0, [pc, #16]	; (80060a4 <MX_TIM10_Init+0x40>)
 8006092:	f003 fab5 	bl	8009600 <HAL_TIM_Base_Init>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800609c:	f7ff f9f0 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20002d94 	.word	0x20002d94
 80060a8:	40014400 	.word	0x40014400

080060ac <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
/**  Servo Motor PWM Timer Configuration */
  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	609a      	str	r2, [r3, #8]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	611a      	str	r2, [r3, #16]
 80060c0:	615a      	str	r2, [r3, #20]
 80060c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80060c4:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <MX_TIM11_Init+0x94>)
 80060c6:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <MX_TIM11_Init+0x98>)
 80060c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 509;
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <MX_TIM11_Init+0x94>)
 80060cc:	f240 12fd 	movw	r2, #509	; 0x1fd
 80060d0:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <MX_TIM11_Init+0x94>)
 80060d4:	2200      	movs	r2, #0
 80060d6:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 3029;
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <MX_TIM11_Init+0x94>)
 80060da:	f640 32d5 	movw	r2, #3029	; 0xbd5
 80060de:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <MX_TIM11_Init+0x94>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060e6:	4b16      	ldr	r3, [pc, #88]	; (8006140 <MX_TIM11_Init+0x94>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80060ec:	4814      	ldr	r0, [pc, #80]	; (8006140 <MX_TIM11_Init+0x94>)
 80060ee:	f003 fa87 	bl	8009600 <HAL_TIM_Base_Init>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 80060f8:	f7ff f9c2 	bl	8005480 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80060fc:	4810      	ldr	r0, [pc, #64]	; (8006140 <MX_TIM11_Init+0x94>)
 80060fe:	f003 fb3f 	bl	8009780 <HAL_TIM_PWM_Init>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8006108:	f7ff f9ba 	bl	8005480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800610c:	2360      	movs	r3, #96	; 0x60
 800610e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006110:	2300      	movs	r3, #0
 8006112:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006118:	2300      	movs	r3, #0
 800611a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800611c:	1d3b      	adds	r3, r7, #4
 800611e:	2200      	movs	r2, #0
 8006120:	4619      	mov	r1, r3
 8006122:	4807      	ldr	r0, [pc, #28]	; (8006140 <MX_TIM11_Init+0x94>)
 8006124:	f003 fd3e 	bl	8009ba4 <HAL_TIM_PWM_ConfigChannel>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800612e:	f7ff f9a7 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006132:	4803      	ldr	r0, [pc, #12]	; (8006140 <MX_TIM11_Init+0x94>)
 8006134:	f000 f8d8 	bl	80062e8 <HAL_TIM_MspPostInit>

}
 8006138:	bf00      	nop
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20002ddc 	.word	0x20002ddc
 8006144:	40014800 	.word	0x40014800

08006148 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
 800615e:	4b5a      	ldr	r3, [pc, #360]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	4a59      	ldr	r2, [pc, #356]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	6413      	str	r3, [r2, #64]	; 0x40
 800616a:	4b57      	ldr	r3, [pc, #348]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8006176:	e0a2      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a53      	ldr	r2, [pc, #332]	; (80062cc <HAL_TIM_Base_MspInit+0x184>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d10e      	bne.n	80061a0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	623b      	str	r3, [r7, #32]
 8006186:	4b50      	ldr	r3, [pc, #320]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	4a4f      	ldr	r2, [pc, #316]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 800618c:	f043 0302 	orr.w	r3, r3, #2
 8006190:	6413      	str	r3, [r2, #64]	; 0x40
 8006192:	4b4d      	ldr	r3, [pc, #308]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	623b      	str	r3, [r7, #32]
 800619c:	6a3b      	ldr	r3, [r7, #32]
}
 800619e:	e08e      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a4a      	ldr	r2, [pc, #296]	; (80062d0 <HAL_TIM_Base_MspInit+0x188>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d10e      	bne.n	80061c8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	4b46      	ldr	r3, [pc, #280]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	4a45      	ldr	r2, [pc, #276]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80061b4:	f043 0304 	orr.w	r3, r3, #4
 80061b8:	6413      	str	r3, [r2, #64]	; 0x40
 80061ba:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	69fb      	ldr	r3, [r7, #28]
}
 80061c6:	e07a      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a41      	ldr	r2, [pc, #260]	; (80062d4 <HAL_TIM_Base_MspInit+0x18c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d116      	bne.n	8006200 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	4a3b      	ldr	r2, [pc, #236]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80061dc:	f043 0310 	orr.w	r3, r3, #16
 80061e0:	6413      	str	r3, [r2, #64]	; 0x40
 80061e2:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	61bb      	str	r3, [r7, #24]
 80061ec:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2105      	movs	r1, #5
 80061f2:	2036      	movs	r0, #54	; 0x36
 80061f4:	f001 f8b8 	bl	8007368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80061f8:	2036      	movs	r0, #54	; 0x36
 80061fa:	f001 f8d1 	bl	80073a0 <HAL_NVIC_EnableIRQ>
}
 80061fe:	e05e      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a34      	ldr	r2, [pc, #208]	; (80062d8 <HAL_TIM_Base_MspInit+0x190>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d10e      	bne.n	8006228 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	4b2e      	ldr	r3, [pc, #184]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	4a2d      	ldr	r2, [pc, #180]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006214:	f043 0320 	orr.w	r3, r3, #32
 8006218:	6413      	str	r3, [r2, #64]	; 0x40
 800621a:	4b2b      	ldr	r3, [pc, #172]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 800621c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	697b      	ldr	r3, [r7, #20]
}
 8006226:	e04a      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <HAL_TIM_Base_MspInit+0x194>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d116      	bne.n	8006260 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	4b24      	ldr	r3, [pc, #144]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	4a23      	ldr	r2, [pc, #140]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 800623c:	f043 0302 	orr.w	r3, r3, #2
 8006240:	6453      	str	r3, [r2, #68]	; 0x44
 8006242:	4b21      	ldr	r3, [pc, #132]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 800624e:	2200      	movs	r2, #0
 8006250:	2105      	movs	r1, #5
 8006252:	202d      	movs	r0, #45	; 0x2d
 8006254:	f001 f888 	bl	8007368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8006258:	202d      	movs	r0, #45	; 0x2d
 800625a:	f001 f8a1 	bl	80073a0 <HAL_NVIC_EnableIRQ>
}
 800625e:	e02e      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM10)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a1e      	ldr	r2, [pc, #120]	; (80062e0 <HAL_TIM_Base_MspInit+0x198>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d116      	bne.n	8006298 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b16      	ldr	r3, [pc, #88]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 8006274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006278:	6453      	str	r3, [r2, #68]	; 0x44
 800627a:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8006286:	2200      	movs	r2, #0
 8006288:	210f      	movs	r1, #15
 800628a:	2019      	movs	r0, #25
 800628c:	f001 f86c 	bl	8007368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006290:	2019      	movs	r0, #25
 8006292:	f001 f885 	bl	80073a0 <HAL_NVIC_EnableIRQ>
}
 8006296:	e012      	b.n	80062be <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM11)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <HAL_TIM_Base_MspInit+0x19c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10d      	bne.n	80062be <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	4b08      	ldr	r3, [pc, #32]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	4a07      	ldr	r2, [pc, #28]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80062ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062b0:	6453      	str	r3, [r2, #68]	; 0x44
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <HAL_TIM_Base_MspInit+0x180>)
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]
}
 80062be:	bf00      	nop
 80062c0:	3728      	adds	r7, #40	; 0x28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40001000 	.word	0x40001000
 80062d8:	40001400 	.word	0x40001400
 80062dc:	40010400 	.word	0x40010400
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f0:	f107 031c 	add.w	r3, r7, #28
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	609a      	str	r2, [r3, #8]
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a49      	ldr	r2, [pc, #292]	; (800642c <HAL_TIM_MspPostInit+0x144>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d11f      	bne.n	800634a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800630a:	2300      	movs	r3, #0
 800630c:	61bb      	str	r3, [r7, #24]
 800630e:	4b48      	ldr	r3, [pc, #288]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	4a47      	ldr	r2, [pc, #284]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 8006314:	f043 0304 	orr.w	r3, r3, #4
 8006318:	6313      	str	r3, [r2, #48]	; 0x30
 800631a:	4b45      	ldr	r3, [pc, #276]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 800631c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631e:	f003 0304 	and.w	r3, r3, #4
 8006322:	61bb      	str	r3, [r7, #24]
 8006324:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ServoDC_M1_PWM_Pin;
 8006326:	f44f 7380 	mov.w	r3, #256	; 0x100
 800632a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800632c:	2302      	movs	r3, #2
 800632e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006330:	2300      	movs	r3, #0
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006334:	2300      	movs	r3, #0
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006338:	2302      	movs	r3, #2
 800633a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ServoDC_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 800633c:	f107 031c 	add.w	r3, r7, #28
 8006340:	4619      	mov	r1, r3
 8006342:	483c      	ldr	r0, [pc, #240]	; (8006434 <HAL_TIM_MspPostInit+0x14c>)
 8006344:	f001 fdd4 	bl	8007ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006348:	e06c      	b.n	8006424 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <HAL_TIM_MspPostInit+0x150>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d11f      	bne.n	8006394 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	4b35      	ldr	r3, [pc, #212]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	4a34      	ldr	r2, [pc, #208]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 800635e:	f043 0308 	orr.w	r3, r3, #8
 8006362:	6313      	str	r3, [r2, #48]	; 0x30
 8006364:	4b32      	ldr	r3, [pc, #200]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Clamp_M2_PWM_Pin|Spindle_M3_PWM_Pin;
 8006370:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006376:	2302      	movs	r3, #2
 8006378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637a:	2300      	movs	r3, #0
 800637c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800637e:	2300      	movs	r3, #0
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006382:	2302      	movs	r3, #2
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006386:	f107 031c 	add.w	r3, r7, #28
 800638a:	4619      	mov	r1, r3
 800638c:	482b      	ldr	r0, [pc, #172]	; (800643c <HAL_TIM_MspPostInit+0x154>)
 800638e:	f001 fdaf 	bl	8007ef0 <HAL_GPIO_Init>
}
 8006392:	e047      	b.n	8006424 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <HAL_TIM_MspPostInit+0x158>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d11e      	bne.n	80063dc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	613b      	str	r3, [r7, #16]
 80063a2:	4b23      	ldr	r3, [pc, #140]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	4a22      	ldr	r2, [pc, #136]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 80063a8:	f043 0304 	orr.w	r3, r3, #4
 80063ac:	6313      	str	r3, [r2, #48]	; 0x30
 80063ae:	4b20      	ldr	r3, [pc, #128]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 80063b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b2:	f003 0304 	and.w	r3, r3, #4
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_Contrast_PWM_Pin|LCD_LED_PWM_Pin;
 80063ba:	23c0      	movs	r3, #192	; 0xc0
 80063bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063be:	2302      	movs	r3, #2
 80063c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c6:	2300      	movs	r3, #0
 80063c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80063ca:	2303      	movs	r3, #3
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063ce:	f107 031c 	add.w	r3, r7, #28
 80063d2:	4619      	mov	r1, r3
 80063d4:	4817      	ldr	r0, [pc, #92]	; (8006434 <HAL_TIM_MspPostInit+0x14c>)
 80063d6:	f001 fd8b 	bl	8007ef0 <HAL_GPIO_Init>
}
 80063da:	e023      	b.n	8006424 <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a18      	ldr	r2, [pc, #96]	; (8006444 <HAL_TIM_MspPostInit+0x15c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d11e      	bne.n	8006424 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a10      	ldr	r2, [pc, #64]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	6313      	str	r3, [r2, #48]	; 0x30
 80063f6:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <HAL_TIM_MspPostInit+0x148>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_PWM_OR_DC_M1_EncA_Interrupt_Pin;
 8006402:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006408:	2302      	movs	r3, #2
 800640a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800640c:	2300      	movs	r3, #0
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006410:	2300      	movs	r3, #0
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006414:	2303      	movs	r3, #3
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_PWM_OR_DC_M1_EncA_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8006418:	f107 031c 	add.w	r3, r7, #28
 800641c:	4619      	mov	r1, r3
 800641e:	480a      	ldr	r0, [pc, #40]	; (8006448 <HAL_TIM_MspPostInit+0x160>)
 8006420:	f001 fd66 	bl	8007ef0 <HAL_GPIO_Init>
}
 8006424:	bf00      	nop
 8006426:	3730      	adds	r7, #48	; 0x30
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40000400 	.word	0x40000400
 8006430:	40023800 	.word	0x40023800
 8006434:	40020800 	.word	0x40020800
 8006438:	40000800 	.word	0x40000800
 800643c:	40020c00 	.word	0x40020c00
 8006440:	40010400 	.word	0x40010400
 8006444:	40014800 	.word	0x40014800
 8006448:	40020400 	.word	0x40020400

0800644c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <MX_UART4_Init+0x4c>)
 8006452:	4a12      	ldr	r2, [pc, #72]	; (800649c <MX_UART4_Init+0x50>)
 8006454:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <MX_UART4_Init+0x4c>)
 8006458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800645c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800645e:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <MX_UART4_Init+0x4c>)
 8006460:	2200      	movs	r2, #0
 8006462:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <MX_UART4_Init+0x4c>)
 8006466:	2200      	movs	r2, #0
 8006468:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <MX_UART4_Init+0x4c>)
 800646c:	2200      	movs	r2, #0
 800646e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8006470:	4b09      	ldr	r3, [pc, #36]	; (8006498 <MX_UART4_Init+0x4c>)
 8006472:	220c      	movs	r2, #12
 8006474:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <MX_UART4_Init+0x4c>)
 8006478:	2200      	movs	r2, #0
 800647a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <MX_UART4_Init+0x4c>)
 800647e:	2200      	movs	r2, #0
 8006480:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006482:	4805      	ldr	r0, [pc, #20]	; (8006498 <MX_UART4_Init+0x4c>)
 8006484:	f004 f93e 	bl	800a704 <HAL_UART_Init>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800648e:	f7fe fff7 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006492:	bf00      	nop
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20002e24 	.word	0x20002e24
 800649c:	40004c00 	.word	0x40004c00

080064a0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80064a4:	4b11      	ldr	r3, [pc, #68]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064a6:	4a12      	ldr	r2, [pc, #72]	; (80064f0 <MX_USART1_UART_Init+0x50>)
 80064a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064b2:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80064b8:	4b0c      	ldr	r3, [pc, #48]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80064be:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80064c4:	4b09      	ldr	r3, [pc, #36]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064c6:	220c      	movs	r2, #12
 80064c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064ca:	4b08      	ldr	r3, [pc, #32]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80064d6:	4805      	ldr	r0, [pc, #20]	; (80064ec <MX_USART1_UART_Init+0x4c>)
 80064d8:	f004 f914 	bl	800a704 <HAL_UART_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80064e2:	f7fe ffcd 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20002e6c 	.word	0x20002e6c
 80064f0:	40011000 	.word	0x40011000

080064f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80064f8:	4b11      	ldr	r3, [pc, #68]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 80064fa:	4a12      	ldr	r2, [pc, #72]	; (8006544 <MX_USART3_UART_Init+0x50>)
 80064fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80064fe:	4b10      	ldr	r3, [pc, #64]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 8006500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006504:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006506:	4b0e      	ldr	r3, [pc, #56]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 8006508:	2200      	movs	r2, #0
 800650a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800650c:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 800650e:	2200      	movs	r2, #0
 8006510:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006512:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 8006514:	2200      	movs	r2, #0
 8006516:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006518:	4b09      	ldr	r3, [pc, #36]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 800651a:	220c      	movs	r2, #12
 800651c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800651e:	4b08      	ldr	r3, [pc, #32]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 8006520:	2200      	movs	r2, #0
 8006522:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 8006526:	2200      	movs	r2, #0
 8006528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800652a:	4805      	ldr	r0, [pc, #20]	; (8006540 <MX_USART3_UART_Init+0x4c>)
 800652c:	f004 f8ea 	bl	800a704 <HAL_UART_Init>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006536:	f7fe ffa3 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800653a:	bf00      	nop
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20002eb4 	.word	0x20002eb4
 8006544:	40004800 	.word	0x40004800

08006548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08e      	sub	sp, #56	; 0x38
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	605a      	str	r2, [r3, #4]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	60da      	str	r2, [r3, #12]
 800655e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a99      	ldr	r2, [pc, #612]	; (80067cc <HAL_UART_MspInit+0x284>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d12d      	bne.n	80065c6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	623b      	str	r3, [r7, #32]
 800656e:	4b98      	ldr	r3, [pc, #608]	; (80067d0 <HAL_UART_MspInit+0x288>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	4a97      	ldr	r2, [pc, #604]	; (80067d0 <HAL_UART_MspInit+0x288>)
 8006574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006578:	6413      	str	r3, [r2, #64]	; 0x40
 800657a:	4b95      	ldr	r3, [pc, #596]	; (80067d0 <HAL_UART_MspInit+0x288>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	4b91      	ldr	r3, [pc, #580]	; (80067d0 <HAL_UART_MspInit+0x288>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	4a90      	ldr	r2, [pc, #576]	; (80067d0 <HAL_UART_MspInit+0x288>)
 8006590:	f043 0304 	orr.w	r3, r3, #4
 8006594:	6313      	str	r3, [r2, #48]	; 0x30
 8006596:	4b8e      	ldr	r3, [pc, #568]	; (80067d0 <HAL_UART_MspInit+0x288>)
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	f003 0304 	and.w	r3, r3, #4
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STMUART4_TX_ESPUART1RX_Pin|STMUART4_RX_ESPUART1TX_Pin;
 80065a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a8:	2302      	movs	r3, #2
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b0:	2303      	movs	r3, #3
 80065b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80065b4:	2308      	movs	r3, #8
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065bc:	4619      	mov	r1, r3
 80065be:	4885      	ldr	r0, [pc, #532]	; (80067d4 <HAL_UART_MspInit+0x28c>)
 80065c0:	f001 fc96 	bl	8007ef0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80065c4:	e0fe      	b.n	80067c4 <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART1)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a83      	ldr	r2, [pc, #524]	; (80067d8 <HAL_UART_MspInit+0x290>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d162      	bne.n	8006696 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
 80065d4:	4b7e      	ldr	r3, [pc, #504]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80065d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d8:	4a7d      	ldr	r2, [pc, #500]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80065da:	f043 0310 	orr.w	r3, r3, #16
 80065de:	6453      	str	r3, [r2, #68]	; 0x44
 80065e0:	4b7b      	ldr	r3, [pc, #492]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80065e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	4b77      	ldr	r3, [pc, #476]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	4a76      	ldr	r2, [pc, #472]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80065f6:	f043 0302 	orr.w	r3, r3, #2
 80065fa:	6313      	str	r3, [r2, #48]	; 0x30
 80065fc:	4b74      	ldr	r3, [pc, #464]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	f003 0302 	and.w	r3, r3, #2
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART1_TX_STLINK_RX_Pin|UART1_RX_STLINK_TX_Pin;
 8006608:	23c0      	movs	r3, #192	; 0xc0
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660c:	2302      	movs	r3, #2
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006610:	2300      	movs	r3, #0
 8006612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006614:	2303      	movs	r3, #3
 8006616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006618:	2307      	movs	r3, #7
 800661a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800661c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006620:	4619      	mov	r1, r3
 8006622:	486e      	ldr	r0, [pc, #440]	; (80067dc <HAL_UART_MspInit+0x294>)
 8006624:	f001 fc64 	bl	8007ef0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006628:	4b6d      	ldr	r3, [pc, #436]	; (80067e0 <HAL_UART_MspInit+0x298>)
 800662a:	4a6e      	ldr	r2, [pc, #440]	; (80067e4 <HAL_UART_MspInit+0x29c>)
 800662c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800662e:	4b6c      	ldr	r3, [pc, #432]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006634:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006636:	4b6a      	ldr	r3, [pc, #424]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006638:	2200      	movs	r2, #0
 800663a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800663c:	4b68      	ldr	r3, [pc, #416]	; (80067e0 <HAL_UART_MspInit+0x298>)
 800663e:	2200      	movs	r2, #0
 8006640:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006642:	4b67      	ldr	r3, [pc, #412]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006648:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800664a:	4b65      	ldr	r3, [pc, #404]	; (80067e0 <HAL_UART_MspInit+0x298>)
 800664c:	2200      	movs	r2, #0
 800664e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006650:	4b63      	ldr	r3, [pc, #396]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006652:	2200      	movs	r2, #0
 8006654:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006656:	4b62      	ldr	r3, [pc, #392]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006658:	2200      	movs	r2, #0
 800665a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800665c:	4b60      	ldr	r3, [pc, #384]	; (80067e0 <HAL_UART_MspInit+0x298>)
 800665e:	2200      	movs	r2, #0
 8006660:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006662:	4b5f      	ldr	r3, [pc, #380]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006664:	2200      	movs	r2, #0
 8006666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006668:	485d      	ldr	r0, [pc, #372]	; (80067e0 <HAL_UART_MspInit+0x298>)
 800666a:	f000 fea7 	bl	80073bc <HAL_DMA_Init>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8006674:	f7fe ff04 	bl	8005480 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a59      	ldr	r2, [pc, #356]	; (80067e0 <HAL_UART_MspInit+0x298>)
 800667c:	63da      	str	r2, [r3, #60]	; 0x3c
 800667e:	4a58      	ldr	r2, [pc, #352]	; (80067e0 <HAL_UART_MspInit+0x298>)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006684:	2200      	movs	r2, #0
 8006686:	2105      	movs	r1, #5
 8006688:	2025      	movs	r0, #37	; 0x25
 800668a:	f000 fe6d 	bl	8007368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800668e:	2025      	movs	r0, #37	; 0x25
 8006690:	f000 fe86 	bl	80073a0 <HAL_NVIC_EnableIRQ>
}
 8006694:	e096      	b.n	80067c4 <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART3)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a53      	ldr	r2, [pc, #332]	; (80067e8 <HAL_UART_MspInit+0x2a0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	f040 8091 	bne.w	80067c4 <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
 80066a6:	4b4a      	ldr	r3, [pc, #296]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	4a49      	ldr	r2, [pc, #292]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80066ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b0:	6413      	str	r3, [r2, #64]	; 0x40
 80066b2:	4b47      	ldr	r3, [pc, #284]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80066b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066be:	2300      	movs	r3, #0
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	4b43      	ldr	r3, [pc, #268]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80066c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c6:	4a42      	ldr	r2, [pc, #264]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	6313      	str	r3, [r2, #48]	; 0x30
 80066ce:	4b40      	ldr	r3, [pc, #256]	; (80067d0 <HAL_UART_MspInit+0x288>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3TX_FC1RX_Pin|UART3RX_FC1TX_Pin;
 80066da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e0:	2302      	movs	r3, #2
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e8:	2303      	movs	r3, #3
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066ec:	2307      	movs	r3, #7
 80066ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f4:	4619      	mov	r1, r3
 80066f6:	4839      	ldr	r0, [pc, #228]	; (80067dc <HAL_UART_MspInit+0x294>)
 80066f8:	f001 fbfa 	bl	8007ef0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80066fc:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 80066fe:	4a3c      	ldr	r2, [pc, #240]	; (80067f0 <HAL_UART_MspInit+0x2a8>)
 8006700:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006702:	4b3a      	ldr	r3, [pc, #232]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006704:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006708:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800670a:	4b38      	ldr	r3, [pc, #224]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 800670c:	2200      	movs	r2, #0
 800670e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006710:	4b36      	ldr	r3, [pc, #216]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006716:	4b35      	ldr	r3, [pc, #212]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006718:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800671c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800671e:	4b33      	ldr	r3, [pc, #204]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006720:	2200      	movs	r2, #0
 8006722:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006724:	4b31      	ldr	r3, [pc, #196]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006726:	2200      	movs	r2, #0
 8006728:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800672a:	4b30      	ldr	r3, [pc, #192]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 800672c:	2200      	movs	r2, #0
 800672e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006730:	4b2e      	ldr	r3, [pc, #184]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006732:	2200      	movs	r2, #0
 8006734:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006736:	4b2d      	ldr	r3, [pc, #180]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006738:	2200      	movs	r2, #0
 800673a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800673c:	482b      	ldr	r0, [pc, #172]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 800673e:	f000 fe3d 	bl	80073bc <HAL_DMA_Init>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <HAL_UART_MspInit+0x204>
      Error_Handler();
 8006748:	f7fe fe9a 	bl	8005480 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a27      	ldr	r2, [pc, #156]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c
 8006752:	4a26      	ldr	r2, [pc, #152]	; (80067ec <HAL_UART_MspInit+0x2a4>)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8006758:	4b26      	ldr	r3, [pc, #152]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 800675a:	4a27      	ldr	r2, [pc, #156]	; (80067f8 <HAL_UART_MspInit+0x2b0>)
 800675c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800675e:	4b25      	ldr	r3, [pc, #148]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 8006760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006764:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006766:	4b23      	ldr	r3, [pc, #140]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 8006768:	2240      	movs	r2, #64	; 0x40
 800676a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800676c:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 800676e:	2200      	movs	r2, #0
 8006770:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006772:	4b20      	ldr	r3, [pc, #128]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 8006774:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006778:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800677a:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 800677c:	2200      	movs	r2, #0
 800677e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 8006782:	2200      	movs	r2, #0
 8006784:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 8006788:	2200      	movs	r2, #0
 800678a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 800678e:	2200      	movs	r2, #0
 8006790:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006792:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 8006794:	2200      	movs	r2, #0
 8006796:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006798:	4816      	ldr	r0, [pc, #88]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 800679a:	f000 fe0f 	bl	80073bc <HAL_DMA_Init>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <HAL_UART_MspInit+0x260>
      Error_Handler();
 80067a4:	f7fe fe6c 	bl	8005480 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a12      	ldr	r2, [pc, #72]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 80067ac:	639a      	str	r2, [r3, #56]	; 0x38
 80067ae:	4a11      	ldr	r2, [pc, #68]	; (80067f4 <HAL_UART_MspInit+0x2ac>)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80067b4:	2200      	movs	r2, #0
 80067b6:	2105      	movs	r1, #5
 80067b8:	2027      	movs	r0, #39	; 0x27
 80067ba:	f000 fdd5 	bl	8007368 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80067be:	2027      	movs	r0, #39	; 0x27
 80067c0:	f000 fdee 	bl	80073a0 <HAL_NVIC_EnableIRQ>
}
 80067c4:	bf00      	nop
 80067c6:	3738      	adds	r7, #56	; 0x38
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40004c00 	.word	0x40004c00
 80067d0:	40023800 	.word	0x40023800
 80067d4:	40020800 	.word	0x40020800
 80067d8:	40011000 	.word	0x40011000
 80067dc:	40020400 	.word	0x40020400
 80067e0:	20002efc 	.word	0x20002efc
 80067e4:	40026440 	.word	0x40026440
 80067e8:	40004800 	.word	0x40004800
 80067ec:	20002f5c 	.word	0x20002f5c
 80067f0:	40026028 	.word	0x40026028
 80067f4:	20002fbc 	.word	0x20002fbc
 80067f8:	40026058 	.word	0x40026058

080067fc <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006800:	4b0e      	ldr	r3, [pc, #56]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8006802:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006806:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006808:	4b0c      	ldr	r3, [pc, #48]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800680a:	2208      	movs	r2, #8
 800680c:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800680e:	4b0b      	ldr	r3, [pc, #44]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8006810:	2201      	movs	r2, #1
 8006812:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006814:	4b09      	ldr	r3, [pc, #36]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8006816:	2200      	movs	r2, #0
 8006818:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800681c:	2202      	movs	r2, #2
 800681e:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8006822:	2200      	movs	r2, #0
 8006824:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006826:	4805      	ldr	r0, [pc, #20]	; (800683c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8006828:	f001 fd48 	bl	80082bc <HAL_HCD_Init>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8006832:	f7fe fe25 	bl	8005480 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006836:	bf00      	nop
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	2000301c 	.word	0x2000301c

08006840 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006848:	f107 0314 	add.w	r3, r7, #20
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	605a      	str	r2, [r3, #4]
 8006852:	609a      	str	r2, [r3, #8]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006860:	d132      	bne.n	80068c8 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	613b      	str	r3, [r7, #16]
 8006866:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	4a19      	ldr	r2, [pc, #100]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6313      	str	r3, [r2, #48]	; 0x30
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800687e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006884:	2302      	movs	r3, #2
 8006886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006888:	2300      	movs	r3, #0
 800688a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800688c:	2303      	movs	r3, #3
 800688e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006890:	230a      	movs	r3, #10
 8006892:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006894:	f107 0314 	add.w	r3, r7, #20
 8006898:	4619      	mov	r1, r3
 800689a:	480e      	ldr	r0, [pc, #56]	; (80068d4 <HAL_HCD_MspInit+0x94>)
 800689c:	f001 fb28 	bl	8007ef0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068a0:	4b0b      	ldr	r3, [pc, #44]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	4a0a      	ldr	r2, [pc, #40]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 80068a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068aa:	6353      	str	r3, [r2, #52]	; 0x34
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	4b07      	ldr	r3, [pc, #28]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 80068b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b4:	4a06      	ldr	r2, [pc, #24]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 80068b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ba:	6453      	str	r3, [r2, #68]	; 0x44
 80068bc:	4b04      	ldr	r3, [pc, #16]	; (80068d0 <HAL_HCD_MspInit+0x90>)
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80068c8:	bf00      	nop
 80068ca:	3728      	adds	r7, #40	; 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40023800 	.word	0x40023800
 80068d4:	40020000 	.word	0x40020000

080068d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80068d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006910 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80068dc:	f7ff f952 	bl	8005b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068e0:	480c      	ldr	r0, [pc, #48]	; (8006914 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80068e2:	490d      	ldr	r1, [pc, #52]	; (8006918 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80068e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068e8:	e002      	b.n	80068f0 <LoopCopyDataInit>

080068ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068ee:	3304      	adds	r3, #4

080068f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068f4:	d3f9      	bcc.n	80068ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068f6:	4a0a      	ldr	r2, [pc, #40]	; (8006920 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80068f8:	4c0a      	ldr	r4, [pc, #40]	; (8006924 <LoopFillZerobss+0x22>)
  movs r3, #0
 80068fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068fc:	e001      	b.n	8006902 <LoopFillZerobss>

080068fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006900:	3204      	adds	r2, #4

08006902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006904:	d3fb      	bcc.n	80068fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006906:	f00d fdaf 	bl	8014468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800690a:	f7fe fbfd 	bl	8005108 <main>
  bx  lr    
 800690e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006918:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 800691c:	08018918 	.word	0x08018918
  ldr r2, =_sbss
 8006920:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8006924:	2000753c 	.word	0x2000753c

08006928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006928:	e7fe      	b.n	8006928 <ADC_IRQHandler>
	...

0800692c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <HAL_Init+0x40>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a0d      	ldr	r2, [pc, #52]	; (800696c <HAL_Init+0x40>)
 8006936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800693a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <HAL_Init+0x40>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0a      	ldr	r2, [pc, #40]	; (800696c <HAL_Init+0x40>)
 8006942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006948:	4b08      	ldr	r3, [pc, #32]	; (800696c <HAL_Init+0x40>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a07      	ldr	r2, [pc, #28]	; (800696c <HAL_Init+0x40>)
 800694e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006954:	2003      	movs	r0, #3
 8006956:	f000 fcfc 	bl	8007352 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800695a:	200f      	movs	r0, #15
 800695c:	f7fe ff08 	bl	8005770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006960:	f7fe feca 	bl	80056f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023c00 	.word	0x40023c00

08006970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <HAL_IncTick+0x20>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <HAL_IncTick+0x24>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4413      	add	r3, r2
 8006980:	4a04      	ldr	r2, [pc, #16]	; (8006994 <HAL_IncTick+0x24>)
 8006982:	6013      	str	r3, [r2, #0]
}
 8006984:	bf00      	nop
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	2000014c 	.word	0x2000014c
 8006994:	200033fc 	.word	0x200033fc

08006998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return uwTick;
 800699c:	4b03      	ldr	r3, [pc, #12]	; (80069ac <HAL_GetTick+0x14>)
 800699e:	681b      	ldr	r3, [r3, #0]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	200033fc 	.word	0x200033fc

080069b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069b8:	f7ff ffee 	bl	8006998 <HAL_GetTick>
 80069bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d005      	beq.n	80069d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <HAL_Delay+0x44>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069d6:	bf00      	nop
 80069d8:	f7ff ffde 	bl	8006998 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d8f7      	bhi.n	80069d8 <HAL_Delay+0x28>
  {
  }
}
 80069e8:	bf00      	nop
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	2000014c 	.word	0x2000014c

080069f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e033      	b.n	8006a76 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fd fc06 	bl	8004228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d118      	bne.n	8006a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a3e:	f023 0302 	bic.w	r3, r3, #2
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fad8 	bl	8007000 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	f023 0303 	bic.w	r3, r3, #3
 8006a5e:	f043 0201 	orr.w	r2, r3, #1
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	641a      	str	r2, [r3, #64]	; 0x40
 8006a66:	e001      	b.n	8006a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_ADC_Start+0x1a>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0b2      	b.n	8006c00 <HAL_ADC_Start+0x180>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d018      	beq.n	8006ae2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006ac0:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <HAL_ADC_Start+0x18c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a52      	ldr	r2, [pc, #328]	; (8006c10 <HAL_ADC_Start+0x190>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	0c9a      	lsrs	r2, r3, #18
 8006acc:	4613      	mov	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4413      	add	r3, r2
 8006ad2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006ad4:	e002      	b.n	8006adc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1f9      	bne.n	8006ad6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d17a      	bne.n	8006be6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2e:	d106      	bne.n	8006b3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b34:	f023 0206 	bic.w	r2, r3, #6
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	645a      	str	r2, [r3, #68]	; 0x44
 8006b3c:	e002      	b.n	8006b44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b4c:	4b31      	ldr	r3, [pc, #196]	; (8006c14 <HAL_ADC_Start+0x194>)
 8006b4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006b58:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d12a      	bne.n	8006bbc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2b      	ldr	r2, [pc, #172]	; (8006c18 <HAL_ADC_Start+0x198>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d015      	beq.n	8006b9c <HAL_ADC_Start+0x11c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a29      	ldr	r2, [pc, #164]	; (8006c1c <HAL_ADC_Start+0x19c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d105      	bne.n	8006b86 <HAL_ADC_Start+0x106>
 8006b7a:	4b26      	ldr	r3, [pc, #152]	; (8006c14 <HAL_ADC_Start+0x194>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a25      	ldr	r2, [pc, #148]	; (8006c20 <HAL_ADC_Start+0x1a0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d136      	bne.n	8006bfe <HAL_ADC_Start+0x17e>
 8006b90:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <HAL_ADC_Start+0x194>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 0310 	and.w	r3, r3, #16
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d130      	bne.n	8006bfe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d129      	bne.n	8006bfe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006bb8:	609a      	str	r2, [r3, #8]
 8006bba:	e020      	b.n	8006bfe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a15      	ldr	r2, [pc, #84]	; (8006c18 <HAL_ADC_Start+0x198>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d11b      	bne.n	8006bfe <HAL_ADC_Start+0x17e>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d114      	bne.n	8006bfe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006be2:	609a      	str	r2, [r3, #8]
 8006be4:	e00b      	b.n	8006bfe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bea:	f043 0210 	orr.w	r2, r3, #16
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	f043 0201 	orr.w	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr
 8006c0c:	20000144 	.word	0x20000144
 8006c10:	431bde83 	.word	0x431bde83
 8006c14:	40012300 	.word	0x40012300
 8006c18:	40012000 	.word	0x40012000
 8006c1c:	40012100 	.word	0x40012100
 8006c20:	40012200 	.word	0x40012200

08006c24 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <HAL_ADC_Stop+0x16>
 8006c36:	2302      	movs	r3, #2
 8006c38:	e021      	b.n	8006c7e <HAL_ADC_Stop+0x5a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0201 	bic.w	r2, r2, #1
 8006c50:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c68:	f023 0301 	bic.w	r3, r3, #1
 8006c6c:	f043 0201 	orr.w	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ca6:	d113      	bne.n	8006cd0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb6:	d10b      	bne.n	8006cd0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e063      	b.n	8006d98 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd0:	f7ff fe62 	bl	8006998 <HAL_GetTick>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006cd6:	e021      	b.n	8006d1c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d01d      	beq.n	8006d1c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d007      	beq.n	8006cf6 <HAL_ADC_PollForConversion+0x6c>
 8006ce6:	f7ff fe57 	bl	8006998 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d212      	bcs.n	8006d1c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d00b      	beq.n	8006d1c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	f043 0204 	orr.w	r2, r3, #4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e03d      	b.n	8006d98 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0302 	and.w	r3, r3, #2
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d1d6      	bne.n	8006cd8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f06f 0212 	mvn.w	r2, #18
 8006d32:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d123      	bne.n	8006d96 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11f      	bne.n	8006d96 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d006      	beq.n	8006d72 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d111      	bne.n	8006d96 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f043 0201 	orr.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
	...

08006dbc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_ADC_ConfigChannel+0x1c>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e105      	b.n	8006fe4 <HAL_ADC_ConfigChannel+0x228>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b09      	cmp	r3, #9
 8006de6:	d925      	bls.n	8006e34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68d9      	ldr	r1, [r3, #12]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	3b1e      	subs	r3, #30
 8006dfe:	2207      	movs	r2, #7
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	43da      	mvns	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68d9      	ldr	r1, [r3, #12]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4618      	mov	r0, r3
 8006e20:	4603      	mov	r3, r0
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	4403      	add	r3, r0
 8006e26:	3b1e      	subs	r3, #30
 8006e28:	409a      	lsls	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	e022      	b.n	8006e7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6919      	ldr	r1, [r3, #16]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	461a      	mov	r2, r3
 8006e42:	4613      	mov	r3, r2
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	4413      	add	r3, r2
 8006e48:	2207      	movs	r2, #7
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43da      	mvns	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	400a      	ands	r2, r1
 8006e56:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6919      	ldr	r1, [r3, #16]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	4618      	mov	r0, r3
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	005b      	lsls	r3, r3, #1
 8006e6e:	4403      	add	r3, r0
 8006e70:	409a      	lsls	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b06      	cmp	r3, #6
 8006e80:	d824      	bhi.n	8006ecc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	3b05      	subs	r3, #5
 8006e94:	221f      	movs	r2, #31
 8006e96:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9a:	43da      	mvns	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	400a      	ands	r2, r1
 8006ea2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	4413      	add	r3, r2
 8006ebc:	3b05      	subs	r3, #5
 8006ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	635a      	str	r2, [r3, #52]	; 0x34
 8006eca:	e04c      	b.n	8006f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b0c      	cmp	r3, #12
 8006ed2:	d824      	bhi.n	8006f1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	3b23      	subs	r3, #35	; 0x23
 8006ee6:	221f      	movs	r2, #31
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43da      	mvns	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	400a      	ands	r2, r1
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4618      	mov	r0, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3b23      	subs	r3, #35	; 0x23
 8006f10:	fa00 f203 	lsl.w	r2, r0, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8006f1c:	e023      	b.n	8006f66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	4413      	add	r3, r2
 8006f2e:	3b41      	subs	r3, #65	; 0x41
 8006f30:	221f      	movs	r2, #31
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	43da      	mvns	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	400a      	ands	r2, r1
 8006f3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	3b41      	subs	r3, #65	; 0x41
 8006f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	430a      	orrs	r2, r1
 8006f64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f66:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <HAL_ADC_ConfigChannel+0x234>)
 8006f68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a21      	ldr	r2, [pc, #132]	; (8006ff4 <HAL_ADC_ConfigChannel+0x238>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d109      	bne.n	8006f88 <HAL_ADC_ConfigChannel+0x1cc>
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b12      	cmp	r3, #18
 8006f7a:	d105      	bne.n	8006f88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	; (8006ff4 <HAL_ADC_ConfigChannel+0x238>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d123      	bne.n	8006fda <HAL_ADC_ConfigChannel+0x21e>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d003      	beq.n	8006fa2 <HAL_ADC_ConfigChannel+0x1e6>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b11      	cmp	r3, #17
 8006fa0:	d11b      	bne.n	8006fda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b10      	cmp	r3, #16
 8006fb4:	d111      	bne.n	8006fda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <HAL_ADC_ConfigChannel+0x23c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a10      	ldr	r2, [pc, #64]	; (8006ffc <HAL_ADC_ConfigChannel+0x240>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	0c9a      	lsrs	r2, r3, #18
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006fcc:	e002      	b.n	8006fd4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1f9      	bne.n	8006fce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40012300 	.word	0x40012300
 8006ff4:	40012000 	.word	0x40012000
 8006ff8:	20000144 	.word	0x20000144
 8006ffc:	431bde83 	.word	0x431bde83

08007000 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007008:	4b79      	ldr	r3, [pc, #484]	; (80071f0 <ADC_Init+0x1f0>)
 800700a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	431a      	orrs	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6859      	ldr	r1, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	021a      	lsls	r2, r3, #8
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007058:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6859      	ldr	r1, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800707a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6899      	ldr	r1, [r3, #8]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007092:	4a58      	ldr	r2, [pc, #352]	; (80071f4 <ADC_Init+0x1f4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d022      	beq.n	80070de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689a      	ldr	r2, [r3, #8]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6899      	ldr	r1, [r3, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	6899      	ldr	r1, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	609a      	str	r2, [r3, #8]
 80070dc:	e00f      	b.n	80070fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80070fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0202 	bic.w	r2, r2, #2
 800710c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6899      	ldr	r1, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7e1b      	ldrb	r3, [r3, #24]
 8007118:	005a      	lsls	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01b      	beq.n	8007164 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800713a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800714a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6859      	ldr	r1, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	3b01      	subs	r3, #1
 8007158:	035a      	lsls	r2, r3, #13
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	e007      	b.n	8007174 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007172:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	3b01      	subs	r3, #1
 8007190:	051a      	lsls	r2, r3, #20
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80071a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6899      	ldr	r1, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80071b6:	025a      	lsls	r2, r3, #9
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6899      	ldr	r1, [r3, #8]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	029a      	lsls	r2, r3, #10
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	609a      	str	r2, [r3, #8]
}
 80071e4:	bf00      	nop
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40012300 	.word	0x40012300
 80071f4:	0f000001 	.word	0x0f000001

080071f8 <__NVIC_SetPriorityGrouping>:
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007208:	4b0c      	ldr	r3, [pc, #48]	; (800723c <__NVIC_SetPriorityGrouping+0x44>)
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007214:	4013      	ands	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800722a:	4a04      	ldr	r2, [pc, #16]	; (800723c <__NVIC_SetPriorityGrouping+0x44>)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	60d3      	str	r3, [r2, #12]
}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	e000ed00 	.word	0xe000ed00

08007240 <__NVIC_GetPriorityGrouping>:
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007244:	4b04      	ldr	r3, [pc, #16]	; (8007258 <__NVIC_GetPriorityGrouping+0x18>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	0a1b      	lsrs	r3, r3, #8
 800724a:	f003 0307 	and.w	r3, r3, #7
}
 800724e:	4618      	mov	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <__NVIC_EnableIRQ>:
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726a:	2b00      	cmp	r3, #0
 800726c:	db0b      	blt.n	8007286 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	f003 021f 	and.w	r2, r3, #31
 8007274:	4907      	ldr	r1, [pc, #28]	; (8007294 <__NVIC_EnableIRQ+0x38>)
 8007276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2001      	movs	r0, #1
 800727e:	fa00 f202 	lsl.w	r2, r0, r2
 8007282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	e000e100 	.word	0xe000e100

08007298 <__NVIC_SetPriority>:
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	6039      	str	r1, [r7, #0]
 80072a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	db0a      	blt.n	80072c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	490c      	ldr	r1, [pc, #48]	; (80072e4 <__NVIC_SetPriority+0x4c>)
 80072b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b6:	0112      	lsls	r2, r2, #4
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	440b      	add	r3, r1
 80072bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80072c0:	e00a      	b.n	80072d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	4908      	ldr	r1, [pc, #32]	; (80072e8 <__NVIC_SetPriority+0x50>)
 80072c8:	79fb      	ldrb	r3, [r7, #7]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	3b04      	subs	r3, #4
 80072d0:	0112      	lsls	r2, r2, #4
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	440b      	add	r3, r1
 80072d6:	761a      	strb	r2, [r3, #24]
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	e000e100 	.word	0xe000e100
 80072e8:	e000ed00 	.word	0xe000ed00

080072ec <NVIC_EncodePriority>:
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	f1c3 0307 	rsb	r3, r3, #7
 8007306:	2b04      	cmp	r3, #4
 8007308:	bf28      	it	cs
 800730a:	2304      	movcs	r3, #4
 800730c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	3304      	adds	r3, #4
 8007312:	2b06      	cmp	r3, #6
 8007314:	d902      	bls.n	800731c <NVIC_EncodePriority+0x30>
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	3b03      	subs	r3, #3
 800731a:	e000      	b.n	800731e <NVIC_EncodePriority+0x32>
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007320:	f04f 32ff 	mov.w	r2, #4294967295
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	fa02 f303 	lsl.w	r3, r2, r3
 800732a:	43da      	mvns	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	401a      	ands	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007334:	f04f 31ff 	mov.w	r1, #4294967295
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	fa01 f303 	lsl.w	r3, r1, r3
 800733e:	43d9      	mvns	r1, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007344:	4313      	orrs	r3, r2
}
 8007346:	4618      	mov	r0, r3
 8007348:	3724      	adds	r7, #36	; 0x24
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff ff4c 	bl	80071f8 <__NVIC_SetPriorityGrouping>
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800737a:	f7ff ff61 	bl	8007240 <__NVIC_GetPriorityGrouping>
 800737e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	6978      	ldr	r0, [r7, #20]
 8007386:	f7ff ffb1 	bl	80072ec <NVIC_EncodePriority>
 800738a:	4602      	mov	r2, r0
 800738c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007390:	4611      	mov	r1, r2
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ff80 	bl	8007298 <__NVIC_SetPriority>
}
 8007398:	bf00      	nop
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80073aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f7ff ff54 	bl	800725c <__NVIC_EnableIRQ>
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80073c8:	f7ff fae6 	bl	8006998 <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d101      	bne.n	80073d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e099      	b.n	800750c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0201 	bic.w	r2, r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073f8:	e00f      	b.n	800741a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073fa:	f7ff facd 	bl	8006998 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b05      	cmp	r3, #5
 8007406:	d908      	bls.n	800741a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2203      	movs	r2, #3
 8007412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e078      	b.n	800750c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e8      	bne.n	80073fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4b38      	ldr	r3, [pc, #224]	; (8007514 <HAL_DMA_Init+0x158>)
 8007434:	4013      	ands	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007446:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800745e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	2b04      	cmp	r3, #4
 8007472:	d107      	bne.n	8007484 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	4313      	orrs	r3, r2
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d117      	bne.n	80074de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00e      	beq.n	80074de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb01 	bl	8007ac8 <DMA_CheckFifoParam>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d008      	beq.n	80074de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074da:	2301      	movs	r3, #1
 80074dc:	e016      	b.n	800750c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fab8 	bl	8007a5c <DMA_CalcBaseAndBitshift>
 80074ec:	4603      	mov	r3, r0
 80074ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f4:	223f      	movs	r2, #63	; 0x3f
 80074f6:	409a      	lsls	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	f010803f 	.word	0xf010803f

08007518 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800752e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <HAL_DMA_Start_IT+0x26>
 800753a:	2302      	movs	r3, #2
 800753c:	e040      	b.n	80075c0 <HAL_DMA_Start_IT+0xa8>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b01      	cmp	r3, #1
 8007550:	d12f      	bne.n	80075b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2202      	movs	r2, #2
 8007556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fa4a 	bl	8007a00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007570:	223f      	movs	r2, #63	; 0x3f
 8007572:	409a      	lsls	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0216 	orr.w	r2, r2, #22
 8007586:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	d007      	beq.n	80075a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0208 	orr.w	r2, r2, #8
 800759e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0201 	orr.w	r2, r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	e005      	b.n	80075be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075ba:	2302      	movs	r3, #2
 80075bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3718      	adds	r7, #24
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075d6:	f7ff f9df 	bl	8006998 <HAL_GetTick>
 80075da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d008      	beq.n	80075fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2280      	movs	r2, #128	; 0x80
 80075ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e052      	b.n	80076a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f022 0216 	bic.w	r2, r2, #22
 8007608:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695a      	ldr	r2, [r3, #20]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007618:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <HAL_DMA_Abort+0x62>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007626:	2b00      	cmp	r3, #0
 8007628:	d007      	beq.n	800763a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0208 	bic.w	r2, r2, #8
 8007638:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 0201 	bic.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800764a:	e013      	b.n	8007674 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800764c:	f7ff f9a4 	bl	8006998 <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	2b05      	cmp	r3, #5
 8007658:	d90c      	bls.n	8007674 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2203      	movs	r2, #3
 8007664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e015      	b.n	80076a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e4      	bne.n	800764c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007686:	223f      	movs	r2, #63	; 0x3f
 8007688:	409a      	lsls	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d004      	beq.n	80076c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2280      	movs	r2, #128	; 0x80
 80076c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e00c      	b.n	80076e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2205      	movs	r2, #5
 80076ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0201 	bic.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80076f8:	4b8e      	ldr	r3, [pc, #568]	; (8007934 <HAL_DMA_IRQHandler+0x248>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a8e      	ldr	r2, [pc, #568]	; (8007938 <HAL_DMA_IRQHandler+0x24c>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	0a9b      	lsrs	r3, r3, #10
 8007704:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007716:	2208      	movs	r2, #8
 8007718:	409a      	lsls	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4013      	ands	r3, r2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d01a      	beq.n	8007758 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d013      	beq.n	8007758 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0204 	bic.w	r2, r2, #4
 800773e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007744:	2208      	movs	r2, #8
 8007746:	409a      	lsls	r2, r3
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007750:	f043 0201 	orr.w	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	2201      	movs	r2, #1
 800775e:	409a      	lsls	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4013      	ands	r3, r2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00b      	beq.n	800778e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777a:	2201      	movs	r2, #1
 800777c:	409a      	lsls	r2, r3
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007786:	f043 0202 	orr.w	r2, r3, #2
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007792:	2204      	movs	r2, #4
 8007794:	409a      	lsls	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d012      	beq.n	80077c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b0:	2204      	movs	r2, #4
 80077b2:	409a      	lsls	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077bc:	f043 0204 	orr.w	r2, r3, #4
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c8:	2210      	movs	r2, #16
 80077ca:	409a      	lsls	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d043      	beq.n	800785c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0308 	and.w	r3, r3, #8
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d03c      	beq.n	800785c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e6:	2210      	movs	r2, #16
 80077e8:	409a      	lsls	r2, r3
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d018      	beq.n	800782e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d108      	bne.n	800781c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d024      	beq.n	800785c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
 800781a:	e01f      	b.n	800785c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01b      	beq.n	800785c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
 800782c:	e016      	b.n	800785c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007838:	2b00      	cmp	r3, #0
 800783a:	d107      	bne.n	800784c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0208 	bic.w	r2, r2, #8
 800784a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007860:	2220      	movs	r2, #32
 8007862:	409a      	lsls	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4013      	ands	r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	f000 808f 	beq.w	800798c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0310 	and.w	r3, r3, #16
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8087 	beq.w	800798c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007882:	2220      	movs	r2, #32
 8007884:	409a      	lsls	r2, r3
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b05      	cmp	r3, #5
 8007894:	d136      	bne.n	8007904 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0216 	bic.w	r2, r2, #22
 80078a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695a      	ldr	r2, [r3, #20]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d103      	bne.n	80078c6 <HAL_DMA_IRQHandler+0x1da>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0208 	bic.w	r2, r2, #8
 80078d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078da:	223f      	movs	r2, #63	; 0x3f
 80078dc:	409a      	lsls	r2, r3
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d07e      	beq.n	80079f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
        }
        return;
 8007902:	e079      	b.n	80079f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01d      	beq.n	800794e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007924:	2b00      	cmp	r3, #0
 8007926:	d031      	beq.n	800798c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
 8007930:	e02c      	b.n	800798c <HAL_DMA_IRQHandler+0x2a0>
 8007932:	bf00      	nop
 8007934:	20000144 	.word	0x20000144
 8007938:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007940:	2b00      	cmp	r3, #0
 8007942:	d023      	beq.n	800798c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
 800794c:	e01e      	b.n	800798c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10f      	bne.n	800797c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f022 0210 	bic.w	r2, r2, #16
 800796a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007980:	2b00      	cmp	r3, #0
 8007982:	d003      	beq.n	800798c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007990:	2b00      	cmp	r3, #0
 8007992:	d032      	beq.n	80079fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d022      	beq.n	80079e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2205      	movs	r2, #5
 80079a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	3301      	adds	r3, #1
 80079bc:	60bb      	str	r3, [r7, #8]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d307      	bcc.n	80079d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f2      	bne.n	80079b8 <HAL_DMA_IRQHandler+0x2cc>
 80079d2:	e000      	b.n	80079d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80079d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	e000      	b.n	80079fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80079f8:	bf00      	nop
    }
  }
}
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d108      	bne.n	8007a40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a3e:	e007      	b.n	8007a50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	60da      	str	r2, [r3, #12]
}
 8007a50:	bf00      	nop
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	3b10      	subs	r3, #16
 8007a6c:	4a14      	ldr	r2, [pc, #80]	; (8007ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8007a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a76:	4a13      	ldr	r2, [pc, #76]	; (8007ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b03      	cmp	r3, #3
 8007a88:	d909      	bls.n	8007a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007a92:	f023 0303 	bic.w	r3, r3, #3
 8007a96:	1d1a      	adds	r2, r3, #4
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007a9c:	e007      	b.n	8007aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007aa6:	f023 0303 	bic.w	r3, r3, #3
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	aaaaaaab 	.word	0xaaaaaaab
 8007ac4:	0801805c 	.word	0x0801805c

08007ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d11f      	bne.n	8007b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d856      	bhi.n	8007b96 <DMA_CheckFifoParam+0xce>
 8007ae8:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <DMA_CheckFifoParam+0x28>)
 8007aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aee:	bf00      	nop
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b13 	.word	0x08007b13
 8007af8:	08007b01 	.word	0x08007b01
 8007afc:	08007b97 	.word	0x08007b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d046      	beq.n	8007b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b10:	e043      	b.n	8007b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b1a:	d140      	bne.n	8007b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b20:	e03d      	b.n	8007b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2a:	d121      	bne.n	8007b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d837      	bhi.n	8007ba2 <DMA_CheckFifoParam+0xda>
 8007b32:	a201      	add	r2, pc, #4	; (adr r2, 8007b38 <DMA_CheckFifoParam+0x70>)
 8007b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b4f 	.word	0x08007b4f
 8007b40:	08007b49 	.word	0x08007b49
 8007b44:	08007b61 	.word	0x08007b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e030      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d025      	beq.n	8007ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b5e:	e022      	b.n	8007ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b68:	d11f      	bne.n	8007baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b6e:	e01c      	b.n	8007baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d903      	bls.n	8007b7e <DMA_CheckFifoParam+0xb6>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d003      	beq.n	8007b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b7c:	e018      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	73fb      	strb	r3, [r7, #15]
      break;
 8007b82:	e015      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00e      	beq.n	8007bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
      break;
 8007b94:	e00b      	b.n	8007bae <DMA_CheckFifoParam+0xe6>
      break;
 8007b96:	bf00      	nop
 8007b98:	e00a      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007b9a:	bf00      	nop
 8007b9c:	e008      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007b9e:	bf00      	nop
 8007ba0:	e006      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ba2:	bf00      	nop
 8007ba4:	e004      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007ba6:	bf00      	nop
 8007ba8:	e002      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8007baa:	bf00      	nop
 8007bac:	e000      	b.n	8007bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8007bae:	bf00      	nop
    }
  } 
  
  return status; 
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3714      	adds	r7, #20
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop

08007bc0 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007bca:	4b4b      	ldr	r3, [pc, #300]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d020      	beq.n	8007c18 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007bd6:	4b49      	ldr	r3, [pc, #292]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d107      	bne.n	8007bf0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8007be0:	4b46      	ldr	r3, [pc, #280]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8007be6:	4b45      	ldr	r3, [pc, #276]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007be8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	e00b      	b.n	8007c08 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8007bf0:	4b42      	ldr	r3, [pc, #264]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d103      	bne.n	8007c02 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8007bfa:	4b40      	ldr	r3, [pc, #256]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	e002      	b.n	8007c08 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8007c02:	4b3e      	ldr	r3, [pc, #248]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8007c08:	f000 f88e 	bl	8007d28 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f881 	bl	8007d14 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007c12:	4b3a      	ldr	r3, [pc, #232]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007c18:	4b37      	ldr	r3, [pc, #220]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d04a      	beq.n	8007cba <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c24:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007c26:	2201      	movs	r2, #1
 8007c28:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8007c2a:	4b34      	ldr	r3, [pc, #208]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d12d      	bne.n	8007c90 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8007c34:	4b31      	ldr	r3, [pc, #196]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	4a30      	ldr	r2, [pc, #192]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c3c:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8007c3e:	4b2f      	ldr	r3, [pc, #188]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d015      	beq.n	8007c72 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8007c46:	4b2d      	ldr	r3, [pc, #180]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f857 	bl	8007d00 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8007c52:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	3301      	adds	r3, #1
 8007c58:	4a28      	ldr	r2, [pc, #160]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c5a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8007c5c:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8007c62:	4b26      	ldr	r3, [pc, #152]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c64:	7a1b      	ldrb	r3, [r3, #8]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f8b2 	bl	8007dd4 <FLASH_Erase_Sector>
 8007c70:	e023      	b.n	8007cba <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295
 8007c76:	607b      	str	r3, [r7, #4]
 8007c78:	4a20      	ldr	r2, [pc, #128]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007c7e:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8007c84:	f000 f8ee 	bl	8007e64 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f839 	bl	8007d00 <HAL_FLASH_EndOfOperationCallback>
 8007c8e:	e014      	b.n	8007cba <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8007c90:	4b1a      	ldr	r3, [pc, #104]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d107      	bne.n	8007caa <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8007c9a:	f000 f8e3 	bl	8007e64 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8007c9e:	4b17      	ldr	r3, [pc, #92]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f000 f82c 	bl	8007d00 <HAL_FLASH_EndOfOperationCallback>
 8007ca8:	e004      	b.n	8007cb4 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8007caa:	4b14      	ldr	r3, [pc, #80]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f000 f826 	bl	8007d00 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8007cb4:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8007cba:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d114      	bne.n	8007cee <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	4a0b      	ldr	r2, [pc, #44]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007cce:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8007cd0:	4b09      	ldr	r3, [pc, #36]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	4a08      	ldr	r2, [pc, #32]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cda:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4a05      	ldr	r2, [pc, #20]	; (8007cf8 <HAL_FLASH_IRQHandler+0x138>)
 8007ce2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <HAL_FLASH_IRQHandler+0x13c>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	761a      	strb	r2, [r3, #24]
  }
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40023c00 	.word	0x40023c00
 8007cfc:	20003400 	.word	0x20003400

08007d00 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d008      	beq.n	8007d4a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007d38:	4b25      	ldr	r3, [pc, #148]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f043 0310 	orr.w	r3, r3, #16
 8007d40:	4a23      	ldr	r2, [pc, #140]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d42:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007d44:	4b21      	ldr	r3, [pc, #132]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d46:	2210      	movs	r2, #16
 8007d48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007d4a:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007d56:	4b1e      	ldr	r3, [pc, #120]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f043 0308 	orr.w	r3, r3, #8
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d60:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007d62:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d64:	2220      	movs	r2, #32
 8007d66:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007d74:	4b16      	ldr	r3, [pc, #88]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	f043 0304 	orr.w	r3, r3, #4
 8007d7c:	4a14      	ldr	r2, [pc, #80]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007d80:	4b12      	ldr	r3, [pc, #72]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d82:	2240      	movs	r2, #64	; 0x40
 8007d84:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007d86:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d008      	beq.n	8007da4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007d92:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	f043 0302 	orr.w	r3, r3, #2
 8007d9a:	4a0d      	ldr	r2, [pc, #52]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007d9c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007da0:	2280      	movs	r2, #128	; 0x80
 8007da2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007da4:	4b09      	ldr	r3, [pc, #36]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f043 0320 	orr.w	r3, r3, #32
 8007db8:	4a05      	ldr	r2, [pc, #20]	; (8007dd0 <FLASH_SetErrorCode+0xa8>)
 8007dba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <FLASH_SetErrorCode+0xa4>)
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	60da      	str	r2, [r3, #12]
  }
}
 8007dc2:	bf00      	nop
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	40023c00 	.word	0x40023c00
 8007dd0:	20003400 	.word	0x20003400

08007dd4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	e010      	b.n	8007e12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d103      	bne.n	8007dfe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	e009      	b.n	8007e12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007dfe:	78fb      	ldrb	r3, [r7, #3]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d103      	bne.n	8007e0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007e04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e002      	b.n	8007e12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007e0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e12:	4b13      	ldr	r3, [pc, #76]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	4a12      	ldr	r2, [pc, #72]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007e1e:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	490f      	ldr	r1, [pc, #60]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	4a0c      	ldr	r2, [pc, #48]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007e36:	4b0a      	ldr	r3, [pc, #40]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e38:	691a      	ldr	r2, [r3, #16]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	00db      	lsls	r3, r3, #3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	4a07      	ldr	r2, [pc, #28]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e42:	f043 0302 	orr.w	r3, r3, #2
 8007e46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <FLASH_Erase_Sector+0x8c>)
 8007e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e52:	6113      	str	r3, [r2, #16]
}
 8007e54:	bf00      	nop
 8007e56:	3714      	adds	r7, #20
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40023c00 	.word	0x40023c00

08007e64 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007e68:	4b20      	ldr	r3, [pc, #128]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d017      	beq.n	8007ea4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e74:	4b1d      	ldr	r3, [pc, #116]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1c      	ldr	r2, [pc, #112]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e7a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e7e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e80:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a19      	ldr	r2, [pc, #100]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e8a:	6013      	str	r3, [r2, #0]
 8007e8c:	4b17      	ldr	r3, [pc, #92]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a16      	ldr	r2, [pc, #88]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e96:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e98:	4b14      	ldr	r3, [pc, #80]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a13      	ldr	r2, [pc, #76]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ea2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d017      	beq.n	8007ee0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a0d      	ldr	r2, [pc, #52]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007ebc:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0a      	ldr	r2, [pc, #40]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	4b08      	ldr	r3, [pc, #32]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a07      	ldr	r2, [pc, #28]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ece:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ed2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a04      	ldr	r2, [pc, #16]	; (8007eec <FLASH_FlushCaches+0x88>)
 8007eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ede:	6013      	str	r3, [r2, #0]
  }
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40023c00 	.word	0x40023c00

08007ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b089      	sub	sp, #36	; 0x24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007f02:	2300      	movs	r3, #0
 8007f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	e16b      	b.n	80081e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	f040 815a 	bne.w	80081de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d005      	beq.n	8007f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d130      	bne.n	8007fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	43db      	mvns	r3, r3
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	4013      	ands	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	fa02 f303 	lsl.w	r3, r2, r3
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f78:	2201      	movs	r2, #1
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	43db      	mvns	r3, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4013      	ands	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	091b      	lsrs	r3, r3, #4
 8007f8e:	f003 0201 	and.w	r2, r3, #1
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	fa02 f303 	lsl.w	r3, r2, r3
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f003 0303 	and.w	r3, r3, #3
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d017      	beq.n	8007fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	2203      	movs	r2, #3
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd4:	69ba      	ldr	r2, [r7, #24]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f003 0303 	and.w	r3, r3, #3
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d123      	bne.n	8008034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	08da      	lsrs	r2, r3, #3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3208      	adds	r2, #8
 8007ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	f003 0307 	and.w	r3, r3, #7
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	220f      	movs	r2, #15
 8008004:	fa02 f303 	lsl.w	r3, r2, r3
 8008008:	43db      	mvns	r3, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4013      	ands	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	fa02 f303 	lsl.w	r3, r2, r3
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	4313      	orrs	r3, r2
 8008024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	08da      	lsrs	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	3208      	adds	r2, #8
 800802e:	69b9      	ldr	r1, [r7, #24]
 8008030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	2203      	movs	r2, #3
 8008040:	fa02 f303 	lsl.w	r3, r2, r3
 8008044:	43db      	mvns	r3, r3
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	4013      	ands	r3, r2
 800804a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f003 0203 	and.w	r2, r3, #3
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	fa02 f303 	lsl.w	r3, r2, r3
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	4313      	orrs	r3, r2
 8008060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80b4 	beq.w	80081de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	4b60      	ldr	r3, [pc, #384]	; (80081fc <HAL_GPIO_Init+0x30c>)
 800807c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807e:	4a5f      	ldr	r2, [pc, #380]	; (80081fc <HAL_GPIO_Init+0x30c>)
 8008080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008084:	6453      	str	r3, [r2, #68]	; 0x44
 8008086:	4b5d      	ldr	r3, [pc, #372]	; (80081fc <HAL_GPIO_Init+0x30c>)
 8008088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008092:	4a5b      	ldr	r2, [pc, #364]	; (8008200 <HAL_GPIO_Init+0x310>)
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	089b      	lsrs	r3, r3, #2
 8008098:	3302      	adds	r3, #2
 800809a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800809e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	220f      	movs	r2, #15
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43db      	mvns	r3, r3
 80080b0:	69ba      	ldr	r2, [r7, #24]
 80080b2:	4013      	ands	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a52      	ldr	r2, [pc, #328]	; (8008204 <HAL_GPIO_Init+0x314>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d02b      	beq.n	8008116 <HAL_GPIO_Init+0x226>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a51      	ldr	r2, [pc, #324]	; (8008208 <HAL_GPIO_Init+0x318>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d025      	beq.n	8008112 <HAL_GPIO_Init+0x222>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a50      	ldr	r2, [pc, #320]	; (800820c <HAL_GPIO_Init+0x31c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01f      	beq.n	800810e <HAL_GPIO_Init+0x21e>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a4f      	ldr	r2, [pc, #316]	; (8008210 <HAL_GPIO_Init+0x320>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d019      	beq.n	800810a <HAL_GPIO_Init+0x21a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a4e      	ldr	r2, [pc, #312]	; (8008214 <HAL_GPIO_Init+0x324>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d013      	beq.n	8008106 <HAL_GPIO_Init+0x216>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a4d      	ldr	r2, [pc, #308]	; (8008218 <HAL_GPIO_Init+0x328>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d00d      	beq.n	8008102 <HAL_GPIO_Init+0x212>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a4c      	ldr	r2, [pc, #304]	; (800821c <HAL_GPIO_Init+0x32c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d007      	beq.n	80080fe <HAL_GPIO_Init+0x20e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a4b      	ldr	r2, [pc, #300]	; (8008220 <HAL_GPIO_Init+0x330>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d101      	bne.n	80080fa <HAL_GPIO_Init+0x20a>
 80080f6:	2307      	movs	r3, #7
 80080f8:	e00e      	b.n	8008118 <HAL_GPIO_Init+0x228>
 80080fa:	2308      	movs	r3, #8
 80080fc:	e00c      	b.n	8008118 <HAL_GPIO_Init+0x228>
 80080fe:	2306      	movs	r3, #6
 8008100:	e00a      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008102:	2305      	movs	r3, #5
 8008104:	e008      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008106:	2304      	movs	r3, #4
 8008108:	e006      	b.n	8008118 <HAL_GPIO_Init+0x228>
 800810a:	2303      	movs	r3, #3
 800810c:	e004      	b.n	8008118 <HAL_GPIO_Init+0x228>
 800810e:	2302      	movs	r3, #2
 8008110:	e002      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008112:	2301      	movs	r3, #1
 8008114:	e000      	b.n	8008118 <HAL_GPIO_Init+0x228>
 8008116:	2300      	movs	r3, #0
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	f002 0203 	and.w	r2, r2, #3
 800811e:	0092      	lsls	r2, r2, #2
 8008120:	4093      	lsls	r3, r2
 8008122:	69ba      	ldr	r2, [r7, #24]
 8008124:	4313      	orrs	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008128:	4935      	ldr	r1, [pc, #212]	; (8008200 <HAL_GPIO_Init+0x310>)
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	089b      	lsrs	r3, r3, #2
 800812e:	3302      	adds	r3, #2
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008136:	4b3b      	ldr	r3, [pc, #236]	; (8008224 <HAL_GPIO_Init+0x334>)
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	43db      	mvns	r3, r3
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	4013      	ands	r3, r2
 8008144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	4313      	orrs	r3, r2
 8008158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800815a:	4a32      	ldr	r2, [pc, #200]	; (8008224 <HAL_GPIO_Init+0x334>)
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008160:	4b30      	ldr	r3, [pc, #192]	; (8008224 <HAL_GPIO_Init+0x334>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	43db      	mvns	r3, r3
 800816a:	69ba      	ldr	r2, [r7, #24]
 800816c:	4013      	ands	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	4313      	orrs	r3, r2
 8008182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008184:	4a27      	ldr	r2, [pc, #156]	; (8008224 <HAL_GPIO_Init+0x334>)
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800818a:	4b26      	ldr	r3, [pc, #152]	; (8008224 <HAL_GPIO_Init+0x334>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	43db      	mvns	r3, r3
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	4013      	ands	r3, r2
 8008198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80081ae:	4a1d      	ldr	r2, [pc, #116]	; (8008224 <HAL_GPIO_Init+0x334>)
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80081b4:	4b1b      	ldr	r3, [pc, #108]	; (8008224 <HAL_GPIO_Init+0x334>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	43db      	mvns	r3, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4013      	ands	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80081d8:	4a12      	ldr	r2, [pc, #72]	; (8008224 <HAL_GPIO_Init+0x334>)
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	3301      	adds	r3, #1
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	2b0f      	cmp	r3, #15
 80081e8:	f67f ae90 	bls.w	8007f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	3724      	adds	r7, #36	; 0x24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40023800 	.word	0x40023800
 8008200:	40013800 	.word	0x40013800
 8008204:	40020000 	.word	0x40020000
 8008208:	40020400 	.word	0x40020400
 800820c:	40020800 	.word	0x40020800
 8008210:	40020c00 	.word	0x40020c00
 8008214:	40021000 	.word	0x40021000
 8008218:	40021400 	.word	0x40021400
 800821c:	40021800 	.word	0x40021800
 8008220:	40021c00 	.word	0x40021c00
 8008224:	40013c00 	.word	0x40013c00

08008228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	887b      	ldrh	r3, [r7, #2]
 800823a:	4013      	ands	r3, r2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
 8008244:	e001      	b.n	800824a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008246:	2300      	movs	r3, #0
 8008248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	807b      	strh	r3, [r7, #2]
 8008264:	4613      	mov	r3, r2
 8008266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008268:	787b      	ldrb	r3, [r7, #1]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800826e:	887a      	ldrh	r2, [r7, #2]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008274:	e003      	b.n	800827e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008276:	887b      	ldrh	r3, [r7, #2]
 8008278:	041a      	lsls	r2, r3, #16
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	619a      	str	r2, [r3, #24]
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
	...

0800828c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008296:	4b08      	ldr	r3, [pc, #32]	; (80082b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008298:	695a      	ldr	r2, [r3, #20]
 800829a:	88fb      	ldrh	r3, [r7, #6]
 800829c:	4013      	ands	r3, r2
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d006      	beq.n	80082b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80082a2:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80082a4:	88fb      	ldrh	r3, [r7, #6]
 80082a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f9 fc1a 	bl	8001ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40013c00 	.word	0x40013c00

080082bc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e059      	b.n	8008382 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d106      	bne.n	80082ee <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7fe faa9 	bl	8006840 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2203      	movs	r2, #3
 80082f2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082fc:	d102      	bne.n	8008304 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4618      	mov	r0, r3
 800830a:	f003 fd1d 	bl	800bd48 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	7c1a      	ldrb	r2, [r3, #16]
 8008316:	f88d 2000 	strb.w	r2, [sp]
 800831a:	3304      	adds	r3, #4
 800831c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800831e:	f003 fcaf 	bl	800bc80 <USB_CoreInit>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e026      	b.n	8008382 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2101      	movs	r1, #1
 800833a:	4618      	mov	r0, r3
 800833c:	f003 fd15 	bl	800bd6a <USB_SetCurrentMode>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2202      	movs	r2, #2
 800834a:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e017      	b.n	8008382 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	7c1a      	ldrb	r2, [r3, #16]
 800835a:	f88d 2000 	strb.w	r2, [sp]
 800835e:	3304      	adds	r3, #4
 8008360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008362:	f003 fded 	bl	800bf40 <USB_HostInit>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e004      	b.n	8008382 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <HAL_PWR_PVD_IRQHandler+0x20>)
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d005      	beq.n	80083a8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800839c:	f000 f808 	bl	80083b0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80083a0:	4b02      	ldr	r3, [pc, #8]	; (80083ac <HAL_PWR_PVD_IRQHandler+0x20>)
 80083a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80083a6:	615a      	str	r2, [r3, #20]
  }
}
 80083a8:	bf00      	nop
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40013c00 	.word	0x40013c00

080083b0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e267      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d075      	beq.n	80084ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083de:	4b88      	ldr	r3, [pc, #544]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 030c 	and.w	r3, r3, #12
 80083e6:	2b04      	cmp	r3, #4
 80083e8:	d00c      	beq.n	8008404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083ea:	4b85      	ldr	r3, [pc, #532]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d112      	bne.n	800841c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083f6:	4b82      	ldr	r3, [pc, #520]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008402:	d10b      	bne.n	800841c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008404:	4b7e      	ldr	r3, [pc, #504]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d05b      	beq.n	80084c8 <HAL_RCC_OscConfig+0x108>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d157      	bne.n	80084c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e242      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008424:	d106      	bne.n	8008434 <HAL_RCC_OscConfig+0x74>
 8008426:	4b76      	ldr	r3, [pc, #472]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a75      	ldr	r2, [pc, #468]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800842c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e01d      	b.n	8008470 <HAL_RCC_OscConfig+0xb0>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800843c:	d10c      	bne.n	8008458 <HAL_RCC_OscConfig+0x98>
 800843e:	4b70      	ldr	r3, [pc, #448]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a6f      	ldr	r2, [pc, #444]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	4b6d      	ldr	r3, [pc, #436]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a6c      	ldr	r2, [pc, #432]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	e00b      	b.n	8008470 <HAL_RCC_OscConfig+0xb0>
 8008458:	4b69      	ldr	r3, [pc, #420]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a68      	ldr	r2, [pc, #416]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800845e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	4b66      	ldr	r3, [pc, #408]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a65      	ldr	r2, [pc, #404]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800846a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800846e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d013      	beq.n	80084a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008478:	f7fe fa8e 	bl	8006998 <HAL_GetTick>
 800847c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800847e:	e008      	b.n	8008492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008480:	f7fe fa8a 	bl	8006998 <HAL_GetTick>
 8008484:	4602      	mov	r2, r0
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	2b64      	cmp	r3, #100	; 0x64
 800848c:	d901      	bls.n	8008492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e207      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008492:	4b5b      	ldr	r3, [pc, #364]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0f0      	beq.n	8008480 <HAL_RCC_OscConfig+0xc0>
 800849e:	e014      	b.n	80084ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a0:	f7fe fa7a 	bl	8006998 <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80084a8:	f7fe fa76 	bl	8006998 <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b64      	cmp	r3, #100	; 0x64
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e1f3      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084ba:	4b51      	ldr	r3, [pc, #324]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1f0      	bne.n	80084a8 <HAL_RCC_OscConfig+0xe8>
 80084c6:	e000      	b.n	80084ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0302 	and.w	r3, r3, #2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d063      	beq.n	800859e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084d6:	4b4a      	ldr	r3, [pc, #296]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f003 030c 	and.w	r3, r3, #12
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084e2:	4b47      	ldr	r3, [pc, #284]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d11c      	bne.n	8008528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ee:	4b44      	ldr	r3, [pc, #272]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d116      	bne.n	8008528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084fa:	4b41      	ldr	r3, [pc, #260]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <HAL_RCC_OscConfig+0x152>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d001      	beq.n	8008512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e1c7      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008512:	4b3b      	ldr	r3, [pc, #236]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	00db      	lsls	r3, r3, #3
 8008520:	4937      	ldr	r1, [pc, #220]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008522:	4313      	orrs	r3, r2
 8008524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008526:	e03a      	b.n	800859e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d020      	beq.n	8008572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008530:	4b34      	ldr	r3, [pc, #208]	; (8008604 <HAL_RCC_OscConfig+0x244>)
 8008532:	2201      	movs	r2, #1
 8008534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008536:	f7fe fa2f 	bl	8006998 <HAL_GetTick>
 800853a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800853c:	e008      	b.n	8008550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800853e:	f7fe fa2b 	bl	8006998 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b02      	cmp	r3, #2
 800854a:	d901      	bls.n	8008550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e1a8      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008550:	4b2b      	ldr	r3, [pc, #172]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0f0      	beq.n	800853e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800855c:	4b28      	ldr	r3, [pc, #160]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	4925      	ldr	r1, [pc, #148]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 800856c:	4313      	orrs	r3, r2
 800856e:	600b      	str	r3, [r1, #0]
 8008570:	e015      	b.n	800859e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008572:	4b24      	ldr	r3, [pc, #144]	; (8008604 <HAL_RCC_OscConfig+0x244>)
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008578:	f7fe fa0e 	bl	8006998 <HAL_GetTick>
 800857c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800857e:	e008      	b.n	8008592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008580:	f7fe fa0a 	bl	8006998 <HAL_GetTick>
 8008584:	4602      	mov	r2, r0
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	2b02      	cmp	r3, #2
 800858c:	d901      	bls.n	8008592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800858e:	2303      	movs	r3, #3
 8008590:	e187      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008592:	4b1b      	ldr	r3, [pc, #108]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f0      	bne.n	8008580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d036      	beq.n	8008618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d016      	beq.n	80085e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80085b2:	4b15      	ldr	r3, [pc, #84]	; (8008608 <HAL_RCC_OscConfig+0x248>)
 80085b4:	2201      	movs	r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b8:	f7fe f9ee 	bl	8006998 <HAL_GetTick>
 80085bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085be:	e008      	b.n	80085d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085c0:	f7fe f9ea 	bl	8006998 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e167      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085d2:	4b0b      	ldr	r3, [pc, #44]	; (8008600 <HAL_RCC_OscConfig+0x240>)
 80085d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCC_OscConfig+0x200>
 80085de:	e01b      	b.n	8008618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085e0:	4b09      	ldr	r3, [pc, #36]	; (8008608 <HAL_RCC_OscConfig+0x248>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085e6:	f7fe f9d7 	bl	8006998 <HAL_GetTick>
 80085ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085ec:	e00e      	b.n	800860c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085ee:	f7fe f9d3 	bl	8006998 <HAL_GetTick>
 80085f2:	4602      	mov	r2, r0
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d907      	bls.n	800860c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085fc:	2303      	movs	r3, #3
 80085fe:	e150      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
 8008600:	40023800 	.word	0x40023800
 8008604:	42470000 	.word	0x42470000
 8008608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800860c:	4b88      	ldr	r3, [pc, #544]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800860e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1ea      	bne.n	80085ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 8097 	beq.w	8008754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008626:	2300      	movs	r3, #0
 8008628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800862a:	4b81      	ldr	r3, [pc, #516]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10f      	bne.n	8008656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008636:	2300      	movs	r3, #0
 8008638:	60bb      	str	r3, [r7, #8]
 800863a:	4b7d      	ldr	r3, [pc, #500]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800863c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863e:	4a7c      	ldr	r2, [pc, #496]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 8008640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008644:	6413      	str	r3, [r2, #64]	; 0x40
 8008646:	4b7a      	ldr	r3, [pc, #488]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008652:	2301      	movs	r3, #1
 8008654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008656:	4b77      	ldr	r3, [pc, #476]	; (8008834 <HAL_RCC_OscConfig+0x474>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d118      	bne.n	8008694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008662:	4b74      	ldr	r3, [pc, #464]	; (8008834 <HAL_RCC_OscConfig+0x474>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a73      	ldr	r2, [pc, #460]	; (8008834 <HAL_RCC_OscConfig+0x474>)
 8008668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800866c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800866e:	f7fe f993 	bl	8006998 <HAL_GetTick>
 8008672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008674:	e008      	b.n	8008688 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008676:	f7fe f98f 	bl	8006998 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	2b02      	cmp	r3, #2
 8008682:	d901      	bls.n	8008688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e10c      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008688:	4b6a      	ldr	r3, [pc, #424]	; (8008834 <HAL_RCC_OscConfig+0x474>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0f0      	beq.n	8008676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d106      	bne.n	80086aa <HAL_RCC_OscConfig+0x2ea>
 800869c:	4b64      	ldr	r3, [pc, #400]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800869e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086a0:	4a63      	ldr	r2, [pc, #396]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086a2:	f043 0301 	orr.w	r3, r3, #1
 80086a6:	6713      	str	r3, [r2, #112]	; 0x70
 80086a8:	e01c      	b.n	80086e4 <HAL_RCC_OscConfig+0x324>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b05      	cmp	r3, #5
 80086b0:	d10c      	bne.n	80086cc <HAL_RCC_OscConfig+0x30c>
 80086b2:	4b5f      	ldr	r3, [pc, #380]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b6:	4a5e      	ldr	r2, [pc, #376]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086b8:	f043 0304 	orr.w	r3, r3, #4
 80086bc:	6713      	str	r3, [r2, #112]	; 0x70
 80086be:	4b5c      	ldr	r3, [pc, #368]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c2:	4a5b      	ldr	r2, [pc, #364]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086c4:	f043 0301 	orr.w	r3, r3, #1
 80086c8:	6713      	str	r3, [r2, #112]	; 0x70
 80086ca:	e00b      	b.n	80086e4 <HAL_RCC_OscConfig+0x324>
 80086cc:	4b58      	ldr	r3, [pc, #352]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d0:	4a57      	ldr	r2, [pc, #348]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086d2:	f023 0301 	bic.w	r3, r3, #1
 80086d6:	6713      	str	r3, [r2, #112]	; 0x70
 80086d8:	4b55      	ldr	r3, [pc, #340]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086dc:	4a54      	ldr	r2, [pc, #336]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80086de:	f023 0304 	bic.w	r3, r3, #4
 80086e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d015      	beq.n	8008718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ec:	f7fe f954 	bl	8006998 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f2:	e00a      	b.n	800870a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086f4:	f7fe f950 	bl	8006998 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008702:	4293      	cmp	r3, r2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e0cb      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800870a:	4b49      	ldr	r3, [pc, #292]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800870c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d0ee      	beq.n	80086f4 <HAL_RCC_OscConfig+0x334>
 8008716:	e014      	b.n	8008742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008718:	f7fe f93e 	bl	8006998 <HAL_GetTick>
 800871c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800871e:	e00a      	b.n	8008736 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008720:	f7fe f93a 	bl	8006998 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	f241 3288 	movw	r2, #5000	; 0x1388
 800872e:	4293      	cmp	r3, r2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e0b5      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008736:	4b3e      	ldr	r3, [pc, #248]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1ee      	bne.n	8008720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008742:	7dfb      	ldrb	r3, [r7, #23]
 8008744:	2b01      	cmp	r3, #1
 8008746:	d105      	bne.n	8008754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008748:	4b39      	ldr	r3, [pc, #228]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	4a38      	ldr	r2, [pc, #224]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 800874e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008752:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 80a1 	beq.w	80088a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800875e:	4b34      	ldr	r3, [pc, #208]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f003 030c 	and.w	r3, r3, #12
 8008766:	2b08      	cmp	r3, #8
 8008768:	d05c      	beq.n	8008824 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	2b02      	cmp	r3, #2
 8008770:	d141      	bne.n	80087f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008772:	4b31      	ldr	r3, [pc, #196]	; (8008838 <HAL_RCC_OscConfig+0x478>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008778:	f7fe f90e 	bl	8006998 <HAL_GetTick>
 800877c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800877e:	e008      	b.n	8008792 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008780:	f7fe f90a 	bl	8006998 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	2b02      	cmp	r3, #2
 800878c:	d901      	bls.n	8008792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e087      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008792:	4b27      	ldr	r3, [pc, #156]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1f0      	bne.n	8008780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	69da      	ldr	r2, [r3, #28]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	019b      	lsls	r3, r3, #6
 80087ae:	431a      	orrs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	085b      	lsrs	r3, r3, #1
 80087b6:	3b01      	subs	r3, #1
 80087b8:	041b      	lsls	r3, r3, #16
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	061b      	lsls	r3, r3, #24
 80087c2:	491b      	ldr	r1, [pc, #108]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087c8:	4b1b      	ldr	r3, [pc, #108]	; (8008838 <HAL_RCC_OscConfig+0x478>)
 80087ca:	2201      	movs	r2, #1
 80087cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ce:	f7fe f8e3 	bl	8006998 <HAL_GetTick>
 80087d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087d4:	e008      	b.n	80087e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087d6:	f7fe f8df 	bl	8006998 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e05c      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087e8:	4b11      	ldr	r3, [pc, #68]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f0      	beq.n	80087d6 <HAL_RCC_OscConfig+0x416>
 80087f4:	e054      	b.n	80088a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f6:	4b10      	ldr	r3, [pc, #64]	; (8008838 <HAL_RCC_OscConfig+0x478>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087fc:	f7fe f8cc 	bl	8006998 <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008804:	f7fe f8c8 	bl	8006998 <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e045      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <HAL_RCC_OscConfig+0x470>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f0      	bne.n	8008804 <HAL_RCC_OscConfig+0x444>
 8008822:	e03d      	b.n	80088a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d107      	bne.n	800883c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e038      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
 8008830:	40023800 	.word	0x40023800
 8008834:	40007000 	.word	0x40007000
 8008838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800883c:	4b1b      	ldr	r3, [pc, #108]	; (80088ac <HAL_RCC_OscConfig+0x4ec>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d028      	beq.n	800889c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008854:	429a      	cmp	r2, r3
 8008856:	d121      	bne.n	800889c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008862:	429a      	cmp	r2, r3
 8008864:	d11a      	bne.n	800889c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800886c:	4013      	ands	r3, r2
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008874:	4293      	cmp	r3, r2
 8008876:	d111      	bne.n	800889c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	3b01      	subs	r3, #1
 8008886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008888:	429a      	cmp	r2, r3
 800888a:	d107      	bne.n	800889c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008898:	429a      	cmp	r2, r3
 800889a:	d001      	beq.n	80088a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3718      	adds	r7, #24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	40023800 	.word	0x40023800

080088b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e0cc      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088c4:	4b68      	ldr	r3, [pc, #416]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0307 	and.w	r3, r3, #7
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d90c      	bls.n	80088ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d2:	4b65      	ldr	r3, [pc, #404]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088da:	4b63      	ldr	r3, [pc, #396]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d001      	beq.n	80088ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e0b8      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d020      	beq.n	800893a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008904:	4b59      	ldr	r3, [pc, #356]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	4a58      	ldr	r2, [pc, #352]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 800890a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800890e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800891c:	4b53      	ldr	r3, [pc, #332]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	4a52      	ldr	r2, [pc, #328]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008928:	4b50      	ldr	r3, [pc, #320]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	494d      	ldr	r1, [pc, #308]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008936:	4313      	orrs	r3, r2
 8008938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b00      	cmp	r3, #0
 8008944:	d044      	beq.n	80089d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d107      	bne.n	800895e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800894e:	4b47      	ldr	r3, [pc, #284]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d119      	bne.n	800898e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e07f      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d003      	beq.n	800896e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800896a:	2b03      	cmp	r3, #3
 800896c:	d107      	bne.n	800897e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800896e:	4b3f      	ldr	r3, [pc, #252]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d109      	bne.n	800898e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e06f      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800897e:	4b3b      	ldr	r3, [pc, #236]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e067      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800898e:	4b37      	ldr	r3, [pc, #220]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f023 0203 	bic.w	r2, r3, #3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	4934      	ldr	r1, [pc, #208]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 800899c:	4313      	orrs	r3, r2
 800899e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089a0:	f7fd fffa 	bl	8006998 <HAL_GetTick>
 80089a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a6:	e00a      	b.n	80089be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089a8:	f7fd fff6 	bl	8006998 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e04f      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089be:	4b2b      	ldr	r3, [pc, #172]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 020c 	and.w	r2, r3, #12
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d1eb      	bne.n	80089a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089d0:	4b25      	ldr	r3, [pc, #148]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d20c      	bcs.n	80089f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089e6:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <HAL_RCC_ClockConfig+0x1b8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0307 	and.w	r3, r3, #7
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d001      	beq.n	80089f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e032      	b.n	8008a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0304 	and.w	r3, r3, #4
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a04:	4b19      	ldr	r3, [pc, #100]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4916      	ldr	r1, [pc, #88]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a22:	4b12      	ldr	r3, [pc, #72]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	490e      	ldr	r1, [pc, #56]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a36:	f000 f821 	bl	8008a7c <HAL_RCC_GetSysClockFreq>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	091b      	lsrs	r3, r3, #4
 8008a42:	f003 030f 	and.w	r3, r3, #15
 8008a46:	490a      	ldr	r1, [pc, #40]	; (8008a70 <HAL_RCC_ClockConfig+0x1c0>)
 8008a48:	5ccb      	ldrb	r3, [r1, r3]
 8008a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4e:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <HAL_RCC_ClockConfig+0x1c4>)
 8008a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a52:	4b09      	ldr	r3, [pc, #36]	; (8008a78 <HAL_RCC_ClockConfig+0x1c8>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fc fe8a 	bl	8005770 <HAL_InitTick>

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	40023c00 	.word	0x40023c00
 8008a6c:	40023800 	.word	0x40023800
 8008a70:	08018044 	.word	0x08018044
 8008a74:	20000144 	.word	0x20000144
 8008a78:	20000148 	.word	0x20000148

08008a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a80:	b094      	sub	sp, #80	; 0x50
 8008a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	647b      	str	r3, [r7, #68]	; 0x44
 8008a88:	2300      	movs	r3, #0
 8008a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a94:	4b79      	ldr	r3, [pc, #484]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f003 030c 	and.w	r3, r3, #12
 8008a9c:	2b08      	cmp	r3, #8
 8008a9e:	d00d      	beq.n	8008abc <HAL_RCC_GetSysClockFreq+0x40>
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	f200 80e1 	bhi.w	8008c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d003      	beq.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aae:	e0db      	b.n	8008c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ab0:	4b73      	ldr	r3, [pc, #460]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ab2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008ab4:	e0db      	b.n	8008c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ab6:	4b72      	ldr	r3, [pc, #456]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8008ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008aba:	e0d8      	b.n	8008c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008abc:	4b6f      	ldr	r3, [pc, #444]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008ac6:	4b6d      	ldr	r3, [pc, #436]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d063      	beq.n	8008b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ad2:	4b6a      	ldr	r3, [pc, #424]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	099b      	lsrs	r3, r3, #6
 8008ad8:	2200      	movs	r2, #0
 8008ada:	63bb      	str	r3, [r7, #56]	; 0x38
 8008adc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008aee:	4622      	mov	r2, r4
 8008af0:	462b      	mov	r3, r5
 8008af2:	f04f 0000 	mov.w	r0, #0
 8008af6:	f04f 0100 	mov.w	r1, #0
 8008afa:	0159      	lsls	r1, r3, #5
 8008afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b00:	0150      	lsls	r0, r2, #5
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	4621      	mov	r1, r4
 8008b08:	1a51      	subs	r1, r2, r1
 8008b0a:	6139      	str	r1, [r7, #16]
 8008b0c:	4629      	mov	r1, r5
 8008b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	f04f 0300 	mov.w	r3, #0
 8008b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b20:	4659      	mov	r1, fp
 8008b22:	018b      	lsls	r3, r1, #6
 8008b24:	4651      	mov	r1, sl
 8008b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008b2a:	4651      	mov	r1, sl
 8008b2c:	018a      	lsls	r2, r1, #6
 8008b2e:	4651      	mov	r1, sl
 8008b30:	ebb2 0801 	subs.w	r8, r2, r1
 8008b34:	4659      	mov	r1, fp
 8008b36:	eb63 0901 	sbc.w	r9, r3, r1
 8008b3a:	f04f 0200 	mov.w	r2, #0
 8008b3e:	f04f 0300 	mov.w	r3, #0
 8008b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b4e:	4690      	mov	r8, r2
 8008b50:	4699      	mov	r9, r3
 8008b52:	4623      	mov	r3, r4
 8008b54:	eb18 0303 	adds.w	r3, r8, r3
 8008b58:	60bb      	str	r3, [r7, #8]
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	eb49 0303 	adc.w	r3, r9, r3
 8008b60:	60fb      	str	r3, [r7, #12]
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008b6e:	4629      	mov	r1, r5
 8008b70:	028b      	lsls	r3, r1, #10
 8008b72:	4621      	mov	r1, r4
 8008b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b78:	4621      	mov	r1, r4
 8008b7a:	028a      	lsls	r2, r1, #10
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b82:	2200      	movs	r2, #0
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b8c:	f7f8 f87c 	bl	8000c88 <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4613      	mov	r3, r2
 8008b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b98:	e058      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b9a:	4b38      	ldr	r3, [pc, #224]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	099b      	lsrs	r3, r3, #6
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008baa:	623b      	str	r3, [r7, #32]
 8008bac:	2300      	movs	r3, #0
 8008bae:	627b      	str	r3, [r7, #36]	; 0x24
 8008bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	464b      	mov	r3, r9
 8008bb8:	f04f 0000 	mov.w	r0, #0
 8008bbc:	f04f 0100 	mov.w	r1, #0
 8008bc0:	0159      	lsls	r1, r3, #5
 8008bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bc6:	0150      	lsls	r0, r2, #5
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4641      	mov	r1, r8
 8008bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8008bd2:	4649      	mov	r1, r9
 8008bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8008bd8:	f04f 0200 	mov.w	r2, #0
 8008bdc:	f04f 0300 	mov.w	r3, #0
 8008be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008bec:	ebb2 040a 	subs.w	r4, r2, sl
 8008bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8008bf4:	f04f 0200 	mov.w	r2, #0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	00eb      	lsls	r3, r5, #3
 8008bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c02:	00e2      	lsls	r2, r4, #3
 8008c04:	4614      	mov	r4, r2
 8008c06:	461d      	mov	r5, r3
 8008c08:	4643      	mov	r3, r8
 8008c0a:	18e3      	adds	r3, r4, r3
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	464b      	mov	r3, r9
 8008c10:	eb45 0303 	adc.w	r3, r5, r3
 8008c14:	607b      	str	r3, [r7, #4]
 8008c16:	f04f 0200 	mov.w	r2, #0
 8008c1a:	f04f 0300 	mov.w	r3, #0
 8008c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008c22:	4629      	mov	r1, r5
 8008c24:	028b      	lsls	r3, r1, #10
 8008c26:	4621      	mov	r1, r4
 8008c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	028a      	lsls	r2, r1, #10
 8008c30:	4610      	mov	r0, r2
 8008c32:	4619      	mov	r1, r3
 8008c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c36:	2200      	movs	r2, #0
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	61fa      	str	r2, [r7, #28]
 8008c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c40:	f7f8 f822 	bl	8000c88 <__aeabi_uldivmod>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4613      	mov	r3, r2
 8008c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008c4c:	4b0b      	ldr	r3, [pc, #44]	; (8008c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	0c1b      	lsrs	r3, r3, #16
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	3301      	adds	r3, #1
 8008c58:	005b      	lsls	r3, r3, #1
 8008c5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c66:	e002      	b.n	8008c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c68:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3750      	adds	r7, #80	; 0x50
 8008c74:	46bd      	mov	sp, r7
 8008c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7a:	bf00      	nop
 8008c7c:	40023800 	.word	0x40023800
 8008c80:	00f42400 	.word	0x00f42400

08008c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c88:	4b03      	ldr	r3, [pc, #12]	; (8008c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	20000144 	.word	0x20000144

08008c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ca0:	f7ff fff0 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	0a9b      	lsrs	r3, r3, #10
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	4903      	ldr	r1, [pc, #12]	; (8008cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008cb2:	5ccb      	ldrb	r3, [r1, r3]
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	40023800 	.word	0x40023800
 8008cc0:	08018054 	.word	0x08018054

08008cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008cc8:	f7ff ffdc 	bl	8008c84 <HAL_RCC_GetHCLKFreq>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	0b5b      	lsrs	r3, r3, #13
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	4903      	ldr	r1, [pc, #12]	; (8008ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008cda:	5ccb      	ldrb	r3, [r1, r3]
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	08018054 	.word	0x08018054

08008cec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	220f      	movs	r2, #15
 8008cfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008cfc:	4b12      	ldr	r3, [pc, #72]	; (8008d48 <HAL_RCC_GetClockConfig+0x5c>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f003 0203 	and.w	r2, r3, #3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d08:	4b0f      	ldr	r3, [pc, #60]	; (8008d48 <HAL_RCC_GetClockConfig+0x5c>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008d14:	4b0c      	ldr	r3, [pc, #48]	; (8008d48 <HAL_RCC_GetClockConfig+0x5c>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008d20:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <HAL_RCC_GetClockConfig+0x5c>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	08db      	lsrs	r3, r3, #3
 8008d26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008d2e:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <HAL_RCC_GetClockConfig+0x60>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0207 	and.w	r2, r3, #7
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	601a      	str	r2, [r3, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	40023c00 	.word	0x40023c00

08008d50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e07b      	b.n	8008e5a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d108      	bne.n	8008d7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d72:	d009      	beq.n	8008d88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	61da      	str	r2, [r3, #28]
 8008d7a:	e005      	b.n	8008d88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d106      	bne.n	8008da8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7fc fc40 	bl	8005628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008df8:	431a      	orrs	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69db      	ldr	r3, [r3, #28]
 8008dfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e0c:	ea42 0103 	orr.w	r1, r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e14:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	f003 0104 	and.w	r1, r3, #4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	f003 0210 	and.w	r2, r3, #16
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69da      	ldr	r2, [r3, #28]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e48:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b088      	sub	sp, #32
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	60b9      	str	r1, [r7, #8]
 8008e6c:	603b      	str	r3, [r7, #0]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e72:	2300      	movs	r3, #0
 8008e74:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d101      	bne.n	8008e84 <HAL_SPI_Transmit+0x22>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e12d      	b.n	80090e0 <HAL_SPI_Transmit+0x27e>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e8c:	f7fd fd84 	bl	8006998 <HAL_GetTick>
 8008e90:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e92:	88fb      	ldrh	r3, [r7, #6]
 8008e94:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d002      	beq.n	8008ea8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ea6:	e116      	b.n	80090d6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d002      	beq.n	8008eb4 <HAL_SPI_Transmit+0x52>
 8008eae:	88fb      	ldrh	r3, [r7, #6]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008eb8:	e10d      	b.n	80090d6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2203      	movs	r2, #3
 8008ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	88fa      	ldrh	r2, [r7, #6]
 8008ed2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	88fa      	ldrh	r2, [r7, #6]
 8008ed8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f00:	d10f      	bne.n	8008f22 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2c:	2b40      	cmp	r3, #64	; 0x40
 8008f2e:	d007      	beq.n	8008f40 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f48:	d14f      	bne.n	8008fea <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <HAL_SPI_Transmit+0xf6>
 8008f52:	8afb      	ldrh	r3, [r7, #22]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d142      	bne.n	8008fde <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f5c:	881a      	ldrh	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f68:	1c9a      	adds	r2, r3, #2
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	3b01      	subs	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f7c:	e02f      	b.n	8008fde <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0302 	and.w	r3, r3, #2
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d112      	bne.n	8008fb2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9c:	1c9a      	adds	r2, r3, #2
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	86da      	strh	r2, [r3, #54]	; 0x36
 8008fb0:	e015      	b.n	8008fde <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fb2:	f7fd fcf1 	bl	8006998 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d803      	bhi.n	8008fca <HAL_SPI_Transmit+0x168>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d102      	bne.n	8008fd0 <HAL_SPI_Transmit+0x16e>
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008fdc:	e07b      	b.n	80090d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1ca      	bne.n	8008f7e <HAL_SPI_Transmit+0x11c>
 8008fe8:	e050      	b.n	800908c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <HAL_SPI_Transmit+0x196>
 8008ff2:	8afb      	ldrh	r3, [r7, #22]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d144      	bne.n	8009082 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	330c      	adds	r3, #12
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	1c5a      	adds	r2, r3, #1
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800901e:	e030      	b.n	8009082 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	f003 0302 	and.w	r3, r3, #2
 800902a:	2b02      	cmp	r3, #2
 800902c:	d113      	bne.n	8009056 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	330c      	adds	r3, #12
 8009038:	7812      	ldrb	r2, [r2, #0]
 800903a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800904a:	b29b      	uxth	r3, r3
 800904c:	3b01      	subs	r3, #1
 800904e:	b29a      	uxth	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	86da      	strh	r2, [r3, #54]	; 0x36
 8009054:	e015      	b.n	8009082 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009056:	f7fd fc9f 	bl	8006998 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	429a      	cmp	r2, r3
 8009064:	d803      	bhi.n	800906e <HAL_SPI_Transmit+0x20c>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800906c:	d102      	bne.n	8009074 <HAL_SPI_Transmit+0x212>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d106      	bne.n	8009082 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009080:	e029      	b.n	80090d6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009086:	b29b      	uxth	r3, r3
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1c9      	bne.n	8009020 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fa61 	bl	8009558 <SPI_EndRxTxTransaction>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d002      	beq.n	80090a2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10a      	bne.n	80090c0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090aa:	2300      	movs	r3, #0
 80090ac:	613b      	str	r3, [r7, #16]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	613b      	str	r3, [r7, #16]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	613b      	str	r3, [r7, #16]
 80090be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80090c8:	2301      	movs	r3, #1
 80090ca:	77fb      	strb	r3, [r7, #31]
 80090cc:	e003      	b.n	80090d6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08c      	sub	sp, #48	; 0x30
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80090f6:	2301      	movs	r3, #1
 80090f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_SPI_TransmitReceive+0x26>
 800910a:	2302      	movs	r3, #2
 800910c:	e198      	b.n	8009440 <HAL_SPI_TransmitReceive+0x358>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009116:	f7fd fc3f 	bl	8006998 <HAL_GetTick>
 800911a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800912c:	887b      	ldrh	r3, [r7, #2]
 800912e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009134:	2b01      	cmp	r3, #1
 8009136:	d00f      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x70>
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800913e:	d107      	bne.n	8009150 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d103      	bne.n	8009150 <HAL_SPI_TransmitReceive+0x68>
 8009148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800914c:	2b04      	cmp	r3, #4
 800914e:	d003      	beq.n	8009158 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009150:	2302      	movs	r3, #2
 8009152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009156:	e16d      	b.n	8009434 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_SPI_TransmitReceive+0x82>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d002      	beq.n	800916a <HAL_SPI_TransmitReceive+0x82>
 8009164:	887b      	ldrh	r3, [r7, #2]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d103      	bne.n	8009172 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009170:	e160      	b.n	8009434 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009178:	b2db      	uxtb	r3, r3
 800917a:	2b04      	cmp	r3, #4
 800917c:	d003      	beq.n	8009186 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2205      	movs	r2, #5
 8009182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2200      	movs	r2, #0
 800918a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	887a      	ldrh	r2, [r7, #2]
 8009196:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	887a      	ldrh	r2, [r7, #2]
 800919c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	887a      	ldrh	r2, [r7, #2]
 80091a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	887a      	ldrh	r2, [r7, #2]
 80091ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d007      	beq.n	80091da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091e2:	d17c      	bne.n	80092de <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d002      	beq.n	80091f2 <HAL_SPI_TransmitReceive+0x10a>
 80091ec:	8b7b      	ldrh	r3, [r7, #26]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d16a      	bne.n	80092c8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f6:	881a      	ldrh	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009202:	1c9a      	adds	r2, r3, #2
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009216:	e057      	b.n	80092c8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b02      	cmp	r3, #2
 8009224:	d11b      	bne.n	800925e <HAL_SPI_TransmitReceive+0x176>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800922a:	b29b      	uxth	r3, r3
 800922c:	2b00      	cmp	r3, #0
 800922e:	d016      	beq.n	800925e <HAL_SPI_TransmitReceive+0x176>
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	2b01      	cmp	r3, #1
 8009234:	d113      	bne.n	800925e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800923a:	881a      	ldrh	r2, [r3, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	1c9a      	adds	r2, r3, #2
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	b29a      	uxth	r2, r3
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b01      	cmp	r3, #1
 800926a:	d119      	bne.n	80092a0 <HAL_SPI_TransmitReceive+0x1b8>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d014      	beq.n	80092a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68da      	ldr	r2, [r3, #12]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	b292      	uxth	r2, r2
 8009282:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009288:	1c9a      	adds	r2, r3, #2
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800929c:	2301      	movs	r3, #1
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80092a0:	f7fd fb7a 	bl	8006998 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d80b      	bhi.n	80092c8 <HAL_SPI_TransmitReceive+0x1e0>
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d007      	beq.n	80092c8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80092c6:	e0b5      	b.n	8009434 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1a2      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x130>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d19d      	bne.n	8009218 <HAL_SPI_TransmitReceive+0x130>
 80092dc:	e080      	b.n	80093e0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d002      	beq.n	80092ec <HAL_SPI_TransmitReceive+0x204>
 80092e6:	8b7b      	ldrh	r3, [r7, #26]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d16f      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	330c      	adds	r3, #12
 80092f6:	7812      	ldrb	r2, [r2, #0]
 80092f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009308:	b29b      	uxth	r3, r3
 800930a:	3b01      	subs	r3, #1
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009312:	e05b      	b.n	80093cc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b02      	cmp	r3, #2
 8009320:	d11c      	bne.n	800935c <HAL_SPI_TransmitReceive+0x274>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009326:	b29b      	uxth	r3, r3
 8009328:	2b00      	cmp	r3, #0
 800932a:	d017      	beq.n	800935c <HAL_SPI_TransmitReceive+0x274>
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	2b01      	cmp	r3, #1
 8009330:	d114      	bne.n	800935c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	7812      	ldrb	r2, [r2, #0]
 800933e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b01      	cmp	r3, #1
 8009368:	d119      	bne.n	800939e <HAL_SPI_TransmitReceive+0x2b6>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936e:	b29b      	uxth	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d014      	beq.n	800939e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68da      	ldr	r2, [r3, #12]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009386:	1c5a      	adds	r2, r3, #1
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009390:	b29b      	uxth	r3, r3
 8009392:	3b01      	subs	r3, #1
 8009394:	b29a      	uxth	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800939a:	2301      	movs	r3, #1
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800939e:	f7fd fafb 	bl	8006998 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d803      	bhi.n	80093b6 <HAL_SPI_TransmitReceive+0x2ce>
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b4:	d102      	bne.n	80093bc <HAL_SPI_TransmitReceive+0x2d4>
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d107      	bne.n	80093cc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2201      	movs	r2, #1
 80093c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80093ca:	e033      	b.n	8009434 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093d0:	b29b      	uxth	r3, r3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d19e      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x22c>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d199      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80093e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 f8b7 	bl	8009558 <SPI_EndRxTxTransaction>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d006      	beq.n	80093fe <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2220      	movs	r2, #32
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80093fc:	e01a      	b.n	8009434 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009406:	2300      	movs	r3, #0
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800942a:	e003      	b.n	8009434 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800943c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009440:	4618      	mov	r0, r3
 8009442:	3730      	adds	r7, #48	; 0x30
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009458:	f7fd fa9e 	bl	8006998 <HAL_GetTick>
 800945c:	4602      	mov	r2, r0
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	1a9b      	subs	r3, r3, r2
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	4413      	add	r3, r2
 8009466:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009468:	f7fd fa96 	bl	8006998 <HAL_GetTick>
 800946c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800946e:	4b39      	ldr	r3, [pc, #228]	; (8009554 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	015b      	lsls	r3, r3, #5
 8009474:	0d1b      	lsrs	r3, r3, #20
 8009476:	69fa      	ldr	r2, [r7, #28]
 8009478:	fb02 f303 	mul.w	r3, r2, r3
 800947c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800947e:	e054      	b.n	800952a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009486:	d050      	beq.n	800952a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009488:	f7fd fa86 	bl	8006998 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	429a      	cmp	r2, r3
 8009496:	d902      	bls.n	800949e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d13d      	bne.n	800951a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094b6:	d111      	bne.n	80094dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094c0:	d004      	beq.n	80094cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ca:	d107      	bne.n	80094dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094e4:	d10f      	bne.n	8009506 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e017      	b.n	800954a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	3b01      	subs	r3, #1
 8009528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689a      	ldr	r2, [r3, #8]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	4013      	ands	r3, r2
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	429a      	cmp	r2, r3
 8009538:	bf0c      	ite	eq
 800953a:	2301      	moveq	r3, #1
 800953c:	2300      	movne	r3, #0
 800953e:	b2db      	uxtb	r3, r3
 8009540:	461a      	mov	r2, r3
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	429a      	cmp	r2, r3
 8009546:	d19b      	bne.n	8009480 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3720      	adds	r7, #32
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000144 	.word	0x20000144

08009558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af02      	add	r7, sp, #8
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	9300      	str	r3, [sp, #0]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2201      	movs	r2, #1
 800956c:	2102      	movs	r1, #2
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff ff6a 	bl	8009448 <SPI_WaitFlagStateUntilTimeout>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d007      	beq.n	800958a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	f043 0220 	orr.w	r2, r3, #32
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8009586:	2303      	movs	r3, #3
 8009588:	e032      	b.n	80095f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800958a:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <SPI_EndRxTxTransaction+0xa0>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a1b      	ldr	r2, [pc, #108]	; (80095fc <SPI_EndRxTxTransaction+0xa4>)
 8009590:	fba2 2303 	umull	r2, r3, r2, r3
 8009594:	0d5b      	lsrs	r3, r3, #21
 8009596:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800959a:	fb02 f303 	mul.w	r3, r2, r3
 800959e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095a8:	d112      	bne.n	80095d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	2200      	movs	r2, #0
 80095b2:	2180      	movs	r1, #128	; 0x80
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff ff47 	bl	8009448 <SPI_WaitFlagStateUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d016      	beq.n	80095ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c4:	f043 0220 	orr.w	r2, r3, #32
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e00f      	b.n	80095f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	3b01      	subs	r3, #1
 80095da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e6:	2b80      	cmp	r3, #128	; 0x80
 80095e8:	d0f2      	beq.n	80095d0 <SPI_EndRxTxTransaction+0x78>
 80095ea:	e000      	b.n	80095ee <SPI_EndRxTxTransaction+0x96>
        break;
 80095ec:	bf00      	nop
  }

  return HAL_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20000144 	.word	0x20000144
 80095fc:	165e9f81 	.word	0x165e9f81

08009600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e041      	b.n	8009696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7fc fd8e 	bl	8006148 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3304      	adds	r3, #4
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f000 fc62 	bl	8009f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2201      	movs	r2, #1
 8009650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d001      	beq.n	80096b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e04e      	b.n	8009756 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a23      	ldr	r2, [pc, #140]	; (8009764 <HAL_TIM_Base_Start_IT+0xc4>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d022      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096e2:	d01d      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a1f      	ldr	r2, [pc, #124]	; (8009768 <HAL_TIM_Base_Start_IT+0xc8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d018      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a1e      	ldr	r2, [pc, #120]	; (800976c <HAL_TIM_Base_Start_IT+0xcc>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d013      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a1c      	ldr	r2, [pc, #112]	; (8009770 <HAL_TIM_Base_Start_IT+0xd0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d00e      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a1b      	ldr	r2, [pc, #108]	; (8009774 <HAL_TIM_Base_Start_IT+0xd4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d009      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a19      	ldr	r2, [pc, #100]	; (8009778 <HAL_TIM_Base_Start_IT+0xd8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d004      	beq.n	8009720 <HAL_TIM_Base_Start_IT+0x80>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a18      	ldr	r2, [pc, #96]	; (800977c <HAL_TIM_Base_Start_IT+0xdc>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d111      	bne.n	8009744 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2b06      	cmp	r3, #6
 8009730:	d010      	beq.n	8009754 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f042 0201 	orr.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009742:	e007      	b.n	8009754 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f042 0201 	orr.w	r2, r2, #1
 8009752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40010000 	.word	0x40010000
 8009768:	40000400 	.word	0x40000400
 800976c:	40000800 	.word	0x40000800
 8009770:	40000c00 	.word	0x40000c00
 8009774:	40010400 	.word	0x40010400
 8009778:	40014000 	.word	0x40014000
 800977c:	40001800 	.word	0x40001800

08009780 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e041      	b.n	8009816 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d106      	bne.n	80097ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f839 	bl	800981e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4619      	mov	r1, r3
 80097be:	4610      	mov	r0, r2
 80097c0:	f000 fba2 	bl	8009f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800981e:	b480      	push	{r7}
 8009820:	b083      	sub	sp, #12
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009826:	bf00      	nop
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr
	...

08009834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_TIM_PWM_Start+0x24>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b01      	cmp	r3, #1
 800984e:	bf14      	ite	ne
 8009850:	2301      	movne	r3, #1
 8009852:	2300      	moveq	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	e022      	b.n	800989e <HAL_TIM_PWM_Start+0x6a>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b04      	cmp	r3, #4
 800985c:	d109      	bne.n	8009872 <HAL_TIM_PWM_Start+0x3e>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b01      	cmp	r3, #1
 8009868:	bf14      	ite	ne
 800986a:	2301      	movne	r3, #1
 800986c:	2300      	moveq	r3, #0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	e015      	b.n	800989e <HAL_TIM_PWM_Start+0x6a>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b08      	cmp	r3, #8
 8009876:	d109      	bne.n	800988c <HAL_TIM_PWM_Start+0x58>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b01      	cmp	r3, #1
 8009882:	bf14      	ite	ne
 8009884:	2301      	movne	r3, #1
 8009886:	2300      	moveq	r3, #0
 8009888:	b2db      	uxtb	r3, r3
 800988a:	e008      	b.n	800989e <HAL_TIM_PWM_Start+0x6a>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009892:	b2db      	uxtb	r3, r3
 8009894:	2b01      	cmp	r3, #1
 8009896:	bf14      	ite	ne
 8009898:	2301      	movne	r3, #1
 800989a:	2300      	moveq	r3, #0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d001      	beq.n	80098a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098a2:	2301      	movs	r3, #1
 80098a4:	e07c      	b.n	80099a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d104      	bne.n	80098b6 <HAL_TIM_PWM_Start+0x82>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b4:	e013      	b.n	80098de <HAL_TIM_PWM_Start+0xaa>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d104      	bne.n	80098c6 <HAL_TIM_PWM_Start+0x92>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2202      	movs	r2, #2
 80098c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098c4:	e00b      	b.n	80098de <HAL_TIM_PWM_Start+0xaa>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d104      	bne.n	80098d6 <HAL_TIM_PWM_Start+0xa2>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098d4:	e003      	b.n	80098de <HAL_TIM_PWM_Start+0xaa>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2202      	movs	r2, #2
 80098da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2201      	movs	r2, #1
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fe04 	bl	800a4f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a2d      	ldr	r2, [pc, #180]	; (80099a8 <HAL_TIM_PWM_Start+0x174>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d004      	beq.n	8009900 <HAL_TIM_PWM_Start+0xcc>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a2c      	ldr	r2, [pc, #176]	; (80099ac <HAL_TIM_PWM_Start+0x178>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d101      	bne.n	8009904 <HAL_TIM_PWM_Start+0xd0>
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <HAL_TIM_PWM_Start+0xd2>
 8009904:	2300      	movs	r3, #0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009918:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a22      	ldr	r2, [pc, #136]	; (80099a8 <HAL_TIM_PWM_Start+0x174>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d022      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800992c:	d01d      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a1f      	ldr	r2, [pc, #124]	; (80099b0 <HAL_TIM_PWM_Start+0x17c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d018      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a1d      	ldr	r2, [pc, #116]	; (80099b4 <HAL_TIM_PWM_Start+0x180>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a1c      	ldr	r2, [pc, #112]	; (80099b8 <HAL_TIM_PWM_Start+0x184>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00e      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a16      	ldr	r2, [pc, #88]	; (80099ac <HAL_TIM_PWM_Start+0x178>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d009      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a18      	ldr	r2, [pc, #96]	; (80099bc <HAL_TIM_PWM_Start+0x188>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <HAL_TIM_PWM_Start+0x136>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a16      	ldr	r2, [pc, #88]	; (80099c0 <HAL_TIM_PWM_Start+0x18c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d111      	bne.n	800998e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b06      	cmp	r3, #6
 800997a:	d010      	beq.n	800999e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0201 	orr.w	r2, r2, #1
 800998a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998c:	e007      	b.n	800999e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f042 0201 	orr.w	r2, r2, #1
 800999c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	40010000 	.word	0x40010000
 80099ac:	40010400 	.word	0x40010400
 80099b0:	40000400 	.word	0x40000400
 80099b4:	40000800 	.word	0x40000800
 80099b8:	40000c00 	.word	0x40000c00
 80099bc:	40014000 	.word	0x40014000
 80099c0:	40001800 	.word	0x40001800

080099c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d020      	beq.n	8009a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d01b      	beq.n	8009a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f06f 0202 	mvn.w	r2, #2
 80099f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d003      	beq.n	8009a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa5b 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009a14:	e005      	b.n	8009a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 fa4d 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fa5e 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f003 0304 	and.w	r3, r3, #4
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d020      	beq.n	8009a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f003 0304 	and.w	r3, r3, #4
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d01b      	beq.n	8009a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f06f 0204 	mvn.w	r2, #4
 8009a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	699b      	ldr	r3, [r3, #24]
 8009a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d003      	beq.n	8009a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 fa35 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009a60:	e005      	b.n	8009a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa27 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fa38 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d020      	beq.n	8009ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f003 0308 	and.w	r3, r3, #8
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01b      	beq.n	8009ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f06f 0208 	mvn.w	r2, #8
 8009a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2204      	movs	r2, #4
 8009a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa0f 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009aac:	e005      	b.n	8009aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fa01 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fa12 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f003 0310 	and.w	r3, r3, #16
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d020      	beq.n	8009b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01b      	beq.n	8009b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f06f 0210 	mvn.w	r2, #16
 8009adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2208      	movs	r2, #8
 8009ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f9e9 	bl	8009eca <HAL_TIM_IC_CaptureCallback>
 8009af8:	e005      	b.n	8009b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f9db 	bl	8009eb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f9ec 	bl	8009ede <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00c      	beq.n	8009b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d007      	beq.n	8009b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0201 	mvn.w	r2, #1
 8009b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7f8 fabc 	bl	80020a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00c      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d007      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fdce 	bl	800a6f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00c      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d007      	beq.n	8009b78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f9bd 	bl	8009ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f003 0320 	and.w	r3, r3, #32
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00c      	beq.n	8009b9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d007      	beq.n	8009b9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f06f 0220 	mvn.w	r2, #32
 8009b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fda0 	bl	800a6dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d101      	bne.n	8009bc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e0ae      	b.n	8009d20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b0c      	cmp	r3, #12
 8009bce:	f200 809f 	bhi.w	8009d10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009bd2:	a201      	add	r2, pc, #4	; (adr r2, 8009bd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bd8:	08009c0d 	.word	0x08009c0d
 8009bdc:	08009d11 	.word	0x08009d11
 8009be0:	08009d11 	.word	0x08009d11
 8009be4:	08009d11 	.word	0x08009d11
 8009be8:	08009c4d 	.word	0x08009c4d
 8009bec:	08009d11 	.word	0x08009d11
 8009bf0:	08009d11 	.word	0x08009d11
 8009bf4:	08009d11 	.word	0x08009d11
 8009bf8:	08009c8f 	.word	0x08009c8f
 8009bfc:	08009d11 	.word	0x08009d11
 8009c00:	08009d11 	.word	0x08009d11
 8009c04:	08009d11 	.word	0x08009d11
 8009c08:	08009ccf 	.word	0x08009ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68b9      	ldr	r1, [r7, #8]
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 fa24 	bl	800a060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	699a      	ldr	r2, [r3, #24]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f042 0208 	orr.w	r2, r2, #8
 8009c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 0204 	bic.w	r2, r2, #4
 8009c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6999      	ldr	r1, [r3, #24]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	691a      	ldr	r2, [r3, #16]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	619a      	str	r2, [r3, #24]
      break;
 8009c4a:	e064      	b.n	8009d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68b9      	ldr	r1, [r7, #8]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fa74 	bl	800a140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699a      	ldr	r2, [r3, #24]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6999      	ldr	r1, [r3, #24]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	021a      	lsls	r2, r3, #8
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	619a      	str	r2, [r3, #24]
      break;
 8009c8c:	e043      	b.n	8009d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f000 fac9 	bl	800a22c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69da      	ldr	r2, [r3, #28]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f042 0208 	orr.w	r2, r2, #8
 8009ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69da      	ldr	r2, [r3, #28]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f022 0204 	bic.w	r2, r2, #4
 8009cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	69d9      	ldr	r1, [r3, #28]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	691a      	ldr	r2, [r3, #16]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	61da      	str	r2, [r3, #28]
      break;
 8009ccc:	e023      	b.n	8009d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68b9      	ldr	r1, [r7, #8]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fb1d 	bl	800a314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69da      	ldr	r2, [r3, #28]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69da      	ldr	r2, [r3, #28]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	69d9      	ldr	r1, [r3, #28]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	021a      	lsls	r2, r3, #8
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	430a      	orrs	r2, r1
 8009d0c:	61da      	str	r2, [r3, #28]
      break;
 8009d0e:	e002      	b.n	8009d16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	75fb      	strb	r3, [r7, #23]
      break;
 8009d14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_TIM_ConfigClockSource+0x1c>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e0b4      	b.n	8009eae <HAL_TIM_ConfigClockSource+0x186>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68ba      	ldr	r2, [r7, #8]
 8009d72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d7c:	d03e      	beq.n	8009dfc <HAL_TIM_ConfigClockSource+0xd4>
 8009d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d82:	f200 8087 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8a:	f000 8086 	beq.w	8009e9a <HAL_TIM_ConfigClockSource+0x172>
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d92:	d87f      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009d94:	2b70      	cmp	r3, #112	; 0x70
 8009d96:	d01a      	beq.n	8009dce <HAL_TIM_ConfigClockSource+0xa6>
 8009d98:	2b70      	cmp	r3, #112	; 0x70
 8009d9a:	d87b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009d9c:	2b60      	cmp	r3, #96	; 0x60
 8009d9e:	d050      	beq.n	8009e42 <HAL_TIM_ConfigClockSource+0x11a>
 8009da0:	2b60      	cmp	r3, #96	; 0x60
 8009da2:	d877      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009da4:	2b50      	cmp	r3, #80	; 0x50
 8009da6:	d03c      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0xfa>
 8009da8:	2b50      	cmp	r3, #80	; 0x50
 8009daa:	d873      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009dac:	2b40      	cmp	r3, #64	; 0x40
 8009dae:	d058      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x13a>
 8009db0:	2b40      	cmp	r3, #64	; 0x40
 8009db2:	d86f      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009db4:	2b30      	cmp	r3, #48	; 0x30
 8009db6:	d064      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x15a>
 8009db8:	2b30      	cmp	r3, #48	; 0x30
 8009dba:	d86b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d060      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x15a>
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	d867      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05c      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x15a>
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d05a      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x15a>
 8009dcc:	e062      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dde:	f000 fb69 	bl	800a4b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	609a      	str	r2, [r3, #8]
      break;
 8009dfa:	e04f      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e0c:	f000 fb52 	bl	800a4b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e1e:	609a      	str	r2, [r3, #8]
      break;
 8009e20:	e03c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f000 fac6 	bl	800a3c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2150      	movs	r1, #80	; 0x50
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 fb1f 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009e40:	e02c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f000 fae5 	bl	800a41e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2160      	movs	r1, #96	; 0x60
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fb0f 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009e60:	e01c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f000 faa6 	bl	800a3c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2140      	movs	r1, #64	; 0x40
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 faff 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009e80:	e00c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f000 faf6 	bl	800a47e <TIM_ITRx_SetConfig>
      break;
 8009e92:	e003      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
      break;
 8009e98:	e000      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009efa:	bf00      	nop
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
	...

08009f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	4a46      	ldr	r2, [pc, #280]	; (800a034 <TIM_Base_SetConfig+0x12c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d013      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f26:	d00f      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a43      	ldr	r2, [pc, #268]	; (800a038 <TIM_Base_SetConfig+0x130>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d00b      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a42      	ldr	r2, [pc, #264]	; (800a03c <TIM_Base_SetConfig+0x134>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d007      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	4a41      	ldr	r2, [pc, #260]	; (800a040 <TIM_Base_SetConfig+0x138>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d003      	beq.n	8009f48 <TIM_Base_SetConfig+0x40>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a40      	ldr	r2, [pc, #256]	; (800a044 <TIM_Base_SetConfig+0x13c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d108      	bne.n	8009f5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a35      	ldr	r2, [pc, #212]	; (800a034 <TIM_Base_SetConfig+0x12c>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d02b      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f68:	d027      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4a32      	ldr	r2, [pc, #200]	; (800a038 <TIM_Base_SetConfig+0x130>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d023      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	4a31      	ldr	r2, [pc, #196]	; (800a03c <TIM_Base_SetConfig+0x134>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d01f      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a30      	ldr	r2, [pc, #192]	; (800a040 <TIM_Base_SetConfig+0x138>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d01b      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a2f      	ldr	r2, [pc, #188]	; (800a044 <TIM_Base_SetConfig+0x13c>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d017      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a2e      	ldr	r2, [pc, #184]	; (800a048 <TIM_Base_SetConfig+0x140>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d013      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a2d      	ldr	r2, [pc, #180]	; (800a04c <TIM_Base_SetConfig+0x144>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d00f      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a2c      	ldr	r2, [pc, #176]	; (800a050 <TIM_Base_SetConfig+0x148>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d00b      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a2b      	ldr	r2, [pc, #172]	; (800a054 <TIM_Base_SetConfig+0x14c>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d007      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	4a2a      	ldr	r2, [pc, #168]	; (800a058 <TIM_Base_SetConfig+0x150>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d003      	beq.n	8009fba <TIM_Base_SetConfig+0xb2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a29      	ldr	r2, [pc, #164]	; (800a05c <TIM_Base_SetConfig+0x154>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d108      	bne.n	8009fcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	695b      	ldr	r3, [r3, #20]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	4a10      	ldr	r2, [pc, #64]	; (800a034 <TIM_Base_SetConfig+0x12c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d003      	beq.n	800a000 <TIM_Base_SetConfig+0xf8>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a12      	ldr	r2, [pc, #72]	; (800a044 <TIM_Base_SetConfig+0x13c>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d103      	bne.n	800a008 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	691a      	ldr	r2, [r3, #16]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b01      	cmp	r3, #1
 800a018:	d105      	bne.n	800a026 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f023 0201 	bic.w	r2, r3, #1
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	611a      	str	r2, [r3, #16]
  }
}
 800a026:	bf00      	nop
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	40010000 	.word	0x40010000
 800a038:	40000400 	.word	0x40000400
 800a03c:	40000800 	.word	0x40000800
 800a040:	40000c00 	.word	0x40000c00
 800a044:	40010400 	.word	0x40010400
 800a048:	40014000 	.word	0x40014000
 800a04c:	40014400 	.word	0x40014400
 800a050:	40014800 	.word	0x40014800
 800a054:	40001800 	.word	0x40001800
 800a058:	40001c00 	.word	0x40001c00
 800a05c:	40002000 	.word	0x40002000

0800a060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	f023 0201 	bic.w	r2, r3, #1
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	f023 0302 	bic.w	r3, r3, #2
 800a0a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a20      	ldr	r2, [pc, #128]	; (800a138 <TIM_OC1_SetConfig+0xd8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <TIM_OC1_SetConfig+0x64>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a1f      	ldr	r2, [pc, #124]	; (800a13c <TIM_OC1_SetConfig+0xdc>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d10c      	bne.n	800a0de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	f023 0308 	bic.w	r3, r3, #8
 800a0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f023 0304 	bic.w	r3, r3, #4
 800a0dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a15      	ldr	r2, [pc, #84]	; (800a138 <TIM_OC1_SetConfig+0xd8>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d003      	beq.n	800a0ee <TIM_OC1_SetConfig+0x8e>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a14      	ldr	r2, [pc, #80]	; (800a13c <TIM_OC1_SetConfig+0xdc>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d111      	bne.n	800a112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	4313      	orrs	r3, r2
 800a106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	697a      	ldr	r2, [r7, #20]
 800a12a:	621a      	str	r2, [r3, #32]
}
 800a12c:	bf00      	nop
 800a12e:	371c      	adds	r7, #28
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	40010000 	.word	0x40010000
 800a13c:	40010400 	.word	0x40010400

0800a140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b480      	push	{r7}
 800a142:	b087      	sub	sp, #28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	f023 0210 	bic.w	r2, r3, #16
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	699b      	ldr	r3, [r3, #24]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a16e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	f023 0320 	bic.w	r3, r3, #32
 800a18a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	4313      	orrs	r3, r2
 800a196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a22      	ldr	r2, [pc, #136]	; (800a224 <TIM_OC2_SetConfig+0xe4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC2_SetConfig+0x68>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a21      	ldr	r2, [pc, #132]	; (800a228 <TIM_OC2_SetConfig+0xe8>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d10d      	bne.n	800a1c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a17      	ldr	r2, [pc, #92]	; (800a224 <TIM_OC2_SetConfig+0xe4>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d003      	beq.n	800a1d4 <TIM_OC2_SetConfig+0x94>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a16      	ldr	r2, [pc, #88]	; (800a228 <TIM_OC2_SetConfig+0xe8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d113      	bne.n	800a1fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	621a      	str	r2, [r3, #32]
}
 800a216:	bf00      	nop
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400

0800a22c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a1b      	ldr	r3, [r3, #32]
 800a23a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a1b      	ldr	r3, [r3, #32]
 800a240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a25a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	021b      	lsls	r3, r3, #8
 800a27c:	697a      	ldr	r2, [r7, #20]
 800a27e:	4313      	orrs	r3, r2
 800a280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a21      	ldr	r2, [pc, #132]	; (800a30c <TIM_OC3_SetConfig+0xe0>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_OC3_SetConfig+0x66>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a20      	ldr	r2, [pc, #128]	; (800a310 <TIM_OC3_SetConfig+0xe4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d10d      	bne.n	800a2ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	021b      	lsls	r3, r3, #8
 800a2a0:	697a      	ldr	r2, [r7, #20]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a16      	ldr	r2, [pc, #88]	; (800a30c <TIM_OC3_SetConfig+0xe0>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_OC3_SetConfig+0x92>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a15      	ldr	r2, [pc, #84]	; (800a310 <TIM_OC3_SetConfig+0xe4>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d113      	bne.n	800a2e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	621a      	str	r2, [r3, #32]
}
 800a300:	bf00      	nop
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	40010000 	.word	0x40010000
 800a310:	40010400 	.word	0x40010400

0800a314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6a1b      	ldr	r3, [r3, #32]
 800a328:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	69db      	ldr	r3, [r3, #28]
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	021b      	lsls	r3, r3, #8
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4313      	orrs	r3, r2
 800a356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a35e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	031b      	lsls	r3, r3, #12
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a12      	ldr	r2, [pc, #72]	; (800a3b8 <TIM_OC4_SetConfig+0xa4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d003      	beq.n	800a37c <TIM_OC4_SetConfig+0x68>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a11      	ldr	r2, [pc, #68]	; (800a3bc <TIM_OC4_SetConfig+0xa8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d109      	bne.n	800a390 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	019b      	lsls	r3, r3, #6
 800a38a:	697a      	ldr	r2, [r7, #20]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	621a      	str	r2, [r3, #32]
}
 800a3aa:	bf00      	nop
 800a3ac:	371c      	adds	r7, #28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40010000 	.word	0x40010000
 800a3bc:	40010400 	.word	0x40010400

0800a3c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	f023 0201 	bic.w	r2, r3, #1
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	699b      	ldr	r3, [r3, #24]
 800a3e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f023 030a 	bic.w	r3, r3, #10
 800a3fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4313      	orrs	r3, r2
 800a404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	697a      	ldr	r2, [r7, #20]
 800a410:	621a      	str	r2, [r3, #32]
}
 800a412:	bf00      	nop
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a41e:	b480      	push	{r7}
 800a420:	b087      	sub	sp, #28
 800a422:	af00      	add	r7, sp, #0
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6a1b      	ldr	r3, [r3, #32]
 800a434:	f023 0210 	bic.w	r2, r3, #16
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	031b      	lsls	r3, r3, #12
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	4313      	orrs	r3, r2
 800a452:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a45a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	011b      	lsls	r3, r3, #4
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	4313      	orrs	r3, r2
 800a464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	621a      	str	r2, [r3, #32]
}
 800a472:	bf00      	nop
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f043 0307 	orr.w	r3, r3, #7
 800a4a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	609a      	str	r2, [r3, #8]
}
 800a4a8:	bf00      	nop
 800a4aa:	3714      	adds	r7, #20
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	607a      	str	r2, [r7, #4]
 800a4c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	021a      	lsls	r2, r3, #8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	609a      	str	r2, [r3, #8]
}
 800a4e8:	bf00      	nop
 800a4ea:	371c      	adds	r7, #28
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f003 031f 	and.w	r3, r3, #31
 800a506:	2201      	movs	r2, #1
 800a508:	fa02 f303 	lsl.w	r3, r2, r3
 800a50c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6a1a      	ldr	r2, [r3, #32]
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	43db      	mvns	r3, r3
 800a516:	401a      	ands	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a1a      	ldr	r2, [r3, #32]
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	fa01 f303 	lsl.w	r3, r1, r3
 800a52c:	431a      	orrs	r2, r3
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	621a      	str	r2, [r3, #32]
}
 800a532:	bf00      	nop
 800a534:	371c      	adds	r7, #28
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
	...

0800a540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a550:	2b01      	cmp	r3, #1
 800a552:	d101      	bne.n	800a558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a554:	2302      	movs	r3, #2
 800a556:	e05a      	b.n	800a60e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a57e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	4313      	orrs	r3, r2
 800a588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a21      	ldr	r2, [pc, #132]	; (800a61c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d022      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5a4:	d01d      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a1d      	ldr	r2, [pc, #116]	; (800a620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d018      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a1b      	ldr	r2, [pc, #108]	; (800a624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d013      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a1a      	ldr	r2, [pc, #104]	; (800a628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00e      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a18      	ldr	r2, [pc, #96]	; (800a62c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d009      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a17      	ldr	r2, [pc, #92]	; (800a630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d004      	beq.n	800a5e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a15      	ldr	r2, [pc, #84]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d10c      	bne.n	800a5fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	40010000 	.word	0x40010000
 800a620:	40000400 	.word	0x40000400
 800a624:	40000800 	.word	0x40000800
 800a628:	40000c00 	.word	0x40000c00
 800a62c:	40010400 	.word	0x40010400
 800a630:	40014000 	.word	0x40014000
 800a634:	40001800 	.word	0x40001800

0800a638 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a642:	2300      	movs	r3, #0
 800a644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d101      	bne.n	800a654 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a650:	2302      	movs	r3, #2
 800a652:	e03d      	b.n	800a6d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4313      	orrs	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	69db      	ldr	r3, [r3, #28]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e042      	b.n	800a79c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fb ff0c 	bl	8006548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2224      	movs	r2, #36	; 0x24
 800a734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68da      	ldr	r2, [r3, #12]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 f825 	bl	800b798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a75c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	695a      	ldr	r2, [r3, #20]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a76c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a77c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2200      	movs	r2, #0
 800a782:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2220      	movs	r2, #32
 800a788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b08a      	sub	sp, #40	; 0x28
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	603b      	str	r3, [r7, #0]
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b20      	cmp	r3, #32
 800a7c2:	d175      	bne.n	800a8b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <HAL_UART_Transmit+0x2c>
 800a7ca:	88fb      	ldrh	r3, [r7, #6]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e06e      	b.n	800a8b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2221      	movs	r2, #33	; 0x21
 800a7de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7e2:	f7fc f8d9 	bl	8006998 <HAL_GetTick>
 800a7e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	88fa      	ldrh	r2, [r7, #6]
 800a7ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	88fa      	ldrh	r2, [r7, #6]
 800a7f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7fc:	d108      	bne.n	800a810 <HAL_UART_Transmit+0x6c>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d104      	bne.n	800a810 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	61bb      	str	r3, [r7, #24]
 800a80e:	e003      	b.n	800a818 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a814:	2300      	movs	r3, #0
 800a816:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a818:	e02e      	b.n	800a878 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	9300      	str	r3, [sp, #0]
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2200      	movs	r2, #0
 800a822:	2180      	movs	r1, #128	; 0x80
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 fcfe 	bl	800b226 <UART_WaitOnFlagUntilTimeout>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d005      	beq.n	800a83c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e03a      	b.n	800a8b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10b      	bne.n	800a85a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	461a      	mov	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	3302      	adds	r3, #2
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	e007      	b.n	800a86a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	781a      	ldrb	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	3301      	adds	r3, #1
 800a868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a86e:	b29b      	uxth	r3, r3
 800a870:	3b01      	subs	r3, #1
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1cb      	bne.n	800a81a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2200      	movs	r2, #0
 800a88a:	2140      	movs	r1, #64	; 0x40
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 fcca 	bl	800b226 <UART_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d005      	beq.n	800a8a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2220      	movs	r2, #32
 800a89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	e006      	b.n	800a8b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2220      	movs	r2, #32
 800a8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e000      	b.n	800a8b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a8b0:	2302      	movs	r3, #2
  }
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08c      	sub	sp, #48	; 0x30
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	2b20      	cmp	r3, #32
 800a8d4:	d156      	bne.n	800a984 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <HAL_UART_Transmit_DMA+0x26>
 800a8dc:	88fb      	ldrh	r3, [r7, #6]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d101      	bne.n	800a8e6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e04f      	b.n	800a986 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	88fa      	ldrh	r2, [r7, #6]
 800a8f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	88fa      	ldrh	r2, [r7, #6]
 800a8f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2221      	movs	r2, #33	; 0x21
 800a902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90a:	4a21      	ldr	r2, [pc, #132]	; (800a990 <HAL_UART_Transmit_DMA+0xd4>)
 800a90c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a912:	4a20      	ldr	r2, [pc, #128]	; (800a994 <HAL_UART_Transmit_DMA+0xd8>)
 800a914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91a:	4a1f      	ldr	r2, [pc, #124]	; (800a998 <HAL_UART_Transmit_DMA+0xdc>)
 800a91c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a922:	2200      	movs	r2, #0
 800a924:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a926:	f107 0308 	add.w	r3, r7, #8
 800a92a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a932:	6819      	ldr	r1, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	3304      	adds	r3, #4
 800a93a:	461a      	mov	r2, r3
 800a93c:	88fb      	ldrh	r3, [r7, #6]
 800a93e:	f7fc fdeb 	bl	8007518 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a94a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3314      	adds	r3, #20
 800a952:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	e853 3f00 	ldrex	r3, [r3]
 800a95a:	617b      	str	r3, [r7, #20]
   return(result);
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a962:	62bb      	str	r3, [r7, #40]	; 0x28
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3314      	adds	r3, #20
 800a96a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a96c:	627a      	str	r2, [r7, #36]	; 0x24
 800a96e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	6a39      	ldr	r1, [r7, #32]
 800a972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a974:	e841 2300 	strex	r3, r2, [r1]
 800a978:	61fb      	str	r3, [r7, #28]
   return(result);
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e5      	bne.n	800a94c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	e000      	b.n	800a986 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800a984:	2302      	movs	r3, #2
  }
}
 800a986:	4618      	mov	r0, r3
 800a988:	3730      	adds	r7, #48	; 0x30
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	0800af75 	.word	0x0800af75
 800a994:	0800b00f 	.word	0x0800b00f
 800a998:	0800b193 	.word	0x0800b193

0800a99c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	d112      	bne.n	800a9dc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <HAL_UART_Receive_DMA+0x26>
 800a9bc:	88fb      	ldrh	r3, [r7, #6]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e00b      	b.n	800a9de <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9cc:	88fb      	ldrh	r3, [r7, #6]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	68b9      	ldr	r1, [r7, #8]
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f000 fc80 	bl	800b2d8 <UART_Start_Receive_DMA>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	e000      	b.n	800a9de <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a9dc:	2302      	movs	r3, #2
  }
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
	...

0800a9e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b0ba      	sub	sp, #232	; 0xe8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800aa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800aa26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10f      	bne.n	800aa4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800aa2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d009      	beq.n	800aa4e <HAL_UART_IRQHandler+0x66>
 800aa3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fde7 	bl	800b61a <UART_Receive_IT>
      return;
 800aa4c:	e25b      	b.n	800af06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800aa4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 80de 	beq.w	800ac14 <HAL_UART_IRQHandler+0x22c>
 800aa58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d106      	bne.n	800aa72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800aa64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f000 80d1 	beq.w	800ac14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800aa72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <HAL_UART_IRQHandler+0xae>
 800aa7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d005      	beq.n	800aa96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8e:	f043 0201 	orr.w	r2, r3, #1
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aa96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9a:	f003 0304 	and.w	r3, r3, #4
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <HAL_UART_IRQHandler+0xd2>
 800aaa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d005      	beq.n	800aaba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab2:	f043 0202 	orr.w	r2, r3, #2
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aaba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aabe:	f003 0302 	and.w	r3, r3, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00b      	beq.n	800aade <HAL_UART_IRQHandler+0xf6>
 800aac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d005      	beq.n	800aade <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad6:	f043 0204 	orr.w	r2, r3, #4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae2:	f003 0308 	and.w	r3, r3, #8
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d011      	beq.n	800ab0e <HAL_UART_IRQHandler+0x126>
 800aaea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaee:	f003 0320 	and.w	r3, r3, #32
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d105      	bne.n	800ab02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800aaf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d005      	beq.n	800ab0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab06:	f043 0208 	orr.w	r2, r3, #8
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 81f2 	beq.w	800aefc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ab18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab1c:	f003 0320 	and.w	r3, r3, #32
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d008      	beq.n	800ab36 <HAL_UART_IRQHandler+0x14e>
 800ab24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab28:	f003 0320 	and.w	r3, r3, #32
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fd72 	bl	800b61a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab40:	2b40      	cmp	r3, #64	; 0x40
 800ab42:	bf0c      	ite	eq
 800ab44:	2301      	moveq	r3, #1
 800ab46:	2300      	movne	r3, #0
 800ab48:	b2db      	uxtb	r3, r3
 800ab4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab52:	f003 0308 	and.w	r3, r3, #8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d103      	bne.n	800ab62 <HAL_UART_IRQHandler+0x17a>
 800ab5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d04f      	beq.n	800ac02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fc7a 	bl	800b45c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab72:	2b40      	cmp	r3, #64	; 0x40
 800ab74:	d141      	bne.n	800abfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	3314      	adds	r3, #20
 800ab7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ab8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3314      	adds	r3, #20
 800ab9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aba2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800abae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800abb2:	e841 2300 	strex	r3, r2, [r1]
 800abb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800abba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1d9      	bne.n	800ab76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d013      	beq.n	800abf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abce:	4a7e      	ldr	r2, [pc, #504]	; (800adc8 <HAL_UART_IRQHandler+0x3e0>)
 800abd0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fc fd66 	bl	80076a8 <HAL_DMA_Abort_IT>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d016      	beq.n	800ac10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf0:	e00e      	b.n	800ac10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f9a8 	bl	800af48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abf8:	e00a      	b.n	800ac10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f9a4 	bl	800af48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac00:	e006      	b.n	800ac10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f9a0 	bl	800af48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ac0e:	e175      	b.n	800aefc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac10:	bf00      	nop
    return;
 800ac12:	e173      	b.n	800aefc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	f040 814f 	bne.w	800aebc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ac1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac22:	f003 0310 	and.w	r3, r3, #16
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f000 8148 	beq.w	800aebc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ac2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac30:	f003 0310 	and.w	r3, r3, #16
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f000 8141 	beq.w	800aebc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60bb      	str	r3, [r7, #8]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	60bb      	str	r3, [r7, #8]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	60bb      	str	r3, [r7, #8]
 800ac4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	f040 80b6 	bne.w	800adcc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 8145 	beq.w	800af00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	f080 813e 	bcs.w	800af00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ac8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac96:	f000 8088 	beq.w	800adaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	330c      	adds	r3, #12
 800aca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aca8:	e853 3f00 	ldrex	r3, [r3]
 800acac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800acb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	330c      	adds	r3, #12
 800acc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800acc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800acca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800acd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800acde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1d9      	bne.n	800ac9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3314      	adds	r3, #20
 800acec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acf0:	e853 3f00 	ldrex	r3, [r3]
 800acf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800acf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acf8:	f023 0301 	bic.w	r3, r3, #1
 800acfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3314      	adds	r3, #20
 800ad06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ad0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ad12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ad16:	e841 2300 	strex	r3, r2, [r1]
 800ad1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ad1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d1e1      	bne.n	800ace6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	3314      	adds	r3, #20
 800ad28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ad32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ad34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	3314      	adds	r3, #20
 800ad42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ad46:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ad48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ad4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ad4e:	e841 2300 	strex	r3, r2, [r1]
 800ad52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ad54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1e3      	bne.n	800ad22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2220      	movs	r2, #32
 800ad5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	330c      	adds	r3, #12
 800ad6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad7a:	f023 0310 	bic.w	r3, r3, #16
 800ad7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	330c      	adds	r3, #12
 800ad88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ad8c:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ad92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ad9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e3      	bne.n	800ad68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fc fc0f 	bl	80075c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2202      	movs	r2, #2
 800adae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800adb8:	b29b      	uxth	r3, r3
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	4619      	mov	r1, r3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f8cb 	bl	800af5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800adc6:	e09b      	b.n	800af00 <HAL_UART_IRQHandler+0x518>
 800adc8:	0800b523 	.word	0x0800b523
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800add4:	b29b      	uxth	r3, r3
 800add6:	1ad3      	subs	r3, r2, r3
 800add8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 808e 	beq.w	800af04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ade8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8089 	beq.w	800af04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	330c      	adds	r3, #12
 800adf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ae02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	330c      	adds	r3, #12
 800ae12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ae16:	647a      	str	r2, [r7, #68]	; 0x44
 800ae18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ae1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ae24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e3      	bne.n	800adf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	3314      	adds	r3, #20
 800ae30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	623b      	str	r3, [r7, #32]
   return(result);
 800ae3a:	6a3b      	ldr	r3, [r7, #32]
 800ae3c:	f023 0301 	bic.w	r3, r3, #1
 800ae40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3314      	adds	r3, #20
 800ae4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ae4e:	633a      	str	r2, [r7, #48]	; 0x30
 800ae50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e3      	bne.n	800ae2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	330c      	adds	r3, #12
 800ae76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f023 0310 	bic.w	r3, r3, #16
 800ae86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	330c      	adds	r3, #12
 800ae90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ae94:	61fa      	str	r2, [r7, #28]
 800ae96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae98:	69b9      	ldr	r1, [r7, #24]
 800ae9a:	69fa      	ldr	r2, [r7, #28]
 800ae9c:	e841 2300 	strex	r3, r2, [r1]
 800aea0:	617b      	str	r3, [r7, #20]
   return(result);
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1e3      	bne.n	800ae70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2202      	movs	r2, #2
 800aeac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aeae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f851 	bl	800af5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aeba:	e023      	b.n	800af04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d009      	beq.n	800aedc <HAL_UART_IRQHandler+0x4f4>
 800aec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fb38 	bl	800b54a <UART_Transmit_IT>
    return;
 800aeda:	e014      	b.n	800af06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00e      	beq.n	800af06 <HAL_UART_IRQHandler+0x51e>
 800aee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aeec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d008      	beq.n	800af06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fb78 	bl	800b5ea <UART_EndTransmit_IT>
    return;
 800aefa:	e004      	b.n	800af06 <HAL_UART_IRQHandler+0x51e>
    return;
 800aefc:	bf00      	nop
 800aefe:	e002      	b.n	800af06 <HAL_UART_IRQHandler+0x51e>
      return;
 800af00:	bf00      	nop
 800af02:	e000      	b.n	800af06 <HAL_UART_IRQHandler+0x51e>
      return;
 800af04:	bf00      	nop
  }
}
 800af06:	37e8      	adds	r7, #232	; 0xe8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	460b      	mov	r3, r1
 800af66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b090      	sub	sp, #64	; 0x40
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af80:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d137      	bne.n	800b000 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800af90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af92:	2200      	movs	r2, #0
 800af94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800af96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3314      	adds	r3, #20
 800af9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	623b      	str	r3, [r7, #32]
   return(result);
 800afa6:	6a3b      	ldr	r3, [r7, #32]
 800afa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800afac:	63bb      	str	r3, [r7, #56]	; 0x38
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3314      	adds	r3, #20
 800afb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afb6:	633a      	str	r2, [r7, #48]	; 0x30
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e5      	bne.n	800af96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	330c      	adds	r3, #12
 800afd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afe0:	637b      	str	r3, [r7, #52]	; 0x34
 800afe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	330c      	adds	r3, #12
 800afe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afea:	61fa      	str	r2, [r7, #28]
 800afec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	69b9      	ldr	r1, [r7, #24]
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	617b      	str	r3, [r7, #20]
   return(result);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800affe:	e002      	b.n	800b006 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b002:	f7ff ff83 	bl	800af0c <HAL_UART_TxCpltCallback>
}
 800b006:	bf00      	nop
 800b008:	3740      	adds	r7, #64	; 0x40
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b01a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff ff7f 	bl	800af20 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b022:	bf00      	nop
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b09c      	sub	sp, #112	; 0x70
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b042:	2b00      	cmp	r3, #0
 800b044:	d172      	bne.n	800b12c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b048:	2200      	movs	r2, #0
 800b04a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b04c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	330c      	adds	r3, #12
 800b052:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b056:	e853 3f00 	ldrex	r3, [r3]
 800b05a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b05c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b05e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b062:	66bb      	str	r3, [r7, #104]	; 0x68
 800b064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	330c      	adds	r3, #12
 800b06a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b06c:	65ba      	str	r2, [r7, #88]	; 0x58
 800b06e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b070:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b072:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b074:	e841 2300 	strex	r3, r2, [r1]
 800b078:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1e5      	bne.n	800b04c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3314      	adds	r3, #20
 800b086:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b092:	f023 0301 	bic.w	r3, r3, #1
 800b096:	667b      	str	r3, [r7, #100]	; 0x64
 800b098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	3314      	adds	r3, #20
 800b09e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b0a0:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0a8:	e841 2300 	strex	r3, r2, [r1]
 800b0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1e5      	bne.n	800b080 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	3314      	adds	r3, #20
 800b0ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	623b      	str	r3, [r7, #32]
   return(result);
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ca:	663b      	str	r3, [r7, #96]	; 0x60
 800b0cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3314      	adds	r3, #20
 800b0d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b0d4:	633a      	str	r2, [r7, #48]	; 0x30
 800b0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e5      	bne.n	800b0b4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0ea:	2220      	movs	r2, #32
 800b0ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d119      	bne.n	800b12c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	330c      	adds	r3, #12
 800b0fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	e853 3f00 	ldrex	r3, [r3]
 800b106:	60fb      	str	r3, [r7, #12]
   return(result);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f023 0310 	bic.w	r3, r3, #16
 800b10e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	330c      	adds	r3, #12
 800b116:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b118:	61fa      	str	r2, [r7, #28]
 800b11a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11c:	69b9      	ldr	r1, [r7, #24]
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	e841 2300 	strex	r3, r2, [r1]
 800b124:	617b      	str	r3, [r7, #20]
   return(result);
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e5      	bne.n	800b0f8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b12c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12e:	2200      	movs	r2, #0
 800b130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	2b01      	cmp	r3, #1
 800b138:	d106      	bne.n	800b148 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b13a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b13c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b13e:	4619      	mov	r1, r3
 800b140:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b142:	f7ff ff0b 	bl	800af5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b146:	e002      	b.n	800b14e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b148:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b14a:	f7fa f979 	bl	8005440 <HAL_UART_RxCpltCallback>
}
 800b14e:	bf00      	nop
 800b150:	3770      	adds	r7, #112	; 0x70
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2201      	movs	r2, #1
 800b168:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d108      	bne.n	800b184 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b176:	085b      	lsrs	r3, r3, #1
 800b178:	b29b      	uxth	r3, r3
 800b17a:	4619      	mov	r1, r3
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7ff feed 	bl	800af5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b182:	e002      	b.n	800b18a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7ff fed5 	bl	800af34 <HAL_UART_RxHalfCpltCallback>
}
 800b18a:	bf00      	nop
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	695b      	ldr	r3, [r3, #20]
 800b1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ae:	2b80      	cmp	r3, #128	; 0x80
 800b1b0:	bf0c      	ite	eq
 800b1b2:	2301      	moveq	r3, #1
 800b1b4:	2300      	movne	r3, #0
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1c0:	b2db      	uxtb	r3, r3
 800b1c2:	2b21      	cmp	r3, #33	; 0x21
 800b1c4:	d108      	bne.n	800b1d8 <UART_DMAError+0x46>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b1d2:	68b8      	ldr	r0, [r7, #8]
 800b1d4:	f000 f91a 	bl	800b40c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	695b      	ldr	r3, [r3, #20]
 800b1de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	bf0c      	ite	eq
 800b1e6:	2301      	moveq	r3, #1
 800b1e8:	2300      	movne	r3, #0
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	2b22      	cmp	r3, #34	; 0x22
 800b1f8:	d108      	bne.n	800b20c <UART_DMAError+0x7a>
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d005      	beq.n	800b20c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2200      	movs	r2, #0
 800b204:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b206:	68b8      	ldr	r0, [r7, #8]
 800b208:	f000 f928 	bl	800b45c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b210:	f043 0210 	orr.w	r2, r3, #16
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b218:	68b8      	ldr	r0, [r7, #8]
 800b21a:	f7ff fe95 	bl	800af48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	4613      	mov	r3, r2
 800b234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b236:	e03b      	b.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b238:	6a3b      	ldr	r3, [r7, #32]
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d037      	beq.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b240:	f7fb fbaa 	bl	8006998 <HAL_GetTick>
 800b244:	4602      	mov	r2, r0
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	6a3a      	ldr	r2, [r7, #32]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d302      	bcc.n	800b256 <UART_WaitOnFlagUntilTimeout+0x30>
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e03a      	b.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	f003 0304 	and.w	r3, r3, #4
 800b264:	2b00      	cmp	r3, #0
 800b266:	d023      	beq.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	2b80      	cmp	r3, #128	; 0x80
 800b26c:	d020      	beq.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	2b40      	cmp	r3, #64	; 0x40
 800b272:	d01d      	beq.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b08      	cmp	r3, #8
 800b280:	d116      	bne.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	617b      	str	r3, [r7, #20]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	617b      	str	r3, [r7, #20]
 800b296:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 f8df 	bl	800b45c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e00f      	b.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	bf0c      	ite	eq
 800b2c0:	2301      	moveq	r3, #1
 800b2c2:	2300      	movne	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d0b4      	beq.n	800b238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b098      	sub	sp, #96	; 0x60
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	4613      	mov	r3, r2
 800b2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b2e6:	68ba      	ldr	r2, [r7, #8]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	88fa      	ldrh	r2, [r7, #6]
 800b2f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2222      	movs	r2, #34	; 0x22
 800b2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b304:	4a3e      	ldr	r2, [pc, #248]	; (800b400 <UART_Start_Receive_DMA+0x128>)
 800b306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b30c:	4a3d      	ldr	r2, [pc, #244]	; (800b404 <UART_Start_Receive_DMA+0x12c>)
 800b30e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b314:	4a3c      	ldr	r2, [pc, #240]	; (800b408 <UART_Start_Receive_DMA+0x130>)
 800b316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31c:	2200      	movs	r2, #0
 800b31e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b320:	f107 0308 	add.w	r3, r7, #8
 800b324:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	3304      	adds	r3, #4
 800b330:	4619      	mov	r1, r3
 800b332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	88fb      	ldrh	r3, [r7, #6]
 800b338:	f7fc f8ee 	bl	8007518 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b33c:	2300      	movs	r3, #0
 800b33e:	613b      	str	r3, [r7, #16]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	613b      	str	r3, [r7, #16]
 800b350:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	691b      	ldr	r3, [r3, #16]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d019      	beq.n	800b38e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	330c      	adds	r3, #12
 800b360:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b364:	e853 3f00 	ldrex	r3, [r3]
 800b368:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b370:	65bb      	str	r3, [r7, #88]	; 0x58
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	330c      	adds	r3, #12
 800b378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b37a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b37c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b37e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b382:	e841 2300 	strex	r3, r2, [r1]
 800b386:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1e5      	bne.n	800b35a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3314      	adds	r3, #20
 800b394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b398:	e853 3f00 	ldrex	r3, [r3]
 800b39c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	f043 0301 	orr.w	r3, r3, #1
 800b3a4:	657b      	str	r3, [r7, #84]	; 0x54
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	3314      	adds	r3, #20
 800b3ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3ae:	63ba      	str	r2, [r7, #56]	; 0x38
 800b3b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b3b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3b6:	e841 2300 	strex	r3, r2, [r1]
 800b3ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1e5      	bne.n	800b38e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3314      	adds	r3, #20
 800b3c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	e853 3f00 	ldrex	r3, [r3]
 800b3d0:	617b      	str	r3, [r7, #20]
   return(result);
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3314      	adds	r3, #20
 800b3e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3e2:	627a      	str	r2, [r7, #36]	; 0x24
 800b3e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e6:	6a39      	ldr	r1, [r7, #32]
 800b3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ea:	e841 2300 	strex	r3, r2, [r1]
 800b3ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d1e5      	bne.n	800b3c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3760      	adds	r7, #96	; 0x60
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	0800b02b 	.word	0x0800b02b
 800b404:	0800b157 	.word	0x0800b157
 800b408:	0800b193 	.word	0x0800b193

0800b40c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b089      	sub	sp, #36	; 0x24
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	330c      	adds	r3, #12
 800b41a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	e853 3f00 	ldrex	r3, [r3]
 800b422:	60bb      	str	r3, [r7, #8]
   return(result);
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b42a:	61fb      	str	r3, [r7, #28]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	330c      	adds	r3, #12
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	61ba      	str	r2, [r7, #24]
 800b436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b438:	6979      	ldr	r1, [r7, #20]
 800b43a:	69ba      	ldr	r2, [r7, #24]
 800b43c:	e841 2300 	strex	r3, r2, [r1]
 800b440:	613b      	str	r3, [r7, #16]
   return(result);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e5      	bne.n	800b414 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800b450:	bf00      	nop
 800b452:	3724      	adds	r7, #36	; 0x24
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b095      	sub	sp, #84	; 0x54
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	330c      	adds	r3, #12
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46e:	e853 3f00 	ldrex	r3, [r3]
 800b472:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b47a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	330c      	adds	r3, #12
 800b482:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b484:	643a      	str	r2, [r7, #64]	; 0x40
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b488:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b48a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b48c:	e841 2300 	strex	r3, r2, [r1]
 800b490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1e5      	bne.n	800b464 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3314      	adds	r3, #20
 800b49e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	e853 3f00 	ldrex	r3, [r3]
 800b4a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	f023 0301 	bic.w	r3, r3, #1
 800b4ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3314      	adds	r3, #20
 800b4b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b4ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4c0:	e841 2300 	strex	r3, r2, [r1]
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e5      	bne.n	800b498 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d119      	bne.n	800b508 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	330c      	adds	r3, #12
 800b4da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	e853 3f00 	ldrex	r3, [r3]
 800b4e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	f023 0310 	bic.w	r3, r3, #16
 800b4ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	330c      	adds	r3, #12
 800b4f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4f4:	61ba      	str	r2, [r7, #24]
 800b4f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	6979      	ldr	r1, [r7, #20]
 800b4fa:	69ba      	ldr	r2, [r7, #24]
 800b4fc:	e841 2300 	strex	r3, r2, [r1]
 800b500:	613b      	str	r3, [r7, #16]
   return(result);
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e5      	bne.n	800b4d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2220      	movs	r2, #32
 800b50c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2200      	movs	r2, #0
 800b514:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b516:	bf00      	nop
 800b518:	3754      	adds	r7, #84	; 0x54
 800b51a:	46bd      	mov	sp, r7
 800b51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b520:	4770      	bx	lr

0800b522 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2200      	movs	r2, #0
 800b534:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f7ff fd03 	bl	800af48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b085      	sub	sp, #20
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b21      	cmp	r3, #33	; 0x21
 800b55c:	d13e      	bne.n	800b5dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b566:	d114      	bne.n	800b592 <UART_Transmit_IT+0x48>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d110      	bne.n	800b592 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a1b      	ldr	r3, [r3, #32]
 800b574:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	881b      	ldrh	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b584:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	1c9a      	adds	r2, r3, #2
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	621a      	str	r2, [r3, #32]
 800b590:	e008      	b.n	800b5a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6a1b      	ldr	r3, [r3, #32]
 800b596:	1c59      	adds	r1, r3, #1
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6211      	str	r1, [r2, #32]
 800b59c:	781a      	ldrb	r2, [r3, #0]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d10f      	bne.n	800b5d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68da      	ldr	r2, [r3, #12]
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68da      	ldr	r2, [r3, #12]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	e000      	b.n	800b5de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b5dc:	2302      	movs	r3, #2
  }
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	68da      	ldr	r2, [r3, #12]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2220      	movs	r2, #32
 800b606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7ff fc7e 	bl	800af0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b08c      	sub	sp, #48	; 0x30
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b22      	cmp	r3, #34	; 0x22
 800b62c:	f040 80ae 	bne.w	800b78c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b638:	d117      	bne.n	800b66a <UART_Receive_IT+0x50>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d113      	bne.n	800b66a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b642:	2300      	movs	r3, #0
 800b644:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	b29b      	uxth	r3, r3
 800b654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b658:	b29a      	uxth	r2, r3
 800b65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b662:	1c9a      	adds	r2, r3, #2
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	629a      	str	r2, [r3, #40]	; 0x28
 800b668:	e026      	b.n	800b6b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b67c:	d007      	beq.n	800b68e <UART_Receive_IT+0x74>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <UART_Receive_IT+0x82>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	b2da      	uxtb	r2, r3
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	701a      	strb	r2, [r3, #0]
 800b69a:	e008      	b.n	800b6ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6a8:	b2da      	uxtb	r2, r3
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b2:	1c5a      	adds	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3b01      	subs	r3, #1
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	687a      	ldr	r2, [r7, #4]
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d15d      	bne.n	800b788 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68da      	ldr	r2, [r3, #12]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f022 0220 	bic.w	r2, r2, #32
 800b6da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68da      	ldr	r2, [r3, #12]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	695a      	ldr	r2, [r3, #20]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f022 0201 	bic.w	r2, r2, #1
 800b6fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2220      	movs	r2, #32
 800b700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d135      	bne.n	800b77e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2200      	movs	r2, #0
 800b716:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	330c      	adds	r3, #12
 800b71e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	613b      	str	r3, [r7, #16]
   return(result);
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f023 0310 	bic.w	r3, r3, #16
 800b72e:	627b      	str	r3, [r7, #36]	; 0x24
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	330c      	adds	r3, #12
 800b736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b738:	623a      	str	r2, [r7, #32]
 800b73a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	69f9      	ldr	r1, [r7, #28]
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	61bb      	str	r3, [r7, #24]
   return(result);
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e5      	bne.n	800b718 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 0310 	and.w	r3, r3, #16
 800b756:	2b10      	cmp	r3, #16
 800b758:	d10a      	bne.n	800b770 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7ff fbf0 	bl	800af5c <HAL_UARTEx_RxEventCallback>
 800b77c:	e002      	b.n	800b784 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7f9 fe5e 	bl	8005440 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	e002      	b.n	800b78e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3730      	adds	r7, #48	; 0x30
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b79c:	b0c0      	sub	sp, #256	; 0x100
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7b4:	68d9      	ldr	r1, [r3, #12]
 800b7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	ea40 0301 	orr.w	r3, r0, r1
 800b7c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7c6:	689a      	ldr	r2, [r3, #8]
 800b7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	431a      	orrs	r2, r3
 800b7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b7f0:	f021 010c 	bic.w	r1, r1, #12
 800b7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b7fe:	430b      	orrs	r3, r1
 800b800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b812:	6999      	ldr	r1, [r3, #24]
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	ea40 0301 	orr.w	r3, r0, r1
 800b81e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	4b8f      	ldr	r3, [pc, #572]	; (800ba64 <UART_SetConfig+0x2cc>)
 800b828:	429a      	cmp	r2, r3
 800b82a:	d005      	beq.n	800b838 <UART_SetConfig+0xa0>
 800b82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4b8d      	ldr	r3, [pc, #564]	; (800ba68 <UART_SetConfig+0x2d0>)
 800b834:	429a      	cmp	r2, r3
 800b836:	d104      	bne.n	800b842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fd fa44 	bl	8008cc4 <HAL_RCC_GetPCLK2Freq>
 800b83c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b840:	e003      	b.n	800b84a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b842:	f7fd fa2b 	bl	8008c9c <HAL_RCC_GetPCLK1Freq>
 800b846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b854:	f040 810c 	bne.w	800ba70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b85c:	2200      	movs	r2, #0
 800b85e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	1891      	adds	r1, r2, r2
 800b870:	65b9      	str	r1, [r7, #88]	; 0x58
 800b872:	415b      	adcs	r3, r3
 800b874:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b87a:	4621      	mov	r1, r4
 800b87c:	eb12 0801 	adds.w	r8, r2, r1
 800b880:	4629      	mov	r1, r5
 800b882:	eb43 0901 	adc.w	r9, r3, r1
 800b886:	f04f 0200 	mov.w	r2, #0
 800b88a:	f04f 0300 	mov.w	r3, #0
 800b88e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b89a:	4690      	mov	r8, r2
 800b89c:	4699      	mov	r9, r3
 800b89e:	4623      	mov	r3, r4
 800b8a0:	eb18 0303 	adds.w	r3, r8, r3
 800b8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	eb49 0303 	adc.w	r3, r9, r3
 800b8ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b8c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	18db      	adds	r3, r3, r3
 800b8ca:	653b      	str	r3, [r7, #80]	; 0x50
 800b8cc:	4613      	mov	r3, r2
 800b8ce:	eb42 0303 	adc.w	r3, r2, r3
 800b8d2:	657b      	str	r3, [r7, #84]	; 0x54
 800b8d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b8d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b8dc:	f7f5 f9d4 	bl	8000c88 <__aeabi_uldivmod>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4b61      	ldr	r3, [pc, #388]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b8e6:	fba3 2302 	umull	r2, r3, r3, r2
 800b8ea:	095b      	lsrs	r3, r3, #5
 800b8ec:	011c      	lsls	r4, r3, #4
 800b8ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b8fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b900:	4642      	mov	r2, r8
 800b902:	464b      	mov	r3, r9
 800b904:	1891      	adds	r1, r2, r2
 800b906:	64b9      	str	r1, [r7, #72]	; 0x48
 800b908:	415b      	adcs	r3, r3
 800b90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b90c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b910:	4641      	mov	r1, r8
 800b912:	eb12 0a01 	adds.w	sl, r2, r1
 800b916:	4649      	mov	r1, r9
 800b918:	eb43 0b01 	adc.w	fp, r3, r1
 800b91c:	f04f 0200 	mov.w	r2, #0
 800b920:	f04f 0300 	mov.w	r3, #0
 800b924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b930:	4692      	mov	sl, r2
 800b932:	469b      	mov	fp, r3
 800b934:	4643      	mov	r3, r8
 800b936:	eb1a 0303 	adds.w	r3, sl, r3
 800b93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b93e:	464b      	mov	r3, r9
 800b940:	eb4b 0303 	adc.w	r3, fp, r3
 800b944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b95c:	460b      	mov	r3, r1
 800b95e:	18db      	adds	r3, r3, r3
 800b960:	643b      	str	r3, [r7, #64]	; 0x40
 800b962:	4613      	mov	r3, r2
 800b964:	eb42 0303 	adc.w	r3, r2, r3
 800b968:	647b      	str	r3, [r7, #68]	; 0x44
 800b96a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b96e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b972:	f7f5 f989 	bl	8000c88 <__aeabi_uldivmod>
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4611      	mov	r1, r2
 800b97c:	4b3b      	ldr	r3, [pc, #236]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b97e:	fba3 2301 	umull	r2, r3, r3, r1
 800b982:	095b      	lsrs	r3, r3, #5
 800b984:	2264      	movs	r2, #100	; 0x64
 800b986:	fb02 f303 	mul.w	r3, r2, r3
 800b98a:	1acb      	subs	r3, r1, r3
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b992:	4b36      	ldr	r3, [pc, #216]	; (800ba6c <UART_SetConfig+0x2d4>)
 800b994:	fba3 2302 	umull	r2, r3, r3, r2
 800b998:	095b      	lsrs	r3, r3, #5
 800b99a:	005b      	lsls	r3, r3, #1
 800b99c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9a0:	441c      	add	r4, r3
 800b9a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b9b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b9b4:	4642      	mov	r2, r8
 800b9b6:	464b      	mov	r3, r9
 800b9b8:	1891      	adds	r1, r2, r2
 800b9ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9bc:	415b      	adcs	r3, r3
 800b9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	1851      	adds	r1, r2, r1
 800b9c8:	6339      	str	r1, [r7, #48]	; 0x30
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	414b      	adcs	r3, r1
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d0:	f04f 0200 	mov.w	r2, #0
 800b9d4:	f04f 0300 	mov.w	r3, #0
 800b9d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b9dc:	4659      	mov	r1, fp
 800b9de:	00cb      	lsls	r3, r1, #3
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b9e6:	4651      	mov	r1, sl
 800b9e8:	00ca      	lsls	r2, r1, #3
 800b9ea:	4610      	mov	r0, r2
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4642      	mov	r2, r8
 800b9f2:	189b      	adds	r3, r3, r2
 800b9f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	460a      	mov	r2, r1
 800b9fc:	eb42 0303 	adc.w	r3, r2, r3
 800ba00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba18:	460b      	mov	r3, r1
 800ba1a:	18db      	adds	r3, r3, r3
 800ba1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba1e:	4613      	mov	r3, r2
 800ba20:	eb42 0303 	adc.w	r3, r2, r3
 800ba24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba2e:	f7f5 f92b 	bl	8000c88 <__aeabi_uldivmod>
 800ba32:	4602      	mov	r2, r0
 800ba34:	460b      	mov	r3, r1
 800ba36:	4b0d      	ldr	r3, [pc, #52]	; (800ba6c <UART_SetConfig+0x2d4>)
 800ba38:	fba3 1302 	umull	r1, r3, r3, r2
 800ba3c:	095b      	lsrs	r3, r3, #5
 800ba3e:	2164      	movs	r1, #100	; 0x64
 800ba40:	fb01 f303 	mul.w	r3, r1, r3
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	00db      	lsls	r3, r3, #3
 800ba48:	3332      	adds	r3, #50	; 0x32
 800ba4a:	4a08      	ldr	r2, [pc, #32]	; (800ba6c <UART_SetConfig+0x2d4>)
 800ba4c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba50:	095b      	lsrs	r3, r3, #5
 800ba52:	f003 0207 	and.w	r2, r3, #7
 800ba56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4422      	add	r2, r4
 800ba5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ba60:	e106      	b.n	800bc70 <UART_SetConfig+0x4d8>
 800ba62:	bf00      	nop
 800ba64:	40011000 	.word	0x40011000
 800ba68:	40011400 	.word	0x40011400
 800ba6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ba70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba74:	2200      	movs	r2, #0
 800ba76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ba7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ba82:	4642      	mov	r2, r8
 800ba84:	464b      	mov	r3, r9
 800ba86:	1891      	adds	r1, r2, r2
 800ba88:	6239      	str	r1, [r7, #32]
 800ba8a:	415b      	adcs	r3, r3
 800ba8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ba8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ba92:	4641      	mov	r1, r8
 800ba94:	1854      	adds	r4, r2, r1
 800ba96:	4649      	mov	r1, r9
 800ba98:	eb43 0501 	adc.w	r5, r3, r1
 800ba9c:	f04f 0200 	mov.w	r2, #0
 800baa0:	f04f 0300 	mov.w	r3, #0
 800baa4:	00eb      	lsls	r3, r5, #3
 800baa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baaa:	00e2      	lsls	r2, r4, #3
 800baac:	4614      	mov	r4, r2
 800baae:	461d      	mov	r5, r3
 800bab0:	4643      	mov	r3, r8
 800bab2:	18e3      	adds	r3, r4, r3
 800bab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bab8:	464b      	mov	r3, r9
 800baba:	eb45 0303 	adc.w	r3, r5, r3
 800babe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bad2:	f04f 0200 	mov.w	r2, #0
 800bad6:	f04f 0300 	mov.w	r3, #0
 800bada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bade:	4629      	mov	r1, r5
 800bae0:	008b      	lsls	r3, r1, #2
 800bae2:	4621      	mov	r1, r4
 800bae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bae8:	4621      	mov	r1, r4
 800baea:	008a      	lsls	r2, r1, #2
 800baec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800baf0:	f7f5 f8ca 	bl	8000c88 <__aeabi_uldivmod>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4b60      	ldr	r3, [pc, #384]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bafa:	fba3 2302 	umull	r2, r3, r3, r2
 800bafe:	095b      	lsrs	r3, r3, #5
 800bb00:	011c      	lsls	r4, r3, #4
 800bb02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb06:	2200      	movs	r2, #0
 800bb08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb14:	4642      	mov	r2, r8
 800bb16:	464b      	mov	r3, r9
 800bb18:	1891      	adds	r1, r2, r2
 800bb1a:	61b9      	str	r1, [r7, #24]
 800bb1c:	415b      	adcs	r3, r3
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb24:	4641      	mov	r1, r8
 800bb26:	1851      	adds	r1, r2, r1
 800bb28:	6139      	str	r1, [r7, #16]
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	414b      	adcs	r3, r1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	f04f 0200 	mov.w	r2, #0
 800bb34:	f04f 0300 	mov.w	r3, #0
 800bb38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb3c:	4659      	mov	r1, fp
 800bb3e:	00cb      	lsls	r3, r1, #3
 800bb40:	4651      	mov	r1, sl
 800bb42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb46:	4651      	mov	r1, sl
 800bb48:	00ca      	lsls	r2, r1, #3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4642      	mov	r2, r8
 800bb52:	189b      	adds	r3, r3, r2
 800bb54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb58:	464b      	mov	r3, r9
 800bb5a:	460a      	mov	r2, r1
 800bb5c:	eb42 0303 	adc.w	r3, r2, r3
 800bb60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bb64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	008b      	lsls	r3, r1, #2
 800bb80:	4641      	mov	r1, r8
 800bb82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb86:	4641      	mov	r1, r8
 800bb88:	008a      	lsls	r2, r1, #2
 800bb8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bb8e:	f7f5 f87b 	bl	8000c88 <__aeabi_uldivmod>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4611      	mov	r1, r2
 800bb98:	4b38      	ldr	r3, [pc, #224]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bb9a:	fba3 2301 	umull	r2, r3, r3, r1
 800bb9e:	095b      	lsrs	r3, r3, #5
 800bba0:	2264      	movs	r2, #100	; 0x64
 800bba2:	fb02 f303 	mul.w	r3, r2, r3
 800bba6:	1acb      	subs	r3, r1, r3
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	3332      	adds	r3, #50	; 0x32
 800bbac:	4a33      	ldr	r2, [pc, #204]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bbae:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb2:	095b      	lsrs	r3, r3, #5
 800bbb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbb8:	441c      	add	r4, r3
 800bbba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	673b      	str	r3, [r7, #112]	; 0x70
 800bbc2:	677a      	str	r2, [r7, #116]	; 0x74
 800bbc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bbc8:	4642      	mov	r2, r8
 800bbca:	464b      	mov	r3, r9
 800bbcc:	1891      	adds	r1, r2, r2
 800bbce:	60b9      	str	r1, [r7, #8]
 800bbd0:	415b      	adcs	r3, r3
 800bbd2:	60fb      	str	r3, [r7, #12]
 800bbd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bbd8:	4641      	mov	r1, r8
 800bbda:	1851      	adds	r1, r2, r1
 800bbdc:	6039      	str	r1, [r7, #0]
 800bbde:	4649      	mov	r1, r9
 800bbe0:	414b      	adcs	r3, r1
 800bbe2:	607b      	str	r3, [r7, #4]
 800bbe4:	f04f 0200 	mov.w	r2, #0
 800bbe8:	f04f 0300 	mov.w	r3, #0
 800bbec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bbf0:	4659      	mov	r1, fp
 800bbf2:	00cb      	lsls	r3, r1, #3
 800bbf4:	4651      	mov	r1, sl
 800bbf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bbfa:	4651      	mov	r1, sl
 800bbfc:	00ca      	lsls	r2, r1, #3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	4619      	mov	r1, r3
 800bc02:	4603      	mov	r3, r0
 800bc04:	4642      	mov	r2, r8
 800bc06:	189b      	adds	r3, r3, r2
 800bc08:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	460a      	mov	r2, r1
 800bc0e:	eb42 0303 	adc.w	r3, r2, r3
 800bc12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc1e:	667a      	str	r2, [r7, #100]	; 0x64
 800bc20:	f04f 0200 	mov.w	r2, #0
 800bc24:	f04f 0300 	mov.w	r3, #0
 800bc28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	008b      	lsls	r3, r1, #2
 800bc30:	4641      	mov	r1, r8
 800bc32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc36:	4641      	mov	r1, r8
 800bc38:	008a      	lsls	r2, r1, #2
 800bc3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc3e:	f7f5 f823 	bl	8000c88 <__aeabi_uldivmod>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4b0d      	ldr	r3, [pc, #52]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bc48:	fba3 1302 	umull	r1, r3, r3, r2
 800bc4c:	095b      	lsrs	r3, r3, #5
 800bc4e:	2164      	movs	r1, #100	; 0x64
 800bc50:	fb01 f303 	mul.w	r3, r1, r3
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	011b      	lsls	r3, r3, #4
 800bc58:	3332      	adds	r3, #50	; 0x32
 800bc5a:	4a08      	ldr	r2, [pc, #32]	; (800bc7c <UART_SetConfig+0x4e4>)
 800bc5c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc60:	095b      	lsrs	r3, r3, #5
 800bc62:	f003 020f 	and.w	r2, r3, #15
 800bc66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4422      	add	r2, r4
 800bc6e:	609a      	str	r2, [r3, #8]
}
 800bc70:	bf00      	nop
 800bc72:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bc76:	46bd      	mov	sp, r7
 800bc78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc7c:	51eb851f 	.word	0x51eb851f

0800bc80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bc80:	b084      	sub	sp, #16
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b084      	sub	sp, #16
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	f107 001c 	add.w	r0, r7, #28
 800bc8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc92:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d123      	bne.n	800bce2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bcae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bcc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d105      	bne.n	800bcd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68db      	ldr	r3, [r3, #12]
 800bcce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bcd6:	6878      	ldr	r0, [r7, #4]
 800bcd8:	f000 f901 	bl	800bede <USB_CoreReset>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
 800bce0:	e01b      	b.n	800bd1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f8f5 	bl	800bede <USB_CoreReset>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bcf8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
 800bd0c:	e005      	b.n	800bd1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd1a:	7fbb      	ldrb	r3, [r7, #30]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d10b      	bne.n	800bd38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	f043 0206 	orr.w	r2, r3, #6
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	689b      	ldr	r3, [r3, #8]
 800bd30:	f043 0220 	orr.w	r2, r3, #32
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd44:	b004      	add	sp, #16
 800bd46:	4770      	bx	lr

0800bd48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f023 0201 	bic.w	r2, r3, #1
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bd5c:	2300      	movs	r3, #0
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b084      	sub	sp, #16
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	460b      	mov	r3, r1
 800bd74:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bd86:	78fb      	ldrb	r3, [r7, #3]
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d115      	bne.n	800bdb8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bd98:	200a      	movs	r0, #10
 800bd9a:	f7fa fe09 	bl	80069b0 <HAL_Delay>
      ms += 10U;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	330a      	adds	r3, #10
 800bda2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f88c 	bl	800bec2 <USB_GetMode>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d01e      	beq.n	800bdee <USB_SetCurrentMode+0x84>
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2bc7      	cmp	r3, #199	; 0xc7
 800bdb4:	d9f0      	bls.n	800bd98 <USB_SetCurrentMode+0x2e>
 800bdb6:	e01a      	b.n	800bdee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bdb8:	78fb      	ldrb	r3, [r7, #3]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d115      	bne.n	800bdea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bdca:	200a      	movs	r0, #10
 800bdcc:	f7fa fdf0 	bl	80069b0 <HAL_Delay>
      ms += 10U;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	330a      	adds	r3, #10
 800bdd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f873 	bl	800bec2 <USB_GetMode>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d005      	beq.n	800bdee <USB_SetCurrentMode+0x84>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2bc7      	cmp	r3, #199	; 0xc7
 800bde6:	d9f0      	bls.n	800bdca <USB_SetCurrentMode+0x60>
 800bde8:	e001      	b.n	800bdee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e005      	b.n	800bdfa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2bc8      	cmp	r3, #200	; 0xc8
 800bdf2:	d101      	bne.n	800bdf8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e000      	b.n	800bdfa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be0c:	2300      	movs	r3, #0
 800be0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be1c:	d901      	bls.n	800be22 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800be1e:	2303      	movs	r3, #3
 800be20:	e01b      	b.n	800be5a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	daf2      	bge.n	800be10 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800be2a:	2300      	movs	r3, #0
 800be2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	019b      	lsls	r3, r3, #6
 800be32:	f043 0220 	orr.w	r2, r3, #32
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	3301      	adds	r3, #1
 800be3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be46:	d901      	bls.n	800be4c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e006      	b.n	800be5a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	f003 0320 	and.w	r3, r3, #32
 800be54:	2b20      	cmp	r3, #32
 800be56:	d0f0      	beq.n	800be3a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr

0800be66 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800be66:	b480      	push	{r7}
 800be68:	b085      	sub	sp, #20
 800be6a:	af00      	add	r7, sp, #0
 800be6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	3301      	adds	r3, #1
 800be76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800be7e:	d901      	bls.n	800be84 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800be80:	2303      	movs	r3, #3
 800be82:	e018      	b.n	800beb6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	daf2      	bge.n	800be72 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2210      	movs	r2, #16
 800be94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3301      	adds	r3, #1
 800be9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bea2:	d901      	bls.n	800bea8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e006      	b.n	800beb6 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	f003 0310 	and.w	r3, r3, #16
 800beb0:	2b10      	cmp	r3, #16
 800beb2:	d0f0      	beq.n	800be96 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b083      	sub	sp, #12
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	695b      	ldr	r3, [r3, #20]
 800bece:	f003 0301 	and.w	r3, r3, #1
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bee6:	2300      	movs	r3, #0
 800bee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3301      	adds	r3, #1
 800beee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bef6:	d901      	bls.n	800befc <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bef8:	2303      	movs	r3, #3
 800befa:	e01b      	b.n	800bf34 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	daf2      	bge.n	800beea <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	f043 0201 	orr.w	r2, r3, #1
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3301      	adds	r3, #1
 800bf18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bf20:	d901      	bls.n	800bf26 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bf22:	2303      	movs	r3, #3
 800bf24:	e006      	b.n	800bf34 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d0f0      	beq.n	800bf14 <USB_CoreReset+0x36>

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf40:	b084      	sub	sp, #16
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b086      	sub	sp, #24
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf52:	2300      	movs	r3, #0
 800bf54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf60:	461a      	mov	r2, r3
 800bf62:	2300      	movs	r3, #0
 800bf64:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf76:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf82:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d119      	bne.n	800bfca <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bf96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf9a:	2b01      	cmp	r3, #1
 800bf9c:	d10a      	bne.n	800bfb4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfac:	f043 0304 	orr.w	r3, r3, #4
 800bfb0:	6013      	str	r3, [r2, #0]
 800bfb2:	e014      	b.n	800bfde <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfc2:	f023 0304 	bic.w	r3, r3, #4
 800bfc6:	6013      	str	r3, [r2, #0]
 800bfc8:	e009      	b.n	800bfde <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bfd8:	f023 0304 	bic.w	r3, r3, #4
 800bfdc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bfde:	2110      	movs	r1, #16
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f7ff ff0e 	bl	800be02 <USB_FlushTxFifo>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d001      	beq.n	800bff0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff ff38 	bl	800be66 <USB_FlushRxFifo>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c000:	2300      	movs	r3, #0
 800c002:	613b      	str	r3, [r7, #16]
 800c004:	e015      	b.n	800c032 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	015a      	lsls	r2, r3, #5
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	4413      	add	r3, r2
 800c00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c012:	461a      	mov	r2, r3
 800c014:	f04f 33ff 	mov.w	r3, #4294967295
 800c018:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	015a      	lsls	r2, r3, #5
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	4413      	add	r3, r2
 800c022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c026:	461a      	mov	r2, r3
 800c028:	2300      	movs	r3, #0
 800c02a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	3301      	adds	r3, #1
 800c030:	613b      	str	r3, [r7, #16]
 800c032:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c036:	461a      	mov	r2, r3
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d3e3      	bcc.n	800c006 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f04f 32ff 	mov.w	r2, #4294967295
 800c04a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a18      	ldr	r2, [pc, #96]	; (800c0b0 <USB_HostInit+0x170>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d10b      	bne.n	800c06c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c05a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a15      	ldr	r2, [pc, #84]	; (800c0b4 <USB_HostInit+0x174>)
 800c060:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a14      	ldr	r2, [pc, #80]	; (800c0b8 <USB_HostInit+0x178>)
 800c066:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c06a:	e009      	b.n	800c080 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2280      	movs	r2, #128	; 0x80
 800c070:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a11      	ldr	r2, [pc, #68]	; (800c0bc <USB_HostInit+0x17c>)
 800c076:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a11      	ldr	r2, [pc, #68]	; (800c0c0 <USB_HostInit+0x180>)
 800c07c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c080:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c084:	2b00      	cmp	r3, #0
 800c086:	d105      	bne.n	800c094 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	f043 0210 	orr.w	r2, r3, #16
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	699a      	ldr	r2, [r3, #24]
 800c098:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <USB_HostInit+0x184>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c0ac:	b004      	add	sp, #16
 800c0ae:	4770      	bx	lr
 800c0b0:	40040000 	.word	0x40040000
 800c0b4:	01000200 	.word	0x01000200
 800c0b8:	00e00300 	.word	0x00e00300
 800c0bc:	00600080 	.word	0x00600080
 800c0c0:	004000e0 	.word	0x004000e0
 800c0c4:	a3200008 	.word	0xa3200008

0800c0c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c0cc:	4904      	ldr	r1, [pc, #16]	; (800c0e0 <MX_FATFS_Init+0x18>)
 800c0ce:	4805      	ldr	r0, [pc, #20]	; (800c0e4 <MX_FATFS_Init+0x1c>)
 800c0d0:	f003 fe28 	bl	800fd24 <FATFS_LinkDriver>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <MX_FATFS_Init+0x20>)
 800c0da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c0dc:	bf00      	nop
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	20003424 	.word	0x20003424
 800c0e4:	20000150 	.word	0x20000150
 800c0e8:	20003420 	.word	0x20003420

0800c0ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c0f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	4603      	mov	r3, r0
 800c104:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		  /*Stat = STA_NOINIT;
		    return Stat;*/
			return SD_disk_initialize(pdrv);
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f8 fb45 	bl	8004798 <SD_disk_initialize>
 800c10e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c110:	4618      	mov	r0, r3
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	4603      	mov	r3, r0
 800c120:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		 /*Stat = STA_NOINIT;
		    return Stat;*/
			return SD_disk_status(pdrv);
 800c122:	79fb      	ldrb	r3, [r7, #7]
 800c124:	4618      	mov	r0, r3
 800c126:	f7f8 fc23 	bl	8004970 <SD_disk_status>
 800c12a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3708      	adds	r7, #8
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	4603      	mov	r3, r0
 800c142:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		 // return RES_OK;
			return SD_disk_read(pdrv,buff,sector,count);
 800c144:	7bf8      	ldrb	r0, [r7, #15]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	68b9      	ldr	r1, [r7, #8]
 800c14c:	f7f8 fc26 	bl	800499c <SD_disk_read>
 800c150:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	607a      	str	r2, [r7, #4]
 800c164:	603b      	str	r3, [r7, #0]
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	  /* USER CODE HERE */
		// return RES_OK;
			return SD_disk_write(pdrv,buff,sector,count);
 800c16a:	7bf8      	ldrb	r0, [r7, #15]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	68b9      	ldr	r1, [r7, #8]
 800c172:	f7f8 fc7d 	bl	8004a70 <SD_disk_write>
 800c176:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b082      	sub	sp, #8
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	603a      	str	r2, [r7, #0]
 800c18a:	71fb      	strb	r3, [r7, #7]
 800c18c:	460b      	mov	r3, r1
 800c18e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
		/* DRESULT res = RES_ERROR;
		    return res;*/
			return SD_disk_ioctl(pdrv,cmd,buff);
 800c190:	79b9      	ldrb	r1, [r7, #6]
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	4618      	mov	r0, r3
 800c198:	f7f8 fcee 	bl	8004b78 <SD_disk_ioctl>
 800c19c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b084      	sub	sp, #16
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	4a08      	ldr	r2, [pc, #32]	; (800c1d8 <disk_status+0x30>)
 800c1b6:	009b      	lsls	r3, r3, #2
 800c1b8:	4413      	add	r3, r2
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	79fa      	ldrb	r2, [r7, #7]
 800c1c0:	4905      	ldr	r1, [pc, #20]	; (800c1d8 <disk_status+0x30>)
 800c1c2:	440a      	add	r2, r1
 800c1c4:	7a12      	ldrb	r2, [r2, #8]
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	4798      	blx	r3
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	20003650 	.word	0x20003650

0800c1dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	4a0e      	ldr	r2, [pc, #56]	; (800c228 <disk_initialize+0x4c>)
 800c1ee:	5cd3      	ldrb	r3, [r2, r3]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d114      	bne.n	800c21e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c1f4:	79fb      	ldrb	r3, [r7, #7]
 800c1f6:	4a0c      	ldr	r2, [pc, #48]	; (800c228 <disk_initialize+0x4c>)
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4413      	add	r3, r2
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	79fa      	ldrb	r2, [r7, #7]
 800c202:	4909      	ldr	r1, [pc, #36]	; (800c228 <disk_initialize+0x4c>)
 800c204:	440a      	add	r2, r1
 800c206:	7a12      	ldrb	r2, [r2, #8]
 800c208:	4610      	mov	r0, r2
 800c20a:	4798      	blx	r3
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d103      	bne.n	800c21e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c216:	79fb      	ldrb	r3, [r7, #7]
 800c218:	4a03      	ldr	r2, [pc, #12]	; (800c228 <disk_initialize+0x4c>)
 800c21a:	2101      	movs	r1, #1
 800c21c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20003650 	.word	0x20003650

0800c22c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c22c:	b590      	push	{r4, r7, lr}
 800c22e:	b087      	sub	sp, #28
 800c230:	af00      	add	r7, sp, #0
 800c232:	60b9      	str	r1, [r7, #8]
 800c234:	607a      	str	r2, [r7, #4]
 800c236:	603b      	str	r3, [r7, #0]
 800c238:	4603      	mov	r3, r0
 800c23a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c23c:	7bfb      	ldrb	r3, [r7, #15]
 800c23e:	4a0a      	ldr	r2, [pc, #40]	; (800c268 <disk_read+0x3c>)
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	689c      	ldr	r4, [r3, #8]
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	4a07      	ldr	r2, [pc, #28]	; (800c268 <disk_read+0x3c>)
 800c24c:	4413      	add	r3, r2
 800c24e:	7a18      	ldrb	r0, [r3, #8]
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	68b9      	ldr	r1, [r7, #8]
 800c256:	47a0      	blx	r4
 800c258:	4603      	mov	r3, r0
 800c25a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	bd90      	pop	{r4, r7, pc}
 800c266:	bf00      	nop
 800c268:	20003650 	.word	0x20003650

0800c26c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c26c:	b590      	push	{r4, r7, lr}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	60b9      	str	r1, [r7, #8]
 800c274:	607a      	str	r2, [r7, #4]
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	4a0a      	ldr	r2, [pc, #40]	; (800c2a8 <disk_write+0x3c>)
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	68dc      	ldr	r4, [r3, #12]
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	4a07      	ldr	r2, [pc, #28]	; (800c2a8 <disk_write+0x3c>)
 800c28c:	4413      	add	r3, r2
 800c28e:	7a18      	ldrb	r0, [r3, #8]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	68b9      	ldr	r1, [r7, #8]
 800c296:	47a0      	blx	r4
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	371c      	adds	r7, #28
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd90      	pop	{r4, r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20003650 	.word	0x20003650

0800c2ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	603a      	str	r2, [r7, #0]
 800c2b6:	71fb      	strb	r3, [r7, #7]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c2bc:	79fb      	ldrb	r3, [r7, #7]
 800c2be:	4a09      	ldr	r2, [pc, #36]	; (800c2e4 <disk_ioctl+0x38>)
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	79fa      	ldrb	r2, [r7, #7]
 800c2ca:	4906      	ldr	r1, [pc, #24]	; (800c2e4 <disk_ioctl+0x38>)
 800c2cc:	440a      	add	r2, r1
 800c2ce:	7a10      	ldrb	r0, [r2, #8]
 800c2d0:	79b9      	ldrb	r1, [r7, #6]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	4798      	blx	r3
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	20003650 	.word	0x20003650

0800c2e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c2f8:	89fb      	ldrh	r3, [r7, #14]
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	b21a      	sxth	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	b21b      	sxth	r3, r3
 800c304:	4313      	orrs	r3, r2
 800c306:	b21b      	sxth	r3, r3
 800c308:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c30a:	89fb      	ldrh	r3, [r7, #14]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	3303      	adds	r3, #3
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	021b      	lsls	r3, r3, #8
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	3202      	adds	r2, #2
 800c330:	7812      	ldrb	r2, [r2, #0]
 800c332:	4313      	orrs	r3, r2
 800c334:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	021b      	lsls	r3, r3, #8
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	3201      	adds	r2, #1
 800c33e:	7812      	ldrb	r2, [r2, #0]
 800c340:	4313      	orrs	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	021b      	lsls	r3, r3, #8
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	7812      	ldrb	r2, [r2, #0]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c350:	68fb      	ldr	r3, [r7, #12]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	887a      	ldrh	r2, [r7, #2]
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	701a      	strb	r2, [r3, #0]
 800c376:	887b      	ldrh	r3, [r7, #2]
 800c378:	0a1b      	lsrs	r3, r3, #8
 800c37a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	1c5a      	adds	r2, r3, #1
 800c380:	607a      	str	r2, [r7, #4]
 800c382:	887a      	ldrh	r2, [r7, #2]
 800c384:	b2d2      	uxtb	r2, r2
 800c386:	701a      	strb	r2, [r3, #0]
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	607a      	str	r2, [r7, #4]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	b2d2      	uxtb	r2, r2
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	0a1b      	lsrs	r3, r3, #8
 800c3ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	607a      	str	r2, [r7, #4]
 800c3b6:	683a      	ldr	r2, [r7, #0]
 800c3b8:	b2d2      	uxtb	r2, r2
 800c3ba:	701a      	strb	r2, [r3, #0]
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	0a1b      	lsrs	r3, r3, #8
 800c3c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	607a      	str	r2, [r7, #4]
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	0a1b      	lsrs	r3, r3, #8
 800c3d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	1c5a      	adds	r2, r3, #1
 800c3d8:	607a      	str	r2, [r7, #4]
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
}
 800c3e0:	bf00      	nop
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c3ec:	b480      	push	{r7}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00d      	beq.n	800c422 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c406:	693a      	ldr	r2, [r7, #16]
 800c408:	1c53      	adds	r3, r2, #1
 800c40a:	613b      	str	r3, [r7, #16]
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	1c59      	adds	r1, r3, #1
 800c410:	6179      	str	r1, [r7, #20]
 800c412:	7812      	ldrb	r2, [r2, #0]
 800c414:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3b01      	subs	r3, #1
 800c41a:	607b      	str	r3, [r7, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1f1      	bne.n	800c406 <mem_cpy+0x1a>
	}
}
 800c422:	bf00      	nop
 800c424:	371c      	adds	r7, #28
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr

0800c42e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c42e:	b480      	push	{r7}
 800c430:	b087      	sub	sp, #28
 800c432:	af00      	add	r7, sp, #0
 800c434:	60f8      	str	r0, [r7, #12]
 800c436:	60b9      	str	r1, [r7, #8]
 800c438:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	1c5a      	adds	r2, r3, #1
 800c442:	617a      	str	r2, [r7, #20]
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	607b      	str	r3, [r7, #4]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1f3      	bne.n	800c43e <mem_set+0x10>
}
 800c456:	bf00      	nop
 800c458:	bf00      	nop
 800c45a:	371c      	adds	r7, #28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c464:	b480      	push	{r7}
 800c466:	b089      	sub	sp, #36	; 0x24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	61fb      	str	r3, [r7, #28]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	1c5a      	adds	r2, r3, #1
 800c480:	61fa      	str	r2, [r7, #28]
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	4619      	mov	r1, r3
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	1c5a      	adds	r2, r3, #1
 800c48a:	61ba      	str	r2, [r7, #24]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	1acb      	subs	r3, r1, r3
 800c490:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	3b01      	subs	r3, #1
 800c496:	607b      	str	r3, [r7, #4]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <mem_cmp+0x40>
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0eb      	beq.n	800c47c <mem_cmp+0x18>

	return r;
 800c4a4:	697b      	ldr	r3, [r7, #20]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3724      	adds	r7, #36	; 0x24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c4bc:	e002      	b.n	800c4c4 <chk_chr+0x12>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	607b      	str	r3, [r7, #4]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d005      	beq.n	800c4d8 <chk_chr+0x26>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d1f2      	bne.n	800c4be <chk_chr+0xc>
	return *str;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	781b      	ldrb	r3, [r3, #0]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b082      	sub	sp, #8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d009      	beq.n	800c50a <lock_fs+0x22>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f003 fd14 	bl	800ff28 <ff_req_grant>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d001      	beq.n	800c50a <lock_fs+0x22>
 800c506:	2301      	movs	r3, #1
 800c508:	e000      	b.n	800c50c <lock_fs+0x24>
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00d      	beq.n	800c542 <unlock_fs+0x2e>
 800c526:	78fb      	ldrb	r3, [r7, #3]
 800c528:	2b0c      	cmp	r3, #12
 800c52a:	d00a      	beq.n	800c542 <unlock_fs+0x2e>
 800c52c:	78fb      	ldrb	r3, [r7, #3]
 800c52e:	2b0b      	cmp	r3, #11
 800c530:	d007      	beq.n	800c542 <unlock_fs+0x2e>
 800c532:	78fb      	ldrb	r3, [r7, #3]
 800c534:	2b0f      	cmp	r3, #15
 800c536:	d004      	beq.n	800c542 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	4618      	mov	r0, r3
 800c53e:	f003 fd08 	bl	800ff52 <ff_rel_grant>
	}
}
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
	...

0800c54c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c556:	2300      	movs	r3, #0
 800c558:	60bb      	str	r3, [r7, #8]
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	e029      	b.n	800c5b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c560:	4a27      	ldr	r2, [pc, #156]	; (800c600 <chk_lock+0xb4>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	011b      	lsls	r3, r3, #4
 800c566:	4413      	add	r3, r2
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d01d      	beq.n	800c5aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c56e:	4a24      	ldr	r2, [pc, #144]	; (800c600 <chk_lock+0xb4>)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	011b      	lsls	r3, r3, #4
 800c574:	4413      	add	r3, r2
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d116      	bne.n	800c5ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c580:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <chk_lock+0xb4>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	4413      	add	r3, r2
 800c588:	3304      	adds	r3, #4
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c590:	429a      	cmp	r2, r3
 800c592:	d10c      	bne.n	800c5ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c594:	4a1a      	ldr	r2, [pc, #104]	; (800c600 <chk_lock+0xb4>)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	011b      	lsls	r3, r3, #4
 800c59a:	4413      	add	r3, r2
 800c59c:	3308      	adds	r3, #8
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d102      	bne.n	800c5ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c5a8:	e007      	b.n	800c5ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d9d2      	bls.n	800c560 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d109      	bne.n	800c5d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d102      	bne.n	800c5cc <chk_lock+0x80>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d101      	bne.n	800c5d0 <chk_lock+0x84>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e010      	b.n	800c5f2 <chk_lock+0xa6>
 800c5d0:	2312      	movs	r3, #18
 800c5d2:	e00e      	b.n	800c5f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d108      	bne.n	800c5ec <chk_lock+0xa0>
 800c5da:	4a09      	ldr	r2, [pc, #36]	; (800c600 <chk_lock+0xb4>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	011b      	lsls	r3, r3, #4
 800c5e0:	4413      	add	r3, r2
 800c5e2:	330c      	adds	r3, #12
 800c5e4:	881b      	ldrh	r3, [r3, #0]
 800c5e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ea:	d101      	bne.n	800c5f0 <chk_lock+0xa4>
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	e000      	b.n	800c5f2 <chk_lock+0xa6>
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	20003430 	.word	0x20003430

0800c604 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c60a:	2300      	movs	r3, #0
 800c60c:	607b      	str	r3, [r7, #4]
 800c60e:	e002      	b.n	800c616 <enq_lock+0x12>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3301      	adds	r3, #1
 800c614:	607b      	str	r3, [r7, #4]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2b01      	cmp	r3, #1
 800c61a:	d806      	bhi.n	800c62a <enq_lock+0x26>
 800c61c:	4a09      	ldr	r2, [pc, #36]	; (800c644 <enq_lock+0x40>)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	011b      	lsls	r3, r3, #4
 800c622:	4413      	add	r3, r2
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1f2      	bne.n	800c610 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	bf14      	ite	ne
 800c630:	2301      	movne	r3, #1
 800c632:	2300      	moveq	r3, #0
 800c634:	b2db      	uxtb	r3, r3
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	20003430 	.word	0x20003430

0800c648 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c652:	2300      	movs	r3, #0
 800c654:	60fb      	str	r3, [r7, #12]
 800c656:	e01f      	b.n	800c698 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c658:	4a41      	ldr	r2, [pc, #260]	; (800c760 <inc_lock+0x118>)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	011b      	lsls	r3, r3, #4
 800c65e:	4413      	add	r3, r2
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	429a      	cmp	r2, r3
 800c668:	d113      	bne.n	800c692 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c66a:	4a3d      	ldr	r2, [pc, #244]	; (800c760 <inc_lock+0x118>)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	011b      	lsls	r3, r3, #4
 800c670:	4413      	add	r3, r2
 800c672:	3304      	adds	r3, #4
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d109      	bne.n	800c692 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c67e:	4a38      	ldr	r2, [pc, #224]	; (800c760 <inc_lock+0x118>)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	011b      	lsls	r3, r3, #4
 800c684:	4413      	add	r3, r2
 800c686:	3308      	adds	r3, #8
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c68e:	429a      	cmp	r2, r3
 800c690:	d006      	beq.n	800c6a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	3301      	adds	r3, #1
 800c696:	60fb      	str	r3, [r7, #12]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	d9dc      	bls.n	800c658 <inc_lock+0x10>
 800c69e:	e000      	b.n	800c6a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c6a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d132      	bne.n	800c70e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	e002      	b.n	800c6b4 <inc_lock+0x6c>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d806      	bhi.n	800c6c8 <inc_lock+0x80>
 800c6ba:	4a29      	ldr	r2, [pc, #164]	; (800c760 <inc_lock+0x118>)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	011b      	lsls	r3, r3, #4
 800c6c0:	4413      	add	r3, r2
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1f2      	bne.n	800c6ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d101      	bne.n	800c6d2 <inc_lock+0x8a>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	e040      	b.n	800c754 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	4922      	ldr	r1, [pc, #136]	; (800c760 <inc_lock+0x118>)
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	440b      	add	r3, r1
 800c6de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	689a      	ldr	r2, [r3, #8]
 800c6e4:	491e      	ldr	r1, [pc, #120]	; (800c760 <inc_lock+0x118>)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	011b      	lsls	r3, r3, #4
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3304      	adds	r3, #4
 800c6ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	695a      	ldr	r2, [r3, #20]
 800c6f4:	491a      	ldr	r1, [pc, #104]	; (800c760 <inc_lock+0x118>)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	011b      	lsls	r3, r3, #4
 800c6fa:	440b      	add	r3, r1
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c700:	4a17      	ldr	r2, [pc, #92]	; (800c760 <inc_lock+0x118>)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	011b      	lsls	r3, r3, #4
 800c706:	4413      	add	r3, r2
 800c708:	330c      	adds	r3, #12
 800c70a:	2200      	movs	r2, #0
 800c70c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d009      	beq.n	800c728 <inc_lock+0xe0>
 800c714:	4a12      	ldr	r2, [pc, #72]	; (800c760 <inc_lock+0x118>)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	011b      	lsls	r3, r3, #4
 800c71a:	4413      	add	r3, r2
 800c71c:	330c      	adds	r3, #12
 800c71e:	881b      	ldrh	r3, [r3, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <inc_lock+0xe0>
 800c724:	2300      	movs	r3, #0
 800c726:	e015      	b.n	800c754 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d108      	bne.n	800c740 <inc_lock+0xf8>
 800c72e:	4a0c      	ldr	r2, [pc, #48]	; (800c760 <inc_lock+0x118>)
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	011b      	lsls	r3, r3, #4
 800c734:	4413      	add	r3, r2
 800c736:	330c      	adds	r3, #12
 800c738:	881b      	ldrh	r3, [r3, #0]
 800c73a:	3301      	adds	r3, #1
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	e001      	b.n	800c744 <inc_lock+0xfc>
 800c740:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c744:	4906      	ldr	r1, [pc, #24]	; (800c760 <inc_lock+0x118>)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	011b      	lsls	r3, r3, #4
 800c74a:	440b      	add	r3, r1
 800c74c:	330c      	adds	r3, #12
 800c74e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3301      	adds	r3, #1
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	20003430 	.word	0x20003430

0800c764 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3b01      	subs	r3, #1
 800c770:	607b      	str	r3, [r7, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d825      	bhi.n	800c7c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800c778:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <dec_lock+0x74>)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	011b      	lsls	r3, r3, #4
 800c77e:	4413      	add	r3, r2
 800c780:	330c      	adds	r3, #12
 800c782:	881b      	ldrh	r3, [r3, #0]
 800c784:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c786:	89fb      	ldrh	r3, [r7, #14]
 800c788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c78c:	d101      	bne.n	800c792 <dec_lock+0x2e>
 800c78e:	2300      	movs	r3, #0
 800c790:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c792:	89fb      	ldrh	r3, [r7, #14]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <dec_lock+0x3a>
 800c798:	89fb      	ldrh	r3, [r7, #14]
 800c79a:	3b01      	subs	r3, #1
 800c79c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c79e:	4a0e      	ldr	r2, [pc, #56]	; (800c7d8 <dec_lock+0x74>)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	011b      	lsls	r3, r3, #4
 800c7a4:	4413      	add	r3, r2
 800c7a6:	330c      	adds	r3, #12
 800c7a8:	89fa      	ldrh	r2, [r7, #14]
 800c7aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c7ac:	89fb      	ldrh	r3, [r7, #14]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d105      	bne.n	800c7be <dec_lock+0x5a>
 800c7b2:	4a09      	ldr	r2, [pc, #36]	; (800c7d8 <dec_lock+0x74>)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	011b      	lsls	r3, r3, #4
 800c7b8:	4413      	add	r3, r2
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	737b      	strb	r3, [r7, #13]
 800c7c2:	e001      	b.n	800c7c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c7c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	20003430 	.word	0x20003430

0800c7dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	60fb      	str	r3, [r7, #12]
 800c7e8:	e010      	b.n	800c80c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c7ea:	4a0d      	ldr	r2, [pc, #52]	; (800c820 <clear_lock+0x44>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	011b      	lsls	r3, r3, #4
 800c7f0:	4413      	add	r3, r2
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d105      	bne.n	800c806 <clear_lock+0x2a>
 800c7fa:	4a09      	ldr	r2, [pc, #36]	; (800c820 <clear_lock+0x44>)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	011b      	lsls	r3, r3, #4
 800c800:	4413      	add	r3, r2
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3301      	adds	r3, #1
 800c80a:	60fb      	str	r3, [r7, #12]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d9eb      	bls.n	800c7ea <clear_lock+0xe>
	}
}
 800c812:	bf00      	nop
 800c814:	bf00      	nop
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr
 800c820:	20003430 	.word	0x20003430

0800c824 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c82c:	2300      	movs	r3, #0
 800c82e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	78db      	ldrb	r3, [r3, #3]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d034      	beq.n	800c8a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	7858      	ldrb	r0, [r3, #1]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c848:	2301      	movs	r3, #1
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	f7ff fd0e 	bl	800c26c <disk_write>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <sync_window+0x38>
			res = FR_DISK_ERR;
 800c856:	2301      	movs	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
 800c85a:	e022      	b.n	800c8a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c866:	697a      	ldr	r2, [r7, #20]
 800c868:	1ad2      	subs	r2, r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c86e:	429a      	cmp	r2, r3
 800c870:	d217      	bcs.n	800c8a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	789b      	ldrb	r3, [r3, #2]
 800c876:	613b      	str	r3, [r7, #16]
 800c878:	e010      	b.n	800c89c <sync_window+0x78>
					wsect += fs->fsize;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	4413      	add	r3, r2
 800c882:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	7858      	ldrb	r0, [r3, #1]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c88e:	2301      	movs	r3, #1
 800c890:	697a      	ldr	r2, [r7, #20]
 800c892:	f7ff fceb 	bl	800c26c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	3b01      	subs	r3, #1
 800c89a:	613b      	str	r3, [r7, #16]
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d8eb      	bhi.n	800c87a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d01b      	beq.n	800c8fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff ffad 	bl	800c824 <sync_window>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d113      	bne.n	800c8fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	7858      	ldrb	r0, [r3, #1]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c8de:	2301      	movs	r3, #1
 800c8e0:	683a      	ldr	r2, [r7, #0]
 800c8e2:	f7ff fca3 	bl	800c22c <disk_read>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
	...

0800c908 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff ff87 	bl	800c824 <sync_window>
 800c916:	4603      	mov	r3, r0
 800c918:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d159      	bne.n	800c9d4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	781b      	ldrb	r3, [r3, #0]
 800c924:	2b03      	cmp	r3, #3
 800c926:	d149      	bne.n	800c9bc <sync_fs+0xb4>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	791b      	ldrb	r3, [r3, #4]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d145      	bne.n	800c9bc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	899b      	ldrh	r3, [r3, #12]
 800c93a:	461a      	mov	r2, r3
 800c93c:	2100      	movs	r1, #0
 800c93e:	f7ff fd76 	bl	800c42e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	333c      	adds	r3, #60	; 0x3c
 800c946:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c94a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff fd05 	bl	800c35e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	333c      	adds	r3, #60	; 0x3c
 800c958:	4921      	ldr	r1, [pc, #132]	; (800c9e0 <sync_fs+0xd8>)
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7ff fd1a 	bl	800c394 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	333c      	adds	r3, #60	; 0x3c
 800c964:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c968:	491e      	ldr	r1, [pc, #120]	; (800c9e4 <sync_fs+0xdc>)
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff fd12 	bl	800c394 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	333c      	adds	r3, #60	; 0x3c
 800c974:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	69db      	ldr	r3, [r3, #28]
 800c97c:	4619      	mov	r1, r3
 800c97e:	4610      	mov	r0, r2
 800c980:	f7ff fd08 	bl	800c394 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	333c      	adds	r3, #60	; 0x3c
 800c988:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	4619      	mov	r1, r3
 800c992:	4610      	mov	r0, r2
 800c994:	f7ff fcfe 	bl	800c394 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	7858      	ldrb	r0, [r3, #1]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	f7ff fc5b 	bl	800c26c <disk_write>
			fs->fsi_flag = 0;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	2100      	movs	r1, #0
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff fc71 	bl	800c2ac <disk_ioctl>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <sync_fs+0xcc>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	41615252 	.word	0x41615252
 800c9e4:	61417272 	.word	0x61417272

0800c9e8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	3b02      	subs	r3, #2
 800c9f6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	3b02      	subs	r3, #2
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d301      	bcc.n	800ca08 <clust2sect+0x20>
 800ca04:	2300      	movs	r3, #0
 800ca06:	e008      	b.n	800ca1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	895b      	ldrh	r3, [r3, #10]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	fb03 f202 	mul.w	r2, r3, r2
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca18:	4413      	add	r3, r2
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	370c      	adds	r7, #12
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b086      	sub	sp, #24
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	d904      	bls.n	800ca46 <get_fat+0x20>
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	6a1b      	ldr	r3, [r3, #32]
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d302      	bcc.n	800ca4c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ca46:	2301      	movs	r3, #1
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e0bb      	b.n	800cbc4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ca4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ca50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b03      	cmp	r3, #3
 800ca58:	f000 8083 	beq.w	800cb62 <get_fat+0x13c>
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	f300 80a7 	bgt.w	800cbb0 <get_fat+0x18a>
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d002      	beq.n	800ca6c <get_fat+0x46>
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d056      	beq.n	800cb18 <get_fat+0xf2>
 800ca6a:	e0a1      	b.n	800cbb0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	085b      	lsrs	r3, r3, #1
 800ca74:	68fa      	ldr	r2, [r7, #12]
 800ca76:	4413      	add	r3, r2
 800ca78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	899b      	ldrh	r3, [r3, #12]
 800ca82:	4619      	mov	r1, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca8a:	4413      	add	r3, r2
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	6938      	ldr	r0, [r7, #16]
 800ca90:	f7ff ff0c 	bl	800c8ac <move_window>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f040 808d 	bne.w	800cbb6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	1c5a      	adds	r2, r3, #1
 800caa0:	60fa      	str	r2, [r7, #12]
 800caa2:	693a      	ldr	r2, [r7, #16]
 800caa4:	8992      	ldrh	r2, [r2, #12]
 800caa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800caaa:	fb01 f202 	mul.w	r2, r1, r2
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4413      	add	r3, r2
 800cab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	899b      	ldrh	r3, [r3, #12]
 800cac2:	4619      	mov	r1, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	fbb3 f3f1 	udiv	r3, r3, r1
 800caca:	4413      	add	r3, r2
 800cacc:	4619      	mov	r1, r3
 800cace:	6938      	ldr	r0, [r7, #16]
 800cad0:	f7ff feec 	bl	800c8ac <move_window>
 800cad4:	4603      	mov	r3, r0
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d16f      	bne.n	800cbba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	899b      	ldrh	r3, [r3, #12]
 800cade:	461a      	mov	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	fbb3 f1f2 	udiv	r1, r3, r2
 800cae6:	fb01 f202 	mul.w	r2, r1, r2
 800caea:	1a9b      	subs	r3, r3, r2
 800caec:	693a      	ldr	r2, [r7, #16]
 800caee:	4413      	add	r3, r2
 800caf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caf4:	021b      	lsls	r3, r3, #8
 800caf6:	461a      	mov	r2, r3
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <get_fat+0xe8>
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	091b      	lsrs	r3, r3, #4
 800cb0c:	e002      	b.n	800cb14 <get_fat+0xee>
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb14:	617b      	str	r3, [r7, #20]
			break;
 800cb16:	e055      	b.n	800cbc4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	899b      	ldrh	r3, [r3, #12]
 800cb20:	085b      	lsrs	r3, r3, #1
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	4619      	mov	r1, r3
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb2c:	4413      	add	r3, r2
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6938      	ldr	r0, [r7, #16]
 800cb32:	f7ff febb 	bl	800c8ac <move_window>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d140      	bne.n	800cbbe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	8992      	ldrh	r2, [r2, #12]
 800cb4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb4e:	fb00 f202 	mul.w	r2, r0, r2
 800cb52:	1a9b      	subs	r3, r3, r2
 800cb54:	440b      	add	r3, r1
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fbc6 	bl	800c2e8 <ld_word>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	617b      	str	r3, [r7, #20]
			break;
 800cb60:	e030      	b.n	800cbc4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	899b      	ldrh	r3, [r3, #12]
 800cb6a:	089b      	lsrs	r3, r3, #2
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	4619      	mov	r1, r3
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb76:	4413      	add	r3, r2
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6938      	ldr	r0, [r7, #16]
 800cb7c:	f7ff fe96 	bl	800c8ac <move_window>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d11d      	bne.n	800cbc2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	693a      	ldr	r2, [r7, #16]
 800cb92:	8992      	ldrh	r2, [r2, #12]
 800cb94:	fbb3 f0f2 	udiv	r0, r3, r2
 800cb98:	fb00 f202 	mul.w	r2, r0, r2
 800cb9c:	1a9b      	subs	r3, r3, r2
 800cb9e:	440b      	add	r3, r1
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fbb9 	bl	800c318 <ld_dword>
 800cba6:	4603      	mov	r3, r0
 800cba8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cbac:	617b      	str	r3, [r7, #20]
			break;
 800cbae:	e009      	b.n	800cbc4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	e006      	b.n	800cbc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbb6:	bf00      	nop
 800cbb8:	e004      	b.n	800cbc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cbba:	bf00      	nop
 800cbbc:	e002      	b.n	800cbc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cbbe:	bf00      	nop
 800cbc0:	e000      	b.n	800cbc4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cbc2:	bf00      	nop
		}
	}

	return val;
 800cbc4:	697b      	ldr	r3, [r7, #20]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3718      	adds	r7, #24
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cbce:	b590      	push	{r4, r7, lr}
 800cbd0:	b089      	sub	sp, #36	; 0x24
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cbda:	2302      	movs	r3, #2
 800cbdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	f240 8109 	bls.w	800cdf8 <put_fat+0x22a>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6a1b      	ldr	r3, [r3, #32]
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	f080 8103 	bcs.w	800cdf8 <put_fat+0x22a>
		switch (fs->fs_type) {
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	f000 80b6 	beq.w	800cd68 <put_fat+0x19a>
 800cbfc:	2b03      	cmp	r3, #3
 800cbfe:	f300 80fb 	bgt.w	800cdf8 <put_fat+0x22a>
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d003      	beq.n	800cc0e <put_fat+0x40>
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	f000 8083 	beq.w	800cd12 <put_fat+0x144>
 800cc0c:	e0f4      	b.n	800cdf8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	61bb      	str	r3, [r7, #24]
 800cc12:	69bb      	ldr	r3, [r7, #24]
 800cc14:	085b      	lsrs	r3, r3, #1
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	4413      	add	r3, r2
 800cc1a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	899b      	ldrh	r3, [r3, #12]
 800cc24:	4619      	mov	r1, r3
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	fbb3 f3f1 	udiv	r3, r3, r1
 800cc2c:	4413      	add	r3, r2
 800cc2e:	4619      	mov	r1, r3
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	f7ff fe3b 	bl	800c8ac <move_window>
 800cc36:	4603      	mov	r3, r0
 800cc38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cc3a:	7ffb      	ldrb	r3, [r7, #31]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f040 80d4 	bne.w	800cdea <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cc48:	69bb      	ldr	r3, [r7, #24]
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	61ba      	str	r2, [r7, #24]
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	8992      	ldrh	r2, [r2, #12]
 800cc52:	fbb3 f0f2 	udiv	r0, r3, r2
 800cc56:	fb00 f202 	mul.w	r2, r0, r2
 800cc5a:	1a9b      	subs	r3, r3, r2
 800cc5c:	440b      	add	r3, r1
 800cc5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	f003 0301 	and.w	r3, r3, #1
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00d      	beq.n	800cc86 <put_fat+0xb8>
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	f003 030f 	and.w	r3, r3, #15
 800cc74:	b25a      	sxtb	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	b2db      	uxtb	r3, r3
 800cc7a:	011b      	lsls	r3, r3, #4
 800cc7c:	b25b      	sxtb	r3, r3
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	b25b      	sxtb	r3, r3
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	e001      	b.n	800cc8a <put_fat+0xbc>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2201      	movs	r2, #1
 800cc92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	899b      	ldrh	r3, [r3, #12]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	fbb3 f3f1 	udiv	r3, r3, r1
 800cca4:	4413      	add	r3, r2
 800cca6:	4619      	mov	r1, r3
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f7ff fdff 	bl	800c8ac <move_window>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ccb2:	7ffb      	ldrb	r3, [r7, #31]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f040 809a 	bne.w	800cdee <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	899b      	ldrh	r3, [r3, #12]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	fbb3 f0f2 	udiv	r0, r3, r2
 800cccc:	fb00 f202 	mul.w	r2, r0, r2
 800ccd0:	1a9b      	subs	r3, r3, r2
 800ccd2:	440b      	add	r3, r1
 800ccd4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <put_fat+0x11a>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	091b      	lsrs	r3, r3, #4
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	e00e      	b.n	800cd06 <put_fat+0x138>
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b25b      	sxtb	r3, r3
 800ccee:	f023 030f 	bic.w	r3, r3, #15
 800ccf2:	b25a      	sxtb	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	0a1b      	lsrs	r3, r3, #8
 800ccf8:	b25b      	sxtb	r3, r3
 800ccfa:	f003 030f 	and.w	r3, r3, #15
 800ccfe:	b25b      	sxtb	r3, r3
 800cd00:	4313      	orrs	r3, r2
 800cd02:	b25b      	sxtb	r3, r3
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	697a      	ldr	r2, [r7, #20]
 800cd08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	70da      	strb	r2, [r3, #3]
			break;
 800cd10:	e072      	b.n	800cdf8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	085b      	lsrs	r3, r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	4619      	mov	r1, r3
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd26:	4413      	add	r3, r2
 800cd28:	4619      	mov	r1, r3
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f7ff fdbe 	bl	800c8ac <move_window>
 800cd30:	4603      	mov	r3, r0
 800cd32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd34:	7ffb      	ldrb	r3, [r7, #31]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d15b      	bne.n	800cdf2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	8992      	ldrh	r2, [r2, #12]
 800cd48:	fbb3 f0f2 	udiv	r0, r3, r2
 800cd4c:	fb00 f202 	mul.w	r2, r0, r2
 800cd50:	1a9b      	subs	r3, r3, r2
 800cd52:	440b      	add	r3, r1
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	b292      	uxth	r2, r2
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff faff 	bl	800c35e <st_word>
			fs->wflag = 1;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2201      	movs	r2, #1
 800cd64:	70da      	strb	r2, [r3, #3]
			break;
 800cd66:	e047      	b.n	800cdf8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	899b      	ldrh	r3, [r3, #12]
 800cd70:	089b      	lsrs	r3, r3, #2
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	4619      	mov	r1, r3
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd7c:	4413      	add	r3, r2
 800cd7e:	4619      	mov	r1, r3
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f7ff fd93 	bl	800c8ac <move_window>
 800cd86:	4603      	mov	r3, r0
 800cd88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cd8a:	7ffb      	ldrb	r3, [r7, #31]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d132      	bne.n	800cdf6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	009b      	lsls	r3, r3, #2
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	8992      	ldrh	r2, [r2, #12]
 800cda4:	fbb3 f0f2 	udiv	r0, r3, r2
 800cda8:	fb00 f202 	mul.w	r2, r0, r2
 800cdac:	1a9b      	subs	r3, r3, r2
 800cdae:	440b      	add	r3, r1
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff fab1 	bl	800c318 <ld_dword>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cdbc:	4323      	orrs	r3, r4
 800cdbe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	009b      	lsls	r3, r3, #2
 800cdca:	68fa      	ldr	r2, [r7, #12]
 800cdcc:	8992      	ldrh	r2, [r2, #12]
 800cdce:	fbb3 f0f2 	udiv	r0, r3, r2
 800cdd2:	fb00 f202 	mul.w	r2, r0, r2
 800cdd6:	1a9b      	subs	r3, r3, r2
 800cdd8:	440b      	add	r3, r1
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7ff fad9 	bl	800c394 <st_dword>
			fs->wflag = 1;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2201      	movs	r2, #1
 800cde6:	70da      	strb	r2, [r3, #3]
			break;
 800cde8:	e006      	b.n	800cdf8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800cdea:	bf00      	nop
 800cdec:	e004      	b.n	800cdf8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800cdee:	bf00      	nop
 800cdf0:	e002      	b.n	800cdf8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800cdf2:	bf00      	nop
 800cdf4:	e000      	b.n	800cdf8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800cdf6:	bf00      	nop
		}
	}
	return res;
 800cdf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3724      	adds	r7, #36	; 0x24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd90      	pop	{r4, r7, pc}

0800ce02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b088      	sub	sp, #32
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	60b9      	str	r1, [r7, #8]
 800ce0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d904      	bls.n	800ce28 <remove_chain+0x26>
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d301      	bcc.n	800ce2c <remove_chain+0x2a>
 800ce28:	2302      	movs	r3, #2
 800ce2a:	e04b      	b.n	800cec4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00c      	beq.n	800ce4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ce32:	f04f 32ff 	mov.w	r2, #4294967295
 800ce36:	6879      	ldr	r1, [r7, #4]
 800ce38:	69b8      	ldr	r0, [r7, #24]
 800ce3a:	f7ff fec8 	bl	800cbce <put_fat>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ce42:	7ffb      	ldrb	r3, [r7, #31]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d001      	beq.n	800ce4c <remove_chain+0x4a>
 800ce48:	7ffb      	ldrb	r3, [r7, #31]
 800ce4a:	e03b      	b.n	800cec4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ce4c:	68b9      	ldr	r1, [r7, #8]
 800ce4e:	68f8      	ldr	r0, [r7, #12]
 800ce50:	f7ff fde9 	bl	800ca26 <get_fat>
 800ce54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d031      	beq.n	800cec0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d101      	bne.n	800ce66 <remove_chain+0x64>
 800ce62:	2302      	movs	r3, #2
 800ce64:	e02e      	b.n	800cec4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce6c:	d101      	bne.n	800ce72 <remove_chain+0x70>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e028      	b.n	800cec4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ce72:	2200      	movs	r2, #0
 800ce74:	68b9      	ldr	r1, [r7, #8]
 800ce76:	69b8      	ldr	r0, [r7, #24]
 800ce78:	f7ff fea9 	bl	800cbce <put_fat>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ce80:	7ffb      	ldrb	r3, [r7, #31]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d001      	beq.n	800ce8a <remove_chain+0x88>
 800ce86:	7ffb      	ldrb	r3, [r7, #31]
 800ce88:	e01c      	b.n	800cec4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	69da      	ldr	r2, [r3, #28]
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	3b02      	subs	r3, #2
 800ce94:	429a      	cmp	r2, r3
 800ce96:	d20b      	bcs.n	800ceb0 <remove_chain+0xae>
			fs->free_clst++;
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	69db      	ldr	r3, [r3, #28]
 800ce9c:	1c5a      	adds	r2, r3, #1
 800ce9e:	69bb      	ldr	r3, [r7, #24]
 800cea0:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	791b      	ldrb	r3, [r3, #4]
 800cea6:	f043 0301 	orr.w	r3, r3, #1
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d3c6      	bcc.n	800ce4c <remove_chain+0x4a>
 800cebe:	e000      	b.n	800cec2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cec0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cec2:	2300      	movs	r3, #0
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3720      	adds	r7, #32
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b088      	sub	sp, #32
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10d      	bne.n	800cefe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <create_chain+0x2c>
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	69ba      	ldr	r2, [r7, #24]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d31b      	bcc.n	800cf30 <create_chain+0x64>
 800cef8:	2301      	movs	r3, #1
 800cefa:	61bb      	str	r3, [r7, #24]
 800cefc:	e018      	b.n	800cf30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cefe:	6839      	ldr	r1, [r7, #0]
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff fd90 	bl	800ca26 <get_fat>
 800cf06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d801      	bhi.n	800cf12 <create_chain+0x46>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e070      	b.n	800cff4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf18:	d101      	bne.n	800cf1e <create_chain+0x52>
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	e06a      	b.n	800cff4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	68fa      	ldr	r2, [r7, #12]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d201      	bcs.n	800cf2c <create_chain+0x60>
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	e063      	b.n	800cff4 <create_chain+0x128>
		scl = clst;
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	3301      	adds	r3, #1
 800cf38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	69fa      	ldr	r2, [r7, #28]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d307      	bcc.n	800cf54 <create_chain+0x88>
				ncl = 2;
 800cf44:	2302      	movs	r3, #2
 800cf46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cf48:	69fa      	ldr	r2, [r7, #28]
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d901      	bls.n	800cf54 <create_chain+0x88>
 800cf50:	2300      	movs	r3, #0
 800cf52:	e04f      	b.n	800cff4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cf54:	69f9      	ldr	r1, [r7, #28]
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f7ff fd65 	bl	800ca26 <get_fat>
 800cf5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00e      	beq.n	800cf82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d003      	beq.n	800cf72 <create_chain+0xa6>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf70:	d101      	bne.n	800cf76 <create_chain+0xaa>
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	e03e      	b.n	800cff4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	69bb      	ldr	r3, [r7, #24]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d1da      	bne.n	800cf34 <create_chain+0x68>
 800cf7e:	2300      	movs	r3, #0
 800cf80:	e038      	b.n	800cff4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cf82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cf84:	f04f 32ff 	mov.w	r2, #4294967295
 800cf88:	69f9      	ldr	r1, [r7, #28]
 800cf8a:	6938      	ldr	r0, [r7, #16]
 800cf8c:	f7ff fe1f 	bl	800cbce <put_fat>
 800cf90:	4603      	mov	r3, r0
 800cf92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d109      	bne.n	800cfae <create_chain+0xe2>
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d006      	beq.n	800cfae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cfa0:	69fa      	ldr	r2, [r7, #28]
 800cfa2:	6839      	ldr	r1, [r7, #0]
 800cfa4:	6938      	ldr	r0, [r7, #16]
 800cfa6:	f7ff fe12 	bl	800cbce <put_fat>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d116      	bne.n	800cfe2 <create_chain+0x116>
		fs->last_clst = ncl;
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	69fa      	ldr	r2, [r7, #28]
 800cfb8:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	69da      	ldr	r2, [r3, #28]
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	6a1b      	ldr	r3, [r3, #32]
 800cfc2:	3b02      	subs	r3, #2
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d804      	bhi.n	800cfd2 <create_chain+0x106>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	1e5a      	subs	r2, r3, #1
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	791b      	ldrb	r3, [r3, #4]
 800cfd6:	f043 0301 	orr.w	r3, r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	711a      	strb	r2, [r3, #4]
 800cfe0:	e007      	b.n	800cff2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cfe2:	7dfb      	ldrb	r3, [r7, #23]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d102      	bne.n	800cfee <create_chain+0x122>
 800cfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800cfec:	e000      	b.n	800cff0 <create_chain+0x124>
 800cfee:	2301      	movs	r3, #1
 800cff0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cff2:	69fb      	ldr	r3, [r7, #28]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3720      	adds	r7, #32
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cffc:	b480      	push	{r7}
 800cffe:	b087      	sub	sp, #28
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	3304      	adds	r3, #4
 800d012:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	899b      	ldrh	r3, [r3, #12]
 800d018:	461a      	mov	r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d020:	68fa      	ldr	r2, [r7, #12]
 800d022:	8952      	ldrh	r2, [r2, #10]
 800d024:	fbb3 f3f2 	udiv	r3, r3, r2
 800d028:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	1d1a      	adds	r2, r3, #4
 800d02e:	613a      	str	r2, [r7, #16]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <clmt_clust+0x42>
 800d03a:	2300      	movs	r3, #0
 800d03c:	e010      	b.n	800d060 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800d03e:	697a      	ldr	r2, [r7, #20]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	429a      	cmp	r2, r3
 800d044:	d307      	bcc.n	800d056 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800d046:	697a      	ldr	r2, [r7, #20]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	617b      	str	r3, [r7, #20]
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	3304      	adds	r3, #4
 800d052:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d054:	e7e9      	b.n	800d02a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800d056:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	4413      	add	r3, r2
}
 800d060:	4618      	mov	r0, r3
 800d062:	371c      	adds	r7, #28
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d082:	d204      	bcs.n	800d08e <dir_sdi+0x22>
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	f003 031f 	and.w	r3, r3, #31
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d08e:	2302      	movs	r3, #2
 800d090:	e071      	b.n	800d176 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d106      	bne.n	800d0b2 <dir_sdi+0x46>
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d902      	bls.n	800d0b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10c      	bne.n	800d0d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	095b      	lsrs	r3, r3, #5
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	8912      	ldrh	r2, [r2, #8]
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d301      	bcc.n	800d0c8 <dir_sdi+0x5c>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	e056      	b.n	800d176 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	61da      	str	r2, [r3, #28]
 800d0d0:	e02d      	b.n	800d12e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	895b      	ldrh	r3, [r3, #10]
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	899b      	ldrh	r3, [r3, #12]
 800d0dc:	fb02 f303 	mul.w	r3, r2, r3
 800d0e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d0e2:	e019      	b.n	800d118 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6979      	ldr	r1, [r7, #20]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff fc9c 	bl	800ca26 <get_fat>
 800d0ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0f6:	d101      	bne.n	800d0fc <dir_sdi+0x90>
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e03c      	b.n	800d176 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d904      	bls.n	800d10c <dir_sdi+0xa0>
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d301      	bcc.n	800d110 <dir_sdi+0xa4>
 800d10c:	2302      	movs	r3, #2
 800d10e:	e032      	b.n	800d176 <dir_sdi+0x10a>
			ofs -= csz;
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	1ad3      	subs	r3, r2, r3
 800d116:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d2e1      	bcs.n	800d0e4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800d120:	6979      	ldr	r1, [r7, #20]
 800d122:	6938      	ldr	r0, [r7, #16]
 800d124:	f7ff fc60 	bl	800c9e8 <clust2sect>
 800d128:	4602      	mov	r2, r0
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	697a      	ldr	r2, [r7, #20]
 800d132:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	69db      	ldr	r3, [r3, #28]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <dir_sdi+0xd4>
 800d13c:	2302      	movs	r3, #2
 800d13e:	e01a      	b.n	800d176 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	69da      	ldr	r2, [r3, #28]
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	899b      	ldrh	r3, [r3, #12]
 800d148:	4619      	mov	r1, r3
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d150:	441a      	add	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	899b      	ldrh	r3, [r3, #12]
 800d160:	461a      	mov	r2, r3
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	fbb3 f0f2 	udiv	r0, r3, r2
 800d168:	fb00 f202 	mul.w	r2, r0, r2
 800d16c:	1a9b      	subs	r3, r3, r2
 800d16e:	18ca      	adds	r2, r1, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b086      	sub	sp, #24
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
 800d186:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	695b      	ldr	r3, [r3, #20]
 800d192:	3320      	adds	r3, #32
 800d194:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	69db      	ldr	r3, [r3, #28]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <dir_next+0x28>
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1a4:	d301      	bcc.n	800d1aa <dir_next+0x2c>
 800d1a6:	2304      	movs	r3, #4
 800d1a8:	e0bb      	b.n	800d322 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	899b      	ldrh	r3, [r3, #12]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1b6:	fb01 f202 	mul.w	r2, r1, r2
 800d1ba:	1a9b      	subs	r3, r3, r2
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	f040 809d 	bne.w	800d2fc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	69db      	ldr	r3, [r3, #28]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	699b      	ldr	r3, [r3, #24]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10b      	bne.n	800d1ec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	095b      	lsrs	r3, r3, #5
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	8912      	ldrh	r2, [r2, #8]
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	f0c0 808d 	bcc.w	800d2fc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	61da      	str	r2, [r3, #28]
 800d1e8:	2304      	movs	r3, #4
 800d1ea:	e09a      	b.n	800d322 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	899b      	ldrh	r3, [r3, #12]
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	8952      	ldrh	r2, [r2, #10]
 800d1fc:	3a01      	subs	r2, #1
 800d1fe:	4013      	ands	r3, r2
 800d200:	2b00      	cmp	r3, #0
 800d202:	d17b      	bne.n	800d2fc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	699b      	ldr	r3, [r3, #24]
 800d20a:	4619      	mov	r1, r3
 800d20c:	4610      	mov	r0, r2
 800d20e:	f7ff fc0a 	bl	800ca26 <get_fat>
 800d212:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b01      	cmp	r3, #1
 800d218:	d801      	bhi.n	800d21e <dir_next+0xa0>
 800d21a:	2302      	movs	r3, #2
 800d21c:	e081      	b.n	800d322 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d224:	d101      	bne.n	800d22a <dir_next+0xac>
 800d226:	2301      	movs	r3, #1
 800d228:	e07b      	b.n	800d322 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6a1b      	ldr	r3, [r3, #32]
 800d22e:	697a      	ldr	r2, [r7, #20]
 800d230:	429a      	cmp	r2, r3
 800d232:	d359      	bcc.n	800d2e8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d104      	bne.n	800d244 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	61da      	str	r2, [r3, #28]
 800d240:	2304      	movs	r3, #4
 800d242:	e06e      	b.n	800d322 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	4619      	mov	r1, r3
 800d24c:	4610      	mov	r0, r2
 800d24e:	f7ff fe3d 	bl	800cecc <create_chain>
 800d252:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <dir_next+0xe0>
 800d25a:	2307      	movs	r3, #7
 800d25c:	e061      	b.n	800d322 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d101      	bne.n	800d268 <dir_next+0xea>
 800d264:	2302      	movs	r3, #2
 800d266:	e05c      	b.n	800d322 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26e:	d101      	bne.n	800d274 <dir_next+0xf6>
 800d270:	2301      	movs	r3, #1
 800d272:	e056      	b.n	800d322 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f7ff fad5 	bl	800c824 <sync_window>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <dir_next+0x106>
 800d280:	2301      	movs	r3, #1
 800d282:	e04e      	b.n	800d322 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	899b      	ldrh	r3, [r3, #12]
 800d28e:	461a      	mov	r2, r3
 800d290:	2100      	movs	r1, #0
 800d292:	f7ff f8cc 	bl	800c42e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d296:	2300      	movs	r3, #0
 800d298:	613b      	str	r3, [r7, #16]
 800d29a:	6979      	ldr	r1, [r7, #20]
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f7ff fba3 	bl	800c9e8 <clust2sect>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	639a      	str	r2, [r3, #56]	; 0x38
 800d2a8:	e012      	b.n	800d2d0 <dir_next+0x152>
						fs->wflag = 1;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f7ff fab7 	bl	800c824 <sync_window>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <dir_next+0x142>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e030      	b.n	800d322 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	613b      	str	r3, [r7, #16]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	639a      	str	r2, [r3, #56]	; 0x38
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	895b      	ldrh	r3, [r3, #10]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	d3e6      	bcc.n	800d2aa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	1ad2      	subs	r2, r2, r3
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	697a      	ldr	r2, [r7, #20]
 800d2ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d2ee:	6979      	ldr	r1, [r7, #20]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f7ff fb79 	bl	800c9e8 <clust2sect>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	899b      	ldrh	r3, [r3, #12]
 800d30c:	461a      	mov	r2, r3
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	fbb3 f0f2 	udiv	r0, r3, r2
 800d314:	fb00 f202 	mul.w	r2, r0, r2
 800d318:	1a9b      	subs	r3, r3, r2
 800d31a:	18ca      	adds	r2, r1, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b086      	sub	sp, #24
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d33a:	2100      	movs	r1, #0
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7ff fe95 	bl	800d06c <dir_sdi>
 800d342:	4603      	mov	r3, r0
 800d344:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d346:	7dfb      	ldrb	r3, [r7, #23]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d12b      	bne.n	800d3a4 <dir_alloc+0x7a>
		n = 0;
 800d34c:	2300      	movs	r3, #0
 800d34e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	69db      	ldr	r3, [r3, #28]
 800d354:	4619      	mov	r1, r3
 800d356:	68f8      	ldr	r0, [r7, #12]
 800d358:	f7ff faa8 	bl	800c8ac <move_window>
 800d35c:	4603      	mov	r3, r0
 800d35e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d11d      	bne.n	800d3a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6a1b      	ldr	r3, [r3, #32]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	2be5      	cmp	r3, #229	; 0xe5
 800d36e:	d004      	beq.n	800d37a <dir_alloc+0x50>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6a1b      	ldr	r3, [r3, #32]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d107      	bne.n	800d38a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	3301      	adds	r3, #1
 800d37e:	613b      	str	r3, [r7, #16]
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	429a      	cmp	r2, r3
 800d386:	d102      	bne.n	800d38e <dir_alloc+0x64>
 800d388:	e00c      	b.n	800d3a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d38a:	2300      	movs	r3, #0
 800d38c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d38e:	2101      	movs	r1, #1
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7ff fef4 	bl	800d17e <dir_next>
 800d396:	4603      	mov	r3, r0
 800d398:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d0d7      	beq.n	800d350 <dir_alloc+0x26>
 800d3a0:	e000      	b.n	800d3a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d3a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d3a4:	7dfb      	ldrb	r3, [r7, #23]
 800d3a6:	2b04      	cmp	r3, #4
 800d3a8:	d101      	bne.n	800d3ae <dir_alloc+0x84>
 800d3aa:	2307      	movs	r3, #7
 800d3ac:	75fb      	strb	r3, [r7, #23]
	return res;
 800d3ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3718      	adds	r7, #24
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	331a      	adds	r3, #26
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe ff8e 	bl	800c2e8 <ld_word>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	2b03      	cmp	r3, #3
 800d3d6:	d109      	bne.n	800d3ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	3314      	adds	r3, #20
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7fe ff83 	bl	800c2e8 <ld_word>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	041b      	lsls	r3, r3, #16
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d3ec:	68fb      	ldr	r3, [r7, #12]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3710      	adds	r7, #16
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	60f8      	str	r0, [r7, #12]
 800d3fe:	60b9      	str	r1, [r7, #8]
 800d400:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	331a      	adds	r3, #26
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	b292      	uxth	r2, r2
 800d40a:	4611      	mov	r1, r2
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7fe ffa6 	bl	800c35e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	2b03      	cmp	r3, #3
 800d418:	d109      	bne.n	800d42e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	f103 0214 	add.w	r2, r3, #20
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	0c1b      	lsrs	r3, r3, #16
 800d424:	b29b      	uxth	r3, r3
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7fe ff98 	bl	800c35e <st_word>
	}
}
 800d42e:	bf00      	nop
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
	...

0800d438 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800d438:	b590      	push	{r4, r7, lr}
 800d43a:	b087      	sub	sp, #28
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	331a      	adds	r3, #26
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe ff4e 	bl	800c2e8 <ld_word>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d001      	beq.n	800d456 <cmp_lfn+0x1e>
 800d452:	2300      	movs	r3, #0
 800d454:	e059      	b.n	800d50a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d45e:	1e5a      	subs	r2, r3, #1
 800d460:	4613      	mov	r3, r2
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	4413      	add	r3, r2
 800d46a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d46c:	2301      	movs	r3, #1
 800d46e:	81fb      	strh	r3, [r7, #14]
 800d470:	2300      	movs	r3, #0
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	e033      	b.n	800d4de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800d476:	4a27      	ldr	r2, [pc, #156]	; (800d514 <cmp_lfn+0xdc>)
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	4413      	add	r3, r2
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	461a      	mov	r2, r3
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	4413      	add	r3, r2
 800d484:	4618      	mov	r0, r3
 800d486:	f7fe ff2f 	bl	800c2e8 <ld_word>
 800d48a:	4603      	mov	r3, r0
 800d48c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800d48e:	89fb      	ldrh	r3, [r7, #14]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d01a      	beq.n	800d4ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	2bfe      	cmp	r3, #254	; 0xfe
 800d498:	d812      	bhi.n	800d4c0 <cmp_lfn+0x88>
 800d49a:	89bb      	ldrh	r3, [r7, #12]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f002 fc8d 	bl	800fdbc <ff_wtoupper>
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	461c      	mov	r4, r3
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	1c5a      	adds	r2, r3, #1
 800d4aa:	617a      	str	r2, [r7, #20]
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	881b      	ldrh	r3, [r3, #0]
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f002 fc81 	bl	800fdbc <ff_wtoupper>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	429c      	cmp	r4, r3
 800d4be:	d001      	beq.n	800d4c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e022      	b.n	800d50a <cmp_lfn+0xd2>
			}
			wc = uc;
 800d4c4:	89bb      	ldrh	r3, [r7, #12]
 800d4c6:	81fb      	strh	r3, [r7, #14]
 800d4c8:	e006      	b.n	800d4d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d4ca:	89bb      	ldrh	r3, [r7, #12]
 800d4cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d001      	beq.n	800d4d8 <cmp_lfn+0xa0>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e018      	b.n	800d50a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	613b      	str	r3, [r7, #16]
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	2b0c      	cmp	r3, #12
 800d4e2:	d9c8      	bls.n	800d476 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d00b      	beq.n	800d508 <cmp_lfn+0xd0>
 800d4f0:	89fb      	ldrh	r3, [r7, #14]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d008      	beq.n	800d508 <cmp_lfn+0xd0>
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	4413      	add	r3, r2
 800d4fe:	881b      	ldrh	r3, [r3, #0]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <cmp_lfn+0xd0>
 800d504:	2300      	movs	r3, #0
 800d506:	e000      	b.n	800d50a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800d508:	2301      	movs	r3, #1
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	371c      	adds	r7, #28
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd90      	pop	{r4, r7, pc}
 800d512:	bf00      	nop
 800d514:	080180e4 	.word	0x080180e4

0800d518 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b088      	sub	sp, #32
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	4611      	mov	r1, r2
 800d524:	461a      	mov	r2, r3
 800d526:	460b      	mov	r3, r1
 800d528:	71fb      	strb	r3, [r7, #7]
 800d52a:	4613      	mov	r3, r2
 800d52c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	330d      	adds	r3, #13
 800d532:	79ba      	ldrb	r2, [r7, #6]
 800d534:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	330b      	adds	r3, #11
 800d53a:	220f      	movs	r2, #15
 800d53c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	330c      	adds	r3, #12
 800d542:	2200      	movs	r2, #0
 800d544:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	331a      	adds	r3, #26
 800d54a:	2100      	movs	r1, #0
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fe ff06 	bl	800c35e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800d552:	79fb      	ldrb	r3, [r7, #7]
 800d554:	1e5a      	subs	r2, r3, #1
 800d556:	4613      	mov	r3, r2
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	4413      	add	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	82fb      	strh	r3, [r7, #22]
 800d566:	2300      	movs	r3, #0
 800d568:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800d56a:	8afb      	ldrh	r3, [r7, #22]
 800d56c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d570:	4293      	cmp	r3, r2
 800d572:	d007      	beq.n	800d584 <put_lfn+0x6c>
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	61fa      	str	r2, [r7, #28]
 800d57a:	005b      	lsls	r3, r3, #1
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	881b      	ldrh	r3, [r3, #0]
 800d582:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800d584:	4a17      	ldr	r2, [pc, #92]	; (800d5e4 <put_lfn+0xcc>)
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	4413      	add	r3, r2
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	461a      	mov	r2, r3
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	4413      	add	r3, r2
 800d592:	8afa      	ldrh	r2, [r7, #22]
 800d594:	4611      	mov	r1, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe fee1 	bl	800c35e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800d59c:	8afb      	ldrh	r3, [r7, #22]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d102      	bne.n	800d5a8 <put_lfn+0x90>
 800d5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d5a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	61bb      	str	r3, [r7, #24]
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	2b0c      	cmp	r3, #12
 800d5b2:	d9da      	bls.n	800d56a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800d5b4:	8afb      	ldrh	r3, [r7, #22]
 800d5b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d006      	beq.n	800d5cc <put_lfn+0xb4>
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	005b      	lsls	r3, r3, #1
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d103      	bne.n	800d5d4 <put_lfn+0xbc>
 800d5cc:	79fb      	ldrb	r3, [r7, #7]
 800d5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	79fa      	ldrb	r2, [r7, #7]
 800d5d8:	701a      	strb	r2, [r3, #0]
}
 800d5da:	bf00      	nop
 800d5dc:	3720      	adds	r7, #32
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	080180e4 	.word	0x080180e4

0800d5e8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b08c      	sub	sp, #48	; 0x30
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
 800d5f4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800d5f6:	220b      	movs	r2, #11
 800d5f8:	68b9      	ldr	r1, [r7, #8]
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7fe fef6 	bl	800c3ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	2b05      	cmp	r3, #5
 800d604:	d92b      	bls.n	800d65e <gen_numname+0x76>
		sr = seq;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800d60a:	e022      	b.n	800d652 <gen_numname+0x6a>
			wc = *lfn++;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	1c9a      	adds	r2, r3, #2
 800d610:	607a      	str	r2, [r7, #4]
 800d612:	881b      	ldrh	r3, [r3, #0]
 800d614:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800d616:	2300      	movs	r3, #0
 800d618:	62bb      	str	r3, [r7, #40]	; 0x28
 800d61a:	e017      	b.n	800d64c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	005a      	lsls	r2, r3, #1
 800d620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d622:	f003 0301 	and.w	r3, r3, #1
 800d626:	4413      	add	r3, r2
 800d628:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800d62a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d62c:	085b      	lsrs	r3, r3, #1
 800d62e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800d630:	69fb      	ldr	r3, [r7, #28]
 800d632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d636:	2b00      	cmp	r3, #0
 800d638:	d005      	beq.n	800d646 <gen_numname+0x5e>
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800d640:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800d644:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	3301      	adds	r3, #1
 800d64a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d64e:	2b0f      	cmp	r3, #15
 800d650:	d9e4      	bls.n	800d61c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	881b      	ldrh	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d1d8      	bne.n	800d60c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800d65e:	2307      	movs	r3, #7
 800d660:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	b2db      	uxtb	r3, r3
 800d666:	f003 030f 	and.w	r3, r3, #15
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	3330      	adds	r3, #48	; 0x30
 800d66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800d672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d676:	2b39      	cmp	r3, #57	; 0x39
 800d678:	d904      	bls.n	800d684 <gen_numname+0x9c>
 800d67a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d67e:	3307      	adds	r3, #7
 800d680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	1e5a      	subs	r2, r3, #1
 800d688:	62ba      	str	r2, [r7, #40]	; 0x28
 800d68a:	3330      	adds	r3, #48	; 0x30
 800d68c:	443b      	add	r3, r7
 800d68e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d692:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	091b      	lsrs	r3, r3, #4
 800d69a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1df      	bne.n	800d662 <gen_numname+0x7a>
	ns[i] = '~';
 800d6a2:	f107 0214 	add.w	r2, r7, #20
 800d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a8:	4413      	add	r3, r2
 800d6aa:	227e      	movs	r2, #126	; 0x7e
 800d6ac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	627b      	str	r3, [r7, #36]	; 0x24
 800d6b2:	e002      	b.n	800d6ba <gen_numname+0xd2>
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d6ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	d205      	bcs.n	800d6ce <gen_numname+0xe6>
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c6:	4413      	add	r3, r2
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b20      	cmp	r3, #32
 800d6cc:	d1f2      	bne.n	800d6b4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800d6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d0:	2b07      	cmp	r3, #7
 800d6d2:	d807      	bhi.n	800d6e4 <gen_numname+0xfc>
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	1c5a      	adds	r2, r3, #1
 800d6d8:	62ba      	str	r2, [r7, #40]	; 0x28
 800d6da:	3330      	adds	r3, #48	; 0x30
 800d6dc:	443b      	add	r3, r7
 800d6de:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800d6e2:	e000      	b.n	800d6e6 <gen_numname+0xfe>
 800d6e4:	2120      	movs	r1, #32
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e8:	1c5a      	adds	r2, r3, #1
 800d6ea:	627a      	str	r2, [r7, #36]	; 0x24
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	460a      	mov	r2, r1
 800d6f2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	2b07      	cmp	r3, #7
 800d6f8:	d9e9      	bls.n	800d6ce <gen_numname+0xe6>
}
 800d6fa:	bf00      	nop
 800d6fc:	bf00      	nop
 800d6fe:	3730      	adds	r7, #48	; 0x30
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800d70c:	2300      	movs	r3, #0
 800d70e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800d710:	230b      	movs	r3, #11
 800d712:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800d714:	7bfb      	ldrb	r3, [r7, #15]
 800d716:	b2da      	uxtb	r2, r3
 800d718:	0852      	lsrs	r2, r2, #1
 800d71a:	01db      	lsls	r3, r3, #7
 800d71c:	4313      	orrs	r3, r2
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	1c59      	adds	r1, r3, #1
 800d724:	6079      	str	r1, [r7, #4]
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	4413      	add	r3, r2
 800d72a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	3b01      	subs	r3, #1
 800d730:	60bb      	str	r3, [r7, #8]
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1ed      	bne.n	800d714 <sum_sfn+0x10>
	return sum;
 800d738:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b086      	sub	sp, #24
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d754:	2100      	movs	r1, #0
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff fc88 	bl	800d06c <dir_sdi>
 800d75c:	4603      	mov	r3, r0
 800d75e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d001      	beq.n	800d76a <dir_find+0x24>
 800d766:	7dfb      	ldrb	r3, [r7, #23]
 800d768:	e0a9      	b.n	800d8be <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d76a:	23ff      	movs	r3, #255	; 0xff
 800d76c:	753b      	strb	r3, [r7, #20]
 800d76e:	7d3b      	ldrb	r3, [r7, #20]
 800d770:	757b      	strb	r3, [r7, #21]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f04f 32ff 	mov.w	r2, #4294967295
 800d778:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	69db      	ldr	r3, [r3, #28]
 800d77e:	4619      	mov	r1, r3
 800d780:	6938      	ldr	r0, [r7, #16]
 800d782:	f7ff f893 	bl	800c8ac <move_window>
 800d786:	4603      	mov	r3, r0
 800d788:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d78a:	7dfb      	ldrb	r3, [r7, #23]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f040 8090 	bne.w	800d8b2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d79a:	7dbb      	ldrb	r3, [r7, #22]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d102      	bne.n	800d7a6 <dir_find+0x60>
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	75fb      	strb	r3, [r7, #23]
 800d7a4:	e08a      	b.n	800d8bc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6a1b      	ldr	r3, [r3, #32]
 800d7aa:	330b      	adds	r3, #11
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7b2:	73fb      	strb	r3, [r7, #15]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	7bfa      	ldrb	r2, [r7, #15]
 800d7b8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d7ba:	7dbb      	ldrb	r3, [r7, #22]
 800d7bc:	2be5      	cmp	r3, #229	; 0xe5
 800d7be:	d007      	beq.n	800d7d0 <dir_find+0x8a>
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	f003 0308 	and.w	r3, r3, #8
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d009      	beq.n	800d7de <dir_find+0x98>
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	2b0f      	cmp	r3, #15
 800d7ce:	d006      	beq.n	800d7de <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d7d0:	23ff      	movs	r3, #255	; 0xff
 800d7d2:	757b      	strb	r3, [r7, #21]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7da:	631a      	str	r2, [r3, #48]	; 0x30
 800d7dc:	e05e      	b.n	800d89c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d7de:	7bfb      	ldrb	r3, [r7, #15]
 800d7e0:	2b0f      	cmp	r3, #15
 800d7e2:	d136      	bne.n	800d852 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d154      	bne.n	800d89c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d7f2:	7dbb      	ldrb	r3, [r7, #22]
 800d7f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00d      	beq.n	800d818 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6a1b      	ldr	r3, [r3, #32]
 800d800:	7b5b      	ldrb	r3, [r3, #13]
 800d802:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d804:	7dbb      	ldrb	r3, [r7, #22]
 800d806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d80a:	75bb      	strb	r3, [r7, #22]
 800d80c:	7dbb      	ldrb	r3, [r7, #22]
 800d80e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	695a      	ldr	r2, [r3, #20]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d818:	7dba      	ldrb	r2, [r7, #22]
 800d81a:	7d7b      	ldrb	r3, [r7, #21]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d115      	bne.n	800d84c <dir_find+0x106>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a1b      	ldr	r3, [r3, #32]
 800d824:	330d      	adds	r3, #13
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	7d3a      	ldrb	r2, [r7, #20]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d10e      	bne.n	800d84c <dir_find+0x106>
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	691a      	ldr	r2, [r3, #16]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	4619      	mov	r1, r3
 800d838:	4610      	mov	r0, r2
 800d83a:	f7ff fdfd 	bl	800d438 <cmp_lfn>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d003      	beq.n	800d84c <dir_find+0x106>
 800d844:	7d7b      	ldrb	r3, [r7, #21]
 800d846:	3b01      	subs	r3, #1
 800d848:	b2db      	uxtb	r3, r3
 800d84a:	e000      	b.n	800d84e <dir_find+0x108>
 800d84c:	23ff      	movs	r3, #255	; 0xff
 800d84e:	757b      	strb	r3, [r7, #21]
 800d850:	e024      	b.n	800d89c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d852:	7d7b      	ldrb	r3, [r7, #21]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d109      	bne.n	800d86c <dir_find+0x126>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6a1b      	ldr	r3, [r3, #32]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff ff51 	bl	800d704 <sum_sfn>
 800d862:	4603      	mov	r3, r0
 800d864:	461a      	mov	r2, r3
 800d866:	7d3b      	ldrb	r3, [r7, #20]
 800d868:	4293      	cmp	r3, r2
 800d86a:	d024      	beq.n	800d8b6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10a      	bne.n	800d890 <dir_find+0x14a>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	6a18      	ldr	r0, [r3, #32]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	3324      	adds	r3, #36	; 0x24
 800d882:	220b      	movs	r2, #11
 800d884:	4619      	mov	r1, r3
 800d886:	f7fe fded 	bl	800c464 <mem_cmp>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d014      	beq.n	800d8ba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d890:	23ff      	movs	r3, #255	; 0xff
 800d892:	757b      	strb	r3, [r7, #21]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f04f 32ff 	mov.w	r2, #4294967295
 800d89a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d89c:	2100      	movs	r1, #0
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff fc6d 	bl	800d17e <dir_next>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f43f af65 	beq.w	800d77a <dir_find+0x34>
 800d8b0:	e004      	b.n	800d8bc <dir_find+0x176>
		if (res != FR_OK) break;
 800d8b2:	bf00      	nop
 800d8b4:	e002      	b.n	800d8bc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d8b6:	bf00      	nop
 800d8b8:	e000      	b.n	800d8bc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d8ba:	bf00      	nop

	return res;
 800d8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
	...

0800d8c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b08c      	sub	sp, #48	; 0x30
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d8dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d001      	beq.n	800d8e8 <dir_register+0x20>
 800d8e4:	2306      	movs	r3, #6
 800d8e6:	e0e0      	b.n	800daaa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	627b      	str	r3, [r7, #36]	; 0x24
 800d8ec:	e002      	b.n	800d8f4 <dir_register+0x2c>
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	627b      	str	r3, [r7, #36]	; 0x24
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	691a      	ldr	r2, [r3, #16]
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	4413      	add	r3, r2
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d1f4      	bne.n	800d8ee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d90a:	f107 030c 	add.w	r3, r7, #12
 800d90e:	220c      	movs	r2, #12
 800d910:	4618      	mov	r0, r3
 800d912:	f7fe fd6b 	bl	800c3ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	f003 0301 	and.w	r3, r3, #1
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d032      	beq.n	800d986 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2240      	movs	r2, #64	; 0x40
 800d924:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d928:	2301      	movs	r3, #1
 800d92a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d92c:	e016      	b.n	800d95c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	691a      	ldr	r2, [r3, #16]
 800d938:	f107 010c 	add.w	r1, r7, #12
 800d93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d93e:	f7ff fe53 	bl	800d5e8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7ff feff 	bl	800d746 <dir_find>
 800d948:	4603      	mov	r3, r0
 800d94a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d94e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d952:	2b00      	cmp	r3, #0
 800d954:	d106      	bne.n	800d964 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d958:	3301      	adds	r3, #1
 800d95a:	62bb      	str	r3, [r7, #40]	; 0x28
 800d95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95e:	2b63      	cmp	r3, #99	; 0x63
 800d960:	d9e5      	bls.n	800d92e <dir_register+0x66>
 800d962:	e000      	b.n	800d966 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d964:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	2b64      	cmp	r3, #100	; 0x64
 800d96a:	d101      	bne.n	800d970 <dir_register+0xa8>
 800d96c:	2307      	movs	r3, #7
 800d96e:	e09c      	b.n	800daaa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d974:	2b04      	cmp	r3, #4
 800d976:	d002      	beq.n	800d97e <dir_register+0xb6>
 800d978:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d97c:	e095      	b.n	800daaa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d97e:	7dfa      	ldrb	r2, [r7, #23]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d986:	7dfb      	ldrb	r3, [r7, #23]
 800d988:	f003 0302 	and.w	r3, r3, #2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d007      	beq.n	800d9a0 <dir_register+0xd8>
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	330c      	adds	r3, #12
 800d994:	4a47      	ldr	r2, [pc, #284]	; (800dab4 <dir_register+0x1ec>)
 800d996:	fba2 2303 	umull	r2, r3, r2, r3
 800d99a:	089b      	lsrs	r3, r3, #2
 800d99c:	3301      	adds	r3, #1
 800d99e:	e000      	b.n	800d9a2 <dir_register+0xda>
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d9a4:	6a39      	ldr	r1, [r7, #32]
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7ff fcbf 	bl	800d32a <dir_alloc>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d9b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d148      	bne.n	800da4c <dir_register+0x184>
 800d9ba:	6a3b      	ldr	r3, [r7, #32]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	623b      	str	r3, [r7, #32]
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d042      	beq.n	800da4c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	695a      	ldr	r2, [r3, #20]
 800d9ca:	6a3b      	ldr	r3, [r7, #32]
 800d9cc:	015b      	lsls	r3, r3, #5
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fb4a 	bl	800d06c <dir_sdi>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d9de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d132      	bne.n	800da4c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3324      	adds	r3, #36	; 0x24
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff fe8a 	bl	800d704 <sum_sfn>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	69f8      	ldr	r0, [r7, #28]
 800d9fc:	f7fe ff56 	bl	800c8ac <move_window>
 800da00:	4603      	mov	r3, r0
 800da02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800da06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d11d      	bne.n	800da4a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800da0e:	69fb      	ldr	r3, [r7, #28]
 800da10:	6918      	ldr	r0, [r3, #16]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a19      	ldr	r1, [r3, #32]
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	7efb      	ldrb	r3, [r7, #27]
 800da1c:	f7ff fd7c 	bl	800d518 <put_lfn>
				fs->wflag = 1;
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	2201      	movs	r2, #1
 800da24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800da26:	2100      	movs	r1, #0
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff fba8 	bl	800d17e <dir_next>
 800da2e:	4603      	mov	r3, r0
 800da30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800da34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d107      	bne.n	800da4c <dir_register+0x184>
 800da3c:	6a3b      	ldr	r3, [r7, #32]
 800da3e:	3b01      	subs	r3, #1
 800da40:	623b      	str	r3, [r7, #32]
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d1d5      	bne.n	800d9f4 <dir_register+0x12c>
 800da48:	e000      	b.n	800da4c <dir_register+0x184>
				if (res != FR_OK) break;
 800da4a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800da4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da50:	2b00      	cmp	r3, #0
 800da52:	d128      	bne.n	800daa6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	4619      	mov	r1, r3
 800da5a:	69f8      	ldr	r0, [r7, #28]
 800da5c:	f7fe ff26 	bl	800c8ac <move_window>
 800da60:	4603      	mov	r3, r0
 800da62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800da66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d11b      	bne.n	800daa6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6a1b      	ldr	r3, [r3, #32]
 800da72:	2220      	movs	r2, #32
 800da74:	2100      	movs	r1, #0
 800da76:	4618      	mov	r0, r3
 800da78:	f7fe fcd9 	bl	800c42e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a18      	ldr	r0, [r3, #32]
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3324      	adds	r3, #36	; 0x24
 800da84:	220b      	movs	r2, #11
 800da86:	4619      	mov	r1, r3
 800da88:	f7fe fcb0 	bl	800c3ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6a1b      	ldr	r3, [r3, #32]
 800da96:	330c      	adds	r3, #12
 800da98:	f002 0218 	and.w	r2, r2, #24
 800da9c:	b2d2      	uxtb	r2, r2
 800da9e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	2201      	movs	r2, #1
 800daa4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800daa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3730      	adds	r7, #48	; 0x30
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
 800dab2:	bf00      	nop
 800dab4:	4ec4ec4f 	.word	0x4ec4ec4f

0800dab8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b08a      	sub	sp, #40	; 0x28
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	613b      	str	r3, [r7, #16]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	691b      	ldr	r3, [r3, #16]
 800dace:	60fb      	str	r3, [r7, #12]
 800dad0:	2300      	movs	r3, #0
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	61ba      	str	r2, [r7, #24]
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	4413      	add	r3, r2
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800dae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dae8:	2b1f      	cmp	r3, #31
 800daea:	d940      	bls.n	800db6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800daec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daee:	2b2f      	cmp	r3, #47	; 0x2f
 800daf0:	d006      	beq.n	800db00 <create_name+0x48>
 800daf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800daf4:	2b5c      	cmp	r3, #92	; 0x5c
 800daf6:	d110      	bne.n	800db1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800daf8:	e002      	b.n	800db00 <create_name+0x48>
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	3301      	adds	r3, #1
 800dafe:	61bb      	str	r3, [r7, #24]
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	4413      	add	r3, r2
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	2b2f      	cmp	r3, #47	; 0x2f
 800db0a:	d0f6      	beq.n	800dafa <create_name+0x42>
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	4413      	add	r3, r2
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b5c      	cmp	r3, #92	; 0x5c
 800db16:	d0f0      	beq.n	800dafa <create_name+0x42>
			break;
 800db18:	e02a      	b.n	800db70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2bfe      	cmp	r3, #254	; 0xfe
 800db1e:	d901      	bls.n	800db24 <create_name+0x6c>
 800db20:	2306      	movs	r3, #6
 800db22:	e17d      	b.n	800de20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800db24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db26:	b2db      	uxtb	r3, r3
 800db28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800db2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db2c:	2101      	movs	r1, #1
 800db2e:	4618      	mov	r0, r3
 800db30:	f002 f908 	bl	800fd44 <ff_convert>
 800db34:	4603      	mov	r3, r0
 800db36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800db38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d101      	bne.n	800db42 <create_name+0x8a>
 800db3e:	2306      	movs	r3, #6
 800db40:	e16e      	b.n	800de20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800db42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db44:	2b7f      	cmp	r3, #127	; 0x7f
 800db46:	d809      	bhi.n	800db5c <create_name+0xa4>
 800db48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db4a:	4619      	mov	r1, r3
 800db4c:	488d      	ldr	r0, [pc, #564]	; (800dd84 <create_name+0x2cc>)
 800db4e:	f7fe fcb0 	bl	800c4b2 <chk_chr>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <create_name+0xa4>
 800db58:	2306      	movs	r3, #6
 800db5a:	e161      	b.n	800de20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	1c5a      	adds	r2, r3, #1
 800db60:	617a      	str	r2, [r7, #20]
 800db62:	005b      	lsls	r3, r3, #1
 800db64:	68fa      	ldr	r2, [r7, #12]
 800db66:	4413      	add	r3, r2
 800db68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800db6c:	e7b4      	b.n	800dad8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800db6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800db70:	693a      	ldr	r2, [r7, #16]
 800db72:	69bb      	ldr	r3, [r7, #24]
 800db74:	441a      	add	r2, r3
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800db7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800db7c:	2b1f      	cmp	r3, #31
 800db7e:	d801      	bhi.n	800db84 <create_name+0xcc>
 800db80:	2304      	movs	r3, #4
 800db82:	e000      	b.n	800db86 <create_name+0xce>
 800db84:	2300      	movs	r3, #0
 800db86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800db8a:	e011      	b.n	800dbb0 <create_name+0xf8>
		w = lfn[di - 1];
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800db92:	3b01      	subs	r3, #1
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	68fa      	ldr	r2, [r7, #12]
 800db98:	4413      	add	r3, r2
 800db9a:	881b      	ldrh	r3, [r3, #0]
 800db9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800db9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba0:	2b20      	cmp	r3, #32
 800dba2:	d002      	beq.n	800dbaa <create_name+0xf2>
 800dba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dba6:	2b2e      	cmp	r3, #46	; 0x2e
 800dba8:	d106      	bne.n	800dbb8 <create_name+0x100>
		di--;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1ea      	bne.n	800db8c <create_name+0xd4>
 800dbb6:	e000      	b.n	800dbba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800dbb8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d101      	bne.n	800dbd0 <create_name+0x118>
 800dbcc:	2306      	movs	r3, #6
 800dbce:	e127      	b.n	800de20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	3324      	adds	r3, #36	; 0x24
 800dbd4:	220b      	movs	r2, #11
 800dbd6:	2120      	movs	r1, #32
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe fc28 	bl	800c42e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800dbde:	2300      	movs	r3, #0
 800dbe0:	61bb      	str	r3, [r7, #24]
 800dbe2:	e002      	b.n	800dbea <create_name+0x132>
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	69bb      	ldr	r3, [r7, #24]
 800dbec:	005b      	lsls	r3, r3, #1
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	881b      	ldrh	r3, [r3, #0]
 800dbf4:	2b20      	cmp	r3, #32
 800dbf6:	d0f5      	beq.n	800dbe4 <create_name+0x12c>
 800dbf8:	69bb      	ldr	r3, [r7, #24]
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	4413      	add	r3, r2
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	2b2e      	cmp	r3, #46	; 0x2e
 800dc04:	d0ee      	beq.n	800dbe4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d009      	beq.n	800dc20 <create_name+0x168>
 800dc0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc10:	f043 0303 	orr.w	r3, r3, #3
 800dc14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800dc18:	e002      	b.n	800dc20 <create_name+0x168>
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d009      	beq.n	800dc3a <create_name+0x182>
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	005b      	lsls	r3, r3, #1
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	4413      	add	r3, r2
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	2b2e      	cmp	r3, #46	; 0x2e
 800dc38:	d1ef      	bne.n	800dc1a <create_name+0x162>

	i = b = 0; ni = 8;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dc40:	2300      	movs	r3, #0
 800dc42:	623b      	str	r3, [r7, #32]
 800dc44:	2308      	movs	r3, #8
 800dc46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800dc48:	69bb      	ldr	r3, [r7, #24]
 800dc4a:	1c5a      	adds	r2, r3, #1
 800dc4c:	61ba      	str	r2, [r7, #24]
 800dc4e:	005b      	lsls	r3, r3, #1
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	4413      	add	r3, r2
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800dc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 8090 	beq.w	800dd80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800dc60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc62:	2b20      	cmp	r3, #32
 800dc64:	d006      	beq.n	800dc74 <create_name+0x1bc>
 800dc66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc68:	2b2e      	cmp	r3, #46	; 0x2e
 800dc6a:	d10a      	bne.n	800dc82 <create_name+0x1ca>
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d006      	beq.n	800dc82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800dc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc78:	f043 0303 	orr.w	r3, r3, #3
 800dc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc80:	e07d      	b.n	800dd7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800dc82:	6a3a      	ldr	r2, [r7, #32]
 800dc84:	69fb      	ldr	r3, [r7, #28]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d203      	bcs.n	800dc92 <create_name+0x1da>
 800dc8a:	69ba      	ldr	r2, [r7, #24]
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d123      	bne.n	800dcda <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	2b0b      	cmp	r3, #11
 800dc96:	d106      	bne.n	800dca6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800dc98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc9c:	f043 0303 	orr.w	r3, r3, #3
 800dca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dca4:	e075      	b.n	800dd92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800dca6:	69ba      	ldr	r2, [r7, #24]
 800dca8:	697b      	ldr	r3, [r7, #20]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d005      	beq.n	800dcba <create_name+0x202>
 800dcae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb2:	f043 0303 	orr.w	r3, r3, #3
 800dcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800dcba:	69ba      	ldr	r2, [r7, #24]
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d866      	bhi.n	800dd90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	61bb      	str	r3, [r7, #24]
 800dcc6:	2308      	movs	r3, #8
 800dcc8:	623b      	str	r3, [r7, #32]
 800dcca:	230b      	movs	r3, #11
 800dccc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800dcce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dcd8:	e051      	b.n	800dd7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800dcda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcdc:	2b7f      	cmp	r3, #127	; 0x7f
 800dcde:	d914      	bls.n	800dd0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800dce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dce2:	2100      	movs	r1, #0
 800dce4:	4618      	mov	r0, r3
 800dce6:	f002 f82d 	bl	800fd44 <ff_convert>
 800dcea:	4603      	mov	r3, r0
 800dcec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800dcee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d004      	beq.n	800dcfe <create_name+0x246>
 800dcf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcf6:	3b80      	subs	r3, #128	; 0x80
 800dcf8:	4a23      	ldr	r2, [pc, #140]	; (800dd88 <create_name+0x2d0>)
 800dcfa:	5cd3      	ldrb	r3, [r2, r3]
 800dcfc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800dcfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd02:	f043 0302 	orr.w	r3, r3, #2
 800dd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800dd0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d007      	beq.n	800dd20 <create_name+0x268>
 800dd10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd12:	4619      	mov	r1, r3
 800dd14:	481d      	ldr	r0, [pc, #116]	; (800dd8c <create_name+0x2d4>)
 800dd16:	f7fe fbcc 	bl	800c4b2 <chk_chr>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d008      	beq.n	800dd32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800dd20:	235f      	movs	r3, #95	; 0x5f
 800dd22:	84bb      	strh	r3, [r7, #36]	; 0x24
 800dd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd28:	f043 0303 	orr.w	r3, r3, #3
 800dd2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd30:	e01b      	b.n	800dd6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800dd32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd34:	2b40      	cmp	r3, #64	; 0x40
 800dd36:	d909      	bls.n	800dd4c <create_name+0x294>
 800dd38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd3a:	2b5a      	cmp	r3, #90	; 0x5a
 800dd3c:	d806      	bhi.n	800dd4c <create_name+0x294>
					b |= 2;
 800dd3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd42:	f043 0302 	orr.w	r3, r3, #2
 800dd46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd4a:	e00e      	b.n	800dd6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800dd4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd4e:	2b60      	cmp	r3, #96	; 0x60
 800dd50:	d90b      	bls.n	800dd6a <create_name+0x2b2>
 800dd52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd54:	2b7a      	cmp	r3, #122	; 0x7a
 800dd56:	d808      	bhi.n	800dd6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800dd58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dd5c:	f043 0301 	orr.w	r3, r3, #1
 800dd60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dd64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dd66:	3b20      	subs	r3, #32
 800dd68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	1c5a      	adds	r2, r3, #1
 800dd6e:	623a      	str	r2, [r7, #32]
 800dd70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dd72:	b2d1      	uxtb	r1, r2
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	4413      	add	r3, r2
 800dd78:	460a      	mov	r2, r1
 800dd7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800dd7e:	e763      	b.n	800dc48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800dd80:	bf00      	nop
 800dd82:	e006      	b.n	800dd92 <create_name+0x2da>
 800dd84:	08017fe8 	.word	0x08017fe8
 800dd88:	08018064 	.word	0x08018064
 800dd8c:	08017ff4 	.word	0x08017ff4
			if (si > di) break;			/* No extension */
 800dd90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd98:	2be5      	cmp	r3, #229	; 0xe5
 800dd9a:	d103      	bne.n	800dda4 <create_name+0x2ec>
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2205      	movs	r2, #5
 800dda0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	2b08      	cmp	r3, #8
 800dda8:	d104      	bne.n	800ddb4 <create_name+0x2fc>
 800ddaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ddb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddb8:	f003 030c 	and.w	r3, r3, #12
 800ddbc:	2b0c      	cmp	r3, #12
 800ddbe:	d005      	beq.n	800ddcc <create_name+0x314>
 800ddc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ddc4:	f003 0303 	and.w	r3, r3, #3
 800ddc8:	2b03      	cmp	r3, #3
 800ddca:	d105      	bne.n	800ddd8 <create_name+0x320>
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd0:	f043 0302 	orr.w	r3, r3, #2
 800ddd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ddd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dddc:	f003 0302 	and.w	r3, r3, #2
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d117      	bne.n	800de14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800dde4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dde8:	f003 0303 	and.w	r3, r3, #3
 800ddec:	2b01      	cmp	r3, #1
 800ddee:	d105      	bne.n	800ddfc <create_name+0x344>
 800ddf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf4:	f043 0310 	orr.w	r3, r3, #16
 800ddf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ddfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de00:	f003 030c 	and.w	r3, r3, #12
 800de04:	2b04      	cmp	r3, #4
 800de06:	d105      	bne.n	800de14 <create_name+0x35c>
 800de08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de0c:	f043 0308 	orr.w	r3, r3, #8
 800de10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800de1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800de1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800de20:	4618      	mov	r0, r3
 800de22:	3728      	adds	r7, #40	; 0x28
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de3c:	e002      	b.n	800de44 <follow_path+0x1c>
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	3301      	adds	r3, #1
 800de42:	603b      	str	r3, [r7, #0]
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b2f      	cmp	r3, #47	; 0x2f
 800de4a:	d0f8      	beq.n	800de3e <follow_path+0x16>
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	2b5c      	cmp	r3, #92	; 0x5c
 800de52:	d0f4      	beq.n	800de3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	2200      	movs	r2, #0
 800de58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	2b1f      	cmp	r3, #31
 800de60:	d80a      	bhi.n	800de78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2280      	movs	r2, #128	; 0x80
 800de66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800de6a:	2100      	movs	r1, #0
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff f8fd 	bl	800d06c <dir_sdi>
 800de72:	4603      	mov	r3, r0
 800de74:	75fb      	strb	r3, [r7, #23]
 800de76:	e048      	b.n	800df0a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de78:	463b      	mov	r3, r7
 800de7a:	4619      	mov	r1, r3
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f7ff fe1b 	bl	800dab8 <create_name>
 800de82:	4603      	mov	r3, r0
 800de84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de86:	7dfb      	ldrb	r3, [r7, #23]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d139      	bne.n	800df00 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f7ff fc5a 	bl	800d746 <dir_find>
 800de92:	4603      	mov	r3, r0
 800de94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00a      	beq.n	800deba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dea4:	7dfb      	ldrb	r3, [r7, #23]
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d12c      	bne.n	800df04 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800deaa:	7afb      	ldrb	r3, [r7, #11]
 800deac:	f003 0304 	and.w	r3, r3, #4
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d127      	bne.n	800df04 <follow_path+0xdc>
 800deb4:	2305      	movs	r3, #5
 800deb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800deb8:	e024      	b.n	800df04 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800deba:	7afb      	ldrb	r3, [r7, #11]
 800debc:	f003 0304 	and.w	r3, r3, #4
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d121      	bne.n	800df08 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	799b      	ldrb	r3, [r3, #6]
 800dec8:	f003 0310 	and.w	r3, r3, #16
 800decc:	2b00      	cmp	r3, #0
 800dece:	d102      	bne.n	800ded6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ded0:	2305      	movs	r3, #5
 800ded2:	75fb      	strb	r3, [r7, #23]
 800ded4:	e019      	b.n	800df0a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	695b      	ldr	r3, [r3, #20]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	8992      	ldrh	r2, [r2, #12]
 800dee4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dee8:	fb00 f202 	mul.w	r2, r0, r2
 800deec:	1a9b      	subs	r3, r3, r2
 800deee:	440b      	add	r3, r1
 800def0:	4619      	mov	r1, r3
 800def2:	68f8      	ldr	r0, [r7, #12]
 800def4:	f7ff fa60 	bl	800d3b8 <ld_clust>
 800def8:	4602      	mov	r2, r0
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800defe:	e7bb      	b.n	800de78 <follow_path+0x50>
			if (res != FR_OK) break;
 800df00:	bf00      	nop
 800df02:	e002      	b.n	800df0a <follow_path+0xe2>
				break;
 800df04:	bf00      	nop
 800df06:	e000      	b.n	800df0a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800df08:	bf00      	nop
			}
		}
	}

	return res;
 800df0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800df14:	b480      	push	{r7}
 800df16:	b087      	sub	sp, #28
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800df1c:	f04f 33ff 	mov.w	r3, #4294967295
 800df20:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d031      	beq.n	800df8e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	e002      	b.n	800df38 <get_ldnumber+0x24>
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	3301      	adds	r3, #1
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	2b1f      	cmp	r3, #31
 800df3e:	d903      	bls.n	800df48 <get_ldnumber+0x34>
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b3a      	cmp	r3, #58	; 0x3a
 800df46:	d1f4      	bne.n	800df32 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	2b3a      	cmp	r3, #58	; 0x3a
 800df4e:	d11c      	bne.n	800df8a <get_ldnumber+0x76>
			tp = *path;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	60fa      	str	r2, [r7, #12]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	3b30      	subs	r3, #48	; 0x30
 800df60:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2b09      	cmp	r3, #9
 800df66:	d80e      	bhi.n	800df86 <get_ldnumber+0x72>
 800df68:	68fa      	ldr	r2, [r7, #12]
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d10a      	bne.n	800df86 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d107      	bne.n	800df86 <get_ldnumber+0x72>
					vol = (int)i;
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	3301      	adds	r3, #1
 800df7e:	617b      	str	r3, [r7, #20]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	e002      	b.n	800df90 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df8a:	2300      	movs	r3, #0
 800df8c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df8e:	693b      	ldr	r3, [r7, #16]
}
 800df90:	4618      	mov	r0, r3
 800df92:	371c      	adds	r7, #28
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	70da      	strb	r2, [r3, #3]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f04f 32ff 	mov.w	r2, #4294967295
 800dfb2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7fe fc78 	bl	800c8ac <move_window>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <check_fs+0x2a>
 800dfc2:	2304      	movs	r3, #4
 800dfc4:	e038      	b.n	800e038 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	333c      	adds	r3, #60	; 0x3c
 800dfca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fe f98a 	bl	800c2e8 <ld_word>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d001      	beq.n	800dfe4 <check_fs+0x48>
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	e029      	b.n	800e038 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfea:	2be9      	cmp	r3, #233	; 0xe9
 800dfec:	d009      	beq.n	800e002 <check_fs+0x66>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dff4:	2beb      	cmp	r3, #235	; 0xeb
 800dff6:	d11e      	bne.n	800e036 <check_fs+0x9a>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dffe:	2b90      	cmp	r3, #144	; 0x90
 800e000:	d119      	bne.n	800e036 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	333c      	adds	r3, #60	; 0x3c
 800e006:	3336      	adds	r3, #54	; 0x36
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe f985 	bl	800c318 <ld_dword>
 800e00e:	4603      	mov	r3, r0
 800e010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e014:	4a0a      	ldr	r2, [pc, #40]	; (800e040 <check_fs+0xa4>)
 800e016:	4293      	cmp	r3, r2
 800e018:	d101      	bne.n	800e01e <check_fs+0x82>
 800e01a:	2300      	movs	r3, #0
 800e01c:	e00c      	b.n	800e038 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	333c      	adds	r3, #60	; 0x3c
 800e022:	3352      	adds	r3, #82	; 0x52
 800e024:	4618      	mov	r0, r3
 800e026:	f7fe f977 	bl	800c318 <ld_dword>
 800e02a:	4603      	mov	r3, r0
 800e02c:	4a05      	ldr	r2, [pc, #20]	; (800e044 <check_fs+0xa8>)
 800e02e:	4293      	cmp	r3, r2
 800e030:	d101      	bne.n	800e036 <check_fs+0x9a>
 800e032:	2300      	movs	r3, #0
 800e034:	e000      	b.n	800e038 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e036:	2302      	movs	r3, #2
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3708      	adds	r7, #8
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}
 800e040:	00544146 	.word	0x00544146
 800e044:	33544146 	.word	0x33544146

0800e048 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b096      	sub	sp, #88	; 0x58
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	4613      	mov	r3, r2
 800e054:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	2200      	movs	r2, #0
 800e05a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff ff59 	bl	800df14 <get_ldnumber>
 800e062:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e066:	2b00      	cmp	r3, #0
 800e068:	da01      	bge.n	800e06e <find_volume+0x26>
 800e06a:	230b      	movs	r3, #11
 800e06c:	e26d      	b.n	800e54a <find_volume+0x502>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e06e:	4aa3      	ldr	r2, [pc, #652]	; (800e2fc <find_volume+0x2b4>)
 800e070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e076:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <find_volume+0x3a>
 800e07e:	230c      	movs	r3, #12
 800e080:	e263      	b.n	800e54a <find_volume+0x502>

	ENTER_FF(fs);						/* Lock the volume */
 800e082:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e084:	f7fe fa30 	bl	800c4e8 <lock_fs>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <find_volume+0x4a>
 800e08e:	230f      	movs	r3, #15
 800e090:	e25b      	b.n	800e54a <find_volume+0x502>
	*rfs = fs;							/* Return pointer to the file system object */
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e096:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	f023 0301 	bic.w	r3, r3, #1
 800e09e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d01a      	beq.n	800e0de <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	785b      	ldrb	r3, [r3, #1]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7fe f87b 	bl	800c1a8 <disk_status>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e0b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0bc:	f003 0301 	and.w	r3, r3, #1
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10c      	bne.n	800e0de <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e0c4:	79fb      	ldrb	r3, [r7, #7]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d007      	beq.n	800e0da <find_volume+0x92>
 800e0ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0ce:	f003 0304 	and.w	r3, r3, #4
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e0d6:	230a      	movs	r3, #10
 800e0d8:	e237      	b.n	800e54a <find_volume+0x502>
			}
			return FR_OK;				/* The file system object is valid */
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e235      	b.n	800e54a <find_volume+0x502>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e0e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ee:	785b      	ldrb	r3, [r3, #1]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fe f873 	bl	800c1dc <disk_initialize>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e0fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e100:	f003 0301 	and.w	r3, r3, #1
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e108:	2303      	movs	r3, #3
 800e10a:	e21e      	b.n	800e54a <find_volume+0x502>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e10c:	79fb      	ldrb	r3, [r7, #7]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d007      	beq.n	800e122 <find_volume+0xda>
 800e112:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e116:	f003 0304 	and.w	r3, r3, #4
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e11e:	230a      	movs	r3, #10
 800e120:	e213      	b.n	800e54a <find_volume+0x502>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	7858      	ldrb	r0, [r3, #1]
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	330c      	adds	r3, #12
 800e12a:	461a      	mov	r2, r3
 800e12c:	2102      	movs	r1, #2
 800e12e:	f7fe f8bd 	bl	800c2ac <disk_ioctl>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <find_volume+0xf4>
 800e138:	2301      	movs	r3, #1
 800e13a:	e206      	b.n	800e54a <find_volume+0x502>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	899b      	ldrh	r3, [r3, #12]
 800e140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e144:	d80d      	bhi.n	800e162 <find_volume+0x11a>
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	899b      	ldrh	r3, [r3, #12]
 800e14a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e14e:	d308      	bcc.n	800e162 <find_volume+0x11a>
 800e150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e152:	899b      	ldrh	r3, [r3, #12]
 800e154:	461a      	mov	r2, r3
 800e156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e158:	899b      	ldrh	r3, [r3, #12]
 800e15a:	3b01      	subs	r3, #1
 800e15c:	4013      	ands	r3, r2
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d001      	beq.n	800e166 <find_volume+0x11e>
 800e162:	2301      	movs	r3, #1
 800e164:	e1f1      	b.n	800e54a <find_volume+0x502>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e16a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e16c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e16e:	f7ff ff15 	bl	800df9c <check_fs>
 800e172:	4603      	mov	r3, r0
 800e174:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	d149      	bne.n	800e214 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e180:	2300      	movs	r3, #0
 800e182:	643b      	str	r3, [r7, #64]	; 0x40
 800e184:	e01e      	b.n	800e1c4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e18c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e18e:	011b      	lsls	r3, r3, #4
 800e190:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e194:	4413      	add	r3, r2
 800e196:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	3304      	adds	r3, #4
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d006      	beq.n	800e1b0 <find_volume+0x168>
 800e1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a4:	3308      	adds	r3, #8
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fe f8b6 	bl	800c318 <ld_dword>
 800e1ac:	4602      	mov	r2, r0
 800e1ae:	e000      	b.n	800e1b2 <find_volume+0x16a>
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	3358      	adds	r3, #88	; 0x58
 800e1b8:	443b      	add	r3, r7
 800e1ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e1c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1c6:	2b03      	cmp	r3, #3
 800e1c8:	d9dd      	bls.n	800e186 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e1ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d002      	beq.n	800e1da <find_volume+0x192>
 800e1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	3358      	adds	r3, #88	; 0x58
 800e1e0:	443b      	add	r3, r7
 800e1e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e1e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d005      	beq.n	800e1fa <find_volume+0x1b2>
 800e1ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1f2:	f7ff fed3 	bl	800df9c <check_fs>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	e000      	b.n	800e1fc <find_volume+0x1b4>
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e200:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e204:	2b01      	cmp	r3, #1
 800e206:	d905      	bls.n	800e214 <find_volume+0x1cc>
 800e208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e20a:	3301      	adds	r3, #1
 800e20c:	643b      	str	r3, [r7, #64]	; 0x40
 800e20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e210:	2b03      	cmp	r3, #3
 800e212:	d9e2      	bls.n	800e1da <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e218:	2b04      	cmp	r3, #4
 800e21a:	d101      	bne.n	800e220 <find_volume+0x1d8>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e194      	b.n	800e54a <find_volume+0x502>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e224:	2b01      	cmp	r3, #1
 800e226:	d901      	bls.n	800e22c <find_volume+0x1e4>
 800e228:	230d      	movs	r3, #13
 800e22a:	e18e      	b.n	800e54a <find_volume+0x502>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22e:	333c      	adds	r3, #60	; 0x3c
 800e230:	330b      	adds	r3, #11
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe f858 	bl	800c2e8 <ld_word>
 800e238:	4603      	mov	r3, r0
 800e23a:	461a      	mov	r2, r3
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	899b      	ldrh	r3, [r3, #12]
 800e240:	429a      	cmp	r2, r3
 800e242:	d001      	beq.n	800e248 <find_volume+0x200>
 800e244:	230d      	movs	r3, #13
 800e246:	e180      	b.n	800e54a <find_volume+0x502>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24a:	333c      	adds	r3, #60	; 0x3c
 800e24c:	3316      	adds	r3, #22
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe f84a 	bl	800c2e8 <ld_word>
 800e254:	4603      	mov	r3, r0
 800e256:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d106      	bne.n	800e26c <find_volume+0x224>
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	333c      	adds	r3, #60	; 0x3c
 800e262:	3324      	adds	r3, #36	; 0x24
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe f857 	bl	800c318 <ld_dword>
 800e26a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e270:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	789b      	ldrb	r3, [r3, #2]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d005      	beq.n	800e290 <find_volume+0x248>
 800e284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e286:	789b      	ldrb	r3, [r3, #2]
 800e288:	2b02      	cmp	r3, #2
 800e28a:	d001      	beq.n	800e290 <find_volume+0x248>
 800e28c:	230d      	movs	r3, #13
 800e28e:	e15c      	b.n	800e54a <find_volume+0x502>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e292:	789b      	ldrb	r3, [r3, #2]
 800e294:	461a      	mov	r2, r3
 800e296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e298:	fb02 f303 	mul.w	r3, r2, r3
 800e29c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	895b      	ldrh	r3, [r3, #10]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d008      	beq.n	800e2c4 <find_volume+0x27c>
 800e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b4:	895b      	ldrh	r3, [r3, #10]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	895b      	ldrh	r3, [r3, #10]
 800e2bc:	3b01      	subs	r3, #1
 800e2be:	4013      	ands	r3, r2
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <find_volume+0x280>
 800e2c4:	230d      	movs	r3, #13
 800e2c6:	e140      	b.n	800e54a <find_volume+0x502>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ca:	333c      	adds	r3, #60	; 0x3c
 800e2cc:	3311      	adds	r3, #17
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe f80a 	bl	800c2e8 <ld_word>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2de:	891b      	ldrh	r3, [r3, #8]
 800e2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e2:	8992      	ldrh	r2, [r2, #12]
 800e2e4:	0952      	lsrs	r2, r2, #5
 800e2e6:	b292      	uxth	r2, r2
 800e2e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2ec:	fb01 f202 	mul.w	r2, r1, r2
 800e2f0:	1a9b      	subs	r3, r3, r2
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d003      	beq.n	800e300 <find_volume+0x2b8>
 800e2f8:	230d      	movs	r3, #13
 800e2fa:	e126      	b.n	800e54a <find_volume+0x502>
 800e2fc:	20003428 	.word	0x20003428

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	333c      	adds	r3, #60	; 0x3c
 800e304:	3313      	adds	r3, #19
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd ffee 	bl	800c2e8 <ld_word>
 800e30c:	4603      	mov	r3, r0
 800e30e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e312:	2b00      	cmp	r3, #0
 800e314:	d106      	bne.n	800e324 <find_volume+0x2dc>
 800e316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e318:	333c      	adds	r3, #60	; 0x3c
 800e31a:	3320      	adds	r3, #32
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fd fffb 	bl	800c318 <ld_dword>
 800e322:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e326:	333c      	adds	r3, #60	; 0x3c
 800e328:	330e      	adds	r3, #14
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fd ffdc 	bl	800c2e8 <ld_word>
 800e330:	4603      	mov	r3, r0
 800e332:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e334:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <find_volume+0x2f6>
 800e33a:	230d      	movs	r3, #13
 800e33c:	e105      	b.n	800e54a <find_volume+0x502>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e33e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e342:	4413      	add	r3, r2
 800e344:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e346:	8911      	ldrh	r1, [r2, #8]
 800e348:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e34a:	8992      	ldrh	r2, [r2, #12]
 800e34c:	0952      	lsrs	r2, r2, #5
 800e34e:	b292      	uxth	r2, r2
 800e350:	fbb1 f2f2 	udiv	r2, r1, r2
 800e354:	b292      	uxth	r2, r2
 800e356:	4413      	add	r3, r2
 800e358:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e35a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35e:	429a      	cmp	r2, r3
 800e360:	d201      	bcs.n	800e366 <find_volume+0x31e>
 800e362:	230d      	movs	r3, #13
 800e364:	e0f1      	b.n	800e54a <find_volume+0x502>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	1ad3      	subs	r3, r2, r3
 800e36c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e36e:	8952      	ldrh	r2, [r2, #10]
 800e370:	fbb3 f3f2 	udiv	r3, r3, r2
 800e374:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d101      	bne.n	800e380 <find_volume+0x338>
 800e37c:	230d      	movs	r3, #13
 800e37e:	e0e4      	b.n	800e54a <find_volume+0x502>
		fmt = FS_FAT32;
 800e380:	2303      	movs	r3, #3
 800e382:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d802      	bhi.n	800e396 <find_volume+0x34e>
 800e390:	2302      	movs	r3, #2
 800e392:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d802      	bhi.n	800e3a6 <find_volume+0x35e>
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	1c9a      	adds	r2, r3, #2
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3b2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e3b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b8:	441a      	add	r2, r3
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e3be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	441a      	add	r2, r3
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800e3c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3cc:	2b03      	cmp	r3, #3
 800e3ce:	d11e      	bne.n	800e40e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	333c      	adds	r3, #60	; 0x3c
 800e3d4:	332a      	adds	r3, #42	; 0x2a
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fd ff86 	bl	800c2e8 <ld_word>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d001      	beq.n	800e3e6 <find_volume+0x39e>
 800e3e2:	230d      	movs	r3, #13
 800e3e4:	e0b1      	b.n	800e54a <find_volume+0x502>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e8:	891b      	ldrh	r3, [r3, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d001      	beq.n	800e3f2 <find_volume+0x3aa>
 800e3ee:	230d      	movs	r3, #13
 800e3f0:	e0ab      	b.n	800e54a <find_volume+0x502>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f4:	333c      	adds	r3, #60	; 0x3c
 800e3f6:	332c      	adds	r3, #44	; 0x2c
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fd ff8d 	bl	800c318 <ld_dword>
 800e3fe:	4602      	mov	r2, r0
 800e400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e402:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e406:	6a1b      	ldr	r3, [r3, #32]
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	647b      	str	r3, [r7, #68]	; 0x44
 800e40c:	e01f      	b.n	800e44e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e410:	891b      	ldrh	r3, [r3, #8]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <find_volume+0x3d2>
 800e416:	230d      	movs	r3, #13
 800e418:	e097      	b.n	800e54a <find_volume+0x502>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e420:	441a      	add	r2, r3
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d103      	bne.n	800e436 <find_volume+0x3ee>
 800e42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e430:	6a1b      	ldr	r3, [r3, #32]
 800e432:	005b      	lsls	r3, r3, #1
 800e434:	e00a      	b.n	800e44c <find_volume+0x404>
 800e436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e438:	6a1a      	ldr	r2, [r3, #32]
 800e43a:	4613      	mov	r3, r2
 800e43c:	005b      	lsls	r3, r3, #1
 800e43e:	4413      	add	r3, r2
 800e440:	085a      	lsrs	r2, r3, #1
 800e442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e444:	6a1b      	ldr	r3, [r3, #32]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e44c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	899b      	ldrh	r3, [r3, #12]
 800e456:	4619      	mov	r1, r3
 800e458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e45a:	440b      	add	r3, r1
 800e45c:	3b01      	subs	r3, #1
 800e45e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e460:	8989      	ldrh	r1, [r1, #12]
 800e462:	fbb3 f3f1 	udiv	r3, r3, r1
 800e466:	429a      	cmp	r2, r3
 800e468:	d201      	bcs.n	800e46e <find_volume+0x426>
 800e46a:	230d      	movs	r3, #13
 800e46c:	e06d      	b.n	800e54a <find_volume+0x502>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	f04f 32ff 	mov.w	r2, #4294967295
 800e474:	61da      	str	r2, [r3, #28]
 800e476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e478:	69da      	ldr	r2, [r3, #28]
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	2280      	movs	r2, #128	; 0x80
 800e482:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e488:	2b03      	cmp	r3, #3
 800e48a:	d149      	bne.n	800e520 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	333c      	adds	r3, #60	; 0x3c
 800e490:	3330      	adds	r3, #48	; 0x30
 800e492:	4618      	mov	r0, r3
 800e494:	f7fd ff28 	bl	800c2e8 <ld_word>
 800e498:	4603      	mov	r3, r0
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d140      	bne.n	800e520 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4a0:	3301      	adds	r3, #1
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4a6:	f7fe fa01 	bl	800c8ac <move_window>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d137      	bne.n	800e520 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b8:	333c      	adds	r3, #60	; 0x3c
 800e4ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fd ff12 	bl	800c2e8 <ld_word>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d127      	bne.n	800e520 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d2:	333c      	adds	r3, #60	; 0x3c
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fd ff1f 	bl	800c318 <ld_dword>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	4a1d      	ldr	r2, [pc, #116]	; (800e554 <find_volume+0x50c>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d11e      	bne.n	800e520 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e4:	333c      	adds	r3, #60	; 0x3c
 800e4e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fd ff14 	bl	800c318 <ld_dword>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	4a19      	ldr	r2, [pc, #100]	; (800e558 <find_volume+0x510>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d113      	bne.n	800e520 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	333c      	adds	r3, #60	; 0x3c
 800e4fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e500:	4618      	mov	r0, r3
 800e502:	f7fd ff09 	bl	800c318 <ld_dword>
 800e506:	4602      	mov	r2, r0
 800e508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e50e:	333c      	adds	r3, #60	; 0x3c
 800e510:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e514:	4618      	mov	r0, r3
 800e516:	f7fd feff 	bl	800c318 <ld_dword>
 800e51a:	4602      	mov	r2, r0
 800e51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e51e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e522:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e526:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e528:	4b0c      	ldr	r3, [pc, #48]	; (800e55c <find_volume+0x514>)
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	3301      	adds	r3, #1
 800e52e:	b29a      	uxth	r2, r3
 800e530:	4b0a      	ldr	r3, [pc, #40]	; (800e55c <find_volume+0x514>)
 800e532:	801a      	strh	r2, [r3, #0]
 800e534:	4b09      	ldr	r3, [pc, #36]	; (800e55c <find_volume+0x514>)
 800e536:	881a      	ldrh	r2, [r3, #0]
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53e:	4a08      	ldr	r2, [pc, #32]	; (800e560 <find_volume+0x518>)
 800e540:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e542:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e544:	f7fe f94a 	bl	800c7dc <clear_lock>
#endif
	return FR_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3758      	adds	r7, #88	; 0x58
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	41615252 	.word	0x41615252
 800e558:	61417272 	.word	0x61417272
 800e55c:	2000342c 	.word	0x2000342c
 800e560:	20003450 	.word	0x20003450

0800e564 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e56e:	2309      	movs	r3, #9
 800e570:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d02e      	beq.n	800e5d6 <validate+0x72>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d02a      	beq.n	800e5d6 <validate+0x72>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d025      	beq.n	800e5d6 <validate+0x72>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	889a      	ldrh	r2, [r3, #4]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	88db      	ldrh	r3, [r3, #6]
 800e594:	429a      	cmp	r2, r3
 800e596:	d11e      	bne.n	800e5d6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f7fd ffa3 	bl	800c4e8 <lock_fs>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d014      	beq.n	800e5d2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	785b      	ldrb	r3, [r3, #1]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fd fdfa 	bl	800c1a8 <disk_status>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	f003 0301 	and.w	r3, r3, #1
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d102      	bne.n	800e5c4 <validate+0x60>
				res = FR_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	73fb      	strb	r3, [r7, #15]
 800e5c2:	e008      	b.n	800e5d6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fd ffa2 	bl	800c514 <unlock_fs>
 800e5d0:	e001      	b.n	800e5d6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e5d2:	230f      	movs	r3, #15
 800e5d4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e5d6:	7bfb      	ldrb	r3, [r7, #15]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d102      	bne.n	800e5e2 <validate+0x7e>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	e000      	b.n	800e5e4 <validate+0x80>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	6013      	str	r3, [r2, #0]
	return res;
 800e5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
	...

0800e5f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b088      	sub	sp, #32
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	60f8      	str	r0, [r7, #12]
 800e5fc:	60b9      	str	r1, [r7, #8]
 800e5fe:	4613      	mov	r3, r2
 800e600:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e606:	f107 0310 	add.w	r3, r7, #16
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff fc82 	bl	800df14 <get_ldnumber>
 800e610:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	2b00      	cmp	r3, #0
 800e616:	da01      	bge.n	800e61c <f_mount+0x28>
 800e618:	230b      	movs	r3, #11
 800e61a:	e048      	b.n	800e6ae <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e61c:	4a26      	ldr	r2, [pc, #152]	; (800e6b8 <f_mount+0xc4>)
 800e61e:	69fb      	ldr	r3, [r7, #28]
 800e620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e624:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e626:	69bb      	ldr	r3, [r7, #24]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00f      	beq.n	800e64c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e62c:	69b8      	ldr	r0, [r7, #24]
 800e62e:	f7fe f8d5 	bl	800c7dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	695b      	ldr	r3, [r3, #20]
 800e636:	4618      	mov	r0, r3
 800e638:	f001 fc6a 	bl	800ff10 <ff_del_syncobj>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d101      	bne.n	800e646 <f_mount+0x52>
 800e642:	2302      	movs	r3, #2
 800e644:	e033      	b.n	800e6ae <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2200      	movs	r2, #0
 800e64a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d00f      	beq.n	800e672 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2200      	movs	r2, #0
 800e656:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	3314      	adds	r3, #20
 800e660:	4619      	mov	r1, r3
 800e662:	4610      	mov	r0, r2
 800e664:	f001 fc34 	bl	800fed0 <ff_cre_syncobj>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d101      	bne.n	800e672 <f_mount+0x7e>
 800e66e:	2302      	movs	r3, #2
 800e670:	e01d      	b.n	800e6ae <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e672:	68fa      	ldr	r2, [r7, #12]
 800e674:	4910      	ldr	r1, [pc, #64]	; (800e6b8 <f_mount+0xc4>)
 800e676:	69fb      	ldr	r3, [r7, #28]
 800e678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <f_mount+0x94>
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	2b01      	cmp	r3, #1
 800e686:	d001      	beq.n	800e68c <f_mount+0x98>
 800e688:	2300      	movs	r3, #0
 800e68a:	e010      	b.n	800e6ae <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e68c:	f107 010c 	add.w	r1, r7, #12
 800e690:	f107 0308 	add.w	r3, r7, #8
 800e694:	2200      	movs	r2, #0
 800e696:	4618      	mov	r0, r3
 800e698:	f7ff fcd6 	bl	800e048 <find_volume>
 800e69c:	4603      	mov	r3, r0
 800e69e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	7dfa      	ldrb	r2, [r7, #23]
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fd ff34 	bl	800c514 <unlock_fs>
 800e6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3720      	adds	r7, #32
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20003428 	.word	0x20003428

0800e6bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b09a      	sub	sp, #104	; 0x68
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d101      	bne.n	800e6d4 <f_open+0x18>
 800e6d0:	2309      	movs	r3, #9
 800e6d2:	e1c2      	b.n	800ea5a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e6dc:	79fa      	ldrb	r2, [r7, #7]
 800e6de:	f107 0114 	add.w	r1, r7, #20
 800e6e2:	f107 0308 	add.w	r3, r7, #8
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f7ff fcae 	bl	800e048 <find_volume>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e6f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	f040 819f 	bne.w	800ea3a <f_open+0x37e>
		dj.obj.fs = fs;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e700:	68ba      	ldr	r2, [r7, #8]
 800e702:	f107 0318 	add.w	r3, r7, #24
 800e706:	4611      	mov	r1, r2
 800e708:	4618      	mov	r0, r3
 800e70a:	f7ff fb8d 	bl	800de28 <follow_path>
 800e70e:	4603      	mov	r3, r0
 800e710:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e714:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d11a      	bne.n	800e752 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e71c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e720:	b25b      	sxtb	r3, r3
 800e722:	2b00      	cmp	r3, #0
 800e724:	da03      	bge.n	800e72e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e726:	2306      	movs	r3, #6
 800e728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e72c:	e011      	b.n	800e752 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	f023 0301 	bic.w	r3, r3, #1
 800e734:	2b00      	cmp	r3, #0
 800e736:	bf14      	ite	ne
 800e738:	2301      	movne	r3, #1
 800e73a:	2300      	moveq	r3, #0
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	461a      	mov	r2, r3
 800e740:	f107 0318 	add.w	r3, r7, #24
 800e744:	4611      	mov	r1, r2
 800e746:	4618      	mov	r0, r3
 800e748:	f7fd ff00 	bl	800c54c <chk_lock>
 800e74c:	4603      	mov	r3, r0
 800e74e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	f003 031c 	and.w	r3, r3, #28
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d07f      	beq.n	800e85c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e75c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e760:	2b00      	cmp	r3, #0
 800e762:	d017      	beq.n	800e794 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e764:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e768:	2b04      	cmp	r3, #4
 800e76a:	d10e      	bne.n	800e78a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e76c:	f7fd ff4a 	bl	800c604 <enq_lock>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d006      	beq.n	800e784 <f_open+0xc8>
 800e776:	f107 0318 	add.w	r3, r7, #24
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7ff f8a4 	bl	800d8c8 <dir_register>
 800e780:	4603      	mov	r3, r0
 800e782:	e000      	b.n	800e786 <f_open+0xca>
 800e784:	2312      	movs	r3, #18
 800e786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e78a:	79fb      	ldrb	r3, [r7, #7]
 800e78c:	f043 0308 	orr.w	r3, r3, #8
 800e790:	71fb      	strb	r3, [r7, #7]
 800e792:	e010      	b.n	800e7b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e794:	7fbb      	ldrb	r3, [r7, #30]
 800e796:	f003 0311 	and.w	r3, r3, #17
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <f_open+0xea>
					res = FR_DENIED;
 800e79e:	2307      	movs	r3, #7
 800e7a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e7a4:	e007      	b.n	800e7b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	f003 0304 	and.w	r3, r3, #4
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d002      	beq.n	800e7b6 <f_open+0xfa>
 800e7b0:	2308      	movs	r3, #8
 800e7b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e7b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d168      	bne.n	800e890 <f_open+0x1d4>
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	f003 0308 	and.w	r3, r3, #8
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d063      	beq.n	800e890 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e7c8:	f7fd fc90 	bl	800c0ec <get_fattime>
 800e7cc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7d0:	330e      	adds	r3, #14
 800e7d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fd fddd 	bl	800c394 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7dc:	3316      	adds	r3, #22
 800e7de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7fd fdd7 	bl	800c394 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e8:	330b      	adds	r3, #11
 800e7ea:	2220      	movs	r2, #32
 800e7ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fe fddf 	bl	800d3b8 <ld_clust>
 800e7fa:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e800:	2200      	movs	r2, #0
 800e802:	4618      	mov	r0, r3
 800e804:	f7fe fdf7 	bl	800d3f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	331c      	adds	r3, #28
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fd fdc0 	bl	800c394 <st_dword>
					fs->wflag = 1;
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	2201      	movs	r2, #1
 800e818:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e81a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d037      	beq.n	800e890 <f_open+0x1d4>
						dw = fs->winsect;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e824:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e826:	f107 0318 	add.w	r3, r7, #24
 800e82a:	2200      	movs	r2, #0
 800e82c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fe fae7 	bl	800ce02 <remove_chain>
 800e834:	4603      	mov	r3, r0
 800e836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e83a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d126      	bne.n	800e890 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe f830 	bl	800c8ac <move_window>
 800e84c:	4603      	mov	r3, r0
 800e84e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e856:	3a01      	subs	r2, #1
 800e858:	619a      	str	r2, [r3, #24]
 800e85a:	e019      	b.n	800e890 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e85c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e860:	2b00      	cmp	r3, #0
 800e862:	d115      	bne.n	800e890 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e864:	7fbb      	ldrb	r3, [r7, #30]
 800e866:	f003 0310 	and.w	r3, r3, #16
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e86e:	2304      	movs	r3, #4
 800e870:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e874:	e00c      	b.n	800e890 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d007      	beq.n	800e890 <f_open+0x1d4>
 800e880:	7fbb      	ldrb	r3, [r7, #30]
 800e882:	f003 0301 	and.w	r3, r3, #1
 800e886:	2b00      	cmp	r3, #0
 800e888:	d002      	beq.n	800e890 <f_open+0x1d4>
						res = FR_DENIED;
 800e88a:	2307      	movs	r3, #7
 800e88c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e894:	2b00      	cmp	r3, #0
 800e896:	d128      	bne.n	800e8ea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e898:	79fb      	ldrb	r3, [r7, #7]
 800e89a:	f003 0308 	and.w	r3, r3, #8
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d003      	beq.n	800e8aa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8a8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8b8:	79fb      	ldrb	r3, [r7, #7]
 800e8ba:	f023 0301 	bic.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	bf14      	ite	ne
 800e8c2:	2301      	movne	r3, #1
 800e8c4:	2300      	moveq	r3, #0
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	f107 0318 	add.w	r3, r7, #24
 800e8ce:	4611      	mov	r1, r2
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fd feb9 	bl	800c648 <inc_lock>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d102      	bne.n	800e8ea <f_open+0x22e>
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e8ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	f040 80a3 	bne.w	800ea3a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7fe fd5c 	bl	800d3b8 <ld_clust>
 800e900:	4602      	mov	r2, r0
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	331c      	adds	r3, #28
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7fd fd04 	bl	800c318 <ld_dword>
 800e910:	4602      	mov	r2, r0
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2200      	movs	r2, #0
 800e91a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e91c:	697a      	ldr	r2, [r7, #20]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	88da      	ldrh	r2, [r3, #6]
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	79fa      	ldrb	r2, [r7, #7]
 800e92e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2200      	movs	r2, #0
 800e934:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2200      	movs	r2, #0
 800e93a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	2200      	movs	r2, #0
 800e940:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	3330      	adds	r3, #48	; 0x30
 800e946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e94a:	2100      	movs	r1, #0
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fd fd6e 	bl	800c42e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e952:	79fb      	ldrb	r3, [r7, #7]
 800e954:	f003 0320 	and.w	r3, r3, #32
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d06e      	beq.n	800ea3a <f_open+0x37e>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d06a      	beq.n	800ea3a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	68da      	ldr	r2, [r3, #12]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	895b      	ldrh	r3, [r3, #10]
 800e970:	461a      	mov	r2, r3
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	899b      	ldrh	r3, [r3, #12]
 800e976:	fb02 f303 	mul.w	r3, r2, r3
 800e97a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	689b      	ldr	r3, [r3, #8]
 800e980:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	68db      	ldr	r3, [r3, #12]
 800e986:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e988:	e016      	b.n	800e9b8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe f849 	bl	800ca26 <get_fat>
 800e994:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e998:	2b01      	cmp	r3, #1
 800e99a:	d802      	bhi.n	800e9a2 <f_open+0x2e6>
 800e99c:	2302      	movs	r3, #2
 800e99e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e9a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a8:	d102      	bne.n	800e9b0 <f_open+0x2f4>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e9b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9b4:	1ad3      	subs	r3, r2, r3
 800e9b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d103      	bne.n	800e9c8 <f_open+0x30c>
 800e9c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d8e0      	bhi.n	800e98a <f_open+0x2ce>
				}
				fp->clust = clst;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9cc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e9ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d131      	bne.n	800ea3a <f_open+0x37e>
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	899b      	ldrh	r3, [r3, #12]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9de:	fbb3 f1f2 	udiv	r1, r3, r2
 800e9e2:	fb01 f202 	mul.w	r2, r1, r2
 800e9e6:	1a9b      	subs	r3, r3, r2
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d026      	beq.n	800ea3a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fd fff9 	bl	800c9e8 <clust2sect>
 800e9f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e9f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d103      	bne.n	800ea06 <f_open+0x34a>
						res = FR_INT_ERR;
 800e9fe:	2302      	movs	r3, #2
 800ea00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea04:	e019      	b.n	800ea3a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	899b      	ldrh	r3, [r3, #12]
 800ea0a:	461a      	mov	r2, r3
 800ea0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea0e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ea12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea14:	441a      	add	r2, r3
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	7858      	ldrb	r0, [r3, #1]
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6a1a      	ldr	r2, [r3, #32]
 800ea28:	2301      	movs	r3, #1
 800ea2a:	f7fd fbff 	bl	800c22c <disk_read>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d002      	beq.n	800ea3a <f_open+0x37e>
 800ea34:	2301      	movs	r3, #1
 800ea36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ea3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <f_open+0x38c>
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ea4e:	4611      	mov	r1, r2
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fd fd5f 	bl	800c514 <unlock_fs>
 800ea56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3768      	adds	r7, #104	; 0x68
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b08e      	sub	sp, #56	; 0x38
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	60f8      	str	r0, [r7, #12]
 800ea6a:	60b9      	str	r1, [r7, #8]
 800ea6c:	607a      	str	r2, [r7, #4]
 800ea6e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	2200      	movs	r2, #0
 800ea78:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f107 0214 	add.w	r2, r7, #20
 800ea80:	4611      	mov	r1, r2
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff fd6e 	bl	800e564 <validate>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ea8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d107      	bne.n	800eaa6 <f_read+0x44>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	7d5b      	ldrb	r3, [r3, #21]
 800ea9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ea9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d009      	beq.n	800eaba <f_read+0x58>
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800eaac:	4611      	mov	r1, r2
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fd fd30 	bl	800c514 <unlock_fs>
 800eab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eab8:	e15d      	b.n	800ed76 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	7d1b      	ldrb	r3, [r3, #20]
 800eabe:	f003 0301 	and.w	r3, r3, #1
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <f_read+0x72>
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	2107      	movs	r1, #7
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fd fd22 	bl	800c514 <unlock_fs>
 800ead0:	2307      	movs	r3, #7
 800ead2:	e150      	b.n	800ed76 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68da      	ldr	r2, [r3, #12]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	699b      	ldr	r3, [r3, #24]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800eae0:	687a      	ldr	r2, [r7, #4]
 800eae2:	6a3b      	ldr	r3, [r7, #32]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	f240 813c 	bls.w	800ed62 <f_read+0x300>
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800eaee:	e138      	b.n	800ed62 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	699b      	ldr	r3, [r3, #24]
 800eaf4:	697a      	ldr	r2, [r7, #20]
 800eaf6:	8992      	ldrh	r2, [r2, #12]
 800eaf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800eafc:	fb01 f202 	mul.w	r2, r1, r2
 800eb00:	1a9b      	subs	r3, r3, r2
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f040 80f3 	bne.w	800ecee <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	699b      	ldr	r3, [r3, #24]
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	8992      	ldrh	r2, [r2, #12]
 800eb10:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb14:	697a      	ldr	r2, [r7, #20]
 800eb16:	8952      	ldrh	r2, [r2, #10]
 800eb18:	3a01      	subs	r2, #1
 800eb1a:	4013      	ands	r3, r2
 800eb1c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d139      	bne.n	800eb98 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	699b      	ldr	r3, [r3, #24]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d103      	bne.n	800eb34 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	689b      	ldr	r3, [r3, #8]
 800eb30:	633b      	str	r3, [r7, #48]	; 0x30
 800eb32:	e013      	b.n	800eb5c <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d007      	beq.n	800eb4c <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	699b      	ldr	r3, [r3, #24]
 800eb40:	4619      	mov	r1, r3
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7fe fa5a 	bl	800cffc <clmt_clust>
 800eb48:	6338      	str	r0, [r7, #48]	; 0x30
 800eb4a:	e007      	b.n	800eb5c <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	69db      	ldr	r3, [r3, #28]
 800eb52:	4619      	mov	r1, r3
 800eb54:	4610      	mov	r0, r2
 800eb56:	f7fd ff66 	bl	800ca26 <get_fat>
 800eb5a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800eb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5e:	2b01      	cmp	r3, #1
 800eb60:	d809      	bhi.n	800eb76 <f_read+0x114>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2202      	movs	r2, #2
 800eb66:	755a      	strb	r2, [r3, #21]
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	2102      	movs	r1, #2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fd fcd1 	bl	800c514 <unlock_fs>
 800eb72:	2302      	movs	r3, #2
 800eb74:	e0ff      	b.n	800ed76 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb7c:	d109      	bne.n	800eb92 <f_read+0x130>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2201      	movs	r2, #1
 800eb82:	755a      	strb	r2, [r3, #21]
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	2101      	movs	r1, #1
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f7fd fcc3 	bl	800c514 <unlock_fs>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	e0f1      	b.n	800ed76 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb96:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800eb98:	697a      	ldr	r2, [r7, #20]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	69db      	ldr	r3, [r3, #28]
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4610      	mov	r0, r2
 800eba2:	f7fd ff21 	bl	800c9e8 <clust2sect>
 800eba6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d109      	bne.n	800ebc2 <f_read+0x160>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2202      	movs	r2, #2
 800ebb2:	755a      	strb	r2, [r3, #21]
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	2102      	movs	r1, #2
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fd fcab 	bl	800c514 <unlock_fs>
 800ebbe:	2302      	movs	r3, #2
 800ebc0:	e0d9      	b.n	800ed76 <f_read+0x314>
			sect += csect;
 800ebc2:	69ba      	ldr	r2, [r7, #24]
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	899b      	ldrh	r3, [r3, #12]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800ebd6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ebd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d046      	beq.n	800ec6c <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ebde:	69fa      	ldr	r2, [r7, #28]
 800ebe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebe2:	4413      	add	r3, r2
 800ebe4:	697a      	ldr	r2, [r7, #20]
 800ebe6:	8952      	ldrh	r2, [r2, #10]
 800ebe8:	4293      	cmp	r3, r2
 800ebea:	d905      	bls.n	800ebf8 <f_read+0x196>
					cc = fs->csize - csect;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	895b      	ldrh	r3, [r3, #10]
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	7858      	ldrb	r0, [r3, #1]
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec02:	f7fd fb13 	bl	800c22c <disk_read>
 800ec06:	4603      	mov	r3, r0
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d009      	beq.n	800ec20 <f_read+0x1be>
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	755a      	strb	r2, [r3, #21]
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	2101      	movs	r1, #1
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7fd fc7c 	bl	800c514 <unlock_fs>
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e0aa      	b.n	800ed76 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	7d1b      	ldrb	r3, [r3, #20]
 800ec24:	b25b      	sxtb	r3, r3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	da18      	bge.n	800ec5c <f_read+0x1fa>
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	6a1a      	ldr	r2, [r3, #32]
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	1ad3      	subs	r3, r2, r3
 800ec32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d911      	bls.n	800ec5c <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6a1a      	ldr	r2, [r3, #32]
 800ec3c:	69bb      	ldr	r3, [r7, #24]
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	697a      	ldr	r2, [r7, #20]
 800ec42:	8992      	ldrh	r2, [r2, #12]
 800ec44:	fb02 f303 	mul.w	r3, r2, r3
 800ec48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec4a:	18d0      	adds	r0, r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	899b      	ldrh	r3, [r3, #12]
 800ec56:	461a      	mov	r2, r3
 800ec58:	f7fd fbc8 	bl	800c3ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	899b      	ldrh	r3, [r3, #12]
 800ec60:	461a      	mov	r2, r3
 800ec62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec64:	fb02 f303 	mul.w	r3, r2, r3
 800ec68:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ec6a:	e066      	b.n	800ed3a <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a1b      	ldr	r3, [r3, #32]
 800ec70:	69ba      	ldr	r2, [r7, #24]
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d038      	beq.n	800ece8 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	7d1b      	ldrb	r3, [r3, #20]
 800ec7a:	b25b      	sxtb	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	da1d      	bge.n	800ecbc <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	7858      	ldrb	r0, [r3, #1]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	6a1a      	ldr	r2, [r3, #32]
 800ec8e:	2301      	movs	r3, #1
 800ec90:	f7fd faec 	bl	800c26c <disk_write>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d009      	beq.n	800ecae <f_read+0x24c>
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2201      	movs	r2, #1
 800ec9e:	755a      	strb	r2, [r3, #21]
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	2101      	movs	r1, #1
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7fd fc35 	bl	800c514 <unlock_fs>
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e063      	b.n	800ed76 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	7d1b      	ldrb	r3, [r3, #20]
 800ecb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecb6:	b2da      	uxtb	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	7858      	ldrb	r0, [r3, #1]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	69ba      	ldr	r2, [r7, #24]
 800ecca:	f7fd faaf 	bl	800c22c <disk_read>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d009      	beq.n	800ece8 <f_read+0x286>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	755a      	strb	r2, [r3, #21]
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	2101      	movs	r1, #1
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fd fc18 	bl	800c514 <unlock_fs>
 800ece4:	2301      	movs	r3, #1
 800ece6:	e046      	b.n	800ed76 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	69ba      	ldr	r2, [r7, #24]
 800ecec:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	899b      	ldrh	r3, [r3, #12]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	699b      	ldr	r3, [r3, #24]
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	8992      	ldrh	r2, [r2, #12]
 800ecfc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed00:	fb01 f202 	mul.w	r2, r1, r2
 800ed04:	1a9b      	subs	r3, r3, r2
 800ed06:	1ac3      	subs	r3, r0, r3
 800ed08:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ed0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d901      	bls.n	800ed16 <f_read+0x2b4>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	697a      	ldr	r2, [r7, #20]
 800ed22:	8992      	ldrh	r2, [r2, #12]
 800ed24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed28:	fb00 f202 	mul.w	r2, r0, r2
 800ed2c:	1a9b      	subs	r3, r3, r2
 800ed2e:	440b      	add	r3, r1
 800ed30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed32:	4619      	mov	r1, r3
 800ed34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed36:	f7fd fb59 	bl	800c3ec <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ed3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	4413      	add	r3, r2
 800ed40:	627b      	str	r3, [r7, #36]	; 0x24
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	699a      	ldr	r2, [r3, #24]
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	441a      	add	r2, r3
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	619a      	str	r2, [r3, #24]
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed54:	441a      	add	r2, r3
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	601a      	str	r2, [r3, #0]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	f47f aec3 	bne.w	800eaf0 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	2100      	movs	r1, #0
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd fbd0 	bl	800c514 <unlock_fs>
 800ed74:	2300      	movs	r3, #0
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3738      	adds	r7, #56	; 0x38
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}

0800ed7e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b08c      	sub	sp, #48	; 0x30
 800ed82:	af00      	add	r7, sp, #0
 800ed84:	60f8      	str	r0, [r7, #12]
 800ed86:	60b9      	str	r1, [r7, #8]
 800ed88:	607a      	str	r2, [r7, #4]
 800ed8a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f107 0210 	add.w	r2, r7, #16
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff fbe0 	bl	800e564 <validate>
 800eda4:	4603      	mov	r3, r0
 800eda6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800edaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d107      	bne.n	800edc2 <f_write+0x44>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	7d5b      	ldrb	r3, [r3, #21]
 800edb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800edba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d009      	beq.n	800edd6 <f_write+0x58>
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800edc8:	4611      	mov	r1, r2
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fd fba2 	bl	800c514 <unlock_fs>
 800edd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edd4:	e192      	b.n	800f0fc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	7d1b      	ldrb	r3, [r3, #20]
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d106      	bne.n	800edf0 <f_write+0x72>
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	2107      	movs	r1, #7
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fd fb94 	bl	800c514 <unlock_fs>
 800edec:	2307      	movs	r3, #7
 800edee:	e185      	b.n	800f0fc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	699a      	ldr	r2, [r3, #24]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	441a      	add	r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	f080 816a 	bcs.w	800f0d6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	699b      	ldr	r3, [r3, #24]
 800ee06:	43db      	mvns	r3, r3
 800ee08:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ee0a:	e164      	b.n	800f0d6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	699b      	ldr	r3, [r3, #24]
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	8992      	ldrh	r2, [r2, #12]
 800ee14:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee18:	fb01 f202 	mul.w	r2, r1, r2
 800ee1c:	1a9b      	subs	r3, r3, r2
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	f040 810f 	bne.w	800f042 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	8992      	ldrh	r2, [r2, #12]
 800ee2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	8952      	ldrh	r2, [r2, #10]
 800ee34:	3a01      	subs	r2, #1
 800ee36:	4013      	ands	r3, r2
 800ee38:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d14d      	bne.n	800eedc <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	699b      	ldr	r3, [r3, #24]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10c      	bne.n	800ee62 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	689b      	ldr	r3, [r3, #8]
 800ee4c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ee4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d11a      	bne.n	800ee8a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2100      	movs	r1, #0
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fe f837 	bl	800cecc <create_chain>
 800ee5e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee60:	e013      	b.n	800ee8a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d007      	beq.n	800ee7a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	f7fe f8c3 	bl	800cffc <clmt_clust>
 800ee76:	62b8      	str	r0, [r7, #40]	; 0x28
 800ee78:	e007      	b.n	800ee8a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ee7a:	68fa      	ldr	r2, [r7, #12]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	69db      	ldr	r3, [r3, #28]
 800ee80:	4619      	mov	r1, r3
 800ee82:	4610      	mov	r0, r2
 800ee84:	f7fe f822 	bl	800cecc <create_chain>
 800ee88:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f000 8127 	beq.w	800f0e0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ee92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d109      	bne.n	800eeac <f_write+0x12e>
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2202      	movs	r2, #2
 800ee9c:	755a      	strb	r2, [r3, #21]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2102      	movs	r1, #2
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7fd fb36 	bl	800c514 <unlock_fs>
 800eea8:	2302      	movs	r3, #2
 800eeaa:	e127      	b.n	800f0fc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeb2:	d109      	bne.n	800eec8 <f_write+0x14a>
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	755a      	strb	r2, [r3, #21]
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2101      	movs	r1, #1
 800eebe:	4618      	mov	r0, r3
 800eec0:	f7fd fb28 	bl	800c514 <unlock_fs>
 800eec4:	2301      	movs	r3, #1
 800eec6:	e119      	b.n	800f0fc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eecc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	689b      	ldr	r3, [r3, #8]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <f_write+0x15e>
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeda:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	7d1b      	ldrb	r3, [r3, #20]
 800eee0:	b25b      	sxtb	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	da1d      	bge.n	800ef22 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	7858      	ldrb	r0, [r3, #1]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6a1a      	ldr	r2, [r3, #32]
 800eef4:	2301      	movs	r3, #1
 800eef6:	f7fd f9b9 	bl	800c26c <disk_write>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d009      	beq.n	800ef14 <f_write+0x196>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	2201      	movs	r2, #1
 800ef04:	755a      	strb	r2, [r3, #21]
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	2101      	movs	r1, #1
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd fb02 	bl	800c514 <unlock_fs>
 800ef10:	2301      	movs	r3, #1
 800ef12:	e0f3      	b.n	800f0fc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	7d1b      	ldrb	r3, [r3, #20]
 800ef18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ef22:	693a      	ldr	r2, [r7, #16]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	f7fd fd5c 	bl	800c9e8 <clust2sect>
 800ef30:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d109      	bne.n	800ef4c <f_write+0x1ce>
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2202      	movs	r2, #2
 800ef3c:	755a      	strb	r2, [r3, #21]
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2102      	movs	r1, #2
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fd fae6 	bl	800c514 <unlock_fs>
 800ef48:	2302      	movs	r3, #2
 800ef4a:	e0d7      	b.n	800f0fc <f_write+0x37e>
			sect += csect;
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	4413      	add	r3, r2
 800ef52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	899b      	ldrh	r3, [r3, #12]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ef60:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d048      	beq.n	800effa <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ef68:	69ba      	ldr	r2, [r7, #24]
 800ef6a:	6a3b      	ldr	r3, [r7, #32]
 800ef6c:	4413      	add	r3, r2
 800ef6e:	693a      	ldr	r2, [r7, #16]
 800ef70:	8952      	ldrh	r2, [r2, #10]
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d905      	bls.n	800ef82 <f_write+0x204>
					cc = fs->csize - csect;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	895b      	ldrh	r3, [r3, #10]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	7858      	ldrb	r0, [r3, #1]
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	69f9      	ldr	r1, [r7, #28]
 800ef8c:	f7fd f96e 	bl	800c26c <disk_write>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d009      	beq.n	800efaa <f_write+0x22c>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	2201      	movs	r2, #1
 800ef9a:	755a      	strb	r2, [r3, #21]
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	2101      	movs	r1, #1
 800efa0:	4618      	mov	r0, r3
 800efa2:	f7fd fab7 	bl	800c514 <unlock_fs>
 800efa6:	2301      	movs	r3, #1
 800efa8:	e0a8      	b.n	800f0fc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6a1a      	ldr	r2, [r3, #32]
 800efae:	697b      	ldr	r3, [r7, #20]
 800efb0:	1ad3      	subs	r3, r2, r3
 800efb2:	6a3a      	ldr	r2, [r7, #32]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d918      	bls.n	800efea <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6a1a      	ldr	r2, [r3, #32]
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	693a      	ldr	r2, [r7, #16]
 800efc8:	8992      	ldrh	r2, [r2, #12]
 800efca:	fb02 f303 	mul.w	r3, r2, r3
 800efce:	69fa      	ldr	r2, [r7, #28]
 800efd0:	18d1      	adds	r1, r2, r3
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	899b      	ldrh	r3, [r3, #12]
 800efd6:	461a      	mov	r2, r3
 800efd8:	f7fd fa08 	bl	800c3ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	7d1b      	ldrb	r3, [r3, #20]
 800efe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efe4:	b2da      	uxtb	r2, r3
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	899b      	ldrh	r3, [r3, #12]
 800efee:	461a      	mov	r2, r3
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	fb02 f303 	mul.w	r3, r2, r3
 800eff6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eff8:	e050      	b.n	800f09c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6a1b      	ldr	r3, [r3, #32]
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	429a      	cmp	r2, r3
 800f002:	d01b      	beq.n	800f03c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	699a      	ldr	r2, [r3, #24]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d215      	bcs.n	800f03c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	7858      	ldrb	r0, [r3, #1]
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f01a:	2301      	movs	r3, #1
 800f01c:	697a      	ldr	r2, [r7, #20]
 800f01e:	f7fd f905 	bl	800c22c <disk_read>
 800f022:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f024:	2b00      	cmp	r3, #0
 800f026:	d009      	beq.n	800f03c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2201      	movs	r2, #1
 800f02c:	755a      	strb	r2, [r3, #21]
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	2101      	movs	r1, #1
 800f032:	4618      	mov	r0, r3
 800f034:	f7fd fa6e 	bl	800c514 <unlock_fs>
 800f038:	2301      	movs	r3, #1
 800f03a:	e05f      	b.n	800f0fc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	899b      	ldrh	r3, [r3, #12]
 800f046:	4618      	mov	r0, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	699b      	ldr	r3, [r3, #24]
 800f04c:	693a      	ldr	r2, [r7, #16]
 800f04e:	8992      	ldrh	r2, [r2, #12]
 800f050:	fbb3 f1f2 	udiv	r1, r3, r2
 800f054:	fb01 f202 	mul.w	r2, r1, r2
 800f058:	1a9b      	subs	r3, r3, r2
 800f05a:	1ac3      	subs	r3, r0, r3
 800f05c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f05e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	429a      	cmp	r2, r3
 800f064:	d901      	bls.n	800f06a <f_write+0x2ec>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	699b      	ldr	r3, [r3, #24]
 800f074:	693a      	ldr	r2, [r7, #16]
 800f076:	8992      	ldrh	r2, [r2, #12]
 800f078:	fbb3 f0f2 	udiv	r0, r3, r2
 800f07c:	fb00 f202 	mul.w	r2, r0, r2
 800f080:	1a9b      	subs	r3, r3, r2
 800f082:	440b      	add	r3, r1
 800f084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f086:	69f9      	ldr	r1, [r7, #28]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fd f9af 	bl	800c3ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f096:	b2da      	uxtb	r2, r3
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f09c:	69fa      	ldr	r2, [r7, #28]
 800f09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a0:	4413      	add	r3, r2
 800f0a2:	61fb      	str	r3, [r7, #28]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	699a      	ldr	r2, [r3, #24]
 800f0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0aa:	441a      	add	r2, r3
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	619a      	str	r2, [r3, #24]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	68da      	ldr	r2, [r3, #12]
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	bf38      	it	cc
 800f0bc:	461a      	movcc	r2, r3
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	60da      	str	r2, [r3, #12]
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	681a      	ldr	r2, [r3, #0]
 800f0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c8:	441a      	add	r2, r3
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	601a      	str	r2, [r3, #0]
 800f0ce:	687a      	ldr	r2, [r7, #4]
 800f0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d2:	1ad3      	subs	r3, r2, r3
 800f0d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f47f ae97 	bne.w	800ee0c <f_write+0x8e>
 800f0de:	e000      	b.n	800f0e2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f0e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	7d1b      	ldrb	r3, [r3, #20]
 800f0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0ea:	b2da      	uxtb	r2, r3
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	2100      	movs	r1, #0
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fd fa0d 	bl	800c514 <unlock_fs>
 800f0fa:	2300      	movs	r3, #0
}
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	3730      	adds	r7, #48	; 0x30
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}

0800f104 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b086      	sub	sp, #24
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f107 0208 	add.w	r2, r7, #8
 800f112:	4611      	mov	r1, r2
 800f114:	4618      	mov	r0, r3
 800f116:	f7ff fa25 	bl	800e564 <validate>
 800f11a:	4603      	mov	r3, r0
 800f11c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f11e:	7dfb      	ldrb	r3, [r7, #23]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d16d      	bne.n	800f200 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	7d1b      	ldrb	r3, [r3, #20]
 800f128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d067      	beq.n	800f200 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	7d1b      	ldrb	r3, [r3, #20]
 800f134:	b25b      	sxtb	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	da1a      	bge.n	800f170 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	7858      	ldrb	r0, [r3, #1]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a1a      	ldr	r2, [r3, #32]
 800f148:	2301      	movs	r3, #1
 800f14a:	f7fd f88f 	bl	800c26c <disk_write>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d006      	beq.n	800f162 <f_sync+0x5e>
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2101      	movs	r1, #1
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fd f9db 	bl	800c514 <unlock_fs>
 800f15e:	2301      	movs	r3, #1
 800f160:	e055      	b.n	800f20e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	7d1b      	ldrb	r3, [r3, #20]
 800f166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f16a:	b2da      	uxtb	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f170:	f7fc ffbc 	bl	800c0ec <get_fattime>
 800f174:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f176:	68ba      	ldr	r2, [r7, #8]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17c:	4619      	mov	r1, r3
 800f17e:	4610      	mov	r0, r2
 800f180:	f7fd fb94 	bl	800c8ac <move_window>
 800f184:	4603      	mov	r3, r0
 800f186:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f188:	7dfb      	ldrb	r3, [r7, #23]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d138      	bne.n	800f200 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f192:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	330b      	adds	r3, #11
 800f198:	781a      	ldrb	r2, [r3, #0]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	330b      	adds	r3, #11
 800f19e:	f042 0220 	orr.w	r2, r2, #32
 800f1a2:	b2d2      	uxtb	r2, r2
 800f1a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6818      	ldr	r0, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	689b      	ldr	r3, [r3, #8]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	68f9      	ldr	r1, [r7, #12]
 800f1b2:	f7fe f920 	bl	800d3f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f103 021c 	add.w	r2, r3, #28
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68db      	ldr	r3, [r3, #12]
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4610      	mov	r0, r2
 800f1c4:	f7fd f8e6 	bl	800c394 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	3316      	adds	r3, #22
 800f1cc:	6939      	ldr	r1, [r7, #16]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fd f8e0 	bl	800c394 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	3312      	adds	r3, #18
 800f1d8:	2100      	movs	r1, #0
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fd f8bf 	bl	800c35e <st_word>
					fs->wflag = 1;
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fd fb8d 	bl	800c908 <sync_fs>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	7d1b      	ldrb	r3, [r3, #20]
 800f1f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1fa:	b2da      	uxtb	r2, r3
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	7dfa      	ldrb	r2, [r7, #23]
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7fd f984 	bl	800c514 <unlock_fs>
 800f20c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3718      	adds	r7, #24
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff ff70 	bl	800f104 <f_sync>
 800f224:	4603      	mov	r3, r0
 800f226:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f228:	7bfb      	ldrb	r3, [r7, #15]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d11d      	bne.n	800f26a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f107 0208 	add.w	r2, r7, #8
 800f234:	4611      	mov	r1, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f7ff f994 	bl	800e564 <validate>
 800f23c:	4603      	mov	r3, r0
 800f23e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f240:	7bfb      	ldrb	r3, [r7, #15]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d111      	bne.n	800f26a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	691b      	ldr	r3, [r3, #16]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7fd fa8a 	bl	800c764 <dec_lock>
 800f250:	4603      	mov	r3, r0
 800f252:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f254:	7bfb      	ldrb	r3, [r7, #15]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d102      	bne.n	800f260 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2200      	movs	r2, #0
 800f25e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2100      	movs	r1, #0
 800f264:	4618      	mov	r0, r3
 800f266:	f7fd f955 	bl	800c514 <unlock_fs>
#endif
		}
	}
	return res;
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b092      	sub	sp, #72	; 0x48
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800f280:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f284:	f107 030c 	add.w	r3, r7, #12
 800f288:	2200      	movs	r2, #0
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fe fedc 	bl	800e048 <find_volume>
 800f290:	4603      	mov	r3, r0
 800f292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800f296:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	f040 8099 	bne.w	800f3d2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800f2a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800f2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a8:	69da      	ldr	r2, [r3, #28]
 800f2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ac:	6a1b      	ldr	r3, [r3, #32]
 800f2ae:	3b02      	subs	r3, #2
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d804      	bhi.n	800f2be <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800f2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b6:	69da      	ldr	r2, [r3, #28]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	601a      	str	r2, [r3, #0]
 800f2bc:	e089      	b.n	800f3d2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800f2be:	2300      	movs	r3, #0
 800f2c0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800f2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d128      	bne.n	800f31c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800f2ca:	2302      	movs	r3, #2
 800f2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800f2d2:	f107 0314 	add.w	r3, r7, #20
 800f2d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fd fba4 	bl	800ca26 <get_fat>
 800f2de:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800f2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e6:	d103      	bne.n	800f2f0 <f_getfree+0x7c>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f2ee:	e063      	b.n	800f3b8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d103      	bne.n	800f2fe <f_getfree+0x8a>
 800f2f6:	2302      	movs	r3, #2
 800f2f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f2fc:	e05c      	b.n	800f3b8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800f2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f300:	2b00      	cmp	r3, #0
 800f302:	d102      	bne.n	800f30a <f_getfree+0x96>
 800f304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f306:	3301      	adds	r3, #1
 800f308:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800f30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f30c:	3301      	adds	r3, #1
 800f30e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	6a1b      	ldr	r3, [r3, #32]
 800f314:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f316:	429a      	cmp	r2, r3
 800f318:	d3db      	bcc.n	800f2d2 <f_getfree+0x5e>
 800f31a:	e04d      	b.n	800f3b8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	6a1b      	ldr	r3, [r3, #32]
 800f320:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f326:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	637b      	str	r3, [r7, #52]	; 0x34
 800f32c:	2300      	movs	r3, #0
 800f32e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800f330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f332:	2b00      	cmp	r3, #0
 800f334:	d113      	bne.n	800f35e <f_getfree+0xea>
							res = move_window(fs, sect++);
 800f336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33a:	1c5a      	adds	r2, r3, #1
 800f33c:	63ba      	str	r2, [r7, #56]	; 0x38
 800f33e:	4619      	mov	r1, r3
 800f340:	f7fd fab4 	bl	800c8ac <move_window>
 800f344:	4603      	mov	r3, r0
 800f346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800f34a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d131      	bne.n	800f3b6 <f_getfree+0x142>
							p = fs->win;
 800f352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f354:	333c      	adds	r3, #60	; 0x3c
 800f356:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	899b      	ldrh	r3, [r3, #12]
 800f35c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800f35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	2b02      	cmp	r3, #2
 800f364:	d10f      	bne.n	800f386 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800f366:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f368:	f7fc ffbe 	bl	800c2e8 <ld_word>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d102      	bne.n	800f378 <f_getfree+0x104>
 800f372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f374:	3301      	adds	r3, #1
 800f376:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800f378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37a:	3302      	adds	r3, #2
 800f37c:	633b      	str	r3, [r7, #48]	; 0x30
 800f37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f380:	3b02      	subs	r3, #2
 800f382:	637b      	str	r3, [r7, #52]	; 0x34
 800f384:	e010      	b.n	800f3a8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800f386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f388:	f7fc ffc6 	bl	800c318 <ld_dword>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f392:	2b00      	cmp	r3, #0
 800f394:	d102      	bne.n	800f39c <f_getfree+0x128>
 800f396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f398:	3301      	adds	r3, #1
 800f39a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	3304      	adds	r3, #4
 800f3a0:	633b      	str	r3, [r7, #48]	; 0x30
 800f3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a4:	3b04      	subs	r3, #4
 800f3a6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800f3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1bd      	bne.n	800f330 <f_getfree+0xbc>
 800f3b4:	e000      	b.n	800f3b8 <f_getfree+0x144>
							if (res != FR_OK) break;
 800f3b6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3bc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f3c2:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800f3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c6:	791a      	ldrb	r2, [r3, #4]
 800f3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ca:	f042 0201 	orr.w	r2, r2, #1
 800f3ce:	b2d2      	uxtb	r2, r2
 800f3d0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800f3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800f3d8:	4611      	mov	r1, r2
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fd f89a 	bl	800c514 <unlock_fs>
 800f3e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3748      	adds	r7, #72	; 0x48
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}

0800f3ec <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f3ec:	b590      	push	{r4, r7, lr}
 800f3ee:	b09d      	sub	sp, #116	; 0x74
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	607a      	str	r2, [r7, #4]
 800f3f6:	603b      	str	r3, [r7, #0]
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f400:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f404:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f406:	f107 030c 	add.w	r3, r7, #12
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fe fd82 	bl	800df14 <get_ldnumber>
 800f410:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f414:	2b00      	cmp	r3, #0
 800f416:	da02      	bge.n	800f41e <f_mkfs+0x32>
 800f418:	230b      	movs	r3, #11
 800f41a:	f000 bc31 	b.w	800fc80 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f41e:	4aa5      	ldr	r2, [pc, #660]	; (800f6b4 <f_mkfs+0x2c8>)
 800f420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d005      	beq.n	800f436 <f_mkfs+0x4a>
 800f42a:	4aa2      	ldr	r2, [pc, #648]	; (800f6b4 <f_mkfs+0x2c8>)
 800f42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f432:	2200      	movs	r2, #0
 800f434:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f438:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f43c:	2300      	movs	r3, #0
 800f43e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f442:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f446:	4618      	mov	r0, r3
 800f448:	f7fc fec8 	bl	800c1dc <disk_initialize>
 800f44c:	4603      	mov	r3, r0
 800f44e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f452:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f456:	f003 0301 	and.w	r3, r3, #1
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d002      	beq.n	800f464 <f_mkfs+0x78>
 800f45e:	2303      	movs	r3, #3
 800f460:	f000 bc0e 	b.w	800fc80 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f464:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f468:	f003 0304 	and.w	r3, r3, #4
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <f_mkfs+0x8a>
 800f470:	230a      	movs	r3, #10
 800f472:	f000 bc05 	b.w	800fc80 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f476:	f107 0214 	add.w	r2, r7, #20
 800f47a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f47e:	2103      	movs	r1, #3
 800f480:	4618      	mov	r0, r3
 800f482:	f7fc ff13 	bl	800c2ac <disk_ioctl>
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d10c      	bne.n	800f4a6 <f_mkfs+0xba>
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d009      	beq.n	800f4a6 <f_mkfs+0xba>
 800f492:	697b      	ldr	r3, [r7, #20]
 800f494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f498:	d805      	bhi.n	800f4a6 <f_mkfs+0xba>
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	1e5a      	subs	r2, r3, #1
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	4013      	ands	r3, r2
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <f_mkfs+0xbe>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 800f4aa:	f107 021a 	add.w	r2, r7, #26
 800f4ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f4b2:	2102      	movs	r1, #2
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f7fc fef9 	bl	800c2ac <disk_ioctl>
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d001      	beq.n	800f4c4 <f_mkfs+0xd8>
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e3dd      	b.n	800fc80 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 800f4c4:	8b7b      	ldrh	r3, [r7, #26]
 800f4c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4ca:	d80a      	bhi.n	800f4e2 <f_mkfs+0xf6>
 800f4cc:	8b7b      	ldrh	r3, [r7, #26]
 800f4ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4d2:	d306      	bcc.n	800f4e2 <f_mkfs+0xf6>
 800f4d4:	8b7b      	ldrh	r3, [r7, #26]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	8b7b      	ldrh	r3, [r7, #26]
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	4013      	ands	r3, r2
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d001      	beq.n	800f4e6 <f_mkfs+0xfa>
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e3cc      	b.n	800fc80 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d004      	beq.n	800f4f6 <f_mkfs+0x10a>
 800f4ec:	8b7b      	ldrh	r3, [r7, #26]
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d309      	bcc.n	800f50a <f_mkfs+0x11e>
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f4fc:	d805      	bhi.n	800f50a <f_mkfs+0x11e>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	1e5a      	subs	r2, r3, #1
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4013      	ands	r3, r2
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <f_mkfs+0x122>
 800f50a:	2313      	movs	r3, #19
 800f50c:	e3b8      	b.n	800fc80 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 800f50e:	8b7b      	ldrh	r3, [r7, #26]
 800f510:	461a      	mov	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	fbb3 f3f2 	udiv	r3, r3, r2
 800f518:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f51e:	8b7b      	ldrh	r3, [r7, #26]
 800f520:	461a      	mov	r2, r3
 800f522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f526:	fbb3 f3f2 	udiv	r3, r3, r2
 800f52a:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f52c:	8b7b      	ldrh	r3, [r7, #26]
 800f52e:	461a      	mov	r2, r3
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	fb02 f303 	mul.w	r3, r2, r3
 800f536:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d101      	bne.n	800f542 <f_mkfs+0x156>
 800f53e:	230e      	movs	r3, #14
 800f540:	e39e      	b.n	800fc80 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f542:	f107 0210 	add.w	r2, r7, #16
 800f546:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f54a:	2101      	movs	r1, #1
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fc fead 	bl	800c2ac <disk_ioctl>
 800f552:	4603      	mov	r3, r0
 800f554:	2b00      	cmp	r3, #0
 800f556:	d001      	beq.n	800f55c <f_mkfs+0x170>
 800f558:	2301      	movs	r3, #1
 800f55a:	e391      	b.n	800fc80 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f55c:	7afb      	ldrb	r3, [r7, #11]
 800f55e:	f003 0308 	and.w	r3, r3, #8
 800f562:	2b00      	cmp	r3, #0
 800f564:	d001      	beq.n	800f56a <f_mkfs+0x17e>
 800f566:	2300      	movs	r3, #0
 800f568:	e000      	b.n	800f56c <f_mkfs+0x180>
 800f56a:	233f      	movs	r3, #63	; 0x3f
 800f56c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f572:	429a      	cmp	r2, r3
 800f574:	d901      	bls.n	800f57a <f_mkfs+0x18e>
 800f576:	230e      	movs	r3, #14
 800f578:	e382      	b.n	800fc80 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57e:	1ad3      	subs	r3, r2, r3
 800f580:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	2b7f      	cmp	r3, #127	; 0x7f
 800f586:	d801      	bhi.n	800f58c <f_mkfs+0x1a0>
 800f588:	230e      	movs	r3, #14
 800f58a:	e379      	b.n	800fc80 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b80      	cmp	r3, #128	; 0x80
 800f590:	d901      	bls.n	800f596 <f_mkfs+0x1aa>
 800f592:	2313      	movs	r3, #19
 800f594:	e374      	b.n	800fc80 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f596:	7afb      	ldrb	r3, [r7, #11]
 800f598:	f003 0302 	and.w	r3, r3, #2
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00d      	beq.n	800f5bc <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f5a0:	7afb      	ldrb	r3, [r7, #11]
 800f5a2:	f003 0307 	and.w	r3, r3, #7
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d004      	beq.n	800f5b4 <f_mkfs+0x1c8>
 800f5aa:	7afb      	ldrb	r3, [r7, #11]
 800f5ac:	f003 0301 	and.w	r3, r3, #1
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d103      	bne.n	800f5bc <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 800f5b4:	2303      	movs	r3, #3
 800f5b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f5ba:	e009      	b.n	800f5d0 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f5bc:	7afb      	ldrb	r3, [r7, #11]
 800f5be:	f003 0301 	and.w	r3, r3, #1
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d101      	bne.n	800f5ca <f_mkfs+0x1de>
 800f5c6:	2313      	movs	r3, #19
 800f5c8:	e35a      	b.n	800fc80 <f_mkfs+0x894>
		fmt = FS_FAT16;
 800f5ca:	2302      	movs	r3, #2
 800f5cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f5d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d13c      	bne.n	800f656 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 800f5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d11b      	bne.n	800f61a <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	0c5b      	lsrs	r3, r3, #17
 800f5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5ec:	2301      	movs	r3, #1
 800f5ee:	653b      	str	r3, [r7, #80]	; 0x50
 800f5f0:	e005      	b.n	800f5fe <f_mkfs+0x212>
 800f5f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5fa:	005b      	lsls	r3, r3, #1
 800f5fc:	653b      	str	r3, [r7, #80]	; 0x50
 800f5fe:	4a2e      	ldr	r2, [pc, #184]	; (800f6b8 <f_mkfs+0x2cc>)
 800f600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d007      	beq.n	800f61a <f_mkfs+0x22e>
 800f60a:	4a2b      	ldr	r2, [pc, #172]	; (800f6b8 <f_mkfs+0x2cc>)
 800f60c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f60e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f612:	461a      	mov	r2, r3
 800f614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f616:	4293      	cmp	r3, r2
 800f618:	d2eb      	bcs.n	800f5f2 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f61a:	693a      	ldr	r2, [r7, #16]
 800f61c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f61e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f622:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	3302      	adds	r3, #2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	8b7a      	ldrh	r2, [r7, #26]
 800f62c:	4413      	add	r3, r2
 800f62e:	3b01      	subs	r3, #1
 800f630:	8b7a      	ldrh	r2, [r7, #26]
 800f632:	fbb3 f3f2 	udiv	r3, r3, r2
 800f636:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800f638:	2320      	movs	r3, #32
 800f63a:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800f63c:	2300      	movs	r3, #0
 800f63e:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f642:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f646:	4293      	cmp	r3, r2
 800f648:	d903      	bls.n	800f652 <f_mkfs+0x266>
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	4a1b      	ldr	r2, [pc, #108]	; (800f6bc <f_mkfs+0x2d0>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d954      	bls.n	800f6fc <f_mkfs+0x310>
 800f652:	230e      	movs	r3, #14
 800f654:	e314      	b.n	800fc80 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d11b      	bne.n	800f694 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	0b1b      	lsrs	r3, r3, #12
 800f660:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f662:	2300      	movs	r3, #0
 800f664:	64bb      	str	r3, [r7, #72]	; 0x48
 800f666:	2301      	movs	r3, #1
 800f668:	653b      	str	r3, [r7, #80]	; 0x50
 800f66a:	e005      	b.n	800f678 <f_mkfs+0x28c>
 800f66c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f66e:	3301      	adds	r3, #1
 800f670:	64bb      	str	r3, [r7, #72]	; 0x48
 800f672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	653b      	str	r3, [r7, #80]	; 0x50
 800f678:	4a11      	ldr	r2, [pc, #68]	; (800f6c0 <f_mkfs+0x2d4>)
 800f67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f67c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d007      	beq.n	800f694 <f_mkfs+0x2a8>
 800f684:	4a0e      	ldr	r2, [pc, #56]	; (800f6c0 <f_mkfs+0x2d4>)
 800f686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f68c:	461a      	mov	r2, r3
 800f68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f690:	4293      	cmp	r3, r2
 800f692:	d2eb      	bcs.n	800f66c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f698:	fbb2 f3f3 	udiv	r3, r2, r3
 800f69c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d90d      	bls.n	800f6c4 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6aa:	3302      	adds	r3, #2
 800f6ac:	005b      	lsls	r3, r3, #1
 800f6ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6b0:	e013      	b.n	800f6da <f_mkfs+0x2ee>
 800f6b2:	bf00      	nop
 800f6b4:	20003428 	.word	0x20003428
 800f6b8:	080180f4 	.word	0x080180f4
 800f6bc:	0ffffff5 	.word	0x0ffffff5
 800f6c0:	08018104 	.word	0x08018104
				} else {
					fmt = FS_FAT12;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	005b      	lsls	r3, r3, #1
 800f6d0:	4413      	add	r3, r2
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	085b      	lsrs	r3, r3, #1
 800f6d6:	3303      	adds	r3, #3
 800f6d8:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f6da:	8b7b      	ldrh	r3, [r7, #26]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6e0:	4413      	add	r3, r2
 800f6e2:	3b01      	subs	r3, #1
 800f6e4:	8b7a      	ldrh	r2, [r7, #26]
 800f6e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6ea:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f6f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6f2:	015b      	lsls	r3, r3, #5
 800f6f4:	8b7a      	ldrh	r2, [r7, #26]
 800f6f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6fa:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f6fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f700:	4413      	add	r3, r2
 800f702:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f704:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f708:	fb03 f202 	mul.w	r2, r3, r2
 800f70c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f70e:	4413      	add	r3, r2
 800f710:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f712:	4413      	add	r3, r2
 800f714:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	6a3b      	ldr	r3, [r7, #32]
 800f71a:	4413      	add	r3, r2
 800f71c:	1e5a      	subs	r2, r3, #1
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	425b      	negs	r3, r3
 800f722:	401a      	ands	r2, r3
 800f724:	6a3b      	ldr	r3, [r7, #32]
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f72a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f72e:	2b03      	cmp	r3, #3
 800f730:	d108      	bne.n	800f744 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 800f732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f736:	4413      	add	r3, r2
 800f738:	657b      	str	r3, [r7, #84]	; 0x54
 800f73a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f73c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f73e:	4413      	add	r3, r2
 800f740:	65bb      	str	r3, [r7, #88]	; 0x58
 800f742:	e006      	b.n	800f752 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f744:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f748:	fbb2 f3f3 	udiv	r3, r2, r3
 800f74c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f74e:	4413      	add	r3, r2
 800f750:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f754:	011a      	lsls	r2, r3, #4
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	441a      	add	r2, r3
 800f75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75c:	1ad2      	subs	r2, r2, r3
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	429a      	cmp	r2, r3
 800f762:	d901      	bls.n	800f768 <f_mkfs+0x37c>
 800f764:	230e      	movs	r3, #14
 800f766:	e28b      	b.n	800fc80 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f768:	693a      	ldr	r2, [r7, #16]
 800f76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f76c:	1ad2      	subs	r2, r2, r3
 800f76e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f770:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f772:	fb01 f303 	mul.w	r3, r1, r3
 800f776:	1ad2      	subs	r2, r2, r3
 800f778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f77a:	1ad2      	subs	r2, r2, r3
 800f77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f782:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 800f784:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f788:	2b03      	cmp	r3, #3
 800f78a:	d10f      	bne.n	800f7ac <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f792:	4293      	cmp	r3, r2
 800f794:	d80a      	bhi.n	800f7ac <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d105      	bne.n	800f7a8 <f_mkfs+0x3bc>
 800f79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f79e:	085b      	lsrs	r3, r3, #1
 800f7a0:	607b      	str	r3, [r7, #4]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d144      	bne.n	800f832 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 800f7a8:	230e      	movs	r3, #14
 800f7aa:	e269      	b.n	800fc80 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 800f7ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d133      	bne.n	800f81c <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d91e      	bls.n	800f7fc <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d107      	bne.n	800f7d4 <f_mkfs+0x3e8>
 800f7c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7c6:	005b      	lsls	r3, r3, #1
 800f7c8:	2b40      	cmp	r3, #64	; 0x40
 800f7ca:	d803      	bhi.n	800f7d4 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ce:	005b      	lsls	r3, r3, #1
 800f7d0:	607b      	str	r3, [r7, #4]
 800f7d2:	e033      	b.n	800f83c <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 800f7d4:	7afb      	ldrb	r3, [r7, #11]
 800f7d6:	f003 0302 	and.w	r3, r3, #2
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d003      	beq.n	800f7e6 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f7de:	2303      	movs	r3, #3
 800f7e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f7e4:	e02a      	b.n	800f83c <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d105      	bne.n	800f7f8 <f_mkfs+0x40c>
 800f7ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ee:	005b      	lsls	r3, r3, #1
 800f7f0:	607b      	str	r3, [r7, #4]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b80      	cmp	r3, #128	; 0x80
 800f7f6:	d91e      	bls.n	800f836 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 800f7f8:	230e      	movs	r3, #14
 800f7fa:	e241      	b.n	800fc80 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f802:	4293      	cmp	r3, r2
 800f804:	d80a      	bhi.n	800f81c <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d105      	bne.n	800f818 <f_mkfs+0x42c>
 800f80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f80e:	005b      	lsls	r3, r3, #1
 800f810:	607b      	str	r3, [r7, #4]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2b80      	cmp	r3, #128	; 0x80
 800f816:	d910      	bls.n	800f83a <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 800f818:	230e      	movs	r3, #14
 800f81a:	e231      	b.n	800fc80 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f81c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f820:	2b01      	cmp	r3, #1
 800f822:	d10c      	bne.n	800f83e <f_mkfs+0x452>
 800f824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f826:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d907      	bls.n	800f83e <f_mkfs+0x452>
 800f82e:	230e      	movs	r3, #14
 800f830:	e226      	b.n	800fc80 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f832:	bf00      	nop
 800f834:	e6cc      	b.n	800f5d0 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f836:	bf00      	nop
 800f838:	e6ca      	b.n	800f5d0 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f83a:	bf00      	nop
			pau = au;
 800f83c:	e6c8      	b.n	800f5d0 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 800f83e:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f840:	8b7b      	ldrh	r3, [r7, #26]
 800f842:	461a      	mov	r2, r3
 800f844:	2100      	movs	r1, #0
 800f846:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f848:	f7fc fdf1 	bl	800c42e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f84c:	220b      	movs	r2, #11
 800f84e:	49b3      	ldr	r1, [pc, #716]	; (800fb1c <f_mkfs+0x730>)
 800f850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f852:	f7fc fdcb 	bl	800c3ec <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f858:	330b      	adds	r3, #11
 800f85a:	8b7a      	ldrh	r2, [r7, #26]
 800f85c:	4611      	mov	r1, r2
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fc fd7d 	bl	800c35e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f866:	330d      	adds	r3, #13
 800f868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f86a:	b2d2      	uxtb	r2, r2
 800f86c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f870:	330e      	adds	r3, #14
 800f872:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f874:	b292      	uxth	r2, r2
 800f876:	4611      	mov	r1, r2
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fc fd70 	bl	800c35e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f880:	3310      	adds	r3, #16
 800f882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f884:	b2d2      	uxtb	r2, r2
 800f886:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88a:	f103 0211 	add.w	r2, r3, #17
 800f88e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f892:	2b03      	cmp	r3, #3
 800f894:	d002      	beq.n	800f89c <f_mkfs+0x4b0>
 800f896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f898:	b29b      	uxth	r3, r3
 800f89a:	e000      	b.n	800f89e <f_mkfs+0x4b2>
 800f89c:	2300      	movs	r3, #0
 800f89e:	4619      	mov	r1, r3
 800f8a0:	4610      	mov	r0, r2
 800f8a2:	f7fc fd5c 	bl	800c35e <st_word>
		if (sz_vol < 0x10000) {
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8ac:	d208      	bcs.n	800f8c0 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8b0:	3313      	adds	r3, #19
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	b292      	uxth	r2, r2
 800f8b6:	4611      	mov	r1, r2
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fc fd50 	bl	800c35e <st_word>
 800f8be:	e006      	b.n	800f8ce <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c2:	3320      	adds	r3, #32
 800f8c4:	693a      	ldr	r2, [r7, #16]
 800f8c6:	4611      	mov	r1, r2
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	f7fc fd63 	bl	800c394 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d0:	3315      	adds	r3, #21
 800f8d2:	22f8      	movs	r2, #248	; 0xf8
 800f8d4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8d8:	3318      	adds	r3, #24
 800f8da:	213f      	movs	r1, #63	; 0x3f
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fc fd3e 	bl	800c35e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8e4:	331a      	adds	r3, #26
 800f8e6:	21ff      	movs	r1, #255	; 0xff
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fc fd38 	bl	800c35e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f0:	331c      	adds	r3, #28
 800f8f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7fc fd4d 	bl	800c394 <st_dword>
		if (fmt == FS_FAT32) {
 800f8fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	d131      	bne.n	800f966 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f904:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f908:	f7fc fbf0 	bl	800c0ec <get_fattime>
 800f90c:	4603      	mov	r3, r0
 800f90e:	4619      	mov	r1, r3
 800f910:	4620      	mov	r0, r4
 800f912:	f7fc fd3f 	bl	800c394 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f918:	3324      	adds	r3, #36	; 0x24
 800f91a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7fc fd39 	bl	800c394 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f924:	332c      	adds	r3, #44	; 0x2c
 800f926:	2102      	movs	r1, #2
 800f928:	4618      	mov	r0, r3
 800f92a:	f7fc fd33 	bl	800c394 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f92e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f930:	3330      	adds	r3, #48	; 0x30
 800f932:	2101      	movs	r1, #1
 800f934:	4618      	mov	r0, r3
 800f936:	f7fc fd12 	bl	800c35e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f93c:	3332      	adds	r3, #50	; 0x32
 800f93e:	2106      	movs	r1, #6
 800f940:	4618      	mov	r0, r3
 800f942:	f7fc fd0c 	bl	800c35e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f948:	3340      	adds	r3, #64	; 0x40
 800f94a:	2280      	movs	r2, #128	; 0x80
 800f94c:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f950:	3342      	adds	r3, #66	; 0x42
 800f952:	2229      	movs	r2, #41	; 0x29
 800f954:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f958:	3347      	adds	r3, #71	; 0x47
 800f95a:	2213      	movs	r2, #19
 800f95c:	4970      	ldr	r1, [pc, #448]	; (800fb20 <f_mkfs+0x734>)
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fc fd44 	bl	800c3ec <mem_cpy>
 800f964:	e020      	b.n	800f9a8 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f968:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f96c:	f7fc fbbe 	bl	800c0ec <get_fattime>
 800f970:	4603      	mov	r3, r0
 800f972:	4619      	mov	r1, r3
 800f974:	4620      	mov	r0, r4
 800f976:	f7fc fd0d 	bl	800c394 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f97c:	3316      	adds	r3, #22
 800f97e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f980:	b292      	uxth	r2, r2
 800f982:	4611      	mov	r1, r2
 800f984:	4618      	mov	r0, r3
 800f986:	f7fc fcea 	bl	800c35e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	3324      	adds	r3, #36	; 0x24
 800f98e:	2280      	movs	r2, #128	; 0x80
 800f990:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f994:	3326      	adds	r3, #38	; 0x26
 800f996:	2229      	movs	r2, #41	; 0x29
 800f998:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f99c:	332b      	adds	r3, #43	; 0x2b
 800f99e:	2213      	movs	r2, #19
 800f9a0:	4960      	ldr	r1, [pc, #384]	; (800fb24 <f_mkfs+0x738>)
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f7fc fd22 	bl	800c3ec <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f9ae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fc fcd3 	bl	800c35e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f9b8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f9bc:	2301      	movs	r3, #1
 800f9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9c2:	f7fc fc53 	bl	800c26c <disk_write>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d001      	beq.n	800f9d0 <f_mkfs+0x5e4>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e157      	b.n	800fc80 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f9d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f9d4:	2b03      	cmp	r3, #3
 800f9d6:	d140      	bne.n	800fa5a <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9da:	1d9a      	adds	r2, r3, #6
 800f9dc:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f9e4:	f7fc fc42 	bl	800c26c <disk_write>
			mem_set(buf, 0, ss);
 800f9e8:	8b7b      	ldrh	r3, [r7, #26]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9f0:	f7fc fd1d 	bl	800c42e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f9f4:	494c      	ldr	r1, [pc, #304]	; (800fb28 <f_mkfs+0x73c>)
 800f9f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f9f8:	f7fc fccc 	bl	800c394 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa02:	494a      	ldr	r1, [pc, #296]	; (800fb2c <f_mkfs+0x740>)
 800fa04:	4618      	mov	r0, r3
 800fa06:	f7fc fcc5 	bl	800c394 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800fa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	3b01      	subs	r3, #1
 800fa14:	4619      	mov	r1, r3
 800fa16:	4610      	mov	r0, r2
 800fa18:	f7fc fcbc 	bl	800c394 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800fa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fa22:	2102      	movs	r1, #2
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fc fcb5 	bl	800c394 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800fa2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fc fc92 	bl	800c35e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa3c:	1dda      	adds	r2, r3, #7
 800fa3e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa42:	2301      	movs	r3, #1
 800fa44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa46:	f7fc fc11 	bl	800c26c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	1c5a      	adds	r2, r3, #1
 800fa4e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fa52:	2301      	movs	r3, #1
 800fa54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fa56:	f7fc fc09 	bl	800c26c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800fa5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa60:	f7fc fce5 	bl	800c42e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800fa64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa66:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fa68:	2300      	movs	r3, #0
 800fa6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa6c:	e04b      	b.n	800fb06 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 800fa6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa72:	2b03      	cmp	r3, #3
 800fa74:	d113      	bne.n	800fa9e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800fa76:	f06f 0107 	mvn.w	r1, #7
 800fa7a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fa7c:	f7fc fc8a 	bl	800c394 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800fa80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa82:	3304      	adds	r3, #4
 800fa84:	f04f 31ff 	mov.w	r1, #4294967295
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fc fc83 	bl	800c394 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800fa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa90:	3308      	adds	r3, #8
 800fa92:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fc fc7c 	bl	800c394 <st_dword>
 800fa9c:	e00b      	b.n	800fab6 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800fa9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d101      	bne.n	800faaa <f_mkfs+0x6be>
 800faa6:	4b22      	ldr	r3, [pc, #136]	; (800fb30 <f_mkfs+0x744>)
 800faa8:	e001      	b.n	800faae <f_mkfs+0x6c2>
 800faaa:	f06f 0307 	mvn.w	r3, #7
 800faae:	4619      	mov	r1, r3
 800fab0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fab2:	f7fc fc6f 	bl	800c394 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800fab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fab8:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800faba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fabe:	4293      	cmp	r3, r2
 800fac0:	bf28      	it	cs
 800fac2:	4613      	movcs	r3, r2
 800fac4:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fac6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800faca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800facc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800face:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fad0:	f7fc fbcc 	bl	800c26c <disk_write>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <f_mkfs+0x6f2>
 800fada:	2301      	movs	r3, #1
 800fadc:	e0d0      	b.n	800fc80 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 800fade:	8b7b      	ldrh	r3, [r7, #26]
 800fae0:	461a      	mov	r2, r3
 800fae2:	2100      	movs	r1, #0
 800fae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fae6:	f7fc fca2 	bl	800c42e <mem_set>
				sect += n; nsect -= n;
 800faea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800faec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faee:	4413      	add	r3, r2
 800faf0:	667b      	str	r3, [r7, #100]	; 0x64
 800faf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800faf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faf6:	1ad3      	subs	r3, r2, r3
 800faf8:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800fafa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d1dc      	bne.n	800faba <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800fb00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb02:	3301      	adds	r3, #1
 800fb04:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d3af      	bcc.n	800fa6e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800fb0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb12:	2b03      	cmp	r3, #3
 800fb14:	d10e      	bne.n	800fb34 <f_mkfs+0x748>
 800fb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb18:	e00d      	b.n	800fb36 <f_mkfs+0x74a>
 800fb1a:	bf00      	nop
 800fb1c:	08017ffc 	.word	0x08017ffc
 800fb20:	08018008 	.word	0x08018008
 800fb24:	0801801c 	.word	0x0801801c
 800fb28:	41615252 	.word	0x41615252
 800fb2c:	61417272 	.word	0x61417272
 800fb30:	00fffff8 	.word	0x00fffff8
 800fb34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb36:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800fb38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	bf28      	it	cs
 800fb40:	4613      	movcs	r3, r2
 800fb42:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800fb44:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fb48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb4e:	f7fc fb8d 	bl	800c26c <disk_write>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d001      	beq.n	800fb5c <f_mkfs+0x770>
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e091      	b.n	800fc80 <f_mkfs+0x894>
			sect += n; nsect -= n;
 800fb5c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb60:	4413      	add	r3, r2
 800fb62:	667b      	str	r3, [r7, #100]	; 0x64
 800fb64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800fb6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1e2      	bne.n	800fb38 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800fb72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb76:	2b03      	cmp	r3, #3
 800fb78:	d103      	bne.n	800fb82 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 800fb7a:	230c      	movs	r3, #12
 800fb7c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fb80:	e010      	b.n	800fba4 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 800fb82:	693b      	ldr	r3, [r7, #16]
 800fb84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb88:	d303      	bcc.n	800fb92 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800fb8a:	2306      	movs	r3, #6
 800fb8c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800fb90:	e008      	b.n	800fba4 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800fb92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d101      	bne.n	800fb9e <f_mkfs+0x7b2>
 800fb9a:	2304      	movs	r3, #4
 800fb9c:	e000      	b.n	800fba0 <f_mkfs+0x7b4>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800fba4:	7afb      	ldrb	r3, [r7, #11]
 800fba6:	f003 0308 	and.w	r3, r3, #8
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d15b      	bne.n	800fc66 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 800fbae:	8b7b      	ldrh	r3, [r7, #26]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fbb6:	f7fc fc3a 	bl	800c42e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800fbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbc0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fc fbca 	bl	800c35e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800fbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbcc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fbd0:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	2201      	movs	r2, #1
 800fbde:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800fbe0:	69fb      	ldr	r3, [r7, #28]
 800fbe2:	3302      	adds	r3, #2
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	3303      	adds	r3, #3
 800fbec:	2200      	movs	r2, #0
 800fbee:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	3304      	adds	r3, #4
 800fbf4:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800fbf8:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800fbfa:	693a      	ldr	r2, [r7, #16]
 800fbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfe:	441a      	add	r2, r3
 800fc00:	4b21      	ldr	r3, [pc, #132]	; (800fc88 <f_mkfs+0x89c>)
 800fc02:	fba3 1302 	umull	r1, r3, r3, r2
 800fc06:	1ad2      	subs	r2, r2, r3
 800fc08:	0852      	lsrs	r2, r2, #1
 800fc0a:	4413      	add	r3, r2
 800fc0c:	0b5b      	lsrs	r3, r3, #13
 800fc0e:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	3305      	adds	r3, #5
 800fc14:	22fe      	movs	r2, #254	; 0xfe
 800fc16:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800fc18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc1a:	089b      	lsrs	r3, r3, #2
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	3306      	adds	r3, #6
 800fc22:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800fc26:	b2d2      	uxtb	r2, r2
 800fc28:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	3307      	adds	r3, #7
 800fc2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fc30:	b2d2      	uxtb	r2, r2
 800fc32:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	3308      	adds	r3, #8
 800fc38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fc fbaa 	bl	800c394 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	330c      	adds	r3, #12
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	4611      	mov	r1, r2
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7fc fba3 	bl	800c394 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800fc4e:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fc52:	2301      	movs	r3, #1
 800fc54:	2200      	movs	r2, #0
 800fc56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fc58:	f7fc fb08 	bl	800c26c <disk_write>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d001      	beq.n	800fc66 <f_mkfs+0x87a>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e00c      	b.n	800fc80 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800fc66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fc fb1c 	bl	800c2ac <disk_ioctl>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d001      	beq.n	800fc7e <f_mkfs+0x892>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e000      	b.n	800fc80 <f_mkfs+0x894>

	return FR_OK;
 800fc7e:	2300      	movs	r3, #0
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3774      	adds	r7, #116	; 0x74
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd90      	pop	{r4, r7, pc}
 800fc88:	0515565b 	.word	0x0515565b

0800fc8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b087      	sub	sp, #28
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	60f8      	str	r0, [r7, #12]
 800fc94:	60b9      	str	r1, [r7, #8]
 800fc96:	4613      	mov	r3, r2
 800fc98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fca2:	4b1f      	ldr	r3, [pc, #124]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fca4:	7a5b      	ldrb	r3, [r3, #9]
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d131      	bne.n	800fd10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fcac:	4b1c      	ldr	r3, [pc, #112]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fcae:	7a5b      	ldrb	r3, [r3, #9]
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	4b1a      	ldr	r3, [pc, #104]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fcba:	4b19      	ldr	r3, [pc, #100]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fcbc:	7a5b      	ldrb	r3, [r3, #9]
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	4a17      	ldr	r2, [pc, #92]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	4413      	add	r3, r2
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fcca:	4b15      	ldr	r3, [pc, #84]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fccc:	7a5b      	ldrb	r3, [r3, #9]
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	4b13      	ldr	r3, [pc, #76]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fcd4:	4413      	add	r3, r2
 800fcd6:	79fa      	ldrb	r2, [r7, #7]
 800fcd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fcda:	4b11      	ldr	r3, [pc, #68]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fcdc:	7a5b      	ldrb	r3, [r3, #9]
 800fcde:	b2db      	uxtb	r3, r3
 800fce0:	1c5a      	adds	r2, r3, #1
 800fce2:	b2d1      	uxtb	r1, r2
 800fce4:	4a0e      	ldr	r2, [pc, #56]	; (800fd20 <FATFS_LinkDriverEx+0x94>)
 800fce6:	7251      	strb	r1, [r2, #9]
 800fce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fcea:	7dbb      	ldrb	r3, [r7, #22]
 800fcec:	3330      	adds	r3, #48	; 0x30
 800fcee:	b2da      	uxtb	r2, r3
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	3301      	adds	r3, #1
 800fcf8:	223a      	movs	r2, #58	; 0x3a
 800fcfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	3302      	adds	r3, #2
 800fd00:	222f      	movs	r2, #47	; 0x2f
 800fd02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	3303      	adds	r3, #3
 800fd08:	2200      	movs	r2, #0
 800fd0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	371c      	adds	r7, #28
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr
 800fd1e:	bf00      	nop
 800fd20:	20003650 	.word	0x20003650

0800fd24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fd2e:	2200      	movs	r2, #0
 800fd30:	6839      	ldr	r1, [r7, #0]
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f7ff ffaa 	bl	800fc8c <FATFS_LinkDriverEx>
 800fd38:	4603      	mov	r3, r0
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3708      	adds	r7, #8
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
	...

0800fd44 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	6039      	str	r1, [r7, #0]
 800fd4e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fd50:	88fb      	ldrh	r3, [r7, #6]
 800fd52:	2b7f      	cmp	r3, #127	; 0x7f
 800fd54:	d802      	bhi.n	800fd5c <ff_convert+0x18>
		c = chr;
 800fd56:	88fb      	ldrh	r3, [r7, #6]
 800fd58:	81fb      	strh	r3, [r7, #14]
 800fd5a:	e025      	b.n	800fda8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d00b      	beq.n	800fd7a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fd62:	88fb      	ldrh	r3, [r7, #6]
 800fd64:	2bff      	cmp	r3, #255	; 0xff
 800fd66:	d805      	bhi.n	800fd74 <ff_convert+0x30>
 800fd68:	88fb      	ldrh	r3, [r7, #6]
 800fd6a:	3b80      	subs	r3, #128	; 0x80
 800fd6c:	4a12      	ldr	r2, [pc, #72]	; (800fdb8 <ff_convert+0x74>)
 800fd6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd72:	e000      	b.n	800fd76 <ff_convert+0x32>
 800fd74:	2300      	movs	r3, #0
 800fd76:	81fb      	strh	r3, [r7, #14]
 800fd78:	e016      	b.n	800fda8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	81fb      	strh	r3, [r7, #14]
 800fd7e:	e009      	b.n	800fd94 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800fd80:	89fb      	ldrh	r3, [r7, #14]
 800fd82:	4a0d      	ldr	r2, [pc, #52]	; (800fdb8 <ff_convert+0x74>)
 800fd84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd88:	88fa      	ldrh	r2, [r7, #6]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d006      	beq.n	800fd9c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800fd8e:	89fb      	ldrh	r3, [r7, #14]
 800fd90:	3301      	adds	r3, #1
 800fd92:	81fb      	strh	r3, [r7, #14]
 800fd94:	89fb      	ldrh	r3, [r7, #14]
 800fd96:	2b7f      	cmp	r3, #127	; 0x7f
 800fd98:	d9f2      	bls.n	800fd80 <ff_convert+0x3c>
 800fd9a:	e000      	b.n	800fd9e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800fd9c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800fd9e:	89fb      	ldrh	r3, [r7, #14]
 800fda0:	3380      	adds	r3, #128	; 0x80
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800fda8:	89fb      	ldrh	r3, [r7, #14]
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	08018114 	.word	0x08018114

0800fdbc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b087      	sub	sp, #28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fdc6:	88fb      	ldrh	r3, [r7, #6]
 800fdc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdcc:	d201      	bcs.n	800fdd2 <ff_wtoupper+0x16>
 800fdce:	4b3e      	ldr	r3, [pc, #248]	; (800fec8 <ff_wtoupper+0x10c>)
 800fdd0:	e000      	b.n	800fdd4 <ff_wtoupper+0x18>
 800fdd2:	4b3e      	ldr	r3, [pc, #248]	; (800fecc <ff_wtoupper+0x110>)
 800fdd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	1c9a      	adds	r2, r3, #2
 800fdda:	617a      	str	r2, [r7, #20]
 800fddc:	881b      	ldrh	r3, [r3, #0]
 800fdde:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800fde0:	8a7b      	ldrh	r3, [r7, #18]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d068      	beq.n	800feb8 <ff_wtoupper+0xfc>
 800fde6:	88fa      	ldrh	r2, [r7, #6]
 800fde8:	8a7b      	ldrh	r3, [r7, #18]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d364      	bcc.n	800feb8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	1c9a      	adds	r2, r3, #2
 800fdf2:	617a      	str	r2, [r7, #20]
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	823b      	strh	r3, [r7, #16]
 800fdf8:	8a3b      	ldrh	r3, [r7, #16]
 800fdfa:	0a1b      	lsrs	r3, r3, #8
 800fdfc:	81fb      	strh	r3, [r7, #14]
 800fdfe:	8a3b      	ldrh	r3, [r7, #16]
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800fe04:	88fa      	ldrh	r2, [r7, #6]
 800fe06:	8a79      	ldrh	r1, [r7, #18]
 800fe08:	8a3b      	ldrh	r3, [r7, #16]
 800fe0a:	440b      	add	r3, r1
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	da49      	bge.n	800fea4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800fe10:	89fb      	ldrh	r3, [r7, #14]
 800fe12:	2b08      	cmp	r3, #8
 800fe14:	d84f      	bhi.n	800feb6 <ff_wtoupper+0xfa>
 800fe16:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <ff_wtoupper+0x60>)
 800fe18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1c:	0800fe41 	.word	0x0800fe41
 800fe20:	0800fe53 	.word	0x0800fe53
 800fe24:	0800fe69 	.word	0x0800fe69
 800fe28:	0800fe71 	.word	0x0800fe71
 800fe2c:	0800fe79 	.word	0x0800fe79
 800fe30:	0800fe81 	.word	0x0800fe81
 800fe34:	0800fe89 	.word	0x0800fe89
 800fe38:	0800fe91 	.word	0x0800fe91
 800fe3c:	0800fe99 	.word	0x0800fe99
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fe40:	88fa      	ldrh	r2, [r7, #6]
 800fe42:	8a7b      	ldrh	r3, [r7, #18]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	005b      	lsls	r3, r3, #1
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	4413      	add	r3, r2
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	80fb      	strh	r3, [r7, #6]
 800fe50:	e027      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fe52:	88fa      	ldrh	r2, [r7, #6]
 800fe54:	8a7b      	ldrh	r3, [r7, #18]
 800fe56:	1ad3      	subs	r3, r2, r3
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	88fa      	ldrh	r2, [r7, #6]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	80fb      	strh	r3, [r7, #6]
 800fe66:	e01c      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800fe68:	88fb      	ldrh	r3, [r7, #6]
 800fe6a:	3b10      	subs	r3, #16
 800fe6c:	80fb      	strh	r3, [r7, #6]
 800fe6e:	e018      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fe70:	88fb      	ldrh	r3, [r7, #6]
 800fe72:	3b20      	subs	r3, #32
 800fe74:	80fb      	strh	r3, [r7, #6]
 800fe76:	e014      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fe78:	88fb      	ldrh	r3, [r7, #6]
 800fe7a:	3b30      	subs	r3, #48	; 0x30
 800fe7c:	80fb      	strh	r3, [r7, #6]
 800fe7e:	e010      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fe80:	88fb      	ldrh	r3, [r7, #6]
 800fe82:	3b1a      	subs	r3, #26
 800fe84:	80fb      	strh	r3, [r7, #6]
 800fe86:	e00c      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800fe88:	88fb      	ldrh	r3, [r7, #6]
 800fe8a:	3308      	adds	r3, #8
 800fe8c:	80fb      	strh	r3, [r7, #6]
 800fe8e:	e008      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800fe90:	88fb      	ldrh	r3, [r7, #6]
 800fe92:	3b50      	subs	r3, #80	; 0x50
 800fe94:	80fb      	strh	r3, [r7, #6]
 800fe96:	e004      	b.n	800fea2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fe98:	88fb      	ldrh	r3, [r7, #6]
 800fe9a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800fe9e:	80fb      	strh	r3, [r7, #6]
 800fea0:	bf00      	nop
			}
			break;
 800fea2:	e008      	b.n	800feb6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800fea4:	89fb      	ldrh	r3, [r7, #14]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d195      	bne.n	800fdd6 <ff_wtoupper+0x1a>
 800feaa:	8a3b      	ldrh	r3, [r7, #16]
 800feac:	005b      	lsls	r3, r3, #1
 800feae:	697a      	ldr	r2, [r7, #20]
 800feb0:	4413      	add	r3, r2
 800feb2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800feb4:	e78f      	b.n	800fdd6 <ff_wtoupper+0x1a>
			break;
 800feb6:	bf00      	nop
	}

	return chr;
 800feb8:	88fb      	ldrh	r3, [r7, #6]
}
 800feba:	4618      	mov	r0, r3
 800febc:	371c      	adds	r7, #28
 800febe:	46bd      	mov	sp, r7
 800fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec4:	4770      	bx	lr
 800fec6:	bf00      	nop
 800fec8:	08018214 	.word	0x08018214
 800fecc:	08018408 	.word	0x08018408

0800fed0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b086      	sub	sp, #24
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4603      	mov	r3, r0
 800fed8:	6039      	str	r1, [r7, #0]
 800feda:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800fedc:	2300      	movs	r3, #0
 800fede:	60fb      	str	r3, [r7, #12]
 800fee0:	2300      	movs	r3, #0
 800fee2:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800fee4:	f107 030c 	add.w	r3, r7, #12
 800fee8:	2101      	movs	r1, #1
 800feea:	4618      	mov	r0, r3
 800feec:	f000 f8c6 	bl	801007c <osSemaphoreCreate>
 800fef0:	4602      	mov	r2, r0
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	bf14      	ite	ne
 800fefe:	2301      	movne	r3, #1
 800ff00:	2300      	moveq	r3, #0
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	617b      	str	r3, [r7, #20]

    return ret;
 800ff06:	697b      	ldr	r3, [r7, #20]
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	3718      	adds	r7, #24
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	bd80      	pop	{r7, pc}

0800ff10 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800ff18:	6878      	ldr	r0, [r7, #4]
 800ff1a:	f000 f965 	bl	80101e8 <osSemaphoreDelete>
#endif
    return 1;
 800ff1e:	2301      	movs	r3, #1
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800ff30:	2300      	movs	r3, #0
 800ff32:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800ff34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f000 f8d1 	bl	80100e0 <osSemaphoreWait>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d101      	bne.n	800ff48 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800ff44:	2301      	movs	r3, #1
 800ff46:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ff48:	68fb      	ldr	r3, [r7, #12]
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}

0800ff52 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800ff52:	b580      	push	{r7, lr}
 800ff54:	b082      	sub	sp, #8
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 f90e 	bl	801017c <osSemaphoreRelease>
#endif
}
 800ff60:	bf00      	nop
 800ff62:	3708      	adds	r7, #8
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}

0800ff68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b085      	sub	sp, #20
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ff72:	2300      	movs	r3, #0
 800ff74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ff76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff7a:	2b84      	cmp	r3, #132	; 0x84
 800ff7c:	d005      	beq.n	800ff8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ff7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	4413      	add	r3, r2
 800ff86:	3303      	adds	r3, #3
 800ff88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3714      	adds	r7, #20
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff9e:	f3ef 8305 	mrs	r3, IPSR
 800ffa2:	607b      	str	r3, [r7, #4]
  return(result);
 800ffa4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	bf14      	ite	ne
 800ffaa:	2301      	movne	r3, #1
 800ffac:	2300      	moveq	r3, #0
 800ffae:	b2db      	uxtb	r3, r3
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ffbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffbe:	b089      	sub	sp, #36	; 0x24
 800ffc0:	af04      	add	r7, sp, #16
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	695b      	ldr	r3, [r3, #20]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d020      	beq.n	8010010 <osThreadCreate+0x54>
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	699b      	ldr	r3, [r3, #24]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d01c      	beq.n	8010010 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685c      	ldr	r4, [r3, #4]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	691e      	ldr	r6, [r3, #16]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7ff ffbd 	bl	800ff68 <makeFreeRtosPriority>
 800ffee:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	695b      	ldr	r3, [r3, #20]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fff8:	9202      	str	r2, [sp, #8]
 800fffa:	9301      	str	r3, [sp, #4]
 800fffc:	9100      	str	r1, [sp, #0]
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	4632      	mov	r2, r6
 8010002:	4629      	mov	r1, r5
 8010004:	4620      	mov	r0, r4
 8010006:	f000 ff7f 	bl	8010f08 <xTaskCreateStatic>
 801000a:	4603      	mov	r3, r0
 801000c:	60fb      	str	r3, [r7, #12]
 801000e:	e01c      	b.n	801004a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	685c      	ldr	r4, [r3, #4]
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801001c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010024:	4618      	mov	r0, r3
 8010026:	f7ff ff9f 	bl	800ff68 <makeFreeRtosPriority>
 801002a:	4602      	mov	r2, r0
 801002c:	f107 030c 	add.w	r3, r7, #12
 8010030:	9301      	str	r3, [sp, #4]
 8010032:	9200      	str	r2, [sp, #0]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	4632      	mov	r2, r6
 8010038:	4629      	mov	r1, r5
 801003a:	4620      	mov	r0, r4
 801003c:	f000 ffc1 	bl	8010fc2 <xTaskCreate>
 8010040:	4603      	mov	r3, r0
 8010042:	2b01      	cmp	r3, #1
 8010044:	d001      	beq.n	801004a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010046:	2300      	movs	r3, #0
 8010048:	e000      	b.n	801004c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801004a:	68fb      	ldr	r3, [r7, #12]
}
 801004c:	4618      	mov	r0, r3
 801004e:	3714      	adds	r7, #20
 8010050:	46bd      	mov	sp, r7
 8010052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010054 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d001      	beq.n	801006a <osDelay+0x16>
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	e000      	b.n	801006c <osDelay+0x18>
 801006a:	2301      	movs	r3, #1
 801006c:	4618      	mov	r0, r3
 801006e:	f001 f8df 	bl	8011230 <vTaskDelay>
  
  return osOK;
 8010072:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af02      	add	r7, sp, #8
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d00f      	beq.n	80100ae <osSemaphoreCreate+0x32>
    if (count == 1) {
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d10a      	bne.n	80100aa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	2203      	movs	r2, #3
 801009a:	9200      	str	r2, [sp, #0]
 801009c:	2200      	movs	r2, #0
 801009e:	2100      	movs	r1, #0
 80100a0:	2001      	movs	r0, #1
 80100a2:	f000 f9d1 	bl	8010448 <xQueueGenericCreateStatic>
 80100a6:	4603      	mov	r3, r0
 80100a8:	e016      	b.n	80100d8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80100aa:	2300      	movs	r3, #0
 80100ac:	e014      	b.n	80100d8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	2b01      	cmp	r3, #1
 80100b2:	d110      	bne.n	80100d6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80100b4:	2203      	movs	r2, #3
 80100b6:	2100      	movs	r1, #0
 80100b8:	2001      	movs	r0, #1
 80100ba:	f000 fa3d 	bl	8010538 <xQueueGenericCreate>
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <osSemaphoreCreate+0x56>
 80100c6:	2300      	movs	r3, #0
 80100c8:	2200      	movs	r2, #0
 80100ca:	2100      	movs	r1, #0
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f000 fa8d 	bl	80105ec <xQueueGenericSend>
      return sema;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	e000      	b.n	80100d8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80100d6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3710      	adds	r7, #16
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
 80100e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80100ea:	2300      	movs	r3, #0
 80100ec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d101      	bne.n	80100f8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80100f4:	2380      	movs	r3, #128	; 0x80
 80100f6:	e03a      	b.n	801016e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80100f8:	2300      	movs	r3, #0
 80100fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010102:	d103      	bne.n	801010c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010104:	f04f 33ff 	mov.w	r3, #4294967295
 8010108:	60fb      	str	r3, [r7, #12]
 801010a:	e009      	b.n	8010120 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d006      	beq.n	8010120 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d101      	bne.n	8010120 <osSemaphoreWait+0x40>
      ticks = 1;
 801011c:	2301      	movs	r3, #1
 801011e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010120:	f7ff ff3a 	bl	800ff98 <inHandlerMode>
 8010124:	4603      	mov	r3, r0
 8010126:	2b00      	cmp	r3, #0
 8010128:	d017      	beq.n	801015a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801012a:	f107 0308 	add.w	r3, r7, #8
 801012e:	461a      	mov	r2, r3
 8010130:	2100      	movs	r1, #0
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 fcf2 	bl	8010b1c <xQueueReceiveFromISR>
 8010138:	4603      	mov	r3, r0
 801013a:	2b01      	cmp	r3, #1
 801013c:	d001      	beq.n	8010142 <osSemaphoreWait+0x62>
      return osErrorOS;
 801013e:	23ff      	movs	r3, #255	; 0xff
 8010140:	e015      	b.n	801016e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d011      	beq.n	801016c <osSemaphoreWait+0x8c>
 8010148:	4b0b      	ldr	r3, [pc, #44]	; (8010178 <osSemaphoreWait+0x98>)
 801014a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	f3bf 8f4f 	dsb	sy
 8010154:	f3bf 8f6f 	isb	sy
 8010158:	e008      	b.n	801016c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801015a:	68f9      	ldr	r1, [r7, #12]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fbd1 	bl	8010904 <xQueueSemaphoreTake>
 8010162:	4603      	mov	r3, r0
 8010164:	2b01      	cmp	r3, #1
 8010166:	d001      	beq.n	801016c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010168:	23ff      	movs	r3, #255	; 0xff
 801016a:	e000      	b.n	801016e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801016c:	2300      	movs	r3, #0
}
 801016e:	4618      	mov	r0, r3
 8010170:	3710      	adds	r7, #16
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}
 8010176:	bf00      	nop
 8010178:	e000ed04 	.word	0xe000ed04

0801017c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010184:	2300      	movs	r3, #0
 8010186:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010188:	2300      	movs	r3, #0
 801018a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801018c:	f7ff ff04 	bl	800ff98 <inHandlerMode>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d016      	beq.n	80101c4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010196:	f107 0308 	add.w	r3, r7, #8
 801019a:	4619      	mov	r1, r3
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fb23 	bl	80107e8 <xQueueGiveFromISR>
 80101a2:	4603      	mov	r3, r0
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	d001      	beq.n	80101ac <osSemaphoreRelease+0x30>
      return osErrorOS;
 80101a8:	23ff      	movs	r3, #255	; 0xff
 80101aa:	e017      	b.n	80101dc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d013      	beq.n	80101da <osSemaphoreRelease+0x5e>
 80101b2:	4b0c      	ldr	r3, [pc, #48]	; (80101e4 <osSemaphoreRelease+0x68>)
 80101b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	f3bf 8f4f 	dsb	sy
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	e00a      	b.n	80101da <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80101c4:	2300      	movs	r3, #0
 80101c6:	2200      	movs	r2, #0
 80101c8:	2100      	movs	r1, #0
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 fa0e 	bl	80105ec <xQueueGenericSend>
 80101d0:	4603      	mov	r3, r0
 80101d2:	2b01      	cmp	r3, #1
 80101d4:	d001      	beq.n	80101da <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80101d6:	23ff      	movs	r3, #255	; 0xff
 80101d8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80101da:	68fb      	ldr	r3, [r7, #12]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	e000ed04 	.word	0xe000ed04

080101e8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80101f0:	f7ff fed2 	bl	800ff98 <inHandlerMode>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <osSemaphoreDelete+0x16>
    return osErrorISR;
 80101fa:	2382      	movs	r3, #130	; 0x82
 80101fc:	e003      	b.n	8010206 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 fd0c 	bl	8010c1c <vQueueDelete>

  return osOK; 
 8010204:	2300      	movs	r3, #0
}
 8010206:	4618      	mov	r0, r3
 8010208:	3708      	adds	r7, #8
 801020a:	46bd      	mov	sp, r7
 801020c:	bd80      	pop	{r7, pc}

0801020e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801020e:	b480      	push	{r7}
 8010210:	b083      	sub	sp, #12
 8010212:	af00      	add	r7, sp, #0
 8010214:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f103 0208 	add.w	r2, r3, #8
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f04f 32ff 	mov.w	r2, #4294967295
 8010226:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f103 0208 	add.w	r2, r3, #8
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f103 0208 	add.w	r2, r3, #8
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010242:	bf00      	nop
 8010244:	370c      	adds	r7, #12
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801024e:	b480      	push	{r7}
 8010250:	b083      	sub	sp, #12
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801025c:	bf00      	nop
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010268:	b480      	push	{r7}
 801026a:	b085      	sub	sp, #20
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	68fa      	ldr	r2, [r7, #12]
 801027c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	689a      	ldr	r2, [r3, #8]
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	689b      	ldr	r3, [r3, #8]
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	1c5a      	adds	r2, r3, #1
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	601a      	str	r2, [r3, #0]
}
 80102a4:	bf00      	nop
 80102a6:	3714      	adds	r7, #20
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80102b0:	b480      	push	{r7}
 80102b2:	b085      	sub	sp, #20
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c6:	d103      	bne.n	80102d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	691b      	ldr	r3, [r3, #16]
 80102cc:	60fb      	str	r3, [r7, #12]
 80102ce:	e00c      	b.n	80102ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	3308      	adds	r3, #8
 80102d4:	60fb      	str	r3, [r7, #12]
 80102d6:	e002      	b.n	80102de <vListInsert+0x2e>
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	60fb      	str	r3, [r7, #12]
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	685b      	ldr	r3, [r3, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d2f6      	bcs.n	80102d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	685a      	ldr	r2, [r3, #4]
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	683a      	ldr	r2, [r7, #0]
 80102f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	683a      	ldr	r2, [r7, #0]
 8010304:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	1c5a      	adds	r2, r3, #1
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	601a      	str	r2, [r3, #0]
}
 8010316:	bf00      	nop
 8010318:	3714      	adds	r7, #20
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010322:	b480      	push	{r7}
 8010324:	b085      	sub	sp, #20
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	691b      	ldr	r3, [r3, #16]
 801032e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	687a      	ldr	r2, [r7, #4]
 8010336:	6892      	ldr	r2, [r2, #8]
 8010338:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	6852      	ldr	r2, [r2, #4]
 8010342:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	429a      	cmp	r2, r3
 801034c:	d103      	bne.n	8010356 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	689a      	ldr	r2, [r3, #8]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	1e5a      	subs	r2, r3, #1
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	681b      	ldr	r3, [r3, #0]
}
 801036a:	4618      	mov	r0, r3
 801036c:	3714      	adds	r7, #20
 801036e:	46bd      	mov	sp, r7
 8010370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010374:	4770      	bx	lr
	...

08010378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10a      	bne.n	80103a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801039e:	bf00      	nop
 80103a0:	e7fe      	b.n	80103a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80103a2:	f001 fec7 	bl	8012134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ae:	68f9      	ldr	r1, [r7, #12]
 80103b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103b2:	fb01 f303 	mul.w	r3, r1, r3
 80103b6:	441a      	add	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2200      	movs	r2, #0
 80103c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103d2:	3b01      	subs	r3, #1
 80103d4:	68f9      	ldr	r1, [r7, #12]
 80103d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103d8:	fb01 f303 	mul.w	r3, r1, r3
 80103dc:	441a      	add	r2, r3
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	22ff      	movs	r2, #255	; 0xff
 80103e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	22ff      	movs	r2, #255	; 0xff
 80103ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d114      	bne.n	8010422 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d01a      	beq.n	8010436 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3310      	adds	r3, #16
 8010404:	4618      	mov	r0, r3
 8010406:	f001 f989 	bl	801171c <xTaskRemoveFromEventList>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d012      	beq.n	8010436 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010410:	4b0c      	ldr	r3, [pc, #48]	; (8010444 <xQueueGenericReset+0xcc>)
 8010412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	e009      	b.n	8010436 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	3310      	adds	r3, #16
 8010426:	4618      	mov	r0, r3
 8010428:	f7ff fef1 	bl	801020e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	3324      	adds	r3, #36	; 0x24
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff feec 	bl	801020e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010436:	f001 fead 	bl	8012194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801043a:	2301      	movs	r3, #1
}
 801043c:	4618      	mov	r0, r3
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	e000ed04 	.word	0xe000ed04

08010448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010448:	b580      	push	{r7, lr}
 801044a:	b08e      	sub	sp, #56	; 0x38
 801044c:	af02      	add	r7, sp, #8
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10a      	bne.n	8010472 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801046e:	bf00      	nop
 8010470:	e7fe      	b.n	8010470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10a      	bne.n	801048e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047c:	f383 8811 	msr	BASEPRI, r3
 8010480:	f3bf 8f6f 	isb	sy
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	627b      	str	r3, [r7, #36]	; 0x24
}
 801048a:	bf00      	nop
 801048c:	e7fe      	b.n	801048c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <xQueueGenericCreateStatic+0x52>
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <xQueueGenericCreateStatic+0x56>
 801049a:	2301      	movs	r3, #1
 801049c:	e000      	b.n	80104a0 <xQueueGenericCreateStatic+0x58>
 801049e:	2300      	movs	r3, #0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10a      	bne.n	80104ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80104a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a8:	f383 8811 	msr	BASEPRI, r3
 80104ac:	f3bf 8f6f 	isb	sy
 80104b0:	f3bf 8f4f 	dsb	sy
 80104b4:	623b      	str	r3, [r7, #32]
}
 80104b6:	bf00      	nop
 80104b8:	e7fe      	b.n	80104b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d102      	bne.n	80104c6 <xQueueGenericCreateStatic+0x7e>
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d101      	bne.n	80104ca <xQueueGenericCreateStatic+0x82>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e000      	b.n	80104cc <xQueueGenericCreateStatic+0x84>
 80104ca:	2300      	movs	r3, #0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10a      	bne.n	80104e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80104d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d4:	f383 8811 	msr	BASEPRI, r3
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	61fb      	str	r3, [r7, #28]
}
 80104e2:	bf00      	nop
 80104e4:	e7fe      	b.n	80104e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80104e6:	2348      	movs	r3, #72	; 0x48
 80104e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b48      	cmp	r3, #72	; 0x48
 80104ee:	d00a      	beq.n	8010506 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80104f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f4:	f383 8811 	msr	BASEPRI, r3
 80104f8:	f3bf 8f6f 	isb	sy
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	61bb      	str	r3, [r7, #24]
}
 8010502:	bf00      	nop
 8010504:	e7fe      	b.n	8010504 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010506:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00d      	beq.n	801052e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	2201      	movs	r2, #1
 8010516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801051a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	4613      	mov	r3, r2
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	68b9      	ldr	r1, [r7, #8]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 f83f 	bl	80105ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010530:	4618      	mov	r0, r3
 8010532:	3730      	adds	r7, #48	; 0x30
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08a      	sub	sp, #40	; 0x28
 801053c:	af02      	add	r7, sp, #8
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	4613      	mov	r3, r2
 8010544:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10a      	bne.n	8010562 <xQueueGenericCreate+0x2a>
	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010550:	f383 8811 	msr	BASEPRI, r3
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	613b      	str	r3, [r7, #16]
}
 801055e:	bf00      	nop
 8010560:	e7fe      	b.n	8010560 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	68ba      	ldr	r2, [r7, #8]
 8010566:	fb02 f303 	mul.w	r3, r2, r3
 801056a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	3348      	adds	r3, #72	; 0x48
 8010570:	4618      	mov	r0, r3
 8010572:	f001 ff01 	bl	8012378 <pvPortMalloc>
 8010576:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d011      	beq.n	80105a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	3348      	adds	r3, #72	; 0x48
 8010586:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	2200      	movs	r2, #0
 801058c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010590:	79fa      	ldrb	r2, [r7, #7]
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	4613      	mov	r3, r2
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	68b9      	ldr	r1, [r7, #8]
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f000 f805 	bl	80105ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80105a2:	69bb      	ldr	r3, [r7, #24]
	}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3720      	adds	r7, #32
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
 80105b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d103      	bne.n	80105c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	69ba      	ldr	r2, [r7, #24]
 80105c4:	601a      	str	r2, [r3, #0]
 80105c6:	e002      	b.n	80105ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	68ba      	ldr	r2, [r7, #8]
 80105d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80105da:	2101      	movs	r1, #1
 80105dc:	69b8      	ldr	r0, [r7, #24]
 80105de:	f7ff fecb 	bl	8010378 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80105e2:	bf00      	nop
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
	...

080105ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08e      	sub	sp, #56	; 0x38
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80105fa:	2300      	movs	r3, #0
 80105fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	2b00      	cmp	r3, #0
 8010606:	d10a      	bne.n	801061e <xQueueGenericSend+0x32>
	__asm volatile
 8010608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060c:	f383 8811 	msr	BASEPRI, r3
 8010610:	f3bf 8f6f 	isb	sy
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801061a:	bf00      	nop
 801061c:	e7fe      	b.n	801061c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d103      	bne.n	801062c <xQueueGenericSend+0x40>
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010628:	2b00      	cmp	r3, #0
 801062a:	d101      	bne.n	8010630 <xQueueGenericSend+0x44>
 801062c:	2301      	movs	r3, #1
 801062e:	e000      	b.n	8010632 <xQueueGenericSend+0x46>
 8010630:	2300      	movs	r3, #0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d10a      	bne.n	801064c <xQueueGenericSend+0x60>
	__asm volatile
 8010636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063a:	f383 8811 	msr	BASEPRI, r3
 801063e:	f3bf 8f6f 	isb	sy
 8010642:	f3bf 8f4f 	dsb	sy
 8010646:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010648:	bf00      	nop
 801064a:	e7fe      	b.n	801064a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b02      	cmp	r3, #2
 8010650:	d103      	bne.n	801065a <xQueueGenericSend+0x6e>
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010656:	2b01      	cmp	r3, #1
 8010658:	d101      	bne.n	801065e <xQueueGenericSend+0x72>
 801065a:	2301      	movs	r3, #1
 801065c:	e000      	b.n	8010660 <xQueueGenericSend+0x74>
 801065e:	2300      	movs	r3, #0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d10a      	bne.n	801067a <xQueueGenericSend+0x8e>
	__asm volatile
 8010664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010668:	f383 8811 	msr	BASEPRI, r3
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	623b      	str	r3, [r7, #32]
}
 8010676:	bf00      	nop
 8010678:	e7fe      	b.n	8010678 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801067a:	f001 fa0b 	bl	8011a94 <xTaskGetSchedulerState>
 801067e:	4603      	mov	r3, r0
 8010680:	2b00      	cmp	r3, #0
 8010682:	d102      	bne.n	801068a <xQueueGenericSend+0x9e>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d101      	bne.n	801068e <xQueueGenericSend+0xa2>
 801068a:	2301      	movs	r3, #1
 801068c:	e000      	b.n	8010690 <xQueueGenericSend+0xa4>
 801068e:	2300      	movs	r3, #0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10a      	bne.n	80106aa <xQueueGenericSend+0xbe>
	__asm volatile
 8010694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010698:	f383 8811 	msr	BASEPRI, r3
 801069c:	f3bf 8f6f 	isb	sy
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	61fb      	str	r3, [r7, #28]
}
 80106a6:	bf00      	nop
 80106a8:	e7fe      	b.n	80106a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80106aa:	f001 fd43 	bl	8012134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80106ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80106b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d302      	bcc.n	80106c0 <xQueueGenericSend+0xd4>
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	2b02      	cmp	r3, #2
 80106be:	d129      	bne.n	8010714 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	68b9      	ldr	r1, [r7, #8]
 80106c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106c6:	f000 fae4 	bl	8010c92 <prvCopyDataToQueue>
 80106ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d010      	beq.n	80106f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d6:	3324      	adds	r3, #36	; 0x24
 80106d8:	4618      	mov	r0, r3
 80106da:	f001 f81f 	bl	801171c <xTaskRemoveFromEventList>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d013      	beq.n	801070c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80106e4:	4b3f      	ldr	r3, [pc, #252]	; (80107e4 <xQueueGenericSend+0x1f8>)
 80106e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106ea:	601a      	str	r2, [r3, #0]
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	f3bf 8f6f 	isb	sy
 80106f4:	e00a      	b.n	801070c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80106f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d007      	beq.n	801070c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80106fc:	4b39      	ldr	r3, [pc, #228]	; (80107e4 <xQueueGenericSend+0x1f8>)
 80106fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010702:	601a      	str	r2, [r3, #0]
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801070c:	f001 fd42 	bl	8012194 <vPortExitCritical>
				return pdPASS;
 8010710:	2301      	movs	r3, #1
 8010712:	e063      	b.n	80107dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d103      	bne.n	8010722 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801071a:	f001 fd3b 	bl	8012194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801071e:	2300      	movs	r3, #0
 8010720:	e05c      	b.n	80107dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010724:	2b00      	cmp	r3, #0
 8010726:	d106      	bne.n	8010736 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010728:	f107 0314 	add.w	r3, r7, #20
 801072c:	4618      	mov	r0, r3
 801072e:	f001 f857 	bl	80117e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010732:	2301      	movs	r3, #1
 8010734:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010736:	f001 fd2d 	bl	8012194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801073a:	f000 fe0d 	bl	8011358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801073e:	f001 fcf9 	bl	8012134 <vPortEnterCritical>
 8010742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010748:	b25b      	sxtb	r3, r3
 801074a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801074e:	d103      	bne.n	8010758 <xQueueGenericSend+0x16c>
 8010750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010752:	2200      	movs	r2, #0
 8010754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801075e:	b25b      	sxtb	r3, r3
 8010760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010764:	d103      	bne.n	801076e <xQueueGenericSend+0x182>
 8010766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010768:	2200      	movs	r2, #0
 801076a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801076e:	f001 fd11 	bl	8012194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010772:	1d3a      	adds	r2, r7, #4
 8010774:	f107 0314 	add.w	r3, r7, #20
 8010778:	4611      	mov	r1, r2
 801077a:	4618      	mov	r0, r3
 801077c:	f001 f846 	bl	801180c <xTaskCheckForTimeOut>
 8010780:	4603      	mov	r3, r0
 8010782:	2b00      	cmp	r3, #0
 8010784:	d124      	bne.n	80107d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010788:	f000 fb7b 	bl	8010e82 <prvIsQueueFull>
 801078c:	4603      	mov	r3, r0
 801078e:	2b00      	cmp	r3, #0
 8010790:	d018      	beq.n	80107c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010794:	3310      	adds	r3, #16
 8010796:	687a      	ldr	r2, [r7, #4]
 8010798:	4611      	mov	r1, r2
 801079a:	4618      	mov	r0, r3
 801079c:	f000 ff9a 	bl	80116d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80107a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107a2:	f000 fb06 	bl	8010db2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80107a6:	f000 fde5 	bl	8011374 <xTaskResumeAll>
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f47f af7c 	bne.w	80106aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80107b2:	4b0c      	ldr	r3, [pc, #48]	; (80107e4 <xQueueGenericSend+0x1f8>)
 80107b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	f3bf 8f6f 	isb	sy
 80107c2:	e772      	b.n	80106aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80107c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107c6:	f000 faf4 	bl	8010db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107ca:	f000 fdd3 	bl	8011374 <xTaskResumeAll>
 80107ce:	e76c      	b.n	80106aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80107d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107d2:	f000 faee 	bl	8010db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107d6:	f000 fdcd 	bl	8011374 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80107da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3738      	adds	r7, #56	; 0x38
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	e000ed04 	.word	0xe000ed04

080107e8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b08e      	sub	sp, #56	; 0x38
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80107f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d10a      	bne.n	8010812 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80107fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010800:	f383 8811 	msr	BASEPRI, r3
 8010804:	f3bf 8f6f 	isb	sy
 8010808:	f3bf 8f4f 	dsb	sy
 801080c:	623b      	str	r3, [r7, #32]
}
 801080e:	bf00      	nop
 8010810:	e7fe      	b.n	8010810 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00a      	beq.n	8010830 <xQueueGiveFromISR+0x48>
	__asm volatile
 801081a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081e:	f383 8811 	msr	BASEPRI, r3
 8010822:	f3bf 8f6f 	isb	sy
 8010826:	f3bf 8f4f 	dsb	sy
 801082a:	61fb      	str	r3, [r7, #28]
}
 801082c:	bf00      	nop
 801082e:	e7fe      	b.n	801082e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <xQueueGiveFromISR+0x58>
 8010838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083a:	689b      	ldr	r3, [r3, #8]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d101      	bne.n	8010844 <xQueueGiveFromISR+0x5c>
 8010840:	2301      	movs	r3, #1
 8010842:	e000      	b.n	8010846 <xQueueGiveFromISR+0x5e>
 8010844:	2300      	movs	r3, #0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d10a      	bne.n	8010860 <xQueueGiveFromISR+0x78>
	__asm volatile
 801084a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801084e:	f383 8811 	msr	BASEPRI, r3
 8010852:	f3bf 8f6f 	isb	sy
 8010856:	f3bf 8f4f 	dsb	sy
 801085a:	61bb      	str	r3, [r7, #24]
}
 801085c:	bf00      	nop
 801085e:	e7fe      	b.n	801085e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010860:	f001 fd4a 	bl	80122f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010864:	f3ef 8211 	mrs	r2, BASEPRI
 8010868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	617a      	str	r2, [r7, #20]
 801087a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801087c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801087e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010884:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801088a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801088c:	429a      	cmp	r2, r3
 801088e:	d22b      	bcs.n	80108e8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010892:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801089c:	1c5a      	adds	r2, r3, #1
 801089e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80108a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80108a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108aa:	d112      	bne.n	80108d2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80108ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d016      	beq.n	80108e2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80108b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b6:	3324      	adds	r3, #36	; 0x24
 80108b8:	4618      	mov	r0, r3
 80108ba:	f000 ff2f 	bl	801171c <xTaskRemoveFromEventList>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d00e      	beq.n	80108e2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d00b      	beq.n	80108e2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	2201      	movs	r2, #1
 80108ce:	601a      	str	r2, [r3, #0]
 80108d0:	e007      	b.n	80108e2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80108d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108d6:	3301      	adds	r3, #1
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	b25a      	sxtb	r2, r3
 80108dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80108e2:	2301      	movs	r3, #1
 80108e4:	637b      	str	r3, [r7, #52]	; 0x34
 80108e6:	e001      	b.n	80108ec <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80108e8:	2300      	movs	r3, #0
 80108ea:	637b      	str	r3, [r7, #52]	; 0x34
 80108ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80108f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80108f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3738      	adds	r7, #56	; 0x38
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
	...

08010904 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b08e      	sub	sp, #56	; 0x38
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801090e:	2300      	movs	r3, #0
 8010910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010916:	2300      	movs	r3, #0
 8010918:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801091a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091c:	2b00      	cmp	r3, #0
 801091e:	d10a      	bne.n	8010936 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	623b      	str	r3, [r7, #32]
}
 8010932:	bf00      	nop
 8010934:	e7fe      	b.n	8010934 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801093a:	2b00      	cmp	r3, #0
 801093c:	d00a      	beq.n	8010954 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	61fb      	str	r3, [r7, #28]
}
 8010950:	bf00      	nop
 8010952:	e7fe      	b.n	8010952 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010954:	f001 f89e 	bl	8011a94 <xTaskGetSchedulerState>
 8010958:	4603      	mov	r3, r0
 801095a:	2b00      	cmp	r3, #0
 801095c:	d102      	bne.n	8010964 <xQueueSemaphoreTake+0x60>
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d101      	bne.n	8010968 <xQueueSemaphoreTake+0x64>
 8010964:	2301      	movs	r3, #1
 8010966:	e000      	b.n	801096a <xQueueSemaphoreTake+0x66>
 8010968:	2300      	movs	r3, #0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d10a      	bne.n	8010984 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801096e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010972:	f383 8811 	msr	BASEPRI, r3
 8010976:	f3bf 8f6f 	isb	sy
 801097a:	f3bf 8f4f 	dsb	sy
 801097e:	61bb      	str	r3, [r7, #24]
}
 8010980:	bf00      	nop
 8010982:	e7fe      	b.n	8010982 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010984:	f001 fbd6 	bl	8012134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801098c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801098e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010990:	2b00      	cmp	r3, #0
 8010992:	d024      	beq.n	80109de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010996:	1e5a      	subs	r2, r3, #1
 8010998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d104      	bne.n	80109ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80109a4:	f001 fa1e 	bl	8011de4 <pvTaskIncrementMutexHeldCount>
 80109a8:	4602      	mov	r2, r0
 80109aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80109ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b0:	691b      	ldr	r3, [r3, #16]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00f      	beq.n	80109d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80109b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b8:	3310      	adds	r3, #16
 80109ba:	4618      	mov	r0, r3
 80109bc:	f000 feae 	bl	801171c <xTaskRemoveFromEventList>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d007      	beq.n	80109d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80109c6:	4b54      	ldr	r3, [pc, #336]	; (8010b18 <xQueueSemaphoreTake+0x214>)
 80109c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109d6:	f001 fbdd 	bl	8012194 <vPortExitCritical>
				return pdPASS;
 80109da:	2301      	movs	r3, #1
 80109dc:	e097      	b.n	8010b0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d111      	bne.n	8010a08 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d00a      	beq.n	8010a00 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80109ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ee:	f383 8811 	msr	BASEPRI, r3
 80109f2:	f3bf 8f6f 	isb	sy
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	617b      	str	r3, [r7, #20]
}
 80109fc:	bf00      	nop
 80109fe:	e7fe      	b.n	80109fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010a00:	f001 fbc8 	bl	8012194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010a04:	2300      	movs	r3, #0
 8010a06:	e082      	b.n	8010b0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d106      	bne.n	8010a1c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010a0e:	f107 030c 	add.w	r3, r7, #12
 8010a12:	4618      	mov	r0, r3
 8010a14:	f000 fee4 	bl	80117e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010a1c:	f001 fbba 	bl	8012194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010a20:	f000 fc9a 	bl	8011358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010a24:	f001 fb86 	bl	8012134 <vPortEnterCritical>
 8010a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a2e:	b25b      	sxtb	r3, r3
 8010a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a34:	d103      	bne.n	8010a3e <xQueueSemaphoreTake+0x13a>
 8010a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a38:	2200      	movs	r2, #0
 8010a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a44:	b25b      	sxtb	r3, r3
 8010a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a4a:	d103      	bne.n	8010a54 <xQueueSemaphoreTake+0x150>
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	2200      	movs	r2, #0
 8010a50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a54:	f001 fb9e 	bl	8012194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a58:	463a      	mov	r2, r7
 8010a5a:	f107 030c 	add.w	r3, r7, #12
 8010a5e:	4611      	mov	r1, r2
 8010a60:	4618      	mov	r0, r3
 8010a62:	f000 fed3 	bl	801180c <xTaskCheckForTimeOut>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d132      	bne.n	8010ad2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a6e:	f000 f9f2 	bl	8010e56 <prvIsQueueEmpty>
 8010a72:	4603      	mov	r3, r0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d026      	beq.n	8010ac6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d109      	bne.n	8010a94 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010a80:	f001 fb58 	bl	8012134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a86:	689b      	ldr	r3, [r3, #8]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f001 f821 	bl	8011ad0 <xTaskPriorityInherit>
 8010a8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010a90:	f001 fb80 	bl	8012194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a96:	3324      	adds	r3, #36	; 0x24
 8010a98:	683a      	ldr	r2, [r7, #0]
 8010a9a:	4611      	mov	r1, r2
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f000 fe19 	bl	80116d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa4:	f000 f985 	bl	8010db2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010aa8:	f000 fc64 	bl	8011374 <xTaskResumeAll>
 8010aac:	4603      	mov	r3, r0
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	f47f af68 	bne.w	8010984 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010ab4:	4b18      	ldr	r3, [pc, #96]	; (8010b18 <xQueueSemaphoreTake+0x214>)
 8010ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010aba:	601a      	str	r2, [r3, #0]
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	f3bf 8f6f 	isb	sy
 8010ac4:	e75e      	b.n	8010984 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ac8:	f000 f973 	bl	8010db2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010acc:	f000 fc52 	bl	8011374 <xTaskResumeAll>
 8010ad0:	e758      	b.n	8010984 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010ad2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ad4:	f000 f96d 	bl	8010db2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ad8:	f000 fc4c 	bl	8011374 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010adc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ade:	f000 f9ba 	bl	8010e56 <prvIsQueueEmpty>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f43f af4d 	beq.w	8010984 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00d      	beq.n	8010b0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010af0:	f001 fb20 	bl	8012134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010af4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010af6:	f000 f8b4 	bl	8010c62 <prvGetDisinheritPriorityAfterTimeout>
 8010afa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afe:	689b      	ldr	r3, [r3, #8]
 8010b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010b02:	4618      	mov	r0, r3
 8010b04:	f001 f8e0 	bl	8011cc8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010b08:	f001 fb44 	bl	8012194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3738      	adds	r7, #56	; 0x38
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}
 8010b16:	bf00      	nop
 8010b18:	e000ed04 	.word	0xe000ed04

08010b1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b08e      	sub	sp, #56	; 0x38
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	60f8      	str	r0, [r7, #12]
 8010b24:	60b9      	str	r1, [r7, #8]
 8010b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10a      	bne.n	8010b48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b36:	f383 8811 	msr	BASEPRI, r3
 8010b3a:	f3bf 8f6f 	isb	sy
 8010b3e:	f3bf 8f4f 	dsb	sy
 8010b42:	623b      	str	r3, [r7, #32]
}
 8010b44:	bf00      	nop
 8010b46:	e7fe      	b.n	8010b46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d103      	bne.n	8010b56 <xQueueReceiveFromISR+0x3a>
 8010b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <xQueueReceiveFromISR+0x3e>
 8010b56:	2301      	movs	r3, #1
 8010b58:	e000      	b.n	8010b5c <xQueueReceiveFromISR+0x40>
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d10a      	bne.n	8010b76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b64:	f383 8811 	msr	BASEPRI, r3
 8010b68:	f3bf 8f6f 	isb	sy
 8010b6c:	f3bf 8f4f 	dsb	sy
 8010b70:	61fb      	str	r3, [r7, #28]
}
 8010b72:	bf00      	nop
 8010b74:	e7fe      	b.n	8010b74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b76:	f001 fbbf 	bl	80122f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010b7a:	f3ef 8211 	mrs	r2, BASEPRI
 8010b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	61ba      	str	r2, [r7, #24]
 8010b90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d02f      	beq.n	8010c02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010bac:	68b9      	ldr	r1, [r7, #8]
 8010bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bb0:	f000 f8d9 	bl	8010d66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	1e5a      	subs	r2, r3, #1
 8010bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010bbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bc4:	d112      	bne.n	8010bec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bc8:	691b      	ldr	r3, [r3, #16]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d016      	beq.n	8010bfc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd0:	3310      	adds	r3, #16
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f000 fda2 	bl	801171c <xTaskRemoveFromEventList>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00e      	beq.n	8010bfc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00b      	beq.n	8010bfc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2201      	movs	r2, #1
 8010be8:	601a      	str	r2, [r3, #0]
 8010bea:	e007      	b.n	8010bfc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bf0:	3301      	adds	r3, #1
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	b25a      	sxtb	r2, r3
 8010bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8010c00:	e001      	b.n	8010c06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010c02:	2300      	movs	r3, #0
 8010c04:	637b      	str	r3, [r7, #52]	; 0x34
 8010c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	f383 8811 	msr	BASEPRI, r3
}
 8010c10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	3738      	adds	r7, #56	; 0x38
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d10a      	bne.n	8010c44 <vQueueDelete+0x28>
	__asm volatile
 8010c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c32:	f383 8811 	msr	BASEPRI, r3
 8010c36:	f3bf 8f6f 	isb	sy
 8010c3a:	f3bf 8f4f 	dsb	sy
 8010c3e:	60bb      	str	r3, [r7, #8]
}
 8010c40:	bf00      	nop
 8010c42:	e7fe      	b.n	8010c42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f000 f935 	bl	8010eb4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d102      	bne.n	8010c5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010c54:	68f8      	ldr	r0, [r7, #12]
 8010c56:	f001 fc5b 	bl	8012510 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010c5a:	bf00      	nop
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010c62:	b480      	push	{r7}
 8010c64:	b085      	sub	sp, #20
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d006      	beq.n	8010c80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	f1c3 0307 	rsb	r3, r3, #7
 8010c7c:	60fb      	str	r3, [r7, #12]
 8010c7e:	e001      	b.n	8010c84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010c80:	2300      	movs	r3, #0
 8010c82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010c84:	68fb      	ldr	r3, [r7, #12]
	}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3714      	adds	r7, #20
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c90:	4770      	bx	lr

08010c92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010c92:	b580      	push	{r7, lr}
 8010c94:	b086      	sub	sp, #24
 8010c96:	af00      	add	r7, sp, #0
 8010c98:	60f8      	str	r0, [r7, #12]
 8010c9a:	60b9      	str	r1, [r7, #8]
 8010c9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ca6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d10d      	bne.n	8010ccc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d14d      	bne.n	8010d54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	689b      	ldr	r3, [r3, #8]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f000 ff7d 	bl	8011bbc <xTaskPriorityDisinherit>
 8010cc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	609a      	str	r2, [r3, #8]
 8010cca:	e043      	b.n	8010d54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d119      	bne.n	8010d06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6858      	ldr	r0, [r3, #4]
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cda:	461a      	mov	r2, r3
 8010cdc:	68b9      	ldr	r1, [r7, #8]
 8010cde:	f003 fbea 	bl	80144b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cea:	441a      	add	r2, r3
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	685a      	ldr	r2, [r3, #4]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d32b      	bcc.n	8010d54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681a      	ldr	r2, [r3, #0]
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	605a      	str	r2, [r3, #4]
 8010d04:	e026      	b.n	8010d54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	68d8      	ldr	r0, [r3, #12]
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d0e:	461a      	mov	r2, r3
 8010d10:	68b9      	ldr	r1, [r7, #8]
 8010d12:	f003 fbd0 	bl	80144b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	68da      	ldr	r2, [r3, #12]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1e:	425b      	negs	r3, r3
 8010d20:	441a      	add	r2, r3
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	68da      	ldr	r2, [r3, #12]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d207      	bcs.n	8010d42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	689a      	ldr	r2, [r3, #8]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d3a:	425b      	negs	r3, r3
 8010d3c:	441a      	add	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b02      	cmp	r3, #2
 8010d46:	d105      	bne.n	8010d54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d002      	beq.n	8010d54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	3b01      	subs	r3, #1
 8010d52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	1c5a      	adds	r2, r3, #1
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010d5c:	697b      	ldr	r3, [r7, #20]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010d66:	b580      	push	{r7, lr}
 8010d68:	b082      	sub	sp, #8
 8010d6a:	af00      	add	r7, sp, #0
 8010d6c:	6078      	str	r0, [r7, #4]
 8010d6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d018      	beq.n	8010daa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	68da      	ldr	r2, [r3, #12]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d80:	441a      	add	r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	689b      	ldr	r3, [r3, #8]
 8010d8e:	429a      	cmp	r2, r3
 8010d90:	d303      	bcc.n	8010d9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	68d9      	ldr	r1, [r3, #12]
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010da2:	461a      	mov	r2, r3
 8010da4:	6838      	ldr	r0, [r7, #0]
 8010da6:	f003 fb86 	bl	80144b6 <memcpy>
	}
}
 8010daa:	bf00      	nop
 8010dac:	3708      	adds	r7, #8
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}

08010db2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010db2:	b580      	push	{r7, lr}
 8010db4:	b084      	sub	sp, #16
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010dba:	f001 f9bb 	bl	8012134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dc6:	e011      	b.n	8010dec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d012      	beq.n	8010df6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3324      	adds	r3, #36	; 0x24
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f000 fca1 	bl	801171c <xTaskRemoveFromEventList>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d001      	beq.n	8010de4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010de0:	f000 fd76 	bl	80118d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010de4:	7bfb      	ldrb	r3, [r7, #15]
 8010de6:	3b01      	subs	r3, #1
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dce9      	bgt.n	8010dc8 <prvUnlockQueue+0x16>
 8010df4:	e000      	b.n	8010df8 <prvUnlockQueue+0x46>
					break;
 8010df6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	22ff      	movs	r2, #255	; 0xff
 8010dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010e00:	f001 f9c8 	bl	8012194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010e04:	f001 f996 	bl	8012134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010e0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e10:	e011      	b.n	8010e36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	691b      	ldr	r3, [r3, #16]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d012      	beq.n	8010e40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	3310      	adds	r3, #16
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f000 fc7c 	bl	801171c <xTaskRemoveFromEventList>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d001      	beq.n	8010e2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010e2a:	f000 fd51 	bl	80118d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010e2e:	7bbb      	ldrb	r3, [r7, #14]
 8010e30:	3b01      	subs	r3, #1
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	dce9      	bgt.n	8010e12 <prvUnlockQueue+0x60>
 8010e3e:	e000      	b.n	8010e42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010e40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	22ff      	movs	r2, #255	; 0xff
 8010e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010e4a:	f001 f9a3 	bl	8012194 <vPortExitCritical>
}
 8010e4e:	bf00      	nop
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010e56:	b580      	push	{r7, lr}
 8010e58:	b084      	sub	sp, #16
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e5e:	f001 f969 	bl	8012134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d102      	bne.n	8010e70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	60fb      	str	r3, [r7, #12]
 8010e6e:	e001      	b.n	8010e74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010e70:	2300      	movs	r3, #0
 8010e72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e74:	f001 f98e 	bl	8012194 <vPortExitCritical>

	return xReturn;
 8010e78:	68fb      	ldr	r3, [r7, #12]
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3710      	adds	r7, #16
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}

08010e82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010e82:	b580      	push	{r7, lr}
 8010e84:	b084      	sub	sp, #16
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e8a:	f001 f953 	bl	8012134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d102      	bne.n	8010ea0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	60fb      	str	r3, [r7, #12]
 8010e9e:	e001      	b.n	8010ea4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010ea4:	f001 f976 	bl	8012194 <vPortExitCritical>

	return xReturn;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3710      	adds	r7, #16
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
	...

08010eb4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	60fb      	str	r3, [r7, #12]
 8010ec0:	e016      	b.n	8010ef0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010ec2:	4a10      	ldr	r2, [pc, #64]	; (8010f04 <vQueueUnregisterQueue+0x50>)
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	00db      	lsls	r3, r3, #3
 8010ec8:	4413      	add	r3, r2
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d10b      	bne.n	8010eea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010ed2:	4a0c      	ldr	r2, [pc, #48]	; (8010f04 <vQueueUnregisterQueue+0x50>)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2100      	movs	r1, #0
 8010ed8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010edc:	4a09      	ldr	r2, [pc, #36]	; (8010f04 <vQueueUnregisterQueue+0x50>)
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	00db      	lsls	r3, r3, #3
 8010ee2:	4413      	add	r3, r2
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	605a      	str	r2, [r3, #4]
				break;
 8010ee8:	e006      	b.n	8010ef8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	3301      	adds	r3, #1
 8010eee:	60fb      	str	r3, [r7, #12]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	2b07      	cmp	r3, #7
 8010ef4:	d9e5      	bls.n	8010ec2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010ef6:	bf00      	nop
 8010ef8:	bf00      	nop
 8010efa:	3714      	adds	r7, #20
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr
 8010f04:	2000365c 	.word	0x2000365c

08010f08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b08e      	sub	sp, #56	; 0x38
 8010f0c:	af04      	add	r7, sp, #16
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	607a      	str	r2, [r7, #4]
 8010f14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d10a      	bne.n	8010f32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f20:	f383 8811 	msr	BASEPRI, r3
 8010f24:	f3bf 8f6f 	isb	sy
 8010f28:	f3bf 8f4f 	dsb	sy
 8010f2c:	623b      	str	r3, [r7, #32]
}
 8010f2e:	bf00      	nop
 8010f30:	e7fe      	b.n	8010f30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d10a      	bne.n	8010f4e <xTaskCreateStatic+0x46>
	__asm volatile
 8010f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3c:	f383 8811 	msr	BASEPRI, r3
 8010f40:	f3bf 8f6f 	isb	sy
 8010f44:	f3bf 8f4f 	dsb	sy
 8010f48:	61fb      	str	r3, [r7, #28]
}
 8010f4a:	bf00      	nop
 8010f4c:	e7fe      	b.n	8010f4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010f4e:	2354      	movs	r3, #84	; 0x54
 8010f50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	2b54      	cmp	r3, #84	; 0x54
 8010f56:	d00a      	beq.n	8010f6e <xTaskCreateStatic+0x66>
	__asm volatile
 8010f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f5c:	f383 8811 	msr	BASEPRI, r3
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	f3bf 8f4f 	dsb	sy
 8010f68:	61bb      	str	r3, [r7, #24]
}
 8010f6a:	bf00      	nop
 8010f6c:	e7fe      	b.n	8010f6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010f6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d01e      	beq.n	8010fb4 <xTaskCreateStatic+0xac>
 8010f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d01b      	beq.n	8010fb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f88:	2202      	movs	r2, #2
 8010f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010f8e:	2300      	movs	r3, #0
 8010f90:	9303      	str	r3, [sp, #12]
 8010f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f94:	9302      	str	r3, [sp, #8]
 8010f96:	f107 0314 	add.w	r3, r7, #20
 8010f9a:	9301      	str	r3, [sp, #4]
 8010f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9e:	9300      	str	r3, [sp, #0]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	68b9      	ldr	r1, [r7, #8]
 8010fa6:	68f8      	ldr	r0, [r7, #12]
 8010fa8:	f000 f850 	bl	801104c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fae:	f000 f8d5 	bl	801115c <prvAddNewTaskToReadyList>
 8010fb2:	e001      	b.n	8010fb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010fb8:	697b      	ldr	r3, [r7, #20]
	}
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3728      	adds	r7, #40	; 0x28
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b08c      	sub	sp, #48	; 0x30
 8010fc6:	af04      	add	r7, sp, #16
 8010fc8:	60f8      	str	r0, [r7, #12]
 8010fca:	60b9      	str	r1, [r7, #8]
 8010fcc:	603b      	str	r3, [r7, #0]
 8010fce:	4613      	mov	r3, r2
 8010fd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010fd2:	88fb      	ldrh	r3, [r7, #6]
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f001 f9ce 	bl	8012378 <pvPortMalloc>
 8010fdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d00e      	beq.n	8011002 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010fe4:	2054      	movs	r0, #84	; 0x54
 8010fe6:	f001 f9c7 	bl	8012378 <pvPortMalloc>
 8010fea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d003      	beq.n	8010ffa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8010ff8:	e005      	b.n	8011006 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ffa:	6978      	ldr	r0, [r7, #20]
 8010ffc:	f001 fa88 	bl	8012510 <vPortFree>
 8011000:	e001      	b.n	8011006 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011002:	2300      	movs	r3, #0
 8011004:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d017      	beq.n	801103c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	2200      	movs	r2, #0
 8011010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011014:	88fa      	ldrh	r2, [r7, #6]
 8011016:	2300      	movs	r3, #0
 8011018:	9303      	str	r3, [sp, #12]
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	9302      	str	r3, [sp, #8]
 801101e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011020:	9301      	str	r3, [sp, #4]
 8011022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011024:	9300      	str	r3, [sp, #0]
 8011026:	683b      	ldr	r3, [r7, #0]
 8011028:	68b9      	ldr	r1, [r7, #8]
 801102a:	68f8      	ldr	r0, [r7, #12]
 801102c:	f000 f80e 	bl	801104c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011030:	69f8      	ldr	r0, [r7, #28]
 8011032:	f000 f893 	bl	801115c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011036:	2301      	movs	r3, #1
 8011038:	61bb      	str	r3, [r7, #24]
 801103a:	e002      	b.n	8011042 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801103c:	f04f 33ff 	mov.w	r3, #4294967295
 8011040:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011042:	69bb      	ldr	r3, [r7, #24]
	}
 8011044:	4618      	mov	r0, r3
 8011046:	3720      	adds	r7, #32
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}

0801104c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b088      	sub	sp, #32
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
 8011058:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011064:	3b01      	subs	r3, #1
 8011066:	009b      	lsls	r3, r3, #2
 8011068:	4413      	add	r3, r2
 801106a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801106c:	69bb      	ldr	r3, [r7, #24]
 801106e:	f023 0307 	bic.w	r3, r3, #7
 8011072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011074:	69bb      	ldr	r3, [r7, #24]
 8011076:	f003 0307 	and.w	r3, r3, #7
 801107a:	2b00      	cmp	r3, #0
 801107c:	d00a      	beq.n	8011094 <prvInitialiseNewTask+0x48>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	617b      	str	r3, [r7, #20]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d01f      	beq.n	80110da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801109a:	2300      	movs	r3, #0
 801109c:	61fb      	str	r3, [r7, #28]
 801109e:	e012      	b.n	80110c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80110a0:	68ba      	ldr	r2, [r7, #8]
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	4413      	add	r3, r2
 80110a6:	7819      	ldrb	r1, [r3, #0]
 80110a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	4413      	add	r3, r2
 80110ae:	3334      	adds	r3, #52	; 0x34
 80110b0:	460a      	mov	r2, r1
 80110b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	4413      	add	r3, r2
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d006      	beq.n	80110ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	3301      	adds	r3, #1
 80110c4:	61fb      	str	r3, [r7, #28]
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	2b0f      	cmp	r3, #15
 80110ca:	d9e9      	bls.n	80110a0 <prvInitialiseNewTask+0x54>
 80110cc:	e000      	b.n	80110d0 <prvInitialiseNewTask+0x84>
			{
				break;
 80110ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80110d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80110d8:	e003      	b.n	80110e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80110da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110dc:	2200      	movs	r2, #0
 80110de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80110e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e4:	2b06      	cmp	r3, #6
 80110e6:	d901      	bls.n	80110ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80110e8:	2306      	movs	r3, #6
 80110ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80110f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80110f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fa:	2200      	movs	r2, #0
 80110fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80110fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011100:	3304      	adds	r3, #4
 8011102:	4618      	mov	r0, r3
 8011104:	f7ff f8a3 	bl	801024e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801110a:	3318      	adds	r3, #24
 801110c:	4618      	mov	r0, r3
 801110e:	f7ff f89e 	bl	801024e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801111a:	f1c3 0207 	rsb	r2, r3, #7
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011126:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801112a:	2200      	movs	r2, #0
 801112c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801112e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011130:	2200      	movs	r2, #0
 8011132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011136:	683a      	ldr	r2, [r7, #0]
 8011138:	68f9      	ldr	r1, [r7, #12]
 801113a:	69b8      	ldr	r0, [r7, #24]
 801113c:	f000 fecc 	bl	8011ed8 <pxPortInitialiseStack>
 8011140:	4602      	mov	r2, r0
 8011142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011144:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011148:	2b00      	cmp	r3, #0
 801114a:	d002      	beq.n	8011152 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011152:	bf00      	nop
 8011154:	3720      	adds	r7, #32
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
	...

0801115c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011164:	f000 ffe6 	bl	8012134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011168:	4b2a      	ldr	r3, [pc, #168]	; (8011214 <prvAddNewTaskToReadyList+0xb8>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	3301      	adds	r3, #1
 801116e:	4a29      	ldr	r2, [pc, #164]	; (8011214 <prvAddNewTaskToReadyList+0xb8>)
 8011170:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011172:	4b29      	ldr	r3, [pc, #164]	; (8011218 <prvAddNewTaskToReadyList+0xbc>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d109      	bne.n	801118e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801117a:	4a27      	ldr	r2, [pc, #156]	; (8011218 <prvAddNewTaskToReadyList+0xbc>)
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011180:	4b24      	ldr	r3, [pc, #144]	; (8011214 <prvAddNewTaskToReadyList+0xb8>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d110      	bne.n	80111aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011188:	f000 fbc6 	bl	8011918 <prvInitialiseTaskLists>
 801118c:	e00d      	b.n	80111aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801118e:	4b23      	ldr	r3, [pc, #140]	; (801121c <prvAddNewTaskToReadyList+0xc0>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d109      	bne.n	80111aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011196:	4b20      	ldr	r3, [pc, #128]	; (8011218 <prvAddNewTaskToReadyList+0xbc>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d802      	bhi.n	80111aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80111a4:	4a1c      	ldr	r2, [pc, #112]	; (8011218 <prvAddNewTaskToReadyList+0xbc>)
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80111aa:	4b1d      	ldr	r3, [pc, #116]	; (8011220 <prvAddNewTaskToReadyList+0xc4>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	3301      	adds	r3, #1
 80111b0:	4a1b      	ldr	r2, [pc, #108]	; (8011220 <prvAddNewTaskToReadyList+0xc4>)
 80111b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111b8:	2201      	movs	r2, #1
 80111ba:	409a      	lsls	r2, r3
 80111bc:	4b19      	ldr	r3, [pc, #100]	; (8011224 <prvAddNewTaskToReadyList+0xc8>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4313      	orrs	r3, r2
 80111c2:	4a18      	ldr	r2, [pc, #96]	; (8011224 <prvAddNewTaskToReadyList+0xc8>)
 80111c4:	6013      	str	r3, [r2, #0]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ca:	4613      	mov	r3, r2
 80111cc:	009b      	lsls	r3, r3, #2
 80111ce:	4413      	add	r3, r2
 80111d0:	009b      	lsls	r3, r3, #2
 80111d2:	4a15      	ldr	r2, [pc, #84]	; (8011228 <prvAddNewTaskToReadyList+0xcc>)
 80111d4:	441a      	add	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	3304      	adds	r3, #4
 80111da:	4619      	mov	r1, r3
 80111dc:	4610      	mov	r0, r2
 80111de:	f7ff f843 	bl	8010268 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80111e2:	f000 ffd7 	bl	8012194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80111e6:	4b0d      	ldr	r3, [pc, #52]	; (801121c <prvAddNewTaskToReadyList+0xc0>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d00e      	beq.n	801120c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80111ee:	4b0a      	ldr	r3, [pc, #40]	; (8011218 <prvAddNewTaskToReadyList+0xbc>)
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d207      	bcs.n	801120c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80111fc:	4b0b      	ldr	r3, [pc, #44]	; (801122c <prvAddNewTaskToReadyList+0xd0>)
 80111fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011202:	601a      	str	r2, [r3, #0]
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801120c:	bf00      	nop
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	2000379c 	.word	0x2000379c
 8011218:	2000369c 	.word	0x2000369c
 801121c:	200037a8 	.word	0x200037a8
 8011220:	200037b8 	.word	0x200037b8
 8011224:	200037a4 	.word	0x200037a4
 8011228:	200036a0 	.word	0x200036a0
 801122c:	e000ed04 	.word	0xe000ed04

08011230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011230:	b580      	push	{r7, lr}
 8011232:	b084      	sub	sp, #16
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011238:	2300      	movs	r3, #0
 801123a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d017      	beq.n	8011272 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011242:	4b13      	ldr	r3, [pc, #76]	; (8011290 <vTaskDelay+0x60>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d00a      	beq.n	8011260 <vTaskDelay+0x30>
	__asm volatile
 801124a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124e:	f383 8811 	msr	BASEPRI, r3
 8011252:	f3bf 8f6f 	isb	sy
 8011256:	f3bf 8f4f 	dsb	sy
 801125a:	60bb      	str	r3, [r7, #8]
}
 801125c:	bf00      	nop
 801125e:	e7fe      	b.n	801125e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011260:	f000 f87a 	bl	8011358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011264:	2100      	movs	r1, #0
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f000 fdd0 	bl	8011e0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801126c:	f000 f882 	bl	8011374 <xTaskResumeAll>
 8011270:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d107      	bne.n	8011288 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011278:	4b06      	ldr	r3, [pc, #24]	; (8011294 <vTaskDelay+0x64>)
 801127a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801127e:	601a      	str	r2, [r3, #0]
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011288:	bf00      	nop
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	200037c4 	.word	0x200037c4
 8011294:	e000ed04 	.word	0xe000ed04

08011298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b08a      	sub	sp, #40	; 0x28
 801129c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801129e:	2300      	movs	r3, #0
 80112a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80112a2:	2300      	movs	r3, #0
 80112a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80112a6:	463a      	mov	r2, r7
 80112a8:	1d39      	adds	r1, r7, #4
 80112aa:	f107 0308 	add.w	r3, r7, #8
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7f3 fd8e 	bl	8004dd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80112b4:	6839      	ldr	r1, [r7, #0]
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68ba      	ldr	r2, [r7, #8]
 80112ba:	9202      	str	r2, [sp, #8]
 80112bc:	9301      	str	r3, [sp, #4]
 80112be:	2300      	movs	r3, #0
 80112c0:	9300      	str	r3, [sp, #0]
 80112c2:	2300      	movs	r3, #0
 80112c4:	460a      	mov	r2, r1
 80112c6:	491e      	ldr	r1, [pc, #120]	; (8011340 <vTaskStartScheduler+0xa8>)
 80112c8:	481e      	ldr	r0, [pc, #120]	; (8011344 <vTaskStartScheduler+0xac>)
 80112ca:	f7ff fe1d 	bl	8010f08 <xTaskCreateStatic>
 80112ce:	4603      	mov	r3, r0
 80112d0:	4a1d      	ldr	r2, [pc, #116]	; (8011348 <vTaskStartScheduler+0xb0>)
 80112d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80112d4:	4b1c      	ldr	r3, [pc, #112]	; (8011348 <vTaskStartScheduler+0xb0>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80112dc:	2301      	movs	r3, #1
 80112de:	617b      	str	r3, [r7, #20]
 80112e0:	e001      	b.n	80112e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80112e2:	2300      	movs	r3, #0
 80112e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d116      	bne.n	801131a <vTaskStartScheduler+0x82>
	__asm volatile
 80112ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f0:	f383 8811 	msr	BASEPRI, r3
 80112f4:	f3bf 8f6f 	isb	sy
 80112f8:	f3bf 8f4f 	dsb	sy
 80112fc:	613b      	str	r3, [r7, #16]
}
 80112fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011300:	4b12      	ldr	r3, [pc, #72]	; (801134c <vTaskStartScheduler+0xb4>)
 8011302:	f04f 32ff 	mov.w	r2, #4294967295
 8011306:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011308:	4b11      	ldr	r3, [pc, #68]	; (8011350 <vTaskStartScheduler+0xb8>)
 801130a:	2201      	movs	r2, #1
 801130c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801130e:	4b11      	ldr	r3, [pc, #68]	; (8011354 <vTaskStartScheduler+0xbc>)
 8011310:	2200      	movs	r2, #0
 8011312:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011314:	f000 fe6c 	bl	8011ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011318:	e00e      	b.n	8011338 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011320:	d10a      	bne.n	8011338 <vTaskStartScheduler+0xa0>
	__asm volatile
 8011322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011326:	f383 8811 	msr	BASEPRI, r3
 801132a:	f3bf 8f6f 	isb	sy
 801132e:	f3bf 8f4f 	dsb	sy
 8011332:	60fb      	str	r3, [r7, #12]
}
 8011334:	bf00      	nop
 8011336:	e7fe      	b.n	8011336 <vTaskStartScheduler+0x9e>
}
 8011338:	bf00      	nop
 801133a:	3718      	adds	r7, #24
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	08018030 	.word	0x08018030
 8011344:	080118e9 	.word	0x080118e9
 8011348:	200037c0 	.word	0x200037c0
 801134c:	200037bc 	.word	0x200037bc
 8011350:	200037a8 	.word	0x200037a8
 8011354:	200037a0 	.word	0x200037a0

08011358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011358:	b480      	push	{r7}
 801135a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801135c:	4b04      	ldr	r3, [pc, #16]	; (8011370 <vTaskSuspendAll+0x18>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	3301      	adds	r3, #1
 8011362:	4a03      	ldr	r2, [pc, #12]	; (8011370 <vTaskSuspendAll+0x18>)
 8011364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011366:	bf00      	nop
 8011368:	46bd      	mov	sp, r7
 801136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136e:	4770      	bx	lr
 8011370:	200037c4 	.word	0x200037c4

08011374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801137a:	2300      	movs	r3, #0
 801137c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801137e:	2300      	movs	r3, #0
 8011380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011382:	4b41      	ldr	r3, [pc, #260]	; (8011488 <xTaskResumeAll+0x114>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d10a      	bne.n	80113a0 <xTaskResumeAll+0x2c>
	__asm volatile
 801138a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801138e:	f383 8811 	msr	BASEPRI, r3
 8011392:	f3bf 8f6f 	isb	sy
 8011396:	f3bf 8f4f 	dsb	sy
 801139a:	603b      	str	r3, [r7, #0]
}
 801139c:	bf00      	nop
 801139e:	e7fe      	b.n	801139e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80113a0:	f000 fec8 	bl	8012134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80113a4:	4b38      	ldr	r3, [pc, #224]	; (8011488 <xTaskResumeAll+0x114>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	3b01      	subs	r3, #1
 80113aa:	4a37      	ldr	r2, [pc, #220]	; (8011488 <xTaskResumeAll+0x114>)
 80113ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113ae:	4b36      	ldr	r3, [pc, #216]	; (8011488 <xTaskResumeAll+0x114>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d161      	bne.n	801147a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80113b6:	4b35      	ldr	r3, [pc, #212]	; (801148c <xTaskResumeAll+0x118>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d05d      	beq.n	801147a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80113be:	e02e      	b.n	801141e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113c0:	4b33      	ldr	r3, [pc, #204]	; (8011490 <xTaskResumeAll+0x11c>)
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	3318      	adds	r3, #24
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fe ffa8 	bl	8010322 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	3304      	adds	r3, #4
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fe ffa3 	bl	8010322 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113e0:	2201      	movs	r2, #1
 80113e2:	409a      	lsls	r2, r3
 80113e4:	4b2b      	ldr	r3, [pc, #172]	; (8011494 <xTaskResumeAll+0x120>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	4313      	orrs	r3, r2
 80113ea:	4a2a      	ldr	r2, [pc, #168]	; (8011494 <xTaskResumeAll+0x120>)
 80113ec:	6013      	str	r3, [r2, #0]
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113f2:	4613      	mov	r3, r2
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	4413      	add	r3, r2
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	4a27      	ldr	r2, [pc, #156]	; (8011498 <xTaskResumeAll+0x124>)
 80113fc:	441a      	add	r2, r3
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	3304      	adds	r3, #4
 8011402:	4619      	mov	r1, r3
 8011404:	4610      	mov	r0, r2
 8011406:	f7fe ff2f 	bl	8010268 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801140e:	4b23      	ldr	r3, [pc, #140]	; (801149c <xTaskResumeAll+0x128>)
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011414:	429a      	cmp	r2, r3
 8011416:	d302      	bcc.n	801141e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8011418:	4b21      	ldr	r3, [pc, #132]	; (80114a0 <xTaskResumeAll+0x12c>)
 801141a:	2201      	movs	r2, #1
 801141c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801141e:	4b1c      	ldr	r3, [pc, #112]	; (8011490 <xTaskResumeAll+0x11c>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d1cc      	bne.n	80113c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d001      	beq.n	8011430 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801142c:	f000 fb12 	bl	8011a54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011430:	4b1c      	ldr	r3, [pc, #112]	; (80114a4 <xTaskResumeAll+0x130>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d010      	beq.n	801145e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801143c:	f000 f836 	bl	80114ac <xTaskIncrementTick>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d002      	beq.n	801144c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8011446:	4b16      	ldr	r3, [pc, #88]	; (80114a0 <xTaskResumeAll+0x12c>)
 8011448:	2201      	movs	r2, #1
 801144a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	3b01      	subs	r3, #1
 8011450:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d1f1      	bne.n	801143c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8011458:	4b12      	ldr	r3, [pc, #72]	; (80114a4 <xTaskResumeAll+0x130>)
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801145e:	4b10      	ldr	r3, [pc, #64]	; (80114a0 <xTaskResumeAll+0x12c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d009      	beq.n	801147a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011466:	2301      	movs	r3, #1
 8011468:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801146a:	4b0f      	ldr	r3, [pc, #60]	; (80114a8 <xTaskResumeAll+0x134>)
 801146c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011470:	601a      	str	r2, [r3, #0]
 8011472:	f3bf 8f4f 	dsb	sy
 8011476:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801147a:	f000 fe8b 	bl	8012194 <vPortExitCritical>

	return xAlreadyYielded;
 801147e:	68bb      	ldr	r3, [r7, #8]
}
 8011480:	4618      	mov	r0, r3
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	200037c4 	.word	0x200037c4
 801148c:	2000379c 	.word	0x2000379c
 8011490:	2000375c 	.word	0x2000375c
 8011494:	200037a4 	.word	0x200037a4
 8011498:	200036a0 	.word	0x200036a0
 801149c:	2000369c 	.word	0x2000369c
 80114a0:	200037b0 	.word	0x200037b0
 80114a4:	200037ac 	.word	0x200037ac
 80114a8:	e000ed04 	.word	0xe000ed04

080114ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b086      	sub	sp, #24
 80114b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80114b2:	2300      	movs	r3, #0
 80114b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114b6:	4b4e      	ldr	r3, [pc, #312]	; (80115f0 <xTaskIncrementTick+0x144>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f040 808e 	bne.w	80115dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80114c0:	4b4c      	ldr	r3, [pc, #304]	; (80115f4 <xTaskIncrementTick+0x148>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3301      	adds	r3, #1
 80114c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80114c8:	4a4a      	ldr	r2, [pc, #296]	; (80115f4 <xTaskIncrementTick+0x148>)
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d120      	bne.n	8011516 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80114d4:	4b48      	ldr	r3, [pc, #288]	; (80115f8 <xTaskIncrementTick+0x14c>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d00a      	beq.n	80114f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80114de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e2:	f383 8811 	msr	BASEPRI, r3
 80114e6:	f3bf 8f6f 	isb	sy
 80114ea:	f3bf 8f4f 	dsb	sy
 80114ee:	603b      	str	r3, [r7, #0]
}
 80114f0:	bf00      	nop
 80114f2:	e7fe      	b.n	80114f2 <xTaskIncrementTick+0x46>
 80114f4:	4b40      	ldr	r3, [pc, #256]	; (80115f8 <xTaskIncrementTick+0x14c>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	60fb      	str	r3, [r7, #12]
 80114fa:	4b40      	ldr	r3, [pc, #256]	; (80115fc <xTaskIncrementTick+0x150>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	4a3e      	ldr	r2, [pc, #248]	; (80115f8 <xTaskIncrementTick+0x14c>)
 8011500:	6013      	str	r3, [r2, #0]
 8011502:	4a3e      	ldr	r2, [pc, #248]	; (80115fc <xTaskIncrementTick+0x150>)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	6013      	str	r3, [r2, #0]
 8011508:	4b3d      	ldr	r3, [pc, #244]	; (8011600 <xTaskIncrementTick+0x154>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	3301      	adds	r3, #1
 801150e:	4a3c      	ldr	r2, [pc, #240]	; (8011600 <xTaskIncrementTick+0x154>)
 8011510:	6013      	str	r3, [r2, #0]
 8011512:	f000 fa9f 	bl	8011a54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011516:	4b3b      	ldr	r3, [pc, #236]	; (8011604 <xTaskIncrementTick+0x158>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	693a      	ldr	r2, [r7, #16]
 801151c:	429a      	cmp	r2, r3
 801151e:	d348      	bcc.n	80115b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011520:	4b35      	ldr	r3, [pc, #212]	; (80115f8 <xTaskIncrementTick+0x14c>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d104      	bne.n	8011534 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801152a:	4b36      	ldr	r3, [pc, #216]	; (8011604 <xTaskIncrementTick+0x158>)
 801152c:	f04f 32ff 	mov.w	r2, #4294967295
 8011530:	601a      	str	r2, [r3, #0]
					break;
 8011532:	e03e      	b.n	80115b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011534:	4b30      	ldr	r3, [pc, #192]	; (80115f8 <xTaskIncrementTick+0x14c>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011544:	693a      	ldr	r2, [r7, #16]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	429a      	cmp	r2, r3
 801154a:	d203      	bcs.n	8011554 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801154c:	4a2d      	ldr	r2, [pc, #180]	; (8011604 <xTaskIncrementTick+0x158>)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011552:	e02e      	b.n	80115b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011554:	68bb      	ldr	r3, [r7, #8]
 8011556:	3304      	adds	r3, #4
 8011558:	4618      	mov	r0, r3
 801155a:	f7fe fee2 	bl	8010322 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011562:	2b00      	cmp	r3, #0
 8011564:	d004      	beq.n	8011570 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	3318      	adds	r3, #24
 801156a:	4618      	mov	r0, r3
 801156c:	f7fe fed9 	bl	8010322 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011574:	2201      	movs	r2, #1
 8011576:	409a      	lsls	r2, r3
 8011578:	4b23      	ldr	r3, [pc, #140]	; (8011608 <xTaskIncrementTick+0x15c>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4313      	orrs	r3, r2
 801157e:	4a22      	ldr	r2, [pc, #136]	; (8011608 <xTaskIncrementTick+0x15c>)
 8011580:	6013      	str	r3, [r2, #0]
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011586:	4613      	mov	r3, r2
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	4413      	add	r3, r2
 801158c:	009b      	lsls	r3, r3, #2
 801158e:	4a1f      	ldr	r2, [pc, #124]	; (801160c <xTaskIncrementTick+0x160>)
 8011590:	441a      	add	r2, r3
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	3304      	adds	r3, #4
 8011596:	4619      	mov	r1, r3
 8011598:	4610      	mov	r0, r2
 801159a:	f7fe fe65 	bl	8010268 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801159e:	68bb      	ldr	r3, [r7, #8]
 80115a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a2:	4b1b      	ldr	r3, [pc, #108]	; (8011610 <xTaskIncrementTick+0x164>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d3b9      	bcc.n	8011520 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80115ac:	2301      	movs	r3, #1
 80115ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80115b0:	e7b6      	b.n	8011520 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80115b2:	4b17      	ldr	r3, [pc, #92]	; (8011610 <xTaskIncrementTick+0x164>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b8:	4914      	ldr	r1, [pc, #80]	; (801160c <xTaskIncrementTick+0x160>)
 80115ba:	4613      	mov	r3, r2
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	4413      	add	r3, r2
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	440b      	add	r3, r1
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	2b01      	cmp	r3, #1
 80115c8:	d901      	bls.n	80115ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80115ca:	2301      	movs	r3, #1
 80115cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80115ce:	4b11      	ldr	r3, [pc, #68]	; (8011614 <xTaskIncrementTick+0x168>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d007      	beq.n	80115e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80115d6:	2301      	movs	r3, #1
 80115d8:	617b      	str	r3, [r7, #20]
 80115da:	e004      	b.n	80115e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80115dc:	4b0e      	ldr	r3, [pc, #56]	; (8011618 <xTaskIncrementTick+0x16c>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	3301      	adds	r3, #1
 80115e2:	4a0d      	ldr	r2, [pc, #52]	; (8011618 <xTaskIncrementTick+0x16c>)
 80115e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80115e6:	697b      	ldr	r3, [r7, #20]
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	200037c4 	.word	0x200037c4
 80115f4:	200037a0 	.word	0x200037a0
 80115f8:	20003754 	.word	0x20003754
 80115fc:	20003758 	.word	0x20003758
 8011600:	200037b4 	.word	0x200037b4
 8011604:	200037bc 	.word	0x200037bc
 8011608:	200037a4 	.word	0x200037a4
 801160c:	200036a0 	.word	0x200036a0
 8011610:	2000369c 	.word	0x2000369c
 8011614:	200037b0 	.word	0x200037b0
 8011618:	200037ac 	.word	0x200037ac

0801161c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801161c:	b480      	push	{r7}
 801161e:	b087      	sub	sp, #28
 8011620:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011622:	4b27      	ldr	r3, [pc, #156]	; (80116c0 <vTaskSwitchContext+0xa4>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d003      	beq.n	8011632 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801162a:	4b26      	ldr	r3, [pc, #152]	; (80116c4 <vTaskSwitchContext+0xa8>)
 801162c:	2201      	movs	r2, #1
 801162e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011630:	e03f      	b.n	80116b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011632:	4b24      	ldr	r3, [pc, #144]	; (80116c4 <vTaskSwitchContext+0xa8>)
 8011634:	2200      	movs	r2, #0
 8011636:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011638:	4b23      	ldr	r3, [pc, #140]	; (80116c8 <vTaskSwitchContext+0xac>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	fab3 f383 	clz	r3, r3
 8011644:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011646:	7afb      	ldrb	r3, [r7, #11]
 8011648:	f1c3 031f 	rsb	r3, r3, #31
 801164c:	617b      	str	r3, [r7, #20]
 801164e:	491f      	ldr	r1, [pc, #124]	; (80116cc <vTaskSwitchContext+0xb0>)
 8011650:	697a      	ldr	r2, [r7, #20]
 8011652:	4613      	mov	r3, r2
 8011654:	009b      	lsls	r3, r3, #2
 8011656:	4413      	add	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	440b      	add	r3, r1
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d10a      	bne.n	8011678 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011666:	f383 8811 	msr	BASEPRI, r3
 801166a:	f3bf 8f6f 	isb	sy
 801166e:	f3bf 8f4f 	dsb	sy
 8011672:	607b      	str	r3, [r7, #4]
}
 8011674:	bf00      	nop
 8011676:	e7fe      	b.n	8011676 <vTaskSwitchContext+0x5a>
 8011678:	697a      	ldr	r2, [r7, #20]
 801167a:	4613      	mov	r3, r2
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	4413      	add	r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	4a12      	ldr	r2, [pc, #72]	; (80116cc <vTaskSwitchContext+0xb0>)
 8011684:	4413      	add	r3, r2
 8011686:	613b      	str	r3, [r7, #16]
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	605a      	str	r2, [r3, #4]
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	693b      	ldr	r3, [r7, #16]
 8011698:	3308      	adds	r3, #8
 801169a:	429a      	cmp	r2, r3
 801169c:	d104      	bne.n	80116a8 <vTaskSwitchContext+0x8c>
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	685a      	ldr	r2, [r3, #4]
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	605a      	str	r2, [r3, #4]
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	68db      	ldr	r3, [r3, #12]
 80116ae:	4a08      	ldr	r2, [pc, #32]	; (80116d0 <vTaskSwitchContext+0xb4>)
 80116b0:	6013      	str	r3, [r2, #0]
}
 80116b2:	bf00      	nop
 80116b4:	371c      	adds	r7, #28
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop
 80116c0:	200037c4 	.word	0x200037c4
 80116c4:	200037b0 	.word	0x200037b0
 80116c8:	200037a4 	.word	0x200037a4
 80116cc:	200036a0 	.word	0x200036a0
 80116d0:	2000369c 	.word	0x2000369c

080116d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b084      	sub	sp, #16
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d10a      	bne.n	80116fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80116e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	60fb      	str	r3, [r7, #12]
}
 80116f6:	bf00      	nop
 80116f8:	e7fe      	b.n	80116f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80116fa:	4b07      	ldr	r3, [pc, #28]	; (8011718 <vTaskPlaceOnEventList+0x44>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	3318      	adds	r3, #24
 8011700:	4619      	mov	r1, r3
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7fe fdd4 	bl	80102b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011708:	2101      	movs	r1, #1
 801170a:	6838      	ldr	r0, [r7, #0]
 801170c:	f000 fb7e 	bl	8011e0c <prvAddCurrentTaskToDelayedList>
}
 8011710:	bf00      	nop
 8011712:	3710      	adds	r7, #16
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	2000369c 	.word	0x2000369c

0801171c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d10a      	bne.n	8011748 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011736:	f383 8811 	msr	BASEPRI, r3
 801173a:	f3bf 8f6f 	isb	sy
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	60fb      	str	r3, [r7, #12]
}
 8011744:	bf00      	nop
 8011746:	e7fe      	b.n	8011746 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	3318      	adds	r3, #24
 801174c:	4618      	mov	r0, r3
 801174e:	f7fe fde8 	bl	8010322 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011752:	4b1d      	ldr	r3, [pc, #116]	; (80117c8 <xTaskRemoveFromEventList+0xac>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d11c      	bne.n	8011794 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801175a:	693b      	ldr	r3, [r7, #16]
 801175c:	3304      	adds	r3, #4
 801175e:	4618      	mov	r0, r3
 8011760:	f7fe fddf 	bl	8010322 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011768:	2201      	movs	r2, #1
 801176a:	409a      	lsls	r2, r3
 801176c:	4b17      	ldr	r3, [pc, #92]	; (80117cc <xTaskRemoveFromEventList+0xb0>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4313      	orrs	r3, r2
 8011772:	4a16      	ldr	r2, [pc, #88]	; (80117cc <xTaskRemoveFromEventList+0xb0>)
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801177a:	4613      	mov	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4413      	add	r3, r2
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	4a13      	ldr	r2, [pc, #76]	; (80117d0 <xTaskRemoveFromEventList+0xb4>)
 8011784:	441a      	add	r2, r3
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	3304      	adds	r3, #4
 801178a:	4619      	mov	r1, r3
 801178c:	4610      	mov	r0, r2
 801178e:	f7fe fd6b 	bl	8010268 <vListInsertEnd>
 8011792:	e005      	b.n	80117a0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	3318      	adds	r3, #24
 8011798:	4619      	mov	r1, r3
 801179a:	480e      	ldr	r0, [pc, #56]	; (80117d4 <xTaskRemoveFromEventList+0xb8>)
 801179c:	f7fe fd64 	bl	8010268 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <xTaskRemoveFromEventList+0xbc>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d905      	bls.n	80117ba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80117ae:	2301      	movs	r3, #1
 80117b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80117b2:	4b0a      	ldr	r3, [pc, #40]	; (80117dc <xTaskRemoveFromEventList+0xc0>)
 80117b4:	2201      	movs	r2, #1
 80117b6:	601a      	str	r2, [r3, #0]
 80117b8:	e001      	b.n	80117be <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80117ba:	2300      	movs	r3, #0
 80117bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80117be:	697b      	ldr	r3, [r7, #20]
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	3718      	adds	r7, #24
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	200037c4 	.word	0x200037c4
 80117cc:	200037a4 	.word	0x200037a4
 80117d0:	200036a0 	.word	0x200036a0
 80117d4:	2000375c 	.word	0x2000375c
 80117d8:	2000369c 	.word	0x2000369c
 80117dc:	200037b0 	.word	0x200037b0

080117e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80117e0:	b480      	push	{r7}
 80117e2:	b083      	sub	sp, #12
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80117e8:	4b06      	ldr	r3, [pc, #24]	; (8011804 <vTaskInternalSetTimeOutState+0x24>)
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80117f0:	4b05      	ldr	r3, [pc, #20]	; (8011808 <vTaskInternalSetTimeOutState+0x28>)
 80117f2:	681a      	ldr	r2, [r3, #0]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	605a      	str	r2, [r3, #4]
}
 80117f8:	bf00      	nop
 80117fa:	370c      	adds	r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011802:	4770      	bx	lr
 8011804:	200037b4 	.word	0x200037b4
 8011808:	200037a0 	.word	0x200037a0

0801180c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b088      	sub	sp, #32
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d10a      	bne.n	8011832 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011820:	f383 8811 	msr	BASEPRI, r3
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	613b      	str	r3, [r7, #16]
}
 801182e:	bf00      	nop
 8011830:	e7fe      	b.n	8011830 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d10a      	bne.n	801184e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183c:	f383 8811 	msr	BASEPRI, r3
 8011840:	f3bf 8f6f 	isb	sy
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	60fb      	str	r3, [r7, #12]
}
 801184a:	bf00      	nop
 801184c:	e7fe      	b.n	801184c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801184e:	f000 fc71 	bl	8012134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011852:	4b1d      	ldr	r3, [pc, #116]	; (80118c8 <xTaskCheckForTimeOut+0xbc>)
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	69ba      	ldr	r2, [r7, #24]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801186a:	d102      	bne.n	8011872 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801186c:	2300      	movs	r3, #0
 801186e:	61fb      	str	r3, [r7, #28]
 8011870:	e023      	b.n	80118ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	4b15      	ldr	r3, [pc, #84]	; (80118cc <xTaskCheckForTimeOut+0xc0>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	429a      	cmp	r2, r3
 801187c:	d007      	beq.n	801188e <xTaskCheckForTimeOut+0x82>
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	69ba      	ldr	r2, [r7, #24]
 8011884:	429a      	cmp	r2, r3
 8011886:	d302      	bcc.n	801188e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011888:	2301      	movs	r3, #1
 801188a:	61fb      	str	r3, [r7, #28]
 801188c:	e015      	b.n	80118ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	697a      	ldr	r2, [r7, #20]
 8011894:	429a      	cmp	r2, r3
 8011896:	d20b      	bcs.n	80118b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	681a      	ldr	r2, [r3, #0]
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	1ad2      	subs	r2, r2, r3
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80118a4:	6878      	ldr	r0, [r7, #4]
 80118a6:	f7ff ff9b 	bl	80117e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80118aa:	2300      	movs	r3, #0
 80118ac:	61fb      	str	r3, [r7, #28]
 80118ae:	e004      	b.n	80118ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	2200      	movs	r2, #0
 80118b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80118b6:	2301      	movs	r3, #1
 80118b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80118ba:	f000 fc6b 	bl	8012194 <vPortExitCritical>

	return xReturn;
 80118be:	69fb      	ldr	r3, [r7, #28]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3720      	adds	r7, #32
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	200037a0 	.word	0x200037a0
 80118cc:	200037b4 	.word	0x200037b4

080118d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80118d0:	b480      	push	{r7}
 80118d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80118d4:	4b03      	ldr	r3, [pc, #12]	; (80118e4 <vTaskMissedYield+0x14>)
 80118d6:	2201      	movs	r2, #1
 80118d8:	601a      	str	r2, [r3, #0]
}
 80118da:	bf00      	nop
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr
 80118e4:	200037b0 	.word	0x200037b0

080118e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80118f0:	f000 f852 	bl	8011998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80118f4:	4b06      	ldr	r3, [pc, #24]	; (8011910 <prvIdleTask+0x28>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2b01      	cmp	r3, #1
 80118fa:	d9f9      	bls.n	80118f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80118fc:	4b05      	ldr	r3, [pc, #20]	; (8011914 <prvIdleTask+0x2c>)
 80118fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011902:	601a      	str	r2, [r3, #0]
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801190c:	e7f0      	b.n	80118f0 <prvIdleTask+0x8>
 801190e:	bf00      	nop
 8011910:	200036a0 	.word	0x200036a0
 8011914:	e000ed04 	.word	0xe000ed04

08011918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801191e:	2300      	movs	r3, #0
 8011920:	607b      	str	r3, [r7, #4]
 8011922:	e00c      	b.n	801193e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	4613      	mov	r3, r2
 8011928:	009b      	lsls	r3, r3, #2
 801192a:	4413      	add	r3, r2
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4a12      	ldr	r2, [pc, #72]	; (8011978 <prvInitialiseTaskLists+0x60>)
 8011930:	4413      	add	r3, r2
 8011932:	4618      	mov	r0, r3
 8011934:	f7fe fc6b 	bl	801020e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3301      	adds	r3, #1
 801193c:	607b      	str	r3, [r7, #4]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b06      	cmp	r3, #6
 8011942:	d9ef      	bls.n	8011924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011944:	480d      	ldr	r0, [pc, #52]	; (801197c <prvInitialiseTaskLists+0x64>)
 8011946:	f7fe fc62 	bl	801020e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801194a:	480d      	ldr	r0, [pc, #52]	; (8011980 <prvInitialiseTaskLists+0x68>)
 801194c:	f7fe fc5f 	bl	801020e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011950:	480c      	ldr	r0, [pc, #48]	; (8011984 <prvInitialiseTaskLists+0x6c>)
 8011952:	f7fe fc5c 	bl	801020e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011956:	480c      	ldr	r0, [pc, #48]	; (8011988 <prvInitialiseTaskLists+0x70>)
 8011958:	f7fe fc59 	bl	801020e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801195c:	480b      	ldr	r0, [pc, #44]	; (801198c <prvInitialiseTaskLists+0x74>)
 801195e:	f7fe fc56 	bl	801020e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011962:	4b0b      	ldr	r3, [pc, #44]	; (8011990 <prvInitialiseTaskLists+0x78>)
 8011964:	4a05      	ldr	r2, [pc, #20]	; (801197c <prvInitialiseTaskLists+0x64>)
 8011966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011968:	4b0a      	ldr	r3, [pc, #40]	; (8011994 <prvInitialiseTaskLists+0x7c>)
 801196a:	4a05      	ldr	r2, [pc, #20]	; (8011980 <prvInitialiseTaskLists+0x68>)
 801196c:	601a      	str	r2, [r3, #0]
}
 801196e:	bf00      	nop
 8011970:	3708      	adds	r7, #8
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	200036a0 	.word	0x200036a0
 801197c:	2000372c 	.word	0x2000372c
 8011980:	20003740 	.word	0x20003740
 8011984:	2000375c 	.word	0x2000375c
 8011988:	20003770 	.word	0x20003770
 801198c:	20003788 	.word	0x20003788
 8011990:	20003754 	.word	0x20003754
 8011994:	20003758 	.word	0x20003758

08011998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801199e:	e019      	b.n	80119d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80119a0:	f000 fbc8 	bl	8012134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119a4:	4b10      	ldr	r3, [pc, #64]	; (80119e8 <prvCheckTasksWaitingTermination+0x50>)
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	3304      	adds	r3, #4
 80119b0:	4618      	mov	r0, r3
 80119b2:	f7fe fcb6 	bl	8010322 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80119b6:	4b0d      	ldr	r3, [pc, #52]	; (80119ec <prvCheckTasksWaitingTermination+0x54>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	3b01      	subs	r3, #1
 80119bc:	4a0b      	ldr	r2, [pc, #44]	; (80119ec <prvCheckTasksWaitingTermination+0x54>)
 80119be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80119c0:	4b0b      	ldr	r3, [pc, #44]	; (80119f0 <prvCheckTasksWaitingTermination+0x58>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	3b01      	subs	r3, #1
 80119c6:	4a0a      	ldr	r2, [pc, #40]	; (80119f0 <prvCheckTasksWaitingTermination+0x58>)
 80119c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119ca:	f000 fbe3 	bl	8012194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119ce:	6878      	ldr	r0, [r7, #4]
 80119d0:	f000 f810 	bl	80119f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119d4:	4b06      	ldr	r3, [pc, #24]	; (80119f0 <prvCheckTasksWaitingTermination+0x58>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d1e1      	bne.n	80119a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119dc:	bf00      	nop
 80119de:	bf00      	nop
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	20003770 	.word	0x20003770
 80119ec:	2000379c 	.word	0x2000379c
 80119f0:	20003784 	.word	0x20003784

080119f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b084      	sub	sp, #16
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d108      	bne.n	8011a18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f000 fd80 	bl	8012510 <vPortFree>
				vPortFree( pxTCB );
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fd7d 	bl	8012510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011a16:	e018      	b.n	8011a4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d103      	bne.n	8011a2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 fd74 	bl	8012510 <vPortFree>
	}
 8011a28:	e00f      	b.n	8011a4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011a30:	2b02      	cmp	r3, #2
 8011a32:	d00a      	beq.n	8011a4a <prvDeleteTCB+0x56>
	__asm volatile
 8011a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a38:	f383 8811 	msr	BASEPRI, r3
 8011a3c:	f3bf 8f6f 	isb	sy
 8011a40:	f3bf 8f4f 	dsb	sy
 8011a44:	60fb      	str	r3, [r7, #12]
}
 8011a46:	bf00      	nop
 8011a48:	e7fe      	b.n	8011a48 <prvDeleteTCB+0x54>
	}
 8011a4a:	bf00      	nop
 8011a4c:	3710      	adds	r7, #16
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
	...

08011a54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a54:	b480      	push	{r7}
 8011a56:	b083      	sub	sp, #12
 8011a58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a5a:	4b0c      	ldr	r3, [pc, #48]	; (8011a8c <prvResetNextTaskUnblockTime+0x38>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d104      	bne.n	8011a6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a64:	4b0a      	ldr	r3, [pc, #40]	; (8011a90 <prvResetNextTaskUnblockTime+0x3c>)
 8011a66:	f04f 32ff 	mov.w	r2, #4294967295
 8011a6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a6c:	e008      	b.n	8011a80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a6e:	4b07      	ldr	r3, [pc, #28]	; (8011a8c <prvResetNextTaskUnblockTime+0x38>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	4a04      	ldr	r2, [pc, #16]	; (8011a90 <prvResetNextTaskUnblockTime+0x3c>)
 8011a7e:	6013      	str	r3, [r2, #0]
}
 8011a80:	bf00      	nop
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	20003754 	.word	0x20003754
 8011a90:	200037bc 	.word	0x200037bc

08011a94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a94:	b480      	push	{r7}
 8011a96:	b083      	sub	sp, #12
 8011a98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a9a:	4b0b      	ldr	r3, [pc, #44]	; (8011ac8 <xTaskGetSchedulerState+0x34>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d102      	bne.n	8011aa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	607b      	str	r3, [r7, #4]
 8011aa6:	e008      	b.n	8011aba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011aa8:	4b08      	ldr	r3, [pc, #32]	; (8011acc <xTaskGetSchedulerState+0x38>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d102      	bne.n	8011ab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011ab0:	2302      	movs	r3, #2
 8011ab2:	607b      	str	r3, [r7, #4]
 8011ab4:	e001      	b.n	8011aba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011aba:	687b      	ldr	r3, [r7, #4]
	}
 8011abc:	4618      	mov	r0, r3
 8011abe:	370c      	adds	r7, #12
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac6:	4770      	bx	lr
 8011ac8:	200037a8 	.word	0x200037a8
 8011acc:	200037c4 	.word	0x200037c4

08011ad0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011adc:	2300      	movs	r3, #0
 8011ade:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d05e      	beq.n	8011ba4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aea:	4b31      	ldr	r3, [pc, #196]	; (8011bb0 <xTaskPriorityInherit+0xe0>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d24e      	bcs.n	8011b92 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	699b      	ldr	r3, [r3, #24]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	db06      	blt.n	8011b0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011afc:	4b2c      	ldr	r3, [pc, #176]	; (8011bb0 <xTaskPriorityInherit+0xe0>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b02:	f1c3 0207 	rsb	r2, r3, #7
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011b0a:	68bb      	ldr	r3, [r7, #8]
 8011b0c:	6959      	ldr	r1, [r3, #20]
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b12:	4613      	mov	r3, r2
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	4413      	add	r3, r2
 8011b18:	009b      	lsls	r3, r3, #2
 8011b1a:	4a26      	ldr	r2, [pc, #152]	; (8011bb4 <xTaskPriorityInherit+0xe4>)
 8011b1c:	4413      	add	r3, r2
 8011b1e:	4299      	cmp	r1, r3
 8011b20:	d12f      	bne.n	8011b82 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	3304      	adds	r3, #4
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fe fbfb 	bl	8010322 <uxListRemove>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d10a      	bne.n	8011b48 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b36:	2201      	movs	r2, #1
 8011b38:	fa02 f303 	lsl.w	r3, r2, r3
 8011b3c:	43da      	mvns	r2, r3
 8011b3e:	4b1e      	ldr	r3, [pc, #120]	; (8011bb8 <xTaskPriorityInherit+0xe8>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	4013      	ands	r3, r2
 8011b44:	4a1c      	ldr	r2, [pc, #112]	; (8011bb8 <xTaskPriorityInherit+0xe8>)
 8011b46:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b48:	4b19      	ldr	r3, [pc, #100]	; (8011bb0 <xTaskPriorityInherit+0xe0>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b56:	2201      	movs	r2, #1
 8011b58:	409a      	lsls	r2, r3
 8011b5a:	4b17      	ldr	r3, [pc, #92]	; (8011bb8 <xTaskPriorityInherit+0xe8>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	4a15      	ldr	r2, [pc, #84]	; (8011bb8 <xTaskPriorityInherit+0xe8>)
 8011b62:	6013      	str	r3, [r2, #0]
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b68:	4613      	mov	r3, r2
 8011b6a:	009b      	lsls	r3, r3, #2
 8011b6c:	4413      	add	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	4a10      	ldr	r2, [pc, #64]	; (8011bb4 <xTaskPriorityInherit+0xe4>)
 8011b72:	441a      	add	r2, r3
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	3304      	adds	r3, #4
 8011b78:	4619      	mov	r1, r3
 8011b7a:	4610      	mov	r0, r2
 8011b7c:	f7fe fb74 	bl	8010268 <vListInsertEnd>
 8011b80:	e004      	b.n	8011b8c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b82:	4b0b      	ldr	r3, [pc, #44]	; (8011bb0 <xTaskPriorityInherit+0xe0>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	60fb      	str	r3, [r7, #12]
 8011b90:	e008      	b.n	8011ba4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b96:	4b06      	ldr	r3, [pc, #24]	; (8011bb0 <xTaskPriorityInherit+0xe0>)
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9c:	429a      	cmp	r2, r3
 8011b9e:	d201      	bcs.n	8011ba4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
	}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3710      	adds	r7, #16
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	2000369c 	.word	0x2000369c
 8011bb4:	200036a0 	.word	0x200036a0
 8011bb8:	200037a4 	.word	0x200037a4

08011bbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b086      	sub	sp, #24
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d06e      	beq.n	8011cb0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011bd2:	4b3a      	ldr	r3, [pc, #232]	; (8011cbc <xTaskPriorityDisinherit+0x100>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	693a      	ldr	r2, [r7, #16]
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d00a      	beq.n	8011bf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be0:	f383 8811 	msr	BASEPRI, r3
 8011be4:	f3bf 8f6f 	isb	sy
 8011be8:	f3bf 8f4f 	dsb	sy
 8011bec:	60fb      	str	r3, [r7, #12]
}
 8011bee:	bf00      	nop
 8011bf0:	e7fe      	b.n	8011bf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d10a      	bne.n	8011c10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfe:	f383 8811 	msr	BASEPRI, r3
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	60bb      	str	r3, [r7, #8]
}
 8011c0c:	bf00      	nop
 8011c0e:	e7fe      	b.n	8011c0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c14:	1e5a      	subs	r2, r3, #1
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d044      	beq.n	8011cb0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d140      	bne.n	8011cb0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	3304      	adds	r3, #4
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fe fb75 	bl	8010322 <uxListRemove>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d115      	bne.n	8011c6a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c42:	491f      	ldr	r1, [pc, #124]	; (8011cc0 <xTaskPriorityDisinherit+0x104>)
 8011c44:	4613      	mov	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4413      	add	r3, r2
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	440b      	add	r3, r1
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d10a      	bne.n	8011c6a <xTaskPriorityDisinherit+0xae>
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c58:	2201      	movs	r2, #1
 8011c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c5e:	43da      	mvns	r2, r3
 8011c60:	4b18      	ldr	r3, [pc, #96]	; (8011cc4 <xTaskPriorityDisinherit+0x108>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4013      	ands	r3, r2
 8011c66:	4a17      	ldr	r2, [pc, #92]	; (8011cc4 <xTaskPriorityDisinherit+0x108>)
 8011c68:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c76:	f1c3 0207 	rsb	r2, r3, #7
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c82:	2201      	movs	r2, #1
 8011c84:	409a      	lsls	r2, r3
 8011c86:	4b0f      	ldr	r3, [pc, #60]	; (8011cc4 <xTaskPriorityDisinherit+0x108>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4313      	orrs	r3, r2
 8011c8c:	4a0d      	ldr	r2, [pc, #52]	; (8011cc4 <xTaskPriorityDisinherit+0x108>)
 8011c8e:	6013      	str	r3, [r2, #0]
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c94:	4613      	mov	r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4413      	add	r3, r2
 8011c9a:	009b      	lsls	r3, r3, #2
 8011c9c:	4a08      	ldr	r2, [pc, #32]	; (8011cc0 <xTaskPriorityDisinherit+0x104>)
 8011c9e:	441a      	add	r2, r3
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	3304      	adds	r3, #4
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	f7fe fade 	bl	8010268 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011cac:	2301      	movs	r3, #1
 8011cae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cb0:	697b      	ldr	r3, [r7, #20]
	}
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	3718      	adds	r7, #24
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	bf00      	nop
 8011cbc:	2000369c 	.word	0x2000369c
 8011cc0:	200036a0 	.word	0x200036a0
 8011cc4:	200037a4 	.word	0x200037a4

08011cc8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b088      	sub	sp, #32
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
 8011cd0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d077      	beq.n	8011dd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ce0:	69bb      	ldr	r3, [r7, #24]
 8011ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d10a      	bne.n	8011cfe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	60fb      	str	r3, [r7, #12]
}
 8011cfa:	bf00      	nop
 8011cfc:	e7fe      	b.n	8011cfc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011cfe:	69bb      	ldr	r3, [r7, #24]
 8011d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d02:	683a      	ldr	r2, [r7, #0]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d902      	bls.n	8011d0e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	61fb      	str	r3, [r7, #28]
 8011d0c:	e002      	b.n	8011d14 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d18:	69fa      	ldr	r2, [r7, #28]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d058      	beq.n	8011dd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d22:	697a      	ldr	r2, [r7, #20]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d153      	bne.n	8011dd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011d28:	4b2b      	ldr	r3, [pc, #172]	; (8011dd8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	69ba      	ldr	r2, [r7, #24]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d10a      	bne.n	8011d48 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d36:	f383 8811 	msr	BASEPRI, r3
 8011d3a:	f3bf 8f6f 	isb	sy
 8011d3e:	f3bf 8f4f 	dsb	sy
 8011d42:	60bb      	str	r3, [r7, #8]
}
 8011d44:	bf00      	nop
 8011d46:	e7fe      	b.n	8011d46 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d4c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d4e:	69bb      	ldr	r3, [r7, #24]
 8011d50:	69fa      	ldr	r2, [r7, #28]
 8011d52:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	699b      	ldr	r3, [r3, #24]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	db04      	blt.n	8011d66 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	f1c3 0207 	rsb	r2, r3, #7
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	6959      	ldr	r1, [r3, #20]
 8011d6a:	693a      	ldr	r2, [r7, #16]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	4413      	add	r3, r2
 8011d72:	009b      	lsls	r3, r3, #2
 8011d74:	4a19      	ldr	r2, [pc, #100]	; (8011ddc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011d76:	4413      	add	r3, r2
 8011d78:	4299      	cmp	r1, r3
 8011d7a:	d129      	bne.n	8011dd0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	3304      	adds	r3, #4
 8011d80:	4618      	mov	r0, r3
 8011d82:	f7fe face 	bl	8010322 <uxListRemove>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d10a      	bne.n	8011da2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8011d8c:	69bb      	ldr	r3, [r7, #24]
 8011d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d90:	2201      	movs	r2, #1
 8011d92:	fa02 f303 	lsl.w	r3, r2, r3
 8011d96:	43da      	mvns	r2, r3
 8011d98:	4b11      	ldr	r3, [pc, #68]	; (8011de0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4013      	ands	r3, r2
 8011d9e:	4a10      	ldr	r2, [pc, #64]	; (8011de0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011da0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011da2:	69bb      	ldr	r3, [r7, #24]
 8011da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da6:	2201      	movs	r2, #1
 8011da8:	409a      	lsls	r2, r3
 8011daa:	4b0d      	ldr	r3, [pc, #52]	; (8011de0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	4313      	orrs	r3, r2
 8011db0:	4a0b      	ldr	r2, [pc, #44]	; (8011de0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011db2:	6013      	str	r3, [r2, #0]
 8011db4:	69bb      	ldr	r3, [r7, #24]
 8011db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db8:	4613      	mov	r3, r2
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	009b      	lsls	r3, r3, #2
 8011dc0:	4a06      	ldr	r2, [pc, #24]	; (8011ddc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011dc2:	441a      	add	r2, r3
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	3304      	adds	r3, #4
 8011dc8:	4619      	mov	r1, r3
 8011dca:	4610      	mov	r0, r2
 8011dcc:	f7fe fa4c 	bl	8010268 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011dd0:	bf00      	nop
 8011dd2:	3720      	adds	r7, #32
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	2000369c 	.word	0x2000369c
 8011ddc:	200036a0 	.word	0x200036a0
 8011de0:	200037a4 	.word	0x200037a4

08011de4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011de4:	b480      	push	{r7}
 8011de6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011de8:	4b07      	ldr	r3, [pc, #28]	; (8011e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d004      	beq.n	8011dfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011df0:	4b05      	ldr	r3, [pc, #20]	; (8011e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011df6:	3201      	adds	r2, #1
 8011df8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011dfa:	4b03      	ldr	r3, [pc, #12]	; (8011e08 <pvTaskIncrementMutexHeldCount+0x24>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
	}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	46bd      	mov	sp, r7
 8011e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e06:	4770      	bx	lr
 8011e08:	2000369c 	.word	0x2000369c

08011e0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011e16:	4b29      	ldr	r3, [pc, #164]	; (8011ebc <prvAddCurrentTaskToDelayedList+0xb0>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e1c:	4b28      	ldr	r3, [pc, #160]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	3304      	adds	r3, #4
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fe fa7d 	bl	8010322 <uxListRemove>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10b      	bne.n	8011e46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011e2e:	4b24      	ldr	r3, [pc, #144]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e34:	2201      	movs	r2, #1
 8011e36:	fa02 f303 	lsl.w	r3, r2, r3
 8011e3a:	43da      	mvns	r2, r3
 8011e3c:	4b21      	ldr	r3, [pc, #132]	; (8011ec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	4013      	ands	r3, r2
 8011e42:	4a20      	ldr	r2, [pc, #128]	; (8011ec4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e4c:	d10a      	bne.n	8011e64 <prvAddCurrentTaskToDelayedList+0x58>
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d007      	beq.n	8011e64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e54:	4b1a      	ldr	r3, [pc, #104]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	3304      	adds	r3, #4
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	481a      	ldr	r0, [pc, #104]	; (8011ec8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011e5e:	f7fe fa03 	bl	8010268 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011e62:	e026      	b.n	8011eb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	4413      	add	r3, r2
 8011e6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011e6c:	4b14      	ldr	r3, [pc, #80]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	68ba      	ldr	r2, [r7, #8]
 8011e72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011e74:	68ba      	ldr	r2, [r7, #8]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d209      	bcs.n	8011e90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e7c:	4b13      	ldr	r3, [pc, #76]	; (8011ecc <prvAddCurrentTaskToDelayedList+0xc0>)
 8011e7e:	681a      	ldr	r2, [r3, #0]
 8011e80:	4b0f      	ldr	r3, [pc, #60]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	3304      	adds	r3, #4
 8011e86:	4619      	mov	r1, r3
 8011e88:	4610      	mov	r0, r2
 8011e8a:	f7fe fa11 	bl	80102b0 <vListInsert>
}
 8011e8e:	e010      	b.n	8011eb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e90:	4b0f      	ldr	r3, [pc, #60]	; (8011ed0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011e92:	681a      	ldr	r2, [r3, #0]
 8011e94:	4b0a      	ldr	r3, [pc, #40]	; (8011ec0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	3304      	adds	r3, #4
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	f7fe fa07 	bl	80102b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011ea2:	4b0c      	ldr	r3, [pc, #48]	; (8011ed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	68ba      	ldr	r2, [r7, #8]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d202      	bcs.n	8011eb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011eac:	4a09      	ldr	r2, [pc, #36]	; (8011ed4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	6013      	str	r3, [r2, #0]
}
 8011eb2:	bf00      	nop
 8011eb4:	3710      	adds	r7, #16
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	200037a0 	.word	0x200037a0
 8011ec0:	2000369c 	.word	0x2000369c
 8011ec4:	200037a4 	.word	0x200037a4
 8011ec8:	20003788 	.word	0x20003788
 8011ecc:	20003758 	.word	0x20003758
 8011ed0:	20003754 	.word	0x20003754
 8011ed4:	200037bc 	.word	0x200037bc

08011ed8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b085      	sub	sp, #20
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	3b04      	subs	r3, #4
 8011ee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	3b04      	subs	r3, #4
 8011ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	f023 0201 	bic.w	r2, r3, #1
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	3b04      	subs	r3, #4
 8011f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011f08:	4a0c      	ldr	r2, [pc, #48]	; (8011f3c <pxPortInitialiseStack+0x64>)
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	3b14      	subs	r3, #20
 8011f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	3b04      	subs	r3, #4
 8011f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	f06f 0202 	mvn.w	r2, #2
 8011f26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	3b20      	subs	r3, #32
 8011f2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3714      	adds	r7, #20
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr
 8011f3c:	08011f41 	.word	0x08011f41

08011f40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011f40:	b480      	push	{r7}
 8011f42:	b085      	sub	sp, #20
 8011f44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011f46:	2300      	movs	r3, #0
 8011f48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011f4a:	4b12      	ldr	r3, [pc, #72]	; (8011f94 <prvTaskExitError+0x54>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f52:	d00a      	beq.n	8011f6a <prvTaskExitError+0x2a>
	__asm volatile
 8011f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f58:	f383 8811 	msr	BASEPRI, r3
 8011f5c:	f3bf 8f6f 	isb	sy
 8011f60:	f3bf 8f4f 	dsb	sy
 8011f64:	60fb      	str	r3, [r7, #12]
}
 8011f66:	bf00      	nop
 8011f68:	e7fe      	b.n	8011f68 <prvTaskExitError+0x28>
	__asm volatile
 8011f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	60bb      	str	r3, [r7, #8]
}
 8011f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f7e:	bf00      	nop
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d0fc      	beq.n	8011f80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f86:	bf00      	nop
 8011f88:	bf00      	nop
 8011f8a:	3714      	adds	r7, #20
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr
 8011f94:	20000164 	.word	0x20000164
	...

08011fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011fa0:	4b07      	ldr	r3, [pc, #28]	; (8011fc0 <pxCurrentTCBConst2>)
 8011fa2:	6819      	ldr	r1, [r3, #0]
 8011fa4:	6808      	ldr	r0, [r1, #0]
 8011fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011faa:	f380 8809 	msr	PSP, r0
 8011fae:	f3bf 8f6f 	isb	sy
 8011fb2:	f04f 0000 	mov.w	r0, #0
 8011fb6:	f380 8811 	msr	BASEPRI, r0
 8011fba:	4770      	bx	lr
 8011fbc:	f3af 8000 	nop.w

08011fc0 <pxCurrentTCBConst2>:
 8011fc0:	2000369c 	.word	0x2000369c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011fc4:	bf00      	nop
 8011fc6:	bf00      	nop

08011fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011fc8:	4808      	ldr	r0, [pc, #32]	; (8011fec <prvPortStartFirstTask+0x24>)
 8011fca:	6800      	ldr	r0, [r0, #0]
 8011fcc:	6800      	ldr	r0, [r0, #0]
 8011fce:	f380 8808 	msr	MSP, r0
 8011fd2:	f04f 0000 	mov.w	r0, #0
 8011fd6:	f380 8814 	msr	CONTROL, r0
 8011fda:	b662      	cpsie	i
 8011fdc:	b661      	cpsie	f
 8011fde:	f3bf 8f4f 	dsb	sy
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	df00      	svc	0
 8011fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011fea:	bf00      	nop
 8011fec:	e000ed08 	.word	0xe000ed08

08011ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011ff6:	4b46      	ldr	r3, [pc, #280]	; (8012110 <xPortStartScheduler+0x120>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a46      	ldr	r2, [pc, #280]	; (8012114 <xPortStartScheduler+0x124>)
 8011ffc:	4293      	cmp	r3, r2
 8011ffe:	d10a      	bne.n	8012016 <xPortStartScheduler+0x26>
	__asm volatile
 8012000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012004:	f383 8811 	msr	BASEPRI, r3
 8012008:	f3bf 8f6f 	isb	sy
 801200c:	f3bf 8f4f 	dsb	sy
 8012010:	613b      	str	r3, [r7, #16]
}
 8012012:	bf00      	nop
 8012014:	e7fe      	b.n	8012014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012016:	4b3e      	ldr	r3, [pc, #248]	; (8012110 <xPortStartScheduler+0x120>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	4a3f      	ldr	r2, [pc, #252]	; (8012118 <xPortStartScheduler+0x128>)
 801201c:	4293      	cmp	r3, r2
 801201e:	d10a      	bne.n	8012036 <xPortStartScheduler+0x46>
	__asm volatile
 8012020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	60fb      	str	r3, [r7, #12]
}
 8012032:	bf00      	nop
 8012034:	e7fe      	b.n	8012034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012036:	4b39      	ldr	r3, [pc, #228]	; (801211c <xPortStartScheduler+0x12c>)
 8012038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	b2db      	uxtb	r3, r3
 8012040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	22ff      	movs	r2, #255	; 0xff
 8012046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	b2db      	uxtb	r3, r3
 801204e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012050:	78fb      	ldrb	r3, [r7, #3]
 8012052:	b2db      	uxtb	r3, r3
 8012054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012058:	b2da      	uxtb	r2, r3
 801205a:	4b31      	ldr	r3, [pc, #196]	; (8012120 <xPortStartScheduler+0x130>)
 801205c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801205e:	4b31      	ldr	r3, [pc, #196]	; (8012124 <xPortStartScheduler+0x134>)
 8012060:	2207      	movs	r2, #7
 8012062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012064:	e009      	b.n	801207a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012066:	4b2f      	ldr	r3, [pc, #188]	; (8012124 <xPortStartScheduler+0x134>)
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	3b01      	subs	r3, #1
 801206c:	4a2d      	ldr	r2, [pc, #180]	; (8012124 <xPortStartScheduler+0x134>)
 801206e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012070:	78fb      	ldrb	r3, [r7, #3]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	005b      	lsls	r3, r3, #1
 8012076:	b2db      	uxtb	r3, r3
 8012078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801207a:	78fb      	ldrb	r3, [r7, #3]
 801207c:	b2db      	uxtb	r3, r3
 801207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012082:	2b80      	cmp	r3, #128	; 0x80
 8012084:	d0ef      	beq.n	8012066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012086:	4b27      	ldr	r3, [pc, #156]	; (8012124 <xPortStartScheduler+0x134>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f1c3 0307 	rsb	r3, r3, #7
 801208e:	2b04      	cmp	r3, #4
 8012090:	d00a      	beq.n	80120a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	f383 8811 	msr	BASEPRI, r3
 801209a:	f3bf 8f6f 	isb	sy
 801209e:	f3bf 8f4f 	dsb	sy
 80120a2:	60bb      	str	r3, [r7, #8]
}
 80120a4:	bf00      	nop
 80120a6:	e7fe      	b.n	80120a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80120a8:	4b1e      	ldr	r3, [pc, #120]	; (8012124 <xPortStartScheduler+0x134>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	021b      	lsls	r3, r3, #8
 80120ae:	4a1d      	ldr	r2, [pc, #116]	; (8012124 <xPortStartScheduler+0x134>)
 80120b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80120b2:	4b1c      	ldr	r3, [pc, #112]	; (8012124 <xPortStartScheduler+0x134>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80120ba:	4a1a      	ldr	r2, [pc, #104]	; (8012124 <xPortStartScheduler+0x134>)
 80120bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	b2da      	uxtb	r2, r3
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80120c6:	4b18      	ldr	r3, [pc, #96]	; (8012128 <xPortStartScheduler+0x138>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	4a17      	ldr	r2, [pc, #92]	; (8012128 <xPortStartScheduler+0x138>)
 80120cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80120d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80120d2:	4b15      	ldr	r3, [pc, #84]	; (8012128 <xPortStartScheduler+0x138>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	4a14      	ldr	r2, [pc, #80]	; (8012128 <xPortStartScheduler+0x138>)
 80120d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80120dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80120de:	f000 f8dd 	bl	801229c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80120e2:	4b12      	ldr	r3, [pc, #72]	; (801212c <xPortStartScheduler+0x13c>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80120e8:	f000 f8fc 	bl	80122e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80120ec:	4b10      	ldr	r3, [pc, #64]	; (8012130 <xPortStartScheduler+0x140>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4a0f      	ldr	r2, [pc, #60]	; (8012130 <xPortStartScheduler+0x140>)
 80120f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80120f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80120f8:	f7ff ff66 	bl	8011fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80120fc:	f7ff fa8e 	bl	801161c <vTaskSwitchContext>
	prvTaskExitError();
 8012100:	f7ff ff1e 	bl	8011f40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3718      	adds	r7, #24
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	e000ed00 	.word	0xe000ed00
 8012114:	410fc271 	.word	0x410fc271
 8012118:	410fc270 	.word	0x410fc270
 801211c:	e000e400 	.word	0xe000e400
 8012120:	200037c8 	.word	0x200037c8
 8012124:	200037cc 	.word	0x200037cc
 8012128:	e000ed20 	.word	0xe000ed20
 801212c:	20000164 	.word	0x20000164
 8012130:	e000ef34 	.word	0xe000ef34

08012134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
	__asm volatile
 801213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213e:	f383 8811 	msr	BASEPRI, r3
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	607b      	str	r3, [r7, #4]
}
 801214c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801214e:	4b0f      	ldr	r3, [pc, #60]	; (801218c <vPortEnterCritical+0x58>)
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	3301      	adds	r3, #1
 8012154:	4a0d      	ldr	r2, [pc, #52]	; (801218c <vPortEnterCritical+0x58>)
 8012156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012158:	4b0c      	ldr	r3, [pc, #48]	; (801218c <vPortEnterCritical+0x58>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b01      	cmp	r3, #1
 801215e:	d10f      	bne.n	8012180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012160:	4b0b      	ldr	r3, [pc, #44]	; (8012190 <vPortEnterCritical+0x5c>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	b2db      	uxtb	r3, r3
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00a      	beq.n	8012180 <vPortEnterCritical+0x4c>
	__asm volatile
 801216a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216e:	f383 8811 	msr	BASEPRI, r3
 8012172:	f3bf 8f6f 	isb	sy
 8012176:	f3bf 8f4f 	dsb	sy
 801217a:	603b      	str	r3, [r7, #0]
}
 801217c:	bf00      	nop
 801217e:	e7fe      	b.n	801217e <vPortEnterCritical+0x4a>
	}
}
 8012180:	bf00      	nop
 8012182:	370c      	adds	r7, #12
 8012184:	46bd      	mov	sp, r7
 8012186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218a:	4770      	bx	lr
 801218c:	20000164 	.word	0x20000164
 8012190:	e000ed04 	.word	0xe000ed04

08012194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012194:	b480      	push	{r7}
 8012196:	b083      	sub	sp, #12
 8012198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801219a:	4b12      	ldr	r3, [pc, #72]	; (80121e4 <vPortExitCritical+0x50>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d10a      	bne.n	80121b8 <vPortExitCritical+0x24>
	__asm volatile
 80121a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a6:	f383 8811 	msr	BASEPRI, r3
 80121aa:	f3bf 8f6f 	isb	sy
 80121ae:	f3bf 8f4f 	dsb	sy
 80121b2:	607b      	str	r3, [r7, #4]
}
 80121b4:	bf00      	nop
 80121b6:	e7fe      	b.n	80121b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80121b8:	4b0a      	ldr	r3, [pc, #40]	; (80121e4 <vPortExitCritical+0x50>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	3b01      	subs	r3, #1
 80121be:	4a09      	ldr	r2, [pc, #36]	; (80121e4 <vPortExitCritical+0x50>)
 80121c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80121c2:	4b08      	ldr	r3, [pc, #32]	; (80121e4 <vPortExitCritical+0x50>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d105      	bne.n	80121d6 <vPortExitCritical+0x42>
 80121ca:	2300      	movs	r3, #0
 80121cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	f383 8811 	msr	BASEPRI, r3
}
 80121d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80121d6:	bf00      	nop
 80121d8:	370c      	adds	r7, #12
 80121da:	46bd      	mov	sp, r7
 80121dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e0:	4770      	bx	lr
 80121e2:	bf00      	nop
 80121e4:	20000164 	.word	0x20000164
	...

080121f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80121f0:	f3ef 8009 	mrs	r0, PSP
 80121f4:	f3bf 8f6f 	isb	sy
 80121f8:	4b15      	ldr	r3, [pc, #84]	; (8012250 <pxCurrentTCBConst>)
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	f01e 0f10 	tst.w	lr, #16
 8012200:	bf08      	it	eq
 8012202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801220a:	6010      	str	r0, [r2, #0]
 801220c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012214:	f380 8811 	msr	BASEPRI, r0
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	f7ff f9fc 	bl	801161c <vTaskSwitchContext>
 8012224:	f04f 0000 	mov.w	r0, #0
 8012228:	f380 8811 	msr	BASEPRI, r0
 801222c:	bc09      	pop	{r0, r3}
 801222e:	6819      	ldr	r1, [r3, #0]
 8012230:	6808      	ldr	r0, [r1, #0]
 8012232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012236:	f01e 0f10 	tst.w	lr, #16
 801223a:	bf08      	it	eq
 801223c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012240:	f380 8809 	msr	PSP, r0
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	f3af 8000 	nop.w

08012250 <pxCurrentTCBConst>:
 8012250:	2000369c 	.word	0x2000369c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012254:	bf00      	nop
 8012256:	bf00      	nop

08012258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
	__asm volatile
 801225e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012262:	f383 8811 	msr	BASEPRI, r3
 8012266:	f3bf 8f6f 	isb	sy
 801226a:	f3bf 8f4f 	dsb	sy
 801226e:	607b      	str	r3, [r7, #4]
}
 8012270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012272:	f7ff f91b 	bl	80114ac <xTaskIncrementTick>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d003      	beq.n	8012284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801227c:	4b06      	ldr	r3, [pc, #24]	; (8012298 <SysTick_Handler+0x40>)
 801227e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012282:	601a      	str	r2, [r3, #0]
 8012284:	2300      	movs	r3, #0
 8012286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	f383 8811 	msr	BASEPRI, r3
}
 801228e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012290:	bf00      	nop
 8012292:	3708      	adds	r7, #8
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	e000ed04 	.word	0xe000ed04

0801229c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801229c:	b480      	push	{r7}
 801229e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80122a0:	4b0b      	ldr	r3, [pc, #44]	; (80122d0 <vPortSetupTimerInterrupt+0x34>)
 80122a2:	2200      	movs	r2, #0
 80122a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80122a6:	4b0b      	ldr	r3, [pc, #44]	; (80122d4 <vPortSetupTimerInterrupt+0x38>)
 80122a8:	2200      	movs	r2, #0
 80122aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80122ac:	4b0a      	ldr	r3, [pc, #40]	; (80122d8 <vPortSetupTimerInterrupt+0x3c>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	4a0a      	ldr	r2, [pc, #40]	; (80122dc <vPortSetupTimerInterrupt+0x40>)
 80122b2:	fba2 2303 	umull	r2, r3, r2, r3
 80122b6:	099b      	lsrs	r3, r3, #6
 80122b8:	4a09      	ldr	r2, [pc, #36]	; (80122e0 <vPortSetupTimerInterrupt+0x44>)
 80122ba:	3b01      	subs	r3, #1
 80122bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80122be:	4b04      	ldr	r3, [pc, #16]	; (80122d0 <vPortSetupTimerInterrupt+0x34>)
 80122c0:	2207      	movs	r2, #7
 80122c2:	601a      	str	r2, [r3, #0]
}
 80122c4:	bf00      	nop
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop
 80122d0:	e000e010 	.word	0xe000e010
 80122d4:	e000e018 	.word	0xe000e018
 80122d8:	20000144 	.word	0x20000144
 80122dc:	10624dd3 	.word	0x10624dd3
 80122e0:	e000e014 	.word	0xe000e014

080122e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80122e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80122f4 <vPortEnableVFP+0x10>
 80122e8:	6801      	ldr	r1, [r0, #0]
 80122ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80122ee:	6001      	str	r1, [r0, #0]
 80122f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80122f2:	bf00      	nop
 80122f4:	e000ed88 	.word	0xe000ed88

080122f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80122f8:	b480      	push	{r7}
 80122fa:	b085      	sub	sp, #20
 80122fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80122fe:	f3ef 8305 	mrs	r3, IPSR
 8012302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	2b0f      	cmp	r3, #15
 8012308:	d914      	bls.n	8012334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801230a:	4a17      	ldr	r2, [pc, #92]	; (8012368 <vPortValidateInterruptPriority+0x70>)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4413      	add	r3, r2
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012314:	4b15      	ldr	r3, [pc, #84]	; (801236c <vPortValidateInterruptPriority+0x74>)
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	7afa      	ldrb	r2, [r7, #11]
 801231a:	429a      	cmp	r2, r3
 801231c:	d20a      	bcs.n	8012334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012322:	f383 8811 	msr	BASEPRI, r3
 8012326:	f3bf 8f6f 	isb	sy
 801232a:	f3bf 8f4f 	dsb	sy
 801232e:	607b      	str	r3, [r7, #4]
}
 8012330:	bf00      	nop
 8012332:	e7fe      	b.n	8012332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012334:	4b0e      	ldr	r3, [pc, #56]	; (8012370 <vPortValidateInterruptPriority+0x78>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801233c:	4b0d      	ldr	r3, [pc, #52]	; (8012374 <vPortValidateInterruptPriority+0x7c>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	429a      	cmp	r2, r3
 8012342:	d90a      	bls.n	801235a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012348:	f383 8811 	msr	BASEPRI, r3
 801234c:	f3bf 8f6f 	isb	sy
 8012350:	f3bf 8f4f 	dsb	sy
 8012354:	603b      	str	r3, [r7, #0]
}
 8012356:	bf00      	nop
 8012358:	e7fe      	b.n	8012358 <vPortValidateInterruptPriority+0x60>
	}
 801235a:	bf00      	nop
 801235c:	3714      	adds	r7, #20
 801235e:	46bd      	mov	sp, r7
 8012360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012364:	4770      	bx	lr
 8012366:	bf00      	nop
 8012368:	e000e3f0 	.word	0xe000e3f0
 801236c:	200037c8 	.word	0x200037c8
 8012370:	e000ed0c 	.word	0xe000ed0c
 8012374:	200037cc 	.word	0x200037cc

08012378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b08a      	sub	sp, #40	; 0x28
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012380:	2300      	movs	r3, #0
 8012382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012384:	f7fe ffe8 	bl	8011358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012388:	4b5b      	ldr	r3, [pc, #364]	; (80124f8 <pvPortMalloc+0x180>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012390:	f000 f920 	bl	80125d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012394:	4b59      	ldr	r3, [pc, #356]	; (80124fc <pvPortMalloc+0x184>)
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	4013      	ands	r3, r2
 801239c:	2b00      	cmp	r3, #0
 801239e:	f040 8093 	bne.w	80124c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d01d      	beq.n	80123e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80123a8:	2208      	movs	r2, #8
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	4413      	add	r3, r2
 80123ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f003 0307 	and.w	r3, r3, #7
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d014      	beq.n	80123e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f023 0307 	bic.w	r3, r3, #7
 80123c0:	3308      	adds	r3, #8
 80123c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f003 0307 	and.w	r3, r3, #7
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d00a      	beq.n	80123e4 <pvPortMalloc+0x6c>
	__asm volatile
 80123ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123d2:	f383 8811 	msr	BASEPRI, r3
 80123d6:	f3bf 8f6f 	isb	sy
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	617b      	str	r3, [r7, #20]
}
 80123e0:	bf00      	nop
 80123e2:	e7fe      	b.n	80123e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d06e      	beq.n	80124c8 <pvPortMalloc+0x150>
 80123ea:	4b45      	ldr	r3, [pc, #276]	; (8012500 <pvPortMalloc+0x188>)
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	687a      	ldr	r2, [r7, #4]
 80123f0:	429a      	cmp	r2, r3
 80123f2:	d869      	bhi.n	80124c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80123f4:	4b43      	ldr	r3, [pc, #268]	; (8012504 <pvPortMalloc+0x18c>)
 80123f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80123f8:	4b42      	ldr	r3, [pc, #264]	; (8012504 <pvPortMalloc+0x18c>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80123fe:	e004      	b.n	801240a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	429a      	cmp	r2, r3
 8012412:	d903      	bls.n	801241c <pvPortMalloc+0xa4>
 8012414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d1f1      	bne.n	8012400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801241c:	4b36      	ldr	r3, [pc, #216]	; (80124f8 <pvPortMalloc+0x180>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012422:	429a      	cmp	r2, r3
 8012424:	d050      	beq.n	80124c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012426:	6a3b      	ldr	r3, [r7, #32]
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2208      	movs	r2, #8
 801242c:	4413      	add	r3, r2
 801242e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	681a      	ldr	r2, [r3, #0]
 8012434:	6a3b      	ldr	r3, [r7, #32]
 8012436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243a:	685a      	ldr	r2, [r3, #4]
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	1ad2      	subs	r2, r2, r3
 8012440:	2308      	movs	r3, #8
 8012442:	005b      	lsls	r3, r3, #1
 8012444:	429a      	cmp	r2, r3
 8012446:	d91f      	bls.n	8012488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	4413      	add	r3, r2
 801244e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012450:	69bb      	ldr	r3, [r7, #24]
 8012452:	f003 0307 	and.w	r3, r3, #7
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00a      	beq.n	8012470 <pvPortMalloc+0xf8>
	__asm volatile
 801245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	613b      	str	r3, [r7, #16]
}
 801246c:	bf00      	nop
 801246e:	e7fe      	b.n	801246e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012472:	685a      	ldr	r2, [r3, #4]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	1ad2      	subs	r2, r2, r3
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	687a      	ldr	r2, [r7, #4]
 8012480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012482:	69b8      	ldr	r0, [r7, #24]
 8012484:	f000 f908 	bl	8012698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012488:	4b1d      	ldr	r3, [pc, #116]	; (8012500 <pvPortMalloc+0x188>)
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248e:	685b      	ldr	r3, [r3, #4]
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	4a1b      	ldr	r2, [pc, #108]	; (8012500 <pvPortMalloc+0x188>)
 8012494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012496:	4b1a      	ldr	r3, [pc, #104]	; (8012500 <pvPortMalloc+0x188>)
 8012498:	681a      	ldr	r2, [r3, #0]
 801249a:	4b1b      	ldr	r3, [pc, #108]	; (8012508 <pvPortMalloc+0x190>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d203      	bcs.n	80124aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80124a2:	4b17      	ldr	r3, [pc, #92]	; (8012500 <pvPortMalloc+0x188>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	4a18      	ldr	r2, [pc, #96]	; (8012508 <pvPortMalloc+0x190>)
 80124a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80124aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ac:	685a      	ldr	r2, [r3, #4]
 80124ae:	4b13      	ldr	r3, [pc, #76]	; (80124fc <pvPortMalloc+0x184>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	431a      	orrs	r2, r3
 80124b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80124b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ba:	2200      	movs	r2, #0
 80124bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80124be:	4b13      	ldr	r3, [pc, #76]	; (801250c <pvPortMalloc+0x194>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	3301      	adds	r3, #1
 80124c4:	4a11      	ldr	r2, [pc, #68]	; (801250c <pvPortMalloc+0x194>)
 80124c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80124c8:	f7fe ff54 	bl	8011374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	f003 0307 	and.w	r3, r3, #7
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00a      	beq.n	80124ec <pvPortMalloc+0x174>
	__asm volatile
 80124d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124da:	f383 8811 	msr	BASEPRI, r3
 80124de:	f3bf 8f6f 	isb	sy
 80124e2:	f3bf 8f4f 	dsb	sy
 80124e6:	60fb      	str	r3, [r7, #12]
}
 80124e8:	bf00      	nop
 80124ea:	e7fe      	b.n	80124ea <pvPortMalloc+0x172>
	return pvReturn;
 80124ec:	69fb      	ldr	r3, [r7, #28]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3728      	adds	r7, #40	; 0x28
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	200073d8 	.word	0x200073d8
 80124fc:	200073ec 	.word	0x200073ec
 8012500:	200073dc 	.word	0x200073dc
 8012504:	200073d0 	.word	0x200073d0
 8012508:	200073e0 	.word	0x200073e0
 801250c:	200073e4 	.word	0x200073e4

08012510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b086      	sub	sp, #24
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d04d      	beq.n	80125be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012522:	2308      	movs	r3, #8
 8012524:	425b      	negs	r3, r3
 8012526:	697a      	ldr	r2, [r7, #20]
 8012528:	4413      	add	r3, r2
 801252a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	685a      	ldr	r2, [r3, #4]
 8012534:	4b24      	ldr	r3, [pc, #144]	; (80125c8 <vPortFree+0xb8>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	4013      	ands	r3, r2
 801253a:	2b00      	cmp	r3, #0
 801253c:	d10a      	bne.n	8012554 <vPortFree+0x44>
	__asm volatile
 801253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012542:	f383 8811 	msr	BASEPRI, r3
 8012546:	f3bf 8f6f 	isb	sy
 801254a:	f3bf 8f4f 	dsb	sy
 801254e:	60fb      	str	r3, [r7, #12]
}
 8012550:	bf00      	nop
 8012552:	e7fe      	b.n	8012552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00a      	beq.n	8012572 <vPortFree+0x62>
	__asm volatile
 801255c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012560:	f383 8811 	msr	BASEPRI, r3
 8012564:	f3bf 8f6f 	isb	sy
 8012568:	f3bf 8f4f 	dsb	sy
 801256c:	60bb      	str	r3, [r7, #8]
}
 801256e:	bf00      	nop
 8012570:	e7fe      	b.n	8012570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	685a      	ldr	r2, [r3, #4]
 8012576:	4b14      	ldr	r3, [pc, #80]	; (80125c8 <vPortFree+0xb8>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4013      	ands	r3, r2
 801257c:	2b00      	cmp	r3, #0
 801257e:	d01e      	beq.n	80125be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012580:	693b      	ldr	r3, [r7, #16]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d11a      	bne.n	80125be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	685a      	ldr	r2, [r3, #4]
 801258c:	4b0e      	ldr	r3, [pc, #56]	; (80125c8 <vPortFree+0xb8>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	43db      	mvns	r3, r3
 8012592:	401a      	ands	r2, r3
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012598:	f7fe fede 	bl	8011358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	685a      	ldr	r2, [r3, #4]
 80125a0:	4b0a      	ldr	r3, [pc, #40]	; (80125cc <vPortFree+0xbc>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	4413      	add	r3, r2
 80125a6:	4a09      	ldr	r2, [pc, #36]	; (80125cc <vPortFree+0xbc>)
 80125a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80125aa:	6938      	ldr	r0, [r7, #16]
 80125ac:	f000 f874 	bl	8012698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80125b0:	4b07      	ldr	r3, [pc, #28]	; (80125d0 <vPortFree+0xc0>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	3301      	adds	r3, #1
 80125b6:	4a06      	ldr	r2, [pc, #24]	; (80125d0 <vPortFree+0xc0>)
 80125b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80125ba:	f7fe fedb 	bl	8011374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80125be:	bf00      	nop
 80125c0:	3718      	adds	r7, #24
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}
 80125c6:	bf00      	nop
 80125c8:	200073ec 	.word	0x200073ec
 80125cc:	200073dc 	.word	0x200073dc
 80125d0:	200073e8 	.word	0x200073e8

080125d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80125d4:	b480      	push	{r7}
 80125d6:	b085      	sub	sp, #20
 80125d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80125da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80125de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80125e0:	4b27      	ldr	r3, [pc, #156]	; (8012680 <prvHeapInit+0xac>)
 80125e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f003 0307 	and.w	r3, r3, #7
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d00c      	beq.n	8012608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	3307      	adds	r3, #7
 80125f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	f023 0307 	bic.w	r3, r3, #7
 80125fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80125fc:	68ba      	ldr	r2, [r7, #8]
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	1ad3      	subs	r3, r2, r3
 8012602:	4a1f      	ldr	r2, [pc, #124]	; (8012680 <prvHeapInit+0xac>)
 8012604:	4413      	add	r3, r2
 8012606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801260c:	4a1d      	ldr	r2, [pc, #116]	; (8012684 <prvHeapInit+0xb0>)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012612:	4b1c      	ldr	r3, [pc, #112]	; (8012684 <prvHeapInit+0xb0>)
 8012614:	2200      	movs	r2, #0
 8012616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	68ba      	ldr	r2, [r7, #8]
 801261c:	4413      	add	r3, r2
 801261e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012620:	2208      	movs	r2, #8
 8012622:	68fb      	ldr	r3, [r7, #12]
 8012624:	1a9b      	subs	r3, r3, r2
 8012626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f023 0307 	bic.w	r3, r3, #7
 801262e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	4a15      	ldr	r2, [pc, #84]	; (8012688 <prvHeapInit+0xb4>)
 8012634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012636:	4b14      	ldr	r3, [pc, #80]	; (8012688 <prvHeapInit+0xb4>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	2200      	movs	r2, #0
 801263c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801263e:	4b12      	ldr	r3, [pc, #72]	; (8012688 <prvHeapInit+0xb4>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	1ad2      	subs	r2, r2, r3
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012654:	4b0c      	ldr	r3, [pc, #48]	; (8012688 <prvHeapInit+0xb4>)
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	4a0a      	ldr	r2, [pc, #40]	; (801268c <prvHeapInit+0xb8>)
 8012662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4a09      	ldr	r2, [pc, #36]	; (8012690 <prvHeapInit+0xbc>)
 801266a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801266c:	4b09      	ldr	r3, [pc, #36]	; (8012694 <prvHeapInit+0xc0>)
 801266e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012672:	601a      	str	r2, [r3, #0]
}
 8012674:	bf00      	nop
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr
 8012680:	200037d0 	.word	0x200037d0
 8012684:	200073d0 	.word	0x200073d0
 8012688:	200073d8 	.word	0x200073d8
 801268c:	200073e0 	.word	0x200073e0
 8012690:	200073dc 	.word	0x200073dc
 8012694:	200073ec 	.word	0x200073ec

08012698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012698:	b480      	push	{r7}
 801269a:	b085      	sub	sp, #20
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80126a0:	4b28      	ldr	r3, [pc, #160]	; (8012744 <prvInsertBlockIntoFreeList+0xac>)
 80126a2:	60fb      	str	r3, [r7, #12]
 80126a4:	e002      	b.n	80126ac <prvInsertBlockIntoFreeList+0x14>
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	60fb      	str	r3, [r7, #12]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	687a      	ldr	r2, [r7, #4]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d8f7      	bhi.n	80126a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	685b      	ldr	r3, [r3, #4]
 80126be:	68ba      	ldr	r2, [r7, #8]
 80126c0:	4413      	add	r3, r2
 80126c2:	687a      	ldr	r2, [r7, #4]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d108      	bne.n	80126da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	685a      	ldr	r2, [r3, #4]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	441a      	add	r2, r3
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	68ba      	ldr	r2, [r7, #8]
 80126e4:	441a      	add	r2, r3
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d118      	bne.n	8012720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	4b15      	ldr	r3, [pc, #84]	; (8012748 <prvInsertBlockIntoFreeList+0xb0>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d00d      	beq.n	8012716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	685a      	ldr	r2, [r3, #4]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	441a      	add	r2, r3
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	681a      	ldr	r2, [r3, #0]
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	601a      	str	r2, [r3, #0]
 8012714:	e008      	b.n	8012728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012716:	4b0c      	ldr	r3, [pc, #48]	; (8012748 <prvInsertBlockIntoFreeList+0xb0>)
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	601a      	str	r2, [r3, #0]
 801271e:	e003      	b.n	8012728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012728:	68fa      	ldr	r2, [r7, #12]
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	429a      	cmp	r2, r3
 801272e:	d002      	beq.n	8012736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012736:	bf00      	nop
 8012738:	3714      	adds	r7, #20
 801273a:	46bd      	mov	sp, r7
 801273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012740:	4770      	bx	lr
 8012742:	bf00      	nop
 8012744:	200073d0 	.word	0x200073d0
 8012748:	200073d8 	.word	0x200073d8

0801274c <sulp>:
 801274c:	b570      	push	{r4, r5, r6, lr}
 801274e:	4604      	mov	r4, r0
 8012750:	460d      	mov	r5, r1
 8012752:	ec45 4b10 	vmov	d0, r4, r5
 8012756:	4616      	mov	r6, r2
 8012758:	f003 fd1e 	bl	8016198 <__ulp>
 801275c:	ec51 0b10 	vmov	r0, r1, d0
 8012760:	b17e      	cbz	r6, 8012782 <sulp+0x36>
 8012762:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012766:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801276a:	2b00      	cmp	r3, #0
 801276c:	dd09      	ble.n	8012782 <sulp+0x36>
 801276e:	051b      	lsls	r3, r3, #20
 8012770:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012774:	2400      	movs	r4, #0
 8012776:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801277a:	4622      	mov	r2, r4
 801277c:	462b      	mov	r3, r5
 801277e:	f7ed ff3b 	bl	80005f8 <__aeabi_dmul>
 8012782:	bd70      	pop	{r4, r5, r6, pc}
 8012784:	0000      	movs	r0, r0
	...

08012788 <_strtod_l>:
 8012788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278c:	ed2d 8b02 	vpush	{d8}
 8012790:	b09b      	sub	sp, #108	; 0x6c
 8012792:	4604      	mov	r4, r0
 8012794:	9213      	str	r2, [sp, #76]	; 0x4c
 8012796:	2200      	movs	r2, #0
 8012798:	9216      	str	r2, [sp, #88]	; 0x58
 801279a:	460d      	mov	r5, r1
 801279c:	f04f 0800 	mov.w	r8, #0
 80127a0:	f04f 0900 	mov.w	r9, #0
 80127a4:	460a      	mov	r2, r1
 80127a6:	9215      	str	r2, [sp, #84]	; 0x54
 80127a8:	7811      	ldrb	r1, [r2, #0]
 80127aa:	292b      	cmp	r1, #43	; 0x2b
 80127ac:	d04c      	beq.n	8012848 <_strtod_l+0xc0>
 80127ae:	d83a      	bhi.n	8012826 <_strtod_l+0x9e>
 80127b0:	290d      	cmp	r1, #13
 80127b2:	d834      	bhi.n	801281e <_strtod_l+0x96>
 80127b4:	2908      	cmp	r1, #8
 80127b6:	d834      	bhi.n	8012822 <_strtod_l+0x9a>
 80127b8:	2900      	cmp	r1, #0
 80127ba:	d03d      	beq.n	8012838 <_strtod_l+0xb0>
 80127bc:	2200      	movs	r2, #0
 80127be:	920a      	str	r2, [sp, #40]	; 0x28
 80127c0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80127c2:	7832      	ldrb	r2, [r6, #0]
 80127c4:	2a30      	cmp	r2, #48	; 0x30
 80127c6:	f040 80b4 	bne.w	8012932 <_strtod_l+0x1aa>
 80127ca:	7872      	ldrb	r2, [r6, #1]
 80127cc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80127d0:	2a58      	cmp	r2, #88	; 0x58
 80127d2:	d170      	bne.n	80128b6 <_strtod_l+0x12e>
 80127d4:	9302      	str	r3, [sp, #8]
 80127d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127d8:	9301      	str	r3, [sp, #4]
 80127da:	ab16      	add	r3, sp, #88	; 0x58
 80127dc:	9300      	str	r3, [sp, #0]
 80127de:	4a8e      	ldr	r2, [pc, #568]	; (8012a18 <_strtod_l+0x290>)
 80127e0:	ab17      	add	r3, sp, #92	; 0x5c
 80127e2:	a915      	add	r1, sp, #84	; 0x54
 80127e4:	4620      	mov	r0, r4
 80127e6:	f002 fdb5 	bl	8015354 <__gethex>
 80127ea:	f010 070f 	ands.w	r7, r0, #15
 80127ee:	4605      	mov	r5, r0
 80127f0:	d005      	beq.n	80127fe <_strtod_l+0x76>
 80127f2:	2f06      	cmp	r7, #6
 80127f4:	d12a      	bne.n	801284c <_strtod_l+0xc4>
 80127f6:	3601      	adds	r6, #1
 80127f8:	2300      	movs	r3, #0
 80127fa:	9615      	str	r6, [sp, #84]	; 0x54
 80127fc:	930a      	str	r3, [sp, #40]	; 0x28
 80127fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012800:	2b00      	cmp	r3, #0
 8012802:	f040 857f 	bne.w	8013304 <_strtod_l+0xb7c>
 8012806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012808:	b1db      	cbz	r3, 8012842 <_strtod_l+0xba>
 801280a:	4642      	mov	r2, r8
 801280c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012810:	ec43 2b10 	vmov	d0, r2, r3
 8012814:	b01b      	add	sp, #108	; 0x6c
 8012816:	ecbd 8b02 	vpop	{d8}
 801281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281e:	2920      	cmp	r1, #32
 8012820:	d1cc      	bne.n	80127bc <_strtod_l+0x34>
 8012822:	3201      	adds	r2, #1
 8012824:	e7bf      	b.n	80127a6 <_strtod_l+0x1e>
 8012826:	292d      	cmp	r1, #45	; 0x2d
 8012828:	d1c8      	bne.n	80127bc <_strtod_l+0x34>
 801282a:	2101      	movs	r1, #1
 801282c:	910a      	str	r1, [sp, #40]	; 0x28
 801282e:	1c51      	adds	r1, r2, #1
 8012830:	9115      	str	r1, [sp, #84]	; 0x54
 8012832:	7852      	ldrb	r2, [r2, #1]
 8012834:	2a00      	cmp	r2, #0
 8012836:	d1c3      	bne.n	80127c0 <_strtod_l+0x38>
 8012838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801283a:	9515      	str	r5, [sp, #84]	; 0x54
 801283c:	2b00      	cmp	r3, #0
 801283e:	f040 855f 	bne.w	8013300 <_strtod_l+0xb78>
 8012842:	4642      	mov	r2, r8
 8012844:	464b      	mov	r3, r9
 8012846:	e7e3      	b.n	8012810 <_strtod_l+0x88>
 8012848:	2100      	movs	r1, #0
 801284a:	e7ef      	b.n	801282c <_strtod_l+0xa4>
 801284c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801284e:	b13a      	cbz	r2, 8012860 <_strtod_l+0xd8>
 8012850:	2135      	movs	r1, #53	; 0x35
 8012852:	a818      	add	r0, sp, #96	; 0x60
 8012854:	f003 fd9d 	bl	8016392 <__copybits>
 8012858:	9916      	ldr	r1, [sp, #88]	; 0x58
 801285a:	4620      	mov	r0, r4
 801285c:	f003 f970 	bl	8015b40 <_Bfree>
 8012860:	3f01      	subs	r7, #1
 8012862:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012864:	2f04      	cmp	r7, #4
 8012866:	d806      	bhi.n	8012876 <_strtod_l+0xee>
 8012868:	e8df f007 	tbb	[pc, r7]
 801286c:	201d0314 	.word	0x201d0314
 8012870:	14          	.byte	0x14
 8012871:	00          	.byte	0x00
 8012872:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8012876:	05e9      	lsls	r1, r5, #23
 8012878:	bf48      	it	mi
 801287a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801287e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012882:	0d1b      	lsrs	r3, r3, #20
 8012884:	051b      	lsls	r3, r3, #20
 8012886:	2b00      	cmp	r3, #0
 8012888:	d1b9      	bne.n	80127fe <_strtod_l+0x76>
 801288a:	f001 fde7 	bl	801445c <__errno>
 801288e:	2322      	movs	r3, #34	; 0x22
 8012890:	6003      	str	r3, [r0, #0]
 8012892:	e7b4      	b.n	80127fe <_strtod_l+0x76>
 8012894:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012898:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801289c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80128a0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80128a4:	e7e7      	b.n	8012876 <_strtod_l+0xee>
 80128a6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012a20 <_strtod_l+0x298>
 80128aa:	e7e4      	b.n	8012876 <_strtod_l+0xee>
 80128ac:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80128b0:	f04f 38ff 	mov.w	r8, #4294967295
 80128b4:	e7df      	b.n	8012876 <_strtod_l+0xee>
 80128b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128b8:	1c5a      	adds	r2, r3, #1
 80128ba:	9215      	str	r2, [sp, #84]	; 0x54
 80128bc:	785b      	ldrb	r3, [r3, #1]
 80128be:	2b30      	cmp	r3, #48	; 0x30
 80128c0:	d0f9      	beq.n	80128b6 <_strtod_l+0x12e>
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d09b      	beq.n	80127fe <_strtod_l+0x76>
 80128c6:	2301      	movs	r3, #1
 80128c8:	f04f 0a00 	mov.w	sl, #0
 80128cc:	9304      	str	r3, [sp, #16]
 80128ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80128d2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80128d6:	46d3      	mov	fp, sl
 80128d8:	220a      	movs	r2, #10
 80128da:	9815      	ldr	r0, [sp, #84]	; 0x54
 80128dc:	7806      	ldrb	r6, [r0, #0]
 80128de:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80128e2:	b2d9      	uxtb	r1, r3
 80128e4:	2909      	cmp	r1, #9
 80128e6:	d926      	bls.n	8012936 <_strtod_l+0x1ae>
 80128e8:	494c      	ldr	r1, [pc, #304]	; (8012a1c <_strtod_l+0x294>)
 80128ea:	2201      	movs	r2, #1
 80128ec:	f001 fd47 	bl	801437e <strncmp>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d030      	beq.n	8012956 <_strtod_l+0x1ce>
 80128f4:	2000      	movs	r0, #0
 80128f6:	4632      	mov	r2, r6
 80128f8:	9005      	str	r0, [sp, #20]
 80128fa:	465e      	mov	r6, fp
 80128fc:	4603      	mov	r3, r0
 80128fe:	2a65      	cmp	r2, #101	; 0x65
 8012900:	d001      	beq.n	8012906 <_strtod_l+0x17e>
 8012902:	2a45      	cmp	r2, #69	; 0x45
 8012904:	d113      	bne.n	801292e <_strtod_l+0x1a6>
 8012906:	b91e      	cbnz	r6, 8012910 <_strtod_l+0x188>
 8012908:	9a04      	ldr	r2, [sp, #16]
 801290a:	4302      	orrs	r2, r0
 801290c:	d094      	beq.n	8012838 <_strtod_l+0xb0>
 801290e:	2600      	movs	r6, #0
 8012910:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012912:	1c6a      	adds	r2, r5, #1
 8012914:	9215      	str	r2, [sp, #84]	; 0x54
 8012916:	786a      	ldrb	r2, [r5, #1]
 8012918:	2a2b      	cmp	r2, #43	; 0x2b
 801291a:	d074      	beq.n	8012a06 <_strtod_l+0x27e>
 801291c:	2a2d      	cmp	r2, #45	; 0x2d
 801291e:	d078      	beq.n	8012a12 <_strtod_l+0x28a>
 8012920:	f04f 0c00 	mov.w	ip, #0
 8012924:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012928:	2909      	cmp	r1, #9
 801292a:	d97f      	bls.n	8012a2c <_strtod_l+0x2a4>
 801292c:	9515      	str	r5, [sp, #84]	; 0x54
 801292e:	2700      	movs	r7, #0
 8012930:	e09e      	b.n	8012a70 <_strtod_l+0x2e8>
 8012932:	2300      	movs	r3, #0
 8012934:	e7c8      	b.n	80128c8 <_strtod_l+0x140>
 8012936:	f1bb 0f08 	cmp.w	fp, #8
 801293a:	bfd8      	it	le
 801293c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801293e:	f100 0001 	add.w	r0, r0, #1
 8012942:	bfda      	itte	le
 8012944:	fb02 3301 	mlale	r3, r2, r1, r3
 8012948:	9309      	strle	r3, [sp, #36]	; 0x24
 801294a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801294e:	f10b 0b01 	add.w	fp, fp, #1
 8012952:	9015      	str	r0, [sp, #84]	; 0x54
 8012954:	e7c1      	b.n	80128da <_strtod_l+0x152>
 8012956:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012958:	1c5a      	adds	r2, r3, #1
 801295a:	9215      	str	r2, [sp, #84]	; 0x54
 801295c:	785a      	ldrb	r2, [r3, #1]
 801295e:	f1bb 0f00 	cmp.w	fp, #0
 8012962:	d037      	beq.n	80129d4 <_strtod_l+0x24c>
 8012964:	9005      	str	r0, [sp, #20]
 8012966:	465e      	mov	r6, fp
 8012968:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801296c:	2b09      	cmp	r3, #9
 801296e:	d912      	bls.n	8012996 <_strtod_l+0x20e>
 8012970:	2301      	movs	r3, #1
 8012972:	e7c4      	b.n	80128fe <_strtod_l+0x176>
 8012974:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012976:	1c5a      	adds	r2, r3, #1
 8012978:	9215      	str	r2, [sp, #84]	; 0x54
 801297a:	785a      	ldrb	r2, [r3, #1]
 801297c:	3001      	adds	r0, #1
 801297e:	2a30      	cmp	r2, #48	; 0x30
 8012980:	d0f8      	beq.n	8012974 <_strtod_l+0x1ec>
 8012982:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012986:	2b08      	cmp	r3, #8
 8012988:	f200 84c1 	bhi.w	801330e <_strtod_l+0xb86>
 801298c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801298e:	9005      	str	r0, [sp, #20]
 8012990:	2000      	movs	r0, #0
 8012992:	930b      	str	r3, [sp, #44]	; 0x2c
 8012994:	4606      	mov	r6, r0
 8012996:	3a30      	subs	r2, #48	; 0x30
 8012998:	f100 0301 	add.w	r3, r0, #1
 801299c:	d014      	beq.n	80129c8 <_strtod_l+0x240>
 801299e:	9905      	ldr	r1, [sp, #20]
 80129a0:	4419      	add	r1, r3
 80129a2:	9105      	str	r1, [sp, #20]
 80129a4:	4633      	mov	r3, r6
 80129a6:	eb00 0c06 	add.w	ip, r0, r6
 80129aa:	210a      	movs	r1, #10
 80129ac:	4563      	cmp	r3, ip
 80129ae:	d113      	bne.n	80129d8 <_strtod_l+0x250>
 80129b0:	1833      	adds	r3, r6, r0
 80129b2:	2b08      	cmp	r3, #8
 80129b4:	f106 0601 	add.w	r6, r6, #1
 80129b8:	4406      	add	r6, r0
 80129ba:	dc1a      	bgt.n	80129f2 <_strtod_l+0x26a>
 80129bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129be:	230a      	movs	r3, #10
 80129c0:	fb03 2301 	mla	r3, r3, r1, r2
 80129c4:	9309      	str	r3, [sp, #36]	; 0x24
 80129c6:	2300      	movs	r3, #0
 80129c8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80129ca:	1c51      	adds	r1, r2, #1
 80129cc:	9115      	str	r1, [sp, #84]	; 0x54
 80129ce:	7852      	ldrb	r2, [r2, #1]
 80129d0:	4618      	mov	r0, r3
 80129d2:	e7c9      	b.n	8012968 <_strtod_l+0x1e0>
 80129d4:	4658      	mov	r0, fp
 80129d6:	e7d2      	b.n	801297e <_strtod_l+0x1f6>
 80129d8:	2b08      	cmp	r3, #8
 80129da:	f103 0301 	add.w	r3, r3, #1
 80129de:	dc03      	bgt.n	80129e8 <_strtod_l+0x260>
 80129e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80129e2:	434f      	muls	r7, r1
 80129e4:	9709      	str	r7, [sp, #36]	; 0x24
 80129e6:	e7e1      	b.n	80129ac <_strtod_l+0x224>
 80129e8:	2b10      	cmp	r3, #16
 80129ea:	bfd8      	it	le
 80129ec:	fb01 fa0a 	mulle.w	sl, r1, sl
 80129f0:	e7dc      	b.n	80129ac <_strtod_l+0x224>
 80129f2:	2e10      	cmp	r6, #16
 80129f4:	bfdc      	itt	le
 80129f6:	230a      	movle	r3, #10
 80129f8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80129fc:	e7e3      	b.n	80129c6 <_strtod_l+0x23e>
 80129fe:	2300      	movs	r3, #0
 8012a00:	9305      	str	r3, [sp, #20]
 8012a02:	2301      	movs	r3, #1
 8012a04:	e780      	b.n	8012908 <_strtod_l+0x180>
 8012a06:	f04f 0c00 	mov.w	ip, #0
 8012a0a:	1caa      	adds	r2, r5, #2
 8012a0c:	9215      	str	r2, [sp, #84]	; 0x54
 8012a0e:	78aa      	ldrb	r2, [r5, #2]
 8012a10:	e788      	b.n	8012924 <_strtod_l+0x19c>
 8012a12:	f04f 0c01 	mov.w	ip, #1
 8012a16:	e7f8      	b.n	8012a0a <_strtod_l+0x282>
 8012a18:	080184c8 	.word	0x080184c8
 8012a1c:	080184c4 	.word	0x080184c4
 8012a20:	7ff00000 	.word	0x7ff00000
 8012a24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a26:	1c51      	adds	r1, r2, #1
 8012a28:	9115      	str	r1, [sp, #84]	; 0x54
 8012a2a:	7852      	ldrb	r2, [r2, #1]
 8012a2c:	2a30      	cmp	r2, #48	; 0x30
 8012a2e:	d0f9      	beq.n	8012a24 <_strtod_l+0x29c>
 8012a30:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8012a34:	2908      	cmp	r1, #8
 8012a36:	f63f af7a 	bhi.w	801292e <_strtod_l+0x1a6>
 8012a3a:	3a30      	subs	r2, #48	; 0x30
 8012a3c:	9208      	str	r2, [sp, #32]
 8012a3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a40:	920c      	str	r2, [sp, #48]	; 0x30
 8012a42:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012a44:	1c57      	adds	r7, r2, #1
 8012a46:	9715      	str	r7, [sp, #84]	; 0x54
 8012a48:	7852      	ldrb	r2, [r2, #1]
 8012a4a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012a4e:	f1be 0f09 	cmp.w	lr, #9
 8012a52:	d938      	bls.n	8012ac6 <_strtod_l+0x33e>
 8012a54:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012a56:	1a7f      	subs	r7, r7, r1
 8012a58:	2f08      	cmp	r7, #8
 8012a5a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8012a5e:	dc03      	bgt.n	8012a68 <_strtod_l+0x2e0>
 8012a60:	9908      	ldr	r1, [sp, #32]
 8012a62:	428f      	cmp	r7, r1
 8012a64:	bfa8      	it	ge
 8012a66:	460f      	movge	r7, r1
 8012a68:	f1bc 0f00 	cmp.w	ip, #0
 8012a6c:	d000      	beq.n	8012a70 <_strtod_l+0x2e8>
 8012a6e:	427f      	negs	r7, r7
 8012a70:	2e00      	cmp	r6, #0
 8012a72:	d14f      	bne.n	8012b14 <_strtod_l+0x38c>
 8012a74:	9904      	ldr	r1, [sp, #16]
 8012a76:	4301      	orrs	r1, r0
 8012a78:	f47f aec1 	bne.w	80127fe <_strtod_l+0x76>
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f47f aedb 	bne.w	8012838 <_strtod_l+0xb0>
 8012a82:	2a69      	cmp	r2, #105	; 0x69
 8012a84:	d029      	beq.n	8012ada <_strtod_l+0x352>
 8012a86:	dc26      	bgt.n	8012ad6 <_strtod_l+0x34e>
 8012a88:	2a49      	cmp	r2, #73	; 0x49
 8012a8a:	d026      	beq.n	8012ada <_strtod_l+0x352>
 8012a8c:	2a4e      	cmp	r2, #78	; 0x4e
 8012a8e:	f47f aed3 	bne.w	8012838 <_strtod_l+0xb0>
 8012a92:	499b      	ldr	r1, [pc, #620]	; (8012d00 <_strtod_l+0x578>)
 8012a94:	a815      	add	r0, sp, #84	; 0x54
 8012a96:	f002 fe9d 	bl	80157d4 <__match>
 8012a9a:	2800      	cmp	r0, #0
 8012a9c:	f43f aecc 	beq.w	8012838 <_strtod_l+0xb0>
 8012aa0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	2b28      	cmp	r3, #40	; 0x28
 8012aa6:	d12f      	bne.n	8012b08 <_strtod_l+0x380>
 8012aa8:	4996      	ldr	r1, [pc, #600]	; (8012d04 <_strtod_l+0x57c>)
 8012aaa:	aa18      	add	r2, sp, #96	; 0x60
 8012aac:	a815      	add	r0, sp, #84	; 0x54
 8012aae:	f002 fea5 	bl	80157fc <__hexnan>
 8012ab2:	2805      	cmp	r0, #5
 8012ab4:	d128      	bne.n	8012b08 <_strtod_l+0x380>
 8012ab6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012ab8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012abc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012ac0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012ac4:	e69b      	b.n	80127fe <_strtod_l+0x76>
 8012ac6:	9f08      	ldr	r7, [sp, #32]
 8012ac8:	210a      	movs	r1, #10
 8012aca:	fb01 2107 	mla	r1, r1, r7, r2
 8012ace:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012ad2:	9208      	str	r2, [sp, #32]
 8012ad4:	e7b5      	b.n	8012a42 <_strtod_l+0x2ba>
 8012ad6:	2a6e      	cmp	r2, #110	; 0x6e
 8012ad8:	e7d9      	b.n	8012a8e <_strtod_l+0x306>
 8012ada:	498b      	ldr	r1, [pc, #556]	; (8012d08 <_strtod_l+0x580>)
 8012adc:	a815      	add	r0, sp, #84	; 0x54
 8012ade:	f002 fe79 	bl	80157d4 <__match>
 8012ae2:	2800      	cmp	r0, #0
 8012ae4:	f43f aea8 	beq.w	8012838 <_strtod_l+0xb0>
 8012ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012aea:	4988      	ldr	r1, [pc, #544]	; (8012d0c <_strtod_l+0x584>)
 8012aec:	3b01      	subs	r3, #1
 8012aee:	a815      	add	r0, sp, #84	; 0x54
 8012af0:	9315      	str	r3, [sp, #84]	; 0x54
 8012af2:	f002 fe6f 	bl	80157d4 <__match>
 8012af6:	b910      	cbnz	r0, 8012afe <_strtod_l+0x376>
 8012af8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012afa:	3301      	adds	r3, #1
 8012afc:	9315      	str	r3, [sp, #84]	; 0x54
 8012afe:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012d1c <_strtod_l+0x594>
 8012b02:	f04f 0800 	mov.w	r8, #0
 8012b06:	e67a      	b.n	80127fe <_strtod_l+0x76>
 8012b08:	4881      	ldr	r0, [pc, #516]	; (8012d10 <_strtod_l+0x588>)
 8012b0a:	f001 fce5 	bl	80144d8 <nan>
 8012b0e:	ec59 8b10 	vmov	r8, r9, d0
 8012b12:	e674      	b.n	80127fe <_strtod_l+0x76>
 8012b14:	9b05      	ldr	r3, [sp, #20]
 8012b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b18:	1afb      	subs	r3, r7, r3
 8012b1a:	f1bb 0f00 	cmp.w	fp, #0
 8012b1e:	bf08      	it	eq
 8012b20:	46b3      	moveq	fp, r6
 8012b22:	2e10      	cmp	r6, #16
 8012b24:	9308      	str	r3, [sp, #32]
 8012b26:	4635      	mov	r5, r6
 8012b28:	bfa8      	it	ge
 8012b2a:	2510      	movge	r5, #16
 8012b2c:	f7ed fcea 	bl	8000504 <__aeabi_ui2d>
 8012b30:	2e09      	cmp	r6, #9
 8012b32:	4680      	mov	r8, r0
 8012b34:	4689      	mov	r9, r1
 8012b36:	dd13      	ble.n	8012b60 <_strtod_l+0x3d8>
 8012b38:	4b76      	ldr	r3, [pc, #472]	; (8012d14 <_strtod_l+0x58c>)
 8012b3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012b3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8012b42:	f7ed fd59 	bl	80005f8 <__aeabi_dmul>
 8012b46:	4680      	mov	r8, r0
 8012b48:	4650      	mov	r0, sl
 8012b4a:	4689      	mov	r9, r1
 8012b4c:	f7ed fcda 	bl	8000504 <__aeabi_ui2d>
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	4640      	mov	r0, r8
 8012b56:	4649      	mov	r1, r9
 8012b58:	f7ed fb98 	bl	800028c <__adddf3>
 8012b5c:	4680      	mov	r8, r0
 8012b5e:	4689      	mov	r9, r1
 8012b60:	2e0f      	cmp	r6, #15
 8012b62:	dc38      	bgt.n	8012bd6 <_strtod_l+0x44e>
 8012b64:	9b08      	ldr	r3, [sp, #32]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	f43f ae49 	beq.w	80127fe <_strtod_l+0x76>
 8012b6c:	dd24      	ble.n	8012bb8 <_strtod_l+0x430>
 8012b6e:	2b16      	cmp	r3, #22
 8012b70:	dc0b      	bgt.n	8012b8a <_strtod_l+0x402>
 8012b72:	4968      	ldr	r1, [pc, #416]	; (8012d14 <_strtod_l+0x58c>)
 8012b74:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b7c:	4642      	mov	r2, r8
 8012b7e:	464b      	mov	r3, r9
 8012b80:	f7ed fd3a 	bl	80005f8 <__aeabi_dmul>
 8012b84:	4680      	mov	r8, r0
 8012b86:	4689      	mov	r9, r1
 8012b88:	e639      	b.n	80127fe <_strtod_l+0x76>
 8012b8a:	9a08      	ldr	r2, [sp, #32]
 8012b8c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012b90:	4293      	cmp	r3, r2
 8012b92:	db20      	blt.n	8012bd6 <_strtod_l+0x44e>
 8012b94:	4c5f      	ldr	r4, [pc, #380]	; (8012d14 <_strtod_l+0x58c>)
 8012b96:	f1c6 060f 	rsb	r6, r6, #15
 8012b9a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8012b9e:	4642      	mov	r2, r8
 8012ba0:	464b      	mov	r3, r9
 8012ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ba6:	f7ed fd27 	bl	80005f8 <__aeabi_dmul>
 8012baa:	9b08      	ldr	r3, [sp, #32]
 8012bac:	1b9e      	subs	r6, r3, r6
 8012bae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012bb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012bb6:	e7e3      	b.n	8012b80 <_strtod_l+0x3f8>
 8012bb8:	9b08      	ldr	r3, [sp, #32]
 8012bba:	3316      	adds	r3, #22
 8012bbc:	db0b      	blt.n	8012bd6 <_strtod_l+0x44e>
 8012bbe:	9b05      	ldr	r3, [sp, #20]
 8012bc0:	1bdf      	subs	r7, r3, r7
 8012bc2:	4b54      	ldr	r3, [pc, #336]	; (8012d14 <_strtod_l+0x58c>)
 8012bc4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bcc:	4640      	mov	r0, r8
 8012bce:	4649      	mov	r1, r9
 8012bd0:	f7ed fe3c 	bl	800084c <__aeabi_ddiv>
 8012bd4:	e7d6      	b.n	8012b84 <_strtod_l+0x3fc>
 8012bd6:	9b08      	ldr	r3, [sp, #32]
 8012bd8:	1b75      	subs	r5, r6, r5
 8012bda:	441d      	add	r5, r3
 8012bdc:	2d00      	cmp	r5, #0
 8012bde:	dd70      	ble.n	8012cc2 <_strtod_l+0x53a>
 8012be0:	f015 030f 	ands.w	r3, r5, #15
 8012be4:	d00a      	beq.n	8012bfc <_strtod_l+0x474>
 8012be6:	494b      	ldr	r1, [pc, #300]	; (8012d14 <_strtod_l+0x58c>)
 8012be8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012bec:	4642      	mov	r2, r8
 8012bee:	464b      	mov	r3, r9
 8012bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bf4:	f7ed fd00 	bl	80005f8 <__aeabi_dmul>
 8012bf8:	4680      	mov	r8, r0
 8012bfa:	4689      	mov	r9, r1
 8012bfc:	f035 050f 	bics.w	r5, r5, #15
 8012c00:	d04d      	beq.n	8012c9e <_strtod_l+0x516>
 8012c02:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8012c06:	dd22      	ble.n	8012c4e <_strtod_l+0x4c6>
 8012c08:	2500      	movs	r5, #0
 8012c0a:	46ab      	mov	fp, r5
 8012c0c:	9509      	str	r5, [sp, #36]	; 0x24
 8012c0e:	9505      	str	r5, [sp, #20]
 8012c10:	2322      	movs	r3, #34	; 0x22
 8012c12:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012d1c <_strtod_l+0x594>
 8012c16:	6023      	str	r3, [r4, #0]
 8012c18:	f04f 0800 	mov.w	r8, #0
 8012c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	f43f aded 	beq.w	80127fe <_strtod_l+0x76>
 8012c24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012c26:	4620      	mov	r0, r4
 8012c28:	f002 ff8a 	bl	8015b40 <_Bfree>
 8012c2c:	9905      	ldr	r1, [sp, #20]
 8012c2e:	4620      	mov	r0, r4
 8012c30:	f002 ff86 	bl	8015b40 <_Bfree>
 8012c34:	4659      	mov	r1, fp
 8012c36:	4620      	mov	r0, r4
 8012c38:	f002 ff82 	bl	8015b40 <_Bfree>
 8012c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012c3e:	4620      	mov	r0, r4
 8012c40:	f002 ff7e 	bl	8015b40 <_Bfree>
 8012c44:	4629      	mov	r1, r5
 8012c46:	4620      	mov	r0, r4
 8012c48:	f002 ff7a 	bl	8015b40 <_Bfree>
 8012c4c:	e5d7      	b.n	80127fe <_strtod_l+0x76>
 8012c4e:	4b32      	ldr	r3, [pc, #200]	; (8012d18 <_strtod_l+0x590>)
 8012c50:	9304      	str	r3, [sp, #16]
 8012c52:	2300      	movs	r3, #0
 8012c54:	112d      	asrs	r5, r5, #4
 8012c56:	4640      	mov	r0, r8
 8012c58:	4649      	mov	r1, r9
 8012c5a:	469a      	mov	sl, r3
 8012c5c:	2d01      	cmp	r5, #1
 8012c5e:	dc21      	bgt.n	8012ca4 <_strtod_l+0x51c>
 8012c60:	b10b      	cbz	r3, 8012c66 <_strtod_l+0x4de>
 8012c62:	4680      	mov	r8, r0
 8012c64:	4689      	mov	r9, r1
 8012c66:	492c      	ldr	r1, [pc, #176]	; (8012d18 <_strtod_l+0x590>)
 8012c68:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8012c6c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012c70:	4642      	mov	r2, r8
 8012c72:	464b      	mov	r3, r9
 8012c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012c78:	f7ed fcbe 	bl	80005f8 <__aeabi_dmul>
 8012c7c:	4b27      	ldr	r3, [pc, #156]	; (8012d1c <_strtod_l+0x594>)
 8012c7e:	460a      	mov	r2, r1
 8012c80:	400b      	ands	r3, r1
 8012c82:	4927      	ldr	r1, [pc, #156]	; (8012d20 <_strtod_l+0x598>)
 8012c84:	428b      	cmp	r3, r1
 8012c86:	4680      	mov	r8, r0
 8012c88:	d8be      	bhi.n	8012c08 <_strtod_l+0x480>
 8012c8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8012c8e:	428b      	cmp	r3, r1
 8012c90:	bf86      	itte	hi
 8012c92:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8012d24 <_strtod_l+0x59c>
 8012c96:	f04f 38ff 	movhi.w	r8, #4294967295
 8012c9a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	9304      	str	r3, [sp, #16]
 8012ca2:	e07b      	b.n	8012d9c <_strtod_l+0x614>
 8012ca4:	07ea      	lsls	r2, r5, #31
 8012ca6:	d505      	bpl.n	8012cb4 <_strtod_l+0x52c>
 8012ca8:	9b04      	ldr	r3, [sp, #16]
 8012caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cae:	f7ed fca3 	bl	80005f8 <__aeabi_dmul>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	9a04      	ldr	r2, [sp, #16]
 8012cb6:	3208      	adds	r2, #8
 8012cb8:	f10a 0a01 	add.w	sl, sl, #1
 8012cbc:	106d      	asrs	r5, r5, #1
 8012cbe:	9204      	str	r2, [sp, #16]
 8012cc0:	e7cc      	b.n	8012c5c <_strtod_l+0x4d4>
 8012cc2:	d0ec      	beq.n	8012c9e <_strtod_l+0x516>
 8012cc4:	426d      	negs	r5, r5
 8012cc6:	f015 020f 	ands.w	r2, r5, #15
 8012cca:	d00a      	beq.n	8012ce2 <_strtod_l+0x55a>
 8012ccc:	4b11      	ldr	r3, [pc, #68]	; (8012d14 <_strtod_l+0x58c>)
 8012cce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012cd2:	4640      	mov	r0, r8
 8012cd4:	4649      	mov	r1, r9
 8012cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cda:	f7ed fdb7 	bl	800084c <__aeabi_ddiv>
 8012cde:	4680      	mov	r8, r0
 8012ce0:	4689      	mov	r9, r1
 8012ce2:	112d      	asrs	r5, r5, #4
 8012ce4:	d0db      	beq.n	8012c9e <_strtod_l+0x516>
 8012ce6:	2d1f      	cmp	r5, #31
 8012ce8:	dd1e      	ble.n	8012d28 <_strtod_l+0x5a0>
 8012cea:	2500      	movs	r5, #0
 8012cec:	46ab      	mov	fp, r5
 8012cee:	9509      	str	r5, [sp, #36]	; 0x24
 8012cf0:	9505      	str	r5, [sp, #20]
 8012cf2:	2322      	movs	r3, #34	; 0x22
 8012cf4:	f04f 0800 	mov.w	r8, #0
 8012cf8:	f04f 0900 	mov.w	r9, #0
 8012cfc:	6023      	str	r3, [r4, #0]
 8012cfe:	e78d      	b.n	8012c1c <_strtod_l+0x494>
 8012d00:	08018525 	.word	0x08018525
 8012d04:	080184dc 	.word	0x080184dc
 8012d08:	0801851d 	.word	0x0801851d
 8012d0c:	0801855a 	.word	0x0801855a
 8012d10:	08018904 	.word	0x08018904
 8012d14:	080186c8 	.word	0x080186c8
 8012d18:	080186a0 	.word	0x080186a0
 8012d1c:	7ff00000 	.word	0x7ff00000
 8012d20:	7ca00000 	.word	0x7ca00000
 8012d24:	7fefffff 	.word	0x7fefffff
 8012d28:	f015 0310 	ands.w	r3, r5, #16
 8012d2c:	bf18      	it	ne
 8012d2e:	236a      	movne	r3, #106	; 0x6a
 8012d30:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80130d4 <_strtod_l+0x94c>
 8012d34:	9304      	str	r3, [sp, #16]
 8012d36:	4640      	mov	r0, r8
 8012d38:	4649      	mov	r1, r9
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	07ea      	lsls	r2, r5, #31
 8012d3e:	d504      	bpl.n	8012d4a <_strtod_l+0x5c2>
 8012d40:	e9da 2300 	ldrd	r2, r3, [sl]
 8012d44:	f7ed fc58 	bl	80005f8 <__aeabi_dmul>
 8012d48:	2301      	movs	r3, #1
 8012d4a:	106d      	asrs	r5, r5, #1
 8012d4c:	f10a 0a08 	add.w	sl, sl, #8
 8012d50:	d1f4      	bne.n	8012d3c <_strtod_l+0x5b4>
 8012d52:	b10b      	cbz	r3, 8012d58 <_strtod_l+0x5d0>
 8012d54:	4680      	mov	r8, r0
 8012d56:	4689      	mov	r9, r1
 8012d58:	9b04      	ldr	r3, [sp, #16]
 8012d5a:	b1bb      	cbz	r3, 8012d8c <_strtod_l+0x604>
 8012d5c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8012d60:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	4649      	mov	r1, r9
 8012d68:	dd10      	ble.n	8012d8c <_strtod_l+0x604>
 8012d6a:	2b1f      	cmp	r3, #31
 8012d6c:	f340 811e 	ble.w	8012fac <_strtod_l+0x824>
 8012d70:	2b34      	cmp	r3, #52	; 0x34
 8012d72:	bfde      	ittt	le
 8012d74:	f04f 33ff 	movle.w	r3, #4294967295
 8012d78:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8012d7c:	4093      	lslle	r3, r2
 8012d7e:	f04f 0800 	mov.w	r8, #0
 8012d82:	bfcc      	ite	gt
 8012d84:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012d88:	ea03 0901 	andle.w	r9, r3, r1
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2300      	movs	r3, #0
 8012d90:	4640      	mov	r0, r8
 8012d92:	4649      	mov	r1, r9
 8012d94:	f7ed fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8012d98:	2800      	cmp	r0, #0
 8012d9a:	d1a6      	bne.n	8012cea <_strtod_l+0x562>
 8012d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d9e:	9300      	str	r3, [sp, #0]
 8012da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012da2:	4633      	mov	r3, r6
 8012da4:	465a      	mov	r2, fp
 8012da6:	4620      	mov	r0, r4
 8012da8:	f002 ff32 	bl	8015c10 <__s2b>
 8012dac:	9009      	str	r0, [sp, #36]	; 0x24
 8012dae:	2800      	cmp	r0, #0
 8012db0:	f43f af2a 	beq.w	8012c08 <_strtod_l+0x480>
 8012db4:	9a08      	ldr	r2, [sp, #32]
 8012db6:	9b05      	ldr	r3, [sp, #20]
 8012db8:	2a00      	cmp	r2, #0
 8012dba:	eba3 0307 	sub.w	r3, r3, r7
 8012dbe:	bfa8      	it	ge
 8012dc0:	2300      	movge	r3, #0
 8012dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8012dc4:	2500      	movs	r5, #0
 8012dc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012dca:	9312      	str	r3, [sp, #72]	; 0x48
 8012dcc:	46ab      	mov	fp, r5
 8012dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	6859      	ldr	r1, [r3, #4]
 8012dd4:	f002 fe74 	bl	8015ac0 <_Balloc>
 8012dd8:	9005      	str	r0, [sp, #20]
 8012dda:	2800      	cmp	r0, #0
 8012ddc:	f43f af18 	beq.w	8012c10 <_strtod_l+0x488>
 8012de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de2:	691a      	ldr	r2, [r3, #16]
 8012de4:	3202      	adds	r2, #2
 8012de6:	f103 010c 	add.w	r1, r3, #12
 8012dea:	0092      	lsls	r2, r2, #2
 8012dec:	300c      	adds	r0, #12
 8012dee:	f001 fb62 	bl	80144b6 <memcpy>
 8012df2:	ec49 8b10 	vmov	d0, r8, r9
 8012df6:	aa18      	add	r2, sp, #96	; 0x60
 8012df8:	a917      	add	r1, sp, #92	; 0x5c
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f003 fa3c 	bl	8016278 <__d2b>
 8012e00:	ec49 8b18 	vmov	d8, r8, r9
 8012e04:	9016      	str	r0, [sp, #88]	; 0x58
 8012e06:	2800      	cmp	r0, #0
 8012e08:	f43f af02 	beq.w	8012c10 <_strtod_l+0x488>
 8012e0c:	2101      	movs	r1, #1
 8012e0e:	4620      	mov	r0, r4
 8012e10:	f002 ff96 	bl	8015d40 <__i2b>
 8012e14:	4683      	mov	fp, r0
 8012e16:	2800      	cmp	r0, #0
 8012e18:	f43f aefa 	beq.w	8012c10 <_strtod_l+0x488>
 8012e1c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012e1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012e20:	2e00      	cmp	r6, #0
 8012e22:	bfab      	itete	ge
 8012e24:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8012e26:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012e28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012e2a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012e2e:	bfac      	ite	ge
 8012e30:	eb06 0a03 	addge.w	sl, r6, r3
 8012e34:	1b9f      	sublt	r7, r3, r6
 8012e36:	9b04      	ldr	r3, [sp, #16]
 8012e38:	1af6      	subs	r6, r6, r3
 8012e3a:	4416      	add	r6, r2
 8012e3c:	4ba0      	ldr	r3, [pc, #640]	; (80130c0 <_strtod_l+0x938>)
 8012e3e:	3e01      	subs	r6, #1
 8012e40:	429e      	cmp	r6, r3
 8012e42:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012e46:	f280 80c4 	bge.w	8012fd2 <_strtod_l+0x84a>
 8012e4a:	1b9b      	subs	r3, r3, r6
 8012e4c:	2b1f      	cmp	r3, #31
 8012e4e:	eba2 0203 	sub.w	r2, r2, r3
 8012e52:	f04f 0101 	mov.w	r1, #1
 8012e56:	f300 80b0 	bgt.w	8012fba <_strtod_l+0x832>
 8012e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8012e5e:	930e      	str	r3, [sp, #56]	; 0x38
 8012e60:	2300      	movs	r3, #0
 8012e62:	930d      	str	r3, [sp, #52]	; 0x34
 8012e64:	eb0a 0602 	add.w	r6, sl, r2
 8012e68:	9b04      	ldr	r3, [sp, #16]
 8012e6a:	45b2      	cmp	sl, r6
 8012e6c:	4417      	add	r7, r2
 8012e6e:	441f      	add	r7, r3
 8012e70:	4653      	mov	r3, sl
 8012e72:	bfa8      	it	ge
 8012e74:	4633      	movge	r3, r6
 8012e76:	42bb      	cmp	r3, r7
 8012e78:	bfa8      	it	ge
 8012e7a:	463b      	movge	r3, r7
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	bfc2      	ittt	gt
 8012e80:	1af6      	subgt	r6, r6, r3
 8012e82:	1aff      	subgt	r7, r7, r3
 8012e84:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012e88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	dd17      	ble.n	8012ebe <_strtod_l+0x736>
 8012e8e:	4659      	mov	r1, fp
 8012e90:	461a      	mov	r2, r3
 8012e92:	4620      	mov	r0, r4
 8012e94:	f003 f814 	bl	8015ec0 <__pow5mult>
 8012e98:	4683      	mov	fp, r0
 8012e9a:	2800      	cmp	r0, #0
 8012e9c:	f43f aeb8 	beq.w	8012c10 <_strtod_l+0x488>
 8012ea0:	4601      	mov	r1, r0
 8012ea2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012ea4:	4620      	mov	r0, r4
 8012ea6:	f002 ff61 	bl	8015d6c <__multiply>
 8012eaa:	900b      	str	r0, [sp, #44]	; 0x2c
 8012eac:	2800      	cmp	r0, #0
 8012eae:	f43f aeaf 	beq.w	8012c10 <_strtod_l+0x488>
 8012eb2:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f002 fe43 	bl	8015b40 <_Bfree>
 8012eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ebc:	9316      	str	r3, [sp, #88]	; 0x58
 8012ebe:	2e00      	cmp	r6, #0
 8012ec0:	f300 808c 	bgt.w	8012fdc <_strtod_l+0x854>
 8012ec4:	9b08      	ldr	r3, [sp, #32]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	dd08      	ble.n	8012edc <_strtod_l+0x754>
 8012eca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ecc:	9905      	ldr	r1, [sp, #20]
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f002 fff6 	bl	8015ec0 <__pow5mult>
 8012ed4:	9005      	str	r0, [sp, #20]
 8012ed6:	2800      	cmp	r0, #0
 8012ed8:	f43f ae9a 	beq.w	8012c10 <_strtod_l+0x488>
 8012edc:	2f00      	cmp	r7, #0
 8012ede:	dd08      	ble.n	8012ef2 <_strtod_l+0x76a>
 8012ee0:	9905      	ldr	r1, [sp, #20]
 8012ee2:	463a      	mov	r2, r7
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	f003 f845 	bl	8015f74 <__lshift>
 8012eea:	9005      	str	r0, [sp, #20]
 8012eec:	2800      	cmp	r0, #0
 8012eee:	f43f ae8f 	beq.w	8012c10 <_strtod_l+0x488>
 8012ef2:	f1ba 0f00 	cmp.w	sl, #0
 8012ef6:	dd08      	ble.n	8012f0a <_strtod_l+0x782>
 8012ef8:	4659      	mov	r1, fp
 8012efa:	4652      	mov	r2, sl
 8012efc:	4620      	mov	r0, r4
 8012efe:	f003 f839 	bl	8015f74 <__lshift>
 8012f02:	4683      	mov	fp, r0
 8012f04:	2800      	cmp	r0, #0
 8012f06:	f43f ae83 	beq.w	8012c10 <_strtod_l+0x488>
 8012f0a:	9a05      	ldr	r2, [sp, #20]
 8012f0c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012f0e:	4620      	mov	r0, r4
 8012f10:	f003 f8b8 	bl	8016084 <__mdiff>
 8012f14:	4605      	mov	r5, r0
 8012f16:	2800      	cmp	r0, #0
 8012f18:	f43f ae7a 	beq.w	8012c10 <_strtod_l+0x488>
 8012f1c:	68c3      	ldr	r3, [r0, #12]
 8012f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012f20:	2300      	movs	r3, #0
 8012f22:	60c3      	str	r3, [r0, #12]
 8012f24:	4659      	mov	r1, fp
 8012f26:	f003 f891 	bl	801604c <__mcmp>
 8012f2a:	2800      	cmp	r0, #0
 8012f2c:	da60      	bge.n	8012ff0 <_strtod_l+0x868>
 8012f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f30:	ea53 0308 	orrs.w	r3, r3, r8
 8012f34:	f040 8084 	bne.w	8013040 <_strtod_l+0x8b8>
 8012f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	d17f      	bne.n	8013040 <_strtod_l+0x8b8>
 8012f40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012f44:	0d1b      	lsrs	r3, r3, #20
 8012f46:	051b      	lsls	r3, r3, #20
 8012f48:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012f4c:	d978      	bls.n	8013040 <_strtod_l+0x8b8>
 8012f4e:	696b      	ldr	r3, [r5, #20]
 8012f50:	b913      	cbnz	r3, 8012f58 <_strtod_l+0x7d0>
 8012f52:	692b      	ldr	r3, [r5, #16]
 8012f54:	2b01      	cmp	r3, #1
 8012f56:	dd73      	ble.n	8013040 <_strtod_l+0x8b8>
 8012f58:	4629      	mov	r1, r5
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	f003 f809 	bl	8015f74 <__lshift>
 8012f62:	4659      	mov	r1, fp
 8012f64:	4605      	mov	r5, r0
 8012f66:	f003 f871 	bl	801604c <__mcmp>
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	dd68      	ble.n	8013040 <_strtod_l+0x8b8>
 8012f6e:	9904      	ldr	r1, [sp, #16]
 8012f70:	4a54      	ldr	r2, [pc, #336]	; (80130c4 <_strtod_l+0x93c>)
 8012f72:	464b      	mov	r3, r9
 8012f74:	2900      	cmp	r1, #0
 8012f76:	f000 8084 	beq.w	8013082 <_strtod_l+0x8fa>
 8012f7a:	ea02 0109 	and.w	r1, r2, r9
 8012f7e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012f82:	dc7e      	bgt.n	8013082 <_strtod_l+0x8fa>
 8012f84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012f88:	f77f aeb3 	ble.w	8012cf2 <_strtod_l+0x56a>
 8012f8c:	4b4e      	ldr	r3, [pc, #312]	; (80130c8 <_strtod_l+0x940>)
 8012f8e:	4640      	mov	r0, r8
 8012f90:	4649      	mov	r1, r9
 8012f92:	2200      	movs	r2, #0
 8012f94:	f7ed fb30 	bl	80005f8 <__aeabi_dmul>
 8012f98:	4b4a      	ldr	r3, [pc, #296]	; (80130c4 <_strtod_l+0x93c>)
 8012f9a:	400b      	ands	r3, r1
 8012f9c:	4680      	mov	r8, r0
 8012f9e:	4689      	mov	r9, r1
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	f47f ae3f 	bne.w	8012c24 <_strtod_l+0x49c>
 8012fa6:	2322      	movs	r3, #34	; 0x22
 8012fa8:	6023      	str	r3, [r4, #0]
 8012faa:	e63b      	b.n	8012c24 <_strtod_l+0x49c>
 8012fac:	f04f 32ff 	mov.w	r2, #4294967295
 8012fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8012fb4:	ea03 0808 	and.w	r8, r3, r8
 8012fb8:	e6e8      	b.n	8012d8c <_strtod_l+0x604>
 8012fba:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012fbe:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012fc2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012fc6:	36e2      	adds	r6, #226	; 0xe2
 8012fc8:	fa01 f306 	lsl.w	r3, r1, r6
 8012fcc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012fd0:	e748      	b.n	8012e64 <_strtod_l+0x6dc>
 8012fd2:	2100      	movs	r1, #0
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012fda:	e743      	b.n	8012e64 <_strtod_l+0x6dc>
 8012fdc:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012fde:	4632      	mov	r2, r6
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f002 ffc7 	bl	8015f74 <__lshift>
 8012fe6:	9016      	str	r0, [sp, #88]	; 0x58
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	f47f af6b 	bne.w	8012ec4 <_strtod_l+0x73c>
 8012fee:	e60f      	b.n	8012c10 <_strtod_l+0x488>
 8012ff0:	46ca      	mov	sl, r9
 8012ff2:	d171      	bne.n	80130d8 <_strtod_l+0x950>
 8012ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ff6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012ffa:	b352      	cbz	r2, 8013052 <_strtod_l+0x8ca>
 8012ffc:	4a33      	ldr	r2, [pc, #204]	; (80130cc <_strtod_l+0x944>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d12a      	bne.n	8013058 <_strtod_l+0x8d0>
 8013002:	9b04      	ldr	r3, [sp, #16]
 8013004:	4641      	mov	r1, r8
 8013006:	b1fb      	cbz	r3, 8013048 <_strtod_l+0x8c0>
 8013008:	4b2e      	ldr	r3, [pc, #184]	; (80130c4 <_strtod_l+0x93c>)
 801300a:	ea09 0303 	and.w	r3, r9, r3
 801300e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013012:	f04f 32ff 	mov.w	r2, #4294967295
 8013016:	d81a      	bhi.n	801304e <_strtod_l+0x8c6>
 8013018:	0d1b      	lsrs	r3, r3, #20
 801301a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801301e:	fa02 f303 	lsl.w	r3, r2, r3
 8013022:	4299      	cmp	r1, r3
 8013024:	d118      	bne.n	8013058 <_strtod_l+0x8d0>
 8013026:	4b2a      	ldr	r3, [pc, #168]	; (80130d0 <_strtod_l+0x948>)
 8013028:	459a      	cmp	sl, r3
 801302a:	d102      	bne.n	8013032 <_strtod_l+0x8aa>
 801302c:	3101      	adds	r1, #1
 801302e:	f43f adef 	beq.w	8012c10 <_strtod_l+0x488>
 8013032:	4b24      	ldr	r3, [pc, #144]	; (80130c4 <_strtod_l+0x93c>)
 8013034:	ea0a 0303 	and.w	r3, sl, r3
 8013038:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801303c:	f04f 0800 	mov.w	r8, #0
 8013040:	9b04      	ldr	r3, [sp, #16]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d1a2      	bne.n	8012f8c <_strtod_l+0x804>
 8013046:	e5ed      	b.n	8012c24 <_strtod_l+0x49c>
 8013048:	f04f 33ff 	mov.w	r3, #4294967295
 801304c:	e7e9      	b.n	8013022 <_strtod_l+0x89a>
 801304e:	4613      	mov	r3, r2
 8013050:	e7e7      	b.n	8013022 <_strtod_l+0x89a>
 8013052:	ea53 0308 	orrs.w	r3, r3, r8
 8013056:	d08a      	beq.n	8012f6e <_strtod_l+0x7e6>
 8013058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801305a:	b1e3      	cbz	r3, 8013096 <_strtod_l+0x90e>
 801305c:	ea13 0f0a 	tst.w	r3, sl
 8013060:	d0ee      	beq.n	8013040 <_strtod_l+0x8b8>
 8013062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013064:	9a04      	ldr	r2, [sp, #16]
 8013066:	4640      	mov	r0, r8
 8013068:	4649      	mov	r1, r9
 801306a:	b1c3      	cbz	r3, 801309e <_strtod_l+0x916>
 801306c:	f7ff fb6e 	bl	801274c <sulp>
 8013070:	4602      	mov	r2, r0
 8013072:	460b      	mov	r3, r1
 8013074:	ec51 0b18 	vmov	r0, r1, d8
 8013078:	f7ed f908 	bl	800028c <__adddf3>
 801307c:	4680      	mov	r8, r0
 801307e:	4689      	mov	r9, r1
 8013080:	e7de      	b.n	8013040 <_strtod_l+0x8b8>
 8013082:	4013      	ands	r3, r2
 8013084:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013088:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801308c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013090:	f04f 38ff 	mov.w	r8, #4294967295
 8013094:	e7d4      	b.n	8013040 <_strtod_l+0x8b8>
 8013096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013098:	ea13 0f08 	tst.w	r3, r8
 801309c:	e7e0      	b.n	8013060 <_strtod_l+0x8d8>
 801309e:	f7ff fb55 	bl	801274c <sulp>
 80130a2:	4602      	mov	r2, r0
 80130a4:	460b      	mov	r3, r1
 80130a6:	ec51 0b18 	vmov	r0, r1, d8
 80130aa:	f7ed f8ed 	bl	8000288 <__aeabi_dsub>
 80130ae:	2200      	movs	r2, #0
 80130b0:	2300      	movs	r3, #0
 80130b2:	4680      	mov	r8, r0
 80130b4:	4689      	mov	r9, r1
 80130b6:	f7ed fd07 	bl	8000ac8 <__aeabi_dcmpeq>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d0c0      	beq.n	8013040 <_strtod_l+0x8b8>
 80130be:	e618      	b.n	8012cf2 <_strtod_l+0x56a>
 80130c0:	fffffc02 	.word	0xfffffc02
 80130c4:	7ff00000 	.word	0x7ff00000
 80130c8:	39500000 	.word	0x39500000
 80130cc:	000fffff 	.word	0x000fffff
 80130d0:	7fefffff 	.word	0x7fefffff
 80130d4:	080184f0 	.word	0x080184f0
 80130d8:	4659      	mov	r1, fp
 80130da:	4628      	mov	r0, r5
 80130dc:	f003 f926 	bl	801632c <__ratio>
 80130e0:	ec57 6b10 	vmov	r6, r7, d0
 80130e4:	ee10 0a10 	vmov	r0, s0
 80130e8:	2200      	movs	r2, #0
 80130ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80130ee:	4639      	mov	r1, r7
 80130f0:	f7ed fcfe 	bl	8000af0 <__aeabi_dcmple>
 80130f4:	2800      	cmp	r0, #0
 80130f6:	d071      	beq.n	80131dc <_strtod_l+0xa54>
 80130f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d17c      	bne.n	80131f8 <_strtod_l+0xa70>
 80130fe:	f1b8 0f00 	cmp.w	r8, #0
 8013102:	d15a      	bne.n	80131ba <_strtod_l+0xa32>
 8013104:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013108:	2b00      	cmp	r3, #0
 801310a:	d15d      	bne.n	80131c8 <_strtod_l+0xa40>
 801310c:	4b90      	ldr	r3, [pc, #576]	; (8013350 <_strtod_l+0xbc8>)
 801310e:	2200      	movs	r2, #0
 8013110:	4630      	mov	r0, r6
 8013112:	4639      	mov	r1, r7
 8013114:	f7ed fce2 	bl	8000adc <__aeabi_dcmplt>
 8013118:	2800      	cmp	r0, #0
 801311a:	d15c      	bne.n	80131d6 <_strtod_l+0xa4e>
 801311c:	4630      	mov	r0, r6
 801311e:	4639      	mov	r1, r7
 8013120:	4b8c      	ldr	r3, [pc, #560]	; (8013354 <_strtod_l+0xbcc>)
 8013122:	2200      	movs	r2, #0
 8013124:	f7ed fa68 	bl	80005f8 <__aeabi_dmul>
 8013128:	4606      	mov	r6, r0
 801312a:	460f      	mov	r7, r1
 801312c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013130:	9606      	str	r6, [sp, #24]
 8013132:	9307      	str	r3, [sp, #28]
 8013134:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013138:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801313c:	4b86      	ldr	r3, [pc, #536]	; (8013358 <_strtod_l+0xbd0>)
 801313e:	ea0a 0303 	and.w	r3, sl, r3
 8013142:	930d      	str	r3, [sp, #52]	; 0x34
 8013144:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013146:	4b85      	ldr	r3, [pc, #532]	; (801335c <_strtod_l+0xbd4>)
 8013148:	429a      	cmp	r2, r3
 801314a:	f040 8090 	bne.w	801326e <_strtod_l+0xae6>
 801314e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013152:	ec49 8b10 	vmov	d0, r8, r9
 8013156:	f003 f81f 	bl	8016198 <__ulp>
 801315a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801315e:	ec51 0b10 	vmov	r0, r1, d0
 8013162:	f7ed fa49 	bl	80005f8 <__aeabi_dmul>
 8013166:	4642      	mov	r2, r8
 8013168:	464b      	mov	r3, r9
 801316a:	f7ed f88f 	bl	800028c <__adddf3>
 801316e:	460b      	mov	r3, r1
 8013170:	4979      	ldr	r1, [pc, #484]	; (8013358 <_strtod_l+0xbd0>)
 8013172:	4a7b      	ldr	r2, [pc, #492]	; (8013360 <_strtod_l+0xbd8>)
 8013174:	4019      	ands	r1, r3
 8013176:	4291      	cmp	r1, r2
 8013178:	4680      	mov	r8, r0
 801317a:	d944      	bls.n	8013206 <_strtod_l+0xa7e>
 801317c:	ee18 2a90 	vmov	r2, s17
 8013180:	4b78      	ldr	r3, [pc, #480]	; (8013364 <_strtod_l+0xbdc>)
 8013182:	429a      	cmp	r2, r3
 8013184:	d104      	bne.n	8013190 <_strtod_l+0xa08>
 8013186:	ee18 3a10 	vmov	r3, s16
 801318a:	3301      	adds	r3, #1
 801318c:	f43f ad40 	beq.w	8012c10 <_strtod_l+0x488>
 8013190:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013364 <_strtod_l+0xbdc>
 8013194:	f04f 38ff 	mov.w	r8, #4294967295
 8013198:	9916      	ldr	r1, [sp, #88]	; 0x58
 801319a:	4620      	mov	r0, r4
 801319c:	f002 fcd0 	bl	8015b40 <_Bfree>
 80131a0:	9905      	ldr	r1, [sp, #20]
 80131a2:	4620      	mov	r0, r4
 80131a4:	f002 fccc 	bl	8015b40 <_Bfree>
 80131a8:	4659      	mov	r1, fp
 80131aa:	4620      	mov	r0, r4
 80131ac:	f002 fcc8 	bl	8015b40 <_Bfree>
 80131b0:	4629      	mov	r1, r5
 80131b2:	4620      	mov	r0, r4
 80131b4:	f002 fcc4 	bl	8015b40 <_Bfree>
 80131b8:	e609      	b.n	8012dce <_strtod_l+0x646>
 80131ba:	f1b8 0f01 	cmp.w	r8, #1
 80131be:	d103      	bne.n	80131c8 <_strtod_l+0xa40>
 80131c0:	f1b9 0f00 	cmp.w	r9, #0
 80131c4:	f43f ad95 	beq.w	8012cf2 <_strtod_l+0x56a>
 80131c8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013320 <_strtod_l+0xb98>
 80131cc:	4f60      	ldr	r7, [pc, #384]	; (8013350 <_strtod_l+0xbc8>)
 80131ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80131d2:	2600      	movs	r6, #0
 80131d4:	e7ae      	b.n	8013134 <_strtod_l+0x9ac>
 80131d6:	4f5f      	ldr	r7, [pc, #380]	; (8013354 <_strtod_l+0xbcc>)
 80131d8:	2600      	movs	r6, #0
 80131da:	e7a7      	b.n	801312c <_strtod_l+0x9a4>
 80131dc:	4b5d      	ldr	r3, [pc, #372]	; (8013354 <_strtod_l+0xbcc>)
 80131de:	4630      	mov	r0, r6
 80131e0:	4639      	mov	r1, r7
 80131e2:	2200      	movs	r2, #0
 80131e4:	f7ed fa08 	bl	80005f8 <__aeabi_dmul>
 80131e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131ea:	4606      	mov	r6, r0
 80131ec:	460f      	mov	r7, r1
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d09c      	beq.n	801312c <_strtod_l+0x9a4>
 80131f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80131f6:	e79d      	b.n	8013134 <_strtod_l+0x9ac>
 80131f8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013328 <_strtod_l+0xba0>
 80131fc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013200:	ec57 6b17 	vmov	r6, r7, d7
 8013204:	e796      	b.n	8013134 <_strtod_l+0x9ac>
 8013206:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801320a:	9b04      	ldr	r3, [sp, #16]
 801320c:	46ca      	mov	sl, r9
 801320e:	2b00      	cmp	r3, #0
 8013210:	d1c2      	bne.n	8013198 <_strtod_l+0xa10>
 8013212:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013218:	0d1b      	lsrs	r3, r3, #20
 801321a:	051b      	lsls	r3, r3, #20
 801321c:	429a      	cmp	r2, r3
 801321e:	d1bb      	bne.n	8013198 <_strtod_l+0xa10>
 8013220:	4630      	mov	r0, r6
 8013222:	4639      	mov	r1, r7
 8013224:	f7ed fd48 	bl	8000cb8 <__aeabi_d2lz>
 8013228:	f7ed f9b8 	bl	800059c <__aeabi_l2d>
 801322c:	4602      	mov	r2, r0
 801322e:	460b      	mov	r3, r1
 8013230:	4630      	mov	r0, r6
 8013232:	4639      	mov	r1, r7
 8013234:	f7ed f828 	bl	8000288 <__aeabi_dsub>
 8013238:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801323a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801323e:	ea43 0308 	orr.w	r3, r3, r8
 8013242:	4313      	orrs	r3, r2
 8013244:	4606      	mov	r6, r0
 8013246:	460f      	mov	r7, r1
 8013248:	d054      	beq.n	80132f4 <_strtod_l+0xb6c>
 801324a:	a339      	add	r3, pc, #228	; (adr r3, 8013330 <_strtod_l+0xba8>)
 801324c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013250:	f7ed fc44 	bl	8000adc <__aeabi_dcmplt>
 8013254:	2800      	cmp	r0, #0
 8013256:	f47f ace5 	bne.w	8012c24 <_strtod_l+0x49c>
 801325a:	a337      	add	r3, pc, #220	; (adr r3, 8013338 <_strtod_l+0xbb0>)
 801325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013260:	4630      	mov	r0, r6
 8013262:	4639      	mov	r1, r7
 8013264:	f7ed fc58 	bl	8000b18 <__aeabi_dcmpgt>
 8013268:	2800      	cmp	r0, #0
 801326a:	d095      	beq.n	8013198 <_strtod_l+0xa10>
 801326c:	e4da      	b.n	8012c24 <_strtod_l+0x49c>
 801326e:	9b04      	ldr	r3, [sp, #16]
 8013270:	b333      	cbz	r3, 80132c0 <_strtod_l+0xb38>
 8013272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013274:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013278:	d822      	bhi.n	80132c0 <_strtod_l+0xb38>
 801327a:	a331      	add	r3, pc, #196	; (adr r3, 8013340 <_strtod_l+0xbb8>)
 801327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013280:	4630      	mov	r0, r6
 8013282:	4639      	mov	r1, r7
 8013284:	f7ed fc34 	bl	8000af0 <__aeabi_dcmple>
 8013288:	b1a0      	cbz	r0, 80132b4 <_strtod_l+0xb2c>
 801328a:	4639      	mov	r1, r7
 801328c:	4630      	mov	r0, r6
 801328e:	f7ed fc8b 	bl	8000ba8 <__aeabi_d2uiz>
 8013292:	2801      	cmp	r0, #1
 8013294:	bf38      	it	cc
 8013296:	2001      	movcc	r0, #1
 8013298:	f7ed f934 	bl	8000504 <__aeabi_ui2d>
 801329c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801329e:	4606      	mov	r6, r0
 80132a0:	460f      	mov	r7, r1
 80132a2:	bb23      	cbnz	r3, 80132ee <_strtod_l+0xb66>
 80132a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80132a8:	9010      	str	r0, [sp, #64]	; 0x40
 80132aa:	9311      	str	r3, [sp, #68]	; 0x44
 80132ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80132b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80132b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80132b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80132bc:	1a9b      	subs	r3, r3, r2
 80132be:	930f      	str	r3, [sp, #60]	; 0x3c
 80132c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80132c4:	eeb0 0a48 	vmov.f32	s0, s16
 80132c8:	eef0 0a68 	vmov.f32	s1, s17
 80132cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80132d0:	f002 ff62 	bl	8016198 <__ulp>
 80132d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80132d8:	ec53 2b10 	vmov	r2, r3, d0
 80132dc:	f7ed f98c 	bl	80005f8 <__aeabi_dmul>
 80132e0:	ec53 2b18 	vmov	r2, r3, d8
 80132e4:	f7ec ffd2 	bl	800028c <__adddf3>
 80132e8:	4680      	mov	r8, r0
 80132ea:	4689      	mov	r9, r1
 80132ec:	e78d      	b.n	801320a <_strtod_l+0xa82>
 80132ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80132f2:	e7db      	b.n	80132ac <_strtod_l+0xb24>
 80132f4:	a314      	add	r3, pc, #80	; (adr r3, 8013348 <_strtod_l+0xbc0>)
 80132f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fa:	f7ed fbef 	bl	8000adc <__aeabi_dcmplt>
 80132fe:	e7b3      	b.n	8013268 <_strtod_l+0xae0>
 8013300:	2300      	movs	r3, #0
 8013302:	930a      	str	r3, [sp, #40]	; 0x28
 8013304:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013308:	6013      	str	r3, [r2, #0]
 801330a:	f7ff ba7c 	b.w	8012806 <_strtod_l+0x7e>
 801330e:	2a65      	cmp	r2, #101	; 0x65
 8013310:	f43f ab75 	beq.w	80129fe <_strtod_l+0x276>
 8013314:	2a45      	cmp	r2, #69	; 0x45
 8013316:	f43f ab72 	beq.w	80129fe <_strtod_l+0x276>
 801331a:	2301      	movs	r3, #1
 801331c:	f7ff bbaa 	b.w	8012a74 <_strtod_l+0x2ec>
 8013320:	00000000 	.word	0x00000000
 8013324:	bff00000 	.word	0xbff00000
 8013328:	00000000 	.word	0x00000000
 801332c:	3ff00000 	.word	0x3ff00000
 8013330:	94a03595 	.word	0x94a03595
 8013334:	3fdfffff 	.word	0x3fdfffff
 8013338:	35afe535 	.word	0x35afe535
 801333c:	3fe00000 	.word	0x3fe00000
 8013340:	ffc00000 	.word	0xffc00000
 8013344:	41dfffff 	.word	0x41dfffff
 8013348:	94a03595 	.word	0x94a03595
 801334c:	3fcfffff 	.word	0x3fcfffff
 8013350:	3ff00000 	.word	0x3ff00000
 8013354:	3fe00000 	.word	0x3fe00000
 8013358:	7ff00000 	.word	0x7ff00000
 801335c:	7fe00000 	.word	0x7fe00000
 8013360:	7c9fffff 	.word	0x7c9fffff
 8013364:	7fefffff 	.word	0x7fefffff

08013368 <_strtod_r>:
 8013368:	4b01      	ldr	r3, [pc, #4]	; (8013370 <_strtod_r+0x8>)
 801336a:	f7ff ba0d 	b.w	8012788 <_strtod_l>
 801336e:	bf00      	nop
 8013370:	20000174 	.word	0x20000174

08013374 <__cvt>:
 8013374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013378:	ec55 4b10 	vmov	r4, r5, d0
 801337c:	2d00      	cmp	r5, #0
 801337e:	460e      	mov	r6, r1
 8013380:	4619      	mov	r1, r3
 8013382:	462b      	mov	r3, r5
 8013384:	bfbb      	ittet	lt
 8013386:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801338a:	461d      	movlt	r5, r3
 801338c:	2300      	movge	r3, #0
 801338e:	232d      	movlt	r3, #45	; 0x2d
 8013390:	700b      	strb	r3, [r1, #0]
 8013392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013394:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013398:	4691      	mov	r9, r2
 801339a:	f023 0820 	bic.w	r8, r3, #32
 801339e:	bfbc      	itt	lt
 80133a0:	4622      	movlt	r2, r4
 80133a2:	4614      	movlt	r4, r2
 80133a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133a8:	d005      	beq.n	80133b6 <__cvt+0x42>
 80133aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80133ae:	d100      	bne.n	80133b2 <__cvt+0x3e>
 80133b0:	3601      	adds	r6, #1
 80133b2:	2102      	movs	r1, #2
 80133b4:	e000      	b.n	80133b8 <__cvt+0x44>
 80133b6:	2103      	movs	r1, #3
 80133b8:	ab03      	add	r3, sp, #12
 80133ba:	9301      	str	r3, [sp, #4]
 80133bc:	ab02      	add	r3, sp, #8
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	ec45 4b10 	vmov	d0, r4, r5
 80133c4:	4653      	mov	r3, sl
 80133c6:	4632      	mov	r2, r6
 80133c8:	f001 f91e 	bl	8014608 <_dtoa_r>
 80133cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80133d0:	4607      	mov	r7, r0
 80133d2:	d102      	bne.n	80133da <__cvt+0x66>
 80133d4:	f019 0f01 	tst.w	r9, #1
 80133d8:	d022      	beq.n	8013420 <__cvt+0xac>
 80133da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80133de:	eb07 0906 	add.w	r9, r7, r6
 80133e2:	d110      	bne.n	8013406 <__cvt+0x92>
 80133e4:	783b      	ldrb	r3, [r7, #0]
 80133e6:	2b30      	cmp	r3, #48	; 0x30
 80133e8:	d10a      	bne.n	8013400 <__cvt+0x8c>
 80133ea:	2200      	movs	r2, #0
 80133ec:	2300      	movs	r3, #0
 80133ee:	4620      	mov	r0, r4
 80133f0:	4629      	mov	r1, r5
 80133f2:	f7ed fb69 	bl	8000ac8 <__aeabi_dcmpeq>
 80133f6:	b918      	cbnz	r0, 8013400 <__cvt+0x8c>
 80133f8:	f1c6 0601 	rsb	r6, r6, #1
 80133fc:	f8ca 6000 	str.w	r6, [sl]
 8013400:	f8da 3000 	ldr.w	r3, [sl]
 8013404:	4499      	add	r9, r3
 8013406:	2200      	movs	r2, #0
 8013408:	2300      	movs	r3, #0
 801340a:	4620      	mov	r0, r4
 801340c:	4629      	mov	r1, r5
 801340e:	f7ed fb5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013412:	b108      	cbz	r0, 8013418 <__cvt+0xa4>
 8013414:	f8cd 900c 	str.w	r9, [sp, #12]
 8013418:	2230      	movs	r2, #48	; 0x30
 801341a:	9b03      	ldr	r3, [sp, #12]
 801341c:	454b      	cmp	r3, r9
 801341e:	d307      	bcc.n	8013430 <__cvt+0xbc>
 8013420:	9b03      	ldr	r3, [sp, #12]
 8013422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013424:	1bdb      	subs	r3, r3, r7
 8013426:	4638      	mov	r0, r7
 8013428:	6013      	str	r3, [r2, #0]
 801342a:	b004      	add	sp, #16
 801342c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013430:	1c59      	adds	r1, r3, #1
 8013432:	9103      	str	r1, [sp, #12]
 8013434:	701a      	strb	r2, [r3, #0]
 8013436:	e7f0      	b.n	801341a <__cvt+0xa6>

08013438 <__exponent>:
 8013438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801343a:	4603      	mov	r3, r0
 801343c:	2900      	cmp	r1, #0
 801343e:	bfb8      	it	lt
 8013440:	4249      	neglt	r1, r1
 8013442:	f803 2b02 	strb.w	r2, [r3], #2
 8013446:	bfb4      	ite	lt
 8013448:	222d      	movlt	r2, #45	; 0x2d
 801344a:	222b      	movge	r2, #43	; 0x2b
 801344c:	2909      	cmp	r1, #9
 801344e:	7042      	strb	r2, [r0, #1]
 8013450:	dd2a      	ble.n	80134a8 <__exponent+0x70>
 8013452:	f10d 0207 	add.w	r2, sp, #7
 8013456:	4617      	mov	r7, r2
 8013458:	260a      	movs	r6, #10
 801345a:	4694      	mov	ip, r2
 801345c:	fb91 f5f6 	sdiv	r5, r1, r6
 8013460:	fb06 1415 	mls	r4, r6, r5, r1
 8013464:	3430      	adds	r4, #48	; 0x30
 8013466:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801346a:	460c      	mov	r4, r1
 801346c:	2c63      	cmp	r4, #99	; 0x63
 801346e:	f102 32ff 	add.w	r2, r2, #4294967295
 8013472:	4629      	mov	r1, r5
 8013474:	dcf1      	bgt.n	801345a <__exponent+0x22>
 8013476:	3130      	adds	r1, #48	; 0x30
 8013478:	f1ac 0402 	sub.w	r4, ip, #2
 801347c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013480:	1c41      	adds	r1, r0, #1
 8013482:	4622      	mov	r2, r4
 8013484:	42ba      	cmp	r2, r7
 8013486:	d30a      	bcc.n	801349e <__exponent+0x66>
 8013488:	f10d 0209 	add.w	r2, sp, #9
 801348c:	eba2 020c 	sub.w	r2, r2, ip
 8013490:	42bc      	cmp	r4, r7
 8013492:	bf88      	it	hi
 8013494:	2200      	movhi	r2, #0
 8013496:	4413      	add	r3, r2
 8013498:	1a18      	subs	r0, r3, r0
 801349a:	b003      	add	sp, #12
 801349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801349e:	f812 5b01 	ldrb.w	r5, [r2], #1
 80134a2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80134a6:	e7ed      	b.n	8013484 <__exponent+0x4c>
 80134a8:	2330      	movs	r3, #48	; 0x30
 80134aa:	3130      	adds	r1, #48	; 0x30
 80134ac:	7083      	strb	r3, [r0, #2]
 80134ae:	70c1      	strb	r1, [r0, #3]
 80134b0:	1d03      	adds	r3, r0, #4
 80134b2:	e7f1      	b.n	8013498 <__exponent+0x60>

080134b4 <_printf_float>:
 80134b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b8:	ed2d 8b02 	vpush	{d8}
 80134bc:	b08d      	sub	sp, #52	; 0x34
 80134be:	460c      	mov	r4, r1
 80134c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80134c4:	4616      	mov	r6, r2
 80134c6:	461f      	mov	r7, r3
 80134c8:	4605      	mov	r5, r0
 80134ca:	f000 ff7d 	bl	80143c8 <_localeconv_r>
 80134ce:	f8d0 a000 	ldr.w	sl, [r0]
 80134d2:	4650      	mov	r0, sl
 80134d4:	f7ec fecc 	bl	8000270 <strlen>
 80134d8:	2300      	movs	r3, #0
 80134da:	930a      	str	r3, [sp, #40]	; 0x28
 80134dc:	6823      	ldr	r3, [r4, #0]
 80134de:	9305      	str	r3, [sp, #20]
 80134e0:	f8d8 3000 	ldr.w	r3, [r8]
 80134e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80134e8:	3307      	adds	r3, #7
 80134ea:	f023 0307 	bic.w	r3, r3, #7
 80134ee:	f103 0208 	add.w	r2, r3, #8
 80134f2:	f8c8 2000 	str.w	r2, [r8]
 80134f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80134fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80134fe:	9307      	str	r3, [sp, #28]
 8013500:	f8cd 8018 	str.w	r8, [sp, #24]
 8013504:	ee08 0a10 	vmov	s16, r0
 8013508:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801350c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013510:	4b9e      	ldr	r3, [pc, #632]	; (801378c <_printf_float+0x2d8>)
 8013512:	f04f 32ff 	mov.w	r2, #4294967295
 8013516:	f7ed fb09 	bl	8000b2c <__aeabi_dcmpun>
 801351a:	bb88      	cbnz	r0, 8013580 <_printf_float+0xcc>
 801351c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013520:	4b9a      	ldr	r3, [pc, #616]	; (801378c <_printf_float+0x2d8>)
 8013522:	f04f 32ff 	mov.w	r2, #4294967295
 8013526:	f7ed fae3 	bl	8000af0 <__aeabi_dcmple>
 801352a:	bb48      	cbnz	r0, 8013580 <_printf_float+0xcc>
 801352c:	2200      	movs	r2, #0
 801352e:	2300      	movs	r3, #0
 8013530:	4640      	mov	r0, r8
 8013532:	4649      	mov	r1, r9
 8013534:	f7ed fad2 	bl	8000adc <__aeabi_dcmplt>
 8013538:	b110      	cbz	r0, 8013540 <_printf_float+0x8c>
 801353a:	232d      	movs	r3, #45	; 0x2d
 801353c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013540:	4a93      	ldr	r2, [pc, #588]	; (8013790 <_printf_float+0x2dc>)
 8013542:	4b94      	ldr	r3, [pc, #592]	; (8013794 <_printf_float+0x2e0>)
 8013544:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013548:	bf94      	ite	ls
 801354a:	4690      	movls	r8, r2
 801354c:	4698      	movhi	r8, r3
 801354e:	2303      	movs	r3, #3
 8013550:	6123      	str	r3, [r4, #16]
 8013552:	9b05      	ldr	r3, [sp, #20]
 8013554:	f023 0304 	bic.w	r3, r3, #4
 8013558:	6023      	str	r3, [r4, #0]
 801355a:	f04f 0900 	mov.w	r9, #0
 801355e:	9700      	str	r7, [sp, #0]
 8013560:	4633      	mov	r3, r6
 8013562:	aa0b      	add	r2, sp, #44	; 0x2c
 8013564:	4621      	mov	r1, r4
 8013566:	4628      	mov	r0, r5
 8013568:	f000 f9da 	bl	8013920 <_printf_common>
 801356c:	3001      	adds	r0, #1
 801356e:	f040 8090 	bne.w	8013692 <_printf_float+0x1de>
 8013572:	f04f 30ff 	mov.w	r0, #4294967295
 8013576:	b00d      	add	sp, #52	; 0x34
 8013578:	ecbd 8b02 	vpop	{d8}
 801357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013580:	4642      	mov	r2, r8
 8013582:	464b      	mov	r3, r9
 8013584:	4640      	mov	r0, r8
 8013586:	4649      	mov	r1, r9
 8013588:	f7ed fad0 	bl	8000b2c <__aeabi_dcmpun>
 801358c:	b140      	cbz	r0, 80135a0 <_printf_float+0xec>
 801358e:	464b      	mov	r3, r9
 8013590:	2b00      	cmp	r3, #0
 8013592:	bfbc      	itt	lt
 8013594:	232d      	movlt	r3, #45	; 0x2d
 8013596:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801359a:	4a7f      	ldr	r2, [pc, #508]	; (8013798 <_printf_float+0x2e4>)
 801359c:	4b7f      	ldr	r3, [pc, #508]	; (801379c <_printf_float+0x2e8>)
 801359e:	e7d1      	b.n	8013544 <_printf_float+0x90>
 80135a0:	6863      	ldr	r3, [r4, #4]
 80135a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80135a6:	9206      	str	r2, [sp, #24]
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	d13f      	bne.n	801362c <_printf_float+0x178>
 80135ac:	2306      	movs	r3, #6
 80135ae:	6063      	str	r3, [r4, #4]
 80135b0:	9b05      	ldr	r3, [sp, #20]
 80135b2:	6861      	ldr	r1, [r4, #4]
 80135b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80135b8:	2300      	movs	r3, #0
 80135ba:	9303      	str	r3, [sp, #12]
 80135bc:	ab0a      	add	r3, sp, #40	; 0x28
 80135be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80135c2:	ab09      	add	r3, sp, #36	; 0x24
 80135c4:	ec49 8b10 	vmov	d0, r8, r9
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	6022      	str	r2, [r4, #0]
 80135cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80135d0:	4628      	mov	r0, r5
 80135d2:	f7ff fecf 	bl	8013374 <__cvt>
 80135d6:	9b06      	ldr	r3, [sp, #24]
 80135d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80135da:	2b47      	cmp	r3, #71	; 0x47
 80135dc:	4680      	mov	r8, r0
 80135de:	d108      	bne.n	80135f2 <_printf_float+0x13e>
 80135e0:	1cc8      	adds	r0, r1, #3
 80135e2:	db02      	blt.n	80135ea <_printf_float+0x136>
 80135e4:	6863      	ldr	r3, [r4, #4]
 80135e6:	4299      	cmp	r1, r3
 80135e8:	dd41      	ble.n	801366e <_printf_float+0x1ba>
 80135ea:	f1ab 0302 	sub.w	r3, fp, #2
 80135ee:	fa5f fb83 	uxtb.w	fp, r3
 80135f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80135f6:	d820      	bhi.n	801363a <_printf_float+0x186>
 80135f8:	3901      	subs	r1, #1
 80135fa:	465a      	mov	r2, fp
 80135fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013600:	9109      	str	r1, [sp, #36]	; 0x24
 8013602:	f7ff ff19 	bl	8013438 <__exponent>
 8013606:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013608:	1813      	adds	r3, r2, r0
 801360a:	2a01      	cmp	r2, #1
 801360c:	4681      	mov	r9, r0
 801360e:	6123      	str	r3, [r4, #16]
 8013610:	dc02      	bgt.n	8013618 <_printf_float+0x164>
 8013612:	6822      	ldr	r2, [r4, #0]
 8013614:	07d2      	lsls	r2, r2, #31
 8013616:	d501      	bpl.n	801361c <_printf_float+0x168>
 8013618:	3301      	adds	r3, #1
 801361a:	6123      	str	r3, [r4, #16]
 801361c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013620:	2b00      	cmp	r3, #0
 8013622:	d09c      	beq.n	801355e <_printf_float+0xaa>
 8013624:	232d      	movs	r3, #45	; 0x2d
 8013626:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801362a:	e798      	b.n	801355e <_printf_float+0xaa>
 801362c:	9a06      	ldr	r2, [sp, #24]
 801362e:	2a47      	cmp	r2, #71	; 0x47
 8013630:	d1be      	bne.n	80135b0 <_printf_float+0xfc>
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1bc      	bne.n	80135b0 <_printf_float+0xfc>
 8013636:	2301      	movs	r3, #1
 8013638:	e7b9      	b.n	80135ae <_printf_float+0xfa>
 801363a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801363e:	d118      	bne.n	8013672 <_printf_float+0x1be>
 8013640:	2900      	cmp	r1, #0
 8013642:	6863      	ldr	r3, [r4, #4]
 8013644:	dd0b      	ble.n	801365e <_printf_float+0x1aa>
 8013646:	6121      	str	r1, [r4, #16]
 8013648:	b913      	cbnz	r3, 8013650 <_printf_float+0x19c>
 801364a:	6822      	ldr	r2, [r4, #0]
 801364c:	07d0      	lsls	r0, r2, #31
 801364e:	d502      	bpl.n	8013656 <_printf_float+0x1a2>
 8013650:	3301      	adds	r3, #1
 8013652:	440b      	add	r3, r1
 8013654:	6123      	str	r3, [r4, #16]
 8013656:	65a1      	str	r1, [r4, #88]	; 0x58
 8013658:	f04f 0900 	mov.w	r9, #0
 801365c:	e7de      	b.n	801361c <_printf_float+0x168>
 801365e:	b913      	cbnz	r3, 8013666 <_printf_float+0x1b2>
 8013660:	6822      	ldr	r2, [r4, #0]
 8013662:	07d2      	lsls	r2, r2, #31
 8013664:	d501      	bpl.n	801366a <_printf_float+0x1b6>
 8013666:	3302      	adds	r3, #2
 8013668:	e7f4      	b.n	8013654 <_printf_float+0x1a0>
 801366a:	2301      	movs	r3, #1
 801366c:	e7f2      	b.n	8013654 <_printf_float+0x1a0>
 801366e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013674:	4299      	cmp	r1, r3
 8013676:	db05      	blt.n	8013684 <_printf_float+0x1d0>
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	6121      	str	r1, [r4, #16]
 801367c:	07d8      	lsls	r0, r3, #31
 801367e:	d5ea      	bpl.n	8013656 <_printf_float+0x1a2>
 8013680:	1c4b      	adds	r3, r1, #1
 8013682:	e7e7      	b.n	8013654 <_printf_float+0x1a0>
 8013684:	2900      	cmp	r1, #0
 8013686:	bfd4      	ite	le
 8013688:	f1c1 0202 	rsble	r2, r1, #2
 801368c:	2201      	movgt	r2, #1
 801368e:	4413      	add	r3, r2
 8013690:	e7e0      	b.n	8013654 <_printf_float+0x1a0>
 8013692:	6823      	ldr	r3, [r4, #0]
 8013694:	055a      	lsls	r2, r3, #21
 8013696:	d407      	bmi.n	80136a8 <_printf_float+0x1f4>
 8013698:	6923      	ldr	r3, [r4, #16]
 801369a:	4642      	mov	r2, r8
 801369c:	4631      	mov	r1, r6
 801369e:	4628      	mov	r0, r5
 80136a0:	47b8      	blx	r7
 80136a2:	3001      	adds	r0, #1
 80136a4:	d12c      	bne.n	8013700 <_printf_float+0x24c>
 80136a6:	e764      	b.n	8013572 <_printf_float+0xbe>
 80136a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80136ac:	f240 80e0 	bls.w	8013870 <_printf_float+0x3bc>
 80136b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136b4:	2200      	movs	r2, #0
 80136b6:	2300      	movs	r3, #0
 80136b8:	f7ed fa06 	bl	8000ac8 <__aeabi_dcmpeq>
 80136bc:	2800      	cmp	r0, #0
 80136be:	d034      	beq.n	801372a <_printf_float+0x276>
 80136c0:	4a37      	ldr	r2, [pc, #220]	; (80137a0 <_printf_float+0x2ec>)
 80136c2:	2301      	movs	r3, #1
 80136c4:	4631      	mov	r1, r6
 80136c6:	4628      	mov	r0, r5
 80136c8:	47b8      	blx	r7
 80136ca:	3001      	adds	r0, #1
 80136cc:	f43f af51 	beq.w	8013572 <_printf_float+0xbe>
 80136d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80136d4:	429a      	cmp	r2, r3
 80136d6:	db02      	blt.n	80136de <_printf_float+0x22a>
 80136d8:	6823      	ldr	r3, [r4, #0]
 80136da:	07d8      	lsls	r0, r3, #31
 80136dc:	d510      	bpl.n	8013700 <_printf_float+0x24c>
 80136de:	ee18 3a10 	vmov	r3, s16
 80136e2:	4652      	mov	r2, sl
 80136e4:	4631      	mov	r1, r6
 80136e6:	4628      	mov	r0, r5
 80136e8:	47b8      	blx	r7
 80136ea:	3001      	adds	r0, #1
 80136ec:	f43f af41 	beq.w	8013572 <_printf_float+0xbe>
 80136f0:	f04f 0800 	mov.w	r8, #0
 80136f4:	f104 091a 	add.w	r9, r4, #26
 80136f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136fa:	3b01      	subs	r3, #1
 80136fc:	4543      	cmp	r3, r8
 80136fe:	dc09      	bgt.n	8013714 <_printf_float+0x260>
 8013700:	6823      	ldr	r3, [r4, #0]
 8013702:	079b      	lsls	r3, r3, #30
 8013704:	f100 8107 	bmi.w	8013916 <_printf_float+0x462>
 8013708:	68e0      	ldr	r0, [r4, #12]
 801370a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801370c:	4298      	cmp	r0, r3
 801370e:	bfb8      	it	lt
 8013710:	4618      	movlt	r0, r3
 8013712:	e730      	b.n	8013576 <_printf_float+0xc2>
 8013714:	2301      	movs	r3, #1
 8013716:	464a      	mov	r2, r9
 8013718:	4631      	mov	r1, r6
 801371a:	4628      	mov	r0, r5
 801371c:	47b8      	blx	r7
 801371e:	3001      	adds	r0, #1
 8013720:	f43f af27 	beq.w	8013572 <_printf_float+0xbe>
 8013724:	f108 0801 	add.w	r8, r8, #1
 8013728:	e7e6      	b.n	80136f8 <_printf_float+0x244>
 801372a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801372c:	2b00      	cmp	r3, #0
 801372e:	dc39      	bgt.n	80137a4 <_printf_float+0x2f0>
 8013730:	4a1b      	ldr	r2, [pc, #108]	; (80137a0 <_printf_float+0x2ec>)
 8013732:	2301      	movs	r3, #1
 8013734:	4631      	mov	r1, r6
 8013736:	4628      	mov	r0, r5
 8013738:	47b8      	blx	r7
 801373a:	3001      	adds	r0, #1
 801373c:	f43f af19 	beq.w	8013572 <_printf_float+0xbe>
 8013740:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013744:	4313      	orrs	r3, r2
 8013746:	d102      	bne.n	801374e <_printf_float+0x29a>
 8013748:	6823      	ldr	r3, [r4, #0]
 801374a:	07d9      	lsls	r1, r3, #31
 801374c:	d5d8      	bpl.n	8013700 <_printf_float+0x24c>
 801374e:	ee18 3a10 	vmov	r3, s16
 8013752:	4652      	mov	r2, sl
 8013754:	4631      	mov	r1, r6
 8013756:	4628      	mov	r0, r5
 8013758:	47b8      	blx	r7
 801375a:	3001      	adds	r0, #1
 801375c:	f43f af09 	beq.w	8013572 <_printf_float+0xbe>
 8013760:	f04f 0900 	mov.w	r9, #0
 8013764:	f104 0a1a 	add.w	sl, r4, #26
 8013768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801376a:	425b      	negs	r3, r3
 801376c:	454b      	cmp	r3, r9
 801376e:	dc01      	bgt.n	8013774 <_printf_float+0x2c0>
 8013770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013772:	e792      	b.n	801369a <_printf_float+0x1e6>
 8013774:	2301      	movs	r3, #1
 8013776:	4652      	mov	r2, sl
 8013778:	4631      	mov	r1, r6
 801377a:	4628      	mov	r0, r5
 801377c:	47b8      	blx	r7
 801377e:	3001      	adds	r0, #1
 8013780:	f43f aef7 	beq.w	8013572 <_printf_float+0xbe>
 8013784:	f109 0901 	add.w	r9, r9, #1
 8013788:	e7ee      	b.n	8013768 <_printf_float+0x2b4>
 801378a:	bf00      	nop
 801378c:	7fefffff 	.word	0x7fefffff
 8013790:	08018518 	.word	0x08018518
 8013794:	0801851c 	.word	0x0801851c
 8013798:	08018520 	.word	0x08018520
 801379c:	08018524 	.word	0x08018524
 80137a0:	080188c4 	.word	0x080188c4
 80137a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80137a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137a8:	429a      	cmp	r2, r3
 80137aa:	bfa8      	it	ge
 80137ac:	461a      	movge	r2, r3
 80137ae:	2a00      	cmp	r2, #0
 80137b0:	4691      	mov	r9, r2
 80137b2:	dc37      	bgt.n	8013824 <_printf_float+0x370>
 80137b4:	f04f 0b00 	mov.w	fp, #0
 80137b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137bc:	f104 021a 	add.w	r2, r4, #26
 80137c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80137c2:	9305      	str	r3, [sp, #20]
 80137c4:	eba3 0309 	sub.w	r3, r3, r9
 80137c8:	455b      	cmp	r3, fp
 80137ca:	dc33      	bgt.n	8013834 <_printf_float+0x380>
 80137cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137d0:	429a      	cmp	r2, r3
 80137d2:	db3b      	blt.n	801384c <_printf_float+0x398>
 80137d4:	6823      	ldr	r3, [r4, #0]
 80137d6:	07da      	lsls	r2, r3, #31
 80137d8:	d438      	bmi.n	801384c <_printf_float+0x398>
 80137da:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80137de:	eba2 0903 	sub.w	r9, r2, r3
 80137e2:	9b05      	ldr	r3, [sp, #20]
 80137e4:	1ad2      	subs	r2, r2, r3
 80137e6:	4591      	cmp	r9, r2
 80137e8:	bfa8      	it	ge
 80137ea:	4691      	movge	r9, r2
 80137ec:	f1b9 0f00 	cmp.w	r9, #0
 80137f0:	dc35      	bgt.n	801385e <_printf_float+0x3aa>
 80137f2:	f04f 0800 	mov.w	r8, #0
 80137f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80137fa:	f104 0a1a 	add.w	sl, r4, #26
 80137fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013802:	1a9b      	subs	r3, r3, r2
 8013804:	eba3 0309 	sub.w	r3, r3, r9
 8013808:	4543      	cmp	r3, r8
 801380a:	f77f af79 	ble.w	8013700 <_printf_float+0x24c>
 801380e:	2301      	movs	r3, #1
 8013810:	4652      	mov	r2, sl
 8013812:	4631      	mov	r1, r6
 8013814:	4628      	mov	r0, r5
 8013816:	47b8      	blx	r7
 8013818:	3001      	adds	r0, #1
 801381a:	f43f aeaa 	beq.w	8013572 <_printf_float+0xbe>
 801381e:	f108 0801 	add.w	r8, r8, #1
 8013822:	e7ec      	b.n	80137fe <_printf_float+0x34a>
 8013824:	4613      	mov	r3, r2
 8013826:	4631      	mov	r1, r6
 8013828:	4642      	mov	r2, r8
 801382a:	4628      	mov	r0, r5
 801382c:	47b8      	blx	r7
 801382e:	3001      	adds	r0, #1
 8013830:	d1c0      	bne.n	80137b4 <_printf_float+0x300>
 8013832:	e69e      	b.n	8013572 <_printf_float+0xbe>
 8013834:	2301      	movs	r3, #1
 8013836:	4631      	mov	r1, r6
 8013838:	4628      	mov	r0, r5
 801383a:	9205      	str	r2, [sp, #20]
 801383c:	47b8      	blx	r7
 801383e:	3001      	adds	r0, #1
 8013840:	f43f ae97 	beq.w	8013572 <_printf_float+0xbe>
 8013844:	9a05      	ldr	r2, [sp, #20]
 8013846:	f10b 0b01 	add.w	fp, fp, #1
 801384a:	e7b9      	b.n	80137c0 <_printf_float+0x30c>
 801384c:	ee18 3a10 	vmov	r3, s16
 8013850:	4652      	mov	r2, sl
 8013852:	4631      	mov	r1, r6
 8013854:	4628      	mov	r0, r5
 8013856:	47b8      	blx	r7
 8013858:	3001      	adds	r0, #1
 801385a:	d1be      	bne.n	80137da <_printf_float+0x326>
 801385c:	e689      	b.n	8013572 <_printf_float+0xbe>
 801385e:	9a05      	ldr	r2, [sp, #20]
 8013860:	464b      	mov	r3, r9
 8013862:	4442      	add	r2, r8
 8013864:	4631      	mov	r1, r6
 8013866:	4628      	mov	r0, r5
 8013868:	47b8      	blx	r7
 801386a:	3001      	adds	r0, #1
 801386c:	d1c1      	bne.n	80137f2 <_printf_float+0x33e>
 801386e:	e680      	b.n	8013572 <_printf_float+0xbe>
 8013870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013872:	2a01      	cmp	r2, #1
 8013874:	dc01      	bgt.n	801387a <_printf_float+0x3c6>
 8013876:	07db      	lsls	r3, r3, #31
 8013878:	d53a      	bpl.n	80138f0 <_printf_float+0x43c>
 801387a:	2301      	movs	r3, #1
 801387c:	4642      	mov	r2, r8
 801387e:	4631      	mov	r1, r6
 8013880:	4628      	mov	r0, r5
 8013882:	47b8      	blx	r7
 8013884:	3001      	adds	r0, #1
 8013886:	f43f ae74 	beq.w	8013572 <_printf_float+0xbe>
 801388a:	ee18 3a10 	vmov	r3, s16
 801388e:	4652      	mov	r2, sl
 8013890:	4631      	mov	r1, r6
 8013892:	4628      	mov	r0, r5
 8013894:	47b8      	blx	r7
 8013896:	3001      	adds	r0, #1
 8013898:	f43f ae6b 	beq.w	8013572 <_printf_float+0xbe>
 801389c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80138a0:	2200      	movs	r2, #0
 80138a2:	2300      	movs	r3, #0
 80138a4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80138a8:	f7ed f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80138ac:	b9d8      	cbnz	r0, 80138e6 <_printf_float+0x432>
 80138ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 80138b2:	f108 0201 	add.w	r2, r8, #1
 80138b6:	4631      	mov	r1, r6
 80138b8:	4628      	mov	r0, r5
 80138ba:	47b8      	blx	r7
 80138bc:	3001      	adds	r0, #1
 80138be:	d10e      	bne.n	80138de <_printf_float+0x42a>
 80138c0:	e657      	b.n	8013572 <_printf_float+0xbe>
 80138c2:	2301      	movs	r3, #1
 80138c4:	4652      	mov	r2, sl
 80138c6:	4631      	mov	r1, r6
 80138c8:	4628      	mov	r0, r5
 80138ca:	47b8      	blx	r7
 80138cc:	3001      	adds	r0, #1
 80138ce:	f43f ae50 	beq.w	8013572 <_printf_float+0xbe>
 80138d2:	f108 0801 	add.w	r8, r8, #1
 80138d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138d8:	3b01      	subs	r3, #1
 80138da:	4543      	cmp	r3, r8
 80138dc:	dcf1      	bgt.n	80138c2 <_printf_float+0x40e>
 80138de:	464b      	mov	r3, r9
 80138e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80138e4:	e6da      	b.n	801369c <_printf_float+0x1e8>
 80138e6:	f04f 0800 	mov.w	r8, #0
 80138ea:	f104 0a1a 	add.w	sl, r4, #26
 80138ee:	e7f2      	b.n	80138d6 <_printf_float+0x422>
 80138f0:	2301      	movs	r3, #1
 80138f2:	4642      	mov	r2, r8
 80138f4:	e7df      	b.n	80138b6 <_printf_float+0x402>
 80138f6:	2301      	movs	r3, #1
 80138f8:	464a      	mov	r2, r9
 80138fa:	4631      	mov	r1, r6
 80138fc:	4628      	mov	r0, r5
 80138fe:	47b8      	blx	r7
 8013900:	3001      	adds	r0, #1
 8013902:	f43f ae36 	beq.w	8013572 <_printf_float+0xbe>
 8013906:	f108 0801 	add.w	r8, r8, #1
 801390a:	68e3      	ldr	r3, [r4, #12]
 801390c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801390e:	1a5b      	subs	r3, r3, r1
 8013910:	4543      	cmp	r3, r8
 8013912:	dcf0      	bgt.n	80138f6 <_printf_float+0x442>
 8013914:	e6f8      	b.n	8013708 <_printf_float+0x254>
 8013916:	f04f 0800 	mov.w	r8, #0
 801391a:	f104 0919 	add.w	r9, r4, #25
 801391e:	e7f4      	b.n	801390a <_printf_float+0x456>

08013920 <_printf_common>:
 8013920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013924:	4616      	mov	r6, r2
 8013926:	4699      	mov	r9, r3
 8013928:	688a      	ldr	r2, [r1, #8]
 801392a:	690b      	ldr	r3, [r1, #16]
 801392c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013930:	4293      	cmp	r3, r2
 8013932:	bfb8      	it	lt
 8013934:	4613      	movlt	r3, r2
 8013936:	6033      	str	r3, [r6, #0]
 8013938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801393c:	4607      	mov	r7, r0
 801393e:	460c      	mov	r4, r1
 8013940:	b10a      	cbz	r2, 8013946 <_printf_common+0x26>
 8013942:	3301      	adds	r3, #1
 8013944:	6033      	str	r3, [r6, #0]
 8013946:	6823      	ldr	r3, [r4, #0]
 8013948:	0699      	lsls	r1, r3, #26
 801394a:	bf42      	ittt	mi
 801394c:	6833      	ldrmi	r3, [r6, #0]
 801394e:	3302      	addmi	r3, #2
 8013950:	6033      	strmi	r3, [r6, #0]
 8013952:	6825      	ldr	r5, [r4, #0]
 8013954:	f015 0506 	ands.w	r5, r5, #6
 8013958:	d106      	bne.n	8013968 <_printf_common+0x48>
 801395a:	f104 0a19 	add.w	sl, r4, #25
 801395e:	68e3      	ldr	r3, [r4, #12]
 8013960:	6832      	ldr	r2, [r6, #0]
 8013962:	1a9b      	subs	r3, r3, r2
 8013964:	42ab      	cmp	r3, r5
 8013966:	dc26      	bgt.n	80139b6 <_printf_common+0x96>
 8013968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801396c:	1e13      	subs	r3, r2, #0
 801396e:	6822      	ldr	r2, [r4, #0]
 8013970:	bf18      	it	ne
 8013972:	2301      	movne	r3, #1
 8013974:	0692      	lsls	r2, r2, #26
 8013976:	d42b      	bmi.n	80139d0 <_printf_common+0xb0>
 8013978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801397c:	4649      	mov	r1, r9
 801397e:	4638      	mov	r0, r7
 8013980:	47c0      	blx	r8
 8013982:	3001      	adds	r0, #1
 8013984:	d01e      	beq.n	80139c4 <_printf_common+0xa4>
 8013986:	6823      	ldr	r3, [r4, #0]
 8013988:	6922      	ldr	r2, [r4, #16]
 801398a:	f003 0306 	and.w	r3, r3, #6
 801398e:	2b04      	cmp	r3, #4
 8013990:	bf02      	ittt	eq
 8013992:	68e5      	ldreq	r5, [r4, #12]
 8013994:	6833      	ldreq	r3, [r6, #0]
 8013996:	1aed      	subeq	r5, r5, r3
 8013998:	68a3      	ldr	r3, [r4, #8]
 801399a:	bf0c      	ite	eq
 801399c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80139a0:	2500      	movne	r5, #0
 80139a2:	4293      	cmp	r3, r2
 80139a4:	bfc4      	itt	gt
 80139a6:	1a9b      	subgt	r3, r3, r2
 80139a8:	18ed      	addgt	r5, r5, r3
 80139aa:	2600      	movs	r6, #0
 80139ac:	341a      	adds	r4, #26
 80139ae:	42b5      	cmp	r5, r6
 80139b0:	d11a      	bne.n	80139e8 <_printf_common+0xc8>
 80139b2:	2000      	movs	r0, #0
 80139b4:	e008      	b.n	80139c8 <_printf_common+0xa8>
 80139b6:	2301      	movs	r3, #1
 80139b8:	4652      	mov	r2, sl
 80139ba:	4649      	mov	r1, r9
 80139bc:	4638      	mov	r0, r7
 80139be:	47c0      	blx	r8
 80139c0:	3001      	adds	r0, #1
 80139c2:	d103      	bne.n	80139cc <_printf_common+0xac>
 80139c4:	f04f 30ff 	mov.w	r0, #4294967295
 80139c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139cc:	3501      	adds	r5, #1
 80139ce:	e7c6      	b.n	801395e <_printf_common+0x3e>
 80139d0:	18e1      	adds	r1, r4, r3
 80139d2:	1c5a      	adds	r2, r3, #1
 80139d4:	2030      	movs	r0, #48	; 0x30
 80139d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80139da:	4422      	add	r2, r4
 80139dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139e4:	3302      	adds	r3, #2
 80139e6:	e7c7      	b.n	8013978 <_printf_common+0x58>
 80139e8:	2301      	movs	r3, #1
 80139ea:	4622      	mov	r2, r4
 80139ec:	4649      	mov	r1, r9
 80139ee:	4638      	mov	r0, r7
 80139f0:	47c0      	blx	r8
 80139f2:	3001      	adds	r0, #1
 80139f4:	d0e6      	beq.n	80139c4 <_printf_common+0xa4>
 80139f6:	3601      	adds	r6, #1
 80139f8:	e7d9      	b.n	80139ae <_printf_common+0x8e>
	...

080139fc <_printf_i>:
 80139fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a00:	7e0f      	ldrb	r7, [r1, #24]
 8013a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013a04:	2f78      	cmp	r7, #120	; 0x78
 8013a06:	4691      	mov	r9, r2
 8013a08:	4680      	mov	r8, r0
 8013a0a:	460c      	mov	r4, r1
 8013a0c:	469a      	mov	sl, r3
 8013a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013a12:	d807      	bhi.n	8013a24 <_printf_i+0x28>
 8013a14:	2f62      	cmp	r7, #98	; 0x62
 8013a16:	d80a      	bhi.n	8013a2e <_printf_i+0x32>
 8013a18:	2f00      	cmp	r7, #0
 8013a1a:	f000 80d4 	beq.w	8013bc6 <_printf_i+0x1ca>
 8013a1e:	2f58      	cmp	r7, #88	; 0x58
 8013a20:	f000 80c0 	beq.w	8013ba4 <_printf_i+0x1a8>
 8013a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013a2c:	e03a      	b.n	8013aa4 <_printf_i+0xa8>
 8013a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013a32:	2b15      	cmp	r3, #21
 8013a34:	d8f6      	bhi.n	8013a24 <_printf_i+0x28>
 8013a36:	a101      	add	r1, pc, #4	; (adr r1, 8013a3c <_printf_i+0x40>)
 8013a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013a3c:	08013a95 	.word	0x08013a95
 8013a40:	08013aa9 	.word	0x08013aa9
 8013a44:	08013a25 	.word	0x08013a25
 8013a48:	08013a25 	.word	0x08013a25
 8013a4c:	08013a25 	.word	0x08013a25
 8013a50:	08013a25 	.word	0x08013a25
 8013a54:	08013aa9 	.word	0x08013aa9
 8013a58:	08013a25 	.word	0x08013a25
 8013a5c:	08013a25 	.word	0x08013a25
 8013a60:	08013a25 	.word	0x08013a25
 8013a64:	08013a25 	.word	0x08013a25
 8013a68:	08013bad 	.word	0x08013bad
 8013a6c:	08013ad5 	.word	0x08013ad5
 8013a70:	08013b67 	.word	0x08013b67
 8013a74:	08013a25 	.word	0x08013a25
 8013a78:	08013a25 	.word	0x08013a25
 8013a7c:	08013bcf 	.word	0x08013bcf
 8013a80:	08013a25 	.word	0x08013a25
 8013a84:	08013ad5 	.word	0x08013ad5
 8013a88:	08013a25 	.word	0x08013a25
 8013a8c:	08013a25 	.word	0x08013a25
 8013a90:	08013b6f 	.word	0x08013b6f
 8013a94:	682b      	ldr	r3, [r5, #0]
 8013a96:	1d1a      	adds	r2, r3, #4
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	602a      	str	r2, [r5, #0]
 8013a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	e09f      	b.n	8013be8 <_printf_i+0x1ec>
 8013aa8:	6820      	ldr	r0, [r4, #0]
 8013aaa:	682b      	ldr	r3, [r5, #0]
 8013aac:	0607      	lsls	r7, r0, #24
 8013aae:	f103 0104 	add.w	r1, r3, #4
 8013ab2:	6029      	str	r1, [r5, #0]
 8013ab4:	d501      	bpl.n	8013aba <_printf_i+0xbe>
 8013ab6:	681e      	ldr	r6, [r3, #0]
 8013ab8:	e003      	b.n	8013ac2 <_printf_i+0xc6>
 8013aba:	0646      	lsls	r6, r0, #25
 8013abc:	d5fb      	bpl.n	8013ab6 <_printf_i+0xba>
 8013abe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013ac2:	2e00      	cmp	r6, #0
 8013ac4:	da03      	bge.n	8013ace <_printf_i+0xd2>
 8013ac6:	232d      	movs	r3, #45	; 0x2d
 8013ac8:	4276      	negs	r6, r6
 8013aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ace:	485a      	ldr	r0, [pc, #360]	; (8013c38 <_printf_i+0x23c>)
 8013ad0:	230a      	movs	r3, #10
 8013ad2:	e012      	b.n	8013afa <_printf_i+0xfe>
 8013ad4:	682b      	ldr	r3, [r5, #0]
 8013ad6:	6820      	ldr	r0, [r4, #0]
 8013ad8:	1d19      	adds	r1, r3, #4
 8013ada:	6029      	str	r1, [r5, #0]
 8013adc:	0605      	lsls	r5, r0, #24
 8013ade:	d501      	bpl.n	8013ae4 <_printf_i+0xe8>
 8013ae0:	681e      	ldr	r6, [r3, #0]
 8013ae2:	e002      	b.n	8013aea <_printf_i+0xee>
 8013ae4:	0641      	lsls	r1, r0, #25
 8013ae6:	d5fb      	bpl.n	8013ae0 <_printf_i+0xe4>
 8013ae8:	881e      	ldrh	r6, [r3, #0]
 8013aea:	4853      	ldr	r0, [pc, #332]	; (8013c38 <_printf_i+0x23c>)
 8013aec:	2f6f      	cmp	r7, #111	; 0x6f
 8013aee:	bf0c      	ite	eq
 8013af0:	2308      	moveq	r3, #8
 8013af2:	230a      	movne	r3, #10
 8013af4:	2100      	movs	r1, #0
 8013af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013afa:	6865      	ldr	r5, [r4, #4]
 8013afc:	60a5      	str	r5, [r4, #8]
 8013afe:	2d00      	cmp	r5, #0
 8013b00:	bfa2      	ittt	ge
 8013b02:	6821      	ldrge	r1, [r4, #0]
 8013b04:	f021 0104 	bicge.w	r1, r1, #4
 8013b08:	6021      	strge	r1, [r4, #0]
 8013b0a:	b90e      	cbnz	r6, 8013b10 <_printf_i+0x114>
 8013b0c:	2d00      	cmp	r5, #0
 8013b0e:	d04b      	beq.n	8013ba8 <_printf_i+0x1ac>
 8013b10:	4615      	mov	r5, r2
 8013b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8013b16:	fb03 6711 	mls	r7, r3, r1, r6
 8013b1a:	5dc7      	ldrb	r7, [r0, r7]
 8013b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013b20:	4637      	mov	r7, r6
 8013b22:	42bb      	cmp	r3, r7
 8013b24:	460e      	mov	r6, r1
 8013b26:	d9f4      	bls.n	8013b12 <_printf_i+0x116>
 8013b28:	2b08      	cmp	r3, #8
 8013b2a:	d10b      	bne.n	8013b44 <_printf_i+0x148>
 8013b2c:	6823      	ldr	r3, [r4, #0]
 8013b2e:	07de      	lsls	r6, r3, #31
 8013b30:	d508      	bpl.n	8013b44 <_printf_i+0x148>
 8013b32:	6923      	ldr	r3, [r4, #16]
 8013b34:	6861      	ldr	r1, [r4, #4]
 8013b36:	4299      	cmp	r1, r3
 8013b38:	bfde      	ittt	le
 8013b3a:	2330      	movle	r3, #48	; 0x30
 8013b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013b40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013b44:	1b52      	subs	r2, r2, r5
 8013b46:	6122      	str	r2, [r4, #16]
 8013b48:	f8cd a000 	str.w	sl, [sp]
 8013b4c:	464b      	mov	r3, r9
 8013b4e:	aa03      	add	r2, sp, #12
 8013b50:	4621      	mov	r1, r4
 8013b52:	4640      	mov	r0, r8
 8013b54:	f7ff fee4 	bl	8013920 <_printf_common>
 8013b58:	3001      	adds	r0, #1
 8013b5a:	d14a      	bne.n	8013bf2 <_printf_i+0x1f6>
 8013b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013b60:	b004      	add	sp, #16
 8013b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b66:	6823      	ldr	r3, [r4, #0]
 8013b68:	f043 0320 	orr.w	r3, r3, #32
 8013b6c:	6023      	str	r3, [r4, #0]
 8013b6e:	4833      	ldr	r0, [pc, #204]	; (8013c3c <_printf_i+0x240>)
 8013b70:	2778      	movs	r7, #120	; 0x78
 8013b72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b76:	6823      	ldr	r3, [r4, #0]
 8013b78:	6829      	ldr	r1, [r5, #0]
 8013b7a:	061f      	lsls	r7, r3, #24
 8013b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8013b80:	d402      	bmi.n	8013b88 <_printf_i+0x18c>
 8013b82:	065f      	lsls	r7, r3, #25
 8013b84:	bf48      	it	mi
 8013b86:	b2b6      	uxthmi	r6, r6
 8013b88:	07df      	lsls	r7, r3, #31
 8013b8a:	bf48      	it	mi
 8013b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8013b90:	6029      	str	r1, [r5, #0]
 8013b92:	bf48      	it	mi
 8013b94:	6023      	strmi	r3, [r4, #0]
 8013b96:	b91e      	cbnz	r6, 8013ba0 <_printf_i+0x1a4>
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	f023 0320 	bic.w	r3, r3, #32
 8013b9e:	6023      	str	r3, [r4, #0]
 8013ba0:	2310      	movs	r3, #16
 8013ba2:	e7a7      	b.n	8013af4 <_printf_i+0xf8>
 8013ba4:	4824      	ldr	r0, [pc, #144]	; (8013c38 <_printf_i+0x23c>)
 8013ba6:	e7e4      	b.n	8013b72 <_printf_i+0x176>
 8013ba8:	4615      	mov	r5, r2
 8013baa:	e7bd      	b.n	8013b28 <_printf_i+0x12c>
 8013bac:	682b      	ldr	r3, [r5, #0]
 8013bae:	6826      	ldr	r6, [r4, #0]
 8013bb0:	6961      	ldr	r1, [r4, #20]
 8013bb2:	1d18      	adds	r0, r3, #4
 8013bb4:	6028      	str	r0, [r5, #0]
 8013bb6:	0635      	lsls	r5, r6, #24
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	d501      	bpl.n	8013bc0 <_printf_i+0x1c4>
 8013bbc:	6019      	str	r1, [r3, #0]
 8013bbe:	e002      	b.n	8013bc6 <_printf_i+0x1ca>
 8013bc0:	0670      	lsls	r0, r6, #25
 8013bc2:	d5fb      	bpl.n	8013bbc <_printf_i+0x1c0>
 8013bc4:	8019      	strh	r1, [r3, #0]
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	6123      	str	r3, [r4, #16]
 8013bca:	4615      	mov	r5, r2
 8013bcc:	e7bc      	b.n	8013b48 <_printf_i+0x14c>
 8013bce:	682b      	ldr	r3, [r5, #0]
 8013bd0:	1d1a      	adds	r2, r3, #4
 8013bd2:	602a      	str	r2, [r5, #0]
 8013bd4:	681d      	ldr	r5, [r3, #0]
 8013bd6:	6862      	ldr	r2, [r4, #4]
 8013bd8:	2100      	movs	r1, #0
 8013bda:	4628      	mov	r0, r5
 8013bdc:	f7ec faf8 	bl	80001d0 <memchr>
 8013be0:	b108      	cbz	r0, 8013be6 <_printf_i+0x1ea>
 8013be2:	1b40      	subs	r0, r0, r5
 8013be4:	6060      	str	r0, [r4, #4]
 8013be6:	6863      	ldr	r3, [r4, #4]
 8013be8:	6123      	str	r3, [r4, #16]
 8013bea:	2300      	movs	r3, #0
 8013bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bf0:	e7aa      	b.n	8013b48 <_printf_i+0x14c>
 8013bf2:	6923      	ldr	r3, [r4, #16]
 8013bf4:	462a      	mov	r2, r5
 8013bf6:	4649      	mov	r1, r9
 8013bf8:	4640      	mov	r0, r8
 8013bfa:	47d0      	blx	sl
 8013bfc:	3001      	adds	r0, #1
 8013bfe:	d0ad      	beq.n	8013b5c <_printf_i+0x160>
 8013c00:	6823      	ldr	r3, [r4, #0]
 8013c02:	079b      	lsls	r3, r3, #30
 8013c04:	d413      	bmi.n	8013c2e <_printf_i+0x232>
 8013c06:	68e0      	ldr	r0, [r4, #12]
 8013c08:	9b03      	ldr	r3, [sp, #12]
 8013c0a:	4298      	cmp	r0, r3
 8013c0c:	bfb8      	it	lt
 8013c0e:	4618      	movlt	r0, r3
 8013c10:	e7a6      	b.n	8013b60 <_printf_i+0x164>
 8013c12:	2301      	movs	r3, #1
 8013c14:	4632      	mov	r2, r6
 8013c16:	4649      	mov	r1, r9
 8013c18:	4640      	mov	r0, r8
 8013c1a:	47d0      	blx	sl
 8013c1c:	3001      	adds	r0, #1
 8013c1e:	d09d      	beq.n	8013b5c <_printf_i+0x160>
 8013c20:	3501      	adds	r5, #1
 8013c22:	68e3      	ldr	r3, [r4, #12]
 8013c24:	9903      	ldr	r1, [sp, #12]
 8013c26:	1a5b      	subs	r3, r3, r1
 8013c28:	42ab      	cmp	r3, r5
 8013c2a:	dcf2      	bgt.n	8013c12 <_printf_i+0x216>
 8013c2c:	e7eb      	b.n	8013c06 <_printf_i+0x20a>
 8013c2e:	2500      	movs	r5, #0
 8013c30:	f104 0619 	add.w	r6, r4, #25
 8013c34:	e7f5      	b.n	8013c22 <_printf_i+0x226>
 8013c36:	bf00      	nop
 8013c38:	08018528 	.word	0x08018528
 8013c3c:	08018539 	.word	0x08018539

08013c40 <_scanf_float>:
 8013c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c44:	b087      	sub	sp, #28
 8013c46:	4617      	mov	r7, r2
 8013c48:	9303      	str	r3, [sp, #12]
 8013c4a:	688b      	ldr	r3, [r1, #8]
 8013c4c:	1e5a      	subs	r2, r3, #1
 8013c4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013c52:	bf83      	ittte	hi
 8013c54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013c58:	195b      	addhi	r3, r3, r5
 8013c5a:	9302      	strhi	r3, [sp, #8]
 8013c5c:	2300      	movls	r3, #0
 8013c5e:	bf86      	itte	hi
 8013c60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013c64:	608b      	strhi	r3, [r1, #8]
 8013c66:	9302      	strls	r3, [sp, #8]
 8013c68:	680b      	ldr	r3, [r1, #0]
 8013c6a:	468b      	mov	fp, r1
 8013c6c:	2500      	movs	r5, #0
 8013c6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013c72:	f84b 3b1c 	str.w	r3, [fp], #28
 8013c76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013c7a:	4680      	mov	r8, r0
 8013c7c:	460c      	mov	r4, r1
 8013c7e:	465e      	mov	r6, fp
 8013c80:	46aa      	mov	sl, r5
 8013c82:	46a9      	mov	r9, r5
 8013c84:	9501      	str	r5, [sp, #4]
 8013c86:	68a2      	ldr	r2, [r4, #8]
 8013c88:	b152      	cbz	r2, 8013ca0 <_scanf_float+0x60>
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	2b4e      	cmp	r3, #78	; 0x4e
 8013c90:	d864      	bhi.n	8013d5c <_scanf_float+0x11c>
 8013c92:	2b40      	cmp	r3, #64	; 0x40
 8013c94:	d83c      	bhi.n	8013d10 <_scanf_float+0xd0>
 8013c96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013c9a:	b2c8      	uxtb	r0, r1
 8013c9c:	280e      	cmp	r0, #14
 8013c9e:	d93a      	bls.n	8013d16 <_scanf_float+0xd6>
 8013ca0:	f1b9 0f00 	cmp.w	r9, #0
 8013ca4:	d003      	beq.n	8013cae <_scanf_float+0x6e>
 8013ca6:	6823      	ldr	r3, [r4, #0]
 8013ca8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013cac:	6023      	str	r3, [r4, #0]
 8013cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cb2:	f1ba 0f01 	cmp.w	sl, #1
 8013cb6:	f200 8113 	bhi.w	8013ee0 <_scanf_float+0x2a0>
 8013cba:	455e      	cmp	r6, fp
 8013cbc:	f200 8105 	bhi.w	8013eca <_scanf_float+0x28a>
 8013cc0:	2501      	movs	r5, #1
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	b007      	add	sp, #28
 8013cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8013cce:	2a0d      	cmp	r2, #13
 8013cd0:	d8e6      	bhi.n	8013ca0 <_scanf_float+0x60>
 8013cd2:	a101      	add	r1, pc, #4	; (adr r1, 8013cd8 <_scanf_float+0x98>)
 8013cd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013cd8:	08013e17 	.word	0x08013e17
 8013cdc:	08013ca1 	.word	0x08013ca1
 8013ce0:	08013ca1 	.word	0x08013ca1
 8013ce4:	08013ca1 	.word	0x08013ca1
 8013ce8:	08013e77 	.word	0x08013e77
 8013cec:	08013e4f 	.word	0x08013e4f
 8013cf0:	08013ca1 	.word	0x08013ca1
 8013cf4:	08013ca1 	.word	0x08013ca1
 8013cf8:	08013e25 	.word	0x08013e25
 8013cfc:	08013ca1 	.word	0x08013ca1
 8013d00:	08013ca1 	.word	0x08013ca1
 8013d04:	08013ca1 	.word	0x08013ca1
 8013d08:	08013ca1 	.word	0x08013ca1
 8013d0c:	08013ddd 	.word	0x08013ddd
 8013d10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013d14:	e7db      	b.n	8013cce <_scanf_float+0x8e>
 8013d16:	290e      	cmp	r1, #14
 8013d18:	d8c2      	bhi.n	8013ca0 <_scanf_float+0x60>
 8013d1a:	a001      	add	r0, pc, #4	; (adr r0, 8013d20 <_scanf_float+0xe0>)
 8013d1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8013d20:	08013dcf 	.word	0x08013dcf
 8013d24:	08013ca1 	.word	0x08013ca1
 8013d28:	08013dcf 	.word	0x08013dcf
 8013d2c:	08013e63 	.word	0x08013e63
 8013d30:	08013ca1 	.word	0x08013ca1
 8013d34:	08013d7d 	.word	0x08013d7d
 8013d38:	08013db9 	.word	0x08013db9
 8013d3c:	08013db9 	.word	0x08013db9
 8013d40:	08013db9 	.word	0x08013db9
 8013d44:	08013db9 	.word	0x08013db9
 8013d48:	08013db9 	.word	0x08013db9
 8013d4c:	08013db9 	.word	0x08013db9
 8013d50:	08013db9 	.word	0x08013db9
 8013d54:	08013db9 	.word	0x08013db9
 8013d58:	08013db9 	.word	0x08013db9
 8013d5c:	2b6e      	cmp	r3, #110	; 0x6e
 8013d5e:	d809      	bhi.n	8013d74 <_scanf_float+0x134>
 8013d60:	2b60      	cmp	r3, #96	; 0x60
 8013d62:	d8b2      	bhi.n	8013cca <_scanf_float+0x8a>
 8013d64:	2b54      	cmp	r3, #84	; 0x54
 8013d66:	d077      	beq.n	8013e58 <_scanf_float+0x218>
 8013d68:	2b59      	cmp	r3, #89	; 0x59
 8013d6a:	d199      	bne.n	8013ca0 <_scanf_float+0x60>
 8013d6c:	2d07      	cmp	r5, #7
 8013d6e:	d197      	bne.n	8013ca0 <_scanf_float+0x60>
 8013d70:	2508      	movs	r5, #8
 8013d72:	e029      	b.n	8013dc8 <_scanf_float+0x188>
 8013d74:	2b74      	cmp	r3, #116	; 0x74
 8013d76:	d06f      	beq.n	8013e58 <_scanf_float+0x218>
 8013d78:	2b79      	cmp	r3, #121	; 0x79
 8013d7a:	e7f6      	b.n	8013d6a <_scanf_float+0x12a>
 8013d7c:	6821      	ldr	r1, [r4, #0]
 8013d7e:	05c8      	lsls	r0, r1, #23
 8013d80:	d51a      	bpl.n	8013db8 <_scanf_float+0x178>
 8013d82:	9b02      	ldr	r3, [sp, #8]
 8013d84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013d88:	6021      	str	r1, [r4, #0]
 8013d8a:	f109 0901 	add.w	r9, r9, #1
 8013d8e:	b11b      	cbz	r3, 8013d98 <_scanf_float+0x158>
 8013d90:	3b01      	subs	r3, #1
 8013d92:	3201      	adds	r2, #1
 8013d94:	9302      	str	r3, [sp, #8]
 8013d96:	60a2      	str	r2, [r4, #8]
 8013d98:	68a3      	ldr	r3, [r4, #8]
 8013d9a:	3b01      	subs	r3, #1
 8013d9c:	60a3      	str	r3, [r4, #8]
 8013d9e:	6923      	ldr	r3, [r4, #16]
 8013da0:	3301      	adds	r3, #1
 8013da2:	6123      	str	r3, [r4, #16]
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	3b01      	subs	r3, #1
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	607b      	str	r3, [r7, #4]
 8013dac:	f340 8084 	ble.w	8013eb8 <_scanf_float+0x278>
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	3301      	adds	r3, #1
 8013db4:	603b      	str	r3, [r7, #0]
 8013db6:	e766      	b.n	8013c86 <_scanf_float+0x46>
 8013db8:	eb1a 0f05 	cmn.w	sl, r5
 8013dbc:	f47f af70 	bne.w	8013ca0 <_scanf_float+0x60>
 8013dc0:	6822      	ldr	r2, [r4, #0]
 8013dc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013dc6:	6022      	str	r2, [r4, #0]
 8013dc8:	f806 3b01 	strb.w	r3, [r6], #1
 8013dcc:	e7e4      	b.n	8013d98 <_scanf_float+0x158>
 8013dce:	6822      	ldr	r2, [r4, #0]
 8013dd0:	0610      	lsls	r0, r2, #24
 8013dd2:	f57f af65 	bpl.w	8013ca0 <_scanf_float+0x60>
 8013dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013dda:	e7f4      	b.n	8013dc6 <_scanf_float+0x186>
 8013ddc:	f1ba 0f00 	cmp.w	sl, #0
 8013de0:	d10e      	bne.n	8013e00 <_scanf_float+0x1c0>
 8013de2:	f1b9 0f00 	cmp.w	r9, #0
 8013de6:	d10e      	bne.n	8013e06 <_scanf_float+0x1c6>
 8013de8:	6822      	ldr	r2, [r4, #0]
 8013dea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013dee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013df2:	d108      	bne.n	8013e06 <_scanf_float+0x1c6>
 8013df4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013df8:	6022      	str	r2, [r4, #0]
 8013dfa:	f04f 0a01 	mov.w	sl, #1
 8013dfe:	e7e3      	b.n	8013dc8 <_scanf_float+0x188>
 8013e00:	f1ba 0f02 	cmp.w	sl, #2
 8013e04:	d055      	beq.n	8013eb2 <_scanf_float+0x272>
 8013e06:	2d01      	cmp	r5, #1
 8013e08:	d002      	beq.n	8013e10 <_scanf_float+0x1d0>
 8013e0a:	2d04      	cmp	r5, #4
 8013e0c:	f47f af48 	bne.w	8013ca0 <_scanf_float+0x60>
 8013e10:	3501      	adds	r5, #1
 8013e12:	b2ed      	uxtb	r5, r5
 8013e14:	e7d8      	b.n	8013dc8 <_scanf_float+0x188>
 8013e16:	f1ba 0f01 	cmp.w	sl, #1
 8013e1a:	f47f af41 	bne.w	8013ca0 <_scanf_float+0x60>
 8013e1e:	f04f 0a02 	mov.w	sl, #2
 8013e22:	e7d1      	b.n	8013dc8 <_scanf_float+0x188>
 8013e24:	b97d      	cbnz	r5, 8013e46 <_scanf_float+0x206>
 8013e26:	f1b9 0f00 	cmp.w	r9, #0
 8013e2a:	f47f af3c 	bne.w	8013ca6 <_scanf_float+0x66>
 8013e2e:	6822      	ldr	r2, [r4, #0]
 8013e30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013e34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013e38:	f47f af39 	bne.w	8013cae <_scanf_float+0x6e>
 8013e3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e40:	6022      	str	r2, [r4, #0]
 8013e42:	2501      	movs	r5, #1
 8013e44:	e7c0      	b.n	8013dc8 <_scanf_float+0x188>
 8013e46:	2d03      	cmp	r5, #3
 8013e48:	d0e2      	beq.n	8013e10 <_scanf_float+0x1d0>
 8013e4a:	2d05      	cmp	r5, #5
 8013e4c:	e7de      	b.n	8013e0c <_scanf_float+0x1cc>
 8013e4e:	2d02      	cmp	r5, #2
 8013e50:	f47f af26 	bne.w	8013ca0 <_scanf_float+0x60>
 8013e54:	2503      	movs	r5, #3
 8013e56:	e7b7      	b.n	8013dc8 <_scanf_float+0x188>
 8013e58:	2d06      	cmp	r5, #6
 8013e5a:	f47f af21 	bne.w	8013ca0 <_scanf_float+0x60>
 8013e5e:	2507      	movs	r5, #7
 8013e60:	e7b2      	b.n	8013dc8 <_scanf_float+0x188>
 8013e62:	6822      	ldr	r2, [r4, #0]
 8013e64:	0591      	lsls	r1, r2, #22
 8013e66:	f57f af1b 	bpl.w	8013ca0 <_scanf_float+0x60>
 8013e6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8013e6e:	6022      	str	r2, [r4, #0]
 8013e70:	f8cd 9004 	str.w	r9, [sp, #4]
 8013e74:	e7a8      	b.n	8013dc8 <_scanf_float+0x188>
 8013e76:	6822      	ldr	r2, [r4, #0]
 8013e78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013e7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8013e80:	d006      	beq.n	8013e90 <_scanf_float+0x250>
 8013e82:	0550      	lsls	r0, r2, #21
 8013e84:	f57f af0c 	bpl.w	8013ca0 <_scanf_float+0x60>
 8013e88:	f1b9 0f00 	cmp.w	r9, #0
 8013e8c:	f43f af0f 	beq.w	8013cae <_scanf_float+0x6e>
 8013e90:	0591      	lsls	r1, r2, #22
 8013e92:	bf58      	it	pl
 8013e94:	9901      	ldrpl	r1, [sp, #4]
 8013e96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013e9a:	bf58      	it	pl
 8013e9c:	eba9 0101 	subpl.w	r1, r9, r1
 8013ea0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013ea4:	bf58      	it	pl
 8013ea6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013eaa:	6022      	str	r2, [r4, #0]
 8013eac:	f04f 0900 	mov.w	r9, #0
 8013eb0:	e78a      	b.n	8013dc8 <_scanf_float+0x188>
 8013eb2:	f04f 0a03 	mov.w	sl, #3
 8013eb6:	e787      	b.n	8013dc8 <_scanf_float+0x188>
 8013eb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013ebc:	4639      	mov	r1, r7
 8013ebe:	4640      	mov	r0, r8
 8013ec0:	4798      	blx	r3
 8013ec2:	2800      	cmp	r0, #0
 8013ec4:	f43f aedf 	beq.w	8013c86 <_scanf_float+0x46>
 8013ec8:	e6ea      	b.n	8013ca0 <_scanf_float+0x60>
 8013eca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ece:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ed2:	463a      	mov	r2, r7
 8013ed4:	4640      	mov	r0, r8
 8013ed6:	4798      	blx	r3
 8013ed8:	6923      	ldr	r3, [r4, #16]
 8013eda:	3b01      	subs	r3, #1
 8013edc:	6123      	str	r3, [r4, #16]
 8013ede:	e6ec      	b.n	8013cba <_scanf_float+0x7a>
 8013ee0:	1e6b      	subs	r3, r5, #1
 8013ee2:	2b06      	cmp	r3, #6
 8013ee4:	d825      	bhi.n	8013f32 <_scanf_float+0x2f2>
 8013ee6:	2d02      	cmp	r5, #2
 8013ee8:	d836      	bhi.n	8013f58 <_scanf_float+0x318>
 8013eea:	455e      	cmp	r6, fp
 8013eec:	f67f aee8 	bls.w	8013cc0 <_scanf_float+0x80>
 8013ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ef4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013ef8:	463a      	mov	r2, r7
 8013efa:	4640      	mov	r0, r8
 8013efc:	4798      	blx	r3
 8013efe:	6923      	ldr	r3, [r4, #16]
 8013f00:	3b01      	subs	r3, #1
 8013f02:	6123      	str	r3, [r4, #16]
 8013f04:	e7f1      	b.n	8013eea <_scanf_float+0x2aa>
 8013f06:	9802      	ldr	r0, [sp, #8]
 8013f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8013f10:	9002      	str	r0, [sp, #8]
 8013f12:	463a      	mov	r2, r7
 8013f14:	4640      	mov	r0, r8
 8013f16:	4798      	blx	r3
 8013f18:	6923      	ldr	r3, [r4, #16]
 8013f1a:	3b01      	subs	r3, #1
 8013f1c:	6123      	str	r3, [r4, #16]
 8013f1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013f22:	fa5f fa8a 	uxtb.w	sl, sl
 8013f26:	f1ba 0f02 	cmp.w	sl, #2
 8013f2a:	d1ec      	bne.n	8013f06 <_scanf_float+0x2c6>
 8013f2c:	3d03      	subs	r5, #3
 8013f2e:	b2ed      	uxtb	r5, r5
 8013f30:	1b76      	subs	r6, r6, r5
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	05da      	lsls	r2, r3, #23
 8013f36:	d52f      	bpl.n	8013f98 <_scanf_float+0x358>
 8013f38:	055b      	lsls	r3, r3, #21
 8013f3a:	d510      	bpl.n	8013f5e <_scanf_float+0x31e>
 8013f3c:	455e      	cmp	r6, fp
 8013f3e:	f67f aebf 	bls.w	8013cc0 <_scanf_float+0x80>
 8013f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013f4a:	463a      	mov	r2, r7
 8013f4c:	4640      	mov	r0, r8
 8013f4e:	4798      	blx	r3
 8013f50:	6923      	ldr	r3, [r4, #16]
 8013f52:	3b01      	subs	r3, #1
 8013f54:	6123      	str	r3, [r4, #16]
 8013f56:	e7f1      	b.n	8013f3c <_scanf_float+0x2fc>
 8013f58:	46aa      	mov	sl, r5
 8013f5a:	9602      	str	r6, [sp, #8]
 8013f5c:	e7df      	b.n	8013f1e <_scanf_float+0x2de>
 8013f5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013f62:	6923      	ldr	r3, [r4, #16]
 8013f64:	2965      	cmp	r1, #101	; 0x65
 8013f66:	f103 33ff 	add.w	r3, r3, #4294967295
 8013f6a:	f106 35ff 	add.w	r5, r6, #4294967295
 8013f6e:	6123      	str	r3, [r4, #16]
 8013f70:	d00c      	beq.n	8013f8c <_scanf_float+0x34c>
 8013f72:	2945      	cmp	r1, #69	; 0x45
 8013f74:	d00a      	beq.n	8013f8c <_scanf_float+0x34c>
 8013f76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f7a:	463a      	mov	r2, r7
 8013f7c:	4640      	mov	r0, r8
 8013f7e:	4798      	blx	r3
 8013f80:	6923      	ldr	r3, [r4, #16]
 8013f82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013f86:	3b01      	subs	r3, #1
 8013f88:	1eb5      	subs	r5, r6, #2
 8013f8a:	6123      	str	r3, [r4, #16]
 8013f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f90:	463a      	mov	r2, r7
 8013f92:	4640      	mov	r0, r8
 8013f94:	4798      	blx	r3
 8013f96:	462e      	mov	r6, r5
 8013f98:	6825      	ldr	r5, [r4, #0]
 8013f9a:	f015 0510 	ands.w	r5, r5, #16
 8013f9e:	d158      	bne.n	8014052 <_scanf_float+0x412>
 8013fa0:	7035      	strb	r5, [r6, #0]
 8013fa2:	6823      	ldr	r3, [r4, #0]
 8013fa4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013fac:	d11c      	bne.n	8013fe8 <_scanf_float+0x3a8>
 8013fae:	9b01      	ldr	r3, [sp, #4]
 8013fb0:	454b      	cmp	r3, r9
 8013fb2:	eba3 0209 	sub.w	r2, r3, r9
 8013fb6:	d124      	bne.n	8014002 <_scanf_float+0x3c2>
 8013fb8:	2200      	movs	r2, #0
 8013fba:	4659      	mov	r1, fp
 8013fbc:	4640      	mov	r0, r8
 8013fbe:	f7ff f9d3 	bl	8013368 <_strtod_r>
 8013fc2:	9b03      	ldr	r3, [sp, #12]
 8013fc4:	6821      	ldr	r1, [r4, #0]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f011 0f02 	tst.w	r1, #2
 8013fcc:	ec57 6b10 	vmov	r6, r7, d0
 8013fd0:	f103 0204 	add.w	r2, r3, #4
 8013fd4:	d020      	beq.n	8014018 <_scanf_float+0x3d8>
 8013fd6:	9903      	ldr	r1, [sp, #12]
 8013fd8:	600a      	str	r2, [r1, #0]
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	e9c3 6700 	strd	r6, r7, [r3]
 8013fe0:	68e3      	ldr	r3, [r4, #12]
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	60e3      	str	r3, [r4, #12]
 8013fe6:	e66c      	b.n	8013cc2 <_scanf_float+0x82>
 8013fe8:	9b04      	ldr	r3, [sp, #16]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d0e4      	beq.n	8013fb8 <_scanf_float+0x378>
 8013fee:	9905      	ldr	r1, [sp, #20]
 8013ff0:	230a      	movs	r3, #10
 8013ff2:	462a      	mov	r2, r5
 8013ff4:	3101      	adds	r1, #1
 8013ff6:	4640      	mov	r0, r8
 8013ff8:	f002 fa92 	bl	8016520 <_strtol_r>
 8013ffc:	9b04      	ldr	r3, [sp, #16]
 8013ffe:	9e05      	ldr	r6, [sp, #20]
 8014000:	1ac2      	subs	r2, r0, r3
 8014002:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014006:	429e      	cmp	r6, r3
 8014008:	bf28      	it	cs
 801400a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801400e:	4912      	ldr	r1, [pc, #72]	; (8014058 <_scanf_float+0x418>)
 8014010:	4630      	mov	r0, r6
 8014012:	f000 f91b 	bl	801424c <siprintf>
 8014016:	e7cf      	b.n	8013fb8 <_scanf_float+0x378>
 8014018:	f011 0f04 	tst.w	r1, #4
 801401c:	9903      	ldr	r1, [sp, #12]
 801401e:	600a      	str	r2, [r1, #0]
 8014020:	d1db      	bne.n	8013fda <_scanf_float+0x39a>
 8014022:	f8d3 8000 	ldr.w	r8, [r3]
 8014026:	ee10 2a10 	vmov	r2, s0
 801402a:	ee10 0a10 	vmov	r0, s0
 801402e:	463b      	mov	r3, r7
 8014030:	4639      	mov	r1, r7
 8014032:	f7ec fd7b 	bl	8000b2c <__aeabi_dcmpun>
 8014036:	b128      	cbz	r0, 8014044 <_scanf_float+0x404>
 8014038:	4808      	ldr	r0, [pc, #32]	; (801405c <_scanf_float+0x41c>)
 801403a:	f000 fa55 	bl	80144e8 <nanf>
 801403e:	ed88 0a00 	vstr	s0, [r8]
 8014042:	e7cd      	b.n	8013fe0 <_scanf_float+0x3a0>
 8014044:	4630      	mov	r0, r6
 8014046:	4639      	mov	r1, r7
 8014048:	f7ec fdce 	bl	8000be8 <__aeabi_d2f>
 801404c:	f8c8 0000 	str.w	r0, [r8]
 8014050:	e7c6      	b.n	8013fe0 <_scanf_float+0x3a0>
 8014052:	2500      	movs	r5, #0
 8014054:	e635      	b.n	8013cc2 <_scanf_float+0x82>
 8014056:	bf00      	nop
 8014058:	0801854a 	.word	0x0801854a
 801405c:	08018904 	.word	0x08018904

08014060 <std>:
 8014060:	2300      	movs	r3, #0
 8014062:	b510      	push	{r4, lr}
 8014064:	4604      	mov	r4, r0
 8014066:	e9c0 3300 	strd	r3, r3, [r0]
 801406a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801406e:	6083      	str	r3, [r0, #8]
 8014070:	8181      	strh	r1, [r0, #12]
 8014072:	6643      	str	r3, [r0, #100]	; 0x64
 8014074:	81c2      	strh	r2, [r0, #14]
 8014076:	6183      	str	r3, [r0, #24]
 8014078:	4619      	mov	r1, r3
 801407a:	2208      	movs	r2, #8
 801407c:	305c      	adds	r0, #92	; 0x5c
 801407e:	f000 f976 	bl	801436e <memset>
 8014082:	4b0d      	ldr	r3, [pc, #52]	; (80140b8 <std+0x58>)
 8014084:	6263      	str	r3, [r4, #36]	; 0x24
 8014086:	4b0d      	ldr	r3, [pc, #52]	; (80140bc <std+0x5c>)
 8014088:	62a3      	str	r3, [r4, #40]	; 0x28
 801408a:	4b0d      	ldr	r3, [pc, #52]	; (80140c0 <std+0x60>)
 801408c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801408e:	4b0d      	ldr	r3, [pc, #52]	; (80140c4 <std+0x64>)
 8014090:	6323      	str	r3, [r4, #48]	; 0x30
 8014092:	4b0d      	ldr	r3, [pc, #52]	; (80140c8 <std+0x68>)
 8014094:	6224      	str	r4, [r4, #32]
 8014096:	429c      	cmp	r4, r3
 8014098:	d006      	beq.n	80140a8 <std+0x48>
 801409a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801409e:	4294      	cmp	r4, r2
 80140a0:	d002      	beq.n	80140a8 <std+0x48>
 80140a2:	33d0      	adds	r3, #208	; 0xd0
 80140a4:	429c      	cmp	r4, r3
 80140a6:	d105      	bne.n	80140b4 <std+0x54>
 80140a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80140ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140b0:	f000 b9fe 	b.w	80144b0 <__retarget_lock_init_recursive>
 80140b4:	bd10      	pop	{r4, pc}
 80140b6:	bf00      	nop
 80140b8:	080142e5 	.word	0x080142e5
 80140bc:	0801430b 	.word	0x0801430b
 80140c0:	08014343 	.word	0x08014343
 80140c4:	08014367 	.word	0x08014367
 80140c8:	200073f0 	.word	0x200073f0

080140cc <stdio_exit_handler>:
 80140cc:	4a02      	ldr	r2, [pc, #8]	; (80140d8 <stdio_exit_handler+0xc>)
 80140ce:	4903      	ldr	r1, [pc, #12]	; (80140dc <stdio_exit_handler+0x10>)
 80140d0:	4803      	ldr	r0, [pc, #12]	; (80140e0 <stdio_exit_handler+0x14>)
 80140d2:	f000 b869 	b.w	80141a8 <_fwalk_sglue>
 80140d6:	bf00      	nop
 80140d8:	20000168 	.word	0x20000168
 80140dc:	08016f3d 	.word	0x08016f3d
 80140e0:	200002e0 	.word	0x200002e0

080140e4 <cleanup_stdio>:
 80140e4:	6841      	ldr	r1, [r0, #4]
 80140e6:	4b0c      	ldr	r3, [pc, #48]	; (8014118 <cleanup_stdio+0x34>)
 80140e8:	4299      	cmp	r1, r3
 80140ea:	b510      	push	{r4, lr}
 80140ec:	4604      	mov	r4, r0
 80140ee:	d001      	beq.n	80140f4 <cleanup_stdio+0x10>
 80140f0:	f002 ff24 	bl	8016f3c <_fflush_r>
 80140f4:	68a1      	ldr	r1, [r4, #8]
 80140f6:	4b09      	ldr	r3, [pc, #36]	; (801411c <cleanup_stdio+0x38>)
 80140f8:	4299      	cmp	r1, r3
 80140fa:	d002      	beq.n	8014102 <cleanup_stdio+0x1e>
 80140fc:	4620      	mov	r0, r4
 80140fe:	f002 ff1d 	bl	8016f3c <_fflush_r>
 8014102:	68e1      	ldr	r1, [r4, #12]
 8014104:	4b06      	ldr	r3, [pc, #24]	; (8014120 <cleanup_stdio+0x3c>)
 8014106:	4299      	cmp	r1, r3
 8014108:	d004      	beq.n	8014114 <cleanup_stdio+0x30>
 801410a:	4620      	mov	r0, r4
 801410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014110:	f002 bf14 	b.w	8016f3c <_fflush_r>
 8014114:	bd10      	pop	{r4, pc}
 8014116:	bf00      	nop
 8014118:	200073f0 	.word	0x200073f0
 801411c:	20007458 	.word	0x20007458
 8014120:	200074c0 	.word	0x200074c0

08014124 <global_stdio_init.part.0>:
 8014124:	b510      	push	{r4, lr}
 8014126:	4b0b      	ldr	r3, [pc, #44]	; (8014154 <global_stdio_init.part.0+0x30>)
 8014128:	4c0b      	ldr	r4, [pc, #44]	; (8014158 <global_stdio_init.part.0+0x34>)
 801412a:	4a0c      	ldr	r2, [pc, #48]	; (801415c <global_stdio_init.part.0+0x38>)
 801412c:	601a      	str	r2, [r3, #0]
 801412e:	4620      	mov	r0, r4
 8014130:	2200      	movs	r2, #0
 8014132:	2104      	movs	r1, #4
 8014134:	f7ff ff94 	bl	8014060 <std>
 8014138:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801413c:	2201      	movs	r2, #1
 801413e:	2109      	movs	r1, #9
 8014140:	f7ff ff8e 	bl	8014060 <std>
 8014144:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014148:	2202      	movs	r2, #2
 801414a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801414e:	2112      	movs	r1, #18
 8014150:	f7ff bf86 	b.w	8014060 <std>
 8014154:	20007528 	.word	0x20007528
 8014158:	200073f0 	.word	0x200073f0
 801415c:	080140cd 	.word	0x080140cd

08014160 <__sfp_lock_acquire>:
 8014160:	4801      	ldr	r0, [pc, #4]	; (8014168 <__sfp_lock_acquire+0x8>)
 8014162:	f000 b9a6 	b.w	80144b2 <__retarget_lock_acquire_recursive>
 8014166:	bf00      	nop
 8014168:	20007531 	.word	0x20007531

0801416c <__sfp_lock_release>:
 801416c:	4801      	ldr	r0, [pc, #4]	; (8014174 <__sfp_lock_release+0x8>)
 801416e:	f000 b9a1 	b.w	80144b4 <__retarget_lock_release_recursive>
 8014172:	bf00      	nop
 8014174:	20007531 	.word	0x20007531

08014178 <__sinit>:
 8014178:	b510      	push	{r4, lr}
 801417a:	4604      	mov	r4, r0
 801417c:	f7ff fff0 	bl	8014160 <__sfp_lock_acquire>
 8014180:	6a23      	ldr	r3, [r4, #32]
 8014182:	b11b      	cbz	r3, 801418c <__sinit+0x14>
 8014184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014188:	f7ff bff0 	b.w	801416c <__sfp_lock_release>
 801418c:	4b04      	ldr	r3, [pc, #16]	; (80141a0 <__sinit+0x28>)
 801418e:	6223      	str	r3, [r4, #32]
 8014190:	4b04      	ldr	r3, [pc, #16]	; (80141a4 <__sinit+0x2c>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d1f5      	bne.n	8014184 <__sinit+0xc>
 8014198:	f7ff ffc4 	bl	8014124 <global_stdio_init.part.0>
 801419c:	e7f2      	b.n	8014184 <__sinit+0xc>
 801419e:	bf00      	nop
 80141a0:	080140e5 	.word	0x080140e5
 80141a4:	20007528 	.word	0x20007528

080141a8 <_fwalk_sglue>:
 80141a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141ac:	4607      	mov	r7, r0
 80141ae:	4688      	mov	r8, r1
 80141b0:	4614      	mov	r4, r2
 80141b2:	2600      	movs	r6, #0
 80141b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80141b8:	f1b9 0901 	subs.w	r9, r9, #1
 80141bc:	d505      	bpl.n	80141ca <_fwalk_sglue+0x22>
 80141be:	6824      	ldr	r4, [r4, #0]
 80141c0:	2c00      	cmp	r4, #0
 80141c2:	d1f7      	bne.n	80141b4 <_fwalk_sglue+0xc>
 80141c4:	4630      	mov	r0, r6
 80141c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ca:	89ab      	ldrh	r3, [r5, #12]
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	d907      	bls.n	80141e0 <_fwalk_sglue+0x38>
 80141d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80141d4:	3301      	adds	r3, #1
 80141d6:	d003      	beq.n	80141e0 <_fwalk_sglue+0x38>
 80141d8:	4629      	mov	r1, r5
 80141da:	4638      	mov	r0, r7
 80141dc:	47c0      	blx	r8
 80141de:	4306      	orrs	r6, r0
 80141e0:	3568      	adds	r5, #104	; 0x68
 80141e2:	e7e9      	b.n	80141b8 <_fwalk_sglue+0x10>

080141e4 <sniprintf>:
 80141e4:	b40c      	push	{r2, r3}
 80141e6:	b530      	push	{r4, r5, lr}
 80141e8:	4b17      	ldr	r3, [pc, #92]	; (8014248 <sniprintf+0x64>)
 80141ea:	1e0c      	subs	r4, r1, #0
 80141ec:	681d      	ldr	r5, [r3, #0]
 80141ee:	b09d      	sub	sp, #116	; 0x74
 80141f0:	da08      	bge.n	8014204 <sniprintf+0x20>
 80141f2:	238b      	movs	r3, #139	; 0x8b
 80141f4:	602b      	str	r3, [r5, #0]
 80141f6:	f04f 30ff 	mov.w	r0, #4294967295
 80141fa:	b01d      	add	sp, #116	; 0x74
 80141fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014200:	b002      	add	sp, #8
 8014202:	4770      	bx	lr
 8014204:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014208:	f8ad 3014 	strh.w	r3, [sp, #20]
 801420c:	bf14      	ite	ne
 801420e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014212:	4623      	moveq	r3, r4
 8014214:	9304      	str	r3, [sp, #16]
 8014216:	9307      	str	r3, [sp, #28]
 8014218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801421c:	9002      	str	r0, [sp, #8]
 801421e:	9006      	str	r0, [sp, #24]
 8014220:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014224:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014226:	ab21      	add	r3, sp, #132	; 0x84
 8014228:	a902      	add	r1, sp, #8
 801422a:	4628      	mov	r0, r5
 801422c:	9301      	str	r3, [sp, #4]
 801422e:	f002 f9e1 	bl	80165f4 <_svfiprintf_r>
 8014232:	1c43      	adds	r3, r0, #1
 8014234:	bfbc      	itt	lt
 8014236:	238b      	movlt	r3, #139	; 0x8b
 8014238:	602b      	strlt	r3, [r5, #0]
 801423a:	2c00      	cmp	r4, #0
 801423c:	d0dd      	beq.n	80141fa <sniprintf+0x16>
 801423e:	9b02      	ldr	r3, [sp, #8]
 8014240:	2200      	movs	r2, #0
 8014242:	701a      	strb	r2, [r3, #0]
 8014244:	e7d9      	b.n	80141fa <sniprintf+0x16>
 8014246:	bf00      	nop
 8014248:	2000032c 	.word	0x2000032c

0801424c <siprintf>:
 801424c:	b40e      	push	{r1, r2, r3}
 801424e:	b500      	push	{lr}
 8014250:	b09c      	sub	sp, #112	; 0x70
 8014252:	ab1d      	add	r3, sp, #116	; 0x74
 8014254:	9002      	str	r0, [sp, #8]
 8014256:	9006      	str	r0, [sp, #24]
 8014258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801425c:	4809      	ldr	r0, [pc, #36]	; (8014284 <siprintf+0x38>)
 801425e:	9107      	str	r1, [sp, #28]
 8014260:	9104      	str	r1, [sp, #16]
 8014262:	4909      	ldr	r1, [pc, #36]	; (8014288 <siprintf+0x3c>)
 8014264:	f853 2b04 	ldr.w	r2, [r3], #4
 8014268:	9105      	str	r1, [sp, #20]
 801426a:	6800      	ldr	r0, [r0, #0]
 801426c:	9301      	str	r3, [sp, #4]
 801426e:	a902      	add	r1, sp, #8
 8014270:	f002 f9c0 	bl	80165f4 <_svfiprintf_r>
 8014274:	9b02      	ldr	r3, [sp, #8]
 8014276:	2200      	movs	r2, #0
 8014278:	701a      	strb	r2, [r3, #0]
 801427a:	b01c      	add	sp, #112	; 0x70
 801427c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014280:	b003      	add	sp, #12
 8014282:	4770      	bx	lr
 8014284:	2000032c 	.word	0x2000032c
 8014288:	ffff0208 	.word	0xffff0208

0801428c <siscanf>:
 801428c:	b40e      	push	{r1, r2, r3}
 801428e:	b510      	push	{r4, lr}
 8014290:	b09f      	sub	sp, #124	; 0x7c
 8014292:	ac21      	add	r4, sp, #132	; 0x84
 8014294:	f44f 7101 	mov.w	r1, #516	; 0x204
 8014298:	f854 2b04 	ldr.w	r2, [r4], #4
 801429c:	9201      	str	r2, [sp, #4]
 801429e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80142a2:	9004      	str	r0, [sp, #16]
 80142a4:	9008      	str	r0, [sp, #32]
 80142a6:	f7eb ffe3 	bl	8000270 <strlen>
 80142aa:	4b0c      	ldr	r3, [pc, #48]	; (80142dc <siscanf+0x50>)
 80142ac:	9005      	str	r0, [sp, #20]
 80142ae:	9009      	str	r0, [sp, #36]	; 0x24
 80142b0:	930d      	str	r3, [sp, #52]	; 0x34
 80142b2:	480b      	ldr	r0, [pc, #44]	; (80142e0 <siscanf+0x54>)
 80142b4:	9a01      	ldr	r2, [sp, #4]
 80142b6:	6800      	ldr	r0, [r0, #0]
 80142b8:	9403      	str	r4, [sp, #12]
 80142ba:	2300      	movs	r3, #0
 80142bc:	9311      	str	r3, [sp, #68]	; 0x44
 80142be:	9316      	str	r3, [sp, #88]	; 0x58
 80142c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80142c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80142c8:	a904      	add	r1, sp, #16
 80142ca:	4623      	mov	r3, r4
 80142cc:	f002 faea 	bl	80168a4 <__ssvfiscanf_r>
 80142d0:	b01f      	add	sp, #124	; 0x7c
 80142d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142d6:	b003      	add	sp, #12
 80142d8:	4770      	bx	lr
 80142da:	bf00      	nop
 80142dc:	08014307 	.word	0x08014307
 80142e0:	2000032c 	.word	0x2000032c

080142e4 <__sread>:
 80142e4:	b510      	push	{r4, lr}
 80142e6:	460c      	mov	r4, r1
 80142e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ec:	f000 f892 	bl	8014414 <_read_r>
 80142f0:	2800      	cmp	r0, #0
 80142f2:	bfab      	itete	ge
 80142f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80142f6:	89a3      	ldrhlt	r3, [r4, #12]
 80142f8:	181b      	addge	r3, r3, r0
 80142fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80142fe:	bfac      	ite	ge
 8014300:	6563      	strge	r3, [r4, #84]	; 0x54
 8014302:	81a3      	strhlt	r3, [r4, #12]
 8014304:	bd10      	pop	{r4, pc}

08014306 <__seofread>:
 8014306:	2000      	movs	r0, #0
 8014308:	4770      	bx	lr

0801430a <__swrite>:
 801430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801430e:	461f      	mov	r7, r3
 8014310:	898b      	ldrh	r3, [r1, #12]
 8014312:	05db      	lsls	r3, r3, #23
 8014314:	4605      	mov	r5, r0
 8014316:	460c      	mov	r4, r1
 8014318:	4616      	mov	r6, r2
 801431a:	d505      	bpl.n	8014328 <__swrite+0x1e>
 801431c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014320:	2302      	movs	r3, #2
 8014322:	2200      	movs	r2, #0
 8014324:	f000 f864 	bl	80143f0 <_lseek_r>
 8014328:	89a3      	ldrh	r3, [r4, #12]
 801432a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801432e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014332:	81a3      	strh	r3, [r4, #12]
 8014334:	4632      	mov	r2, r6
 8014336:	463b      	mov	r3, r7
 8014338:	4628      	mov	r0, r5
 801433a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801433e:	f000 b87b 	b.w	8014438 <_write_r>

08014342 <__sseek>:
 8014342:	b510      	push	{r4, lr}
 8014344:	460c      	mov	r4, r1
 8014346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801434a:	f000 f851 	bl	80143f0 <_lseek_r>
 801434e:	1c43      	adds	r3, r0, #1
 8014350:	89a3      	ldrh	r3, [r4, #12]
 8014352:	bf15      	itete	ne
 8014354:	6560      	strne	r0, [r4, #84]	; 0x54
 8014356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801435a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801435e:	81a3      	strheq	r3, [r4, #12]
 8014360:	bf18      	it	ne
 8014362:	81a3      	strhne	r3, [r4, #12]
 8014364:	bd10      	pop	{r4, pc}

08014366 <__sclose>:
 8014366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801436a:	f000 b831 	b.w	80143d0 <_close_r>

0801436e <memset>:
 801436e:	4402      	add	r2, r0
 8014370:	4603      	mov	r3, r0
 8014372:	4293      	cmp	r3, r2
 8014374:	d100      	bne.n	8014378 <memset+0xa>
 8014376:	4770      	bx	lr
 8014378:	f803 1b01 	strb.w	r1, [r3], #1
 801437c:	e7f9      	b.n	8014372 <memset+0x4>

0801437e <strncmp>:
 801437e:	b510      	push	{r4, lr}
 8014380:	b16a      	cbz	r2, 801439e <strncmp+0x20>
 8014382:	3901      	subs	r1, #1
 8014384:	1884      	adds	r4, r0, r2
 8014386:	f810 2b01 	ldrb.w	r2, [r0], #1
 801438a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801438e:	429a      	cmp	r2, r3
 8014390:	d103      	bne.n	801439a <strncmp+0x1c>
 8014392:	42a0      	cmp	r0, r4
 8014394:	d001      	beq.n	801439a <strncmp+0x1c>
 8014396:	2a00      	cmp	r2, #0
 8014398:	d1f5      	bne.n	8014386 <strncmp+0x8>
 801439a:	1ad0      	subs	r0, r2, r3
 801439c:	bd10      	pop	{r4, pc}
 801439e:	4610      	mov	r0, r2
 80143a0:	e7fc      	b.n	801439c <strncmp+0x1e>

080143a2 <strncpy>:
 80143a2:	b510      	push	{r4, lr}
 80143a4:	3901      	subs	r1, #1
 80143a6:	4603      	mov	r3, r0
 80143a8:	b132      	cbz	r2, 80143b8 <strncpy+0x16>
 80143aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80143ae:	f803 4b01 	strb.w	r4, [r3], #1
 80143b2:	3a01      	subs	r2, #1
 80143b4:	2c00      	cmp	r4, #0
 80143b6:	d1f7      	bne.n	80143a8 <strncpy+0x6>
 80143b8:	441a      	add	r2, r3
 80143ba:	2100      	movs	r1, #0
 80143bc:	4293      	cmp	r3, r2
 80143be:	d100      	bne.n	80143c2 <strncpy+0x20>
 80143c0:	bd10      	pop	{r4, pc}
 80143c2:	f803 1b01 	strb.w	r1, [r3], #1
 80143c6:	e7f9      	b.n	80143bc <strncpy+0x1a>

080143c8 <_localeconv_r>:
 80143c8:	4800      	ldr	r0, [pc, #0]	; (80143cc <_localeconv_r+0x4>)
 80143ca:	4770      	bx	lr
 80143cc:	20000264 	.word	0x20000264

080143d0 <_close_r>:
 80143d0:	b538      	push	{r3, r4, r5, lr}
 80143d2:	4d06      	ldr	r5, [pc, #24]	; (80143ec <_close_r+0x1c>)
 80143d4:	2300      	movs	r3, #0
 80143d6:	4604      	mov	r4, r0
 80143d8:	4608      	mov	r0, r1
 80143da:	602b      	str	r3, [r5, #0]
 80143dc:	f7f1 fb67 	bl	8005aae <_close>
 80143e0:	1c43      	adds	r3, r0, #1
 80143e2:	d102      	bne.n	80143ea <_close_r+0x1a>
 80143e4:	682b      	ldr	r3, [r5, #0]
 80143e6:	b103      	cbz	r3, 80143ea <_close_r+0x1a>
 80143e8:	6023      	str	r3, [r4, #0]
 80143ea:	bd38      	pop	{r3, r4, r5, pc}
 80143ec:	2000752c 	.word	0x2000752c

080143f0 <_lseek_r>:
 80143f0:	b538      	push	{r3, r4, r5, lr}
 80143f2:	4d07      	ldr	r5, [pc, #28]	; (8014410 <_lseek_r+0x20>)
 80143f4:	4604      	mov	r4, r0
 80143f6:	4608      	mov	r0, r1
 80143f8:	4611      	mov	r1, r2
 80143fa:	2200      	movs	r2, #0
 80143fc:	602a      	str	r2, [r5, #0]
 80143fe:	461a      	mov	r2, r3
 8014400:	f7f1 fb7c 	bl	8005afc <_lseek>
 8014404:	1c43      	adds	r3, r0, #1
 8014406:	d102      	bne.n	801440e <_lseek_r+0x1e>
 8014408:	682b      	ldr	r3, [r5, #0]
 801440a:	b103      	cbz	r3, 801440e <_lseek_r+0x1e>
 801440c:	6023      	str	r3, [r4, #0]
 801440e:	bd38      	pop	{r3, r4, r5, pc}
 8014410:	2000752c 	.word	0x2000752c

08014414 <_read_r>:
 8014414:	b538      	push	{r3, r4, r5, lr}
 8014416:	4d07      	ldr	r5, [pc, #28]	; (8014434 <_read_r+0x20>)
 8014418:	4604      	mov	r4, r0
 801441a:	4608      	mov	r0, r1
 801441c:	4611      	mov	r1, r2
 801441e:	2200      	movs	r2, #0
 8014420:	602a      	str	r2, [r5, #0]
 8014422:	461a      	mov	r2, r3
 8014424:	f7f1 fb0a 	bl	8005a3c <_read>
 8014428:	1c43      	adds	r3, r0, #1
 801442a:	d102      	bne.n	8014432 <_read_r+0x1e>
 801442c:	682b      	ldr	r3, [r5, #0]
 801442e:	b103      	cbz	r3, 8014432 <_read_r+0x1e>
 8014430:	6023      	str	r3, [r4, #0]
 8014432:	bd38      	pop	{r3, r4, r5, pc}
 8014434:	2000752c 	.word	0x2000752c

08014438 <_write_r>:
 8014438:	b538      	push	{r3, r4, r5, lr}
 801443a:	4d07      	ldr	r5, [pc, #28]	; (8014458 <_write_r+0x20>)
 801443c:	4604      	mov	r4, r0
 801443e:	4608      	mov	r0, r1
 8014440:	4611      	mov	r1, r2
 8014442:	2200      	movs	r2, #0
 8014444:	602a      	str	r2, [r5, #0]
 8014446:	461a      	mov	r2, r3
 8014448:	f7f1 fb15 	bl	8005a76 <_write>
 801444c:	1c43      	adds	r3, r0, #1
 801444e:	d102      	bne.n	8014456 <_write_r+0x1e>
 8014450:	682b      	ldr	r3, [r5, #0]
 8014452:	b103      	cbz	r3, 8014456 <_write_r+0x1e>
 8014454:	6023      	str	r3, [r4, #0]
 8014456:	bd38      	pop	{r3, r4, r5, pc}
 8014458:	2000752c 	.word	0x2000752c

0801445c <__errno>:
 801445c:	4b01      	ldr	r3, [pc, #4]	; (8014464 <__errno+0x8>)
 801445e:	6818      	ldr	r0, [r3, #0]
 8014460:	4770      	bx	lr
 8014462:	bf00      	nop
 8014464:	2000032c 	.word	0x2000032c

08014468 <__libc_init_array>:
 8014468:	b570      	push	{r4, r5, r6, lr}
 801446a:	4d0d      	ldr	r5, [pc, #52]	; (80144a0 <__libc_init_array+0x38>)
 801446c:	4c0d      	ldr	r4, [pc, #52]	; (80144a4 <__libc_init_array+0x3c>)
 801446e:	1b64      	subs	r4, r4, r5
 8014470:	10a4      	asrs	r4, r4, #2
 8014472:	2600      	movs	r6, #0
 8014474:	42a6      	cmp	r6, r4
 8014476:	d109      	bne.n	801448c <__libc_init_array+0x24>
 8014478:	4d0b      	ldr	r5, [pc, #44]	; (80144a8 <__libc_init_array+0x40>)
 801447a:	4c0c      	ldr	r4, [pc, #48]	; (80144ac <__libc_init_array+0x44>)
 801447c:	f003 f9be 	bl	80177fc <_init>
 8014480:	1b64      	subs	r4, r4, r5
 8014482:	10a4      	asrs	r4, r4, #2
 8014484:	2600      	movs	r6, #0
 8014486:	42a6      	cmp	r6, r4
 8014488:	d105      	bne.n	8014496 <__libc_init_array+0x2e>
 801448a:	bd70      	pop	{r4, r5, r6, pc}
 801448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014490:	4798      	blx	r3
 8014492:	3601      	adds	r6, #1
 8014494:	e7ee      	b.n	8014474 <__libc_init_array+0xc>
 8014496:	f855 3b04 	ldr.w	r3, [r5], #4
 801449a:	4798      	blx	r3
 801449c:	3601      	adds	r6, #1
 801449e:	e7f2      	b.n	8014486 <__libc_init_array+0x1e>
 80144a0:	08018910 	.word	0x08018910
 80144a4:	08018910 	.word	0x08018910
 80144a8:	08018910 	.word	0x08018910
 80144ac:	08018914 	.word	0x08018914

080144b0 <__retarget_lock_init_recursive>:
 80144b0:	4770      	bx	lr

080144b2 <__retarget_lock_acquire_recursive>:
 80144b2:	4770      	bx	lr

080144b4 <__retarget_lock_release_recursive>:
 80144b4:	4770      	bx	lr

080144b6 <memcpy>:
 80144b6:	440a      	add	r2, r1
 80144b8:	4291      	cmp	r1, r2
 80144ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80144be:	d100      	bne.n	80144c2 <memcpy+0xc>
 80144c0:	4770      	bx	lr
 80144c2:	b510      	push	{r4, lr}
 80144c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80144cc:	4291      	cmp	r1, r2
 80144ce:	d1f9      	bne.n	80144c4 <memcpy+0xe>
 80144d0:	bd10      	pop	{r4, pc}
 80144d2:	0000      	movs	r0, r0
 80144d4:	0000      	movs	r0, r0
	...

080144d8 <nan>:
 80144d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80144e0 <nan+0x8>
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop
 80144e0:	00000000 	.word	0x00000000
 80144e4:	7ff80000 	.word	0x7ff80000

080144e8 <nanf>:
 80144e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80144f0 <nanf+0x8>
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop
 80144f0:	7fc00000 	.word	0x7fc00000

080144f4 <quorem>:
 80144f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144f8:	6903      	ldr	r3, [r0, #16]
 80144fa:	690c      	ldr	r4, [r1, #16]
 80144fc:	42a3      	cmp	r3, r4
 80144fe:	4607      	mov	r7, r0
 8014500:	db7e      	blt.n	8014600 <quorem+0x10c>
 8014502:	3c01      	subs	r4, #1
 8014504:	f101 0814 	add.w	r8, r1, #20
 8014508:	f100 0514 	add.w	r5, r0, #20
 801450c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014510:	9301      	str	r3, [sp, #4]
 8014512:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801451a:	3301      	adds	r3, #1
 801451c:	429a      	cmp	r2, r3
 801451e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014522:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014526:	fbb2 f6f3 	udiv	r6, r2, r3
 801452a:	d331      	bcc.n	8014590 <quorem+0x9c>
 801452c:	f04f 0e00 	mov.w	lr, #0
 8014530:	4640      	mov	r0, r8
 8014532:	46ac      	mov	ip, r5
 8014534:	46f2      	mov	sl, lr
 8014536:	f850 2b04 	ldr.w	r2, [r0], #4
 801453a:	b293      	uxth	r3, r2
 801453c:	fb06 e303 	mla	r3, r6, r3, lr
 8014540:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014544:	0c1a      	lsrs	r2, r3, #16
 8014546:	b29b      	uxth	r3, r3
 8014548:	ebaa 0303 	sub.w	r3, sl, r3
 801454c:	f8dc a000 	ldr.w	sl, [ip]
 8014550:	fa13 f38a 	uxtah	r3, r3, sl
 8014554:	fb06 220e 	mla	r2, r6, lr, r2
 8014558:	9300      	str	r3, [sp, #0]
 801455a:	9b00      	ldr	r3, [sp, #0]
 801455c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014560:	b292      	uxth	r2, r2
 8014562:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014566:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801456a:	f8bd 3000 	ldrh.w	r3, [sp]
 801456e:	4581      	cmp	r9, r0
 8014570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014574:	f84c 3b04 	str.w	r3, [ip], #4
 8014578:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801457c:	d2db      	bcs.n	8014536 <quorem+0x42>
 801457e:	f855 300b 	ldr.w	r3, [r5, fp]
 8014582:	b92b      	cbnz	r3, 8014590 <quorem+0x9c>
 8014584:	9b01      	ldr	r3, [sp, #4]
 8014586:	3b04      	subs	r3, #4
 8014588:	429d      	cmp	r5, r3
 801458a:	461a      	mov	r2, r3
 801458c:	d32c      	bcc.n	80145e8 <quorem+0xf4>
 801458e:	613c      	str	r4, [r7, #16]
 8014590:	4638      	mov	r0, r7
 8014592:	f001 fd5b 	bl	801604c <__mcmp>
 8014596:	2800      	cmp	r0, #0
 8014598:	db22      	blt.n	80145e0 <quorem+0xec>
 801459a:	3601      	adds	r6, #1
 801459c:	4629      	mov	r1, r5
 801459e:	2000      	movs	r0, #0
 80145a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80145a4:	f8d1 c000 	ldr.w	ip, [r1]
 80145a8:	b293      	uxth	r3, r2
 80145aa:	1ac3      	subs	r3, r0, r3
 80145ac:	0c12      	lsrs	r2, r2, #16
 80145ae:	fa13 f38c 	uxtah	r3, r3, ip
 80145b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80145b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80145c0:	45c1      	cmp	r9, r8
 80145c2:	f841 3b04 	str.w	r3, [r1], #4
 80145c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80145ca:	d2e9      	bcs.n	80145a0 <quorem+0xac>
 80145cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80145d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80145d4:	b922      	cbnz	r2, 80145e0 <quorem+0xec>
 80145d6:	3b04      	subs	r3, #4
 80145d8:	429d      	cmp	r5, r3
 80145da:	461a      	mov	r2, r3
 80145dc:	d30a      	bcc.n	80145f4 <quorem+0x100>
 80145de:	613c      	str	r4, [r7, #16]
 80145e0:	4630      	mov	r0, r6
 80145e2:	b003      	add	sp, #12
 80145e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e8:	6812      	ldr	r2, [r2, #0]
 80145ea:	3b04      	subs	r3, #4
 80145ec:	2a00      	cmp	r2, #0
 80145ee:	d1ce      	bne.n	801458e <quorem+0x9a>
 80145f0:	3c01      	subs	r4, #1
 80145f2:	e7c9      	b.n	8014588 <quorem+0x94>
 80145f4:	6812      	ldr	r2, [r2, #0]
 80145f6:	3b04      	subs	r3, #4
 80145f8:	2a00      	cmp	r2, #0
 80145fa:	d1f0      	bne.n	80145de <quorem+0xea>
 80145fc:	3c01      	subs	r4, #1
 80145fe:	e7eb      	b.n	80145d8 <quorem+0xe4>
 8014600:	2000      	movs	r0, #0
 8014602:	e7ee      	b.n	80145e2 <quorem+0xee>
 8014604:	0000      	movs	r0, r0
	...

08014608 <_dtoa_r>:
 8014608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801460c:	ed2d 8b04 	vpush	{d8-d9}
 8014610:	69c5      	ldr	r5, [r0, #28]
 8014612:	b093      	sub	sp, #76	; 0x4c
 8014614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014618:	ec57 6b10 	vmov	r6, r7, d0
 801461c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014620:	9107      	str	r1, [sp, #28]
 8014622:	4604      	mov	r4, r0
 8014624:	920a      	str	r2, [sp, #40]	; 0x28
 8014626:	930d      	str	r3, [sp, #52]	; 0x34
 8014628:	b975      	cbnz	r5, 8014648 <_dtoa_r+0x40>
 801462a:	2010      	movs	r0, #16
 801462c:	f001 f982 	bl	8015934 <malloc>
 8014630:	4602      	mov	r2, r0
 8014632:	61e0      	str	r0, [r4, #28]
 8014634:	b920      	cbnz	r0, 8014640 <_dtoa_r+0x38>
 8014636:	4bae      	ldr	r3, [pc, #696]	; (80148f0 <_dtoa_r+0x2e8>)
 8014638:	21ef      	movs	r1, #239	; 0xef
 801463a:	48ae      	ldr	r0, [pc, #696]	; (80148f4 <_dtoa_r+0x2ec>)
 801463c:	f002 fd44 	bl	80170c8 <__assert_func>
 8014640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014644:	6005      	str	r5, [r0, #0]
 8014646:	60c5      	str	r5, [r0, #12]
 8014648:	69e3      	ldr	r3, [r4, #28]
 801464a:	6819      	ldr	r1, [r3, #0]
 801464c:	b151      	cbz	r1, 8014664 <_dtoa_r+0x5c>
 801464e:	685a      	ldr	r2, [r3, #4]
 8014650:	604a      	str	r2, [r1, #4]
 8014652:	2301      	movs	r3, #1
 8014654:	4093      	lsls	r3, r2
 8014656:	608b      	str	r3, [r1, #8]
 8014658:	4620      	mov	r0, r4
 801465a:	f001 fa71 	bl	8015b40 <_Bfree>
 801465e:	69e3      	ldr	r3, [r4, #28]
 8014660:	2200      	movs	r2, #0
 8014662:	601a      	str	r2, [r3, #0]
 8014664:	1e3b      	subs	r3, r7, #0
 8014666:	bfbb      	ittet	lt
 8014668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801466c:	9303      	strlt	r3, [sp, #12]
 801466e:	2300      	movge	r3, #0
 8014670:	2201      	movlt	r2, #1
 8014672:	bfac      	ite	ge
 8014674:	f8c8 3000 	strge.w	r3, [r8]
 8014678:	f8c8 2000 	strlt.w	r2, [r8]
 801467c:	4b9e      	ldr	r3, [pc, #632]	; (80148f8 <_dtoa_r+0x2f0>)
 801467e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014682:	ea33 0308 	bics.w	r3, r3, r8
 8014686:	d11b      	bne.n	80146c0 <_dtoa_r+0xb8>
 8014688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801468a:	f242 730f 	movw	r3, #9999	; 0x270f
 801468e:	6013      	str	r3, [r2, #0]
 8014690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014694:	4333      	orrs	r3, r6
 8014696:	f000 8593 	beq.w	80151c0 <_dtoa_r+0xbb8>
 801469a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801469c:	b963      	cbnz	r3, 80146b8 <_dtoa_r+0xb0>
 801469e:	4b97      	ldr	r3, [pc, #604]	; (80148fc <_dtoa_r+0x2f4>)
 80146a0:	e027      	b.n	80146f2 <_dtoa_r+0xea>
 80146a2:	4b97      	ldr	r3, [pc, #604]	; (8014900 <_dtoa_r+0x2f8>)
 80146a4:	9300      	str	r3, [sp, #0]
 80146a6:	3308      	adds	r3, #8
 80146a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146aa:	6013      	str	r3, [r2, #0]
 80146ac:	9800      	ldr	r0, [sp, #0]
 80146ae:	b013      	add	sp, #76	; 0x4c
 80146b0:	ecbd 8b04 	vpop	{d8-d9}
 80146b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b8:	4b90      	ldr	r3, [pc, #576]	; (80148fc <_dtoa_r+0x2f4>)
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	3303      	adds	r3, #3
 80146be:	e7f3      	b.n	80146a8 <_dtoa_r+0xa0>
 80146c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80146c4:	2200      	movs	r2, #0
 80146c6:	ec51 0b17 	vmov	r0, r1, d7
 80146ca:	eeb0 8a47 	vmov.f32	s16, s14
 80146ce:	eef0 8a67 	vmov.f32	s17, s15
 80146d2:	2300      	movs	r3, #0
 80146d4:	f7ec f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80146d8:	4681      	mov	r9, r0
 80146da:	b160      	cbz	r0, 80146f6 <_dtoa_r+0xee>
 80146dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80146de:	2301      	movs	r3, #1
 80146e0:	6013      	str	r3, [r2, #0]
 80146e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	f000 8568 	beq.w	80151ba <_dtoa_r+0xbb2>
 80146ea:	4b86      	ldr	r3, [pc, #536]	; (8014904 <_dtoa_r+0x2fc>)
 80146ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80146ee:	6013      	str	r3, [r2, #0]
 80146f0:	3b01      	subs	r3, #1
 80146f2:	9300      	str	r3, [sp, #0]
 80146f4:	e7da      	b.n	80146ac <_dtoa_r+0xa4>
 80146f6:	aa10      	add	r2, sp, #64	; 0x40
 80146f8:	a911      	add	r1, sp, #68	; 0x44
 80146fa:	4620      	mov	r0, r4
 80146fc:	eeb0 0a48 	vmov.f32	s0, s16
 8014700:	eef0 0a68 	vmov.f32	s1, s17
 8014704:	f001 fdb8 	bl	8016278 <__d2b>
 8014708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801470c:	4682      	mov	sl, r0
 801470e:	2d00      	cmp	r5, #0
 8014710:	d07f      	beq.n	8014812 <_dtoa_r+0x20a>
 8014712:	ee18 3a90 	vmov	r3, s17
 8014716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801471a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801471e:	ec51 0b18 	vmov	r0, r1, d8
 8014722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801472a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801472e:	4619      	mov	r1, r3
 8014730:	2200      	movs	r2, #0
 8014732:	4b75      	ldr	r3, [pc, #468]	; (8014908 <_dtoa_r+0x300>)
 8014734:	f7eb fda8 	bl	8000288 <__aeabi_dsub>
 8014738:	a367      	add	r3, pc, #412	; (adr r3, 80148d8 <_dtoa_r+0x2d0>)
 801473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473e:	f7eb ff5b 	bl	80005f8 <__aeabi_dmul>
 8014742:	a367      	add	r3, pc, #412	; (adr r3, 80148e0 <_dtoa_r+0x2d8>)
 8014744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014748:	f7eb fda0 	bl	800028c <__adddf3>
 801474c:	4606      	mov	r6, r0
 801474e:	4628      	mov	r0, r5
 8014750:	460f      	mov	r7, r1
 8014752:	f7eb fee7 	bl	8000524 <__aeabi_i2d>
 8014756:	a364      	add	r3, pc, #400	; (adr r3, 80148e8 <_dtoa_r+0x2e0>)
 8014758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475c:	f7eb ff4c 	bl	80005f8 <__aeabi_dmul>
 8014760:	4602      	mov	r2, r0
 8014762:	460b      	mov	r3, r1
 8014764:	4630      	mov	r0, r6
 8014766:	4639      	mov	r1, r7
 8014768:	f7eb fd90 	bl	800028c <__adddf3>
 801476c:	4606      	mov	r6, r0
 801476e:	460f      	mov	r7, r1
 8014770:	f7ec f9f2 	bl	8000b58 <__aeabi_d2iz>
 8014774:	2200      	movs	r2, #0
 8014776:	4683      	mov	fp, r0
 8014778:	2300      	movs	r3, #0
 801477a:	4630      	mov	r0, r6
 801477c:	4639      	mov	r1, r7
 801477e:	f7ec f9ad 	bl	8000adc <__aeabi_dcmplt>
 8014782:	b148      	cbz	r0, 8014798 <_dtoa_r+0x190>
 8014784:	4658      	mov	r0, fp
 8014786:	f7eb fecd 	bl	8000524 <__aeabi_i2d>
 801478a:	4632      	mov	r2, r6
 801478c:	463b      	mov	r3, r7
 801478e:	f7ec f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014792:	b908      	cbnz	r0, 8014798 <_dtoa_r+0x190>
 8014794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014798:	f1bb 0f16 	cmp.w	fp, #22
 801479c:	d857      	bhi.n	801484e <_dtoa_r+0x246>
 801479e:	4b5b      	ldr	r3, [pc, #364]	; (801490c <_dtoa_r+0x304>)
 80147a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80147a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a8:	ec51 0b18 	vmov	r0, r1, d8
 80147ac:	f7ec f996 	bl	8000adc <__aeabi_dcmplt>
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d04e      	beq.n	8014852 <_dtoa_r+0x24a>
 80147b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80147b8:	2300      	movs	r3, #0
 80147ba:	930c      	str	r3, [sp, #48]	; 0x30
 80147bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80147be:	1b5b      	subs	r3, r3, r5
 80147c0:	1e5a      	subs	r2, r3, #1
 80147c2:	bf45      	ittet	mi
 80147c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80147c8:	9305      	strmi	r3, [sp, #20]
 80147ca:	2300      	movpl	r3, #0
 80147cc:	2300      	movmi	r3, #0
 80147ce:	9206      	str	r2, [sp, #24]
 80147d0:	bf54      	ite	pl
 80147d2:	9305      	strpl	r3, [sp, #20]
 80147d4:	9306      	strmi	r3, [sp, #24]
 80147d6:	f1bb 0f00 	cmp.w	fp, #0
 80147da:	db3c      	blt.n	8014856 <_dtoa_r+0x24e>
 80147dc:	9b06      	ldr	r3, [sp, #24]
 80147de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80147e2:	445b      	add	r3, fp
 80147e4:	9306      	str	r3, [sp, #24]
 80147e6:	2300      	movs	r3, #0
 80147e8:	9308      	str	r3, [sp, #32]
 80147ea:	9b07      	ldr	r3, [sp, #28]
 80147ec:	2b09      	cmp	r3, #9
 80147ee:	d868      	bhi.n	80148c2 <_dtoa_r+0x2ba>
 80147f0:	2b05      	cmp	r3, #5
 80147f2:	bfc4      	itt	gt
 80147f4:	3b04      	subgt	r3, #4
 80147f6:	9307      	strgt	r3, [sp, #28]
 80147f8:	9b07      	ldr	r3, [sp, #28]
 80147fa:	f1a3 0302 	sub.w	r3, r3, #2
 80147fe:	bfcc      	ite	gt
 8014800:	2500      	movgt	r5, #0
 8014802:	2501      	movle	r5, #1
 8014804:	2b03      	cmp	r3, #3
 8014806:	f200 8085 	bhi.w	8014914 <_dtoa_r+0x30c>
 801480a:	e8df f003 	tbb	[pc, r3]
 801480e:	3b2e      	.short	0x3b2e
 8014810:	5839      	.short	0x5839
 8014812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014816:	441d      	add	r5, r3
 8014818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801481c:	2b20      	cmp	r3, #32
 801481e:	bfc1      	itttt	gt
 8014820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014824:	fa08 f803 	lslgt.w	r8, r8, r3
 8014828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801482c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014830:	bfd6      	itet	le
 8014832:	f1c3 0320 	rsble	r3, r3, #32
 8014836:	ea48 0003 	orrgt.w	r0, r8, r3
 801483a:	fa06 f003 	lslle.w	r0, r6, r3
 801483e:	f7eb fe61 	bl	8000504 <__aeabi_ui2d>
 8014842:	2201      	movs	r2, #1
 8014844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014848:	3d01      	subs	r5, #1
 801484a:	920e      	str	r2, [sp, #56]	; 0x38
 801484c:	e76f      	b.n	801472e <_dtoa_r+0x126>
 801484e:	2301      	movs	r3, #1
 8014850:	e7b3      	b.n	80147ba <_dtoa_r+0x1b2>
 8014852:	900c      	str	r0, [sp, #48]	; 0x30
 8014854:	e7b2      	b.n	80147bc <_dtoa_r+0x1b4>
 8014856:	9b05      	ldr	r3, [sp, #20]
 8014858:	eba3 030b 	sub.w	r3, r3, fp
 801485c:	9305      	str	r3, [sp, #20]
 801485e:	f1cb 0300 	rsb	r3, fp, #0
 8014862:	9308      	str	r3, [sp, #32]
 8014864:	2300      	movs	r3, #0
 8014866:	930b      	str	r3, [sp, #44]	; 0x2c
 8014868:	e7bf      	b.n	80147ea <_dtoa_r+0x1e2>
 801486a:	2300      	movs	r3, #0
 801486c:	9309      	str	r3, [sp, #36]	; 0x24
 801486e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014870:	2b00      	cmp	r3, #0
 8014872:	dc52      	bgt.n	801491a <_dtoa_r+0x312>
 8014874:	2301      	movs	r3, #1
 8014876:	9301      	str	r3, [sp, #4]
 8014878:	9304      	str	r3, [sp, #16]
 801487a:	461a      	mov	r2, r3
 801487c:	920a      	str	r2, [sp, #40]	; 0x28
 801487e:	e00b      	b.n	8014898 <_dtoa_r+0x290>
 8014880:	2301      	movs	r3, #1
 8014882:	e7f3      	b.n	801486c <_dtoa_r+0x264>
 8014884:	2300      	movs	r3, #0
 8014886:	9309      	str	r3, [sp, #36]	; 0x24
 8014888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801488a:	445b      	add	r3, fp
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	3301      	adds	r3, #1
 8014890:	2b01      	cmp	r3, #1
 8014892:	9304      	str	r3, [sp, #16]
 8014894:	bfb8      	it	lt
 8014896:	2301      	movlt	r3, #1
 8014898:	69e0      	ldr	r0, [r4, #28]
 801489a:	2100      	movs	r1, #0
 801489c:	2204      	movs	r2, #4
 801489e:	f102 0614 	add.w	r6, r2, #20
 80148a2:	429e      	cmp	r6, r3
 80148a4:	d93d      	bls.n	8014922 <_dtoa_r+0x31a>
 80148a6:	6041      	str	r1, [r0, #4]
 80148a8:	4620      	mov	r0, r4
 80148aa:	f001 f909 	bl	8015ac0 <_Balloc>
 80148ae:	9000      	str	r0, [sp, #0]
 80148b0:	2800      	cmp	r0, #0
 80148b2:	d139      	bne.n	8014928 <_dtoa_r+0x320>
 80148b4:	4b16      	ldr	r3, [pc, #88]	; (8014910 <_dtoa_r+0x308>)
 80148b6:	4602      	mov	r2, r0
 80148b8:	f240 11af 	movw	r1, #431	; 0x1af
 80148bc:	e6bd      	b.n	801463a <_dtoa_r+0x32>
 80148be:	2301      	movs	r3, #1
 80148c0:	e7e1      	b.n	8014886 <_dtoa_r+0x27e>
 80148c2:	2501      	movs	r5, #1
 80148c4:	2300      	movs	r3, #0
 80148c6:	9307      	str	r3, [sp, #28]
 80148c8:	9509      	str	r5, [sp, #36]	; 0x24
 80148ca:	f04f 33ff 	mov.w	r3, #4294967295
 80148ce:	9301      	str	r3, [sp, #4]
 80148d0:	9304      	str	r3, [sp, #16]
 80148d2:	2200      	movs	r2, #0
 80148d4:	2312      	movs	r3, #18
 80148d6:	e7d1      	b.n	801487c <_dtoa_r+0x274>
 80148d8:	636f4361 	.word	0x636f4361
 80148dc:	3fd287a7 	.word	0x3fd287a7
 80148e0:	8b60c8b3 	.word	0x8b60c8b3
 80148e4:	3fc68a28 	.word	0x3fc68a28
 80148e8:	509f79fb 	.word	0x509f79fb
 80148ec:	3fd34413 	.word	0x3fd34413
 80148f0:	08018564 	.word	0x08018564
 80148f4:	0801857b 	.word	0x0801857b
 80148f8:	7ff00000 	.word	0x7ff00000
 80148fc:	08018560 	.word	0x08018560
 8014900:	08018557 	.word	0x08018557
 8014904:	080188c5 	.word	0x080188c5
 8014908:	3ff80000 	.word	0x3ff80000
 801490c:	080186c8 	.word	0x080186c8
 8014910:	080185d3 	.word	0x080185d3
 8014914:	2301      	movs	r3, #1
 8014916:	9309      	str	r3, [sp, #36]	; 0x24
 8014918:	e7d7      	b.n	80148ca <_dtoa_r+0x2c2>
 801491a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801491c:	9301      	str	r3, [sp, #4]
 801491e:	9304      	str	r3, [sp, #16]
 8014920:	e7ba      	b.n	8014898 <_dtoa_r+0x290>
 8014922:	3101      	adds	r1, #1
 8014924:	0052      	lsls	r2, r2, #1
 8014926:	e7ba      	b.n	801489e <_dtoa_r+0x296>
 8014928:	69e3      	ldr	r3, [r4, #28]
 801492a:	9a00      	ldr	r2, [sp, #0]
 801492c:	601a      	str	r2, [r3, #0]
 801492e:	9b04      	ldr	r3, [sp, #16]
 8014930:	2b0e      	cmp	r3, #14
 8014932:	f200 80a8 	bhi.w	8014a86 <_dtoa_r+0x47e>
 8014936:	2d00      	cmp	r5, #0
 8014938:	f000 80a5 	beq.w	8014a86 <_dtoa_r+0x47e>
 801493c:	f1bb 0f00 	cmp.w	fp, #0
 8014940:	dd38      	ble.n	80149b4 <_dtoa_r+0x3ac>
 8014942:	4bc0      	ldr	r3, [pc, #768]	; (8014c44 <_dtoa_r+0x63c>)
 8014944:	f00b 020f 	and.w	r2, fp, #15
 8014948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801494c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014950:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014954:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014958:	d019      	beq.n	801498e <_dtoa_r+0x386>
 801495a:	4bbb      	ldr	r3, [pc, #748]	; (8014c48 <_dtoa_r+0x640>)
 801495c:	ec51 0b18 	vmov	r0, r1, d8
 8014960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014964:	f7eb ff72 	bl	800084c <__aeabi_ddiv>
 8014968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801496c:	f008 080f 	and.w	r8, r8, #15
 8014970:	2503      	movs	r5, #3
 8014972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014c48 <_dtoa_r+0x640>
 8014976:	f1b8 0f00 	cmp.w	r8, #0
 801497a:	d10a      	bne.n	8014992 <_dtoa_r+0x38a>
 801497c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014980:	4632      	mov	r2, r6
 8014982:	463b      	mov	r3, r7
 8014984:	f7eb ff62 	bl	800084c <__aeabi_ddiv>
 8014988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801498c:	e02b      	b.n	80149e6 <_dtoa_r+0x3de>
 801498e:	2502      	movs	r5, #2
 8014990:	e7ef      	b.n	8014972 <_dtoa_r+0x36a>
 8014992:	f018 0f01 	tst.w	r8, #1
 8014996:	d008      	beq.n	80149aa <_dtoa_r+0x3a2>
 8014998:	4630      	mov	r0, r6
 801499a:	4639      	mov	r1, r7
 801499c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80149a0:	f7eb fe2a 	bl	80005f8 <__aeabi_dmul>
 80149a4:	3501      	adds	r5, #1
 80149a6:	4606      	mov	r6, r0
 80149a8:	460f      	mov	r7, r1
 80149aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80149ae:	f109 0908 	add.w	r9, r9, #8
 80149b2:	e7e0      	b.n	8014976 <_dtoa_r+0x36e>
 80149b4:	f000 809f 	beq.w	8014af6 <_dtoa_r+0x4ee>
 80149b8:	f1cb 0600 	rsb	r6, fp, #0
 80149bc:	4ba1      	ldr	r3, [pc, #644]	; (8014c44 <_dtoa_r+0x63c>)
 80149be:	4fa2      	ldr	r7, [pc, #648]	; (8014c48 <_dtoa_r+0x640>)
 80149c0:	f006 020f 	and.w	r2, r6, #15
 80149c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	ec51 0b18 	vmov	r0, r1, d8
 80149d0:	f7eb fe12 	bl	80005f8 <__aeabi_dmul>
 80149d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149d8:	1136      	asrs	r6, r6, #4
 80149da:	2300      	movs	r3, #0
 80149dc:	2502      	movs	r5, #2
 80149de:	2e00      	cmp	r6, #0
 80149e0:	d17e      	bne.n	8014ae0 <_dtoa_r+0x4d8>
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d1d0      	bne.n	8014988 <_dtoa_r+0x380>
 80149e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	f000 8084 	beq.w	8014afa <_dtoa_r+0x4f2>
 80149f2:	4b96      	ldr	r3, [pc, #600]	; (8014c4c <_dtoa_r+0x644>)
 80149f4:	2200      	movs	r2, #0
 80149f6:	4640      	mov	r0, r8
 80149f8:	4649      	mov	r1, r9
 80149fa:	f7ec f86f 	bl	8000adc <__aeabi_dcmplt>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d07b      	beq.n	8014afa <_dtoa_r+0x4f2>
 8014a02:	9b04      	ldr	r3, [sp, #16]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d078      	beq.n	8014afa <_dtoa_r+0x4f2>
 8014a08:	9b01      	ldr	r3, [sp, #4]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	dd39      	ble.n	8014a82 <_dtoa_r+0x47a>
 8014a0e:	4b90      	ldr	r3, [pc, #576]	; (8014c50 <_dtoa_r+0x648>)
 8014a10:	2200      	movs	r2, #0
 8014a12:	4640      	mov	r0, r8
 8014a14:	4649      	mov	r1, r9
 8014a16:	f7eb fdef 	bl	80005f8 <__aeabi_dmul>
 8014a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a1e:	9e01      	ldr	r6, [sp, #4]
 8014a20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014a24:	3501      	adds	r5, #1
 8014a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014a2a:	4628      	mov	r0, r5
 8014a2c:	f7eb fd7a 	bl	8000524 <__aeabi_i2d>
 8014a30:	4642      	mov	r2, r8
 8014a32:	464b      	mov	r3, r9
 8014a34:	f7eb fde0 	bl	80005f8 <__aeabi_dmul>
 8014a38:	4b86      	ldr	r3, [pc, #536]	; (8014c54 <_dtoa_r+0x64c>)
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	f7eb fc26 	bl	800028c <__adddf3>
 8014a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a48:	9303      	str	r3, [sp, #12]
 8014a4a:	2e00      	cmp	r6, #0
 8014a4c:	d158      	bne.n	8014b00 <_dtoa_r+0x4f8>
 8014a4e:	4b82      	ldr	r3, [pc, #520]	; (8014c58 <_dtoa_r+0x650>)
 8014a50:	2200      	movs	r2, #0
 8014a52:	4640      	mov	r0, r8
 8014a54:	4649      	mov	r1, r9
 8014a56:	f7eb fc17 	bl	8000288 <__aeabi_dsub>
 8014a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a5e:	4680      	mov	r8, r0
 8014a60:	4689      	mov	r9, r1
 8014a62:	f7ec f859 	bl	8000b18 <__aeabi_dcmpgt>
 8014a66:	2800      	cmp	r0, #0
 8014a68:	f040 8296 	bne.w	8014f98 <_dtoa_r+0x990>
 8014a6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014a70:	4640      	mov	r0, r8
 8014a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a76:	4649      	mov	r1, r9
 8014a78:	f7ec f830 	bl	8000adc <__aeabi_dcmplt>
 8014a7c:	2800      	cmp	r0, #0
 8014a7e:	f040 8289 	bne.w	8014f94 <_dtoa_r+0x98c>
 8014a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f2c0 814e 	blt.w	8014d2a <_dtoa_r+0x722>
 8014a8e:	f1bb 0f0e 	cmp.w	fp, #14
 8014a92:	f300 814a 	bgt.w	8014d2a <_dtoa_r+0x722>
 8014a96:	4b6b      	ldr	r3, [pc, #428]	; (8014c44 <_dtoa_r+0x63c>)
 8014a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	f280 80dc 	bge.w	8014c60 <_dtoa_r+0x658>
 8014aa8:	9b04      	ldr	r3, [sp, #16]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	f300 80d8 	bgt.w	8014c60 <_dtoa_r+0x658>
 8014ab0:	f040 826f 	bne.w	8014f92 <_dtoa_r+0x98a>
 8014ab4:	4b68      	ldr	r3, [pc, #416]	; (8014c58 <_dtoa_r+0x650>)
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	4640      	mov	r0, r8
 8014aba:	4649      	mov	r1, r9
 8014abc:	f7eb fd9c 	bl	80005f8 <__aeabi_dmul>
 8014ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014ac4:	f7ec f81e 	bl	8000b04 <__aeabi_dcmpge>
 8014ac8:	9e04      	ldr	r6, [sp, #16]
 8014aca:	4637      	mov	r7, r6
 8014acc:	2800      	cmp	r0, #0
 8014ace:	f040 8245 	bne.w	8014f5c <_dtoa_r+0x954>
 8014ad2:	9d00      	ldr	r5, [sp, #0]
 8014ad4:	2331      	movs	r3, #49	; 0x31
 8014ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8014ada:	f10b 0b01 	add.w	fp, fp, #1
 8014ade:	e241      	b.n	8014f64 <_dtoa_r+0x95c>
 8014ae0:	07f2      	lsls	r2, r6, #31
 8014ae2:	d505      	bpl.n	8014af0 <_dtoa_r+0x4e8>
 8014ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ae8:	f7eb fd86 	bl	80005f8 <__aeabi_dmul>
 8014aec:	3501      	adds	r5, #1
 8014aee:	2301      	movs	r3, #1
 8014af0:	1076      	asrs	r6, r6, #1
 8014af2:	3708      	adds	r7, #8
 8014af4:	e773      	b.n	80149de <_dtoa_r+0x3d6>
 8014af6:	2502      	movs	r5, #2
 8014af8:	e775      	b.n	80149e6 <_dtoa_r+0x3de>
 8014afa:	9e04      	ldr	r6, [sp, #16]
 8014afc:	465f      	mov	r7, fp
 8014afe:	e792      	b.n	8014a26 <_dtoa_r+0x41e>
 8014b00:	9900      	ldr	r1, [sp, #0]
 8014b02:	4b50      	ldr	r3, [pc, #320]	; (8014c44 <_dtoa_r+0x63c>)
 8014b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b08:	4431      	add	r1, r6
 8014b0a:	9102      	str	r1, [sp, #8]
 8014b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014b0e:	eeb0 9a47 	vmov.f32	s18, s14
 8014b12:	eef0 9a67 	vmov.f32	s19, s15
 8014b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014b1e:	2900      	cmp	r1, #0
 8014b20:	d044      	beq.n	8014bac <_dtoa_r+0x5a4>
 8014b22:	494e      	ldr	r1, [pc, #312]	; (8014c5c <_dtoa_r+0x654>)
 8014b24:	2000      	movs	r0, #0
 8014b26:	f7eb fe91 	bl	800084c <__aeabi_ddiv>
 8014b2a:	ec53 2b19 	vmov	r2, r3, d9
 8014b2e:	f7eb fbab 	bl	8000288 <__aeabi_dsub>
 8014b32:	9d00      	ldr	r5, [sp, #0]
 8014b34:	ec41 0b19 	vmov	d9, r0, r1
 8014b38:	4649      	mov	r1, r9
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	f7ec f80c 	bl	8000b58 <__aeabi_d2iz>
 8014b40:	4606      	mov	r6, r0
 8014b42:	f7eb fcef 	bl	8000524 <__aeabi_i2d>
 8014b46:	4602      	mov	r2, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	4640      	mov	r0, r8
 8014b4c:	4649      	mov	r1, r9
 8014b4e:	f7eb fb9b 	bl	8000288 <__aeabi_dsub>
 8014b52:	3630      	adds	r6, #48	; 0x30
 8014b54:	f805 6b01 	strb.w	r6, [r5], #1
 8014b58:	ec53 2b19 	vmov	r2, r3, d9
 8014b5c:	4680      	mov	r8, r0
 8014b5e:	4689      	mov	r9, r1
 8014b60:	f7eb ffbc 	bl	8000adc <__aeabi_dcmplt>
 8014b64:	2800      	cmp	r0, #0
 8014b66:	d164      	bne.n	8014c32 <_dtoa_r+0x62a>
 8014b68:	4642      	mov	r2, r8
 8014b6a:	464b      	mov	r3, r9
 8014b6c:	4937      	ldr	r1, [pc, #220]	; (8014c4c <_dtoa_r+0x644>)
 8014b6e:	2000      	movs	r0, #0
 8014b70:	f7eb fb8a 	bl	8000288 <__aeabi_dsub>
 8014b74:	ec53 2b19 	vmov	r2, r3, d9
 8014b78:	f7eb ffb0 	bl	8000adc <__aeabi_dcmplt>
 8014b7c:	2800      	cmp	r0, #0
 8014b7e:	f040 80b6 	bne.w	8014cee <_dtoa_r+0x6e6>
 8014b82:	9b02      	ldr	r3, [sp, #8]
 8014b84:	429d      	cmp	r5, r3
 8014b86:	f43f af7c 	beq.w	8014a82 <_dtoa_r+0x47a>
 8014b8a:	4b31      	ldr	r3, [pc, #196]	; (8014c50 <_dtoa_r+0x648>)
 8014b8c:	ec51 0b19 	vmov	r0, r1, d9
 8014b90:	2200      	movs	r2, #0
 8014b92:	f7eb fd31 	bl	80005f8 <__aeabi_dmul>
 8014b96:	4b2e      	ldr	r3, [pc, #184]	; (8014c50 <_dtoa_r+0x648>)
 8014b98:	ec41 0b19 	vmov	d9, r0, r1
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	4640      	mov	r0, r8
 8014ba0:	4649      	mov	r1, r9
 8014ba2:	f7eb fd29 	bl	80005f8 <__aeabi_dmul>
 8014ba6:	4680      	mov	r8, r0
 8014ba8:	4689      	mov	r9, r1
 8014baa:	e7c5      	b.n	8014b38 <_dtoa_r+0x530>
 8014bac:	ec51 0b17 	vmov	r0, r1, d7
 8014bb0:	f7eb fd22 	bl	80005f8 <__aeabi_dmul>
 8014bb4:	9b02      	ldr	r3, [sp, #8]
 8014bb6:	9d00      	ldr	r5, [sp, #0]
 8014bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bba:	ec41 0b19 	vmov	d9, r0, r1
 8014bbe:	4649      	mov	r1, r9
 8014bc0:	4640      	mov	r0, r8
 8014bc2:	f7eb ffc9 	bl	8000b58 <__aeabi_d2iz>
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	f7eb fcac 	bl	8000524 <__aeabi_i2d>
 8014bcc:	3630      	adds	r6, #48	; 0x30
 8014bce:	4602      	mov	r2, r0
 8014bd0:	460b      	mov	r3, r1
 8014bd2:	4640      	mov	r0, r8
 8014bd4:	4649      	mov	r1, r9
 8014bd6:	f7eb fb57 	bl	8000288 <__aeabi_dsub>
 8014bda:	f805 6b01 	strb.w	r6, [r5], #1
 8014bde:	9b02      	ldr	r3, [sp, #8]
 8014be0:	429d      	cmp	r5, r3
 8014be2:	4680      	mov	r8, r0
 8014be4:	4689      	mov	r9, r1
 8014be6:	f04f 0200 	mov.w	r2, #0
 8014bea:	d124      	bne.n	8014c36 <_dtoa_r+0x62e>
 8014bec:	4b1b      	ldr	r3, [pc, #108]	; (8014c5c <_dtoa_r+0x654>)
 8014bee:	ec51 0b19 	vmov	r0, r1, d9
 8014bf2:	f7eb fb4b 	bl	800028c <__adddf3>
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	460b      	mov	r3, r1
 8014bfa:	4640      	mov	r0, r8
 8014bfc:	4649      	mov	r1, r9
 8014bfe:	f7eb ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 8014c02:	2800      	cmp	r0, #0
 8014c04:	d173      	bne.n	8014cee <_dtoa_r+0x6e6>
 8014c06:	ec53 2b19 	vmov	r2, r3, d9
 8014c0a:	4914      	ldr	r1, [pc, #80]	; (8014c5c <_dtoa_r+0x654>)
 8014c0c:	2000      	movs	r0, #0
 8014c0e:	f7eb fb3b 	bl	8000288 <__aeabi_dsub>
 8014c12:	4602      	mov	r2, r0
 8014c14:	460b      	mov	r3, r1
 8014c16:	4640      	mov	r0, r8
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f7eb ff5f 	bl	8000adc <__aeabi_dcmplt>
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	f43f af2f 	beq.w	8014a82 <_dtoa_r+0x47a>
 8014c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014c26:	1e6b      	subs	r3, r5, #1
 8014c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014c2e:	2b30      	cmp	r3, #48	; 0x30
 8014c30:	d0f8      	beq.n	8014c24 <_dtoa_r+0x61c>
 8014c32:	46bb      	mov	fp, r7
 8014c34:	e04a      	b.n	8014ccc <_dtoa_r+0x6c4>
 8014c36:	4b06      	ldr	r3, [pc, #24]	; (8014c50 <_dtoa_r+0x648>)
 8014c38:	f7eb fcde 	bl	80005f8 <__aeabi_dmul>
 8014c3c:	4680      	mov	r8, r0
 8014c3e:	4689      	mov	r9, r1
 8014c40:	e7bd      	b.n	8014bbe <_dtoa_r+0x5b6>
 8014c42:	bf00      	nop
 8014c44:	080186c8 	.word	0x080186c8
 8014c48:	080186a0 	.word	0x080186a0
 8014c4c:	3ff00000 	.word	0x3ff00000
 8014c50:	40240000 	.word	0x40240000
 8014c54:	401c0000 	.word	0x401c0000
 8014c58:	40140000 	.word	0x40140000
 8014c5c:	3fe00000 	.word	0x3fe00000
 8014c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014c64:	9d00      	ldr	r5, [sp, #0]
 8014c66:	4642      	mov	r2, r8
 8014c68:	464b      	mov	r3, r9
 8014c6a:	4630      	mov	r0, r6
 8014c6c:	4639      	mov	r1, r7
 8014c6e:	f7eb fded 	bl	800084c <__aeabi_ddiv>
 8014c72:	f7eb ff71 	bl	8000b58 <__aeabi_d2iz>
 8014c76:	9001      	str	r0, [sp, #4]
 8014c78:	f7eb fc54 	bl	8000524 <__aeabi_i2d>
 8014c7c:	4642      	mov	r2, r8
 8014c7e:	464b      	mov	r3, r9
 8014c80:	f7eb fcba 	bl	80005f8 <__aeabi_dmul>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	4630      	mov	r0, r6
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	f7eb fafc 	bl	8000288 <__aeabi_dsub>
 8014c90:	9e01      	ldr	r6, [sp, #4]
 8014c92:	9f04      	ldr	r7, [sp, #16]
 8014c94:	3630      	adds	r6, #48	; 0x30
 8014c96:	f805 6b01 	strb.w	r6, [r5], #1
 8014c9a:	9e00      	ldr	r6, [sp, #0]
 8014c9c:	1bae      	subs	r6, r5, r6
 8014c9e:	42b7      	cmp	r7, r6
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	d134      	bne.n	8014d10 <_dtoa_r+0x708>
 8014ca6:	f7eb faf1 	bl	800028c <__adddf3>
 8014caa:	4642      	mov	r2, r8
 8014cac:	464b      	mov	r3, r9
 8014cae:	4606      	mov	r6, r0
 8014cb0:	460f      	mov	r7, r1
 8014cb2:	f7eb ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8014cb6:	b9c8      	cbnz	r0, 8014cec <_dtoa_r+0x6e4>
 8014cb8:	4642      	mov	r2, r8
 8014cba:	464b      	mov	r3, r9
 8014cbc:	4630      	mov	r0, r6
 8014cbe:	4639      	mov	r1, r7
 8014cc0:	f7eb ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cc4:	b110      	cbz	r0, 8014ccc <_dtoa_r+0x6c4>
 8014cc6:	9b01      	ldr	r3, [sp, #4]
 8014cc8:	07db      	lsls	r3, r3, #31
 8014cca:	d40f      	bmi.n	8014cec <_dtoa_r+0x6e4>
 8014ccc:	4651      	mov	r1, sl
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f000 ff36 	bl	8015b40 <_Bfree>
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014cd8:	702b      	strb	r3, [r5, #0]
 8014cda:	f10b 0301 	add.w	r3, fp, #1
 8014cde:	6013      	str	r3, [r2, #0]
 8014ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	f43f ace2 	beq.w	80146ac <_dtoa_r+0xa4>
 8014ce8:	601d      	str	r5, [r3, #0]
 8014cea:	e4df      	b.n	80146ac <_dtoa_r+0xa4>
 8014cec:	465f      	mov	r7, fp
 8014cee:	462b      	mov	r3, r5
 8014cf0:	461d      	mov	r5, r3
 8014cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014cf6:	2a39      	cmp	r2, #57	; 0x39
 8014cf8:	d106      	bne.n	8014d08 <_dtoa_r+0x700>
 8014cfa:	9a00      	ldr	r2, [sp, #0]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d1f7      	bne.n	8014cf0 <_dtoa_r+0x6e8>
 8014d00:	9900      	ldr	r1, [sp, #0]
 8014d02:	2230      	movs	r2, #48	; 0x30
 8014d04:	3701      	adds	r7, #1
 8014d06:	700a      	strb	r2, [r1, #0]
 8014d08:	781a      	ldrb	r2, [r3, #0]
 8014d0a:	3201      	adds	r2, #1
 8014d0c:	701a      	strb	r2, [r3, #0]
 8014d0e:	e790      	b.n	8014c32 <_dtoa_r+0x62a>
 8014d10:	4ba3      	ldr	r3, [pc, #652]	; (8014fa0 <_dtoa_r+0x998>)
 8014d12:	2200      	movs	r2, #0
 8014d14:	f7eb fc70 	bl	80005f8 <__aeabi_dmul>
 8014d18:	2200      	movs	r2, #0
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	4606      	mov	r6, r0
 8014d1e:	460f      	mov	r7, r1
 8014d20:	f7eb fed2 	bl	8000ac8 <__aeabi_dcmpeq>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	d09e      	beq.n	8014c66 <_dtoa_r+0x65e>
 8014d28:	e7d0      	b.n	8014ccc <_dtoa_r+0x6c4>
 8014d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	f000 80ca 	beq.w	8014ec6 <_dtoa_r+0x8be>
 8014d32:	9a07      	ldr	r2, [sp, #28]
 8014d34:	2a01      	cmp	r2, #1
 8014d36:	f300 80ad 	bgt.w	8014e94 <_dtoa_r+0x88c>
 8014d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d3c:	2a00      	cmp	r2, #0
 8014d3e:	f000 80a5 	beq.w	8014e8c <_dtoa_r+0x884>
 8014d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014d46:	9e08      	ldr	r6, [sp, #32]
 8014d48:	9d05      	ldr	r5, [sp, #20]
 8014d4a:	9a05      	ldr	r2, [sp, #20]
 8014d4c:	441a      	add	r2, r3
 8014d4e:	9205      	str	r2, [sp, #20]
 8014d50:	9a06      	ldr	r2, [sp, #24]
 8014d52:	2101      	movs	r1, #1
 8014d54:	441a      	add	r2, r3
 8014d56:	4620      	mov	r0, r4
 8014d58:	9206      	str	r2, [sp, #24]
 8014d5a:	f000 fff1 	bl	8015d40 <__i2b>
 8014d5e:	4607      	mov	r7, r0
 8014d60:	b165      	cbz	r5, 8014d7c <_dtoa_r+0x774>
 8014d62:	9b06      	ldr	r3, [sp, #24]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	dd09      	ble.n	8014d7c <_dtoa_r+0x774>
 8014d68:	42ab      	cmp	r3, r5
 8014d6a:	9a05      	ldr	r2, [sp, #20]
 8014d6c:	bfa8      	it	ge
 8014d6e:	462b      	movge	r3, r5
 8014d70:	1ad2      	subs	r2, r2, r3
 8014d72:	9205      	str	r2, [sp, #20]
 8014d74:	9a06      	ldr	r2, [sp, #24]
 8014d76:	1aed      	subs	r5, r5, r3
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	9306      	str	r3, [sp, #24]
 8014d7c:	9b08      	ldr	r3, [sp, #32]
 8014d7e:	b1f3      	cbz	r3, 8014dbe <_dtoa_r+0x7b6>
 8014d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	f000 80a3 	beq.w	8014ece <_dtoa_r+0x8c6>
 8014d88:	2e00      	cmp	r6, #0
 8014d8a:	dd10      	ble.n	8014dae <_dtoa_r+0x7a6>
 8014d8c:	4639      	mov	r1, r7
 8014d8e:	4632      	mov	r2, r6
 8014d90:	4620      	mov	r0, r4
 8014d92:	f001 f895 	bl	8015ec0 <__pow5mult>
 8014d96:	4652      	mov	r2, sl
 8014d98:	4601      	mov	r1, r0
 8014d9a:	4607      	mov	r7, r0
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f000 ffe5 	bl	8015d6c <__multiply>
 8014da2:	4651      	mov	r1, sl
 8014da4:	4680      	mov	r8, r0
 8014da6:	4620      	mov	r0, r4
 8014da8:	f000 feca 	bl	8015b40 <_Bfree>
 8014dac:	46c2      	mov	sl, r8
 8014dae:	9b08      	ldr	r3, [sp, #32]
 8014db0:	1b9a      	subs	r2, r3, r6
 8014db2:	d004      	beq.n	8014dbe <_dtoa_r+0x7b6>
 8014db4:	4651      	mov	r1, sl
 8014db6:	4620      	mov	r0, r4
 8014db8:	f001 f882 	bl	8015ec0 <__pow5mult>
 8014dbc:	4682      	mov	sl, r0
 8014dbe:	2101      	movs	r1, #1
 8014dc0:	4620      	mov	r0, r4
 8014dc2:	f000 ffbd 	bl	8015d40 <__i2b>
 8014dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	4606      	mov	r6, r0
 8014dcc:	f340 8081 	ble.w	8014ed2 <_dtoa_r+0x8ca>
 8014dd0:	461a      	mov	r2, r3
 8014dd2:	4601      	mov	r1, r0
 8014dd4:	4620      	mov	r0, r4
 8014dd6:	f001 f873 	bl	8015ec0 <__pow5mult>
 8014dda:	9b07      	ldr	r3, [sp, #28]
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	4606      	mov	r6, r0
 8014de0:	dd7a      	ble.n	8014ed8 <_dtoa_r+0x8d0>
 8014de2:	f04f 0800 	mov.w	r8, #0
 8014de6:	6933      	ldr	r3, [r6, #16]
 8014de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014dec:	6918      	ldr	r0, [r3, #16]
 8014dee:	f000 ff59 	bl	8015ca4 <__hi0bits>
 8014df2:	f1c0 0020 	rsb	r0, r0, #32
 8014df6:	9b06      	ldr	r3, [sp, #24]
 8014df8:	4418      	add	r0, r3
 8014dfa:	f010 001f 	ands.w	r0, r0, #31
 8014dfe:	f000 8094 	beq.w	8014f2a <_dtoa_r+0x922>
 8014e02:	f1c0 0320 	rsb	r3, r0, #32
 8014e06:	2b04      	cmp	r3, #4
 8014e08:	f340 8085 	ble.w	8014f16 <_dtoa_r+0x90e>
 8014e0c:	9b05      	ldr	r3, [sp, #20]
 8014e0e:	f1c0 001c 	rsb	r0, r0, #28
 8014e12:	4403      	add	r3, r0
 8014e14:	9305      	str	r3, [sp, #20]
 8014e16:	9b06      	ldr	r3, [sp, #24]
 8014e18:	4403      	add	r3, r0
 8014e1a:	4405      	add	r5, r0
 8014e1c:	9306      	str	r3, [sp, #24]
 8014e1e:	9b05      	ldr	r3, [sp, #20]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	dd05      	ble.n	8014e30 <_dtoa_r+0x828>
 8014e24:	4651      	mov	r1, sl
 8014e26:	461a      	mov	r2, r3
 8014e28:	4620      	mov	r0, r4
 8014e2a:	f001 f8a3 	bl	8015f74 <__lshift>
 8014e2e:	4682      	mov	sl, r0
 8014e30:	9b06      	ldr	r3, [sp, #24]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	dd05      	ble.n	8014e42 <_dtoa_r+0x83a>
 8014e36:	4631      	mov	r1, r6
 8014e38:	461a      	mov	r2, r3
 8014e3a:	4620      	mov	r0, r4
 8014e3c:	f001 f89a 	bl	8015f74 <__lshift>
 8014e40:	4606      	mov	r6, r0
 8014e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d072      	beq.n	8014f2e <_dtoa_r+0x926>
 8014e48:	4631      	mov	r1, r6
 8014e4a:	4650      	mov	r0, sl
 8014e4c:	f001 f8fe 	bl	801604c <__mcmp>
 8014e50:	2800      	cmp	r0, #0
 8014e52:	da6c      	bge.n	8014f2e <_dtoa_r+0x926>
 8014e54:	2300      	movs	r3, #0
 8014e56:	4651      	mov	r1, sl
 8014e58:	220a      	movs	r2, #10
 8014e5a:	4620      	mov	r0, r4
 8014e5c:	f000 fe92 	bl	8015b84 <__multadd>
 8014e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e66:	4682      	mov	sl, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	f000 81b0 	beq.w	80151ce <_dtoa_r+0xbc6>
 8014e6e:	2300      	movs	r3, #0
 8014e70:	4639      	mov	r1, r7
 8014e72:	220a      	movs	r2, #10
 8014e74:	4620      	mov	r0, r4
 8014e76:	f000 fe85 	bl	8015b84 <__multadd>
 8014e7a:	9b01      	ldr	r3, [sp, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	4607      	mov	r7, r0
 8014e80:	f300 8096 	bgt.w	8014fb0 <_dtoa_r+0x9a8>
 8014e84:	9b07      	ldr	r3, [sp, #28]
 8014e86:	2b02      	cmp	r3, #2
 8014e88:	dc59      	bgt.n	8014f3e <_dtoa_r+0x936>
 8014e8a:	e091      	b.n	8014fb0 <_dtoa_r+0x9a8>
 8014e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014e92:	e758      	b.n	8014d46 <_dtoa_r+0x73e>
 8014e94:	9b04      	ldr	r3, [sp, #16]
 8014e96:	1e5e      	subs	r6, r3, #1
 8014e98:	9b08      	ldr	r3, [sp, #32]
 8014e9a:	42b3      	cmp	r3, r6
 8014e9c:	bfbf      	itttt	lt
 8014e9e:	9b08      	ldrlt	r3, [sp, #32]
 8014ea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8014ea2:	9608      	strlt	r6, [sp, #32]
 8014ea4:	1af3      	sublt	r3, r6, r3
 8014ea6:	bfb4      	ite	lt
 8014ea8:	18d2      	addlt	r2, r2, r3
 8014eaa:	1b9e      	subge	r6, r3, r6
 8014eac:	9b04      	ldr	r3, [sp, #16]
 8014eae:	bfbc      	itt	lt
 8014eb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014eb2:	2600      	movlt	r6, #0
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	bfb7      	itett	lt
 8014eb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014ebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014ec0:	1a9d      	sublt	r5, r3, r2
 8014ec2:	2300      	movlt	r3, #0
 8014ec4:	e741      	b.n	8014d4a <_dtoa_r+0x742>
 8014ec6:	9e08      	ldr	r6, [sp, #32]
 8014ec8:	9d05      	ldr	r5, [sp, #20]
 8014eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014ecc:	e748      	b.n	8014d60 <_dtoa_r+0x758>
 8014ece:	9a08      	ldr	r2, [sp, #32]
 8014ed0:	e770      	b.n	8014db4 <_dtoa_r+0x7ac>
 8014ed2:	9b07      	ldr	r3, [sp, #28]
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	dc19      	bgt.n	8014f0c <_dtoa_r+0x904>
 8014ed8:	9b02      	ldr	r3, [sp, #8]
 8014eda:	b9bb      	cbnz	r3, 8014f0c <_dtoa_r+0x904>
 8014edc:	9b03      	ldr	r3, [sp, #12]
 8014ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014ee2:	b99b      	cbnz	r3, 8014f0c <_dtoa_r+0x904>
 8014ee4:	9b03      	ldr	r3, [sp, #12]
 8014ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014eea:	0d1b      	lsrs	r3, r3, #20
 8014eec:	051b      	lsls	r3, r3, #20
 8014eee:	b183      	cbz	r3, 8014f12 <_dtoa_r+0x90a>
 8014ef0:	9b05      	ldr	r3, [sp, #20]
 8014ef2:	3301      	adds	r3, #1
 8014ef4:	9305      	str	r3, [sp, #20]
 8014ef6:	9b06      	ldr	r3, [sp, #24]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	9306      	str	r3, [sp, #24]
 8014efc:	f04f 0801 	mov.w	r8, #1
 8014f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	f47f af6f 	bne.w	8014de6 <_dtoa_r+0x7de>
 8014f08:	2001      	movs	r0, #1
 8014f0a:	e774      	b.n	8014df6 <_dtoa_r+0x7ee>
 8014f0c:	f04f 0800 	mov.w	r8, #0
 8014f10:	e7f6      	b.n	8014f00 <_dtoa_r+0x8f8>
 8014f12:	4698      	mov	r8, r3
 8014f14:	e7f4      	b.n	8014f00 <_dtoa_r+0x8f8>
 8014f16:	d082      	beq.n	8014e1e <_dtoa_r+0x816>
 8014f18:	9a05      	ldr	r2, [sp, #20]
 8014f1a:	331c      	adds	r3, #28
 8014f1c:	441a      	add	r2, r3
 8014f1e:	9205      	str	r2, [sp, #20]
 8014f20:	9a06      	ldr	r2, [sp, #24]
 8014f22:	441a      	add	r2, r3
 8014f24:	441d      	add	r5, r3
 8014f26:	9206      	str	r2, [sp, #24]
 8014f28:	e779      	b.n	8014e1e <_dtoa_r+0x816>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	e7f4      	b.n	8014f18 <_dtoa_r+0x910>
 8014f2e:	9b04      	ldr	r3, [sp, #16]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	dc37      	bgt.n	8014fa4 <_dtoa_r+0x99c>
 8014f34:	9b07      	ldr	r3, [sp, #28]
 8014f36:	2b02      	cmp	r3, #2
 8014f38:	dd34      	ble.n	8014fa4 <_dtoa_r+0x99c>
 8014f3a:	9b04      	ldr	r3, [sp, #16]
 8014f3c:	9301      	str	r3, [sp, #4]
 8014f3e:	9b01      	ldr	r3, [sp, #4]
 8014f40:	b963      	cbnz	r3, 8014f5c <_dtoa_r+0x954>
 8014f42:	4631      	mov	r1, r6
 8014f44:	2205      	movs	r2, #5
 8014f46:	4620      	mov	r0, r4
 8014f48:	f000 fe1c 	bl	8015b84 <__multadd>
 8014f4c:	4601      	mov	r1, r0
 8014f4e:	4606      	mov	r6, r0
 8014f50:	4650      	mov	r0, sl
 8014f52:	f001 f87b 	bl	801604c <__mcmp>
 8014f56:	2800      	cmp	r0, #0
 8014f58:	f73f adbb 	bgt.w	8014ad2 <_dtoa_r+0x4ca>
 8014f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f5e:	9d00      	ldr	r5, [sp, #0]
 8014f60:	ea6f 0b03 	mvn.w	fp, r3
 8014f64:	f04f 0800 	mov.w	r8, #0
 8014f68:	4631      	mov	r1, r6
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	f000 fde8 	bl	8015b40 <_Bfree>
 8014f70:	2f00      	cmp	r7, #0
 8014f72:	f43f aeab 	beq.w	8014ccc <_dtoa_r+0x6c4>
 8014f76:	f1b8 0f00 	cmp.w	r8, #0
 8014f7a:	d005      	beq.n	8014f88 <_dtoa_r+0x980>
 8014f7c:	45b8      	cmp	r8, r7
 8014f7e:	d003      	beq.n	8014f88 <_dtoa_r+0x980>
 8014f80:	4641      	mov	r1, r8
 8014f82:	4620      	mov	r0, r4
 8014f84:	f000 fddc 	bl	8015b40 <_Bfree>
 8014f88:	4639      	mov	r1, r7
 8014f8a:	4620      	mov	r0, r4
 8014f8c:	f000 fdd8 	bl	8015b40 <_Bfree>
 8014f90:	e69c      	b.n	8014ccc <_dtoa_r+0x6c4>
 8014f92:	2600      	movs	r6, #0
 8014f94:	4637      	mov	r7, r6
 8014f96:	e7e1      	b.n	8014f5c <_dtoa_r+0x954>
 8014f98:	46bb      	mov	fp, r7
 8014f9a:	4637      	mov	r7, r6
 8014f9c:	e599      	b.n	8014ad2 <_dtoa_r+0x4ca>
 8014f9e:	bf00      	nop
 8014fa0:	40240000 	.word	0x40240000
 8014fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	f000 80c8 	beq.w	801513c <_dtoa_r+0xb34>
 8014fac:	9b04      	ldr	r3, [sp, #16]
 8014fae:	9301      	str	r3, [sp, #4]
 8014fb0:	2d00      	cmp	r5, #0
 8014fb2:	dd05      	ble.n	8014fc0 <_dtoa_r+0x9b8>
 8014fb4:	4639      	mov	r1, r7
 8014fb6:	462a      	mov	r2, r5
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f000 ffdb 	bl	8015f74 <__lshift>
 8014fbe:	4607      	mov	r7, r0
 8014fc0:	f1b8 0f00 	cmp.w	r8, #0
 8014fc4:	d05b      	beq.n	801507e <_dtoa_r+0xa76>
 8014fc6:	6879      	ldr	r1, [r7, #4]
 8014fc8:	4620      	mov	r0, r4
 8014fca:	f000 fd79 	bl	8015ac0 <_Balloc>
 8014fce:	4605      	mov	r5, r0
 8014fd0:	b928      	cbnz	r0, 8014fde <_dtoa_r+0x9d6>
 8014fd2:	4b83      	ldr	r3, [pc, #524]	; (80151e0 <_dtoa_r+0xbd8>)
 8014fd4:	4602      	mov	r2, r0
 8014fd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014fda:	f7ff bb2e 	b.w	801463a <_dtoa_r+0x32>
 8014fde:	693a      	ldr	r2, [r7, #16]
 8014fe0:	3202      	adds	r2, #2
 8014fe2:	0092      	lsls	r2, r2, #2
 8014fe4:	f107 010c 	add.w	r1, r7, #12
 8014fe8:	300c      	adds	r0, #12
 8014fea:	f7ff fa64 	bl	80144b6 <memcpy>
 8014fee:	2201      	movs	r2, #1
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	f000 ffbe 	bl	8015f74 <__lshift>
 8014ff8:	9b00      	ldr	r3, [sp, #0]
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	9304      	str	r3, [sp, #16]
 8014ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015002:	4413      	add	r3, r2
 8015004:	9308      	str	r3, [sp, #32]
 8015006:	9b02      	ldr	r3, [sp, #8]
 8015008:	f003 0301 	and.w	r3, r3, #1
 801500c:	46b8      	mov	r8, r7
 801500e:	9306      	str	r3, [sp, #24]
 8015010:	4607      	mov	r7, r0
 8015012:	9b04      	ldr	r3, [sp, #16]
 8015014:	4631      	mov	r1, r6
 8015016:	3b01      	subs	r3, #1
 8015018:	4650      	mov	r0, sl
 801501a:	9301      	str	r3, [sp, #4]
 801501c:	f7ff fa6a 	bl	80144f4 <quorem>
 8015020:	4641      	mov	r1, r8
 8015022:	9002      	str	r0, [sp, #8]
 8015024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015028:	4650      	mov	r0, sl
 801502a:	f001 f80f 	bl	801604c <__mcmp>
 801502e:	463a      	mov	r2, r7
 8015030:	9005      	str	r0, [sp, #20]
 8015032:	4631      	mov	r1, r6
 8015034:	4620      	mov	r0, r4
 8015036:	f001 f825 	bl	8016084 <__mdiff>
 801503a:	68c2      	ldr	r2, [r0, #12]
 801503c:	4605      	mov	r5, r0
 801503e:	bb02      	cbnz	r2, 8015082 <_dtoa_r+0xa7a>
 8015040:	4601      	mov	r1, r0
 8015042:	4650      	mov	r0, sl
 8015044:	f001 f802 	bl	801604c <__mcmp>
 8015048:	4602      	mov	r2, r0
 801504a:	4629      	mov	r1, r5
 801504c:	4620      	mov	r0, r4
 801504e:	9209      	str	r2, [sp, #36]	; 0x24
 8015050:	f000 fd76 	bl	8015b40 <_Bfree>
 8015054:	9b07      	ldr	r3, [sp, #28]
 8015056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015058:	9d04      	ldr	r5, [sp, #16]
 801505a:	ea43 0102 	orr.w	r1, r3, r2
 801505e:	9b06      	ldr	r3, [sp, #24]
 8015060:	4319      	orrs	r1, r3
 8015062:	d110      	bne.n	8015086 <_dtoa_r+0xa7e>
 8015064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015068:	d029      	beq.n	80150be <_dtoa_r+0xab6>
 801506a:	9b05      	ldr	r3, [sp, #20]
 801506c:	2b00      	cmp	r3, #0
 801506e:	dd02      	ble.n	8015076 <_dtoa_r+0xa6e>
 8015070:	9b02      	ldr	r3, [sp, #8]
 8015072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8015076:	9b01      	ldr	r3, [sp, #4]
 8015078:	f883 9000 	strb.w	r9, [r3]
 801507c:	e774      	b.n	8014f68 <_dtoa_r+0x960>
 801507e:	4638      	mov	r0, r7
 8015080:	e7ba      	b.n	8014ff8 <_dtoa_r+0x9f0>
 8015082:	2201      	movs	r2, #1
 8015084:	e7e1      	b.n	801504a <_dtoa_r+0xa42>
 8015086:	9b05      	ldr	r3, [sp, #20]
 8015088:	2b00      	cmp	r3, #0
 801508a:	db04      	blt.n	8015096 <_dtoa_r+0xa8e>
 801508c:	9907      	ldr	r1, [sp, #28]
 801508e:	430b      	orrs	r3, r1
 8015090:	9906      	ldr	r1, [sp, #24]
 8015092:	430b      	orrs	r3, r1
 8015094:	d120      	bne.n	80150d8 <_dtoa_r+0xad0>
 8015096:	2a00      	cmp	r2, #0
 8015098:	dded      	ble.n	8015076 <_dtoa_r+0xa6e>
 801509a:	4651      	mov	r1, sl
 801509c:	2201      	movs	r2, #1
 801509e:	4620      	mov	r0, r4
 80150a0:	f000 ff68 	bl	8015f74 <__lshift>
 80150a4:	4631      	mov	r1, r6
 80150a6:	4682      	mov	sl, r0
 80150a8:	f000 ffd0 	bl	801604c <__mcmp>
 80150ac:	2800      	cmp	r0, #0
 80150ae:	dc03      	bgt.n	80150b8 <_dtoa_r+0xab0>
 80150b0:	d1e1      	bne.n	8015076 <_dtoa_r+0xa6e>
 80150b2:	f019 0f01 	tst.w	r9, #1
 80150b6:	d0de      	beq.n	8015076 <_dtoa_r+0xa6e>
 80150b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80150bc:	d1d8      	bne.n	8015070 <_dtoa_r+0xa68>
 80150be:	9a01      	ldr	r2, [sp, #4]
 80150c0:	2339      	movs	r3, #57	; 0x39
 80150c2:	7013      	strb	r3, [r2, #0]
 80150c4:	462b      	mov	r3, r5
 80150c6:	461d      	mov	r5, r3
 80150c8:	3b01      	subs	r3, #1
 80150ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80150ce:	2a39      	cmp	r2, #57	; 0x39
 80150d0:	d06c      	beq.n	80151ac <_dtoa_r+0xba4>
 80150d2:	3201      	adds	r2, #1
 80150d4:	701a      	strb	r2, [r3, #0]
 80150d6:	e747      	b.n	8014f68 <_dtoa_r+0x960>
 80150d8:	2a00      	cmp	r2, #0
 80150da:	dd07      	ble.n	80150ec <_dtoa_r+0xae4>
 80150dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80150e0:	d0ed      	beq.n	80150be <_dtoa_r+0xab6>
 80150e2:	9a01      	ldr	r2, [sp, #4]
 80150e4:	f109 0301 	add.w	r3, r9, #1
 80150e8:	7013      	strb	r3, [r2, #0]
 80150ea:	e73d      	b.n	8014f68 <_dtoa_r+0x960>
 80150ec:	9b04      	ldr	r3, [sp, #16]
 80150ee:	9a08      	ldr	r2, [sp, #32]
 80150f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80150f4:	4293      	cmp	r3, r2
 80150f6:	d043      	beq.n	8015180 <_dtoa_r+0xb78>
 80150f8:	4651      	mov	r1, sl
 80150fa:	2300      	movs	r3, #0
 80150fc:	220a      	movs	r2, #10
 80150fe:	4620      	mov	r0, r4
 8015100:	f000 fd40 	bl	8015b84 <__multadd>
 8015104:	45b8      	cmp	r8, r7
 8015106:	4682      	mov	sl, r0
 8015108:	f04f 0300 	mov.w	r3, #0
 801510c:	f04f 020a 	mov.w	r2, #10
 8015110:	4641      	mov	r1, r8
 8015112:	4620      	mov	r0, r4
 8015114:	d107      	bne.n	8015126 <_dtoa_r+0xb1e>
 8015116:	f000 fd35 	bl	8015b84 <__multadd>
 801511a:	4680      	mov	r8, r0
 801511c:	4607      	mov	r7, r0
 801511e:	9b04      	ldr	r3, [sp, #16]
 8015120:	3301      	adds	r3, #1
 8015122:	9304      	str	r3, [sp, #16]
 8015124:	e775      	b.n	8015012 <_dtoa_r+0xa0a>
 8015126:	f000 fd2d 	bl	8015b84 <__multadd>
 801512a:	4639      	mov	r1, r7
 801512c:	4680      	mov	r8, r0
 801512e:	2300      	movs	r3, #0
 8015130:	220a      	movs	r2, #10
 8015132:	4620      	mov	r0, r4
 8015134:	f000 fd26 	bl	8015b84 <__multadd>
 8015138:	4607      	mov	r7, r0
 801513a:	e7f0      	b.n	801511e <_dtoa_r+0xb16>
 801513c:	9b04      	ldr	r3, [sp, #16]
 801513e:	9301      	str	r3, [sp, #4]
 8015140:	9d00      	ldr	r5, [sp, #0]
 8015142:	4631      	mov	r1, r6
 8015144:	4650      	mov	r0, sl
 8015146:	f7ff f9d5 	bl	80144f4 <quorem>
 801514a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801514e:	9b00      	ldr	r3, [sp, #0]
 8015150:	f805 9b01 	strb.w	r9, [r5], #1
 8015154:	1aea      	subs	r2, r5, r3
 8015156:	9b01      	ldr	r3, [sp, #4]
 8015158:	4293      	cmp	r3, r2
 801515a:	dd07      	ble.n	801516c <_dtoa_r+0xb64>
 801515c:	4651      	mov	r1, sl
 801515e:	2300      	movs	r3, #0
 8015160:	220a      	movs	r2, #10
 8015162:	4620      	mov	r0, r4
 8015164:	f000 fd0e 	bl	8015b84 <__multadd>
 8015168:	4682      	mov	sl, r0
 801516a:	e7ea      	b.n	8015142 <_dtoa_r+0xb3a>
 801516c:	9b01      	ldr	r3, [sp, #4]
 801516e:	2b00      	cmp	r3, #0
 8015170:	bfc8      	it	gt
 8015172:	461d      	movgt	r5, r3
 8015174:	9b00      	ldr	r3, [sp, #0]
 8015176:	bfd8      	it	le
 8015178:	2501      	movle	r5, #1
 801517a:	441d      	add	r5, r3
 801517c:	f04f 0800 	mov.w	r8, #0
 8015180:	4651      	mov	r1, sl
 8015182:	2201      	movs	r2, #1
 8015184:	4620      	mov	r0, r4
 8015186:	f000 fef5 	bl	8015f74 <__lshift>
 801518a:	4631      	mov	r1, r6
 801518c:	4682      	mov	sl, r0
 801518e:	f000 ff5d 	bl	801604c <__mcmp>
 8015192:	2800      	cmp	r0, #0
 8015194:	dc96      	bgt.n	80150c4 <_dtoa_r+0xabc>
 8015196:	d102      	bne.n	801519e <_dtoa_r+0xb96>
 8015198:	f019 0f01 	tst.w	r9, #1
 801519c:	d192      	bne.n	80150c4 <_dtoa_r+0xabc>
 801519e:	462b      	mov	r3, r5
 80151a0:	461d      	mov	r5, r3
 80151a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80151a6:	2a30      	cmp	r2, #48	; 0x30
 80151a8:	d0fa      	beq.n	80151a0 <_dtoa_r+0xb98>
 80151aa:	e6dd      	b.n	8014f68 <_dtoa_r+0x960>
 80151ac:	9a00      	ldr	r2, [sp, #0]
 80151ae:	429a      	cmp	r2, r3
 80151b0:	d189      	bne.n	80150c6 <_dtoa_r+0xabe>
 80151b2:	f10b 0b01 	add.w	fp, fp, #1
 80151b6:	2331      	movs	r3, #49	; 0x31
 80151b8:	e796      	b.n	80150e8 <_dtoa_r+0xae0>
 80151ba:	4b0a      	ldr	r3, [pc, #40]	; (80151e4 <_dtoa_r+0xbdc>)
 80151bc:	f7ff ba99 	b.w	80146f2 <_dtoa_r+0xea>
 80151c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f47f aa6d 	bne.w	80146a2 <_dtoa_r+0x9a>
 80151c8:	4b07      	ldr	r3, [pc, #28]	; (80151e8 <_dtoa_r+0xbe0>)
 80151ca:	f7ff ba92 	b.w	80146f2 <_dtoa_r+0xea>
 80151ce:	9b01      	ldr	r3, [sp, #4]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	dcb5      	bgt.n	8015140 <_dtoa_r+0xb38>
 80151d4:	9b07      	ldr	r3, [sp, #28]
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	f73f aeb1 	bgt.w	8014f3e <_dtoa_r+0x936>
 80151dc:	e7b0      	b.n	8015140 <_dtoa_r+0xb38>
 80151de:	bf00      	nop
 80151e0:	080185d3 	.word	0x080185d3
 80151e4:	080188c4 	.word	0x080188c4
 80151e8:	08018557 	.word	0x08018557

080151ec <_free_r>:
 80151ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151ee:	2900      	cmp	r1, #0
 80151f0:	d044      	beq.n	801527c <_free_r+0x90>
 80151f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151f6:	9001      	str	r0, [sp, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	f1a1 0404 	sub.w	r4, r1, #4
 80151fe:	bfb8      	it	lt
 8015200:	18e4      	addlt	r4, r4, r3
 8015202:	f000 fc51 	bl	8015aa8 <__malloc_lock>
 8015206:	4a1e      	ldr	r2, [pc, #120]	; (8015280 <_free_r+0x94>)
 8015208:	9801      	ldr	r0, [sp, #4]
 801520a:	6813      	ldr	r3, [r2, #0]
 801520c:	b933      	cbnz	r3, 801521c <_free_r+0x30>
 801520e:	6063      	str	r3, [r4, #4]
 8015210:	6014      	str	r4, [r2, #0]
 8015212:	b003      	add	sp, #12
 8015214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015218:	f000 bc4c 	b.w	8015ab4 <__malloc_unlock>
 801521c:	42a3      	cmp	r3, r4
 801521e:	d908      	bls.n	8015232 <_free_r+0x46>
 8015220:	6825      	ldr	r5, [r4, #0]
 8015222:	1961      	adds	r1, r4, r5
 8015224:	428b      	cmp	r3, r1
 8015226:	bf01      	itttt	eq
 8015228:	6819      	ldreq	r1, [r3, #0]
 801522a:	685b      	ldreq	r3, [r3, #4]
 801522c:	1949      	addeq	r1, r1, r5
 801522e:	6021      	streq	r1, [r4, #0]
 8015230:	e7ed      	b.n	801520e <_free_r+0x22>
 8015232:	461a      	mov	r2, r3
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	b10b      	cbz	r3, 801523c <_free_r+0x50>
 8015238:	42a3      	cmp	r3, r4
 801523a:	d9fa      	bls.n	8015232 <_free_r+0x46>
 801523c:	6811      	ldr	r1, [r2, #0]
 801523e:	1855      	adds	r5, r2, r1
 8015240:	42a5      	cmp	r5, r4
 8015242:	d10b      	bne.n	801525c <_free_r+0x70>
 8015244:	6824      	ldr	r4, [r4, #0]
 8015246:	4421      	add	r1, r4
 8015248:	1854      	adds	r4, r2, r1
 801524a:	42a3      	cmp	r3, r4
 801524c:	6011      	str	r1, [r2, #0]
 801524e:	d1e0      	bne.n	8015212 <_free_r+0x26>
 8015250:	681c      	ldr	r4, [r3, #0]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	6053      	str	r3, [r2, #4]
 8015256:	440c      	add	r4, r1
 8015258:	6014      	str	r4, [r2, #0]
 801525a:	e7da      	b.n	8015212 <_free_r+0x26>
 801525c:	d902      	bls.n	8015264 <_free_r+0x78>
 801525e:	230c      	movs	r3, #12
 8015260:	6003      	str	r3, [r0, #0]
 8015262:	e7d6      	b.n	8015212 <_free_r+0x26>
 8015264:	6825      	ldr	r5, [r4, #0]
 8015266:	1961      	adds	r1, r4, r5
 8015268:	428b      	cmp	r3, r1
 801526a:	bf04      	itt	eq
 801526c:	6819      	ldreq	r1, [r3, #0]
 801526e:	685b      	ldreq	r3, [r3, #4]
 8015270:	6063      	str	r3, [r4, #4]
 8015272:	bf04      	itt	eq
 8015274:	1949      	addeq	r1, r1, r5
 8015276:	6021      	streq	r1, [r4, #0]
 8015278:	6054      	str	r4, [r2, #4]
 801527a:	e7ca      	b.n	8015212 <_free_r+0x26>
 801527c:	b003      	add	sp, #12
 801527e:	bd30      	pop	{r4, r5, pc}
 8015280:	20007534 	.word	0x20007534

08015284 <rshift>:
 8015284:	6903      	ldr	r3, [r0, #16]
 8015286:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801528a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801528e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015292:	f100 0414 	add.w	r4, r0, #20
 8015296:	dd45      	ble.n	8015324 <rshift+0xa0>
 8015298:	f011 011f 	ands.w	r1, r1, #31
 801529c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80152a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80152a4:	d10c      	bne.n	80152c0 <rshift+0x3c>
 80152a6:	f100 0710 	add.w	r7, r0, #16
 80152aa:	4629      	mov	r1, r5
 80152ac:	42b1      	cmp	r1, r6
 80152ae:	d334      	bcc.n	801531a <rshift+0x96>
 80152b0:	1a9b      	subs	r3, r3, r2
 80152b2:	009b      	lsls	r3, r3, #2
 80152b4:	1eea      	subs	r2, r5, #3
 80152b6:	4296      	cmp	r6, r2
 80152b8:	bf38      	it	cc
 80152ba:	2300      	movcc	r3, #0
 80152bc:	4423      	add	r3, r4
 80152be:	e015      	b.n	80152ec <rshift+0x68>
 80152c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80152c4:	f1c1 0820 	rsb	r8, r1, #32
 80152c8:	40cf      	lsrs	r7, r1
 80152ca:	f105 0e04 	add.w	lr, r5, #4
 80152ce:	46a1      	mov	r9, r4
 80152d0:	4576      	cmp	r6, lr
 80152d2:	46f4      	mov	ip, lr
 80152d4:	d815      	bhi.n	8015302 <rshift+0x7e>
 80152d6:	1a9a      	subs	r2, r3, r2
 80152d8:	0092      	lsls	r2, r2, #2
 80152da:	3a04      	subs	r2, #4
 80152dc:	3501      	adds	r5, #1
 80152de:	42ae      	cmp	r6, r5
 80152e0:	bf38      	it	cc
 80152e2:	2200      	movcc	r2, #0
 80152e4:	18a3      	adds	r3, r4, r2
 80152e6:	50a7      	str	r7, [r4, r2]
 80152e8:	b107      	cbz	r7, 80152ec <rshift+0x68>
 80152ea:	3304      	adds	r3, #4
 80152ec:	1b1a      	subs	r2, r3, r4
 80152ee:	42a3      	cmp	r3, r4
 80152f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80152f4:	bf08      	it	eq
 80152f6:	2300      	moveq	r3, #0
 80152f8:	6102      	str	r2, [r0, #16]
 80152fa:	bf08      	it	eq
 80152fc:	6143      	streq	r3, [r0, #20]
 80152fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015302:	f8dc c000 	ldr.w	ip, [ip]
 8015306:	fa0c fc08 	lsl.w	ip, ip, r8
 801530a:	ea4c 0707 	orr.w	r7, ip, r7
 801530e:	f849 7b04 	str.w	r7, [r9], #4
 8015312:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015316:	40cf      	lsrs	r7, r1
 8015318:	e7da      	b.n	80152d0 <rshift+0x4c>
 801531a:	f851 cb04 	ldr.w	ip, [r1], #4
 801531e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015322:	e7c3      	b.n	80152ac <rshift+0x28>
 8015324:	4623      	mov	r3, r4
 8015326:	e7e1      	b.n	80152ec <rshift+0x68>

08015328 <__hexdig_fun>:
 8015328:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801532c:	2b09      	cmp	r3, #9
 801532e:	d802      	bhi.n	8015336 <__hexdig_fun+0xe>
 8015330:	3820      	subs	r0, #32
 8015332:	b2c0      	uxtb	r0, r0
 8015334:	4770      	bx	lr
 8015336:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801533a:	2b05      	cmp	r3, #5
 801533c:	d801      	bhi.n	8015342 <__hexdig_fun+0x1a>
 801533e:	3847      	subs	r0, #71	; 0x47
 8015340:	e7f7      	b.n	8015332 <__hexdig_fun+0xa>
 8015342:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015346:	2b05      	cmp	r3, #5
 8015348:	d801      	bhi.n	801534e <__hexdig_fun+0x26>
 801534a:	3827      	subs	r0, #39	; 0x27
 801534c:	e7f1      	b.n	8015332 <__hexdig_fun+0xa>
 801534e:	2000      	movs	r0, #0
 8015350:	4770      	bx	lr
	...

08015354 <__gethex>:
 8015354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015358:	4617      	mov	r7, r2
 801535a:	680a      	ldr	r2, [r1, #0]
 801535c:	b085      	sub	sp, #20
 801535e:	f102 0b02 	add.w	fp, r2, #2
 8015362:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015366:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801536a:	4681      	mov	r9, r0
 801536c:	468a      	mov	sl, r1
 801536e:	9302      	str	r3, [sp, #8]
 8015370:	32fe      	adds	r2, #254	; 0xfe
 8015372:	eb02 030b 	add.w	r3, r2, fp
 8015376:	46d8      	mov	r8, fp
 8015378:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	2830      	cmp	r0, #48	; 0x30
 8015380:	d0f7      	beq.n	8015372 <__gethex+0x1e>
 8015382:	f7ff ffd1 	bl	8015328 <__hexdig_fun>
 8015386:	4604      	mov	r4, r0
 8015388:	2800      	cmp	r0, #0
 801538a:	d138      	bne.n	80153fe <__gethex+0xaa>
 801538c:	49a7      	ldr	r1, [pc, #668]	; (801562c <__gethex+0x2d8>)
 801538e:	2201      	movs	r2, #1
 8015390:	4640      	mov	r0, r8
 8015392:	f7fe fff4 	bl	801437e <strncmp>
 8015396:	4606      	mov	r6, r0
 8015398:	2800      	cmp	r0, #0
 801539a:	d169      	bne.n	8015470 <__gethex+0x11c>
 801539c:	f898 0001 	ldrb.w	r0, [r8, #1]
 80153a0:	465d      	mov	r5, fp
 80153a2:	f7ff ffc1 	bl	8015328 <__hexdig_fun>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d064      	beq.n	8015474 <__gethex+0x120>
 80153aa:	465a      	mov	r2, fp
 80153ac:	7810      	ldrb	r0, [r2, #0]
 80153ae:	2830      	cmp	r0, #48	; 0x30
 80153b0:	4690      	mov	r8, r2
 80153b2:	f102 0201 	add.w	r2, r2, #1
 80153b6:	d0f9      	beq.n	80153ac <__gethex+0x58>
 80153b8:	f7ff ffb6 	bl	8015328 <__hexdig_fun>
 80153bc:	2301      	movs	r3, #1
 80153be:	fab0 f480 	clz	r4, r0
 80153c2:	0964      	lsrs	r4, r4, #5
 80153c4:	465e      	mov	r6, fp
 80153c6:	9301      	str	r3, [sp, #4]
 80153c8:	4642      	mov	r2, r8
 80153ca:	4615      	mov	r5, r2
 80153cc:	3201      	adds	r2, #1
 80153ce:	7828      	ldrb	r0, [r5, #0]
 80153d0:	f7ff ffaa 	bl	8015328 <__hexdig_fun>
 80153d4:	2800      	cmp	r0, #0
 80153d6:	d1f8      	bne.n	80153ca <__gethex+0x76>
 80153d8:	4994      	ldr	r1, [pc, #592]	; (801562c <__gethex+0x2d8>)
 80153da:	2201      	movs	r2, #1
 80153dc:	4628      	mov	r0, r5
 80153de:	f7fe ffce 	bl	801437e <strncmp>
 80153e2:	b978      	cbnz	r0, 8015404 <__gethex+0xb0>
 80153e4:	b946      	cbnz	r6, 80153f8 <__gethex+0xa4>
 80153e6:	1c6e      	adds	r6, r5, #1
 80153e8:	4632      	mov	r2, r6
 80153ea:	4615      	mov	r5, r2
 80153ec:	3201      	adds	r2, #1
 80153ee:	7828      	ldrb	r0, [r5, #0]
 80153f0:	f7ff ff9a 	bl	8015328 <__hexdig_fun>
 80153f4:	2800      	cmp	r0, #0
 80153f6:	d1f8      	bne.n	80153ea <__gethex+0x96>
 80153f8:	1b73      	subs	r3, r6, r5
 80153fa:	009e      	lsls	r6, r3, #2
 80153fc:	e004      	b.n	8015408 <__gethex+0xb4>
 80153fe:	2400      	movs	r4, #0
 8015400:	4626      	mov	r6, r4
 8015402:	e7e1      	b.n	80153c8 <__gethex+0x74>
 8015404:	2e00      	cmp	r6, #0
 8015406:	d1f7      	bne.n	80153f8 <__gethex+0xa4>
 8015408:	782b      	ldrb	r3, [r5, #0]
 801540a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801540e:	2b50      	cmp	r3, #80	; 0x50
 8015410:	d13d      	bne.n	801548e <__gethex+0x13a>
 8015412:	786b      	ldrb	r3, [r5, #1]
 8015414:	2b2b      	cmp	r3, #43	; 0x2b
 8015416:	d02f      	beq.n	8015478 <__gethex+0x124>
 8015418:	2b2d      	cmp	r3, #45	; 0x2d
 801541a:	d031      	beq.n	8015480 <__gethex+0x12c>
 801541c:	1c69      	adds	r1, r5, #1
 801541e:	f04f 0b00 	mov.w	fp, #0
 8015422:	7808      	ldrb	r0, [r1, #0]
 8015424:	f7ff ff80 	bl	8015328 <__hexdig_fun>
 8015428:	1e42      	subs	r2, r0, #1
 801542a:	b2d2      	uxtb	r2, r2
 801542c:	2a18      	cmp	r2, #24
 801542e:	d82e      	bhi.n	801548e <__gethex+0x13a>
 8015430:	f1a0 0210 	sub.w	r2, r0, #16
 8015434:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015438:	f7ff ff76 	bl	8015328 <__hexdig_fun>
 801543c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015440:	fa5f fc8c 	uxtb.w	ip, ip
 8015444:	f1bc 0f18 	cmp.w	ip, #24
 8015448:	d91d      	bls.n	8015486 <__gethex+0x132>
 801544a:	f1bb 0f00 	cmp.w	fp, #0
 801544e:	d000      	beq.n	8015452 <__gethex+0xfe>
 8015450:	4252      	negs	r2, r2
 8015452:	4416      	add	r6, r2
 8015454:	f8ca 1000 	str.w	r1, [sl]
 8015458:	b1dc      	cbz	r4, 8015492 <__gethex+0x13e>
 801545a:	9b01      	ldr	r3, [sp, #4]
 801545c:	2b00      	cmp	r3, #0
 801545e:	bf14      	ite	ne
 8015460:	f04f 0800 	movne.w	r8, #0
 8015464:	f04f 0806 	moveq.w	r8, #6
 8015468:	4640      	mov	r0, r8
 801546a:	b005      	add	sp, #20
 801546c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015470:	4645      	mov	r5, r8
 8015472:	4626      	mov	r6, r4
 8015474:	2401      	movs	r4, #1
 8015476:	e7c7      	b.n	8015408 <__gethex+0xb4>
 8015478:	f04f 0b00 	mov.w	fp, #0
 801547c:	1ca9      	adds	r1, r5, #2
 801547e:	e7d0      	b.n	8015422 <__gethex+0xce>
 8015480:	f04f 0b01 	mov.w	fp, #1
 8015484:	e7fa      	b.n	801547c <__gethex+0x128>
 8015486:	230a      	movs	r3, #10
 8015488:	fb03 0002 	mla	r0, r3, r2, r0
 801548c:	e7d0      	b.n	8015430 <__gethex+0xdc>
 801548e:	4629      	mov	r1, r5
 8015490:	e7e0      	b.n	8015454 <__gethex+0x100>
 8015492:	eba5 0308 	sub.w	r3, r5, r8
 8015496:	3b01      	subs	r3, #1
 8015498:	4621      	mov	r1, r4
 801549a:	2b07      	cmp	r3, #7
 801549c:	dc0a      	bgt.n	80154b4 <__gethex+0x160>
 801549e:	4648      	mov	r0, r9
 80154a0:	f000 fb0e 	bl	8015ac0 <_Balloc>
 80154a4:	4604      	mov	r4, r0
 80154a6:	b940      	cbnz	r0, 80154ba <__gethex+0x166>
 80154a8:	4b61      	ldr	r3, [pc, #388]	; (8015630 <__gethex+0x2dc>)
 80154aa:	4602      	mov	r2, r0
 80154ac:	21e4      	movs	r1, #228	; 0xe4
 80154ae:	4861      	ldr	r0, [pc, #388]	; (8015634 <__gethex+0x2e0>)
 80154b0:	f001 fe0a 	bl	80170c8 <__assert_func>
 80154b4:	3101      	adds	r1, #1
 80154b6:	105b      	asrs	r3, r3, #1
 80154b8:	e7ef      	b.n	801549a <__gethex+0x146>
 80154ba:	f100 0a14 	add.w	sl, r0, #20
 80154be:	2300      	movs	r3, #0
 80154c0:	495a      	ldr	r1, [pc, #360]	; (801562c <__gethex+0x2d8>)
 80154c2:	f8cd a004 	str.w	sl, [sp, #4]
 80154c6:	469b      	mov	fp, r3
 80154c8:	45a8      	cmp	r8, r5
 80154ca:	d342      	bcc.n	8015552 <__gethex+0x1fe>
 80154cc:	9801      	ldr	r0, [sp, #4]
 80154ce:	f840 bb04 	str.w	fp, [r0], #4
 80154d2:	eba0 000a 	sub.w	r0, r0, sl
 80154d6:	1080      	asrs	r0, r0, #2
 80154d8:	6120      	str	r0, [r4, #16]
 80154da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80154de:	4658      	mov	r0, fp
 80154e0:	f000 fbe0 	bl	8015ca4 <__hi0bits>
 80154e4:	683d      	ldr	r5, [r7, #0]
 80154e6:	eba8 0000 	sub.w	r0, r8, r0
 80154ea:	42a8      	cmp	r0, r5
 80154ec:	dd59      	ble.n	80155a2 <__gethex+0x24e>
 80154ee:	eba0 0805 	sub.w	r8, r0, r5
 80154f2:	4641      	mov	r1, r8
 80154f4:	4620      	mov	r0, r4
 80154f6:	f000 ff6f 	bl	80163d8 <__any_on>
 80154fa:	4683      	mov	fp, r0
 80154fc:	b1b8      	cbz	r0, 801552e <__gethex+0x1da>
 80154fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8015502:	1159      	asrs	r1, r3, #5
 8015504:	f003 021f 	and.w	r2, r3, #31
 8015508:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801550c:	f04f 0b01 	mov.w	fp, #1
 8015510:	fa0b f202 	lsl.w	r2, fp, r2
 8015514:	420a      	tst	r2, r1
 8015516:	d00a      	beq.n	801552e <__gethex+0x1da>
 8015518:	455b      	cmp	r3, fp
 801551a:	dd06      	ble.n	801552a <__gethex+0x1d6>
 801551c:	f1a8 0102 	sub.w	r1, r8, #2
 8015520:	4620      	mov	r0, r4
 8015522:	f000 ff59 	bl	80163d8 <__any_on>
 8015526:	2800      	cmp	r0, #0
 8015528:	d138      	bne.n	801559c <__gethex+0x248>
 801552a:	f04f 0b02 	mov.w	fp, #2
 801552e:	4641      	mov	r1, r8
 8015530:	4620      	mov	r0, r4
 8015532:	f7ff fea7 	bl	8015284 <rshift>
 8015536:	4446      	add	r6, r8
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	42b3      	cmp	r3, r6
 801553c:	da41      	bge.n	80155c2 <__gethex+0x26e>
 801553e:	4621      	mov	r1, r4
 8015540:	4648      	mov	r0, r9
 8015542:	f000 fafd 	bl	8015b40 <_Bfree>
 8015546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015548:	2300      	movs	r3, #0
 801554a:	6013      	str	r3, [r2, #0]
 801554c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8015550:	e78a      	b.n	8015468 <__gethex+0x114>
 8015552:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8015556:	2a2e      	cmp	r2, #46	; 0x2e
 8015558:	d014      	beq.n	8015584 <__gethex+0x230>
 801555a:	2b20      	cmp	r3, #32
 801555c:	d106      	bne.n	801556c <__gethex+0x218>
 801555e:	9b01      	ldr	r3, [sp, #4]
 8015560:	f843 bb04 	str.w	fp, [r3], #4
 8015564:	f04f 0b00 	mov.w	fp, #0
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	465b      	mov	r3, fp
 801556c:	7828      	ldrb	r0, [r5, #0]
 801556e:	9303      	str	r3, [sp, #12]
 8015570:	f7ff feda 	bl	8015328 <__hexdig_fun>
 8015574:	9b03      	ldr	r3, [sp, #12]
 8015576:	f000 000f 	and.w	r0, r0, #15
 801557a:	4098      	lsls	r0, r3
 801557c:	ea4b 0b00 	orr.w	fp, fp, r0
 8015580:	3304      	adds	r3, #4
 8015582:	e7a1      	b.n	80154c8 <__gethex+0x174>
 8015584:	45a8      	cmp	r8, r5
 8015586:	d8e8      	bhi.n	801555a <__gethex+0x206>
 8015588:	2201      	movs	r2, #1
 801558a:	4628      	mov	r0, r5
 801558c:	9303      	str	r3, [sp, #12]
 801558e:	f7fe fef6 	bl	801437e <strncmp>
 8015592:	4926      	ldr	r1, [pc, #152]	; (801562c <__gethex+0x2d8>)
 8015594:	9b03      	ldr	r3, [sp, #12]
 8015596:	2800      	cmp	r0, #0
 8015598:	d1df      	bne.n	801555a <__gethex+0x206>
 801559a:	e795      	b.n	80154c8 <__gethex+0x174>
 801559c:	f04f 0b03 	mov.w	fp, #3
 80155a0:	e7c5      	b.n	801552e <__gethex+0x1da>
 80155a2:	da0b      	bge.n	80155bc <__gethex+0x268>
 80155a4:	eba5 0800 	sub.w	r8, r5, r0
 80155a8:	4621      	mov	r1, r4
 80155aa:	4642      	mov	r2, r8
 80155ac:	4648      	mov	r0, r9
 80155ae:	f000 fce1 	bl	8015f74 <__lshift>
 80155b2:	eba6 0608 	sub.w	r6, r6, r8
 80155b6:	4604      	mov	r4, r0
 80155b8:	f100 0a14 	add.w	sl, r0, #20
 80155bc:	f04f 0b00 	mov.w	fp, #0
 80155c0:	e7ba      	b.n	8015538 <__gethex+0x1e4>
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	42b3      	cmp	r3, r6
 80155c6:	dd73      	ble.n	80156b0 <__gethex+0x35c>
 80155c8:	1b9e      	subs	r6, r3, r6
 80155ca:	42b5      	cmp	r5, r6
 80155cc:	dc34      	bgt.n	8015638 <__gethex+0x2e4>
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2b02      	cmp	r3, #2
 80155d2:	d023      	beq.n	801561c <__gethex+0x2c8>
 80155d4:	2b03      	cmp	r3, #3
 80155d6:	d025      	beq.n	8015624 <__gethex+0x2d0>
 80155d8:	2b01      	cmp	r3, #1
 80155da:	d115      	bne.n	8015608 <__gethex+0x2b4>
 80155dc:	42b5      	cmp	r5, r6
 80155de:	d113      	bne.n	8015608 <__gethex+0x2b4>
 80155e0:	2d01      	cmp	r5, #1
 80155e2:	d10b      	bne.n	80155fc <__gethex+0x2a8>
 80155e4:	9a02      	ldr	r2, [sp, #8]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6013      	str	r3, [r2, #0]
 80155ea:	2301      	movs	r3, #1
 80155ec:	6123      	str	r3, [r4, #16]
 80155ee:	f8ca 3000 	str.w	r3, [sl]
 80155f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80155f8:	601c      	str	r4, [r3, #0]
 80155fa:	e735      	b.n	8015468 <__gethex+0x114>
 80155fc:	1e69      	subs	r1, r5, #1
 80155fe:	4620      	mov	r0, r4
 8015600:	f000 feea 	bl	80163d8 <__any_on>
 8015604:	2800      	cmp	r0, #0
 8015606:	d1ed      	bne.n	80155e4 <__gethex+0x290>
 8015608:	4621      	mov	r1, r4
 801560a:	4648      	mov	r0, r9
 801560c:	f000 fa98 	bl	8015b40 <_Bfree>
 8015610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015612:	2300      	movs	r3, #0
 8015614:	6013      	str	r3, [r2, #0]
 8015616:	f04f 0850 	mov.w	r8, #80	; 0x50
 801561a:	e725      	b.n	8015468 <__gethex+0x114>
 801561c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801561e:	2b00      	cmp	r3, #0
 8015620:	d1f2      	bne.n	8015608 <__gethex+0x2b4>
 8015622:	e7df      	b.n	80155e4 <__gethex+0x290>
 8015624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015626:	2b00      	cmp	r3, #0
 8015628:	d1dc      	bne.n	80155e4 <__gethex+0x290>
 801562a:	e7ed      	b.n	8015608 <__gethex+0x2b4>
 801562c:	080184c4 	.word	0x080184c4
 8015630:	080185d3 	.word	0x080185d3
 8015634:	080185e4 	.word	0x080185e4
 8015638:	f106 38ff 	add.w	r8, r6, #4294967295
 801563c:	f1bb 0f00 	cmp.w	fp, #0
 8015640:	d133      	bne.n	80156aa <__gethex+0x356>
 8015642:	f1b8 0f00 	cmp.w	r8, #0
 8015646:	d004      	beq.n	8015652 <__gethex+0x2fe>
 8015648:	4641      	mov	r1, r8
 801564a:	4620      	mov	r0, r4
 801564c:	f000 fec4 	bl	80163d8 <__any_on>
 8015650:	4683      	mov	fp, r0
 8015652:	ea4f 1268 	mov.w	r2, r8, asr #5
 8015656:	2301      	movs	r3, #1
 8015658:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801565c:	f008 081f 	and.w	r8, r8, #31
 8015660:	fa03 f308 	lsl.w	r3, r3, r8
 8015664:	4213      	tst	r3, r2
 8015666:	4631      	mov	r1, r6
 8015668:	4620      	mov	r0, r4
 801566a:	bf18      	it	ne
 801566c:	f04b 0b02 	orrne.w	fp, fp, #2
 8015670:	1bad      	subs	r5, r5, r6
 8015672:	f7ff fe07 	bl	8015284 <rshift>
 8015676:	687e      	ldr	r6, [r7, #4]
 8015678:	f04f 0802 	mov.w	r8, #2
 801567c:	f1bb 0f00 	cmp.w	fp, #0
 8015680:	d04a      	beq.n	8015718 <__gethex+0x3c4>
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	2b02      	cmp	r3, #2
 8015686:	d016      	beq.n	80156b6 <__gethex+0x362>
 8015688:	2b03      	cmp	r3, #3
 801568a:	d018      	beq.n	80156be <__gethex+0x36a>
 801568c:	2b01      	cmp	r3, #1
 801568e:	d109      	bne.n	80156a4 <__gethex+0x350>
 8015690:	f01b 0f02 	tst.w	fp, #2
 8015694:	d006      	beq.n	80156a4 <__gethex+0x350>
 8015696:	f8da 3000 	ldr.w	r3, [sl]
 801569a:	ea4b 0b03 	orr.w	fp, fp, r3
 801569e:	f01b 0f01 	tst.w	fp, #1
 80156a2:	d10f      	bne.n	80156c4 <__gethex+0x370>
 80156a4:	f048 0810 	orr.w	r8, r8, #16
 80156a8:	e036      	b.n	8015718 <__gethex+0x3c4>
 80156aa:	f04f 0b01 	mov.w	fp, #1
 80156ae:	e7d0      	b.n	8015652 <__gethex+0x2fe>
 80156b0:	f04f 0801 	mov.w	r8, #1
 80156b4:	e7e2      	b.n	801567c <__gethex+0x328>
 80156b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156b8:	f1c3 0301 	rsb	r3, r3, #1
 80156bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80156be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d0ef      	beq.n	80156a4 <__gethex+0x350>
 80156c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80156c8:	f104 0214 	add.w	r2, r4, #20
 80156cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80156d0:	9301      	str	r3, [sp, #4]
 80156d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80156d6:	2300      	movs	r3, #0
 80156d8:	4694      	mov	ip, r2
 80156da:	f852 1b04 	ldr.w	r1, [r2], #4
 80156de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80156e2:	d01e      	beq.n	8015722 <__gethex+0x3ce>
 80156e4:	3101      	adds	r1, #1
 80156e6:	f8cc 1000 	str.w	r1, [ip]
 80156ea:	f1b8 0f02 	cmp.w	r8, #2
 80156ee:	f104 0214 	add.w	r2, r4, #20
 80156f2:	d13d      	bne.n	8015770 <__gethex+0x41c>
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	3b01      	subs	r3, #1
 80156f8:	42ab      	cmp	r3, r5
 80156fa:	d10b      	bne.n	8015714 <__gethex+0x3c0>
 80156fc:	1169      	asrs	r1, r5, #5
 80156fe:	2301      	movs	r3, #1
 8015700:	f005 051f 	and.w	r5, r5, #31
 8015704:	fa03 f505 	lsl.w	r5, r3, r5
 8015708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801570c:	421d      	tst	r5, r3
 801570e:	bf18      	it	ne
 8015710:	f04f 0801 	movne.w	r8, #1
 8015714:	f048 0820 	orr.w	r8, r8, #32
 8015718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801571a:	601c      	str	r4, [r3, #0]
 801571c:	9b02      	ldr	r3, [sp, #8]
 801571e:	601e      	str	r6, [r3, #0]
 8015720:	e6a2      	b.n	8015468 <__gethex+0x114>
 8015722:	4290      	cmp	r0, r2
 8015724:	f842 3c04 	str.w	r3, [r2, #-4]
 8015728:	d8d6      	bhi.n	80156d8 <__gethex+0x384>
 801572a:	68a2      	ldr	r2, [r4, #8]
 801572c:	4593      	cmp	fp, r2
 801572e:	db17      	blt.n	8015760 <__gethex+0x40c>
 8015730:	6861      	ldr	r1, [r4, #4]
 8015732:	4648      	mov	r0, r9
 8015734:	3101      	adds	r1, #1
 8015736:	f000 f9c3 	bl	8015ac0 <_Balloc>
 801573a:	4682      	mov	sl, r0
 801573c:	b918      	cbnz	r0, 8015746 <__gethex+0x3f2>
 801573e:	4b1b      	ldr	r3, [pc, #108]	; (80157ac <__gethex+0x458>)
 8015740:	4602      	mov	r2, r0
 8015742:	2184      	movs	r1, #132	; 0x84
 8015744:	e6b3      	b.n	80154ae <__gethex+0x15a>
 8015746:	6922      	ldr	r2, [r4, #16]
 8015748:	3202      	adds	r2, #2
 801574a:	f104 010c 	add.w	r1, r4, #12
 801574e:	0092      	lsls	r2, r2, #2
 8015750:	300c      	adds	r0, #12
 8015752:	f7fe feb0 	bl	80144b6 <memcpy>
 8015756:	4621      	mov	r1, r4
 8015758:	4648      	mov	r0, r9
 801575a:	f000 f9f1 	bl	8015b40 <_Bfree>
 801575e:	4654      	mov	r4, sl
 8015760:	6922      	ldr	r2, [r4, #16]
 8015762:	1c51      	adds	r1, r2, #1
 8015764:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015768:	6121      	str	r1, [r4, #16]
 801576a:	2101      	movs	r1, #1
 801576c:	6151      	str	r1, [r2, #20]
 801576e:	e7bc      	b.n	80156ea <__gethex+0x396>
 8015770:	6921      	ldr	r1, [r4, #16]
 8015772:	4559      	cmp	r1, fp
 8015774:	dd0b      	ble.n	801578e <__gethex+0x43a>
 8015776:	2101      	movs	r1, #1
 8015778:	4620      	mov	r0, r4
 801577a:	f7ff fd83 	bl	8015284 <rshift>
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	3601      	adds	r6, #1
 8015782:	42b3      	cmp	r3, r6
 8015784:	f6ff aedb 	blt.w	801553e <__gethex+0x1ea>
 8015788:	f04f 0801 	mov.w	r8, #1
 801578c:	e7c2      	b.n	8015714 <__gethex+0x3c0>
 801578e:	f015 051f 	ands.w	r5, r5, #31
 8015792:	d0f9      	beq.n	8015788 <__gethex+0x434>
 8015794:	9b01      	ldr	r3, [sp, #4]
 8015796:	441a      	add	r2, r3
 8015798:	f1c5 0520 	rsb	r5, r5, #32
 801579c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80157a0:	f000 fa80 	bl	8015ca4 <__hi0bits>
 80157a4:	42a8      	cmp	r0, r5
 80157a6:	dbe6      	blt.n	8015776 <__gethex+0x422>
 80157a8:	e7ee      	b.n	8015788 <__gethex+0x434>
 80157aa:	bf00      	nop
 80157ac:	080185d3 	.word	0x080185d3

080157b0 <L_shift>:
 80157b0:	f1c2 0208 	rsb	r2, r2, #8
 80157b4:	0092      	lsls	r2, r2, #2
 80157b6:	b570      	push	{r4, r5, r6, lr}
 80157b8:	f1c2 0620 	rsb	r6, r2, #32
 80157bc:	6843      	ldr	r3, [r0, #4]
 80157be:	6804      	ldr	r4, [r0, #0]
 80157c0:	fa03 f506 	lsl.w	r5, r3, r6
 80157c4:	432c      	orrs	r4, r5
 80157c6:	40d3      	lsrs	r3, r2
 80157c8:	6004      	str	r4, [r0, #0]
 80157ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80157ce:	4288      	cmp	r0, r1
 80157d0:	d3f4      	bcc.n	80157bc <L_shift+0xc>
 80157d2:	bd70      	pop	{r4, r5, r6, pc}

080157d4 <__match>:
 80157d4:	b530      	push	{r4, r5, lr}
 80157d6:	6803      	ldr	r3, [r0, #0]
 80157d8:	3301      	adds	r3, #1
 80157da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157de:	b914      	cbnz	r4, 80157e6 <__match+0x12>
 80157e0:	6003      	str	r3, [r0, #0]
 80157e2:	2001      	movs	r0, #1
 80157e4:	bd30      	pop	{r4, r5, pc}
 80157e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80157ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80157ee:	2d19      	cmp	r5, #25
 80157f0:	bf98      	it	ls
 80157f2:	3220      	addls	r2, #32
 80157f4:	42a2      	cmp	r2, r4
 80157f6:	d0f0      	beq.n	80157da <__match+0x6>
 80157f8:	2000      	movs	r0, #0
 80157fa:	e7f3      	b.n	80157e4 <__match+0x10>

080157fc <__hexnan>:
 80157fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015800:	680b      	ldr	r3, [r1, #0]
 8015802:	6801      	ldr	r1, [r0, #0]
 8015804:	115e      	asrs	r6, r3, #5
 8015806:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801580a:	f013 031f 	ands.w	r3, r3, #31
 801580e:	b087      	sub	sp, #28
 8015810:	bf18      	it	ne
 8015812:	3604      	addne	r6, #4
 8015814:	2500      	movs	r5, #0
 8015816:	1f37      	subs	r7, r6, #4
 8015818:	4682      	mov	sl, r0
 801581a:	4690      	mov	r8, r2
 801581c:	9301      	str	r3, [sp, #4]
 801581e:	f846 5c04 	str.w	r5, [r6, #-4]
 8015822:	46b9      	mov	r9, r7
 8015824:	463c      	mov	r4, r7
 8015826:	9502      	str	r5, [sp, #8]
 8015828:	46ab      	mov	fp, r5
 801582a:	784a      	ldrb	r2, [r1, #1]
 801582c:	1c4b      	adds	r3, r1, #1
 801582e:	9303      	str	r3, [sp, #12]
 8015830:	b342      	cbz	r2, 8015884 <__hexnan+0x88>
 8015832:	4610      	mov	r0, r2
 8015834:	9105      	str	r1, [sp, #20]
 8015836:	9204      	str	r2, [sp, #16]
 8015838:	f7ff fd76 	bl	8015328 <__hexdig_fun>
 801583c:	2800      	cmp	r0, #0
 801583e:	d14f      	bne.n	80158e0 <__hexnan+0xe4>
 8015840:	9a04      	ldr	r2, [sp, #16]
 8015842:	9905      	ldr	r1, [sp, #20]
 8015844:	2a20      	cmp	r2, #32
 8015846:	d818      	bhi.n	801587a <__hexnan+0x7e>
 8015848:	9b02      	ldr	r3, [sp, #8]
 801584a:	459b      	cmp	fp, r3
 801584c:	dd13      	ble.n	8015876 <__hexnan+0x7a>
 801584e:	454c      	cmp	r4, r9
 8015850:	d206      	bcs.n	8015860 <__hexnan+0x64>
 8015852:	2d07      	cmp	r5, #7
 8015854:	dc04      	bgt.n	8015860 <__hexnan+0x64>
 8015856:	462a      	mov	r2, r5
 8015858:	4649      	mov	r1, r9
 801585a:	4620      	mov	r0, r4
 801585c:	f7ff ffa8 	bl	80157b0 <L_shift>
 8015860:	4544      	cmp	r4, r8
 8015862:	d950      	bls.n	8015906 <__hexnan+0x10a>
 8015864:	2300      	movs	r3, #0
 8015866:	f1a4 0904 	sub.w	r9, r4, #4
 801586a:	f844 3c04 	str.w	r3, [r4, #-4]
 801586e:	f8cd b008 	str.w	fp, [sp, #8]
 8015872:	464c      	mov	r4, r9
 8015874:	461d      	mov	r5, r3
 8015876:	9903      	ldr	r1, [sp, #12]
 8015878:	e7d7      	b.n	801582a <__hexnan+0x2e>
 801587a:	2a29      	cmp	r2, #41	; 0x29
 801587c:	d155      	bne.n	801592a <__hexnan+0x12e>
 801587e:	3102      	adds	r1, #2
 8015880:	f8ca 1000 	str.w	r1, [sl]
 8015884:	f1bb 0f00 	cmp.w	fp, #0
 8015888:	d04f      	beq.n	801592a <__hexnan+0x12e>
 801588a:	454c      	cmp	r4, r9
 801588c:	d206      	bcs.n	801589c <__hexnan+0xa0>
 801588e:	2d07      	cmp	r5, #7
 8015890:	dc04      	bgt.n	801589c <__hexnan+0xa0>
 8015892:	462a      	mov	r2, r5
 8015894:	4649      	mov	r1, r9
 8015896:	4620      	mov	r0, r4
 8015898:	f7ff ff8a 	bl	80157b0 <L_shift>
 801589c:	4544      	cmp	r4, r8
 801589e:	d934      	bls.n	801590a <__hexnan+0x10e>
 80158a0:	f1a8 0204 	sub.w	r2, r8, #4
 80158a4:	4623      	mov	r3, r4
 80158a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80158aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80158ae:	429f      	cmp	r7, r3
 80158b0:	d2f9      	bcs.n	80158a6 <__hexnan+0xaa>
 80158b2:	1b3b      	subs	r3, r7, r4
 80158b4:	f023 0303 	bic.w	r3, r3, #3
 80158b8:	3304      	adds	r3, #4
 80158ba:	3e03      	subs	r6, #3
 80158bc:	3401      	adds	r4, #1
 80158be:	42a6      	cmp	r6, r4
 80158c0:	bf38      	it	cc
 80158c2:	2304      	movcc	r3, #4
 80158c4:	4443      	add	r3, r8
 80158c6:	2200      	movs	r2, #0
 80158c8:	f843 2b04 	str.w	r2, [r3], #4
 80158cc:	429f      	cmp	r7, r3
 80158ce:	d2fb      	bcs.n	80158c8 <__hexnan+0xcc>
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	b91b      	cbnz	r3, 80158dc <__hexnan+0xe0>
 80158d4:	4547      	cmp	r7, r8
 80158d6:	d126      	bne.n	8015926 <__hexnan+0x12a>
 80158d8:	2301      	movs	r3, #1
 80158da:	603b      	str	r3, [r7, #0]
 80158dc:	2005      	movs	r0, #5
 80158de:	e025      	b.n	801592c <__hexnan+0x130>
 80158e0:	3501      	adds	r5, #1
 80158e2:	2d08      	cmp	r5, #8
 80158e4:	f10b 0b01 	add.w	fp, fp, #1
 80158e8:	dd06      	ble.n	80158f8 <__hexnan+0xfc>
 80158ea:	4544      	cmp	r4, r8
 80158ec:	d9c3      	bls.n	8015876 <__hexnan+0x7a>
 80158ee:	2300      	movs	r3, #0
 80158f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80158f4:	2501      	movs	r5, #1
 80158f6:	3c04      	subs	r4, #4
 80158f8:	6822      	ldr	r2, [r4, #0]
 80158fa:	f000 000f 	and.w	r0, r0, #15
 80158fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015902:	6020      	str	r0, [r4, #0]
 8015904:	e7b7      	b.n	8015876 <__hexnan+0x7a>
 8015906:	2508      	movs	r5, #8
 8015908:	e7b5      	b.n	8015876 <__hexnan+0x7a>
 801590a:	9b01      	ldr	r3, [sp, #4]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d0df      	beq.n	80158d0 <__hexnan+0xd4>
 8015910:	f1c3 0320 	rsb	r3, r3, #32
 8015914:	f04f 32ff 	mov.w	r2, #4294967295
 8015918:	40da      	lsrs	r2, r3
 801591a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801591e:	4013      	ands	r3, r2
 8015920:	f846 3c04 	str.w	r3, [r6, #-4]
 8015924:	e7d4      	b.n	80158d0 <__hexnan+0xd4>
 8015926:	3f04      	subs	r7, #4
 8015928:	e7d2      	b.n	80158d0 <__hexnan+0xd4>
 801592a:	2004      	movs	r0, #4
 801592c:	b007      	add	sp, #28
 801592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08015934 <malloc>:
 8015934:	4b02      	ldr	r3, [pc, #8]	; (8015940 <malloc+0xc>)
 8015936:	4601      	mov	r1, r0
 8015938:	6818      	ldr	r0, [r3, #0]
 801593a:	f000 b823 	b.w	8015984 <_malloc_r>
 801593e:	bf00      	nop
 8015940:	2000032c 	.word	0x2000032c

08015944 <sbrk_aligned>:
 8015944:	b570      	push	{r4, r5, r6, lr}
 8015946:	4e0e      	ldr	r6, [pc, #56]	; (8015980 <sbrk_aligned+0x3c>)
 8015948:	460c      	mov	r4, r1
 801594a:	6831      	ldr	r1, [r6, #0]
 801594c:	4605      	mov	r5, r0
 801594e:	b911      	cbnz	r1, 8015956 <sbrk_aligned+0x12>
 8015950:	f001 fbaa 	bl	80170a8 <_sbrk_r>
 8015954:	6030      	str	r0, [r6, #0]
 8015956:	4621      	mov	r1, r4
 8015958:	4628      	mov	r0, r5
 801595a:	f001 fba5 	bl	80170a8 <_sbrk_r>
 801595e:	1c43      	adds	r3, r0, #1
 8015960:	d00a      	beq.n	8015978 <sbrk_aligned+0x34>
 8015962:	1cc4      	adds	r4, r0, #3
 8015964:	f024 0403 	bic.w	r4, r4, #3
 8015968:	42a0      	cmp	r0, r4
 801596a:	d007      	beq.n	801597c <sbrk_aligned+0x38>
 801596c:	1a21      	subs	r1, r4, r0
 801596e:	4628      	mov	r0, r5
 8015970:	f001 fb9a 	bl	80170a8 <_sbrk_r>
 8015974:	3001      	adds	r0, #1
 8015976:	d101      	bne.n	801597c <sbrk_aligned+0x38>
 8015978:	f04f 34ff 	mov.w	r4, #4294967295
 801597c:	4620      	mov	r0, r4
 801597e:	bd70      	pop	{r4, r5, r6, pc}
 8015980:	20007538 	.word	0x20007538

08015984 <_malloc_r>:
 8015984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015988:	1ccd      	adds	r5, r1, #3
 801598a:	f025 0503 	bic.w	r5, r5, #3
 801598e:	3508      	adds	r5, #8
 8015990:	2d0c      	cmp	r5, #12
 8015992:	bf38      	it	cc
 8015994:	250c      	movcc	r5, #12
 8015996:	2d00      	cmp	r5, #0
 8015998:	4607      	mov	r7, r0
 801599a:	db01      	blt.n	80159a0 <_malloc_r+0x1c>
 801599c:	42a9      	cmp	r1, r5
 801599e:	d905      	bls.n	80159ac <_malloc_r+0x28>
 80159a0:	230c      	movs	r3, #12
 80159a2:	603b      	str	r3, [r7, #0]
 80159a4:	2600      	movs	r6, #0
 80159a6:	4630      	mov	r0, r6
 80159a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015a80 <_malloc_r+0xfc>
 80159b0:	f000 f87a 	bl	8015aa8 <__malloc_lock>
 80159b4:	f8d8 3000 	ldr.w	r3, [r8]
 80159b8:	461c      	mov	r4, r3
 80159ba:	bb5c      	cbnz	r4, 8015a14 <_malloc_r+0x90>
 80159bc:	4629      	mov	r1, r5
 80159be:	4638      	mov	r0, r7
 80159c0:	f7ff ffc0 	bl	8015944 <sbrk_aligned>
 80159c4:	1c43      	adds	r3, r0, #1
 80159c6:	4604      	mov	r4, r0
 80159c8:	d155      	bne.n	8015a76 <_malloc_r+0xf2>
 80159ca:	f8d8 4000 	ldr.w	r4, [r8]
 80159ce:	4626      	mov	r6, r4
 80159d0:	2e00      	cmp	r6, #0
 80159d2:	d145      	bne.n	8015a60 <_malloc_r+0xdc>
 80159d4:	2c00      	cmp	r4, #0
 80159d6:	d048      	beq.n	8015a6a <_malloc_r+0xe6>
 80159d8:	6823      	ldr	r3, [r4, #0]
 80159da:	4631      	mov	r1, r6
 80159dc:	4638      	mov	r0, r7
 80159de:	eb04 0903 	add.w	r9, r4, r3
 80159e2:	f001 fb61 	bl	80170a8 <_sbrk_r>
 80159e6:	4581      	cmp	r9, r0
 80159e8:	d13f      	bne.n	8015a6a <_malloc_r+0xe6>
 80159ea:	6821      	ldr	r1, [r4, #0]
 80159ec:	1a6d      	subs	r5, r5, r1
 80159ee:	4629      	mov	r1, r5
 80159f0:	4638      	mov	r0, r7
 80159f2:	f7ff ffa7 	bl	8015944 <sbrk_aligned>
 80159f6:	3001      	adds	r0, #1
 80159f8:	d037      	beq.n	8015a6a <_malloc_r+0xe6>
 80159fa:	6823      	ldr	r3, [r4, #0]
 80159fc:	442b      	add	r3, r5
 80159fe:	6023      	str	r3, [r4, #0]
 8015a00:	f8d8 3000 	ldr.w	r3, [r8]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d038      	beq.n	8015a7a <_malloc_r+0xf6>
 8015a08:	685a      	ldr	r2, [r3, #4]
 8015a0a:	42a2      	cmp	r2, r4
 8015a0c:	d12b      	bne.n	8015a66 <_malloc_r+0xe2>
 8015a0e:	2200      	movs	r2, #0
 8015a10:	605a      	str	r2, [r3, #4]
 8015a12:	e00f      	b.n	8015a34 <_malloc_r+0xb0>
 8015a14:	6822      	ldr	r2, [r4, #0]
 8015a16:	1b52      	subs	r2, r2, r5
 8015a18:	d41f      	bmi.n	8015a5a <_malloc_r+0xd6>
 8015a1a:	2a0b      	cmp	r2, #11
 8015a1c:	d917      	bls.n	8015a4e <_malloc_r+0xca>
 8015a1e:	1961      	adds	r1, r4, r5
 8015a20:	42a3      	cmp	r3, r4
 8015a22:	6025      	str	r5, [r4, #0]
 8015a24:	bf18      	it	ne
 8015a26:	6059      	strne	r1, [r3, #4]
 8015a28:	6863      	ldr	r3, [r4, #4]
 8015a2a:	bf08      	it	eq
 8015a2c:	f8c8 1000 	streq.w	r1, [r8]
 8015a30:	5162      	str	r2, [r4, r5]
 8015a32:	604b      	str	r3, [r1, #4]
 8015a34:	4638      	mov	r0, r7
 8015a36:	f104 060b 	add.w	r6, r4, #11
 8015a3a:	f000 f83b 	bl	8015ab4 <__malloc_unlock>
 8015a3e:	f026 0607 	bic.w	r6, r6, #7
 8015a42:	1d23      	adds	r3, r4, #4
 8015a44:	1af2      	subs	r2, r6, r3
 8015a46:	d0ae      	beq.n	80159a6 <_malloc_r+0x22>
 8015a48:	1b9b      	subs	r3, r3, r6
 8015a4a:	50a3      	str	r3, [r4, r2]
 8015a4c:	e7ab      	b.n	80159a6 <_malloc_r+0x22>
 8015a4e:	42a3      	cmp	r3, r4
 8015a50:	6862      	ldr	r2, [r4, #4]
 8015a52:	d1dd      	bne.n	8015a10 <_malloc_r+0x8c>
 8015a54:	f8c8 2000 	str.w	r2, [r8]
 8015a58:	e7ec      	b.n	8015a34 <_malloc_r+0xb0>
 8015a5a:	4623      	mov	r3, r4
 8015a5c:	6864      	ldr	r4, [r4, #4]
 8015a5e:	e7ac      	b.n	80159ba <_malloc_r+0x36>
 8015a60:	4634      	mov	r4, r6
 8015a62:	6876      	ldr	r6, [r6, #4]
 8015a64:	e7b4      	b.n	80159d0 <_malloc_r+0x4c>
 8015a66:	4613      	mov	r3, r2
 8015a68:	e7cc      	b.n	8015a04 <_malloc_r+0x80>
 8015a6a:	230c      	movs	r3, #12
 8015a6c:	603b      	str	r3, [r7, #0]
 8015a6e:	4638      	mov	r0, r7
 8015a70:	f000 f820 	bl	8015ab4 <__malloc_unlock>
 8015a74:	e797      	b.n	80159a6 <_malloc_r+0x22>
 8015a76:	6025      	str	r5, [r4, #0]
 8015a78:	e7dc      	b.n	8015a34 <_malloc_r+0xb0>
 8015a7a:	605b      	str	r3, [r3, #4]
 8015a7c:	deff      	udf	#255	; 0xff
 8015a7e:	bf00      	nop
 8015a80:	20007534 	.word	0x20007534

08015a84 <__ascii_mbtowc>:
 8015a84:	b082      	sub	sp, #8
 8015a86:	b901      	cbnz	r1, 8015a8a <__ascii_mbtowc+0x6>
 8015a88:	a901      	add	r1, sp, #4
 8015a8a:	b142      	cbz	r2, 8015a9e <__ascii_mbtowc+0x1a>
 8015a8c:	b14b      	cbz	r3, 8015aa2 <__ascii_mbtowc+0x1e>
 8015a8e:	7813      	ldrb	r3, [r2, #0]
 8015a90:	600b      	str	r3, [r1, #0]
 8015a92:	7812      	ldrb	r2, [r2, #0]
 8015a94:	1e10      	subs	r0, r2, #0
 8015a96:	bf18      	it	ne
 8015a98:	2001      	movne	r0, #1
 8015a9a:	b002      	add	sp, #8
 8015a9c:	4770      	bx	lr
 8015a9e:	4610      	mov	r0, r2
 8015aa0:	e7fb      	b.n	8015a9a <__ascii_mbtowc+0x16>
 8015aa2:	f06f 0001 	mvn.w	r0, #1
 8015aa6:	e7f8      	b.n	8015a9a <__ascii_mbtowc+0x16>

08015aa8 <__malloc_lock>:
 8015aa8:	4801      	ldr	r0, [pc, #4]	; (8015ab0 <__malloc_lock+0x8>)
 8015aaa:	f7fe bd02 	b.w	80144b2 <__retarget_lock_acquire_recursive>
 8015aae:	bf00      	nop
 8015ab0:	20007530 	.word	0x20007530

08015ab4 <__malloc_unlock>:
 8015ab4:	4801      	ldr	r0, [pc, #4]	; (8015abc <__malloc_unlock+0x8>)
 8015ab6:	f7fe bcfd 	b.w	80144b4 <__retarget_lock_release_recursive>
 8015aba:	bf00      	nop
 8015abc:	20007530 	.word	0x20007530

08015ac0 <_Balloc>:
 8015ac0:	b570      	push	{r4, r5, r6, lr}
 8015ac2:	69c6      	ldr	r6, [r0, #28]
 8015ac4:	4604      	mov	r4, r0
 8015ac6:	460d      	mov	r5, r1
 8015ac8:	b976      	cbnz	r6, 8015ae8 <_Balloc+0x28>
 8015aca:	2010      	movs	r0, #16
 8015acc:	f7ff ff32 	bl	8015934 <malloc>
 8015ad0:	4602      	mov	r2, r0
 8015ad2:	61e0      	str	r0, [r4, #28]
 8015ad4:	b920      	cbnz	r0, 8015ae0 <_Balloc+0x20>
 8015ad6:	4b18      	ldr	r3, [pc, #96]	; (8015b38 <_Balloc+0x78>)
 8015ad8:	4818      	ldr	r0, [pc, #96]	; (8015b3c <_Balloc+0x7c>)
 8015ada:	216b      	movs	r1, #107	; 0x6b
 8015adc:	f001 faf4 	bl	80170c8 <__assert_func>
 8015ae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ae4:	6006      	str	r6, [r0, #0]
 8015ae6:	60c6      	str	r6, [r0, #12]
 8015ae8:	69e6      	ldr	r6, [r4, #28]
 8015aea:	68f3      	ldr	r3, [r6, #12]
 8015aec:	b183      	cbz	r3, 8015b10 <_Balloc+0x50>
 8015aee:	69e3      	ldr	r3, [r4, #28]
 8015af0:	68db      	ldr	r3, [r3, #12]
 8015af2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015af6:	b9b8      	cbnz	r0, 8015b28 <_Balloc+0x68>
 8015af8:	2101      	movs	r1, #1
 8015afa:	fa01 f605 	lsl.w	r6, r1, r5
 8015afe:	1d72      	adds	r2, r6, #5
 8015b00:	0092      	lsls	r2, r2, #2
 8015b02:	4620      	mov	r0, r4
 8015b04:	f001 fafe 	bl	8017104 <_calloc_r>
 8015b08:	b160      	cbz	r0, 8015b24 <_Balloc+0x64>
 8015b0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b0e:	e00e      	b.n	8015b2e <_Balloc+0x6e>
 8015b10:	2221      	movs	r2, #33	; 0x21
 8015b12:	2104      	movs	r1, #4
 8015b14:	4620      	mov	r0, r4
 8015b16:	f001 faf5 	bl	8017104 <_calloc_r>
 8015b1a:	69e3      	ldr	r3, [r4, #28]
 8015b1c:	60f0      	str	r0, [r6, #12]
 8015b1e:	68db      	ldr	r3, [r3, #12]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d1e4      	bne.n	8015aee <_Balloc+0x2e>
 8015b24:	2000      	movs	r0, #0
 8015b26:	bd70      	pop	{r4, r5, r6, pc}
 8015b28:	6802      	ldr	r2, [r0, #0]
 8015b2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b2e:	2300      	movs	r3, #0
 8015b30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b34:	e7f7      	b.n	8015b26 <_Balloc+0x66>
 8015b36:	bf00      	nop
 8015b38:	08018564 	.word	0x08018564
 8015b3c:	08018644 	.word	0x08018644

08015b40 <_Bfree>:
 8015b40:	b570      	push	{r4, r5, r6, lr}
 8015b42:	69c6      	ldr	r6, [r0, #28]
 8015b44:	4605      	mov	r5, r0
 8015b46:	460c      	mov	r4, r1
 8015b48:	b976      	cbnz	r6, 8015b68 <_Bfree+0x28>
 8015b4a:	2010      	movs	r0, #16
 8015b4c:	f7ff fef2 	bl	8015934 <malloc>
 8015b50:	4602      	mov	r2, r0
 8015b52:	61e8      	str	r0, [r5, #28]
 8015b54:	b920      	cbnz	r0, 8015b60 <_Bfree+0x20>
 8015b56:	4b09      	ldr	r3, [pc, #36]	; (8015b7c <_Bfree+0x3c>)
 8015b58:	4809      	ldr	r0, [pc, #36]	; (8015b80 <_Bfree+0x40>)
 8015b5a:	218f      	movs	r1, #143	; 0x8f
 8015b5c:	f001 fab4 	bl	80170c8 <__assert_func>
 8015b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b64:	6006      	str	r6, [r0, #0]
 8015b66:	60c6      	str	r6, [r0, #12]
 8015b68:	b13c      	cbz	r4, 8015b7a <_Bfree+0x3a>
 8015b6a:	69eb      	ldr	r3, [r5, #28]
 8015b6c:	6862      	ldr	r2, [r4, #4]
 8015b6e:	68db      	ldr	r3, [r3, #12]
 8015b70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b74:	6021      	str	r1, [r4, #0]
 8015b76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b7a:	bd70      	pop	{r4, r5, r6, pc}
 8015b7c:	08018564 	.word	0x08018564
 8015b80:	08018644 	.word	0x08018644

08015b84 <__multadd>:
 8015b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b88:	690d      	ldr	r5, [r1, #16]
 8015b8a:	4607      	mov	r7, r0
 8015b8c:	460c      	mov	r4, r1
 8015b8e:	461e      	mov	r6, r3
 8015b90:	f101 0c14 	add.w	ip, r1, #20
 8015b94:	2000      	movs	r0, #0
 8015b96:	f8dc 3000 	ldr.w	r3, [ip]
 8015b9a:	b299      	uxth	r1, r3
 8015b9c:	fb02 6101 	mla	r1, r2, r1, r6
 8015ba0:	0c1e      	lsrs	r6, r3, #16
 8015ba2:	0c0b      	lsrs	r3, r1, #16
 8015ba4:	fb02 3306 	mla	r3, r2, r6, r3
 8015ba8:	b289      	uxth	r1, r1
 8015baa:	3001      	adds	r0, #1
 8015bac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bb0:	4285      	cmp	r5, r0
 8015bb2:	f84c 1b04 	str.w	r1, [ip], #4
 8015bb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bba:	dcec      	bgt.n	8015b96 <__multadd+0x12>
 8015bbc:	b30e      	cbz	r6, 8015c02 <__multadd+0x7e>
 8015bbe:	68a3      	ldr	r3, [r4, #8]
 8015bc0:	42ab      	cmp	r3, r5
 8015bc2:	dc19      	bgt.n	8015bf8 <__multadd+0x74>
 8015bc4:	6861      	ldr	r1, [r4, #4]
 8015bc6:	4638      	mov	r0, r7
 8015bc8:	3101      	adds	r1, #1
 8015bca:	f7ff ff79 	bl	8015ac0 <_Balloc>
 8015bce:	4680      	mov	r8, r0
 8015bd0:	b928      	cbnz	r0, 8015bde <__multadd+0x5a>
 8015bd2:	4602      	mov	r2, r0
 8015bd4:	4b0c      	ldr	r3, [pc, #48]	; (8015c08 <__multadd+0x84>)
 8015bd6:	480d      	ldr	r0, [pc, #52]	; (8015c0c <__multadd+0x88>)
 8015bd8:	21ba      	movs	r1, #186	; 0xba
 8015bda:	f001 fa75 	bl	80170c8 <__assert_func>
 8015bde:	6922      	ldr	r2, [r4, #16]
 8015be0:	3202      	adds	r2, #2
 8015be2:	f104 010c 	add.w	r1, r4, #12
 8015be6:	0092      	lsls	r2, r2, #2
 8015be8:	300c      	adds	r0, #12
 8015bea:	f7fe fc64 	bl	80144b6 <memcpy>
 8015bee:	4621      	mov	r1, r4
 8015bf0:	4638      	mov	r0, r7
 8015bf2:	f7ff ffa5 	bl	8015b40 <_Bfree>
 8015bf6:	4644      	mov	r4, r8
 8015bf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015bfc:	3501      	adds	r5, #1
 8015bfe:	615e      	str	r6, [r3, #20]
 8015c00:	6125      	str	r5, [r4, #16]
 8015c02:	4620      	mov	r0, r4
 8015c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c08:	080185d3 	.word	0x080185d3
 8015c0c:	08018644 	.word	0x08018644

08015c10 <__s2b>:
 8015c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c14:	460c      	mov	r4, r1
 8015c16:	4615      	mov	r5, r2
 8015c18:	461f      	mov	r7, r3
 8015c1a:	2209      	movs	r2, #9
 8015c1c:	3308      	adds	r3, #8
 8015c1e:	4606      	mov	r6, r0
 8015c20:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c24:	2100      	movs	r1, #0
 8015c26:	2201      	movs	r2, #1
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	db09      	blt.n	8015c40 <__s2b+0x30>
 8015c2c:	4630      	mov	r0, r6
 8015c2e:	f7ff ff47 	bl	8015ac0 <_Balloc>
 8015c32:	b940      	cbnz	r0, 8015c46 <__s2b+0x36>
 8015c34:	4602      	mov	r2, r0
 8015c36:	4b19      	ldr	r3, [pc, #100]	; (8015c9c <__s2b+0x8c>)
 8015c38:	4819      	ldr	r0, [pc, #100]	; (8015ca0 <__s2b+0x90>)
 8015c3a:	21d3      	movs	r1, #211	; 0xd3
 8015c3c:	f001 fa44 	bl	80170c8 <__assert_func>
 8015c40:	0052      	lsls	r2, r2, #1
 8015c42:	3101      	adds	r1, #1
 8015c44:	e7f0      	b.n	8015c28 <__s2b+0x18>
 8015c46:	9b08      	ldr	r3, [sp, #32]
 8015c48:	6143      	str	r3, [r0, #20]
 8015c4a:	2d09      	cmp	r5, #9
 8015c4c:	f04f 0301 	mov.w	r3, #1
 8015c50:	6103      	str	r3, [r0, #16]
 8015c52:	dd16      	ble.n	8015c82 <__s2b+0x72>
 8015c54:	f104 0909 	add.w	r9, r4, #9
 8015c58:	46c8      	mov	r8, r9
 8015c5a:	442c      	add	r4, r5
 8015c5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015c60:	4601      	mov	r1, r0
 8015c62:	3b30      	subs	r3, #48	; 0x30
 8015c64:	220a      	movs	r2, #10
 8015c66:	4630      	mov	r0, r6
 8015c68:	f7ff ff8c 	bl	8015b84 <__multadd>
 8015c6c:	45a0      	cmp	r8, r4
 8015c6e:	d1f5      	bne.n	8015c5c <__s2b+0x4c>
 8015c70:	f1a5 0408 	sub.w	r4, r5, #8
 8015c74:	444c      	add	r4, r9
 8015c76:	1b2d      	subs	r5, r5, r4
 8015c78:	1963      	adds	r3, r4, r5
 8015c7a:	42bb      	cmp	r3, r7
 8015c7c:	db04      	blt.n	8015c88 <__s2b+0x78>
 8015c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c82:	340a      	adds	r4, #10
 8015c84:	2509      	movs	r5, #9
 8015c86:	e7f6      	b.n	8015c76 <__s2b+0x66>
 8015c88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015c8c:	4601      	mov	r1, r0
 8015c8e:	3b30      	subs	r3, #48	; 0x30
 8015c90:	220a      	movs	r2, #10
 8015c92:	4630      	mov	r0, r6
 8015c94:	f7ff ff76 	bl	8015b84 <__multadd>
 8015c98:	e7ee      	b.n	8015c78 <__s2b+0x68>
 8015c9a:	bf00      	nop
 8015c9c:	080185d3 	.word	0x080185d3
 8015ca0:	08018644 	.word	0x08018644

08015ca4 <__hi0bits>:
 8015ca4:	0c03      	lsrs	r3, r0, #16
 8015ca6:	041b      	lsls	r3, r3, #16
 8015ca8:	b9d3      	cbnz	r3, 8015ce0 <__hi0bits+0x3c>
 8015caa:	0400      	lsls	r0, r0, #16
 8015cac:	2310      	movs	r3, #16
 8015cae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015cb2:	bf04      	itt	eq
 8015cb4:	0200      	lsleq	r0, r0, #8
 8015cb6:	3308      	addeq	r3, #8
 8015cb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015cbc:	bf04      	itt	eq
 8015cbe:	0100      	lsleq	r0, r0, #4
 8015cc0:	3304      	addeq	r3, #4
 8015cc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015cc6:	bf04      	itt	eq
 8015cc8:	0080      	lsleq	r0, r0, #2
 8015cca:	3302      	addeq	r3, #2
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	db05      	blt.n	8015cdc <__hi0bits+0x38>
 8015cd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015cd4:	f103 0301 	add.w	r3, r3, #1
 8015cd8:	bf08      	it	eq
 8015cda:	2320      	moveq	r3, #32
 8015cdc:	4618      	mov	r0, r3
 8015cde:	4770      	bx	lr
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	e7e4      	b.n	8015cae <__hi0bits+0xa>

08015ce4 <__lo0bits>:
 8015ce4:	6803      	ldr	r3, [r0, #0]
 8015ce6:	f013 0207 	ands.w	r2, r3, #7
 8015cea:	d00c      	beq.n	8015d06 <__lo0bits+0x22>
 8015cec:	07d9      	lsls	r1, r3, #31
 8015cee:	d422      	bmi.n	8015d36 <__lo0bits+0x52>
 8015cf0:	079a      	lsls	r2, r3, #30
 8015cf2:	bf49      	itett	mi
 8015cf4:	085b      	lsrmi	r3, r3, #1
 8015cf6:	089b      	lsrpl	r3, r3, #2
 8015cf8:	6003      	strmi	r3, [r0, #0]
 8015cfa:	2201      	movmi	r2, #1
 8015cfc:	bf5c      	itt	pl
 8015cfe:	6003      	strpl	r3, [r0, #0]
 8015d00:	2202      	movpl	r2, #2
 8015d02:	4610      	mov	r0, r2
 8015d04:	4770      	bx	lr
 8015d06:	b299      	uxth	r1, r3
 8015d08:	b909      	cbnz	r1, 8015d0e <__lo0bits+0x2a>
 8015d0a:	0c1b      	lsrs	r3, r3, #16
 8015d0c:	2210      	movs	r2, #16
 8015d0e:	b2d9      	uxtb	r1, r3
 8015d10:	b909      	cbnz	r1, 8015d16 <__lo0bits+0x32>
 8015d12:	3208      	adds	r2, #8
 8015d14:	0a1b      	lsrs	r3, r3, #8
 8015d16:	0719      	lsls	r1, r3, #28
 8015d18:	bf04      	itt	eq
 8015d1a:	091b      	lsreq	r3, r3, #4
 8015d1c:	3204      	addeq	r2, #4
 8015d1e:	0799      	lsls	r1, r3, #30
 8015d20:	bf04      	itt	eq
 8015d22:	089b      	lsreq	r3, r3, #2
 8015d24:	3202      	addeq	r2, #2
 8015d26:	07d9      	lsls	r1, r3, #31
 8015d28:	d403      	bmi.n	8015d32 <__lo0bits+0x4e>
 8015d2a:	085b      	lsrs	r3, r3, #1
 8015d2c:	f102 0201 	add.w	r2, r2, #1
 8015d30:	d003      	beq.n	8015d3a <__lo0bits+0x56>
 8015d32:	6003      	str	r3, [r0, #0]
 8015d34:	e7e5      	b.n	8015d02 <__lo0bits+0x1e>
 8015d36:	2200      	movs	r2, #0
 8015d38:	e7e3      	b.n	8015d02 <__lo0bits+0x1e>
 8015d3a:	2220      	movs	r2, #32
 8015d3c:	e7e1      	b.n	8015d02 <__lo0bits+0x1e>
	...

08015d40 <__i2b>:
 8015d40:	b510      	push	{r4, lr}
 8015d42:	460c      	mov	r4, r1
 8015d44:	2101      	movs	r1, #1
 8015d46:	f7ff febb 	bl	8015ac0 <_Balloc>
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	b928      	cbnz	r0, 8015d5a <__i2b+0x1a>
 8015d4e:	4b05      	ldr	r3, [pc, #20]	; (8015d64 <__i2b+0x24>)
 8015d50:	4805      	ldr	r0, [pc, #20]	; (8015d68 <__i2b+0x28>)
 8015d52:	f240 1145 	movw	r1, #325	; 0x145
 8015d56:	f001 f9b7 	bl	80170c8 <__assert_func>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	6144      	str	r4, [r0, #20]
 8015d5e:	6103      	str	r3, [r0, #16]
 8015d60:	bd10      	pop	{r4, pc}
 8015d62:	bf00      	nop
 8015d64:	080185d3 	.word	0x080185d3
 8015d68:	08018644 	.word	0x08018644

08015d6c <__multiply>:
 8015d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d70:	4691      	mov	r9, r2
 8015d72:	690a      	ldr	r2, [r1, #16]
 8015d74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	bfb8      	it	lt
 8015d7c:	460b      	movlt	r3, r1
 8015d7e:	460c      	mov	r4, r1
 8015d80:	bfbc      	itt	lt
 8015d82:	464c      	movlt	r4, r9
 8015d84:	4699      	movlt	r9, r3
 8015d86:	6927      	ldr	r7, [r4, #16]
 8015d88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015d8c:	68a3      	ldr	r3, [r4, #8]
 8015d8e:	6861      	ldr	r1, [r4, #4]
 8015d90:	eb07 060a 	add.w	r6, r7, sl
 8015d94:	42b3      	cmp	r3, r6
 8015d96:	b085      	sub	sp, #20
 8015d98:	bfb8      	it	lt
 8015d9a:	3101      	addlt	r1, #1
 8015d9c:	f7ff fe90 	bl	8015ac0 <_Balloc>
 8015da0:	b930      	cbnz	r0, 8015db0 <__multiply+0x44>
 8015da2:	4602      	mov	r2, r0
 8015da4:	4b44      	ldr	r3, [pc, #272]	; (8015eb8 <__multiply+0x14c>)
 8015da6:	4845      	ldr	r0, [pc, #276]	; (8015ebc <__multiply+0x150>)
 8015da8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015dac:	f001 f98c 	bl	80170c8 <__assert_func>
 8015db0:	f100 0514 	add.w	r5, r0, #20
 8015db4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015db8:	462b      	mov	r3, r5
 8015dba:	2200      	movs	r2, #0
 8015dbc:	4543      	cmp	r3, r8
 8015dbe:	d321      	bcc.n	8015e04 <__multiply+0x98>
 8015dc0:	f104 0314 	add.w	r3, r4, #20
 8015dc4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015dc8:	f109 0314 	add.w	r3, r9, #20
 8015dcc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015dd0:	9202      	str	r2, [sp, #8]
 8015dd2:	1b3a      	subs	r2, r7, r4
 8015dd4:	3a15      	subs	r2, #21
 8015dd6:	f022 0203 	bic.w	r2, r2, #3
 8015dda:	3204      	adds	r2, #4
 8015ddc:	f104 0115 	add.w	r1, r4, #21
 8015de0:	428f      	cmp	r7, r1
 8015de2:	bf38      	it	cc
 8015de4:	2204      	movcc	r2, #4
 8015de6:	9201      	str	r2, [sp, #4]
 8015de8:	9a02      	ldr	r2, [sp, #8]
 8015dea:	9303      	str	r3, [sp, #12]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d80c      	bhi.n	8015e0a <__multiply+0x9e>
 8015df0:	2e00      	cmp	r6, #0
 8015df2:	dd03      	ble.n	8015dfc <__multiply+0x90>
 8015df4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d05b      	beq.n	8015eb4 <__multiply+0x148>
 8015dfc:	6106      	str	r6, [r0, #16]
 8015dfe:	b005      	add	sp, #20
 8015e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e04:	f843 2b04 	str.w	r2, [r3], #4
 8015e08:	e7d8      	b.n	8015dbc <__multiply+0x50>
 8015e0a:	f8b3 a000 	ldrh.w	sl, [r3]
 8015e0e:	f1ba 0f00 	cmp.w	sl, #0
 8015e12:	d024      	beq.n	8015e5e <__multiply+0xf2>
 8015e14:	f104 0e14 	add.w	lr, r4, #20
 8015e18:	46a9      	mov	r9, r5
 8015e1a:	f04f 0c00 	mov.w	ip, #0
 8015e1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015e22:	f8d9 1000 	ldr.w	r1, [r9]
 8015e26:	fa1f fb82 	uxth.w	fp, r2
 8015e2a:	b289      	uxth	r1, r1
 8015e2c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015e30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015e34:	f8d9 2000 	ldr.w	r2, [r9]
 8015e38:	4461      	add	r1, ip
 8015e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015e3e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015e42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015e46:	b289      	uxth	r1, r1
 8015e48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015e4c:	4577      	cmp	r7, lr
 8015e4e:	f849 1b04 	str.w	r1, [r9], #4
 8015e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015e56:	d8e2      	bhi.n	8015e1e <__multiply+0xb2>
 8015e58:	9a01      	ldr	r2, [sp, #4]
 8015e5a:	f845 c002 	str.w	ip, [r5, r2]
 8015e5e:	9a03      	ldr	r2, [sp, #12]
 8015e60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015e64:	3304      	adds	r3, #4
 8015e66:	f1b9 0f00 	cmp.w	r9, #0
 8015e6a:	d021      	beq.n	8015eb0 <__multiply+0x144>
 8015e6c:	6829      	ldr	r1, [r5, #0]
 8015e6e:	f104 0c14 	add.w	ip, r4, #20
 8015e72:	46ae      	mov	lr, r5
 8015e74:	f04f 0a00 	mov.w	sl, #0
 8015e78:	f8bc b000 	ldrh.w	fp, [ip]
 8015e7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015e80:	fb09 220b 	mla	r2, r9, fp, r2
 8015e84:	4452      	add	r2, sl
 8015e86:	b289      	uxth	r1, r1
 8015e88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015e8c:	f84e 1b04 	str.w	r1, [lr], #4
 8015e90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015e94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015e98:	f8be 1000 	ldrh.w	r1, [lr]
 8015e9c:	fb09 110a 	mla	r1, r9, sl, r1
 8015ea0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015ea4:	4567      	cmp	r7, ip
 8015ea6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015eaa:	d8e5      	bhi.n	8015e78 <__multiply+0x10c>
 8015eac:	9a01      	ldr	r2, [sp, #4]
 8015eae:	50a9      	str	r1, [r5, r2]
 8015eb0:	3504      	adds	r5, #4
 8015eb2:	e799      	b.n	8015de8 <__multiply+0x7c>
 8015eb4:	3e01      	subs	r6, #1
 8015eb6:	e79b      	b.n	8015df0 <__multiply+0x84>
 8015eb8:	080185d3 	.word	0x080185d3
 8015ebc:	08018644 	.word	0x08018644

08015ec0 <__pow5mult>:
 8015ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ec4:	4615      	mov	r5, r2
 8015ec6:	f012 0203 	ands.w	r2, r2, #3
 8015eca:	4606      	mov	r6, r0
 8015ecc:	460f      	mov	r7, r1
 8015ece:	d007      	beq.n	8015ee0 <__pow5mult+0x20>
 8015ed0:	4c25      	ldr	r4, [pc, #148]	; (8015f68 <__pow5mult+0xa8>)
 8015ed2:	3a01      	subs	r2, #1
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015eda:	f7ff fe53 	bl	8015b84 <__multadd>
 8015ede:	4607      	mov	r7, r0
 8015ee0:	10ad      	asrs	r5, r5, #2
 8015ee2:	d03d      	beq.n	8015f60 <__pow5mult+0xa0>
 8015ee4:	69f4      	ldr	r4, [r6, #28]
 8015ee6:	b97c      	cbnz	r4, 8015f08 <__pow5mult+0x48>
 8015ee8:	2010      	movs	r0, #16
 8015eea:	f7ff fd23 	bl	8015934 <malloc>
 8015eee:	4602      	mov	r2, r0
 8015ef0:	61f0      	str	r0, [r6, #28]
 8015ef2:	b928      	cbnz	r0, 8015f00 <__pow5mult+0x40>
 8015ef4:	4b1d      	ldr	r3, [pc, #116]	; (8015f6c <__pow5mult+0xac>)
 8015ef6:	481e      	ldr	r0, [pc, #120]	; (8015f70 <__pow5mult+0xb0>)
 8015ef8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015efc:	f001 f8e4 	bl	80170c8 <__assert_func>
 8015f00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015f04:	6004      	str	r4, [r0, #0]
 8015f06:	60c4      	str	r4, [r0, #12]
 8015f08:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015f0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f10:	b94c      	cbnz	r4, 8015f26 <__pow5mult+0x66>
 8015f12:	f240 2171 	movw	r1, #625	; 0x271
 8015f16:	4630      	mov	r0, r6
 8015f18:	f7ff ff12 	bl	8015d40 <__i2b>
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f22:	4604      	mov	r4, r0
 8015f24:	6003      	str	r3, [r0, #0]
 8015f26:	f04f 0900 	mov.w	r9, #0
 8015f2a:	07eb      	lsls	r3, r5, #31
 8015f2c:	d50a      	bpl.n	8015f44 <__pow5mult+0x84>
 8015f2e:	4639      	mov	r1, r7
 8015f30:	4622      	mov	r2, r4
 8015f32:	4630      	mov	r0, r6
 8015f34:	f7ff ff1a 	bl	8015d6c <__multiply>
 8015f38:	4639      	mov	r1, r7
 8015f3a:	4680      	mov	r8, r0
 8015f3c:	4630      	mov	r0, r6
 8015f3e:	f7ff fdff 	bl	8015b40 <_Bfree>
 8015f42:	4647      	mov	r7, r8
 8015f44:	106d      	asrs	r5, r5, #1
 8015f46:	d00b      	beq.n	8015f60 <__pow5mult+0xa0>
 8015f48:	6820      	ldr	r0, [r4, #0]
 8015f4a:	b938      	cbnz	r0, 8015f5c <__pow5mult+0x9c>
 8015f4c:	4622      	mov	r2, r4
 8015f4e:	4621      	mov	r1, r4
 8015f50:	4630      	mov	r0, r6
 8015f52:	f7ff ff0b 	bl	8015d6c <__multiply>
 8015f56:	6020      	str	r0, [r4, #0]
 8015f58:	f8c0 9000 	str.w	r9, [r0]
 8015f5c:	4604      	mov	r4, r0
 8015f5e:	e7e4      	b.n	8015f2a <__pow5mult+0x6a>
 8015f60:	4638      	mov	r0, r7
 8015f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f66:	bf00      	nop
 8015f68:	08018790 	.word	0x08018790
 8015f6c:	08018564 	.word	0x08018564
 8015f70:	08018644 	.word	0x08018644

08015f74 <__lshift>:
 8015f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f78:	460c      	mov	r4, r1
 8015f7a:	6849      	ldr	r1, [r1, #4]
 8015f7c:	6923      	ldr	r3, [r4, #16]
 8015f7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f82:	68a3      	ldr	r3, [r4, #8]
 8015f84:	4607      	mov	r7, r0
 8015f86:	4691      	mov	r9, r2
 8015f88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f8c:	f108 0601 	add.w	r6, r8, #1
 8015f90:	42b3      	cmp	r3, r6
 8015f92:	db0b      	blt.n	8015fac <__lshift+0x38>
 8015f94:	4638      	mov	r0, r7
 8015f96:	f7ff fd93 	bl	8015ac0 <_Balloc>
 8015f9a:	4605      	mov	r5, r0
 8015f9c:	b948      	cbnz	r0, 8015fb2 <__lshift+0x3e>
 8015f9e:	4602      	mov	r2, r0
 8015fa0:	4b28      	ldr	r3, [pc, #160]	; (8016044 <__lshift+0xd0>)
 8015fa2:	4829      	ldr	r0, [pc, #164]	; (8016048 <__lshift+0xd4>)
 8015fa4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015fa8:	f001 f88e 	bl	80170c8 <__assert_func>
 8015fac:	3101      	adds	r1, #1
 8015fae:	005b      	lsls	r3, r3, #1
 8015fb0:	e7ee      	b.n	8015f90 <__lshift+0x1c>
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	f100 0114 	add.w	r1, r0, #20
 8015fb8:	f100 0210 	add.w	r2, r0, #16
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	4553      	cmp	r3, sl
 8015fc0:	db33      	blt.n	801602a <__lshift+0xb6>
 8015fc2:	6920      	ldr	r0, [r4, #16]
 8015fc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015fc8:	f104 0314 	add.w	r3, r4, #20
 8015fcc:	f019 091f 	ands.w	r9, r9, #31
 8015fd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015fd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015fd8:	d02b      	beq.n	8016032 <__lshift+0xbe>
 8015fda:	f1c9 0e20 	rsb	lr, r9, #32
 8015fde:	468a      	mov	sl, r1
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	6818      	ldr	r0, [r3, #0]
 8015fe4:	fa00 f009 	lsl.w	r0, r0, r9
 8015fe8:	4310      	orrs	r0, r2
 8015fea:	f84a 0b04 	str.w	r0, [sl], #4
 8015fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ff2:	459c      	cmp	ip, r3
 8015ff4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ff8:	d8f3      	bhi.n	8015fe2 <__lshift+0x6e>
 8015ffa:	ebac 0304 	sub.w	r3, ip, r4
 8015ffe:	3b15      	subs	r3, #21
 8016000:	f023 0303 	bic.w	r3, r3, #3
 8016004:	3304      	adds	r3, #4
 8016006:	f104 0015 	add.w	r0, r4, #21
 801600a:	4584      	cmp	ip, r0
 801600c:	bf38      	it	cc
 801600e:	2304      	movcc	r3, #4
 8016010:	50ca      	str	r2, [r1, r3]
 8016012:	b10a      	cbz	r2, 8016018 <__lshift+0xa4>
 8016014:	f108 0602 	add.w	r6, r8, #2
 8016018:	3e01      	subs	r6, #1
 801601a:	4638      	mov	r0, r7
 801601c:	612e      	str	r6, [r5, #16]
 801601e:	4621      	mov	r1, r4
 8016020:	f7ff fd8e 	bl	8015b40 <_Bfree>
 8016024:	4628      	mov	r0, r5
 8016026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801602a:	f842 0f04 	str.w	r0, [r2, #4]!
 801602e:	3301      	adds	r3, #1
 8016030:	e7c5      	b.n	8015fbe <__lshift+0x4a>
 8016032:	3904      	subs	r1, #4
 8016034:	f853 2b04 	ldr.w	r2, [r3], #4
 8016038:	f841 2f04 	str.w	r2, [r1, #4]!
 801603c:	459c      	cmp	ip, r3
 801603e:	d8f9      	bhi.n	8016034 <__lshift+0xc0>
 8016040:	e7ea      	b.n	8016018 <__lshift+0xa4>
 8016042:	bf00      	nop
 8016044:	080185d3 	.word	0x080185d3
 8016048:	08018644 	.word	0x08018644

0801604c <__mcmp>:
 801604c:	b530      	push	{r4, r5, lr}
 801604e:	6902      	ldr	r2, [r0, #16]
 8016050:	690c      	ldr	r4, [r1, #16]
 8016052:	1b12      	subs	r2, r2, r4
 8016054:	d10e      	bne.n	8016074 <__mcmp+0x28>
 8016056:	f100 0314 	add.w	r3, r0, #20
 801605a:	3114      	adds	r1, #20
 801605c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016060:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016064:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016068:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801606c:	42a5      	cmp	r5, r4
 801606e:	d003      	beq.n	8016078 <__mcmp+0x2c>
 8016070:	d305      	bcc.n	801607e <__mcmp+0x32>
 8016072:	2201      	movs	r2, #1
 8016074:	4610      	mov	r0, r2
 8016076:	bd30      	pop	{r4, r5, pc}
 8016078:	4283      	cmp	r3, r0
 801607a:	d3f3      	bcc.n	8016064 <__mcmp+0x18>
 801607c:	e7fa      	b.n	8016074 <__mcmp+0x28>
 801607e:	f04f 32ff 	mov.w	r2, #4294967295
 8016082:	e7f7      	b.n	8016074 <__mcmp+0x28>

08016084 <__mdiff>:
 8016084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016088:	460c      	mov	r4, r1
 801608a:	4606      	mov	r6, r0
 801608c:	4611      	mov	r1, r2
 801608e:	4620      	mov	r0, r4
 8016090:	4690      	mov	r8, r2
 8016092:	f7ff ffdb 	bl	801604c <__mcmp>
 8016096:	1e05      	subs	r5, r0, #0
 8016098:	d110      	bne.n	80160bc <__mdiff+0x38>
 801609a:	4629      	mov	r1, r5
 801609c:	4630      	mov	r0, r6
 801609e:	f7ff fd0f 	bl	8015ac0 <_Balloc>
 80160a2:	b930      	cbnz	r0, 80160b2 <__mdiff+0x2e>
 80160a4:	4b3a      	ldr	r3, [pc, #232]	; (8016190 <__mdiff+0x10c>)
 80160a6:	4602      	mov	r2, r0
 80160a8:	f240 2137 	movw	r1, #567	; 0x237
 80160ac:	4839      	ldr	r0, [pc, #228]	; (8016194 <__mdiff+0x110>)
 80160ae:	f001 f80b 	bl	80170c8 <__assert_func>
 80160b2:	2301      	movs	r3, #1
 80160b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80160b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160bc:	bfa4      	itt	ge
 80160be:	4643      	movge	r3, r8
 80160c0:	46a0      	movge	r8, r4
 80160c2:	4630      	mov	r0, r6
 80160c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80160c8:	bfa6      	itte	ge
 80160ca:	461c      	movge	r4, r3
 80160cc:	2500      	movge	r5, #0
 80160ce:	2501      	movlt	r5, #1
 80160d0:	f7ff fcf6 	bl	8015ac0 <_Balloc>
 80160d4:	b920      	cbnz	r0, 80160e0 <__mdiff+0x5c>
 80160d6:	4b2e      	ldr	r3, [pc, #184]	; (8016190 <__mdiff+0x10c>)
 80160d8:	4602      	mov	r2, r0
 80160da:	f240 2145 	movw	r1, #581	; 0x245
 80160de:	e7e5      	b.n	80160ac <__mdiff+0x28>
 80160e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80160e4:	6926      	ldr	r6, [r4, #16]
 80160e6:	60c5      	str	r5, [r0, #12]
 80160e8:	f104 0914 	add.w	r9, r4, #20
 80160ec:	f108 0514 	add.w	r5, r8, #20
 80160f0:	f100 0e14 	add.w	lr, r0, #20
 80160f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80160f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80160fc:	f108 0210 	add.w	r2, r8, #16
 8016100:	46f2      	mov	sl, lr
 8016102:	2100      	movs	r1, #0
 8016104:	f859 3b04 	ldr.w	r3, [r9], #4
 8016108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801610c:	fa11 f88b 	uxtah	r8, r1, fp
 8016110:	b299      	uxth	r1, r3
 8016112:	0c1b      	lsrs	r3, r3, #16
 8016114:	eba8 0801 	sub.w	r8, r8, r1
 8016118:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801611c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016120:	fa1f f888 	uxth.w	r8, r8
 8016124:	1419      	asrs	r1, r3, #16
 8016126:	454e      	cmp	r6, r9
 8016128:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801612c:	f84a 3b04 	str.w	r3, [sl], #4
 8016130:	d8e8      	bhi.n	8016104 <__mdiff+0x80>
 8016132:	1b33      	subs	r3, r6, r4
 8016134:	3b15      	subs	r3, #21
 8016136:	f023 0303 	bic.w	r3, r3, #3
 801613a:	3304      	adds	r3, #4
 801613c:	3415      	adds	r4, #21
 801613e:	42a6      	cmp	r6, r4
 8016140:	bf38      	it	cc
 8016142:	2304      	movcc	r3, #4
 8016144:	441d      	add	r5, r3
 8016146:	4473      	add	r3, lr
 8016148:	469e      	mov	lr, r3
 801614a:	462e      	mov	r6, r5
 801614c:	4566      	cmp	r6, ip
 801614e:	d30e      	bcc.n	801616e <__mdiff+0xea>
 8016150:	f10c 0203 	add.w	r2, ip, #3
 8016154:	1b52      	subs	r2, r2, r5
 8016156:	f022 0203 	bic.w	r2, r2, #3
 801615a:	3d03      	subs	r5, #3
 801615c:	45ac      	cmp	ip, r5
 801615e:	bf38      	it	cc
 8016160:	2200      	movcc	r2, #0
 8016162:	4413      	add	r3, r2
 8016164:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016168:	b17a      	cbz	r2, 801618a <__mdiff+0x106>
 801616a:	6107      	str	r7, [r0, #16]
 801616c:	e7a4      	b.n	80160b8 <__mdiff+0x34>
 801616e:	f856 8b04 	ldr.w	r8, [r6], #4
 8016172:	fa11 f288 	uxtah	r2, r1, r8
 8016176:	1414      	asrs	r4, r2, #16
 8016178:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801617c:	b292      	uxth	r2, r2
 801617e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016182:	f84e 2b04 	str.w	r2, [lr], #4
 8016186:	1421      	asrs	r1, r4, #16
 8016188:	e7e0      	b.n	801614c <__mdiff+0xc8>
 801618a:	3f01      	subs	r7, #1
 801618c:	e7ea      	b.n	8016164 <__mdiff+0xe0>
 801618e:	bf00      	nop
 8016190:	080185d3 	.word	0x080185d3
 8016194:	08018644 	.word	0x08018644

08016198 <__ulp>:
 8016198:	b082      	sub	sp, #8
 801619a:	ed8d 0b00 	vstr	d0, [sp]
 801619e:	9a01      	ldr	r2, [sp, #4]
 80161a0:	4b0f      	ldr	r3, [pc, #60]	; (80161e0 <__ulp+0x48>)
 80161a2:	4013      	ands	r3, r2
 80161a4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	dc08      	bgt.n	80161be <__ulp+0x26>
 80161ac:	425b      	negs	r3, r3
 80161ae:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80161b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80161b6:	da04      	bge.n	80161c2 <__ulp+0x2a>
 80161b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80161bc:	4113      	asrs	r3, r2
 80161be:	2200      	movs	r2, #0
 80161c0:	e008      	b.n	80161d4 <__ulp+0x3c>
 80161c2:	f1a2 0314 	sub.w	r3, r2, #20
 80161c6:	2b1e      	cmp	r3, #30
 80161c8:	bfda      	itte	le
 80161ca:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80161ce:	40da      	lsrle	r2, r3
 80161d0:	2201      	movgt	r2, #1
 80161d2:	2300      	movs	r3, #0
 80161d4:	4619      	mov	r1, r3
 80161d6:	4610      	mov	r0, r2
 80161d8:	ec41 0b10 	vmov	d0, r0, r1
 80161dc:	b002      	add	sp, #8
 80161de:	4770      	bx	lr
 80161e0:	7ff00000 	.word	0x7ff00000

080161e4 <__b2d>:
 80161e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161e8:	6906      	ldr	r6, [r0, #16]
 80161ea:	f100 0814 	add.w	r8, r0, #20
 80161ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80161f2:	1f37      	subs	r7, r6, #4
 80161f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80161f8:	4610      	mov	r0, r2
 80161fa:	f7ff fd53 	bl	8015ca4 <__hi0bits>
 80161fe:	f1c0 0320 	rsb	r3, r0, #32
 8016202:	280a      	cmp	r0, #10
 8016204:	600b      	str	r3, [r1, #0]
 8016206:	491b      	ldr	r1, [pc, #108]	; (8016274 <__b2d+0x90>)
 8016208:	dc15      	bgt.n	8016236 <__b2d+0x52>
 801620a:	f1c0 0c0b 	rsb	ip, r0, #11
 801620e:	fa22 f30c 	lsr.w	r3, r2, ip
 8016212:	45b8      	cmp	r8, r7
 8016214:	ea43 0501 	orr.w	r5, r3, r1
 8016218:	bf34      	ite	cc
 801621a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801621e:	2300      	movcs	r3, #0
 8016220:	3015      	adds	r0, #21
 8016222:	fa02 f000 	lsl.w	r0, r2, r0
 8016226:	fa23 f30c 	lsr.w	r3, r3, ip
 801622a:	4303      	orrs	r3, r0
 801622c:	461c      	mov	r4, r3
 801622e:	ec45 4b10 	vmov	d0, r4, r5
 8016232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016236:	45b8      	cmp	r8, r7
 8016238:	bf3a      	itte	cc
 801623a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801623e:	f1a6 0708 	subcc.w	r7, r6, #8
 8016242:	2300      	movcs	r3, #0
 8016244:	380b      	subs	r0, #11
 8016246:	d012      	beq.n	801626e <__b2d+0x8a>
 8016248:	f1c0 0120 	rsb	r1, r0, #32
 801624c:	fa23 f401 	lsr.w	r4, r3, r1
 8016250:	4082      	lsls	r2, r0
 8016252:	4322      	orrs	r2, r4
 8016254:	4547      	cmp	r7, r8
 8016256:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801625a:	bf8c      	ite	hi
 801625c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016260:	2200      	movls	r2, #0
 8016262:	4083      	lsls	r3, r0
 8016264:	40ca      	lsrs	r2, r1
 8016266:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801626a:	4313      	orrs	r3, r2
 801626c:	e7de      	b.n	801622c <__b2d+0x48>
 801626e:	ea42 0501 	orr.w	r5, r2, r1
 8016272:	e7db      	b.n	801622c <__b2d+0x48>
 8016274:	3ff00000 	.word	0x3ff00000

08016278 <__d2b>:
 8016278:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801627c:	460f      	mov	r7, r1
 801627e:	2101      	movs	r1, #1
 8016280:	ec59 8b10 	vmov	r8, r9, d0
 8016284:	4616      	mov	r6, r2
 8016286:	f7ff fc1b 	bl	8015ac0 <_Balloc>
 801628a:	4604      	mov	r4, r0
 801628c:	b930      	cbnz	r0, 801629c <__d2b+0x24>
 801628e:	4602      	mov	r2, r0
 8016290:	4b24      	ldr	r3, [pc, #144]	; (8016324 <__d2b+0xac>)
 8016292:	4825      	ldr	r0, [pc, #148]	; (8016328 <__d2b+0xb0>)
 8016294:	f240 310f 	movw	r1, #783	; 0x30f
 8016298:	f000 ff16 	bl	80170c8 <__assert_func>
 801629c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80162a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162a4:	bb2d      	cbnz	r5, 80162f2 <__d2b+0x7a>
 80162a6:	9301      	str	r3, [sp, #4]
 80162a8:	f1b8 0300 	subs.w	r3, r8, #0
 80162ac:	d026      	beq.n	80162fc <__d2b+0x84>
 80162ae:	4668      	mov	r0, sp
 80162b0:	9300      	str	r3, [sp, #0]
 80162b2:	f7ff fd17 	bl	8015ce4 <__lo0bits>
 80162b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80162ba:	b1e8      	cbz	r0, 80162f8 <__d2b+0x80>
 80162bc:	f1c0 0320 	rsb	r3, r0, #32
 80162c0:	fa02 f303 	lsl.w	r3, r2, r3
 80162c4:	430b      	orrs	r3, r1
 80162c6:	40c2      	lsrs	r2, r0
 80162c8:	6163      	str	r3, [r4, #20]
 80162ca:	9201      	str	r2, [sp, #4]
 80162cc:	9b01      	ldr	r3, [sp, #4]
 80162ce:	61a3      	str	r3, [r4, #24]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	bf14      	ite	ne
 80162d4:	2202      	movne	r2, #2
 80162d6:	2201      	moveq	r2, #1
 80162d8:	6122      	str	r2, [r4, #16]
 80162da:	b1bd      	cbz	r5, 801630c <__d2b+0x94>
 80162dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80162e0:	4405      	add	r5, r0
 80162e2:	603d      	str	r5, [r7, #0]
 80162e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80162e8:	6030      	str	r0, [r6, #0]
 80162ea:	4620      	mov	r0, r4
 80162ec:	b003      	add	sp, #12
 80162ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80162f6:	e7d6      	b.n	80162a6 <__d2b+0x2e>
 80162f8:	6161      	str	r1, [r4, #20]
 80162fa:	e7e7      	b.n	80162cc <__d2b+0x54>
 80162fc:	a801      	add	r0, sp, #4
 80162fe:	f7ff fcf1 	bl	8015ce4 <__lo0bits>
 8016302:	9b01      	ldr	r3, [sp, #4]
 8016304:	6163      	str	r3, [r4, #20]
 8016306:	3020      	adds	r0, #32
 8016308:	2201      	movs	r2, #1
 801630a:	e7e5      	b.n	80162d8 <__d2b+0x60>
 801630c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016314:	6038      	str	r0, [r7, #0]
 8016316:	6918      	ldr	r0, [r3, #16]
 8016318:	f7ff fcc4 	bl	8015ca4 <__hi0bits>
 801631c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016320:	e7e2      	b.n	80162e8 <__d2b+0x70>
 8016322:	bf00      	nop
 8016324:	080185d3 	.word	0x080185d3
 8016328:	08018644 	.word	0x08018644

0801632c <__ratio>:
 801632c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016330:	4688      	mov	r8, r1
 8016332:	4669      	mov	r1, sp
 8016334:	4681      	mov	r9, r0
 8016336:	f7ff ff55 	bl	80161e4 <__b2d>
 801633a:	a901      	add	r1, sp, #4
 801633c:	4640      	mov	r0, r8
 801633e:	ec55 4b10 	vmov	r4, r5, d0
 8016342:	f7ff ff4f 	bl	80161e4 <__b2d>
 8016346:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801634a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801634e:	eba3 0c02 	sub.w	ip, r3, r2
 8016352:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016356:	1a9b      	subs	r3, r3, r2
 8016358:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801635c:	ec51 0b10 	vmov	r0, r1, d0
 8016360:	2b00      	cmp	r3, #0
 8016362:	bfd6      	itet	le
 8016364:	460a      	movle	r2, r1
 8016366:	462a      	movgt	r2, r5
 8016368:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801636c:	468b      	mov	fp, r1
 801636e:	462f      	mov	r7, r5
 8016370:	bfd4      	ite	le
 8016372:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016376:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801637a:	4620      	mov	r0, r4
 801637c:	ee10 2a10 	vmov	r2, s0
 8016380:	465b      	mov	r3, fp
 8016382:	4639      	mov	r1, r7
 8016384:	f7ea fa62 	bl	800084c <__aeabi_ddiv>
 8016388:	ec41 0b10 	vmov	d0, r0, r1
 801638c:	b003      	add	sp, #12
 801638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016392 <__copybits>:
 8016392:	3901      	subs	r1, #1
 8016394:	b570      	push	{r4, r5, r6, lr}
 8016396:	1149      	asrs	r1, r1, #5
 8016398:	6914      	ldr	r4, [r2, #16]
 801639a:	3101      	adds	r1, #1
 801639c:	f102 0314 	add.w	r3, r2, #20
 80163a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80163a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80163a8:	1f05      	subs	r5, r0, #4
 80163aa:	42a3      	cmp	r3, r4
 80163ac:	d30c      	bcc.n	80163c8 <__copybits+0x36>
 80163ae:	1aa3      	subs	r3, r4, r2
 80163b0:	3b11      	subs	r3, #17
 80163b2:	f023 0303 	bic.w	r3, r3, #3
 80163b6:	3211      	adds	r2, #17
 80163b8:	42a2      	cmp	r2, r4
 80163ba:	bf88      	it	hi
 80163bc:	2300      	movhi	r3, #0
 80163be:	4418      	add	r0, r3
 80163c0:	2300      	movs	r3, #0
 80163c2:	4288      	cmp	r0, r1
 80163c4:	d305      	bcc.n	80163d2 <__copybits+0x40>
 80163c6:	bd70      	pop	{r4, r5, r6, pc}
 80163c8:	f853 6b04 	ldr.w	r6, [r3], #4
 80163cc:	f845 6f04 	str.w	r6, [r5, #4]!
 80163d0:	e7eb      	b.n	80163aa <__copybits+0x18>
 80163d2:	f840 3b04 	str.w	r3, [r0], #4
 80163d6:	e7f4      	b.n	80163c2 <__copybits+0x30>

080163d8 <__any_on>:
 80163d8:	f100 0214 	add.w	r2, r0, #20
 80163dc:	6900      	ldr	r0, [r0, #16]
 80163de:	114b      	asrs	r3, r1, #5
 80163e0:	4298      	cmp	r0, r3
 80163e2:	b510      	push	{r4, lr}
 80163e4:	db11      	blt.n	801640a <__any_on+0x32>
 80163e6:	dd0a      	ble.n	80163fe <__any_on+0x26>
 80163e8:	f011 011f 	ands.w	r1, r1, #31
 80163ec:	d007      	beq.n	80163fe <__any_on+0x26>
 80163ee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80163f2:	fa24 f001 	lsr.w	r0, r4, r1
 80163f6:	fa00 f101 	lsl.w	r1, r0, r1
 80163fa:	428c      	cmp	r4, r1
 80163fc:	d10b      	bne.n	8016416 <__any_on+0x3e>
 80163fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016402:	4293      	cmp	r3, r2
 8016404:	d803      	bhi.n	801640e <__any_on+0x36>
 8016406:	2000      	movs	r0, #0
 8016408:	bd10      	pop	{r4, pc}
 801640a:	4603      	mov	r3, r0
 801640c:	e7f7      	b.n	80163fe <__any_on+0x26>
 801640e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016412:	2900      	cmp	r1, #0
 8016414:	d0f5      	beq.n	8016402 <__any_on+0x2a>
 8016416:	2001      	movs	r0, #1
 8016418:	e7f6      	b.n	8016408 <__any_on+0x30>
	...

0801641c <_strtol_l.constprop.0>:
 801641c:	2b01      	cmp	r3, #1
 801641e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016422:	d001      	beq.n	8016428 <_strtol_l.constprop.0+0xc>
 8016424:	2b24      	cmp	r3, #36	; 0x24
 8016426:	d906      	bls.n	8016436 <_strtol_l.constprop.0+0x1a>
 8016428:	f7fe f818 	bl	801445c <__errno>
 801642c:	2316      	movs	r3, #22
 801642e:	6003      	str	r3, [r0, #0]
 8016430:	2000      	movs	r0, #0
 8016432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016436:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801651c <_strtol_l.constprop.0+0x100>
 801643a:	460d      	mov	r5, r1
 801643c:	462e      	mov	r6, r5
 801643e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016442:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016446:	f017 0708 	ands.w	r7, r7, #8
 801644a:	d1f7      	bne.n	801643c <_strtol_l.constprop.0+0x20>
 801644c:	2c2d      	cmp	r4, #45	; 0x2d
 801644e:	d132      	bne.n	80164b6 <_strtol_l.constprop.0+0x9a>
 8016450:	782c      	ldrb	r4, [r5, #0]
 8016452:	2701      	movs	r7, #1
 8016454:	1cb5      	adds	r5, r6, #2
 8016456:	2b00      	cmp	r3, #0
 8016458:	d05b      	beq.n	8016512 <_strtol_l.constprop.0+0xf6>
 801645a:	2b10      	cmp	r3, #16
 801645c:	d109      	bne.n	8016472 <_strtol_l.constprop.0+0x56>
 801645e:	2c30      	cmp	r4, #48	; 0x30
 8016460:	d107      	bne.n	8016472 <_strtol_l.constprop.0+0x56>
 8016462:	782c      	ldrb	r4, [r5, #0]
 8016464:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016468:	2c58      	cmp	r4, #88	; 0x58
 801646a:	d14d      	bne.n	8016508 <_strtol_l.constprop.0+0xec>
 801646c:	786c      	ldrb	r4, [r5, #1]
 801646e:	2310      	movs	r3, #16
 8016470:	3502      	adds	r5, #2
 8016472:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016476:	f108 38ff 	add.w	r8, r8, #4294967295
 801647a:	f04f 0e00 	mov.w	lr, #0
 801647e:	fbb8 f9f3 	udiv	r9, r8, r3
 8016482:	4676      	mov	r6, lr
 8016484:	fb03 8a19 	mls	sl, r3, r9, r8
 8016488:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801648c:	f1bc 0f09 	cmp.w	ip, #9
 8016490:	d816      	bhi.n	80164c0 <_strtol_l.constprop.0+0xa4>
 8016492:	4664      	mov	r4, ip
 8016494:	42a3      	cmp	r3, r4
 8016496:	dd24      	ble.n	80164e2 <_strtol_l.constprop.0+0xc6>
 8016498:	f1be 3fff 	cmp.w	lr, #4294967295
 801649c:	d008      	beq.n	80164b0 <_strtol_l.constprop.0+0x94>
 801649e:	45b1      	cmp	r9, r6
 80164a0:	d31c      	bcc.n	80164dc <_strtol_l.constprop.0+0xc0>
 80164a2:	d101      	bne.n	80164a8 <_strtol_l.constprop.0+0x8c>
 80164a4:	45a2      	cmp	sl, r4
 80164a6:	db19      	blt.n	80164dc <_strtol_l.constprop.0+0xc0>
 80164a8:	fb06 4603 	mla	r6, r6, r3, r4
 80164ac:	f04f 0e01 	mov.w	lr, #1
 80164b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80164b4:	e7e8      	b.n	8016488 <_strtol_l.constprop.0+0x6c>
 80164b6:	2c2b      	cmp	r4, #43	; 0x2b
 80164b8:	bf04      	itt	eq
 80164ba:	782c      	ldrbeq	r4, [r5, #0]
 80164bc:	1cb5      	addeq	r5, r6, #2
 80164be:	e7ca      	b.n	8016456 <_strtol_l.constprop.0+0x3a>
 80164c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80164c4:	f1bc 0f19 	cmp.w	ip, #25
 80164c8:	d801      	bhi.n	80164ce <_strtol_l.constprop.0+0xb2>
 80164ca:	3c37      	subs	r4, #55	; 0x37
 80164cc:	e7e2      	b.n	8016494 <_strtol_l.constprop.0+0x78>
 80164ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80164d2:	f1bc 0f19 	cmp.w	ip, #25
 80164d6:	d804      	bhi.n	80164e2 <_strtol_l.constprop.0+0xc6>
 80164d8:	3c57      	subs	r4, #87	; 0x57
 80164da:	e7db      	b.n	8016494 <_strtol_l.constprop.0+0x78>
 80164dc:	f04f 3eff 	mov.w	lr, #4294967295
 80164e0:	e7e6      	b.n	80164b0 <_strtol_l.constprop.0+0x94>
 80164e2:	f1be 3fff 	cmp.w	lr, #4294967295
 80164e6:	d105      	bne.n	80164f4 <_strtol_l.constprop.0+0xd8>
 80164e8:	2322      	movs	r3, #34	; 0x22
 80164ea:	6003      	str	r3, [r0, #0]
 80164ec:	4646      	mov	r6, r8
 80164ee:	b942      	cbnz	r2, 8016502 <_strtol_l.constprop.0+0xe6>
 80164f0:	4630      	mov	r0, r6
 80164f2:	e79e      	b.n	8016432 <_strtol_l.constprop.0+0x16>
 80164f4:	b107      	cbz	r7, 80164f8 <_strtol_l.constprop.0+0xdc>
 80164f6:	4276      	negs	r6, r6
 80164f8:	2a00      	cmp	r2, #0
 80164fa:	d0f9      	beq.n	80164f0 <_strtol_l.constprop.0+0xd4>
 80164fc:	f1be 0f00 	cmp.w	lr, #0
 8016500:	d000      	beq.n	8016504 <_strtol_l.constprop.0+0xe8>
 8016502:	1e69      	subs	r1, r5, #1
 8016504:	6011      	str	r1, [r2, #0]
 8016506:	e7f3      	b.n	80164f0 <_strtol_l.constprop.0+0xd4>
 8016508:	2430      	movs	r4, #48	; 0x30
 801650a:	2b00      	cmp	r3, #0
 801650c:	d1b1      	bne.n	8016472 <_strtol_l.constprop.0+0x56>
 801650e:	2308      	movs	r3, #8
 8016510:	e7af      	b.n	8016472 <_strtol_l.constprop.0+0x56>
 8016512:	2c30      	cmp	r4, #48	; 0x30
 8016514:	d0a5      	beq.n	8016462 <_strtol_l.constprop.0+0x46>
 8016516:	230a      	movs	r3, #10
 8016518:	e7ab      	b.n	8016472 <_strtol_l.constprop.0+0x56>
 801651a:	bf00      	nop
 801651c:	0801879d 	.word	0x0801879d

08016520 <_strtol_r>:
 8016520:	f7ff bf7c 	b.w	801641c <_strtol_l.constprop.0>

08016524 <__ascii_wctomb>:
 8016524:	b149      	cbz	r1, 801653a <__ascii_wctomb+0x16>
 8016526:	2aff      	cmp	r2, #255	; 0xff
 8016528:	bf85      	ittet	hi
 801652a:	238a      	movhi	r3, #138	; 0x8a
 801652c:	6003      	strhi	r3, [r0, #0]
 801652e:	700a      	strbls	r2, [r1, #0]
 8016530:	f04f 30ff 	movhi.w	r0, #4294967295
 8016534:	bf98      	it	ls
 8016536:	2001      	movls	r0, #1
 8016538:	4770      	bx	lr
 801653a:	4608      	mov	r0, r1
 801653c:	4770      	bx	lr

0801653e <__ssputs_r>:
 801653e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016542:	688e      	ldr	r6, [r1, #8]
 8016544:	461f      	mov	r7, r3
 8016546:	42be      	cmp	r6, r7
 8016548:	680b      	ldr	r3, [r1, #0]
 801654a:	4682      	mov	sl, r0
 801654c:	460c      	mov	r4, r1
 801654e:	4690      	mov	r8, r2
 8016550:	d82c      	bhi.n	80165ac <__ssputs_r+0x6e>
 8016552:	898a      	ldrh	r2, [r1, #12]
 8016554:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016558:	d026      	beq.n	80165a8 <__ssputs_r+0x6a>
 801655a:	6965      	ldr	r5, [r4, #20]
 801655c:	6909      	ldr	r1, [r1, #16]
 801655e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016562:	eba3 0901 	sub.w	r9, r3, r1
 8016566:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801656a:	1c7b      	adds	r3, r7, #1
 801656c:	444b      	add	r3, r9
 801656e:	106d      	asrs	r5, r5, #1
 8016570:	429d      	cmp	r5, r3
 8016572:	bf38      	it	cc
 8016574:	461d      	movcc	r5, r3
 8016576:	0553      	lsls	r3, r2, #21
 8016578:	d527      	bpl.n	80165ca <__ssputs_r+0x8c>
 801657a:	4629      	mov	r1, r5
 801657c:	f7ff fa02 	bl	8015984 <_malloc_r>
 8016580:	4606      	mov	r6, r0
 8016582:	b360      	cbz	r0, 80165de <__ssputs_r+0xa0>
 8016584:	6921      	ldr	r1, [r4, #16]
 8016586:	464a      	mov	r2, r9
 8016588:	f7fd ff95 	bl	80144b6 <memcpy>
 801658c:	89a3      	ldrh	r3, [r4, #12]
 801658e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016596:	81a3      	strh	r3, [r4, #12]
 8016598:	6126      	str	r6, [r4, #16]
 801659a:	6165      	str	r5, [r4, #20]
 801659c:	444e      	add	r6, r9
 801659e:	eba5 0509 	sub.w	r5, r5, r9
 80165a2:	6026      	str	r6, [r4, #0]
 80165a4:	60a5      	str	r5, [r4, #8]
 80165a6:	463e      	mov	r6, r7
 80165a8:	42be      	cmp	r6, r7
 80165aa:	d900      	bls.n	80165ae <__ssputs_r+0x70>
 80165ac:	463e      	mov	r6, r7
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	4632      	mov	r2, r6
 80165b2:	4641      	mov	r1, r8
 80165b4:	f000 fd5d 	bl	8017072 <memmove>
 80165b8:	68a3      	ldr	r3, [r4, #8]
 80165ba:	1b9b      	subs	r3, r3, r6
 80165bc:	60a3      	str	r3, [r4, #8]
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	4433      	add	r3, r6
 80165c2:	6023      	str	r3, [r4, #0]
 80165c4:	2000      	movs	r0, #0
 80165c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165ca:	462a      	mov	r2, r5
 80165cc:	f000 fdb0 	bl	8017130 <_realloc_r>
 80165d0:	4606      	mov	r6, r0
 80165d2:	2800      	cmp	r0, #0
 80165d4:	d1e0      	bne.n	8016598 <__ssputs_r+0x5a>
 80165d6:	6921      	ldr	r1, [r4, #16]
 80165d8:	4650      	mov	r0, sl
 80165da:	f7fe fe07 	bl	80151ec <_free_r>
 80165de:	230c      	movs	r3, #12
 80165e0:	f8ca 3000 	str.w	r3, [sl]
 80165e4:	89a3      	ldrh	r3, [r4, #12]
 80165e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165ea:	81a3      	strh	r3, [r4, #12]
 80165ec:	f04f 30ff 	mov.w	r0, #4294967295
 80165f0:	e7e9      	b.n	80165c6 <__ssputs_r+0x88>
	...

080165f4 <_svfiprintf_r>:
 80165f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165f8:	4698      	mov	r8, r3
 80165fa:	898b      	ldrh	r3, [r1, #12]
 80165fc:	061b      	lsls	r3, r3, #24
 80165fe:	b09d      	sub	sp, #116	; 0x74
 8016600:	4607      	mov	r7, r0
 8016602:	460d      	mov	r5, r1
 8016604:	4614      	mov	r4, r2
 8016606:	d50e      	bpl.n	8016626 <_svfiprintf_r+0x32>
 8016608:	690b      	ldr	r3, [r1, #16]
 801660a:	b963      	cbnz	r3, 8016626 <_svfiprintf_r+0x32>
 801660c:	2140      	movs	r1, #64	; 0x40
 801660e:	f7ff f9b9 	bl	8015984 <_malloc_r>
 8016612:	6028      	str	r0, [r5, #0]
 8016614:	6128      	str	r0, [r5, #16]
 8016616:	b920      	cbnz	r0, 8016622 <_svfiprintf_r+0x2e>
 8016618:	230c      	movs	r3, #12
 801661a:	603b      	str	r3, [r7, #0]
 801661c:	f04f 30ff 	mov.w	r0, #4294967295
 8016620:	e0d0      	b.n	80167c4 <_svfiprintf_r+0x1d0>
 8016622:	2340      	movs	r3, #64	; 0x40
 8016624:	616b      	str	r3, [r5, #20]
 8016626:	2300      	movs	r3, #0
 8016628:	9309      	str	r3, [sp, #36]	; 0x24
 801662a:	2320      	movs	r3, #32
 801662c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016630:	f8cd 800c 	str.w	r8, [sp, #12]
 8016634:	2330      	movs	r3, #48	; 0x30
 8016636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80167dc <_svfiprintf_r+0x1e8>
 801663a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801663e:	f04f 0901 	mov.w	r9, #1
 8016642:	4623      	mov	r3, r4
 8016644:	469a      	mov	sl, r3
 8016646:	f813 2b01 	ldrb.w	r2, [r3], #1
 801664a:	b10a      	cbz	r2, 8016650 <_svfiprintf_r+0x5c>
 801664c:	2a25      	cmp	r2, #37	; 0x25
 801664e:	d1f9      	bne.n	8016644 <_svfiprintf_r+0x50>
 8016650:	ebba 0b04 	subs.w	fp, sl, r4
 8016654:	d00b      	beq.n	801666e <_svfiprintf_r+0x7a>
 8016656:	465b      	mov	r3, fp
 8016658:	4622      	mov	r2, r4
 801665a:	4629      	mov	r1, r5
 801665c:	4638      	mov	r0, r7
 801665e:	f7ff ff6e 	bl	801653e <__ssputs_r>
 8016662:	3001      	adds	r0, #1
 8016664:	f000 80a9 	beq.w	80167ba <_svfiprintf_r+0x1c6>
 8016668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801666a:	445a      	add	r2, fp
 801666c:	9209      	str	r2, [sp, #36]	; 0x24
 801666e:	f89a 3000 	ldrb.w	r3, [sl]
 8016672:	2b00      	cmp	r3, #0
 8016674:	f000 80a1 	beq.w	80167ba <_svfiprintf_r+0x1c6>
 8016678:	2300      	movs	r3, #0
 801667a:	f04f 32ff 	mov.w	r2, #4294967295
 801667e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016682:	f10a 0a01 	add.w	sl, sl, #1
 8016686:	9304      	str	r3, [sp, #16]
 8016688:	9307      	str	r3, [sp, #28]
 801668a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801668e:	931a      	str	r3, [sp, #104]	; 0x68
 8016690:	4654      	mov	r4, sl
 8016692:	2205      	movs	r2, #5
 8016694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016698:	4850      	ldr	r0, [pc, #320]	; (80167dc <_svfiprintf_r+0x1e8>)
 801669a:	f7e9 fd99 	bl	80001d0 <memchr>
 801669e:	9a04      	ldr	r2, [sp, #16]
 80166a0:	b9d8      	cbnz	r0, 80166da <_svfiprintf_r+0xe6>
 80166a2:	06d0      	lsls	r0, r2, #27
 80166a4:	bf44      	itt	mi
 80166a6:	2320      	movmi	r3, #32
 80166a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166ac:	0711      	lsls	r1, r2, #28
 80166ae:	bf44      	itt	mi
 80166b0:	232b      	movmi	r3, #43	; 0x2b
 80166b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166b6:	f89a 3000 	ldrb.w	r3, [sl]
 80166ba:	2b2a      	cmp	r3, #42	; 0x2a
 80166bc:	d015      	beq.n	80166ea <_svfiprintf_r+0xf6>
 80166be:	9a07      	ldr	r2, [sp, #28]
 80166c0:	4654      	mov	r4, sl
 80166c2:	2000      	movs	r0, #0
 80166c4:	f04f 0c0a 	mov.w	ip, #10
 80166c8:	4621      	mov	r1, r4
 80166ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80166ce:	3b30      	subs	r3, #48	; 0x30
 80166d0:	2b09      	cmp	r3, #9
 80166d2:	d94d      	bls.n	8016770 <_svfiprintf_r+0x17c>
 80166d4:	b1b0      	cbz	r0, 8016704 <_svfiprintf_r+0x110>
 80166d6:	9207      	str	r2, [sp, #28]
 80166d8:	e014      	b.n	8016704 <_svfiprintf_r+0x110>
 80166da:	eba0 0308 	sub.w	r3, r0, r8
 80166de:	fa09 f303 	lsl.w	r3, r9, r3
 80166e2:	4313      	orrs	r3, r2
 80166e4:	9304      	str	r3, [sp, #16]
 80166e6:	46a2      	mov	sl, r4
 80166e8:	e7d2      	b.n	8016690 <_svfiprintf_r+0x9c>
 80166ea:	9b03      	ldr	r3, [sp, #12]
 80166ec:	1d19      	adds	r1, r3, #4
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	9103      	str	r1, [sp, #12]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	bfbb      	ittet	lt
 80166f6:	425b      	neglt	r3, r3
 80166f8:	f042 0202 	orrlt.w	r2, r2, #2
 80166fc:	9307      	strge	r3, [sp, #28]
 80166fe:	9307      	strlt	r3, [sp, #28]
 8016700:	bfb8      	it	lt
 8016702:	9204      	strlt	r2, [sp, #16]
 8016704:	7823      	ldrb	r3, [r4, #0]
 8016706:	2b2e      	cmp	r3, #46	; 0x2e
 8016708:	d10c      	bne.n	8016724 <_svfiprintf_r+0x130>
 801670a:	7863      	ldrb	r3, [r4, #1]
 801670c:	2b2a      	cmp	r3, #42	; 0x2a
 801670e:	d134      	bne.n	801677a <_svfiprintf_r+0x186>
 8016710:	9b03      	ldr	r3, [sp, #12]
 8016712:	1d1a      	adds	r2, r3, #4
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	9203      	str	r2, [sp, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	bfb8      	it	lt
 801671c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016720:	3402      	adds	r4, #2
 8016722:	9305      	str	r3, [sp, #20]
 8016724:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80167ec <_svfiprintf_r+0x1f8>
 8016728:	7821      	ldrb	r1, [r4, #0]
 801672a:	2203      	movs	r2, #3
 801672c:	4650      	mov	r0, sl
 801672e:	f7e9 fd4f 	bl	80001d0 <memchr>
 8016732:	b138      	cbz	r0, 8016744 <_svfiprintf_r+0x150>
 8016734:	9b04      	ldr	r3, [sp, #16]
 8016736:	eba0 000a 	sub.w	r0, r0, sl
 801673a:	2240      	movs	r2, #64	; 0x40
 801673c:	4082      	lsls	r2, r0
 801673e:	4313      	orrs	r3, r2
 8016740:	3401      	adds	r4, #1
 8016742:	9304      	str	r3, [sp, #16]
 8016744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016748:	4825      	ldr	r0, [pc, #148]	; (80167e0 <_svfiprintf_r+0x1ec>)
 801674a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801674e:	2206      	movs	r2, #6
 8016750:	f7e9 fd3e 	bl	80001d0 <memchr>
 8016754:	2800      	cmp	r0, #0
 8016756:	d038      	beq.n	80167ca <_svfiprintf_r+0x1d6>
 8016758:	4b22      	ldr	r3, [pc, #136]	; (80167e4 <_svfiprintf_r+0x1f0>)
 801675a:	bb1b      	cbnz	r3, 80167a4 <_svfiprintf_r+0x1b0>
 801675c:	9b03      	ldr	r3, [sp, #12]
 801675e:	3307      	adds	r3, #7
 8016760:	f023 0307 	bic.w	r3, r3, #7
 8016764:	3308      	adds	r3, #8
 8016766:	9303      	str	r3, [sp, #12]
 8016768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801676a:	4433      	add	r3, r6
 801676c:	9309      	str	r3, [sp, #36]	; 0x24
 801676e:	e768      	b.n	8016642 <_svfiprintf_r+0x4e>
 8016770:	fb0c 3202 	mla	r2, ip, r2, r3
 8016774:	460c      	mov	r4, r1
 8016776:	2001      	movs	r0, #1
 8016778:	e7a6      	b.n	80166c8 <_svfiprintf_r+0xd4>
 801677a:	2300      	movs	r3, #0
 801677c:	3401      	adds	r4, #1
 801677e:	9305      	str	r3, [sp, #20]
 8016780:	4619      	mov	r1, r3
 8016782:	f04f 0c0a 	mov.w	ip, #10
 8016786:	4620      	mov	r0, r4
 8016788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801678c:	3a30      	subs	r2, #48	; 0x30
 801678e:	2a09      	cmp	r2, #9
 8016790:	d903      	bls.n	801679a <_svfiprintf_r+0x1a6>
 8016792:	2b00      	cmp	r3, #0
 8016794:	d0c6      	beq.n	8016724 <_svfiprintf_r+0x130>
 8016796:	9105      	str	r1, [sp, #20]
 8016798:	e7c4      	b.n	8016724 <_svfiprintf_r+0x130>
 801679a:	fb0c 2101 	mla	r1, ip, r1, r2
 801679e:	4604      	mov	r4, r0
 80167a0:	2301      	movs	r3, #1
 80167a2:	e7f0      	b.n	8016786 <_svfiprintf_r+0x192>
 80167a4:	ab03      	add	r3, sp, #12
 80167a6:	9300      	str	r3, [sp, #0]
 80167a8:	462a      	mov	r2, r5
 80167aa:	4b0f      	ldr	r3, [pc, #60]	; (80167e8 <_svfiprintf_r+0x1f4>)
 80167ac:	a904      	add	r1, sp, #16
 80167ae:	4638      	mov	r0, r7
 80167b0:	f7fc fe80 	bl	80134b4 <_printf_float>
 80167b4:	1c42      	adds	r2, r0, #1
 80167b6:	4606      	mov	r6, r0
 80167b8:	d1d6      	bne.n	8016768 <_svfiprintf_r+0x174>
 80167ba:	89ab      	ldrh	r3, [r5, #12]
 80167bc:	065b      	lsls	r3, r3, #25
 80167be:	f53f af2d 	bmi.w	801661c <_svfiprintf_r+0x28>
 80167c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167c4:	b01d      	add	sp, #116	; 0x74
 80167c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ca:	ab03      	add	r3, sp, #12
 80167cc:	9300      	str	r3, [sp, #0]
 80167ce:	462a      	mov	r2, r5
 80167d0:	4b05      	ldr	r3, [pc, #20]	; (80167e8 <_svfiprintf_r+0x1f4>)
 80167d2:	a904      	add	r1, sp, #16
 80167d4:	4638      	mov	r0, r7
 80167d6:	f7fd f911 	bl	80139fc <_printf_i>
 80167da:	e7eb      	b.n	80167b4 <_svfiprintf_r+0x1c0>
 80167dc:	0801889d 	.word	0x0801889d
 80167e0:	080188a7 	.word	0x080188a7
 80167e4:	080134b5 	.word	0x080134b5
 80167e8:	0801653f 	.word	0x0801653f
 80167ec:	080188a3 	.word	0x080188a3

080167f0 <_sungetc_r>:
 80167f0:	b538      	push	{r3, r4, r5, lr}
 80167f2:	1c4b      	adds	r3, r1, #1
 80167f4:	4614      	mov	r4, r2
 80167f6:	d103      	bne.n	8016800 <_sungetc_r+0x10>
 80167f8:	f04f 35ff 	mov.w	r5, #4294967295
 80167fc:	4628      	mov	r0, r5
 80167fe:	bd38      	pop	{r3, r4, r5, pc}
 8016800:	8993      	ldrh	r3, [r2, #12]
 8016802:	f023 0320 	bic.w	r3, r3, #32
 8016806:	8193      	strh	r3, [r2, #12]
 8016808:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801680a:	6852      	ldr	r2, [r2, #4]
 801680c:	b2cd      	uxtb	r5, r1
 801680e:	b18b      	cbz	r3, 8016834 <_sungetc_r+0x44>
 8016810:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016812:	4293      	cmp	r3, r2
 8016814:	dd08      	ble.n	8016828 <_sungetc_r+0x38>
 8016816:	6823      	ldr	r3, [r4, #0]
 8016818:	1e5a      	subs	r2, r3, #1
 801681a:	6022      	str	r2, [r4, #0]
 801681c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016820:	6863      	ldr	r3, [r4, #4]
 8016822:	3301      	adds	r3, #1
 8016824:	6063      	str	r3, [r4, #4]
 8016826:	e7e9      	b.n	80167fc <_sungetc_r+0xc>
 8016828:	4621      	mov	r1, r4
 801682a:	f000 fbe8 	bl	8016ffe <__submore>
 801682e:	2800      	cmp	r0, #0
 8016830:	d0f1      	beq.n	8016816 <_sungetc_r+0x26>
 8016832:	e7e1      	b.n	80167f8 <_sungetc_r+0x8>
 8016834:	6921      	ldr	r1, [r4, #16]
 8016836:	6823      	ldr	r3, [r4, #0]
 8016838:	b151      	cbz	r1, 8016850 <_sungetc_r+0x60>
 801683a:	4299      	cmp	r1, r3
 801683c:	d208      	bcs.n	8016850 <_sungetc_r+0x60>
 801683e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016842:	42a9      	cmp	r1, r5
 8016844:	d104      	bne.n	8016850 <_sungetc_r+0x60>
 8016846:	3b01      	subs	r3, #1
 8016848:	3201      	adds	r2, #1
 801684a:	6023      	str	r3, [r4, #0]
 801684c:	6062      	str	r2, [r4, #4]
 801684e:	e7d5      	b.n	80167fc <_sungetc_r+0xc>
 8016850:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016858:	6363      	str	r3, [r4, #52]	; 0x34
 801685a:	2303      	movs	r3, #3
 801685c:	63a3      	str	r3, [r4, #56]	; 0x38
 801685e:	4623      	mov	r3, r4
 8016860:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016864:	6023      	str	r3, [r4, #0]
 8016866:	2301      	movs	r3, #1
 8016868:	e7dc      	b.n	8016824 <_sungetc_r+0x34>

0801686a <__ssrefill_r>:
 801686a:	b510      	push	{r4, lr}
 801686c:	460c      	mov	r4, r1
 801686e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016870:	b169      	cbz	r1, 801688e <__ssrefill_r+0x24>
 8016872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016876:	4299      	cmp	r1, r3
 8016878:	d001      	beq.n	801687e <__ssrefill_r+0x14>
 801687a:	f7fe fcb7 	bl	80151ec <_free_r>
 801687e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016880:	6063      	str	r3, [r4, #4]
 8016882:	2000      	movs	r0, #0
 8016884:	6360      	str	r0, [r4, #52]	; 0x34
 8016886:	b113      	cbz	r3, 801688e <__ssrefill_r+0x24>
 8016888:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801688a:	6023      	str	r3, [r4, #0]
 801688c:	bd10      	pop	{r4, pc}
 801688e:	6923      	ldr	r3, [r4, #16]
 8016890:	6023      	str	r3, [r4, #0]
 8016892:	2300      	movs	r3, #0
 8016894:	6063      	str	r3, [r4, #4]
 8016896:	89a3      	ldrh	r3, [r4, #12]
 8016898:	f043 0320 	orr.w	r3, r3, #32
 801689c:	81a3      	strh	r3, [r4, #12]
 801689e:	f04f 30ff 	mov.w	r0, #4294967295
 80168a2:	e7f3      	b.n	801688c <__ssrefill_r+0x22>

080168a4 <__ssvfiscanf_r>:
 80168a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168a8:	460c      	mov	r4, r1
 80168aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80168ae:	2100      	movs	r1, #0
 80168b0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80168b4:	49a6      	ldr	r1, [pc, #664]	; (8016b50 <__ssvfiscanf_r+0x2ac>)
 80168b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80168b8:	f10d 0804 	add.w	r8, sp, #4
 80168bc:	49a5      	ldr	r1, [pc, #660]	; (8016b54 <__ssvfiscanf_r+0x2b0>)
 80168be:	4fa6      	ldr	r7, [pc, #664]	; (8016b58 <__ssvfiscanf_r+0x2b4>)
 80168c0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8016b5c <__ssvfiscanf_r+0x2b8>
 80168c4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80168c8:	4606      	mov	r6, r0
 80168ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	7813      	ldrb	r3, [r2, #0]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	f000 815a 	beq.w	8016b8a <__ssvfiscanf_r+0x2e6>
 80168d6:	5cf9      	ldrb	r1, [r7, r3]
 80168d8:	f011 0108 	ands.w	r1, r1, #8
 80168dc:	f102 0501 	add.w	r5, r2, #1
 80168e0:	d019      	beq.n	8016916 <__ssvfiscanf_r+0x72>
 80168e2:	6863      	ldr	r3, [r4, #4]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	dd0f      	ble.n	8016908 <__ssvfiscanf_r+0x64>
 80168e8:	6823      	ldr	r3, [r4, #0]
 80168ea:	781a      	ldrb	r2, [r3, #0]
 80168ec:	5cba      	ldrb	r2, [r7, r2]
 80168ee:	0712      	lsls	r2, r2, #28
 80168f0:	d401      	bmi.n	80168f6 <__ssvfiscanf_r+0x52>
 80168f2:	462a      	mov	r2, r5
 80168f4:	e7eb      	b.n	80168ce <__ssvfiscanf_r+0x2a>
 80168f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80168f8:	3201      	adds	r2, #1
 80168fa:	9245      	str	r2, [sp, #276]	; 0x114
 80168fc:	6862      	ldr	r2, [r4, #4]
 80168fe:	3301      	adds	r3, #1
 8016900:	3a01      	subs	r2, #1
 8016902:	6062      	str	r2, [r4, #4]
 8016904:	6023      	str	r3, [r4, #0]
 8016906:	e7ec      	b.n	80168e2 <__ssvfiscanf_r+0x3e>
 8016908:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801690a:	4621      	mov	r1, r4
 801690c:	4630      	mov	r0, r6
 801690e:	4798      	blx	r3
 8016910:	2800      	cmp	r0, #0
 8016912:	d0e9      	beq.n	80168e8 <__ssvfiscanf_r+0x44>
 8016914:	e7ed      	b.n	80168f2 <__ssvfiscanf_r+0x4e>
 8016916:	2b25      	cmp	r3, #37	; 0x25
 8016918:	d012      	beq.n	8016940 <__ssvfiscanf_r+0x9c>
 801691a:	469a      	mov	sl, r3
 801691c:	6863      	ldr	r3, [r4, #4]
 801691e:	2b00      	cmp	r3, #0
 8016920:	f340 8091 	ble.w	8016a46 <__ssvfiscanf_r+0x1a2>
 8016924:	6822      	ldr	r2, [r4, #0]
 8016926:	7813      	ldrb	r3, [r2, #0]
 8016928:	4553      	cmp	r3, sl
 801692a:	f040 812e 	bne.w	8016b8a <__ssvfiscanf_r+0x2e6>
 801692e:	6863      	ldr	r3, [r4, #4]
 8016930:	3b01      	subs	r3, #1
 8016932:	6063      	str	r3, [r4, #4]
 8016934:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016936:	3201      	adds	r2, #1
 8016938:	3301      	adds	r3, #1
 801693a:	6022      	str	r2, [r4, #0]
 801693c:	9345      	str	r3, [sp, #276]	; 0x114
 801693e:	e7d8      	b.n	80168f2 <__ssvfiscanf_r+0x4e>
 8016940:	9141      	str	r1, [sp, #260]	; 0x104
 8016942:	9143      	str	r1, [sp, #268]	; 0x10c
 8016944:	7853      	ldrb	r3, [r2, #1]
 8016946:	2b2a      	cmp	r3, #42	; 0x2a
 8016948:	bf02      	ittt	eq
 801694a:	2310      	moveq	r3, #16
 801694c:	1c95      	addeq	r5, r2, #2
 801694e:	9341      	streq	r3, [sp, #260]	; 0x104
 8016950:	220a      	movs	r2, #10
 8016952:	46aa      	mov	sl, r5
 8016954:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8016958:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801695c:	2b09      	cmp	r3, #9
 801695e:	d91c      	bls.n	801699a <__ssvfiscanf_r+0xf6>
 8016960:	487e      	ldr	r0, [pc, #504]	; (8016b5c <__ssvfiscanf_r+0x2b8>)
 8016962:	2203      	movs	r2, #3
 8016964:	f7e9 fc34 	bl	80001d0 <memchr>
 8016968:	b138      	cbz	r0, 801697a <__ssvfiscanf_r+0xd6>
 801696a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801696c:	eba0 0009 	sub.w	r0, r0, r9
 8016970:	2301      	movs	r3, #1
 8016972:	4083      	lsls	r3, r0
 8016974:	4313      	orrs	r3, r2
 8016976:	9341      	str	r3, [sp, #260]	; 0x104
 8016978:	4655      	mov	r5, sl
 801697a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801697e:	2b78      	cmp	r3, #120	; 0x78
 8016980:	d806      	bhi.n	8016990 <__ssvfiscanf_r+0xec>
 8016982:	2b57      	cmp	r3, #87	; 0x57
 8016984:	d810      	bhi.n	80169a8 <__ssvfiscanf_r+0x104>
 8016986:	2b25      	cmp	r3, #37	; 0x25
 8016988:	d0c7      	beq.n	801691a <__ssvfiscanf_r+0x76>
 801698a:	d857      	bhi.n	8016a3c <__ssvfiscanf_r+0x198>
 801698c:	2b00      	cmp	r3, #0
 801698e:	d065      	beq.n	8016a5c <__ssvfiscanf_r+0x1b8>
 8016990:	2303      	movs	r3, #3
 8016992:	9347      	str	r3, [sp, #284]	; 0x11c
 8016994:	230a      	movs	r3, #10
 8016996:	9342      	str	r3, [sp, #264]	; 0x108
 8016998:	e076      	b.n	8016a88 <__ssvfiscanf_r+0x1e4>
 801699a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801699c:	fb02 1103 	mla	r1, r2, r3, r1
 80169a0:	3930      	subs	r1, #48	; 0x30
 80169a2:	9143      	str	r1, [sp, #268]	; 0x10c
 80169a4:	4655      	mov	r5, sl
 80169a6:	e7d4      	b.n	8016952 <__ssvfiscanf_r+0xae>
 80169a8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80169ac:	2a20      	cmp	r2, #32
 80169ae:	d8ef      	bhi.n	8016990 <__ssvfiscanf_r+0xec>
 80169b0:	a101      	add	r1, pc, #4	; (adr r1, 80169b8 <__ssvfiscanf_r+0x114>)
 80169b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80169b6:	bf00      	nop
 80169b8:	08016a6b 	.word	0x08016a6b
 80169bc:	08016991 	.word	0x08016991
 80169c0:	08016991 	.word	0x08016991
 80169c4:	08016ac9 	.word	0x08016ac9
 80169c8:	08016991 	.word	0x08016991
 80169cc:	08016991 	.word	0x08016991
 80169d0:	08016991 	.word	0x08016991
 80169d4:	08016991 	.word	0x08016991
 80169d8:	08016991 	.word	0x08016991
 80169dc:	08016991 	.word	0x08016991
 80169e0:	08016991 	.word	0x08016991
 80169e4:	08016adf 	.word	0x08016adf
 80169e8:	08016ac5 	.word	0x08016ac5
 80169ec:	08016a43 	.word	0x08016a43
 80169f0:	08016a43 	.word	0x08016a43
 80169f4:	08016a43 	.word	0x08016a43
 80169f8:	08016991 	.word	0x08016991
 80169fc:	08016a81 	.word	0x08016a81
 8016a00:	08016991 	.word	0x08016991
 8016a04:	08016991 	.word	0x08016991
 8016a08:	08016991 	.word	0x08016991
 8016a0c:	08016991 	.word	0x08016991
 8016a10:	08016aef 	.word	0x08016aef
 8016a14:	08016abd 	.word	0x08016abd
 8016a18:	08016a63 	.word	0x08016a63
 8016a1c:	08016991 	.word	0x08016991
 8016a20:	08016991 	.word	0x08016991
 8016a24:	08016aeb 	.word	0x08016aeb
 8016a28:	08016991 	.word	0x08016991
 8016a2c:	08016ac5 	.word	0x08016ac5
 8016a30:	08016991 	.word	0x08016991
 8016a34:	08016991 	.word	0x08016991
 8016a38:	08016a6b 	.word	0x08016a6b
 8016a3c:	3b45      	subs	r3, #69	; 0x45
 8016a3e:	2b02      	cmp	r3, #2
 8016a40:	d8a6      	bhi.n	8016990 <__ssvfiscanf_r+0xec>
 8016a42:	2305      	movs	r3, #5
 8016a44:	e01f      	b.n	8016a86 <__ssvfiscanf_r+0x1e2>
 8016a46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016a48:	4621      	mov	r1, r4
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	4798      	blx	r3
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f43f af68 	beq.w	8016924 <__ssvfiscanf_r+0x80>
 8016a54:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016a56:	2800      	cmp	r0, #0
 8016a58:	f040 808d 	bne.w	8016b76 <__ssvfiscanf_r+0x2d2>
 8016a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a60:	e08f      	b.n	8016b82 <__ssvfiscanf_r+0x2de>
 8016a62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a64:	f042 0220 	orr.w	r2, r2, #32
 8016a68:	9241      	str	r2, [sp, #260]	; 0x104
 8016a6a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016a70:	9241      	str	r2, [sp, #260]	; 0x104
 8016a72:	2210      	movs	r2, #16
 8016a74:	2b6f      	cmp	r3, #111	; 0x6f
 8016a76:	9242      	str	r2, [sp, #264]	; 0x108
 8016a78:	bf34      	ite	cc
 8016a7a:	2303      	movcc	r3, #3
 8016a7c:	2304      	movcs	r3, #4
 8016a7e:	e002      	b.n	8016a86 <__ssvfiscanf_r+0x1e2>
 8016a80:	2300      	movs	r3, #0
 8016a82:	9342      	str	r3, [sp, #264]	; 0x108
 8016a84:	2303      	movs	r3, #3
 8016a86:	9347      	str	r3, [sp, #284]	; 0x11c
 8016a88:	6863      	ldr	r3, [r4, #4]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	dd3d      	ble.n	8016b0a <__ssvfiscanf_r+0x266>
 8016a8e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016a90:	0659      	lsls	r1, r3, #25
 8016a92:	d404      	bmi.n	8016a9e <__ssvfiscanf_r+0x1fa>
 8016a94:	6823      	ldr	r3, [r4, #0]
 8016a96:	781a      	ldrb	r2, [r3, #0]
 8016a98:	5cba      	ldrb	r2, [r7, r2]
 8016a9a:	0712      	lsls	r2, r2, #28
 8016a9c:	d43c      	bmi.n	8016b18 <__ssvfiscanf_r+0x274>
 8016a9e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016aa0:	2b02      	cmp	r3, #2
 8016aa2:	dc4b      	bgt.n	8016b3c <__ssvfiscanf_r+0x298>
 8016aa4:	466b      	mov	r3, sp
 8016aa6:	4622      	mov	r2, r4
 8016aa8:	a941      	add	r1, sp, #260	; 0x104
 8016aaa:	4630      	mov	r0, r6
 8016aac:	f000 f872 	bl	8016b94 <_scanf_chars>
 8016ab0:	2801      	cmp	r0, #1
 8016ab2:	d06a      	beq.n	8016b8a <__ssvfiscanf_r+0x2e6>
 8016ab4:	2802      	cmp	r0, #2
 8016ab6:	f47f af1c 	bne.w	80168f2 <__ssvfiscanf_r+0x4e>
 8016aba:	e7cb      	b.n	8016a54 <__ssvfiscanf_r+0x1b0>
 8016abc:	2308      	movs	r3, #8
 8016abe:	9342      	str	r3, [sp, #264]	; 0x108
 8016ac0:	2304      	movs	r3, #4
 8016ac2:	e7e0      	b.n	8016a86 <__ssvfiscanf_r+0x1e2>
 8016ac4:	220a      	movs	r2, #10
 8016ac6:	e7d5      	b.n	8016a74 <__ssvfiscanf_r+0x1d0>
 8016ac8:	4629      	mov	r1, r5
 8016aca:	4640      	mov	r0, r8
 8016acc:	f000 fa5e 	bl	8016f8c <__sccl>
 8016ad0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ad6:	9341      	str	r3, [sp, #260]	; 0x104
 8016ad8:	4605      	mov	r5, r0
 8016ada:	2301      	movs	r3, #1
 8016adc:	e7d3      	b.n	8016a86 <__ssvfiscanf_r+0x1e2>
 8016ade:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ae4:	9341      	str	r3, [sp, #260]	; 0x104
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	e7cd      	b.n	8016a86 <__ssvfiscanf_r+0x1e2>
 8016aea:	2302      	movs	r3, #2
 8016aec:	e7cb      	b.n	8016a86 <__ssvfiscanf_r+0x1e2>
 8016aee:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016af0:	06c3      	lsls	r3, r0, #27
 8016af2:	f53f aefe 	bmi.w	80168f2 <__ssvfiscanf_r+0x4e>
 8016af6:	9b00      	ldr	r3, [sp, #0]
 8016af8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016afa:	1d19      	adds	r1, r3, #4
 8016afc:	9100      	str	r1, [sp, #0]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	07c0      	lsls	r0, r0, #31
 8016b02:	bf4c      	ite	mi
 8016b04:	801a      	strhmi	r2, [r3, #0]
 8016b06:	601a      	strpl	r2, [r3, #0]
 8016b08:	e6f3      	b.n	80168f2 <__ssvfiscanf_r+0x4e>
 8016b0a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b0c:	4621      	mov	r1, r4
 8016b0e:	4630      	mov	r0, r6
 8016b10:	4798      	blx	r3
 8016b12:	2800      	cmp	r0, #0
 8016b14:	d0bb      	beq.n	8016a8e <__ssvfiscanf_r+0x1ea>
 8016b16:	e79d      	b.n	8016a54 <__ssvfiscanf_r+0x1b0>
 8016b18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b1a:	3201      	adds	r2, #1
 8016b1c:	9245      	str	r2, [sp, #276]	; 0x114
 8016b1e:	6862      	ldr	r2, [r4, #4]
 8016b20:	3a01      	subs	r2, #1
 8016b22:	2a00      	cmp	r2, #0
 8016b24:	6062      	str	r2, [r4, #4]
 8016b26:	dd02      	ble.n	8016b2e <__ssvfiscanf_r+0x28a>
 8016b28:	3301      	adds	r3, #1
 8016b2a:	6023      	str	r3, [r4, #0]
 8016b2c:	e7b2      	b.n	8016a94 <__ssvfiscanf_r+0x1f0>
 8016b2e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b30:	4621      	mov	r1, r4
 8016b32:	4630      	mov	r0, r6
 8016b34:	4798      	blx	r3
 8016b36:	2800      	cmp	r0, #0
 8016b38:	d0ac      	beq.n	8016a94 <__ssvfiscanf_r+0x1f0>
 8016b3a:	e78b      	b.n	8016a54 <__ssvfiscanf_r+0x1b0>
 8016b3c:	2b04      	cmp	r3, #4
 8016b3e:	dc0f      	bgt.n	8016b60 <__ssvfiscanf_r+0x2bc>
 8016b40:	466b      	mov	r3, sp
 8016b42:	4622      	mov	r2, r4
 8016b44:	a941      	add	r1, sp, #260	; 0x104
 8016b46:	4630      	mov	r0, r6
 8016b48:	f000 f87e 	bl	8016c48 <_scanf_i>
 8016b4c:	e7b0      	b.n	8016ab0 <__ssvfiscanf_r+0x20c>
 8016b4e:	bf00      	nop
 8016b50:	080167f1 	.word	0x080167f1
 8016b54:	0801686b 	.word	0x0801686b
 8016b58:	0801879d 	.word	0x0801879d
 8016b5c:	080188a3 	.word	0x080188a3
 8016b60:	4b0b      	ldr	r3, [pc, #44]	; (8016b90 <__ssvfiscanf_r+0x2ec>)
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	f43f aec5 	beq.w	80168f2 <__ssvfiscanf_r+0x4e>
 8016b68:	466b      	mov	r3, sp
 8016b6a:	4622      	mov	r2, r4
 8016b6c:	a941      	add	r1, sp, #260	; 0x104
 8016b6e:	4630      	mov	r0, r6
 8016b70:	f7fd f866 	bl	8013c40 <_scanf_float>
 8016b74:	e79c      	b.n	8016ab0 <__ssvfiscanf_r+0x20c>
 8016b76:	89a3      	ldrh	r3, [r4, #12]
 8016b78:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016b7c:	bf18      	it	ne
 8016b7e:	f04f 30ff 	movne.w	r0, #4294967295
 8016b82:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8016b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b8a:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016b8c:	e7f9      	b.n	8016b82 <__ssvfiscanf_r+0x2de>
 8016b8e:	bf00      	nop
 8016b90:	08013c41 	.word	0x08013c41

08016b94 <_scanf_chars>:
 8016b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b98:	4615      	mov	r5, r2
 8016b9a:	688a      	ldr	r2, [r1, #8]
 8016b9c:	4680      	mov	r8, r0
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	b932      	cbnz	r2, 8016bb0 <_scanf_chars+0x1c>
 8016ba2:	698a      	ldr	r2, [r1, #24]
 8016ba4:	2a00      	cmp	r2, #0
 8016ba6:	bf0c      	ite	eq
 8016ba8:	2201      	moveq	r2, #1
 8016baa:	f04f 32ff 	movne.w	r2, #4294967295
 8016bae:	608a      	str	r2, [r1, #8]
 8016bb0:	6822      	ldr	r2, [r4, #0]
 8016bb2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8016c44 <_scanf_chars+0xb0>
 8016bb6:	06d1      	lsls	r1, r2, #27
 8016bb8:	bf5f      	itttt	pl
 8016bba:	681a      	ldrpl	r2, [r3, #0]
 8016bbc:	1d11      	addpl	r1, r2, #4
 8016bbe:	6019      	strpl	r1, [r3, #0]
 8016bc0:	6816      	ldrpl	r6, [r2, #0]
 8016bc2:	2700      	movs	r7, #0
 8016bc4:	69a0      	ldr	r0, [r4, #24]
 8016bc6:	b188      	cbz	r0, 8016bec <_scanf_chars+0x58>
 8016bc8:	2801      	cmp	r0, #1
 8016bca:	d107      	bne.n	8016bdc <_scanf_chars+0x48>
 8016bcc:	682a      	ldr	r2, [r5, #0]
 8016bce:	7811      	ldrb	r1, [r2, #0]
 8016bd0:	6962      	ldr	r2, [r4, #20]
 8016bd2:	5c52      	ldrb	r2, [r2, r1]
 8016bd4:	b952      	cbnz	r2, 8016bec <_scanf_chars+0x58>
 8016bd6:	2f00      	cmp	r7, #0
 8016bd8:	d031      	beq.n	8016c3e <_scanf_chars+0xaa>
 8016bda:	e022      	b.n	8016c22 <_scanf_chars+0x8e>
 8016bdc:	2802      	cmp	r0, #2
 8016bde:	d120      	bne.n	8016c22 <_scanf_chars+0x8e>
 8016be0:	682b      	ldr	r3, [r5, #0]
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016be8:	071b      	lsls	r3, r3, #28
 8016bea:	d41a      	bmi.n	8016c22 <_scanf_chars+0x8e>
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	06da      	lsls	r2, r3, #27
 8016bf0:	bf5e      	ittt	pl
 8016bf2:	682b      	ldrpl	r3, [r5, #0]
 8016bf4:	781b      	ldrbpl	r3, [r3, #0]
 8016bf6:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016bfa:	682a      	ldr	r2, [r5, #0]
 8016bfc:	686b      	ldr	r3, [r5, #4]
 8016bfe:	3201      	adds	r2, #1
 8016c00:	602a      	str	r2, [r5, #0]
 8016c02:	68a2      	ldr	r2, [r4, #8]
 8016c04:	3b01      	subs	r3, #1
 8016c06:	3a01      	subs	r2, #1
 8016c08:	606b      	str	r3, [r5, #4]
 8016c0a:	3701      	adds	r7, #1
 8016c0c:	60a2      	str	r2, [r4, #8]
 8016c0e:	b142      	cbz	r2, 8016c22 <_scanf_chars+0x8e>
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	dcd7      	bgt.n	8016bc4 <_scanf_chars+0x30>
 8016c14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016c18:	4629      	mov	r1, r5
 8016c1a:	4640      	mov	r0, r8
 8016c1c:	4798      	blx	r3
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d0d0      	beq.n	8016bc4 <_scanf_chars+0x30>
 8016c22:	6823      	ldr	r3, [r4, #0]
 8016c24:	f013 0310 	ands.w	r3, r3, #16
 8016c28:	d105      	bne.n	8016c36 <_scanf_chars+0xa2>
 8016c2a:	68e2      	ldr	r2, [r4, #12]
 8016c2c:	3201      	adds	r2, #1
 8016c2e:	60e2      	str	r2, [r4, #12]
 8016c30:	69a2      	ldr	r2, [r4, #24]
 8016c32:	b102      	cbz	r2, 8016c36 <_scanf_chars+0xa2>
 8016c34:	7033      	strb	r3, [r6, #0]
 8016c36:	6923      	ldr	r3, [r4, #16]
 8016c38:	443b      	add	r3, r7
 8016c3a:	6123      	str	r3, [r4, #16]
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c42:	bf00      	nop
 8016c44:	0801879d 	.word	0x0801879d

08016c48 <_scanf_i>:
 8016c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c4c:	4698      	mov	r8, r3
 8016c4e:	4b74      	ldr	r3, [pc, #464]	; (8016e20 <_scanf_i+0x1d8>)
 8016c50:	460c      	mov	r4, r1
 8016c52:	4682      	mov	sl, r0
 8016c54:	4616      	mov	r6, r2
 8016c56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016c5a:	b087      	sub	sp, #28
 8016c5c:	ab03      	add	r3, sp, #12
 8016c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016c62:	4b70      	ldr	r3, [pc, #448]	; (8016e24 <_scanf_i+0x1dc>)
 8016c64:	69a1      	ldr	r1, [r4, #24]
 8016c66:	4a70      	ldr	r2, [pc, #448]	; (8016e28 <_scanf_i+0x1e0>)
 8016c68:	2903      	cmp	r1, #3
 8016c6a:	bf18      	it	ne
 8016c6c:	461a      	movne	r2, r3
 8016c6e:	68a3      	ldr	r3, [r4, #8]
 8016c70:	9201      	str	r2, [sp, #4]
 8016c72:	1e5a      	subs	r2, r3, #1
 8016c74:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016c78:	bf88      	it	hi
 8016c7a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016c7e:	4627      	mov	r7, r4
 8016c80:	bf82      	ittt	hi
 8016c82:	eb03 0905 	addhi.w	r9, r3, r5
 8016c86:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016c8a:	60a3      	strhi	r3, [r4, #8]
 8016c8c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016c90:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016c94:	bf98      	it	ls
 8016c96:	f04f 0900 	movls.w	r9, #0
 8016c9a:	6023      	str	r3, [r4, #0]
 8016c9c:	463d      	mov	r5, r7
 8016c9e:	f04f 0b00 	mov.w	fp, #0
 8016ca2:	6831      	ldr	r1, [r6, #0]
 8016ca4:	ab03      	add	r3, sp, #12
 8016ca6:	7809      	ldrb	r1, [r1, #0]
 8016ca8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8016cac:	2202      	movs	r2, #2
 8016cae:	f7e9 fa8f 	bl	80001d0 <memchr>
 8016cb2:	b328      	cbz	r0, 8016d00 <_scanf_i+0xb8>
 8016cb4:	f1bb 0f01 	cmp.w	fp, #1
 8016cb8:	d159      	bne.n	8016d6e <_scanf_i+0x126>
 8016cba:	6862      	ldr	r2, [r4, #4]
 8016cbc:	b92a      	cbnz	r2, 8016cca <_scanf_i+0x82>
 8016cbe:	6822      	ldr	r2, [r4, #0]
 8016cc0:	2308      	movs	r3, #8
 8016cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016cc6:	6063      	str	r3, [r4, #4]
 8016cc8:	6022      	str	r2, [r4, #0]
 8016cca:	6822      	ldr	r2, [r4, #0]
 8016ccc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016cd0:	6022      	str	r2, [r4, #0]
 8016cd2:	68a2      	ldr	r2, [r4, #8]
 8016cd4:	1e51      	subs	r1, r2, #1
 8016cd6:	60a1      	str	r1, [r4, #8]
 8016cd8:	b192      	cbz	r2, 8016d00 <_scanf_i+0xb8>
 8016cda:	6832      	ldr	r2, [r6, #0]
 8016cdc:	1c51      	adds	r1, r2, #1
 8016cde:	6031      	str	r1, [r6, #0]
 8016ce0:	7812      	ldrb	r2, [r2, #0]
 8016ce2:	f805 2b01 	strb.w	r2, [r5], #1
 8016ce6:	6872      	ldr	r2, [r6, #4]
 8016ce8:	3a01      	subs	r2, #1
 8016cea:	2a00      	cmp	r2, #0
 8016cec:	6072      	str	r2, [r6, #4]
 8016cee:	dc07      	bgt.n	8016d00 <_scanf_i+0xb8>
 8016cf0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8016cf4:	4631      	mov	r1, r6
 8016cf6:	4650      	mov	r0, sl
 8016cf8:	4790      	blx	r2
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	f040 8085 	bne.w	8016e0a <_scanf_i+0x1c2>
 8016d00:	f10b 0b01 	add.w	fp, fp, #1
 8016d04:	f1bb 0f03 	cmp.w	fp, #3
 8016d08:	d1cb      	bne.n	8016ca2 <_scanf_i+0x5a>
 8016d0a:	6863      	ldr	r3, [r4, #4]
 8016d0c:	b90b      	cbnz	r3, 8016d12 <_scanf_i+0xca>
 8016d0e:	230a      	movs	r3, #10
 8016d10:	6063      	str	r3, [r4, #4]
 8016d12:	6863      	ldr	r3, [r4, #4]
 8016d14:	4945      	ldr	r1, [pc, #276]	; (8016e2c <_scanf_i+0x1e4>)
 8016d16:	6960      	ldr	r0, [r4, #20]
 8016d18:	1ac9      	subs	r1, r1, r3
 8016d1a:	f000 f937 	bl	8016f8c <__sccl>
 8016d1e:	f04f 0b00 	mov.w	fp, #0
 8016d22:	68a3      	ldr	r3, [r4, #8]
 8016d24:	6822      	ldr	r2, [r4, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d03d      	beq.n	8016da6 <_scanf_i+0x15e>
 8016d2a:	6831      	ldr	r1, [r6, #0]
 8016d2c:	6960      	ldr	r0, [r4, #20]
 8016d2e:	f891 c000 	ldrb.w	ip, [r1]
 8016d32:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016d36:	2800      	cmp	r0, #0
 8016d38:	d035      	beq.n	8016da6 <_scanf_i+0x15e>
 8016d3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016d3e:	d124      	bne.n	8016d8a <_scanf_i+0x142>
 8016d40:	0510      	lsls	r0, r2, #20
 8016d42:	d522      	bpl.n	8016d8a <_scanf_i+0x142>
 8016d44:	f10b 0b01 	add.w	fp, fp, #1
 8016d48:	f1b9 0f00 	cmp.w	r9, #0
 8016d4c:	d003      	beq.n	8016d56 <_scanf_i+0x10e>
 8016d4e:	3301      	adds	r3, #1
 8016d50:	f109 39ff 	add.w	r9, r9, #4294967295
 8016d54:	60a3      	str	r3, [r4, #8]
 8016d56:	6873      	ldr	r3, [r6, #4]
 8016d58:	3b01      	subs	r3, #1
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	6073      	str	r3, [r6, #4]
 8016d5e:	dd1b      	ble.n	8016d98 <_scanf_i+0x150>
 8016d60:	6833      	ldr	r3, [r6, #0]
 8016d62:	3301      	adds	r3, #1
 8016d64:	6033      	str	r3, [r6, #0]
 8016d66:	68a3      	ldr	r3, [r4, #8]
 8016d68:	3b01      	subs	r3, #1
 8016d6a:	60a3      	str	r3, [r4, #8]
 8016d6c:	e7d9      	b.n	8016d22 <_scanf_i+0xda>
 8016d6e:	f1bb 0f02 	cmp.w	fp, #2
 8016d72:	d1ae      	bne.n	8016cd2 <_scanf_i+0x8a>
 8016d74:	6822      	ldr	r2, [r4, #0]
 8016d76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016d7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016d7e:	d1bf      	bne.n	8016d00 <_scanf_i+0xb8>
 8016d80:	2310      	movs	r3, #16
 8016d82:	6063      	str	r3, [r4, #4]
 8016d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016d88:	e7a2      	b.n	8016cd0 <_scanf_i+0x88>
 8016d8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8016d8e:	6022      	str	r2, [r4, #0]
 8016d90:	780b      	ldrb	r3, [r1, #0]
 8016d92:	f805 3b01 	strb.w	r3, [r5], #1
 8016d96:	e7de      	b.n	8016d56 <_scanf_i+0x10e>
 8016d98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d9c:	4631      	mov	r1, r6
 8016d9e:	4650      	mov	r0, sl
 8016da0:	4798      	blx	r3
 8016da2:	2800      	cmp	r0, #0
 8016da4:	d0df      	beq.n	8016d66 <_scanf_i+0x11e>
 8016da6:	6823      	ldr	r3, [r4, #0]
 8016da8:	05d9      	lsls	r1, r3, #23
 8016daa:	d50d      	bpl.n	8016dc8 <_scanf_i+0x180>
 8016dac:	42bd      	cmp	r5, r7
 8016dae:	d909      	bls.n	8016dc4 <_scanf_i+0x17c>
 8016db0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016db4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016db8:	4632      	mov	r2, r6
 8016dba:	4650      	mov	r0, sl
 8016dbc:	4798      	blx	r3
 8016dbe:	f105 39ff 	add.w	r9, r5, #4294967295
 8016dc2:	464d      	mov	r5, r9
 8016dc4:	42bd      	cmp	r5, r7
 8016dc6:	d028      	beq.n	8016e1a <_scanf_i+0x1d2>
 8016dc8:	6822      	ldr	r2, [r4, #0]
 8016dca:	f012 0210 	ands.w	r2, r2, #16
 8016dce:	d113      	bne.n	8016df8 <_scanf_i+0x1b0>
 8016dd0:	702a      	strb	r2, [r5, #0]
 8016dd2:	6863      	ldr	r3, [r4, #4]
 8016dd4:	9e01      	ldr	r6, [sp, #4]
 8016dd6:	4639      	mov	r1, r7
 8016dd8:	4650      	mov	r0, sl
 8016dda:	47b0      	blx	r6
 8016ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8016de0:	6821      	ldr	r1, [r4, #0]
 8016de2:	1d1a      	adds	r2, r3, #4
 8016de4:	f8c8 2000 	str.w	r2, [r8]
 8016de8:	f011 0f20 	tst.w	r1, #32
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	d00f      	beq.n	8016e10 <_scanf_i+0x1c8>
 8016df0:	6018      	str	r0, [r3, #0]
 8016df2:	68e3      	ldr	r3, [r4, #12]
 8016df4:	3301      	adds	r3, #1
 8016df6:	60e3      	str	r3, [r4, #12]
 8016df8:	6923      	ldr	r3, [r4, #16]
 8016dfa:	1bed      	subs	r5, r5, r7
 8016dfc:	445d      	add	r5, fp
 8016dfe:	442b      	add	r3, r5
 8016e00:	6123      	str	r3, [r4, #16]
 8016e02:	2000      	movs	r0, #0
 8016e04:	b007      	add	sp, #28
 8016e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e0a:	f04f 0b00 	mov.w	fp, #0
 8016e0e:	e7ca      	b.n	8016da6 <_scanf_i+0x15e>
 8016e10:	07ca      	lsls	r2, r1, #31
 8016e12:	bf4c      	ite	mi
 8016e14:	8018      	strhmi	r0, [r3, #0]
 8016e16:	6018      	strpl	r0, [r3, #0]
 8016e18:	e7eb      	b.n	8016df2 <_scanf_i+0x1aa>
 8016e1a:	2001      	movs	r0, #1
 8016e1c:	e7f2      	b.n	8016e04 <_scanf_i+0x1bc>
 8016e1e:	bf00      	nop
 8016e20:	08018038 	.word	0x08018038
 8016e24:	08017275 	.word	0x08017275
 8016e28:	08016521 	.word	0x08016521
 8016e2c:	080188be 	.word	0x080188be

08016e30 <__sflush_r>:
 8016e30:	898a      	ldrh	r2, [r1, #12]
 8016e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e36:	4605      	mov	r5, r0
 8016e38:	0710      	lsls	r0, r2, #28
 8016e3a:	460c      	mov	r4, r1
 8016e3c:	d458      	bmi.n	8016ef0 <__sflush_r+0xc0>
 8016e3e:	684b      	ldr	r3, [r1, #4]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	dc05      	bgt.n	8016e50 <__sflush_r+0x20>
 8016e44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	dc02      	bgt.n	8016e50 <__sflush_r+0x20>
 8016e4a:	2000      	movs	r0, #0
 8016e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e52:	2e00      	cmp	r6, #0
 8016e54:	d0f9      	beq.n	8016e4a <__sflush_r+0x1a>
 8016e56:	2300      	movs	r3, #0
 8016e58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e5c:	682f      	ldr	r7, [r5, #0]
 8016e5e:	6a21      	ldr	r1, [r4, #32]
 8016e60:	602b      	str	r3, [r5, #0]
 8016e62:	d032      	beq.n	8016eca <__sflush_r+0x9a>
 8016e64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e66:	89a3      	ldrh	r3, [r4, #12]
 8016e68:	075a      	lsls	r2, r3, #29
 8016e6a:	d505      	bpl.n	8016e78 <__sflush_r+0x48>
 8016e6c:	6863      	ldr	r3, [r4, #4]
 8016e6e:	1ac0      	subs	r0, r0, r3
 8016e70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e72:	b10b      	cbz	r3, 8016e78 <__sflush_r+0x48>
 8016e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e76:	1ac0      	subs	r0, r0, r3
 8016e78:	2300      	movs	r3, #0
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e7e:	6a21      	ldr	r1, [r4, #32]
 8016e80:	4628      	mov	r0, r5
 8016e82:	47b0      	blx	r6
 8016e84:	1c43      	adds	r3, r0, #1
 8016e86:	89a3      	ldrh	r3, [r4, #12]
 8016e88:	d106      	bne.n	8016e98 <__sflush_r+0x68>
 8016e8a:	6829      	ldr	r1, [r5, #0]
 8016e8c:	291d      	cmp	r1, #29
 8016e8e:	d82b      	bhi.n	8016ee8 <__sflush_r+0xb8>
 8016e90:	4a29      	ldr	r2, [pc, #164]	; (8016f38 <__sflush_r+0x108>)
 8016e92:	410a      	asrs	r2, r1
 8016e94:	07d6      	lsls	r6, r2, #31
 8016e96:	d427      	bmi.n	8016ee8 <__sflush_r+0xb8>
 8016e98:	2200      	movs	r2, #0
 8016e9a:	6062      	str	r2, [r4, #4]
 8016e9c:	04d9      	lsls	r1, r3, #19
 8016e9e:	6922      	ldr	r2, [r4, #16]
 8016ea0:	6022      	str	r2, [r4, #0]
 8016ea2:	d504      	bpl.n	8016eae <__sflush_r+0x7e>
 8016ea4:	1c42      	adds	r2, r0, #1
 8016ea6:	d101      	bne.n	8016eac <__sflush_r+0x7c>
 8016ea8:	682b      	ldr	r3, [r5, #0]
 8016eaa:	b903      	cbnz	r3, 8016eae <__sflush_r+0x7e>
 8016eac:	6560      	str	r0, [r4, #84]	; 0x54
 8016eae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016eb0:	602f      	str	r7, [r5, #0]
 8016eb2:	2900      	cmp	r1, #0
 8016eb4:	d0c9      	beq.n	8016e4a <__sflush_r+0x1a>
 8016eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eba:	4299      	cmp	r1, r3
 8016ebc:	d002      	beq.n	8016ec4 <__sflush_r+0x94>
 8016ebe:	4628      	mov	r0, r5
 8016ec0:	f7fe f994 	bl	80151ec <_free_r>
 8016ec4:	2000      	movs	r0, #0
 8016ec6:	6360      	str	r0, [r4, #52]	; 0x34
 8016ec8:	e7c0      	b.n	8016e4c <__sflush_r+0x1c>
 8016eca:	2301      	movs	r3, #1
 8016ecc:	4628      	mov	r0, r5
 8016ece:	47b0      	blx	r6
 8016ed0:	1c41      	adds	r1, r0, #1
 8016ed2:	d1c8      	bne.n	8016e66 <__sflush_r+0x36>
 8016ed4:	682b      	ldr	r3, [r5, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d0c5      	beq.n	8016e66 <__sflush_r+0x36>
 8016eda:	2b1d      	cmp	r3, #29
 8016edc:	d001      	beq.n	8016ee2 <__sflush_r+0xb2>
 8016ede:	2b16      	cmp	r3, #22
 8016ee0:	d101      	bne.n	8016ee6 <__sflush_r+0xb6>
 8016ee2:	602f      	str	r7, [r5, #0]
 8016ee4:	e7b1      	b.n	8016e4a <__sflush_r+0x1a>
 8016ee6:	89a3      	ldrh	r3, [r4, #12]
 8016ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eec:	81a3      	strh	r3, [r4, #12]
 8016eee:	e7ad      	b.n	8016e4c <__sflush_r+0x1c>
 8016ef0:	690f      	ldr	r7, [r1, #16]
 8016ef2:	2f00      	cmp	r7, #0
 8016ef4:	d0a9      	beq.n	8016e4a <__sflush_r+0x1a>
 8016ef6:	0793      	lsls	r3, r2, #30
 8016ef8:	680e      	ldr	r6, [r1, #0]
 8016efa:	bf08      	it	eq
 8016efc:	694b      	ldreq	r3, [r1, #20]
 8016efe:	600f      	str	r7, [r1, #0]
 8016f00:	bf18      	it	ne
 8016f02:	2300      	movne	r3, #0
 8016f04:	eba6 0807 	sub.w	r8, r6, r7
 8016f08:	608b      	str	r3, [r1, #8]
 8016f0a:	f1b8 0f00 	cmp.w	r8, #0
 8016f0e:	dd9c      	ble.n	8016e4a <__sflush_r+0x1a>
 8016f10:	6a21      	ldr	r1, [r4, #32]
 8016f12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f14:	4643      	mov	r3, r8
 8016f16:	463a      	mov	r2, r7
 8016f18:	4628      	mov	r0, r5
 8016f1a:	47b0      	blx	r6
 8016f1c:	2800      	cmp	r0, #0
 8016f1e:	dc06      	bgt.n	8016f2e <__sflush_r+0xfe>
 8016f20:	89a3      	ldrh	r3, [r4, #12]
 8016f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f26:	81a3      	strh	r3, [r4, #12]
 8016f28:	f04f 30ff 	mov.w	r0, #4294967295
 8016f2c:	e78e      	b.n	8016e4c <__sflush_r+0x1c>
 8016f2e:	4407      	add	r7, r0
 8016f30:	eba8 0800 	sub.w	r8, r8, r0
 8016f34:	e7e9      	b.n	8016f0a <__sflush_r+0xda>
 8016f36:	bf00      	nop
 8016f38:	dfbffffe 	.word	0xdfbffffe

08016f3c <_fflush_r>:
 8016f3c:	b538      	push	{r3, r4, r5, lr}
 8016f3e:	690b      	ldr	r3, [r1, #16]
 8016f40:	4605      	mov	r5, r0
 8016f42:	460c      	mov	r4, r1
 8016f44:	b913      	cbnz	r3, 8016f4c <_fflush_r+0x10>
 8016f46:	2500      	movs	r5, #0
 8016f48:	4628      	mov	r0, r5
 8016f4a:	bd38      	pop	{r3, r4, r5, pc}
 8016f4c:	b118      	cbz	r0, 8016f56 <_fflush_r+0x1a>
 8016f4e:	6a03      	ldr	r3, [r0, #32]
 8016f50:	b90b      	cbnz	r3, 8016f56 <_fflush_r+0x1a>
 8016f52:	f7fd f911 	bl	8014178 <__sinit>
 8016f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d0f3      	beq.n	8016f46 <_fflush_r+0xa>
 8016f5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f60:	07d0      	lsls	r0, r2, #31
 8016f62:	d404      	bmi.n	8016f6e <_fflush_r+0x32>
 8016f64:	0599      	lsls	r1, r3, #22
 8016f66:	d402      	bmi.n	8016f6e <_fflush_r+0x32>
 8016f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f6a:	f7fd faa2 	bl	80144b2 <__retarget_lock_acquire_recursive>
 8016f6e:	4628      	mov	r0, r5
 8016f70:	4621      	mov	r1, r4
 8016f72:	f7ff ff5d 	bl	8016e30 <__sflush_r>
 8016f76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f78:	07da      	lsls	r2, r3, #31
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	d4e4      	bmi.n	8016f48 <_fflush_r+0xc>
 8016f7e:	89a3      	ldrh	r3, [r4, #12]
 8016f80:	059b      	lsls	r3, r3, #22
 8016f82:	d4e1      	bmi.n	8016f48 <_fflush_r+0xc>
 8016f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f86:	f7fd fa95 	bl	80144b4 <__retarget_lock_release_recursive>
 8016f8a:	e7dd      	b.n	8016f48 <_fflush_r+0xc>

08016f8c <__sccl>:
 8016f8c:	b570      	push	{r4, r5, r6, lr}
 8016f8e:	780b      	ldrb	r3, [r1, #0]
 8016f90:	4604      	mov	r4, r0
 8016f92:	2b5e      	cmp	r3, #94	; 0x5e
 8016f94:	bf0b      	itete	eq
 8016f96:	784b      	ldrbeq	r3, [r1, #1]
 8016f98:	1c4a      	addne	r2, r1, #1
 8016f9a:	1c8a      	addeq	r2, r1, #2
 8016f9c:	2100      	movne	r1, #0
 8016f9e:	bf08      	it	eq
 8016fa0:	2101      	moveq	r1, #1
 8016fa2:	3801      	subs	r0, #1
 8016fa4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016fa8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016fac:	42a8      	cmp	r0, r5
 8016fae:	d1fb      	bne.n	8016fa8 <__sccl+0x1c>
 8016fb0:	b90b      	cbnz	r3, 8016fb6 <__sccl+0x2a>
 8016fb2:	1e50      	subs	r0, r2, #1
 8016fb4:	bd70      	pop	{r4, r5, r6, pc}
 8016fb6:	f081 0101 	eor.w	r1, r1, #1
 8016fba:	54e1      	strb	r1, [r4, r3]
 8016fbc:	4610      	mov	r0, r2
 8016fbe:	4602      	mov	r2, r0
 8016fc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016fc4:	2d2d      	cmp	r5, #45	; 0x2d
 8016fc6:	d005      	beq.n	8016fd4 <__sccl+0x48>
 8016fc8:	2d5d      	cmp	r5, #93	; 0x5d
 8016fca:	d016      	beq.n	8016ffa <__sccl+0x6e>
 8016fcc:	2d00      	cmp	r5, #0
 8016fce:	d0f1      	beq.n	8016fb4 <__sccl+0x28>
 8016fd0:	462b      	mov	r3, r5
 8016fd2:	e7f2      	b.n	8016fba <__sccl+0x2e>
 8016fd4:	7846      	ldrb	r6, [r0, #1]
 8016fd6:	2e5d      	cmp	r6, #93	; 0x5d
 8016fd8:	d0fa      	beq.n	8016fd0 <__sccl+0x44>
 8016fda:	42b3      	cmp	r3, r6
 8016fdc:	dcf8      	bgt.n	8016fd0 <__sccl+0x44>
 8016fde:	3002      	adds	r0, #2
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	3201      	adds	r2, #1
 8016fe4:	4296      	cmp	r6, r2
 8016fe6:	54a1      	strb	r1, [r4, r2]
 8016fe8:	dcfb      	bgt.n	8016fe2 <__sccl+0x56>
 8016fea:	1af2      	subs	r2, r6, r3
 8016fec:	3a01      	subs	r2, #1
 8016fee:	1c5d      	adds	r5, r3, #1
 8016ff0:	42b3      	cmp	r3, r6
 8016ff2:	bfa8      	it	ge
 8016ff4:	2200      	movge	r2, #0
 8016ff6:	18ab      	adds	r3, r5, r2
 8016ff8:	e7e1      	b.n	8016fbe <__sccl+0x32>
 8016ffa:	4610      	mov	r0, r2
 8016ffc:	e7da      	b.n	8016fb4 <__sccl+0x28>

08016ffe <__submore>:
 8016ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017002:	460c      	mov	r4, r1
 8017004:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801700a:	4299      	cmp	r1, r3
 801700c:	d11d      	bne.n	801704a <__submore+0x4c>
 801700e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017012:	f7fe fcb7 	bl	8015984 <_malloc_r>
 8017016:	b918      	cbnz	r0, 8017020 <__submore+0x22>
 8017018:	f04f 30ff 	mov.w	r0, #4294967295
 801701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017024:	63a3      	str	r3, [r4, #56]	; 0x38
 8017026:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801702a:	6360      	str	r0, [r4, #52]	; 0x34
 801702c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017030:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017034:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017038:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801703c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017040:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017044:	6020      	str	r0, [r4, #0]
 8017046:	2000      	movs	r0, #0
 8017048:	e7e8      	b.n	801701c <__submore+0x1e>
 801704a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801704c:	0077      	lsls	r7, r6, #1
 801704e:	463a      	mov	r2, r7
 8017050:	f000 f86e 	bl	8017130 <_realloc_r>
 8017054:	4605      	mov	r5, r0
 8017056:	2800      	cmp	r0, #0
 8017058:	d0de      	beq.n	8017018 <__submore+0x1a>
 801705a:	eb00 0806 	add.w	r8, r0, r6
 801705e:	4601      	mov	r1, r0
 8017060:	4632      	mov	r2, r6
 8017062:	4640      	mov	r0, r8
 8017064:	f7fd fa27 	bl	80144b6 <memcpy>
 8017068:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801706c:	f8c4 8000 	str.w	r8, [r4]
 8017070:	e7e9      	b.n	8017046 <__submore+0x48>

08017072 <memmove>:
 8017072:	4288      	cmp	r0, r1
 8017074:	b510      	push	{r4, lr}
 8017076:	eb01 0402 	add.w	r4, r1, r2
 801707a:	d902      	bls.n	8017082 <memmove+0x10>
 801707c:	4284      	cmp	r4, r0
 801707e:	4623      	mov	r3, r4
 8017080:	d807      	bhi.n	8017092 <memmove+0x20>
 8017082:	1e43      	subs	r3, r0, #1
 8017084:	42a1      	cmp	r1, r4
 8017086:	d008      	beq.n	801709a <memmove+0x28>
 8017088:	f811 2b01 	ldrb.w	r2, [r1], #1
 801708c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017090:	e7f8      	b.n	8017084 <memmove+0x12>
 8017092:	4402      	add	r2, r0
 8017094:	4601      	mov	r1, r0
 8017096:	428a      	cmp	r2, r1
 8017098:	d100      	bne.n	801709c <memmove+0x2a>
 801709a:	bd10      	pop	{r4, pc}
 801709c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80170a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80170a4:	e7f7      	b.n	8017096 <memmove+0x24>
	...

080170a8 <_sbrk_r>:
 80170a8:	b538      	push	{r3, r4, r5, lr}
 80170aa:	4d06      	ldr	r5, [pc, #24]	; (80170c4 <_sbrk_r+0x1c>)
 80170ac:	2300      	movs	r3, #0
 80170ae:	4604      	mov	r4, r0
 80170b0:	4608      	mov	r0, r1
 80170b2:	602b      	str	r3, [r5, #0]
 80170b4:	f7ee fd30 	bl	8005b18 <_sbrk>
 80170b8:	1c43      	adds	r3, r0, #1
 80170ba:	d102      	bne.n	80170c2 <_sbrk_r+0x1a>
 80170bc:	682b      	ldr	r3, [r5, #0]
 80170be:	b103      	cbz	r3, 80170c2 <_sbrk_r+0x1a>
 80170c0:	6023      	str	r3, [r4, #0]
 80170c2:	bd38      	pop	{r3, r4, r5, pc}
 80170c4:	2000752c 	.word	0x2000752c

080170c8 <__assert_func>:
 80170c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80170ca:	4614      	mov	r4, r2
 80170cc:	461a      	mov	r2, r3
 80170ce:	4b09      	ldr	r3, [pc, #36]	; (80170f4 <__assert_func+0x2c>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	4605      	mov	r5, r0
 80170d4:	68d8      	ldr	r0, [r3, #12]
 80170d6:	b14c      	cbz	r4, 80170ec <__assert_func+0x24>
 80170d8:	4b07      	ldr	r3, [pc, #28]	; (80170f8 <__assert_func+0x30>)
 80170da:	9100      	str	r1, [sp, #0]
 80170dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80170e0:	4906      	ldr	r1, [pc, #24]	; (80170fc <__assert_func+0x34>)
 80170e2:	462b      	mov	r3, r5
 80170e4:	f000 f8c8 	bl	8017278 <fiprintf>
 80170e8:	f000 f8d8 	bl	801729c <abort>
 80170ec:	4b04      	ldr	r3, [pc, #16]	; (8017100 <__assert_func+0x38>)
 80170ee:	461c      	mov	r4, r3
 80170f0:	e7f3      	b.n	80170da <__assert_func+0x12>
 80170f2:	bf00      	nop
 80170f4:	2000032c 	.word	0x2000032c
 80170f8:	080188c9 	.word	0x080188c9
 80170fc:	080188d6 	.word	0x080188d6
 8017100:	08018904 	.word	0x08018904

08017104 <_calloc_r>:
 8017104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017106:	fba1 2402 	umull	r2, r4, r1, r2
 801710a:	b94c      	cbnz	r4, 8017120 <_calloc_r+0x1c>
 801710c:	4611      	mov	r1, r2
 801710e:	9201      	str	r2, [sp, #4]
 8017110:	f7fe fc38 	bl	8015984 <_malloc_r>
 8017114:	9a01      	ldr	r2, [sp, #4]
 8017116:	4605      	mov	r5, r0
 8017118:	b930      	cbnz	r0, 8017128 <_calloc_r+0x24>
 801711a:	4628      	mov	r0, r5
 801711c:	b003      	add	sp, #12
 801711e:	bd30      	pop	{r4, r5, pc}
 8017120:	220c      	movs	r2, #12
 8017122:	6002      	str	r2, [r0, #0]
 8017124:	2500      	movs	r5, #0
 8017126:	e7f8      	b.n	801711a <_calloc_r+0x16>
 8017128:	4621      	mov	r1, r4
 801712a:	f7fd f920 	bl	801436e <memset>
 801712e:	e7f4      	b.n	801711a <_calloc_r+0x16>

08017130 <_realloc_r>:
 8017130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017134:	4680      	mov	r8, r0
 8017136:	4614      	mov	r4, r2
 8017138:	460e      	mov	r6, r1
 801713a:	b921      	cbnz	r1, 8017146 <_realloc_r+0x16>
 801713c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017140:	4611      	mov	r1, r2
 8017142:	f7fe bc1f 	b.w	8015984 <_malloc_r>
 8017146:	b92a      	cbnz	r2, 8017154 <_realloc_r+0x24>
 8017148:	f7fe f850 	bl	80151ec <_free_r>
 801714c:	4625      	mov	r5, r4
 801714e:	4628      	mov	r0, r5
 8017150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017154:	f000 f8a9 	bl	80172aa <_malloc_usable_size_r>
 8017158:	4284      	cmp	r4, r0
 801715a:	4607      	mov	r7, r0
 801715c:	d802      	bhi.n	8017164 <_realloc_r+0x34>
 801715e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017162:	d812      	bhi.n	801718a <_realloc_r+0x5a>
 8017164:	4621      	mov	r1, r4
 8017166:	4640      	mov	r0, r8
 8017168:	f7fe fc0c 	bl	8015984 <_malloc_r>
 801716c:	4605      	mov	r5, r0
 801716e:	2800      	cmp	r0, #0
 8017170:	d0ed      	beq.n	801714e <_realloc_r+0x1e>
 8017172:	42bc      	cmp	r4, r7
 8017174:	4622      	mov	r2, r4
 8017176:	4631      	mov	r1, r6
 8017178:	bf28      	it	cs
 801717a:	463a      	movcs	r2, r7
 801717c:	f7fd f99b 	bl	80144b6 <memcpy>
 8017180:	4631      	mov	r1, r6
 8017182:	4640      	mov	r0, r8
 8017184:	f7fe f832 	bl	80151ec <_free_r>
 8017188:	e7e1      	b.n	801714e <_realloc_r+0x1e>
 801718a:	4635      	mov	r5, r6
 801718c:	e7df      	b.n	801714e <_realloc_r+0x1e>
	...

08017190 <_strtoul_l.constprop.0>:
 8017190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017194:	4f36      	ldr	r7, [pc, #216]	; (8017270 <_strtoul_l.constprop.0+0xe0>)
 8017196:	4686      	mov	lr, r0
 8017198:	460d      	mov	r5, r1
 801719a:	4628      	mov	r0, r5
 801719c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171a0:	5d3e      	ldrb	r6, [r7, r4]
 80171a2:	f016 0608 	ands.w	r6, r6, #8
 80171a6:	d1f8      	bne.n	801719a <_strtoul_l.constprop.0+0xa>
 80171a8:	2c2d      	cmp	r4, #45	; 0x2d
 80171aa:	d130      	bne.n	801720e <_strtoul_l.constprop.0+0x7e>
 80171ac:	782c      	ldrb	r4, [r5, #0]
 80171ae:	2601      	movs	r6, #1
 80171b0:	1c85      	adds	r5, r0, #2
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d057      	beq.n	8017266 <_strtoul_l.constprop.0+0xd6>
 80171b6:	2b10      	cmp	r3, #16
 80171b8:	d109      	bne.n	80171ce <_strtoul_l.constprop.0+0x3e>
 80171ba:	2c30      	cmp	r4, #48	; 0x30
 80171bc:	d107      	bne.n	80171ce <_strtoul_l.constprop.0+0x3e>
 80171be:	7828      	ldrb	r0, [r5, #0]
 80171c0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80171c4:	2858      	cmp	r0, #88	; 0x58
 80171c6:	d149      	bne.n	801725c <_strtoul_l.constprop.0+0xcc>
 80171c8:	786c      	ldrb	r4, [r5, #1]
 80171ca:	2310      	movs	r3, #16
 80171cc:	3502      	adds	r5, #2
 80171ce:	f04f 38ff 	mov.w	r8, #4294967295
 80171d2:	2700      	movs	r7, #0
 80171d4:	fbb8 f8f3 	udiv	r8, r8, r3
 80171d8:	fb03 f908 	mul.w	r9, r3, r8
 80171dc:	ea6f 0909 	mvn.w	r9, r9
 80171e0:	4638      	mov	r0, r7
 80171e2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80171e6:	f1bc 0f09 	cmp.w	ip, #9
 80171ea:	d815      	bhi.n	8017218 <_strtoul_l.constprop.0+0x88>
 80171ec:	4664      	mov	r4, ip
 80171ee:	42a3      	cmp	r3, r4
 80171f0:	dd23      	ble.n	801723a <_strtoul_l.constprop.0+0xaa>
 80171f2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80171f6:	d007      	beq.n	8017208 <_strtoul_l.constprop.0+0x78>
 80171f8:	4580      	cmp	r8, r0
 80171fa:	d31b      	bcc.n	8017234 <_strtoul_l.constprop.0+0xa4>
 80171fc:	d101      	bne.n	8017202 <_strtoul_l.constprop.0+0x72>
 80171fe:	45a1      	cmp	r9, r4
 8017200:	db18      	blt.n	8017234 <_strtoul_l.constprop.0+0xa4>
 8017202:	fb00 4003 	mla	r0, r0, r3, r4
 8017206:	2701      	movs	r7, #1
 8017208:	f815 4b01 	ldrb.w	r4, [r5], #1
 801720c:	e7e9      	b.n	80171e2 <_strtoul_l.constprop.0+0x52>
 801720e:	2c2b      	cmp	r4, #43	; 0x2b
 8017210:	bf04      	itt	eq
 8017212:	782c      	ldrbeq	r4, [r5, #0]
 8017214:	1c85      	addeq	r5, r0, #2
 8017216:	e7cc      	b.n	80171b2 <_strtoul_l.constprop.0+0x22>
 8017218:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801721c:	f1bc 0f19 	cmp.w	ip, #25
 8017220:	d801      	bhi.n	8017226 <_strtoul_l.constprop.0+0x96>
 8017222:	3c37      	subs	r4, #55	; 0x37
 8017224:	e7e3      	b.n	80171ee <_strtoul_l.constprop.0+0x5e>
 8017226:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801722a:	f1bc 0f19 	cmp.w	ip, #25
 801722e:	d804      	bhi.n	801723a <_strtoul_l.constprop.0+0xaa>
 8017230:	3c57      	subs	r4, #87	; 0x57
 8017232:	e7dc      	b.n	80171ee <_strtoul_l.constprop.0+0x5e>
 8017234:	f04f 37ff 	mov.w	r7, #4294967295
 8017238:	e7e6      	b.n	8017208 <_strtoul_l.constprop.0+0x78>
 801723a:	1c7b      	adds	r3, r7, #1
 801723c:	d106      	bne.n	801724c <_strtoul_l.constprop.0+0xbc>
 801723e:	2322      	movs	r3, #34	; 0x22
 8017240:	f8ce 3000 	str.w	r3, [lr]
 8017244:	4638      	mov	r0, r7
 8017246:	b932      	cbnz	r2, 8017256 <_strtoul_l.constprop.0+0xc6>
 8017248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801724c:	b106      	cbz	r6, 8017250 <_strtoul_l.constprop.0+0xc0>
 801724e:	4240      	negs	r0, r0
 8017250:	2a00      	cmp	r2, #0
 8017252:	d0f9      	beq.n	8017248 <_strtoul_l.constprop.0+0xb8>
 8017254:	b107      	cbz	r7, 8017258 <_strtoul_l.constprop.0+0xc8>
 8017256:	1e69      	subs	r1, r5, #1
 8017258:	6011      	str	r1, [r2, #0]
 801725a:	e7f5      	b.n	8017248 <_strtoul_l.constprop.0+0xb8>
 801725c:	2430      	movs	r4, #48	; 0x30
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1b5      	bne.n	80171ce <_strtoul_l.constprop.0+0x3e>
 8017262:	2308      	movs	r3, #8
 8017264:	e7b3      	b.n	80171ce <_strtoul_l.constprop.0+0x3e>
 8017266:	2c30      	cmp	r4, #48	; 0x30
 8017268:	d0a9      	beq.n	80171be <_strtoul_l.constprop.0+0x2e>
 801726a:	230a      	movs	r3, #10
 801726c:	e7af      	b.n	80171ce <_strtoul_l.constprop.0+0x3e>
 801726e:	bf00      	nop
 8017270:	0801879d 	.word	0x0801879d

08017274 <_strtoul_r>:
 8017274:	f7ff bf8c 	b.w	8017190 <_strtoul_l.constprop.0>

08017278 <fiprintf>:
 8017278:	b40e      	push	{r1, r2, r3}
 801727a:	b503      	push	{r0, r1, lr}
 801727c:	4601      	mov	r1, r0
 801727e:	ab03      	add	r3, sp, #12
 8017280:	4805      	ldr	r0, [pc, #20]	; (8017298 <fiprintf+0x20>)
 8017282:	f853 2b04 	ldr.w	r2, [r3], #4
 8017286:	6800      	ldr	r0, [r0, #0]
 8017288:	9301      	str	r3, [sp, #4]
 801728a:	f000 f83f 	bl	801730c <_vfiprintf_r>
 801728e:	b002      	add	sp, #8
 8017290:	f85d eb04 	ldr.w	lr, [sp], #4
 8017294:	b003      	add	sp, #12
 8017296:	4770      	bx	lr
 8017298:	2000032c 	.word	0x2000032c

0801729c <abort>:
 801729c:	b508      	push	{r3, lr}
 801729e:	2006      	movs	r0, #6
 80172a0:	f000 fa0c 	bl	80176bc <raise>
 80172a4:	2001      	movs	r0, #1
 80172a6:	f7ee fbbf 	bl	8005a28 <_exit>

080172aa <_malloc_usable_size_r>:
 80172aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172ae:	1f18      	subs	r0, r3, #4
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	bfbc      	itt	lt
 80172b4:	580b      	ldrlt	r3, [r1, r0]
 80172b6:	18c0      	addlt	r0, r0, r3
 80172b8:	4770      	bx	lr

080172ba <__sfputc_r>:
 80172ba:	6893      	ldr	r3, [r2, #8]
 80172bc:	3b01      	subs	r3, #1
 80172be:	2b00      	cmp	r3, #0
 80172c0:	b410      	push	{r4}
 80172c2:	6093      	str	r3, [r2, #8]
 80172c4:	da08      	bge.n	80172d8 <__sfputc_r+0x1e>
 80172c6:	6994      	ldr	r4, [r2, #24]
 80172c8:	42a3      	cmp	r3, r4
 80172ca:	db01      	blt.n	80172d0 <__sfputc_r+0x16>
 80172cc:	290a      	cmp	r1, #10
 80172ce:	d103      	bne.n	80172d8 <__sfputc_r+0x1e>
 80172d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172d4:	f000 b934 	b.w	8017540 <__swbuf_r>
 80172d8:	6813      	ldr	r3, [r2, #0]
 80172da:	1c58      	adds	r0, r3, #1
 80172dc:	6010      	str	r0, [r2, #0]
 80172de:	7019      	strb	r1, [r3, #0]
 80172e0:	4608      	mov	r0, r1
 80172e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172e6:	4770      	bx	lr

080172e8 <__sfputs_r>:
 80172e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172ea:	4606      	mov	r6, r0
 80172ec:	460f      	mov	r7, r1
 80172ee:	4614      	mov	r4, r2
 80172f0:	18d5      	adds	r5, r2, r3
 80172f2:	42ac      	cmp	r4, r5
 80172f4:	d101      	bne.n	80172fa <__sfputs_r+0x12>
 80172f6:	2000      	movs	r0, #0
 80172f8:	e007      	b.n	801730a <__sfputs_r+0x22>
 80172fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172fe:	463a      	mov	r2, r7
 8017300:	4630      	mov	r0, r6
 8017302:	f7ff ffda 	bl	80172ba <__sfputc_r>
 8017306:	1c43      	adds	r3, r0, #1
 8017308:	d1f3      	bne.n	80172f2 <__sfputs_r+0xa>
 801730a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801730c <_vfiprintf_r>:
 801730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017310:	460d      	mov	r5, r1
 8017312:	b09d      	sub	sp, #116	; 0x74
 8017314:	4614      	mov	r4, r2
 8017316:	4698      	mov	r8, r3
 8017318:	4606      	mov	r6, r0
 801731a:	b118      	cbz	r0, 8017324 <_vfiprintf_r+0x18>
 801731c:	6a03      	ldr	r3, [r0, #32]
 801731e:	b90b      	cbnz	r3, 8017324 <_vfiprintf_r+0x18>
 8017320:	f7fc ff2a 	bl	8014178 <__sinit>
 8017324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017326:	07d9      	lsls	r1, r3, #31
 8017328:	d405      	bmi.n	8017336 <_vfiprintf_r+0x2a>
 801732a:	89ab      	ldrh	r3, [r5, #12]
 801732c:	059a      	lsls	r2, r3, #22
 801732e:	d402      	bmi.n	8017336 <_vfiprintf_r+0x2a>
 8017330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017332:	f7fd f8be 	bl	80144b2 <__retarget_lock_acquire_recursive>
 8017336:	89ab      	ldrh	r3, [r5, #12]
 8017338:	071b      	lsls	r3, r3, #28
 801733a:	d501      	bpl.n	8017340 <_vfiprintf_r+0x34>
 801733c:	692b      	ldr	r3, [r5, #16]
 801733e:	b99b      	cbnz	r3, 8017368 <_vfiprintf_r+0x5c>
 8017340:	4629      	mov	r1, r5
 8017342:	4630      	mov	r0, r6
 8017344:	f000 f93a 	bl	80175bc <__swsetup_r>
 8017348:	b170      	cbz	r0, 8017368 <_vfiprintf_r+0x5c>
 801734a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801734c:	07dc      	lsls	r4, r3, #31
 801734e:	d504      	bpl.n	801735a <_vfiprintf_r+0x4e>
 8017350:	f04f 30ff 	mov.w	r0, #4294967295
 8017354:	b01d      	add	sp, #116	; 0x74
 8017356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801735a:	89ab      	ldrh	r3, [r5, #12]
 801735c:	0598      	lsls	r0, r3, #22
 801735e:	d4f7      	bmi.n	8017350 <_vfiprintf_r+0x44>
 8017360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017362:	f7fd f8a7 	bl	80144b4 <__retarget_lock_release_recursive>
 8017366:	e7f3      	b.n	8017350 <_vfiprintf_r+0x44>
 8017368:	2300      	movs	r3, #0
 801736a:	9309      	str	r3, [sp, #36]	; 0x24
 801736c:	2320      	movs	r3, #32
 801736e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017372:	f8cd 800c 	str.w	r8, [sp, #12]
 8017376:	2330      	movs	r3, #48	; 0x30
 8017378:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801752c <_vfiprintf_r+0x220>
 801737c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017380:	f04f 0901 	mov.w	r9, #1
 8017384:	4623      	mov	r3, r4
 8017386:	469a      	mov	sl, r3
 8017388:	f813 2b01 	ldrb.w	r2, [r3], #1
 801738c:	b10a      	cbz	r2, 8017392 <_vfiprintf_r+0x86>
 801738e:	2a25      	cmp	r2, #37	; 0x25
 8017390:	d1f9      	bne.n	8017386 <_vfiprintf_r+0x7a>
 8017392:	ebba 0b04 	subs.w	fp, sl, r4
 8017396:	d00b      	beq.n	80173b0 <_vfiprintf_r+0xa4>
 8017398:	465b      	mov	r3, fp
 801739a:	4622      	mov	r2, r4
 801739c:	4629      	mov	r1, r5
 801739e:	4630      	mov	r0, r6
 80173a0:	f7ff ffa2 	bl	80172e8 <__sfputs_r>
 80173a4:	3001      	adds	r0, #1
 80173a6:	f000 80a9 	beq.w	80174fc <_vfiprintf_r+0x1f0>
 80173aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80173ac:	445a      	add	r2, fp
 80173ae:	9209      	str	r2, [sp, #36]	; 0x24
 80173b0:	f89a 3000 	ldrb.w	r3, [sl]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	f000 80a1 	beq.w	80174fc <_vfiprintf_r+0x1f0>
 80173ba:	2300      	movs	r3, #0
 80173bc:	f04f 32ff 	mov.w	r2, #4294967295
 80173c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173c4:	f10a 0a01 	add.w	sl, sl, #1
 80173c8:	9304      	str	r3, [sp, #16]
 80173ca:	9307      	str	r3, [sp, #28]
 80173cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173d0:	931a      	str	r3, [sp, #104]	; 0x68
 80173d2:	4654      	mov	r4, sl
 80173d4:	2205      	movs	r2, #5
 80173d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173da:	4854      	ldr	r0, [pc, #336]	; (801752c <_vfiprintf_r+0x220>)
 80173dc:	f7e8 fef8 	bl	80001d0 <memchr>
 80173e0:	9a04      	ldr	r2, [sp, #16]
 80173e2:	b9d8      	cbnz	r0, 801741c <_vfiprintf_r+0x110>
 80173e4:	06d1      	lsls	r1, r2, #27
 80173e6:	bf44      	itt	mi
 80173e8:	2320      	movmi	r3, #32
 80173ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173ee:	0713      	lsls	r3, r2, #28
 80173f0:	bf44      	itt	mi
 80173f2:	232b      	movmi	r3, #43	; 0x2b
 80173f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80173f8:	f89a 3000 	ldrb.w	r3, [sl]
 80173fc:	2b2a      	cmp	r3, #42	; 0x2a
 80173fe:	d015      	beq.n	801742c <_vfiprintf_r+0x120>
 8017400:	9a07      	ldr	r2, [sp, #28]
 8017402:	4654      	mov	r4, sl
 8017404:	2000      	movs	r0, #0
 8017406:	f04f 0c0a 	mov.w	ip, #10
 801740a:	4621      	mov	r1, r4
 801740c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017410:	3b30      	subs	r3, #48	; 0x30
 8017412:	2b09      	cmp	r3, #9
 8017414:	d94d      	bls.n	80174b2 <_vfiprintf_r+0x1a6>
 8017416:	b1b0      	cbz	r0, 8017446 <_vfiprintf_r+0x13a>
 8017418:	9207      	str	r2, [sp, #28]
 801741a:	e014      	b.n	8017446 <_vfiprintf_r+0x13a>
 801741c:	eba0 0308 	sub.w	r3, r0, r8
 8017420:	fa09 f303 	lsl.w	r3, r9, r3
 8017424:	4313      	orrs	r3, r2
 8017426:	9304      	str	r3, [sp, #16]
 8017428:	46a2      	mov	sl, r4
 801742a:	e7d2      	b.n	80173d2 <_vfiprintf_r+0xc6>
 801742c:	9b03      	ldr	r3, [sp, #12]
 801742e:	1d19      	adds	r1, r3, #4
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	9103      	str	r1, [sp, #12]
 8017434:	2b00      	cmp	r3, #0
 8017436:	bfbb      	ittet	lt
 8017438:	425b      	neglt	r3, r3
 801743a:	f042 0202 	orrlt.w	r2, r2, #2
 801743e:	9307      	strge	r3, [sp, #28]
 8017440:	9307      	strlt	r3, [sp, #28]
 8017442:	bfb8      	it	lt
 8017444:	9204      	strlt	r2, [sp, #16]
 8017446:	7823      	ldrb	r3, [r4, #0]
 8017448:	2b2e      	cmp	r3, #46	; 0x2e
 801744a:	d10c      	bne.n	8017466 <_vfiprintf_r+0x15a>
 801744c:	7863      	ldrb	r3, [r4, #1]
 801744e:	2b2a      	cmp	r3, #42	; 0x2a
 8017450:	d134      	bne.n	80174bc <_vfiprintf_r+0x1b0>
 8017452:	9b03      	ldr	r3, [sp, #12]
 8017454:	1d1a      	adds	r2, r3, #4
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	9203      	str	r2, [sp, #12]
 801745a:	2b00      	cmp	r3, #0
 801745c:	bfb8      	it	lt
 801745e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017462:	3402      	adds	r4, #2
 8017464:	9305      	str	r3, [sp, #20]
 8017466:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801753c <_vfiprintf_r+0x230>
 801746a:	7821      	ldrb	r1, [r4, #0]
 801746c:	2203      	movs	r2, #3
 801746e:	4650      	mov	r0, sl
 8017470:	f7e8 feae 	bl	80001d0 <memchr>
 8017474:	b138      	cbz	r0, 8017486 <_vfiprintf_r+0x17a>
 8017476:	9b04      	ldr	r3, [sp, #16]
 8017478:	eba0 000a 	sub.w	r0, r0, sl
 801747c:	2240      	movs	r2, #64	; 0x40
 801747e:	4082      	lsls	r2, r0
 8017480:	4313      	orrs	r3, r2
 8017482:	3401      	adds	r4, #1
 8017484:	9304      	str	r3, [sp, #16]
 8017486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801748a:	4829      	ldr	r0, [pc, #164]	; (8017530 <_vfiprintf_r+0x224>)
 801748c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017490:	2206      	movs	r2, #6
 8017492:	f7e8 fe9d 	bl	80001d0 <memchr>
 8017496:	2800      	cmp	r0, #0
 8017498:	d03f      	beq.n	801751a <_vfiprintf_r+0x20e>
 801749a:	4b26      	ldr	r3, [pc, #152]	; (8017534 <_vfiprintf_r+0x228>)
 801749c:	bb1b      	cbnz	r3, 80174e6 <_vfiprintf_r+0x1da>
 801749e:	9b03      	ldr	r3, [sp, #12]
 80174a0:	3307      	adds	r3, #7
 80174a2:	f023 0307 	bic.w	r3, r3, #7
 80174a6:	3308      	adds	r3, #8
 80174a8:	9303      	str	r3, [sp, #12]
 80174aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174ac:	443b      	add	r3, r7
 80174ae:	9309      	str	r3, [sp, #36]	; 0x24
 80174b0:	e768      	b.n	8017384 <_vfiprintf_r+0x78>
 80174b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80174b6:	460c      	mov	r4, r1
 80174b8:	2001      	movs	r0, #1
 80174ba:	e7a6      	b.n	801740a <_vfiprintf_r+0xfe>
 80174bc:	2300      	movs	r3, #0
 80174be:	3401      	adds	r4, #1
 80174c0:	9305      	str	r3, [sp, #20]
 80174c2:	4619      	mov	r1, r3
 80174c4:	f04f 0c0a 	mov.w	ip, #10
 80174c8:	4620      	mov	r0, r4
 80174ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174ce:	3a30      	subs	r2, #48	; 0x30
 80174d0:	2a09      	cmp	r2, #9
 80174d2:	d903      	bls.n	80174dc <_vfiprintf_r+0x1d0>
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d0c6      	beq.n	8017466 <_vfiprintf_r+0x15a>
 80174d8:	9105      	str	r1, [sp, #20]
 80174da:	e7c4      	b.n	8017466 <_vfiprintf_r+0x15a>
 80174dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80174e0:	4604      	mov	r4, r0
 80174e2:	2301      	movs	r3, #1
 80174e4:	e7f0      	b.n	80174c8 <_vfiprintf_r+0x1bc>
 80174e6:	ab03      	add	r3, sp, #12
 80174e8:	9300      	str	r3, [sp, #0]
 80174ea:	462a      	mov	r2, r5
 80174ec:	4b12      	ldr	r3, [pc, #72]	; (8017538 <_vfiprintf_r+0x22c>)
 80174ee:	a904      	add	r1, sp, #16
 80174f0:	4630      	mov	r0, r6
 80174f2:	f7fb ffdf 	bl	80134b4 <_printf_float>
 80174f6:	4607      	mov	r7, r0
 80174f8:	1c78      	adds	r0, r7, #1
 80174fa:	d1d6      	bne.n	80174aa <_vfiprintf_r+0x19e>
 80174fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80174fe:	07d9      	lsls	r1, r3, #31
 8017500:	d405      	bmi.n	801750e <_vfiprintf_r+0x202>
 8017502:	89ab      	ldrh	r3, [r5, #12]
 8017504:	059a      	lsls	r2, r3, #22
 8017506:	d402      	bmi.n	801750e <_vfiprintf_r+0x202>
 8017508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801750a:	f7fc ffd3 	bl	80144b4 <__retarget_lock_release_recursive>
 801750e:	89ab      	ldrh	r3, [r5, #12]
 8017510:	065b      	lsls	r3, r3, #25
 8017512:	f53f af1d 	bmi.w	8017350 <_vfiprintf_r+0x44>
 8017516:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017518:	e71c      	b.n	8017354 <_vfiprintf_r+0x48>
 801751a:	ab03      	add	r3, sp, #12
 801751c:	9300      	str	r3, [sp, #0]
 801751e:	462a      	mov	r2, r5
 8017520:	4b05      	ldr	r3, [pc, #20]	; (8017538 <_vfiprintf_r+0x22c>)
 8017522:	a904      	add	r1, sp, #16
 8017524:	4630      	mov	r0, r6
 8017526:	f7fc fa69 	bl	80139fc <_printf_i>
 801752a:	e7e4      	b.n	80174f6 <_vfiprintf_r+0x1ea>
 801752c:	0801889d 	.word	0x0801889d
 8017530:	080188a7 	.word	0x080188a7
 8017534:	080134b5 	.word	0x080134b5
 8017538:	080172e9 	.word	0x080172e9
 801753c:	080188a3 	.word	0x080188a3

08017540 <__swbuf_r>:
 8017540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017542:	460e      	mov	r6, r1
 8017544:	4614      	mov	r4, r2
 8017546:	4605      	mov	r5, r0
 8017548:	b118      	cbz	r0, 8017552 <__swbuf_r+0x12>
 801754a:	6a03      	ldr	r3, [r0, #32]
 801754c:	b90b      	cbnz	r3, 8017552 <__swbuf_r+0x12>
 801754e:	f7fc fe13 	bl	8014178 <__sinit>
 8017552:	69a3      	ldr	r3, [r4, #24]
 8017554:	60a3      	str	r3, [r4, #8]
 8017556:	89a3      	ldrh	r3, [r4, #12]
 8017558:	071a      	lsls	r2, r3, #28
 801755a:	d525      	bpl.n	80175a8 <__swbuf_r+0x68>
 801755c:	6923      	ldr	r3, [r4, #16]
 801755e:	b31b      	cbz	r3, 80175a8 <__swbuf_r+0x68>
 8017560:	6823      	ldr	r3, [r4, #0]
 8017562:	6922      	ldr	r2, [r4, #16]
 8017564:	1a98      	subs	r0, r3, r2
 8017566:	6963      	ldr	r3, [r4, #20]
 8017568:	b2f6      	uxtb	r6, r6
 801756a:	4283      	cmp	r3, r0
 801756c:	4637      	mov	r7, r6
 801756e:	dc04      	bgt.n	801757a <__swbuf_r+0x3a>
 8017570:	4621      	mov	r1, r4
 8017572:	4628      	mov	r0, r5
 8017574:	f7ff fce2 	bl	8016f3c <_fflush_r>
 8017578:	b9e0      	cbnz	r0, 80175b4 <__swbuf_r+0x74>
 801757a:	68a3      	ldr	r3, [r4, #8]
 801757c:	3b01      	subs	r3, #1
 801757e:	60a3      	str	r3, [r4, #8]
 8017580:	6823      	ldr	r3, [r4, #0]
 8017582:	1c5a      	adds	r2, r3, #1
 8017584:	6022      	str	r2, [r4, #0]
 8017586:	701e      	strb	r6, [r3, #0]
 8017588:	6962      	ldr	r2, [r4, #20]
 801758a:	1c43      	adds	r3, r0, #1
 801758c:	429a      	cmp	r2, r3
 801758e:	d004      	beq.n	801759a <__swbuf_r+0x5a>
 8017590:	89a3      	ldrh	r3, [r4, #12]
 8017592:	07db      	lsls	r3, r3, #31
 8017594:	d506      	bpl.n	80175a4 <__swbuf_r+0x64>
 8017596:	2e0a      	cmp	r6, #10
 8017598:	d104      	bne.n	80175a4 <__swbuf_r+0x64>
 801759a:	4621      	mov	r1, r4
 801759c:	4628      	mov	r0, r5
 801759e:	f7ff fccd 	bl	8016f3c <_fflush_r>
 80175a2:	b938      	cbnz	r0, 80175b4 <__swbuf_r+0x74>
 80175a4:	4638      	mov	r0, r7
 80175a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80175a8:	4621      	mov	r1, r4
 80175aa:	4628      	mov	r0, r5
 80175ac:	f000 f806 	bl	80175bc <__swsetup_r>
 80175b0:	2800      	cmp	r0, #0
 80175b2:	d0d5      	beq.n	8017560 <__swbuf_r+0x20>
 80175b4:	f04f 37ff 	mov.w	r7, #4294967295
 80175b8:	e7f4      	b.n	80175a4 <__swbuf_r+0x64>
	...

080175bc <__swsetup_r>:
 80175bc:	b538      	push	{r3, r4, r5, lr}
 80175be:	4b2a      	ldr	r3, [pc, #168]	; (8017668 <__swsetup_r+0xac>)
 80175c0:	4605      	mov	r5, r0
 80175c2:	6818      	ldr	r0, [r3, #0]
 80175c4:	460c      	mov	r4, r1
 80175c6:	b118      	cbz	r0, 80175d0 <__swsetup_r+0x14>
 80175c8:	6a03      	ldr	r3, [r0, #32]
 80175ca:	b90b      	cbnz	r3, 80175d0 <__swsetup_r+0x14>
 80175cc:	f7fc fdd4 	bl	8014178 <__sinit>
 80175d0:	89a3      	ldrh	r3, [r4, #12]
 80175d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80175d6:	0718      	lsls	r0, r3, #28
 80175d8:	d422      	bmi.n	8017620 <__swsetup_r+0x64>
 80175da:	06d9      	lsls	r1, r3, #27
 80175dc:	d407      	bmi.n	80175ee <__swsetup_r+0x32>
 80175de:	2309      	movs	r3, #9
 80175e0:	602b      	str	r3, [r5, #0]
 80175e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80175e6:	81a3      	strh	r3, [r4, #12]
 80175e8:	f04f 30ff 	mov.w	r0, #4294967295
 80175ec:	e034      	b.n	8017658 <__swsetup_r+0x9c>
 80175ee:	0758      	lsls	r0, r3, #29
 80175f0:	d512      	bpl.n	8017618 <__swsetup_r+0x5c>
 80175f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80175f4:	b141      	cbz	r1, 8017608 <__swsetup_r+0x4c>
 80175f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80175fa:	4299      	cmp	r1, r3
 80175fc:	d002      	beq.n	8017604 <__swsetup_r+0x48>
 80175fe:	4628      	mov	r0, r5
 8017600:	f7fd fdf4 	bl	80151ec <_free_r>
 8017604:	2300      	movs	r3, #0
 8017606:	6363      	str	r3, [r4, #52]	; 0x34
 8017608:	89a3      	ldrh	r3, [r4, #12]
 801760a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801760e:	81a3      	strh	r3, [r4, #12]
 8017610:	2300      	movs	r3, #0
 8017612:	6063      	str	r3, [r4, #4]
 8017614:	6923      	ldr	r3, [r4, #16]
 8017616:	6023      	str	r3, [r4, #0]
 8017618:	89a3      	ldrh	r3, [r4, #12]
 801761a:	f043 0308 	orr.w	r3, r3, #8
 801761e:	81a3      	strh	r3, [r4, #12]
 8017620:	6923      	ldr	r3, [r4, #16]
 8017622:	b94b      	cbnz	r3, 8017638 <__swsetup_r+0x7c>
 8017624:	89a3      	ldrh	r3, [r4, #12]
 8017626:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801762a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801762e:	d003      	beq.n	8017638 <__swsetup_r+0x7c>
 8017630:	4621      	mov	r1, r4
 8017632:	4628      	mov	r0, r5
 8017634:	f000 f884 	bl	8017740 <__smakebuf_r>
 8017638:	89a0      	ldrh	r0, [r4, #12]
 801763a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801763e:	f010 0301 	ands.w	r3, r0, #1
 8017642:	d00a      	beq.n	801765a <__swsetup_r+0x9e>
 8017644:	2300      	movs	r3, #0
 8017646:	60a3      	str	r3, [r4, #8]
 8017648:	6963      	ldr	r3, [r4, #20]
 801764a:	425b      	negs	r3, r3
 801764c:	61a3      	str	r3, [r4, #24]
 801764e:	6923      	ldr	r3, [r4, #16]
 8017650:	b943      	cbnz	r3, 8017664 <__swsetup_r+0xa8>
 8017652:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017656:	d1c4      	bne.n	80175e2 <__swsetup_r+0x26>
 8017658:	bd38      	pop	{r3, r4, r5, pc}
 801765a:	0781      	lsls	r1, r0, #30
 801765c:	bf58      	it	pl
 801765e:	6963      	ldrpl	r3, [r4, #20]
 8017660:	60a3      	str	r3, [r4, #8]
 8017662:	e7f4      	b.n	801764e <__swsetup_r+0x92>
 8017664:	2000      	movs	r0, #0
 8017666:	e7f7      	b.n	8017658 <__swsetup_r+0x9c>
 8017668:	2000032c 	.word	0x2000032c

0801766c <_raise_r>:
 801766c:	291f      	cmp	r1, #31
 801766e:	b538      	push	{r3, r4, r5, lr}
 8017670:	4604      	mov	r4, r0
 8017672:	460d      	mov	r5, r1
 8017674:	d904      	bls.n	8017680 <_raise_r+0x14>
 8017676:	2316      	movs	r3, #22
 8017678:	6003      	str	r3, [r0, #0]
 801767a:	f04f 30ff 	mov.w	r0, #4294967295
 801767e:	bd38      	pop	{r3, r4, r5, pc}
 8017680:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017682:	b112      	cbz	r2, 801768a <_raise_r+0x1e>
 8017684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017688:	b94b      	cbnz	r3, 801769e <_raise_r+0x32>
 801768a:	4620      	mov	r0, r4
 801768c:	f000 f830 	bl	80176f0 <_getpid_r>
 8017690:	462a      	mov	r2, r5
 8017692:	4601      	mov	r1, r0
 8017694:	4620      	mov	r0, r4
 8017696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801769a:	f000 b817 	b.w	80176cc <_kill_r>
 801769e:	2b01      	cmp	r3, #1
 80176a0:	d00a      	beq.n	80176b8 <_raise_r+0x4c>
 80176a2:	1c59      	adds	r1, r3, #1
 80176a4:	d103      	bne.n	80176ae <_raise_r+0x42>
 80176a6:	2316      	movs	r3, #22
 80176a8:	6003      	str	r3, [r0, #0]
 80176aa:	2001      	movs	r0, #1
 80176ac:	e7e7      	b.n	801767e <_raise_r+0x12>
 80176ae:	2400      	movs	r4, #0
 80176b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80176b4:	4628      	mov	r0, r5
 80176b6:	4798      	blx	r3
 80176b8:	2000      	movs	r0, #0
 80176ba:	e7e0      	b.n	801767e <_raise_r+0x12>

080176bc <raise>:
 80176bc:	4b02      	ldr	r3, [pc, #8]	; (80176c8 <raise+0xc>)
 80176be:	4601      	mov	r1, r0
 80176c0:	6818      	ldr	r0, [r3, #0]
 80176c2:	f7ff bfd3 	b.w	801766c <_raise_r>
 80176c6:	bf00      	nop
 80176c8:	2000032c 	.word	0x2000032c

080176cc <_kill_r>:
 80176cc:	b538      	push	{r3, r4, r5, lr}
 80176ce:	4d07      	ldr	r5, [pc, #28]	; (80176ec <_kill_r+0x20>)
 80176d0:	2300      	movs	r3, #0
 80176d2:	4604      	mov	r4, r0
 80176d4:	4608      	mov	r0, r1
 80176d6:	4611      	mov	r1, r2
 80176d8:	602b      	str	r3, [r5, #0]
 80176da:	f7ee f995 	bl	8005a08 <_kill>
 80176de:	1c43      	adds	r3, r0, #1
 80176e0:	d102      	bne.n	80176e8 <_kill_r+0x1c>
 80176e2:	682b      	ldr	r3, [r5, #0]
 80176e4:	b103      	cbz	r3, 80176e8 <_kill_r+0x1c>
 80176e6:	6023      	str	r3, [r4, #0]
 80176e8:	bd38      	pop	{r3, r4, r5, pc}
 80176ea:	bf00      	nop
 80176ec:	2000752c 	.word	0x2000752c

080176f0 <_getpid_r>:
 80176f0:	f7ee b982 	b.w	80059f8 <_getpid>

080176f4 <__swhatbuf_r>:
 80176f4:	b570      	push	{r4, r5, r6, lr}
 80176f6:	460c      	mov	r4, r1
 80176f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176fc:	2900      	cmp	r1, #0
 80176fe:	b096      	sub	sp, #88	; 0x58
 8017700:	4615      	mov	r5, r2
 8017702:	461e      	mov	r6, r3
 8017704:	da0d      	bge.n	8017722 <__swhatbuf_r+0x2e>
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	f013 0f80 	tst.w	r3, #128	; 0x80
 801770c:	f04f 0100 	mov.w	r1, #0
 8017710:	bf0c      	ite	eq
 8017712:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017716:	2340      	movne	r3, #64	; 0x40
 8017718:	2000      	movs	r0, #0
 801771a:	6031      	str	r1, [r6, #0]
 801771c:	602b      	str	r3, [r5, #0]
 801771e:	b016      	add	sp, #88	; 0x58
 8017720:	bd70      	pop	{r4, r5, r6, pc}
 8017722:	466a      	mov	r2, sp
 8017724:	f000 f848 	bl	80177b8 <_fstat_r>
 8017728:	2800      	cmp	r0, #0
 801772a:	dbec      	blt.n	8017706 <__swhatbuf_r+0x12>
 801772c:	9901      	ldr	r1, [sp, #4]
 801772e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017732:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017736:	4259      	negs	r1, r3
 8017738:	4159      	adcs	r1, r3
 801773a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801773e:	e7eb      	b.n	8017718 <__swhatbuf_r+0x24>

08017740 <__smakebuf_r>:
 8017740:	898b      	ldrh	r3, [r1, #12]
 8017742:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017744:	079d      	lsls	r5, r3, #30
 8017746:	4606      	mov	r6, r0
 8017748:	460c      	mov	r4, r1
 801774a:	d507      	bpl.n	801775c <__smakebuf_r+0x1c>
 801774c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017750:	6023      	str	r3, [r4, #0]
 8017752:	6123      	str	r3, [r4, #16]
 8017754:	2301      	movs	r3, #1
 8017756:	6163      	str	r3, [r4, #20]
 8017758:	b002      	add	sp, #8
 801775a:	bd70      	pop	{r4, r5, r6, pc}
 801775c:	ab01      	add	r3, sp, #4
 801775e:	466a      	mov	r2, sp
 8017760:	f7ff ffc8 	bl	80176f4 <__swhatbuf_r>
 8017764:	9900      	ldr	r1, [sp, #0]
 8017766:	4605      	mov	r5, r0
 8017768:	4630      	mov	r0, r6
 801776a:	f7fe f90b 	bl	8015984 <_malloc_r>
 801776e:	b948      	cbnz	r0, 8017784 <__smakebuf_r+0x44>
 8017770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017774:	059a      	lsls	r2, r3, #22
 8017776:	d4ef      	bmi.n	8017758 <__smakebuf_r+0x18>
 8017778:	f023 0303 	bic.w	r3, r3, #3
 801777c:	f043 0302 	orr.w	r3, r3, #2
 8017780:	81a3      	strh	r3, [r4, #12]
 8017782:	e7e3      	b.n	801774c <__smakebuf_r+0xc>
 8017784:	89a3      	ldrh	r3, [r4, #12]
 8017786:	6020      	str	r0, [r4, #0]
 8017788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801778c:	81a3      	strh	r3, [r4, #12]
 801778e:	9b00      	ldr	r3, [sp, #0]
 8017790:	6163      	str	r3, [r4, #20]
 8017792:	9b01      	ldr	r3, [sp, #4]
 8017794:	6120      	str	r0, [r4, #16]
 8017796:	b15b      	cbz	r3, 80177b0 <__smakebuf_r+0x70>
 8017798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801779c:	4630      	mov	r0, r6
 801779e:	f000 f81d 	bl	80177dc <_isatty_r>
 80177a2:	b128      	cbz	r0, 80177b0 <__smakebuf_r+0x70>
 80177a4:	89a3      	ldrh	r3, [r4, #12]
 80177a6:	f023 0303 	bic.w	r3, r3, #3
 80177aa:	f043 0301 	orr.w	r3, r3, #1
 80177ae:	81a3      	strh	r3, [r4, #12]
 80177b0:	89a3      	ldrh	r3, [r4, #12]
 80177b2:	431d      	orrs	r5, r3
 80177b4:	81a5      	strh	r5, [r4, #12]
 80177b6:	e7cf      	b.n	8017758 <__smakebuf_r+0x18>

080177b8 <_fstat_r>:
 80177b8:	b538      	push	{r3, r4, r5, lr}
 80177ba:	4d07      	ldr	r5, [pc, #28]	; (80177d8 <_fstat_r+0x20>)
 80177bc:	2300      	movs	r3, #0
 80177be:	4604      	mov	r4, r0
 80177c0:	4608      	mov	r0, r1
 80177c2:	4611      	mov	r1, r2
 80177c4:	602b      	str	r3, [r5, #0]
 80177c6:	f7ee f97e 	bl	8005ac6 <_fstat>
 80177ca:	1c43      	adds	r3, r0, #1
 80177cc:	d102      	bne.n	80177d4 <_fstat_r+0x1c>
 80177ce:	682b      	ldr	r3, [r5, #0]
 80177d0:	b103      	cbz	r3, 80177d4 <_fstat_r+0x1c>
 80177d2:	6023      	str	r3, [r4, #0]
 80177d4:	bd38      	pop	{r3, r4, r5, pc}
 80177d6:	bf00      	nop
 80177d8:	2000752c 	.word	0x2000752c

080177dc <_isatty_r>:
 80177dc:	b538      	push	{r3, r4, r5, lr}
 80177de:	4d06      	ldr	r5, [pc, #24]	; (80177f8 <_isatty_r+0x1c>)
 80177e0:	2300      	movs	r3, #0
 80177e2:	4604      	mov	r4, r0
 80177e4:	4608      	mov	r0, r1
 80177e6:	602b      	str	r3, [r5, #0]
 80177e8:	f7ee f97d 	bl	8005ae6 <_isatty>
 80177ec:	1c43      	adds	r3, r0, #1
 80177ee:	d102      	bne.n	80177f6 <_isatty_r+0x1a>
 80177f0:	682b      	ldr	r3, [r5, #0]
 80177f2:	b103      	cbz	r3, 80177f6 <_isatty_r+0x1a>
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	bd38      	pop	{r3, r4, r5, pc}
 80177f8:	2000752c 	.word	0x2000752c

080177fc <_init>:
 80177fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177fe:	bf00      	nop
 8017800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017802:	bc08      	pop	{r3}
 8017804:	469e      	mov	lr, r3
 8017806:	4770      	bx	lr

08017808 <_fini>:
 8017808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780a:	bf00      	nop
 801780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801780e:	bc08      	pop	{r3}
 8017810:	469e      	mov	lr, r3
 8017812:	4770      	bx	lr

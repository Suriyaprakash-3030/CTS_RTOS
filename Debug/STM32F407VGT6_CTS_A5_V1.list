
STM32F407VGT6_CTS_A5_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011f0  08019bc0  08019bc0  00029bc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801adb0  0801adb0  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  0801adb0  0801adb0  0002adb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801adb8  0801adb8  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801adb8  0801adb8  0002adb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801adbc  0801adbc  0002adbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000334  20000000  0801adc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030334  2**0
                  CONTENTS
 10 .bss          00007074  20000338  20000338  00030338  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200073ac  200073ac  00030338  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002bd17  00000000  00000000  000303a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007d0a  00000000  00000000  0005c0be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002468  00000000  00000000  00063dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001be4  00000000  00000000  00066230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000317c8  00000000  00000000  00067e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003c998  00000000  00000000  000995dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ec811  00000000  00000000  000d5f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a9a0  00000000  00000000  001c2788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008d  00000000  00000000  001cd128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000338 	.word	0x20000338
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019ba4 	.word	0x08019ba4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000033c 	.word	0x2000033c
 80001cc:	08019ba4 	.word	0x08019ba4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <analogRead>:

long map(long x, long in_min, long in_max, long out_min, long out_max);

/* Read ADC value based on the provided label */
uint32_t analogRead(ADC_Label label)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
    uint32_t adc_value = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]

    switch (label)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b04      	cmp	r3, #4
 8001030:	f200 809a 	bhi.w	8001168 <analogRead+0x158>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <analogRead+0x2c>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	08001051 	.word	0x08001051
 8001040:	08001089 	.word	0x08001089
 8001044:	080010c1 	.word	0x080010c1
 8001048:	080010f9 	.word	0x080010f9
 800104c:	08001131 	.word	0x08001131
    {
        case Curr_Sensor_ServoDC_M1:
            // Configure ADC3 for Curr_Sensor_ServoDC (GPIOC_PIN_2)
            sConfig.Channel = ADC_CHANNEL_12;
 8001050:	230c      	movs	r3, #12
 8001052:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	4619      	mov	r1, r3
 8001062:	4845      	ldr	r0, [pc, #276]	; (8001178 <analogRead+0x168>)
 8001064:	f007 fe02 	bl	8008c6c <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 8001068:	4843      	ldr	r0, [pc, #268]	; (8001178 <analogRead+0x168>)
 800106a:	f007 fc61 	bl	8008930 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800106e:	f04f 31ff 	mov.w	r1, #4294967295
 8001072:	4841      	ldr	r0, [pc, #260]	; (8001178 <analogRead+0x168>)
 8001074:	f007 fd61 	bl	8008b3a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 8001078:	483f      	ldr	r0, [pc, #252]	; (8001178 <analogRead+0x168>)
 800107a:	f007 fde9 	bl	8008c50 <HAL_ADC_GetValue>
 800107e:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 8001080:	483d      	ldr	r0, [pc, #244]	; (8001178 <analogRead+0x168>)
 8001082:	f007 fd27 	bl	8008ad4 <HAL_ADC_Stop>
            break;
 8001086:	e071      	b.n	800116c <analogRead+0x15c>

        case Curr_Sensor_Clamp_M2:
            // Configure ADC3 for Curr_Sensor_Clamp (GPIOC_PIN_3)
            sConfig.Channel = ADC_CHANNEL_13;
 8001088:	230d      	movs	r3, #13
 800108a:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 800108c:	2301      	movs	r3, #1
 800108e:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4837      	ldr	r0, [pc, #220]	; (8001178 <analogRead+0x168>)
 800109c:	f007 fde6 	bl	8008c6c <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 80010a0:	4835      	ldr	r0, [pc, #212]	; (8001178 <analogRead+0x168>)
 80010a2:	f007 fc45 	bl	8008930 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80010a6:	f04f 31ff 	mov.w	r1, #4294967295
 80010aa:	4833      	ldr	r0, [pc, #204]	; (8001178 <analogRead+0x168>)
 80010ac:	f007 fd45 	bl	8008b3a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 80010b0:	4831      	ldr	r0, [pc, #196]	; (8001178 <analogRead+0x168>)
 80010b2:	f007 fdcd 	bl	8008c50 <HAL_ADC_GetValue>
 80010b6:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 80010b8:	482f      	ldr	r0, [pc, #188]	; (8001178 <analogRead+0x168>)
 80010ba:	f007 fd0b 	bl	8008ad4 <HAL_ADC_Stop>
            break;
 80010be:	e055      	b.n	800116c <analogRead+0x15c>

        case Curr_Sensor_Spindle_M3:
            // Configure ADC3 for Curr_Sensor_Spindle (GPIOA_PIN_0)
            sConfig.Channel = ADC_CHANNEL_0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4829      	ldr	r0, [pc, #164]	; (8001178 <analogRead+0x168>)
 80010d4:	f007 fdca 	bl	8008c6c <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 80010d8:	4827      	ldr	r0, [pc, #156]	; (8001178 <analogRead+0x168>)
 80010da:	f007 fc29 	bl	8008930 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80010de:	f04f 31ff 	mov.w	r1, #4294967295
 80010e2:	4825      	ldr	r0, [pc, #148]	; (8001178 <analogRead+0x168>)
 80010e4:	f007 fd29 	bl	8008b3a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 80010e8:	4823      	ldr	r0, [pc, #140]	; (8001178 <analogRead+0x168>)
 80010ea:	f007 fdb1 	bl	8008c50 <HAL_ADC_GetValue>
 80010ee:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 80010f0:	4821      	ldr	r0, [pc, #132]	; (8001178 <analogRead+0x168>)
 80010f2:	f007 fcef 	bl	8008ad4 <HAL_ADC_Stop>
            break;
 80010f6:	e039      	b.n	800116c <analogRead+0x15c>

        case V12:
            // Configure ADC2 for V12 (GPIOA_PIN_1)
            sConfig.Channel = ADC_CHANNEL_1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <analogRead+0x16c>)
 800110c:	f007 fdae 	bl	8008c6c <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc2);
 8001110:	481a      	ldr	r0, [pc, #104]	; (800117c <analogRead+0x16c>)
 8001112:	f007 fc0d 	bl	8008930 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <analogRead+0x16c>)
 800111c:	f007 fd0d 	bl	8008b3a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc2);
 8001120:	4816      	ldr	r0, [pc, #88]	; (800117c <analogRead+0x16c>)
 8001122:	f007 fd95 	bl	8008c50 <HAL_ADC_GetValue>
 8001126:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc2);
 8001128:	4814      	ldr	r0, [pc, #80]	; (800117c <analogRead+0x16c>)
 800112a:	f007 fcd3 	bl	8008ad4 <HAL_ADC_Stop>
            break;
 800112e:	e01d      	b.n	800116c <analogRead+0x15c>

        case Sensor_Pressure:
            // Configure ADC1 for Sensor_Pressure (GPIOC_PIN_4)
            sConfig.Channel = ADC_CHANNEL_14;
 8001130:	230e      	movs	r3, #14
 8001132:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	480f      	ldr	r0, [pc, #60]	; (8001180 <analogRead+0x170>)
 8001144:	f007 fd92 	bl	8008c6c <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc1);
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <analogRead+0x170>)
 800114a:	f007 fbf1 	bl	8008930 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800114e:	f04f 31ff 	mov.w	r1, #4294967295
 8001152:	480b      	ldr	r0, [pc, #44]	; (8001180 <analogRead+0x170>)
 8001154:	f007 fcf1 	bl	8008b3a <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc1);
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <analogRead+0x170>)
 800115a:	f007 fd79 	bl	8008c50 <HAL_ADC_GetValue>
 800115e:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc1);
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <analogRead+0x170>)
 8001162:	f007 fcb7 	bl	8008ad4 <HAL_ADC_Stop>
            break;
 8001166:	e001      	b.n	800116c <analogRead+0x15c>

        default:
            // Handle invalid label case
            return 0;
 8001168:	2300      	movs	r3, #0
 800116a:	e000      	b.n	800116e <analogRead+0x15e>
    }
    return adc_value;
 800116c:	69fb      	ldr	r3, [r7, #28]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20002890 	.word	0x20002890
 800117c:	20002848 	.word	0x20002848
 8001180:	20002800 	.word	0x20002800

08001184 <pressureSensorReading>:

/* map Function to the sensor voltage to pressure */
float pressureSensorReading(void){
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8

  uint32_t PressureRead  =  analogRead(Sensor_Pressure);
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff ff40 	bl	8001010 <analogRead>
 8001190:	6078      	str	r0, [r7, #4]
   pressurechange	 =  map(PressureRead,314,3030,0,5300); //5300 -5 bar  4300 -4  //3300 -3 bar //2200 -2bar // 1120 - 1bar
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f241 43b4 	movw	r3, #5300	; 0x14b4
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	f640 32d6 	movw	r2, #3030	; 0xbd6
 80011a0:	f44f 719d 	mov.w	r1, #314	; 0x13a
 80011a4:	f000 f812 	bl	80011cc <map>
 80011a8:	ee07 0a90 	vmov	s15, r0
 80011ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <pressureSensorReading+0x44>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
  return pressurechange;
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <pressureSensorReading+0x44>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	ee07 3a90 	vmov	s15, r3

}
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200003b4 	.word	0x200003b4

080011cc <map>:

/* map Function  */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	69b9      	ldr	r1, [r7, #24]
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	1a8a      	subs	r2, r1, r2
 80011e6:	fb03 f202 	mul.w	r2, r3, r2
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	1acb      	subs	r3, r1, r3
 80011f0:	fb92 f2f3 	sdiv	r2, r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	4413      	add	r3, r2
    }
 80011f8:	4618      	mov	r0, r3
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <Convert_ADC_To_Current>:

// Function to convert ADC value to current in milliAmperes
int Convert_ADC_To_Current(uint16_t adc_value) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
	int16_t current =   map(adc_value,0,4095,-10000,10000);
 800120e:	88f8      	ldrh	r0, [r7, #6]
 8001210:	f242 7310 	movw	r3, #10000	; 0x2710
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <Convert_ADC_To_Current+0x40>)
 8001218:	f640 72ff 	movw	r2, #4095	; 0xfff
 800121c:	2100      	movs	r1, #0
 800121e:	f7ff ffd5 	bl	80011cc <map>
 8001222:	4603      	mov	r3, r0
 8001224:	81fb      	strh	r3, [r7, #14]
	 if(current < 0)
 8001226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da03      	bge.n	8001236 <Convert_ADC_To_Current+0x32>
	 {
		 current = current *(-1);
 800122e:	89fb      	ldrh	r3, [r7, #14]
 8001230:	425b      	negs	r3, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	81fb      	strh	r3, [r7, #14]
	 }
    return (int)current * 2;  // Return the calculated current in amperes
 8001236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123a:	005b      	lsls	r3, r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	ffffd8f0 	.word	0xffffd8f0

08001248 <CustomerFrontEnd>:





void CustomerFrontEnd(void *pvParameters) {
 8001248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
    LCDRGBControl(WHITE);
 8001252:	2064      	movs	r0, #100	; 0x64
 8001254:	f003 fe26 	bl	8004ea4 <LCDRGBControl>
    TareAll();
 8001258:	f003 feb0 	bl	8004fbc <TareAll>

    while (1) {
    	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800125c:	f04f 31ff 	mov.w	r1, #4294967295
 8001260:	2001      	movs	r0, #1
 8001262:	f012 fe17 	bl	8013e94 <ulTaskNotifyTake>
        vTaskDelay(pdMS_TO_TICKS(100));  // Prevent CPU overload
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f012 f802 	bl	8013270 <vTaskDelay>

        LoadingFunc(BLINK, LOADING);
 800126c:	2101      	movs	r1, #1
 800126e:	2002      	movs	r0, #2
 8001270:	f003 f972 	bl	8004558 <LoadingFunc>
        LCD_Init();
 8001274:	f003 fbc0 	bl	80049f8 <LCD_Init>


            xSemaphoreTake(LCDMutex, pdMS_TO_TICKS(1000));
 8001278:	4b96      	ldr	r3, [pc, #600]	; (80014d4 <CustomerFrontEnd+0x28c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001280:	4618      	mov	r0, r3
 8001282:	f011 fb49 	bl	8012918 <xQueueSemaphoreTake>
            LCD_Clear();
 8001286:	f003 fca1 	bl	8004bcc <LCD_Clear>
            xSemaphoreGive(LCDMutex);
 800128a:	4b92      	ldr	r3, [pc, #584]	; (80014d4 <CustomerFrontEnd+0x28c>)
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2300      	movs	r3, #0
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	f011 f9b4 	bl	8012600 <xQueueGenericSend>


        do {
            InitializeMachine();
 8001298:	f002 fdc6 	bl	8003e28 <InitializeMachine>
            LoadingFunc(ON, NOT_LOADING);
 800129c:	2100      	movs	r1, #0
 800129e:	2001      	movs	r0, #1
 80012a0:	f003 f95a 	bl	8004558 <LoadingFunc>
            vTaskDelay(10);
 80012a4:	200a      	movs	r0, #10
 80012a6:	f011 ffe3 	bl	8013270 <vTaskDelay>

            xSemaphoreTake(LCDMutex, pdMS_TO_TICKS(1000));
 80012aa:	4b8a      	ldr	r3, [pc, #552]	; (80014d4 <CustomerFrontEnd+0x28c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f011 fb30 	bl	8012918 <xQueueSemaphoreTake>
            printLCD(0, "Can on ", ENTER_SYMBOL);
 80012b8:	2201      	movs	r2, #1
 80012ba:	4987      	ldr	r1, [pc, #540]	; (80014d8 <CustomerFrontEnd+0x290>)
 80012bc:	2000      	movs	r0, #0
 80012be:	f003 fd85 	bl	8004dcc <printLCD>
            xSemaphoreGive(LCDMutex);
 80012c2:	4b84      	ldr	r3, [pc, #528]	; (80014d4 <CustomerFrontEnd+0x28c>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	2300      	movs	r3, #0
 80012c8:	2200      	movs	r2, #0
 80012ca:	2100      	movs	r1, #0
 80012cc:	f011 f998 	bl	8012600 <xQueueGenericSend>

            while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 80012d0:	e091      	b.n	80013f6 <CustomerFrontEnd+0x1ae>
                vTaskDelay(10);
 80012d2:	200a      	movs	r0, #10
 80012d4:	f011 ffcc 	bl	8013270 <vTaskDelay>
                DeveloperMenu();
 80012d8:	f004 fd6e 	bl	8005db8 <DeveloperMenu>

                if (xTaskGetTickCount() - StoringTime >= 1000) {
 80012dc:	f012 f910 	bl	8013500 <xTaskGetTickCount>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2200      	movs	r2, #0
 80012e4:	4698      	mov	r8, r3
 80012e6:	4691      	mov	r9, r2
 80012e8:	4b7c      	ldr	r3, [pc, #496]	; (80014dc <CustomerFrontEnd+0x294>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	ebb8 0402 	subs.w	r4, r8, r2
 80012f2:	eb69 0503 	sbc.w	r5, r9, r3
 80012f6:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80012fa:	f175 0300 	sbcs.w	r3, r5, #0
 80012fe:	d30c      	bcc.n	800131a <CustomerFrontEnd+0xd2>
                    StoringTime = xTaskGetTickCount();
 8001300:	f012 f8fe 	bl	8013500 <xTaskGetTickCount>
 8001304:	4603      	mov	r3, r0
 8001306:	2200      	movs	r2, #0
 8001308:	469a      	mov	sl, r3
 800130a:	4693      	mov	fp, r2
 800130c:	4b73      	ldr	r3, [pc, #460]	; (80014dc <CustomerFrontEnd+0x294>)
 800130e:	e9c3 ab00 	strd	sl, fp, [r3]
                    tareSend = Tareweight;
 8001312:	4b73      	ldr	r3, [pc, #460]	; (80014e0 <CustomerFrontEnd+0x298>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <CustomerFrontEnd+0x29c>)
 8001318:	6013      	str	r3, [r2, #0]
                }

                xSemaphoreTake(ButtonMutex, pdMS_TO_TICKS(500));
 800131a:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <CustomerFrontEnd+0x2a0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001322:	4618      	mov	r0, r3
 8001324:	f011 faf8 	bl	8012918 <xQueueSemaphoreTake>
                if (readKeypadNonBlock(ALL) == PLAYSTOPKEY) {
 8001328:	2000      	movs	r0, #0
 800132a:	f002 ff35 	bl	8004198 <readKeypadNonBlock>
 800132e:	4603      	mov	r3, r0
 8001330:	2b0d      	cmp	r3, #13
 8001332:	d12d      	bne.n	8001390 <CustomerFrontEnd+0x148>
                    xSemaphoreTake(LCDMutex, pdMS_TO_TICKS(1000));
 8001334:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <CustomerFrontEnd+0x28c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800133c:	4618      	mov	r0, r3
 800133e:	f011 faeb 	bl	8012918 <xQueueSemaphoreTake>
                    printLCD(0, "TARE", NO_SYMBOL);
 8001342:	2200      	movs	r2, #0
 8001344:	4969      	ldr	r1, [pc, #420]	; (80014ec <CustomerFrontEnd+0x2a4>)
 8001346:	2000      	movs	r0, #0
 8001348:	f003 fd40 	bl	8004dcc <printLCD>
                    xSemaphoreGive(LCDMutex);
 800134c:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <CustomerFrontEnd+0x28c>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	f011 f953 	bl	8012600 <xQueueGenericSend>

                    SubInit();
 800135a:	f002 fe7d 	bl	8004058 <SubInit>
                    TareAll();
 800135e:	f003 fe2d 	bl	8004fbc <TareAll>
                    vTaskDelay(500);
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f011 ff83 	bl	8013270 <vTaskDelay>

                    xSemaphoreTake(LCDMutex, pdMS_TO_TICKS(1000));
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <CustomerFrontEnd+0x28c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001372:	4618      	mov	r0, r3
 8001374:	f011 fad0 	bl	8012918 <xQueueSemaphoreTake>
                    printLCD(0, "Can on ", ENTER_SYMBOL);
 8001378:	2201      	movs	r2, #1
 800137a:	4957      	ldr	r1, [pc, #348]	; (80014d8 <CustomerFrontEnd+0x290>)
 800137c:	2000      	movs	r0, #0
 800137e:	f003 fd25 	bl	8004dcc <printLCD>
                    xSemaphoreGive(LCDMutex);
 8001382:	4b54      	ldr	r3, [pc, #336]	; (80014d4 <CustomerFrontEnd+0x28c>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	2300      	movs	r3, #0
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	f011 f938 	bl	8012600 <xQueueGenericSend>
                }
                xSemaphoreGive(ButtonMutex);
 8001390:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <CustomerFrontEnd+0x2a0>)
 8001392:	6818      	ldr	r0, [r3, #0]
 8001394:	2300      	movs	r3, #0
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	f011 f931 	bl	8012600 <xQueueGenericSend>

                xSemaphoreTake(LCDMutex, pdMS_TO_TICKS(1000));
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <CustomerFrontEnd+0x28c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a6:	4618      	mov	r0, r3
 80013a8:	f011 fab6 	bl	8012918 <xQueueSemaphoreTake>
                printLCDInt(2, "Curr.Weigh ", Tareweight, 0);
 80013ac:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <CustomerFrontEnd+0x298>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2300      	movs	r3, #0
 80013b2:	494f      	ldr	r1, [pc, #316]	; (80014f0 <CustomerFrontEnd+0x2a8>)
 80013b4:	2002      	movs	r0, #2
 80013b6:	f003 fc85 	bl	8004cc4 <printLCDInt>
                xSemaphoreGive(LCDMutex);
 80013ba:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <CustomerFrontEnd+0x28c>)
 80013bc:	6818      	ldr	r0, [r3, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	f011 f91c 	bl	8012600 <xQueueGenericSend>

                xSemaphoreTake(SDCardMutex, pdMS_TO_TICKS(1000));
 80013c8:	4b4a      	ldr	r3, [pc, #296]	; (80014f4 <CustomerFrontEnd+0x2ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013d0:	4618      	mov	r0, r3
 80013d2:	f011 faa1 	bl	8012918 <xQueueSemaphoreTake>
                UpdateTimeToSDCard(hours, minutes, seconds);
 80013d6:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <CustomerFrontEnd+0x2b0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a48      	ldr	r2, [pc, #288]	; (80014fc <CustomerFrontEnd+0x2b4>)
 80013dc:	6811      	ldr	r1, [r2, #0]
 80013de:	4a48      	ldr	r2, [pc, #288]	; (8001500 <CustomerFrontEnd+0x2b8>)
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f003 ffce 	bl	8005384 <UpdateTimeToSDCard>
                xSemaphoreGive(SDCardMutex);
 80013e8:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <CustomerFrontEnd+0x2ac>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	f011 f905 	bl	8012600 <xQueueGenericSend>
            while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 80013f6:	200d      	movs	r0, #13
 80013f8:	f001 fdb4 	bl	8002f64 <digitalRead>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f43f af67 	beq.w	80012d2 <CustomerFrontEnd+0x8a>
            }

            Unclamped_Weight = Total_Weight;
 8001404:	4b3f      	ldr	r3, [pc, #252]	; (8001504 <CustomerFrontEnd+0x2bc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a3f      	ldr	r2, [pc, #252]	; (8001508 <CustomerFrontEnd+0x2c0>)
 800140a:	6013      	str	r3, [r2, #0]
            LoadingFunc(BLINK, LOADING);
 800140c:	2101      	movs	r1, #1
 800140e:	2002      	movs	r0, #2
 8001410:	f003 f8a2 	bl	8004558 <LoadingFunc>
            moveMotorClampToLocBlock(M1POS2VAL);
 8001414:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8001418:	f001 fe18 	bl	800304c <moveMotorClampToLocBlock>
            LoadingFunc(BLINK, LOADING);
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f003 f89a 	bl	8004558 <LoadingFunc>
            vTaskDelay(1000);
 8001424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001428:	f011 ff22 	bl	8013270 <vTaskDelay>

            if (Total_Weight <= NO_BOTTLE_WEIGHT) {
 800142c:	4b35      	ldr	r3, [pc, #212]	; (8001504 <CustomerFrontEnd+0x2bc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b64      	cmp	r3, #100	; 0x64
 8001432:	dc29      	bgt.n	8001488 <CustomerFrontEnd+0x240>
                LoadingFunc(BLINK, NOT_LOADING);
 8001434:	2100      	movs	r1, #0
 8001436:	2002      	movs	r0, #2
 8001438:	f003 f88e 	bl	8004558 <LoadingFunc>

                xSemaphoreTake(LCDMutex, pdMS_TO_TICKS(1000));
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <CustomerFrontEnd+0x28c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001444:	4618      	mov	r0, r3
 8001446:	f011 fa67 	bl	8012918 <xQueueSemaphoreTake>
                LCD_Clear();
 800144a:	f003 fbbf 	bl	8004bcc <LCD_Clear>
                printLCD(0, "no can ", NO_SYMBOL);
 800144e:	2200      	movs	r2, #0
 8001450:	492e      	ldr	r1, [pc, #184]	; (800150c <CustomerFrontEnd+0x2c4>)
 8001452:	2000      	movs	r0, #0
 8001454:	f003 fcba 	bl	8004dcc <printLCD>
                xSemaphoreGive(LCDMutex);
 8001458:	4b1e      	ldr	r3, [pc, #120]	; (80014d4 <CustomerFrontEnd+0x28c>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	2200      	movs	r2, #0
 8001460:	2100      	movs	r1, #0
 8001462:	f011 f8cd 	bl	8012600 <xQueueGenericSend>

                vTaskDelay(5000);
 8001466:	f241 3088 	movw	r0, #5000	; 0x1388
 800146a:	f011 ff01 	bl	8013270 <vTaskDelay>
                LoadingFunc(BLINK, NOT_LOADING);
 800146e:	2100      	movs	r1, #0
 8001470:	2002      	movs	r0, #2
 8001472:	f003 f871 	bl	8004558 <LoadingFunc>
                moveMotorSpindleToLocBlock(M2POS1VAL);
 8001476:	2000      	movs	r0, #0
 8001478:	f001 fdbc 	bl	8002ff4 <moveMotorSpindleToLocBlock>
                vTaskDelay(500);
 800147c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001480:	f011 fef6 	bl	8013270 <vTaskDelay>
                UnlockCannister();
 8001484:	f000 fed8 	bl	8002238 <UnlockCannister>
            }
        } while (Total_Weight <= NO_BOTTLE_WEIGHT);
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <CustomerFrontEnd+0x2bc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	f77f af03 	ble.w	8001298 <CustomerFrontEnd+0x50>

        Servo_SetPercent(90);
 8001492:	205a      	movs	r0, #90	; 0x5a
 8001494:	f004 f90c 	bl	80056b0 <Servo_SetPercent>
        isAutoOperation = TRUE;
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <CustomerFrontEnd+0x2c8>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]

        xSemaphoreTake(SDCardMutex, pdMS_TO_TICKS(1000));
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <CustomerFrontEnd+0x2ac>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014a6:	4618      	mov	r0, r3
 80014a8:	f011 fa36 	bl	8012918 <xQueueSemaphoreTake>
        UpdateTimeToSDCard(hours, minutes, seconds);
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <CustomerFrontEnd+0x2b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <CustomerFrontEnd+0x2b4>)
 80014b2:	6811      	ldr	r1, [r2, #0]
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <CustomerFrontEnd+0x2b8>)
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 ff63 	bl	8005384 <UpdateTimeToSDCard>
        xSemaphoreGive(SDCardMutex);
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <CustomerFrontEnd+0x2ac>)
 80014c0:	6818      	ldr	r0, [r3, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	2100      	movs	r1, #0
 80014c8:	f011 f89a 	bl	8012600 <xQueueGenericSend>

        CustomerApp();
 80014cc:	f000 f822 	bl	8001514 <CustomerApp>
    	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80014d0:	e6c4      	b.n	800125c <CustomerFrontEnd+0x14>
 80014d2:	bf00      	nop
 80014d4:	20002b9c 	.word	0x20002b9c
 80014d8:	08019bc0 	.word	0x08019bc0
 80014dc:	20000358 	.word	0x20000358
 80014e0:	2000036c 	.word	0x2000036c
 80014e4:	2000039c 	.word	0x2000039c
 80014e8:	20002ba4 	.word	0x20002ba4
 80014ec:	08019bc8 	.word	0x08019bc8
 80014f0:	08019bd0 	.word	0x08019bd0
 80014f4:	20002ba0 	.word	0x20002ba0
 80014f8:	200003ac 	.word	0x200003ac
 80014fc:	200003a8 	.word	0x200003a8
 8001500:	200003a4 	.word	0x200003a4
 8001504:	20000364 	.word	0x20000364
 8001508:	20000384 	.word	0x20000384
 800150c:	08019bdc 	.word	0x08019bdc
 8001510:	2000010f 	.word	0x2000010f

08001514 <CustomerApp>:




void CustomerApp(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001518:	f003 fb58 	bl	8004bcc <LCD_Clear>
	ReadKeypadVar(ALL);
 800151c:	2000      	movs	r0, #0
 800151e:	f002 fdef 	bl	8004100 <ReadKeypadVar>
	LoadingFunc(ON, NOT_LOADING);
 8001522:	2100      	movs	r1, #0
 8001524:	2001      	movs	r0, #1
 8001526:	f003 f817 	bl	8004558 <LoadingFunc>
	if(Total_Weight > EMPTY_BOTTLE_WEIGHT)
 800152a:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <CustomerApp+0x140>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b4b      	cmp	r3, #75	; 0x4b
 8001530:	dd5a      	ble.n	80015e8 <CustomerApp+0xd4>
	{
		while (ReadKeypadVar(CONTROL) != ENTERKEY && cleanLongPressed == FALSE)
 8001532:	e029      	b.n	8001588 <CustomerApp+0x74>
		{
			if (isAutoOperation == FALSE)
 8001534:	4b48      	ldr	r3, [pc, #288]	; (8001658 <CustomerApp+0x144>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <CustomerApp+0x34>
			{
				printLCD(0, "complete ", ENTER_SYMBOL);
 800153c:	2201      	movs	r2, #1
 800153e:	4947      	ldr	r1, [pc, #284]	; (800165c <CustomerApp+0x148>)
 8001540:	2000      	movs	r0, #0
 8001542:	f003 fc43 	bl	8004dcc <printLCD>
 8001546:	e004      	b.n	8001552 <CustomerApp+0x3e>
			}
			else
			{
				printLCD(0, "automatic ", ENTER_SYMBOL);
 8001548:	2201      	movs	r2, #1
 800154a:	4945      	ldr	r1, [pc, #276]	; (8001660 <CustomerApp+0x14c>)
 800154c:	2000      	movs	r0, #0
 800154e:	f003 fc3d 	bl	8004dcc <printLCD>
			}
			printLCD(3, "Clean ", NO_SYMBOL);
 8001552:	2200      	movs	r2, #0
 8001554:	4943      	ldr	r1, [pc, #268]	; (8001664 <CustomerApp+0x150>)
 8001556:	2003      	movs	r0, #3
 8001558:	f003 fc38 	bl	8004dcc <printLCD>
			if(readKeypadNonBlock(CONTROL) == DELKEY)
 800155c:	2002      	movs	r0, #2
 800155e:	f002 fe1b 	bl	8004198 <readKeypadNonBlock>
 8001562:	4603      	mov	r3, r0
 8001564:	2b0e      	cmp	r3, #14
 8001566:	d10f      	bne.n	8001588 <CustomerApp+0x74>
			{
				moveMotorClampToLocBlock(M1POS1VAL);
 8001568:	2000      	movs	r0, #0
 800156a:	f001 fd6f 	bl	800304c <moveMotorClampToLocBlock>
				xTaskNotifyGive(xCustomerAppTaskEndHandle);
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <CustomerApp+0x154>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	2202      	movs	r2, #2
 8001576:	2100      	movs	r1, #0
 8001578:	f012 fcd8 	bl	8013f2c <xTaskGenericNotify>
				cleanLongPressed = 255;
 800157c:	4b3b      	ldr	r3, [pc, #236]	; (800166c <CustomerApp+0x158>)
 800157e:	22ff      	movs	r2, #255	; 0xff
 8001580:	701a      	strb	r2, [r3, #0]
				CleaningExitCounter = 0;
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <CustomerApp+0x15c>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
		while (ReadKeypadVar(CONTROL) != ENTERKEY && cleanLongPressed == FALSE)
 8001588:	2002      	movs	r0, #2
 800158a:	f002 fdb9 	bl	8004100 <ReadKeypadVar>
 800158e:	4603      	mov	r3, r0
 8001590:	2b0b      	cmp	r3, #11
 8001592:	d02e      	beq.n	80015f2 <CustomerApp+0xde>
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <CustomerApp+0x158>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0ca      	beq.n	8001534 <CustomerApp+0x20>
 800159e:	e028      	b.n	80015f2 <CustomerApp+0xde>
	}
	else
	{
		while (cleanLongPressed == FALSE)
		{
			ReadKeypadVar(CONTROL);
 80015a0:	2002      	movs	r0, #2
 80015a2:	f002 fdad 	bl	8004100 <ReadKeypadVar>
			printLCD(0, "CAN Empty! ", ENTER_SYMBOL);
 80015a6:	2201      	movs	r2, #1
 80015a8:	4932      	ldr	r1, [pc, #200]	; (8001674 <CustomerApp+0x160>)
 80015aa:	2000      	movs	r0, #0
 80015ac:	f003 fc0e 	bl	8004dcc <printLCD>
			printLCD(3, "Cleaning? ", NO_SYMBOL);
 80015b0:	2200      	movs	r2, #0
 80015b2:	4931      	ldr	r1, [pc, #196]	; (8001678 <CustomerApp+0x164>)
 80015b4:	2003      	movs	r0, #3
 80015b6:	f003 fc09 	bl	8004dcc <printLCD>
			if(readKeypadNonBlock(CONTROL) == ENTERKEY)
 80015ba:	2002      	movs	r0, #2
 80015bc:	f002 fdec 	bl	8004198 <readKeypadNonBlock>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b0b      	cmp	r3, #11
 80015c4:	d110      	bne.n	80015e8 <CustomerApp+0xd4>
			{
				xTaskNotifyGive(xCustomerAppTaskEndHandle);
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <CustomerApp+0x154>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	2202      	movs	r2, #2
 80015ce:	2100      	movs	r1, #0
 80015d0:	f012 fcac 	bl	8013f2c <xTaskGenericNotify>
				cleanLongPressed = 255;
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <CustomerApp+0x158>)
 80015d6:	22ff      	movs	r2, #255	; 0xff
 80015d8:	701a      	strb	r2, [r3, #0]
				CleaningExitCounter = 0;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <CustomerApp+0x15c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
				isAutoOperation = TRUE;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <CustomerApp+0x144>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
				break;
 80015e6:	e004      	b.n	80015f2 <CustomerApp+0xde>
		while (cleanLongPressed == FALSE)
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <CustomerApp+0x158>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0d6      	beq.n	80015a0 <CustomerApp+0x8c>
			}
		}
	}
		printLCD(3, " ", NO_SYMBOL);
 80015f2:	2200      	movs	r2, #0
 80015f4:	4921      	ldr	r1, [pc, #132]	; (800167c <CustomerApp+0x168>)
 80015f6:	2003      	movs	r0, #3
 80015f8:	f003 fbe8 	bl	8004dcc <printLCD>
		if (cleanLongPressed == TRUE) {
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <CustomerApp+0x158>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10a      	bne.n	800161c <CustomerApp+0x108>
#if DEBUG == 1
			SerialPrint("CLEANING PROCESS STARTED\n"); //If cleaning is selected
 8001606:	481e      	ldr	r0, [pc, #120]	; (8001680 <CustomerApp+0x16c>)
 8001608:	f003 ff9e 	bl	8005548 <SerialPrint>
#endif
			LCD_ClearStringBuffer();
 800160c:	f003 fb40 	bl	8004c90 <LCD_ClearStringBuffer>
			cleanOperation();
 8001610:	f000 fd3c 	bl	800208c <cleanOperation>
			cleanLongPressed = FALSE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <CustomerApp+0x158>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	e010      	b.n	800163e <CustomerApp+0x12a>
		}
		else if (isAutoOperation == FALSE) {
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <CustomerApp+0x144>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <CustomerApp+0x11e>
			LCD_ClearStringBuffer();
 8001624:	f003 fb34 	bl	8004c90 <LCD_ClearStringBuffer>
			manualOperation();                         //Manual Operation Is Selected
 8001628:	f000 f84c 	bl	80016c4 <manualOperation>
			LCD_ClearStringBuffer();
 800162c:	f003 fb30 	bl	8004c90 <LCD_ClearStringBuffer>
 8001630:	e005      	b.n	800163e <CustomerApp+0x12a>
		}
		else {
			LCD_ClearStringBuffer();
 8001632:	f003 fb2d 	bl	8004c90 <LCD_ClearStringBuffer>
			autoOperation();                          //Automatic Operation is Selected
 8001636:	f000 f8e7 	bl	8001808 <autoOperation>
			LCD_ClearStringBuffer();
 800163a:	f003 fb29 	bl	8004c90 <LCD_ClearStringBuffer>
		}
	UpdateTimeToSDCard( hours,  minutes,  seconds);
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <CustomerApp+0x170>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <CustomerApp+0x174>)
 8001644:	6811      	ldr	r1, [r2, #0]
 8001646:	4a11      	ldr	r2, [pc, #68]	; (800168c <CustomerApp+0x178>)
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f003 fe9a 	bl	8005384 <UpdateTimeToSDCard>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000364 	.word	0x20000364
 8001658:	2000010f 	.word	0x2000010f
 800165c:	08019be4 	.word	0x08019be4
 8001660:	08019bf0 	.word	0x08019bf0
 8001664:	08019bfc 	.word	0x08019bfc
 8001668:	20002ba8 	.word	0x20002ba8
 800166c:	200003f9 	.word	0x200003f9
 8001670:	20000395 	.word	0x20000395
 8001674:	08019c04 	.word	0x08019c04
 8001678:	08019c10 	.word	0x08019c10
 800167c:	08019c1c 	.word	0x08019c1c
 8001680:	08019c20 	.word	0x08019c20
 8001684:	200003ac 	.word	0x200003ac
 8001688:	200003a8 	.word	0x200003a8
 800168c:	200003a4 	.word	0x200003a4

08001690 <operationCancelled>:

static int operationCancelled()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	if(CleaningCancelFlag || adc_pressure > 100 ){
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <operationCancelled+0x28>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d103      	bne.n	80016a4 <operationCancelled+0x14>
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <operationCancelled+0x2c>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	2b64      	cmp	r3, #100	; 0x64
 80016a2:	d906      	bls.n	80016b2 <operationCancelled+0x22>
			printLCD(3, "Stop", NO_SYMBOL);
 80016a4:	2200      	movs	r2, #0
 80016a6:	4906      	ldr	r1, [pc, #24]	; (80016c0 <operationCancelled+0x30>)
 80016a8:	2003      	movs	r0, #3
 80016aa:	f003 fb8f 	bl	8004dcc <printLCD>
		   return 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <operationCancelled+0x24>
		}
	return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200000f1 	.word	0x200000f1
 80016bc:	200003b8 	.word	0x200003b8
 80016c0:	08019c3c 	.word	0x08019c3c

080016c4 <manualOperation>:

static void manualOperation(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 80016ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ce:	f007 f8c7 	bl	8008860 <HAL_Delay>
	LCD_Clear();
 80016d2:	f003 fa7b 	bl	8004bcc <LCD_Clear>
	CleaningCancelFlag = FALSE;
 80016d6:	4b42      	ldr	r3, [pc, #264]	; (80017e0 <manualOperation+0x11c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]

	LoadingFunc(BLINK, LOADING);
 80016dc:	2101      	movs	r1, #1
 80016de:	2002      	movs	r0, #2
 80016e0:	f002 ff3a 	bl	8004558 <LoadingFunc>
	moveMotorClampToLocBlock(M1POS2VAL);
 80016e4:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 80016e8:	f001 fcb0 	bl	800304c <moveMotorClampToLocBlock>
	Servo_SetPercent(ValveOpen);
 80016ec:	2064      	movs	r0, #100	; 0x64
 80016ee:	f003 ffdf 	bl	80056b0 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS9VAL);
 80016f2:	f641 30df 	movw	r0, #7135	; 0x1bdf
 80016f6:	f001 fc7d 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	HAL_Delay(500);
 80016fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016fe:	f007 f8af 	bl	8008860 <HAL_Delay>
	LCD_Clear();
 8001702:	f003 fa63 	bl	8004bcc <LCD_Clear>
	int Total_Weight_Old = Total_Weight;
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <manualOperation+0x120>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	607b      	str	r3, [r7, #4]
	HAL_Delay(2500);
 800170c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001710:	f007 f8a6 	bl	8008860 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > 25) {
 8001714:	e006      	b.n	8001724 <manualOperation+0x60>
		Total_Weight_Old = Total_Weight;
 8001716:	4b33      	ldr	r3, [pc, #204]	; (80017e4 <manualOperation+0x120>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	607b      	str	r3, [r7, #4]
		HAL_Delay(1000);
 800171c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001720:	f007 f89e 	bl	8008860 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > 25) {
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <manualOperation+0x120>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b19      	cmp	r3, #25
 800172e:	dcf2      	bgt.n	8001716 <manualOperation+0x52>
	}
	//moveMotor(VALVEMOTOR, ON, INT_INF); 			//Valve ON switching it on before so that the fresh water starts before the spindle moves down
	//moveMotorSpindleToLocBlock(M2POS2VAL); 			// Requirement from customer to stay position 2
	ManualOperation = TRUE;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <manualOperation+0x124>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
	CleaningOperationFlag = TRUE;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <manualOperation+0x128>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
	cleaningCycleProcess();
 800173c:	f000 fdb2 	bl	80022a4 <cleaningCycleProcess>
	uint32_t lastTime = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	603b      	str	r3, [r7, #0]
	moveMotor(VALVEMOTOR, OFF, INT_INF); 			//Valve OFF // switching it off before so that water is not not present after cleaning
 8001744:	4a2a      	ldr	r2, [pc, #168]	; (80017f0 <manualOperation+0x12c>)
 8001746:	2100      	movs	r1, #0
 8001748:	2003      	movs	r0, #3
 800174a:	f001 fdc3 	bl	80032d4 <moveMotor>
	moveMotorSpindleToLocBlock(M2POS1VAL);  		//M2 to P2
 800174e:	2000      	movs	r0, #0
 8001750:	f001 fc50 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	lastTime = HAL_GetTick();
 8001754:	f007 f878 	bl	8008848 <HAL_GetTick>
 8001758:	6038      	str	r0, [r7, #0]
	while(HAL_GetTick() - lastTime < 2000) {}		//  non-blocking like serial print.}; //M2 to P4 - 1st time;
 800175a:	bf00      	nop
 800175c:	f007 f874 	bl	8008848 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800176a:	d3f7      	bcc.n	800175c <manualOperation+0x98>
	servoCleaning();
 800176c:	f000 ff04 	bl	8002578 <servoCleaning>
	lastTime = HAL_GetTick();
 8001770:	f007 f86a 	bl	8008848 <HAL_GetTick>
 8001774:	6038      	str	r0, [r7, #0]
	while(HAL_GetTick() - lastTime < 2000) {}		//  non-blocking like serial print.}; //M2 to P4 - 1st time;
 8001776:	bf00      	nop
 8001778:	f007 f866 	bl	8008848 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001786:	d3f7      	bcc.n	8001778 <manualOperation+0xb4>
	UserCleaningCycleNumber = 1;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <manualOperation+0x130>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
	CleaningCancelFlag = TRUE;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <manualOperation+0x11c>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
	monitorEnterKey = FALSE;  						//Stop monitoring enter key presses in background
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <manualOperation+0x134>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
	monitorCleanKey = FALSE;  						//Stop monitoring clean key presses in background
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <manualOperation+0x138>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
	EnterPressed = FALSE;     						//Clean any presses of enter key in memory
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <manualOperation+0x13c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	//Excel 44 - 52
	//capCleaning();  NO cap cleaning as requested by customer on 17.01.2025
	LoadingFunc(ON, NOT_LOADING); 					//Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 80017a6:	2100      	movs	r1, #0
 80017a8:	2001      	movs	r0, #1
 80017aa:	f002 fed5 	bl	8004558 <LoadingFunc>
	Servo_SetPercent(90);
 80017ae:	205a      	movs	r0, #90	; 0x5a
 80017b0:	f003 ff7e 	bl	80056b0 <Servo_SetPercent>
	CleaningFlag = FALSE;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <manualOperation+0x140>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
	UnlockCannister();
 80017ba:	f000 fd3d 	bl	8002238 <UnlockCannister>
	HAL_Delay(100);
 80017be:	2064      	movs	r0, #100	; 0x64
 80017c0:	f007 f84e 	bl	8008860 <HAL_Delay>
	SubInit();
 80017c4:	f002 fc48 	bl	8004058 <SubInit>
	if(readKeypadNonBlock(CONTROL) == DELKEY)
 80017c8:	2002      	movs	r0, #2
 80017ca:	f002 fce5 	bl	8004198 <readKeypadNonBlock>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b0e      	cmp	r3, #14
 80017d2:	d102      	bne.n	80017da <manualOperation+0x116>
	{
		LCD_Clear();
 80017d4:	f003 f9fa 	bl	8004bcc <LCD_Clear>
		return;
 80017d8:	bf00      	nop
	}
}
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200000f1 	.word	0x200000f1
 80017e4:	20000364 	.word	0x20000364
 80017e8:	200003a0 	.word	0x200003a0
 80017ec:	20000393 	.word	0x20000393
 80017f0:	0098967f 	.word	0x0098967f
 80017f4:	200000f2 	.word	0x200000f2
 80017f8:	200003f6 	.word	0x200003f6
 80017fc:	200003f8 	.word	0x200003f8
 8001800:	200003f7 	.word	0x200003f7
 8001804:	20000392 	.word	0x20000392

08001808 <autoOperation>:

//Excel 57 - 88
static void autoOperation(void)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b098      	sub	sp, #96	; 0x60
 800180e:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001810:	f003 f9dc 	bl	8004bcc <LCD_Clear>
	Servo_SetPercent(90);
 8001814:	205a      	movs	r0, #90	; 0x5a
 8001816:	f003 ff4b 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(2000);
 800181a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800181e:	f007 f81f 	bl	8008860 <HAL_Delay>
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001822:	2101      	movs	r1, #1
 8001824:	2002      	movs	r0, #2
 8001826:	f002 fe97 	bl	8004558 <LoadingFunc>
	Servo_SetPercent(90); // Open valve at automatic (Servo before Cap Opening).
 800182a:	205a      	movs	r0, #90	; 0x5a
 800182c:	f003 ff40 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(2000);
 8001830:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001834:	f007 f814 	bl	8008860 <HAL_Delay>
	printLCD(0, " ", NO_SYMBOL);  //Clean 1st line
 8001838:	2200      	movs	r2, #0
 800183a:	49a1      	ldr	r1, [pc, #644]	; (8001ac0 <autoOperation+0x2b8>)
 800183c:	2000      	movs	r0, #0
 800183e:	f003 fac5 	bl	8004dcc <printLCD>
	printLCD(3, " ", NO_SYMBOL);  //Clean 4th line
 8001842:	2200      	movs	r2, #0
 8001844:	499e      	ldr	r1, [pc, #632]	; (8001ac0 <autoOperation+0x2b8>)
 8001846:	2003      	movs	r0, #3
 8001848:	f003 fac0 	bl	8004dcc <printLCD>
	LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 800184c:	2100      	movs	r1, #0
 800184e:	2001      	movs	r0, #1
 8001850:	f002 fe82 	bl	8004558 <LoadingFunc>
	Grams_Required = 0;
 8001854:	4b9b      	ldr	r3, [pc, #620]	; (8001ac4 <autoOperation+0x2bc>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
	while (Grams_Required <= DEAD_WEIGHT || Grams_Required > 100000) {
 800185a:	e03b      	b.n	80018d4 <autoOperation+0xcc>
		Take2RowEntries("Liters: ", "kg/Liters: "); //Saves entries in LitersVar and DensityVar.
 800185c:	499a      	ldr	r1, [pc, #616]	; (8001ac8 <autoOperation+0x2c0>)
 800185e:	489b      	ldr	r0, [pc, #620]	; (8001acc <autoOperation+0x2c4>)
 8001860:	f002 feb8 	bl	80045d4 <Take2RowEntries>
		Grams_Required = LitersVar * DensityVar * 1000.0; //Required weight is liters * density
 8001864:	4b9a      	ldr	r3, [pc, #616]	; (8001ad0 <autoOperation+0x2c8>)
 8001866:	ed93 7a00 	vldr	s14, [r3]
 800186a:	4b9a      	ldr	r3, [pc, #616]	; (8001ad4 <autoOperation+0x2cc>)
 800186c:	edd3 7a00 	vldr	s15, [r3]
 8001870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001874:	ee17 0a90 	vmov	r0, s15
 8001878:	f7fe fe76 	bl	8000568 <__aeabi_f2d>
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b95      	ldr	r3, [pc, #596]	; (8001ad8 <autoOperation+0x2d0>)
 8001882:	f7fe fec9 	bl	8000618 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f973 	bl	8000b78 <__aeabi_d2iz>
 8001892:	4603      	mov	r3, r0
 8001894:	4a8b      	ldr	r2, [pc, #556]	; (8001ac4 <autoOperation+0x2bc>)
 8001896:	6013      	str	r3, [r2, #0]
		if(Grams_Required <= DEAD_WEIGHT ) {
 8001898:	4b8a      	ldr	r3, [pc, #552]	; (8001ac4 <autoOperation+0x2bc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b6e      	cmp	r3, #110	; 0x6e
 800189e:	dc0a      	bgt.n	80018b6 <autoOperation+0xae>
			printLCD(0, " ", NO_SYMBOL);
 80018a0:	2200      	movs	r2, #0
 80018a2:	4987      	ldr	r1, [pc, #540]	; (8001ac0 <autoOperation+0x2b8>)
 80018a4:	2000      	movs	r0, #0
 80018a6:	f003 fa91 	bl	8004dcc <printLCD>
			printLCD(0, "Too Low Value", NO_SYMBOL);
 80018aa:	2200      	movs	r2, #0
 80018ac:	498b      	ldr	r1, [pc, #556]	; (8001adc <autoOperation+0x2d4>)
 80018ae:	2000      	movs	r0, #0
 80018b0:	f003 fa8c 	bl	8004dcc <printLCD>
 80018b4:	e00e      	b.n	80018d4 <autoOperation+0xcc>
		}else if(Grams_Required > 100000 ) {
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <autoOperation+0x2bc>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a89      	ldr	r2, [pc, #548]	; (8001ae0 <autoOperation+0x2d8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	dd09      	ble.n	80018d4 <autoOperation+0xcc>
			printLCD(0, " ", NO_SYMBOL);
 80018c0:	2200      	movs	r2, #0
 80018c2:	497f      	ldr	r1, [pc, #508]	; (8001ac0 <autoOperation+0x2b8>)
 80018c4:	2000      	movs	r0, #0
 80018c6:	f003 fa81 	bl	8004dcc <printLCD>
			printLCD(0, "Too High Value", NO_SYMBOL);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4985      	ldr	r1, [pc, #532]	; (8001ae4 <autoOperation+0x2dc>)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f003 fa7c 	bl	8004dcc <printLCD>
	while (Grams_Required <= DEAD_WEIGHT || Grams_Required > 100000) {
 80018d4:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <autoOperation+0x2bc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b6e      	cmp	r3, #110	; 0x6e
 80018da:	ddbf      	ble.n	800185c <autoOperation+0x54>
 80018dc:	4b79      	ldr	r3, [pc, #484]	; (8001ac4 <autoOperation+0x2bc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a7f      	ldr	r2, [pc, #508]	; (8001ae0 <autoOperation+0x2d8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	dcba      	bgt.n	800185c <autoOperation+0x54>
		}
	}
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 80018e6:	2101      	movs	r1, #1
 80018e8:	2002      	movs	r0, #2
 80018ea:	f002 fe35 	bl	8004558 <LoadingFunc>
	/*Valve Opne close for one second  currently only on A5 T2 */
	uint32_t ventileclean = HAL_GetTick();
 80018ee:	f006 ffab 	bl	8008848 <HAL_GetTick>
 80018f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80018f4:	4a7c      	ldr	r2, [pc, #496]	; (8001ae8 <autoOperation+0x2e0>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	2003      	movs	r0, #3
 80018fa:	f001 fceb 	bl	80032d4 <moveMotor>
	while(HAL_GetTick() - ventileclean <= 500);
 80018fe:	bf00      	nop
 8001900:	f006 ffa2 	bl	8008848 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800190e:	d9f7      	bls.n	8001900 <autoOperation+0xf8>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8001910:	4a75      	ldr	r2, [pc, #468]	; (8001ae8 <autoOperation+0x2e0>)
 8001912:	2101      	movs	r1, #1
 8001914:	2003      	movs	r0, #3
 8001916:	f001 fcdd 	bl	80032d4 <moveMotor>
	ventileclean =  HAL_GetTick();
 800191a:	f006 ff95 	bl	8008848 <HAL_GetTick>
 800191e:	63f8      	str	r0, [r7, #60]	; 0x3c
	while(HAL_GetTick() - ventileclean <= 500);
 8001920:	bf00      	nop
 8001922:	f006 ff91 	bl	8008848 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001930:	d9f7      	bls.n	8001922 <autoOperation+0x11a>
	ventileclean =  HAL_GetTick();
 8001932:	f006 ff89 	bl	8008848 <HAL_GetTick>
 8001936:	63f8      	str	r0, [r7, #60]	; 0x3c
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8001938:	4a6b      	ldr	r2, [pc, #428]	; (8001ae8 <autoOperation+0x2e0>)
 800193a:	2100      	movs	r1, #0
 800193c:	2003      	movs	r0, #3
 800193e:	f001 fcc9 	bl	80032d4 <moveMotor>
	HAL_Delay(2000); // waiting here as it needs more more for the pressure to release after freshwater
 8001942:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001946:	f006 ff8b 	bl	8008860 <HAL_Delay>
	float error = 0;
 800194a:	f04f 0300 	mov.w	r3, #0
 800194e:	63bb      	str	r3, [r7, #56]	; 0x38

	printLCD(2, " ", NO_SYMBOL);
 8001950:	2200      	movs	r2, #0
 8001952:	495b      	ldr	r1, [pc, #364]	; (8001ac0 <autoOperation+0x2b8>)
 8001954:	2002      	movs	r0, #2
 8001956:	f003 fa39 	bl	8004dcc <printLCD>
	printLCD(1, " ", NO_SYMBOL);
 800195a:	2200      	movs	r2, #0
 800195c:	4958      	ldr	r1, [pc, #352]	; (8001ac0 <autoOperation+0x2b8>)
 800195e:	2001      	movs	r0, #1
 8001960:	f003 fa34 	bl	8004dcc <printLCD>

	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING
 8001964:	2101      	movs	r1, #1
 8001966:	2002      	movs	r0, #2
 8001968:	f002 fdf6 	bl	8004558 <LoadingFunc>
	Servo_SetPercent(5);
 800196c:	2005      	movs	r0, #5
 800196e:	f003 fe9f 	bl	80056b0 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS2VAL); //Spindle/CAP Motor to Capping Position
 8001972:	f640 40b2 	movw	r0, #3250	; 0xcb2
 8001976:	f001 fb3d 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	HAL_Delay(6000);
 800197a:	f241 7070 	movw	r0, #6000	; 0x1770
 800197e:	f006 ff6f 	bl	8008860 <HAL_Delay>

	/* Added Stabilizing code such that the initial weight taken for measurement is constant*/
	HAL_Delay(500);
 8001982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001986:	f006 ff6b 	bl	8008860 <HAL_Delay>
	Weight_Initial = Total_Weight;
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <autoOperation+0x2e4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a58      	ldr	r2, [pc, #352]	; (8001af0 <autoOperation+0x2e8>)
 8001990:	6013      	str	r3, [r2, #0]
	//Weight_Initial = Unclamped_Weight;   //Normally Weight_Initial = Total_Weight
	long GramsToDispense = Grams_Required - DEAD_WEIGHT; //DEAD_WEIGHT is the dead weight in the system //Point # 11 for 20 grams bracket
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <autoOperation+0x2bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3b6e      	subs	r3, #110	; 0x6e
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
	Target_Weight = Weight_Initial - GramsToDispense;
 800199a:	4b55      	ldr	r3, [pc, #340]	; (8001af0 <autoOperation+0x2e8>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <autoOperation+0x2ec>)
 80019a4:	6013      	str	r3, [r2, #0]

#if DEBUG == 1
	SerialPrint("Liters Entered: ");
 80019a6:	4854      	ldr	r0, [pc, #336]	; (8001af8 <autoOperation+0x2f0>)
 80019a8:	f003 fdce 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(LitersVar);
 80019ac:	4b48      	ldr	r3, [pc, #288]	; (8001ad0 <autoOperation+0x2c8>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b6:	ee17 0a90 	vmov	r0, s15
 80019ba:	f003 fdfb 	bl	80055b4 <SerialPrintlnINT>
	SerialPrint("Density Entered: ");
 80019be:	484f      	ldr	r0, [pc, #316]	; (8001afc <autoOperation+0x2f4>)
 80019c0:	f003 fdc2 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(DensityVar);
 80019c4:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <autoOperation+0x2cc>)
 80019c6:	edd3 7a00 	vldr	s15, [r3]
 80019ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ce:	ee17 0a90 	vmov	r0, s15
 80019d2:	f003 fdef 	bl	80055b4 <SerialPrintlnINT>
	SerialPrint("Grams Calculated: ");
 80019d6:	484a      	ldr	r0, [pc, #296]	; (8001b00 <autoOperation+0x2f8>)
 80019d8:	f003 fdb6 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(Grams_Required);
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <autoOperation+0x2bc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 fde7 	bl	80055b4 <SerialPrintlnINT>
	SerialPrint("Initial weight: ");
 80019e6:	4847      	ldr	r0, [pc, #284]	; (8001b04 <autoOperation+0x2fc>)
 80019e8:	f003 fdae 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(Weight_Initial);
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <autoOperation+0x2e8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 fddf 	bl	80055b4 <SerialPrintlnINT>
	SerialPrint("Grams to dispense: ");
 80019f6:	4844      	ldr	r0, [pc, #272]	; (8001b08 <autoOperation+0x300>)
 80019f8:	f003 fda6 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(GramsToDispense);
 80019fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019fe:	f003 fdd9 	bl	80055b4 <SerialPrintlnINT>
	SerialPrint("UnClamped Weight: ");
 8001a02:	4842      	ldr	r0, [pc, #264]	; (8001b0c <autoOperation+0x304>)
 8001a04:	f003 fda0 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(Unclamped_Weight);
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <autoOperation+0x308>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fdd1 	bl	80055b4 <SerialPrintlnINT>
	SerialPrint("Target Weight: ");
 8001a12:	4840      	ldr	r0, [pc, #256]	; (8001b14 <autoOperation+0x30c>)
 8001a14:	f003 fd98 	bl	8005548 <SerialPrint>
	SerialPrintlnINT(Target_Weight);
 8001a18:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <autoOperation+0x2ec>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fdc9 	bl	80055b4 <SerialPrintlnINT>
#endif
	if (Target_Weight < 0)
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <autoOperation+0x2ec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da0d      	bge.n	8001a46 <autoOperation+0x23e>
		Target_Weight = (Target_Weight * (-1) + Weight_Initial);
 8001a2a:	4b31      	ldr	r3, [pc, #196]	; (8001af0 <autoOperation+0x2e8>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4b31      	ldr	r3, [pc, #196]	; (8001af4 <autoOperation+0x2ec>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	4a2f      	ldr	r2, [pc, #188]	; (8001af4 <autoOperation+0x2ec>)
 8001a36:	6013      	str	r3, [r2, #0]

	while(Total_Weight < Target_Weight)
 8001a38:	e005      	b.n	8001a46 <autoOperation+0x23e>
	{
		CustomerAppSub();
 8001a3a:	f000 fa81 	bl	8001f40 <CustomerAppSub>
		HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f006 ff0d 	bl	8008860 <HAL_Delay>
	while(Total_Weight < Target_Weight)
 8001a46:	4b29      	ldr	r3, [pc, #164]	; (8001aec <autoOperation+0x2e4>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	4b2a      	ldr	r3, [pc, #168]	; (8001af4 <autoOperation+0x2ec>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf3      	blt.n	8001a3a <autoOperation+0x232>
	}

	while (Total_Weight < Target_Weight + 10) {
 8001a52:	e00a      	b.n	8001a6a <autoOperation+0x262>
			HAL_Delay(10);
 8001a54:	200a      	movs	r0, #10
 8001a56:	f006 ff03 	bl	8008860 <HAL_Delay>
			SerialPrint("Negative Weight: ");
 8001a5a:	482f      	ldr	r0, [pc, #188]	; (8001b18 <autoOperation+0x310>)
 8001a5c:	f003 fd74 	bl	8005548 <SerialPrint>
			SerialPrintlnINT(Total_Weight);
 8001a60:	4b22      	ldr	r3, [pc, #136]	; (8001aec <autoOperation+0x2e4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fda5 	bl	80055b4 <SerialPrintlnINT>
	while (Total_Weight < Target_Weight + 10) {
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <autoOperation+0x2ec>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f103 0209 	add.w	r2, r3, #9
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <autoOperation+0x2e4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	daec      	bge.n	8001a54 <autoOperation+0x24c>
	}
	uint32_t tickstart = HAL_GetTick();
 8001a7a:	f006 fee5 	bl	8008848 <HAL_GetTick>
 8001a7e:	65f8      	str	r0, [r7, #92]	; 0x5c
	long Weight_Initial1 = Total_Weight;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <autoOperation+0x2e4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	65bb      	str	r3, [r7, #88]	; 0x58
	 int is_in_range = FALSE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	657b      	str	r3, [r7, #84]	; 0x54
		int cnt = 0;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	653b      	str	r3, [r7, #80]	; 0x50
 //Reduced the Stablizing to 3seconds from 8 seconds
		while (!is_in_range)
 8001a8e:	e052      	b.n	8001b36 <autoOperation+0x32e>
		{
			while((HAL_GetTick() - tickstart) < 100);
 8001a90:	bf00      	nop
 8001a92:	f006 fed9 	bl	8008848 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b63      	cmp	r3, #99	; 0x63
 8001a9e:	d9f8      	bls.n	8001a92 <autoOperation+0x28a>

			if((Total_Weight <= Weight_Initial1 + 4) && (Total_Weight >= Weight_Initial1 - 4))
 8001aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa2:	1d1a      	adds	r2, r3, #4
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <autoOperation+0x2e4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	db37      	blt.n	8001b1c <autoOperation+0x314>
 8001aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aae:	1f1a      	subs	r2, r3, #4
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <autoOperation+0x2e4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dc31      	bgt.n	8001b1c <autoOperation+0x314>
			{
				cnt++;
 8001ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aba:	3301      	adds	r3, #1
 8001abc:	653b      	str	r3, [r7, #80]	; 0x50
 8001abe:	e02f      	b.n	8001b20 <autoOperation+0x318>
 8001ac0:	08019c1c 	.word	0x08019c1c
 8001ac4:	20000374 	.word	0x20000374
 8001ac8:	08019c44 	.word	0x08019c44
 8001acc:	08019c50 	.word	0x08019c50
 8001ad0:	20000378 	.word	0x20000378
 8001ad4:	2000037c 	.word	0x2000037c
 8001ad8:	408f4000 	.word	0x408f4000
 8001adc:	08019c5c 	.word	0x08019c5c
 8001ae0:	000186a0 	.word	0x000186a0
 8001ae4:	08019c6c 	.word	0x08019c6c
 8001ae8:	0098967f 	.word	0x0098967f
 8001aec:	20000364 	.word	0x20000364
 8001af0:	20000368 	.word	0x20000368
 8001af4:	20000370 	.word	0x20000370
 8001af8:	08019c7c 	.word	0x08019c7c
 8001afc:	08019c90 	.word	0x08019c90
 8001b00:	08019ca4 	.word	0x08019ca4
 8001b04:	08019cb8 	.word	0x08019cb8
 8001b08:	08019ccc 	.word	0x08019ccc
 8001b0c:	08019ce0 	.word	0x08019ce0
 8001b10:	20000384 	.word	0x20000384
 8001b14:	08019cf4 	.word	0x08019cf4
 8001b18:	08019d04 	.word	0x08019d04
			}
			else
			{
				cnt = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	653b      	str	r3, [r7, #80]	; 0x50
			}

			if (cnt >= 15)
 8001b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b22:	2b0e      	cmp	r3, #14
 8001b24:	dd01      	ble.n	8001b2a <autoOperation+0x322>
			{
				is_in_range = TRUE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	657b      	str	r3, [r7, #84]	; 0x54
			}
			Weight_Initial1 = Total_Weight;
 8001b2a:	4bc0      	ldr	r3, [pc, #768]	; (8001e2c <autoOperation+0x624>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	65bb      	str	r3, [r7, #88]	; 0x58
			tickstart = HAL_GetTick();
 8001b30:	f006 fe8a 	bl	8008848 <HAL_GetTick>
 8001b34:	65f8      	str	r0, [r7, #92]	; 0x5c
		while (!is_in_range)
 8001b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0a9      	beq.n	8001a90 <autoOperation+0x288>
		}
	HAL_Delay(1000);
 8001b3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b40:	f006 fe8e 	bl	8008860 <HAL_Delay>
	//printLCD(1, "Dispensing....", NO_SYMBOL); // Clean 2nd line
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING
 8001b44:	2101      	movs	r1, #1
 8001b46:	2002      	movs	r0, #2
 8001b48:	f002 fd06 	bl	8004558 <LoadingFunc>
	Kp = -1337;
 8001b4c:	4bb8      	ldr	r3, [pc, #736]	; (8001e30 <autoOperation+0x628>)
 8001b4e:	4ab9      	ldr	r2, [pc, #740]	; (8001e34 <autoOperation+0x62c>)
 8001b50:	601a      	str	r2, [r3, #0]
	uint64_t get_timeTick = HAL_GetTick();
 8001b52:	f006 fe79 	bl	8008848 <HAL_GetTick>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	60fa      	str	r2, [r7, #12]
 8001b5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b62:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint16_t WhileWeight = Total_Weight;
 8001b66:	4bb1      	ldr	r3, [pc, #708]	; (8001e2c <autoOperation+0x624>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint8_t Kp_Counter = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	//uint8_t Kp_Counter_2 = 0;
	float minServoPosition = 12.0; // Minimum servo position for slow flow
 8001b74:	4bb0      	ldr	r3, [pc, #704]	; (8001e38 <autoOperation+0x630>)
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
	float maxServoPosition = 50.0; // Maximum servo position for high flow
 8001b78:	4bb0      	ldr	r3, [pc, #704]	; (8001e3c <autoOperation+0x634>)
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t stagnation_detected = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint64_t stagnation_start_time = 0;
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint8_t stagnation_factor = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	77fb      	strb	r3, [r7, #31]
	uint8_t Flag =0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint8_t max_opening =0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77bb      	strb	r3, [r7, #30]
	uint8_t UserCancel = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
#if DEBUG == 1
	printLCD(1, "Dispensing....", NO_SYMBOL); // Clean 2nd line
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	49a6      	ldr	r1, [pc, #664]	; (8001e40 <autoOperation+0x638>)
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f003 f910 	bl	8004dcc <printLCD>
#endif
	while (Total_Weight > Target_Weight) {
 8001bac:	e0e4      	b.n	8001d78 <autoOperation+0x570>
		   int keyread = readKeypadNonBlock(CONTROL);
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f002 faf2 	bl	8004198 <readKeypadNonBlock>
 8001bb4:	61b8      	str	r0, [r7, #24]
		   if(keyread == ENTERKEY)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b0b      	cmp	r3, #11
 8001bba:	d10b      	bne.n	8001bd4 <autoOperation+0x3cc>
		   {
			   SerialPrint("User Cancelled the Dispensing");
 8001bbc:	48a1      	ldr	r0, [pc, #644]	; (8001e44 <autoOperation+0x63c>)
 8001bbe:	f003 fcc3 	bl	8005548 <SerialPrint>
			   printLCD(0, "Stop", NO_SYMBOL);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	49a0      	ldr	r1, [pc, #640]	; (8001e48 <autoOperation+0x640>)
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f003 f900 	bl	8004dcc <printLCD>
			   UserCancel = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			   break;
 8001bd2:	e0d8      	b.n	8001d86 <autoOperation+0x57e>
		   }
		   else
		   {
				if(HAL_GetTick() - get_timeTick > 50)
 8001bd4:	f006 fe38 	bl	8008848 <HAL_GetTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4698      	mov	r8, r3
 8001bde:	4691      	mov	r9, r2
 8001be0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001be4:	ebb8 0402 	subs.w	r4, r8, r2
 8001be8:	eb69 0503 	sbc.w	r5, r9, r3
 8001bec:	2c33      	cmp	r4, #51	; 0x33
 8001bee:	f175 0300 	sbcs.w	r3, r5, #0
 8001bf2:	f0c0 80c1 	bcc.w	8001d78 <autoOperation+0x570>
				{
				  /* Automatically adjusting PID valves  for dispensing */
					 if(fabs(Total_Weight - Weight_Initial) > 30 && !Flag)
 8001bf6:	4b8d      	ldr	r3, [pc, #564]	; (8001e2c <autoOperation+0x624>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	4b94      	ldr	r3, [pc, #592]	; (8001e4c <autoOperation+0x644>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc9f 	bl	8000544 <__aeabi_i2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4692      	mov	sl, r2
 8001c0c:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001c10:	f04f 0200 	mov.w	r2, #0
 8001c14:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <autoOperation+0x648>)
 8001c16:	4650      	mov	r0, sl
 8001c18:	4659      	mov	r1, fp
 8001c1a:	f7fe ff8d 	bl	8000b38 <__aeabi_dcmpgt>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d017      	beq.n	8001c54 <autoOperation+0x44c>
 8001c24:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d113      	bne.n	8001c54 <autoOperation+0x44c>
					{
						max_opening = output;
 8001c2c:	4b89      	ldr	r3, [pc, #548]	; (8001e54 <autoOperation+0x64c>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c36:	edc7 7a02 	vstr	s15, [r7, #8]
 8001c3a:	7a3b      	ldrb	r3, [r7, #8]
 8001c3c:	77bb      	strb	r3, [r7, #30]
						minServoPosition = max_opening - 17;
 8001c3e:	7fbb      	ldrb	r3, [r7, #30]
 8001c40:	3b11      	subs	r3, #17
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
						Flag = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
					}
					error = Total_Weight - Target_Weight;
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <autoOperation+0x624>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b7f      	ldr	r3, [pc, #508]	; (8001e58 <autoOperation+0x650>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c66:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
					if (Kp < 0)
 8001c6a:	4b71      	ldr	r3, [pc, #452]	; (8001e30 <autoOperation+0x628>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d508      	bpl.n	8001c8c <autoOperation+0x484>
					{
						Kp = 20/error;
 8001c7a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c7e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001c82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c86:	4b6a      	ldr	r3, [pc, #424]	; (8001e30 <autoOperation+0x628>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
					}
					// P control with adjustment for small errors
					if (fabs(Total_Weight - WhileWeight) <= 10) {
 8001c8c:	4b67      	ldr	r3, [pc, #412]	; (8001e2c <autoOperation+0x624>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc54 	bl	8000544 <__aeabi_i2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	613a      	str	r2, [r7, #16]
 8001ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <autoOperation+0x654>)
 8001cae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cb2:	f7fe ff2d 	bl	8000b10 <__aeabi_dcmple>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d022      	beq.n	8001d02 <autoOperation+0x4fa>
						Kp_Counter++;
 8001cbc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
						if (Kp_Counter >= 10) {
 8001cc6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d919      	bls.n	8001d02 <autoOperation+0x4fa>
							if(error >= 1)
 8001cce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cde:	db0d      	blt.n	8001cfc <autoOperation+0x4f4>
							{
								Kp= Kp + (1/error);
 8001ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ce4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cec:	4b50      	ldr	r3, [pc, #320]	; (8001e30 <autoOperation+0x628>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf6:	4b4e      	ldr	r3, [pc, #312]	; (8001e30 <autoOperation+0x628>)
 8001cf8:	edc3 7a00 	vstr	s15, [r3]
							}
							Kp_Counter= 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					//						Kp= Kp + (0.2/error);
					//					}
										//output = (Kp * error);
									}
*/
					if (error < 100)
 8001d02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d06:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001e60 <autoOperation+0x658>
 8001d0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d12:	d503      	bpl.n	8001d1c <autoOperation+0x514>
					{
						 SerialPrint("Error is less for Dispensing");
 8001d14:	4853      	ldr	r0, [pc, #332]	; (8001e64 <autoOperation+0x65c>)
 8001d16:	f003 fc17 	bl	8005548 <SerialPrint>
 8001d1a:	e009      	b.n	8001d30 <autoOperation+0x528>
						 //Kp = Kp + 0.001;  // need to test
						//write logic for small dispense
					}
					else
					{
						output = (Kp * error);
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <autoOperation+0x628>)
 8001d1e:	ed93 7a00 	vldr	s14, [r3]
 8001d22:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	4b4a      	ldr	r3, [pc, #296]	; (8001e54 <autoOperation+0x64c>)
 8001d2c:	edc3 7a00 	vstr	s15, [r3]
					}
					if (output > maxServoPosition) {
 8001d30:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <autoOperation+0x64c>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001d3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d502      	bpl.n	8001d4a <autoOperation+0x542>
							output = maxServoPosition;
 8001d44:	4a43      	ldr	r2, [pc, #268]	; (8001e54 <autoOperation+0x64c>)
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	6013      	str	r3, [r2, #0]
						}
					else if (output < minServoPosition) {
						}
				Servo_SetPercent(output);
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <autoOperation+0x64c>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d54:	ee17 0a90 	vmov	r0, s15
 8001d58:	f003 fcaa 	bl	80056b0 <Servo_SetPercent>
				get_timeTick = HAL_GetTick();
 8001d5c:	f006 fd74 	bl	8008848 <HAL_GetTick>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2200      	movs	r2, #0
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d6c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
				WhileWeight = Total_Weight;   // Update WhileWeight
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <autoOperation+0x624>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	while (Total_Weight > Target_Weight) {
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <autoOperation+0x624>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b36      	ldr	r3, [pc, #216]	; (8001e58 <autoOperation+0x650>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f73f af14 	bgt.w	8001bae <autoOperation+0x3a6>
			}

		  }
	}
	//Reaching here means the Total_Weight (current measured weight by load cells) is not more than what it should be after extraction
	Servo_SetPercent(ValveClose);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f003 fc92 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(1000);
 8001d8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d90:	f006 fd66 	bl	8008860 <HAL_Delay>
	output =0;
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <autoOperation+0x64c>)
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8001d9c:	f002 ff16 	bl	8004bcc <LCD_Clear>
	LoadingFunc(BLINK, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001da0:	2100      	movs	r1, #0
 8001da2:	2002      	movs	r0, #2
 8001da4:	f002 fbd8 	bl	8004558 <LoadingFunc>
	HAL_Delay(500);
 8001da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dac:	f006 fd58 	bl	8008860 <HAL_Delay>
	if(UserCancel == 1)
 8001db0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d105      	bne.n	8001dc4 <autoOperation+0x5bc>
	{
		printLCD(0, "Stop", NO_SYMBOL);
 8001db8:	2200      	movs	r2, #0
 8001dba:	4923      	ldr	r1, [pc, #140]	; (8001e48 <autoOperation+0x640>)
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f003 f805 	bl	8004dcc <printLCD>
 8001dc2:	e004      	b.n	8001dce <autoOperation+0x5c6>
	}
	else
	{
		printLCD(0, " Complete", NO_SYMBOL);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	4928      	ldr	r1, [pc, #160]	; (8001e68 <autoOperation+0x660>)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f002 ffff 	bl	8004dcc <printLCD>
	}
	//printLCD(0, " Complete", NO_SYMBOL);
	Target_Weight = 0;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <autoOperation+0x650>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
	moveMotorSpindleToLocBlock(M2POS1VAL); //Spindle/CAP to close/uncap position
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f001 f90d 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	HAL_Delay(500);
 8001dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dde:	f006 fd3f 	bl	8008860 <HAL_Delay>
	Servo_SetPercent(ValveOpen);
 8001de2:	2064      	movs	r0, #100	; 0x64
 8001de4:	f003 fc64 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(3000);   //Wait for 3 seconds
 8001de8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dec:	f006 fd38 	bl	8008860 <HAL_Delay>

	if (Total_Weight > NO_BOTTLE_WEIGHT) {
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <autoOperation+0x624>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	dc6c      	bgt.n	8001ed2 <autoOperation+0x6ca>
		//Bottle + Remaining Chemical
	}
	else {
		ReadKeypadVar(ALL); //Point # 2
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f002 f981 	bl	8004100 <ReadKeypadVar>
		LCD_Clear();
 8001dfe:	f002 fee5 	bl	8004bcc <LCD_Clear>
		printLCD(0, "Press DEL-Skip,for", 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	4919      	ldr	r1, [pc, #100]	; (8001e6c <autoOperation+0x664>)
 8001e06:	2000      	movs	r0, #0
 8001e08:	f002 ffe0 	bl	8004dcc <printLCD>
		printLCD(1, "Cleaning", 0);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4918      	ldr	r1, [pc, #96]	; (8001e70 <autoOperation+0x668>)
 8001e10:	2001      	movs	r0, #1
 8001e12:	f002 ffdb 	bl	8004dcc <printLCD>
		printLCD(2, "Press Enter Key", 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	4916      	ldr	r1, [pc, #88]	; (8001e74 <autoOperation+0x66c>)
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f002 ffd6 	bl	8004dcc <printLCD>
		printLCD(3, "To Continue", 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	4915      	ldr	r1, [pc, #84]	; (8001e78 <autoOperation+0x670>)
 8001e24:	2003      	movs	r0, #3
 8001e26:	f002 ffd1 	bl	8004dcc <printLCD>

		while ((lastKeyPressed == 255 || lastKeyPressed == DELKEY)){ //&& (delLongPressed == FALSE)) {
 8001e2a:	e02d      	b.n	8001e88 <autoOperation+0x680>
 8001e2c:	20000364 	.word	0x20000364
 8001e30:	200000f4 	.word	0x200000f4
 8001e34:	c4a72000 	.word	0xc4a72000
 8001e38:	41400000 	.word	0x41400000
 8001e3c:	42480000 	.word	0x42480000
 8001e40:	08019d18 	.word	0x08019d18
 8001e44:	08019d28 	.word	0x08019d28
 8001e48:	08019c3c 	.word	0x08019c3c
 8001e4c:	20000368 	.word	0x20000368
 8001e50:	403e0000 	.word	0x403e0000
 8001e54:	20000398 	.word	0x20000398
 8001e58:	20000370 	.word	0x20000370
 8001e5c:	40240000 	.word	0x40240000
 8001e60:	42c80000 	.word	0x42c80000
 8001e64:	08019d48 	.word	0x08019d48
 8001e68:	08019d68 	.word	0x08019d68
 8001e6c:	08019d74 	.word	0x08019d74
 8001e70:	08019d88 	.word	0x08019d88
 8001e74:	08019d94 	.word	0x08019d94
 8001e78:	08019da4 	.word	0x08019da4
			ReadKeypadVar(ALL);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f002 f93f 	bl	8004100 <ReadKeypadVar>
			HAL_Delay(1);
 8001e82:	2001      	movs	r0, #1
 8001e84:	f006 fcec 	bl	8008860 <HAL_Delay>
		while ((lastKeyPressed == 255 || lastKeyPressed == DELKEY)){ //&& (delLongPressed == FALSE)) {
 8001e88:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <autoOperation+0x724>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2bff      	cmp	r3, #255	; 0xff
 8001e8e:	d0f5      	beq.n	8001e7c <autoOperation+0x674>
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <autoOperation+0x724>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b0e      	cmp	r3, #14
 8001e96:	d0f1      	beq.n	8001e7c <autoOperation+0x674>
		}
		if (cleanLongPressed == TRUE) {
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <autoOperation+0x728>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <autoOperation+0x6a0>
			cleanOperation();
 8001ea2:	f000 f8f3 	bl	800208c <cleanOperation>
 8001ea6:	e014      	b.n	8001ed2 <autoOperation+0x6ca>
		}
		else if(lastKeyPressed == DELKEY)
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <autoOperation+0x724>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b0e      	cmp	r3, #14
 8001eae:	d10d      	bne.n	8001ecc <autoOperation+0x6c4>
		{
			CleaningExitCounter = 0;
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <autoOperation+0x72c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
			xTaskNotifyGive(xCustomerAppTaskEndHandle);
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <autoOperation+0x730>)
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	f012 f834 	bl	8013f2c <xTaskGenericNotify>
			lastKeyPressed =255;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <autoOperation+0x724>)
 8001ec6:	22ff      	movs	r2, #255	; 0xff
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e002      	b.n	8001ed2 <autoOperation+0x6ca>
		}
		else{
			delLongPressed = FALSE;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <autoOperation+0x734>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
		}
	}
	capCleaning_Servo();
 8001ed2:	f000 fbcf 	bl	8002674 <capCleaning_Servo>
	LoadingFunc(BLINK, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f002 fb3d 	bl	8004558 <LoadingFunc>
/**** Servo Open and close for removing the extra water in the pipe ****/
	Servo_SetPercent(90);
 8001ede:	205a      	movs	r0, #90	; 0x5a
 8001ee0:	f003 fbe6 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(2000);
 8001ee4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ee8:	f006 fcba 	bl	8008860 <HAL_Delay>
	Servo_SetPercent(ValveClose);
 8001eec:	2000      	movs	r0, #0
 8001eee:	f003 fbdf 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(1000);
 8001ef2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef6:	f006 fcb3 	bl	8008860 <HAL_Delay>
	Servo_SetPercent(90);
 8001efa:	205a      	movs	r0, #90	; 0x5a
 8001efc:	f003 fbd8 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(2000);
 8001f00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f04:	f006 fcac 	bl	8008860 <HAL_Delay>
	Servo_SetPercent(ValveClose);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f003 fbd1 	bl	80056b0 <Servo_SetPercent>
	HAL_Delay(1000);
 8001f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f12:	f006 fca5 	bl	8008860 <HAL_Delay>
/**** Servo Open and close for removing the extra water in the pipe end ****/
	Servo_SetPercent(90);
 8001f16:	205a      	movs	r0, #90	; 0x5a
 8001f18:	f003 fbca 	bl	80056b0 <Servo_SetPercent>
	UnlockCannister();
 8001f1c:	f000 f98c 	bl	8002238 <UnlockCannister>
}
 8001f20:	bf00      	nop
 8001f22:	3760      	adds	r7, #96	; 0x60
 8001f24:	46bd      	mov	sp, r7
 8001f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000110 	.word	0x20000110
 8001f30:	200003f9 	.word	0x200003f9
 8001f34:	20000395 	.word	0x20000395
 8001f38:	20002ba8 	.word	0x20002ba8
 8001f3c:	200003fa 	.word	0x200003fa

08001f40 <CustomerAppSub>:

static void CustomerAppSub(void)
{	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	2101      	movs	r1, #1
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f002 fb05 	bl	8004558 <LoadingFunc>
	int Total_Weight_Old = Weight_Initial;
 8001f4e:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <CustomerAppSub+0x138>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	60fb      	str	r3, [r7, #12]
	int tempWeight = Weight_Initial;
 8001f54:	4b48      	ldr	r3, [pc, #288]	; (8002078 <CustomerAppSub+0x138>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60bb      	str	r3, [r7, #8]
	int Target_Weight1 = Target_Weight ;
 8001f5a:	4b48      	ldr	r3, [pc, #288]	; (800207c <CustomerAppSub+0x13c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	607b      	str	r3, [r7, #4]
	moveMotorClampToLocBlock(M1POS2VAL);
 8001f60:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8001f64:	f001 f872 	bl	800304c <moveMotorClampToLocBlock>
	Servo_SetPercent(ValveOpen);
 8001f68:	2064      	movs	r0, #100	; 0x64
 8001f6a:	f003 fba1 	bl	80056b0 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS2VAL);
 8001f6e:	f640 40b2 	movw	r0, #3250	; 0xcb2
 8001f72:	f001 f83f 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	HAL_Delay(7000);
 8001f76:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001f7a:	f006 fc71 	bl	8008860 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > (EMPTY_BOTTLE_WEIGHT) || (Total_Weight <= Total_Weight_Old))
 8001f7e:	e006      	b.n	8001f8e <CustomerAppSub+0x4e>
	{
		Total_Weight_Old = Total_Weight;
 8001f80:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <CustomerAppSub+0x140>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3000);
 8001f86:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f8a:	f006 fc69 	bl	8008860 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > (EMPTY_BOTTLE_WEIGHT) || (Total_Weight <= Total_Weight_Old))
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	; (8002080 <CustomerAppSub+0x140>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b4b      	cmp	r3, #75	; 0x4b
 8001f98:	dcf2      	bgt.n	8001f80 <CustomerAppSub+0x40>
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <CustomerAppSub+0x140>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	daed      	bge.n	8001f80 <CustomerAppSub+0x40>
	}
	moveMotorSpindleToLocBlock(M2POS1VAL);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f001 f825 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	HAL_Delay(2000);
 8001faa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fae:	f006 fc57 	bl	8008860 <HAL_Delay>
	Target_Weight = Target_Weight - tempWeight + DEAD_WEIGHT;
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <CustomerAppSub+0x13c>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	336e      	adds	r3, #110	; 0x6e
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	; (800207c <CustomerAppSub+0x13c>)
 8001fbe:	6013      	str	r3, [r2, #0]
	HAL_Delay(2000);
 8001fc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fc4:	f006 fc4c 	bl	8008860 <HAL_Delay>
	capCleaning_Servo();
 8001fc8:	f000 fb54 	bl	8002674 <capCleaning_Servo>
	//Target_Weight = Target_Weight - tempWeight + DEAD_WEIGHT;
	//Target_Weight = Target_Weight - tempWeight + DEAD_WEIGHT;
	//Target_Weight = Target_Weight - tempWeight + DEAD_WEIGHT;
	HAL_Delay(5000);
 8001fcc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fd0:	f006 fc46 	bl	8008860 <HAL_Delay>
	//printLCDInt(1, "Wt!", tempWeight,Target_Weight1);
	//printLCD(0, "Next Can",ENTER_SYMBOL);
	HAL_Delay(1000);
 8001fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd8:	f006 fc42 	bl	8008860 <HAL_Delay>
	UnlockCannister();
 8001fdc:	f000 f92c 	bl	8002238 <UnlockCannister>
	//sLoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
	HAL_Delay(2000);
 8001fe0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fe4:	f006 fc3c 	bl	8008860 <HAL_Delay>
	//moveMotorClampToLocBlock(M1POS1VAL);
	while ((digitalRead(Button_Enter_Input_PullUp) == HIGH)) //&& (Total_Weight < NO_BOTTLE_WEIGHT))
 8001fe8:	e00d      	b.n	8002006 <CustomerAppSub+0xc6>
	{
		HAL_Delay(100);
 8001fea:	2064      	movs	r0, #100	; 0x64
 8001fec:	f006 fc38 	bl	8008860 <HAL_Delay>
		//LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
		printLCDInt(1, "Wt!", tempWeight,Target_Weight1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	4923      	ldr	r1, [pc, #140]	; (8002084 <CustomerAppSub+0x144>)
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f002 fe64 	bl	8004cc4 <printLCDInt>
		printLCD(0, "Next Can",ENTER_SYMBOL);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4922      	ldr	r1, [pc, #136]	; (8002088 <CustomerAppSub+0x148>)
 8002000:	2000      	movs	r0, #0
 8002002:	f002 fee3 	bl	8004dcc <printLCD>
	while ((digitalRead(Button_Enter_Input_PullUp) == HIGH)) //&& (Total_Weight < NO_BOTTLE_WEIGHT))
 8002006:	200d      	movs	r0, #13
 8002008:	f000 ffac 	bl	8002f64 <digitalRead>
 800200c:	4603      	mov	r3, r0
 800200e:	2b01      	cmp	r3, #1
 8002010:	d0eb      	beq.n	8001fea <CustomerAppSub+0xaa>
	}
	printLCDInt(1, "Wt!", tempWeight,Target_Weight1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	491b      	ldr	r1, [pc, #108]	; (8002084 <CustomerAppSub+0x144>)
 8002018:	2001      	movs	r0, #1
 800201a:	f002 fe53 	bl	8004cc4 <printLCDInt>
	printLCD(0, "Next Can",ENTER_SYMBOL);
 800201e:	2201      	movs	r2, #1
 8002020:	4919      	ldr	r1, [pc, #100]	; (8002088 <CustomerAppSub+0x148>)
 8002022:	2000      	movs	r0, #0
 8002024:	f002 fed2 	bl	8004dcc <printLCD>
	moveMotorClampToLocBlock(M1POS2VAL);
 8002028:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 800202c:	f001 f80e 	bl	800304c <moveMotorClampToLocBlock>
	HAL_Delay(5000);
 8002030:	f241 3088 	movw	r0, #5000	; 0x1388
 8002034:	f006 fc14 	bl	8008860 <HAL_Delay>
	int tempWeight2 = Total_Weight;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <CustomerAppSub+0x140>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	603b      	str	r3, [r7, #0]
	//Target_Weight = tempWeight2 - (Target_Weight  - EMPTY_BOTTLE_WEIGHT);
	Target_Weight = tempWeight2 - Target_Weight;
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <CustomerAppSub+0x13c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	4a0d      	ldr	r2, [pc, #52]	; (800207c <CustomerAppSub+0x13c>)
 8002048:	6013      	str	r3, [r2, #0]
	HAL_Delay(3000);
 800204a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800204e:	f006 fc07 	bl	8008860 <HAL_Delay>
	Servo_SetPercent(ValveClose);
 8002052:	2000      	movs	r0, #0
 8002054:	f003 fb2c 	bl	80056b0 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS2VAL);
 8002058:	f640 40b2 	movw	r0, #3250	; 0xcb2
 800205c:	f000 ffca 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	HAL_Delay(2000);
 8002060:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002064:	f006 fbfc 	bl	8008860 <HAL_Delay>
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8002068:	2101      	movs	r1, #1
 800206a:	2002      	movs	r0, #2
 800206c:	f002 fa74 	bl	8004558 <LoadingFunc>
}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000368 	.word	0x20000368
 800207c:	20000370 	.word	0x20000370
 8002080:	20000364 	.word	0x20000364
 8002084:	08019db0 	.word	0x08019db0
 8002088:	08019db4 	.word	0x08019db4

0800208c <cleanOperation>:


//Excel 90 - 104
static void cleanOperation(void) {
 800208c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
	LCD_Clear();
 8002094:	f002 fd9a 	bl	8004bcc <LCD_Clear>
	CleaningCancelFlag = FALSE;
 8002098:	4b59      	ldr	r3, [pc, #356]	; (8002200 <cleanOperation+0x174>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
	int AverageValveforPressure = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
	while(AverageValveforPressure < 50 ){
 80020a2:	e007      	b.n	80020b4 <cleanOperation+0x28>
		pressureSensorReading();
 80020a4:	f7ff f86e 	bl	8001184 <pressureSensorReading>
		AverageValveforPressure++;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
		HAL_Delay(10);
 80020ae:	200a      	movs	r0, #10
 80020b0:	f006 fbd6 	bl	8008860 <HAL_Delay>
	while(AverageValveforPressure < 50 ){
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b31      	cmp	r3, #49	; 0x31
 80020b8:	ddf4      	ble.n	80020a4 <cleanOperation+0x18>
	}
#if DEBUG == 1
	 SerialPrint("Pressure Valve ");
 80020ba:	4852      	ldr	r0, [pc, #328]	; (8002204 <cleanOperation+0x178>)
 80020bc:	f003 fa44 	bl	8005548 <SerialPrint>
#endif
	 SerialPrintlnINT(pressurechange);
 80020c0:	4b51      	ldr	r3, [pc, #324]	; (8002208 <cleanOperation+0x17c>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ca:	ee17 0a90 	vmov	r0, s15
 80020ce:	f003 fa71 	bl	80055b4 <SerialPrintlnINT>
	if(pressurechange > 100)
 80020d2:	4b4d      	ldr	r3, [pc, #308]	; (8002208 <cleanOperation+0x17c>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800220c <cleanOperation+0x180>
 80020dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e4:	dd1f      	ble.n	8002126 <cleanOperation+0x9a>
	 {
		 moveMotor(VALVEMOTOR, OFF, INT_INF); //Servo?
 80020e6:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <cleanOperation+0x184>)
 80020e8:	2100      	movs	r1, #0
 80020ea:	2003      	movs	r0, #3
 80020ec:	f001 f8f2 	bl	80032d4 <moveMotor>
#if DEBUG == 1
		 SerialPrint("Pressure Valve ");
 80020f0:	4844      	ldr	r0, [pc, #272]	; (8002204 <cleanOperation+0x178>)
 80020f2:	f003 fa29 	bl	8005548 <SerialPrint>
		 SerialPrintlnINT(pressurechange);
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <cleanOperation+0x17c>)
 80020f8:	edd3 7a00 	vldr	s15, [r3]
 80020fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002100:	ee17 0a90 	vmov	r0, s15
 8002104:	f003 fa56 	bl	80055b4 <SerialPrintlnINT>
#endif
		 printLCD(3, "Very High Pres.", NO_SYMBOL);
 8002108:	2200      	movs	r2, #0
 800210a:	4942      	ldr	r1, [pc, #264]	; (8002214 <cleanOperation+0x188>)
 800210c:	2003      	movs	r0, #3
 800210e:	f002 fe5d 	bl	8004dcc <printLCD>
		 printLCD(2, "Fehler F1.", NO_SYMBOL);
 8002112:	2200      	movs	r2, #0
 8002114:	4940      	ldr	r1, [pc, #256]	; (8002218 <cleanOperation+0x18c>)
 8002116:	2002      	movs	r0, #2
 8002118:	f002 fe58 	bl	8004dcc <printLCD>
		 HAL_Delay(5000);
 800211c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002120:	f006 fb9e 	bl	8008860 <HAL_Delay>
		 return;
 8002124:	e068      	b.n	80021f8 <cleanOperation+0x16c>
	 }
	else
	{
		LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8002126:	2101      	movs	r1, #1
 8002128:	2002      	movs	r0, #2
 800212a:	f002 fa15 	bl	8004558 <LoadingFunc>
		while (Total_Weight < EMPTY_BOTTLE_WEIGHT) { //Point # 12
 800212e:	bf00      	nop
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <cleanOperation+0x190>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b4a      	cmp	r3, #74	; 0x4a
 8002136:	dc2a      	bgt.n	800218e <cleanOperation+0x102>
			ReadKeypadVar(CONTROL);
 8002138:	2002      	movs	r0, #2
 800213a:	f001 ffe1 	bl	8004100 <ReadKeypadVar>
			printLCD(1, "No Cannister", 0);
 800213e:	2200      	movs	r2, #0
 8002140:	4937      	ldr	r1, [pc, #220]	; (8002220 <cleanOperation+0x194>)
 8002142:	2001      	movs	r0, #1
 8002144:	f002 fe42 	bl	8004dcc <printLCD>
			printLCD(2, "Press Enter", 0);
 8002148:	2200      	movs	r2, #0
 800214a:	4936      	ldr	r1, [pc, #216]	; (8002224 <cleanOperation+0x198>)
 800214c:	2002      	movs	r0, #2
 800214e:	f002 fe3d 	bl	8004dcc <printLCD>
			Servo_SetPercent(ValveOpen);			//Open Servo
 8002152:	2064      	movs	r0, #100	; 0x64
 8002154:	f003 faac 	bl	80056b0 <Servo_SetPercent>
			moveMotorSpindleToLocBlock(M2POS1VAL); 	//UnCap
 8002158:	2000      	movs	r0, #0
 800215a:	f000 ff4b 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			moveMotorClampToLocBlock(M1POS1VAL);	//UnClamp
 800215e:	2000      	movs	r0, #0
 8002160:	f000 ff74 	bl	800304c <moveMotorClampToLocBlock>
			LoadingFunc(ON, NOT_LOADING);
 8002164:	2100      	movs	r1, #0
 8002166:	2001      	movs	r0, #1
 8002168:	f002 f9f6 	bl	8004558 <LoadingFunc>
			HAL_Delay(500);
 800216c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002170:	f006 fb76 	bl	8008860 <HAL_Delay>
			while (lastKeyPressed != ENTERKEY) {
 8002174:	e006      	b.n	8002184 <cleanOperation+0xf8>
				ReadKeypadVar(CONTROL);
 8002176:	2002      	movs	r0, #2
 8002178:	f001 ffc2 	bl	8004100 <ReadKeypadVar>
				HAL_Delay(500);
 800217c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002180:	f006 fb6e 	bl	8008860 <HAL_Delay>
			while (lastKeyPressed != ENTERKEY) {
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <cleanOperation+0x19c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b0b      	cmp	r3, #11
 800218a:	d1f4      	bne.n	8002176 <cleanOperation+0xea>
			}
			return;
 800218c:	e034      	b.n	80021f8 <cleanOperation+0x16c>
		}
		  ManualOperation = TRUE;
 800218e:	4b27      	ldr	r3, [pc, #156]	; (800222c <cleanOperation+0x1a0>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
		 if(Total_Weight < MIN_LIQUID_CHECK_FOR_CLEANING)
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <cleanOperation+0x190>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800219c:	da29      	bge.n	80021f2 <cleanOperation+0x166>
		 {
			SerialPrint("less weight so existing\n ");
 800219e:	4824      	ldr	r0, [pc, #144]	; (8002230 <cleanOperation+0x1a4>)
 80021a0:	f003 f9d2 	bl	8005548 <SerialPrint>
			CleaningOperationFlag = TRUE;
 80021a4:	4b23      	ldr	r3, [pc, #140]	; (8002234 <cleanOperation+0x1a8>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
			cleaningCycleProcess();
 80021aa:	f000 f87b 	bl	80022a4 <cleaningCycleProcess>
			uint64_t lastTime = HAL_GetTick();
 80021ae:	f006 fb4b 	bl	8008848 <HAL_GetTick>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2200      	movs	r2, #0
 80021b6:	469a      	mov	sl, r3
 80021b8:	4693      	mov	fp, r2
 80021ba:	e9c7 ab00 	strd	sl, fp, [r7]
			while(HAL_GetTick() - lastTime < 1000) {}//  non-blocking like serial print.}
 80021be:	bf00      	nop
 80021c0:	f006 fb42 	bl	8008848 <HAL_GetTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2200      	movs	r2, #0
 80021c8:	4698      	mov	r8, r3
 80021ca:	4691      	mov	r9, r2
 80021cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021d0:	ebb8 0402 	subs.w	r4, r8, r2
 80021d4:	eb69 0503 	sbc.w	r5, r9, r3
 80021d8:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 80021dc:	f175 0300 	sbcs.w	r3, r5, #0
 80021e0:	d3ee      	bcc.n	80021c0 <cleanOperation+0x134>
			moveMotorSpindleToLocBlock(M2POS1VAL);  //M2 to P2
 80021e2:	2000      	movs	r0, #0
 80021e4:	f000 ff06 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			servoCleaning();
 80021e8:	f000 f9c6 	bl	8002578 <servoCleaning>
			UnlockCannister();
 80021ec:	f000 f824 	bl	8002238 <UnlockCannister>
 80021f0:	e002      	b.n	80021f8 <cleanOperation+0x16c>
			isCleaning = FALSE;
			CleaningOperationFlag = FALSE;*/
		 }
		 else
		 {
			 CleaningOperationFlag = FALSE;
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <cleanOperation+0x1a8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
			 //return;
		 }
	}
}
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002200:	200000f1 	.word	0x200000f1
 8002204:	08019dc0 	.word	0x08019dc0
 8002208:	200003b4 	.word	0x200003b4
 800220c:	42c80000 	.word	0x42c80000
 8002210:	0098967f 	.word	0x0098967f
 8002214:	08019dd0 	.word	0x08019dd0
 8002218:	08019de0 	.word	0x08019de0
 800221c:	20000364 	.word	0x20000364
 8002220:	08019dec 	.word	0x08019dec
 8002224:	08019dfc 	.word	0x08019dfc
 8002228:	20000110 	.word	0x20000110
 800222c:	200003a0 	.word	0x200003a0
 8002230:	08019e08 	.word	0x08019e08
 8002234:	20000393 	.word	0x20000393

08002238 <UnlockCannister>:


static void UnlockCannister(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
	LCD_Clear();
 800223c:	f002 fcc6 	bl	8004bcc <LCD_Clear>
	HAL_Delay(500);
 8002240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002244:	f006 fb0c 	bl	8008860 <HAL_Delay>
	LoadingFunc(ON, NOT_LOADING);
 8002248:	2100      	movs	r1, #0
 800224a:	2001      	movs	r0, #1
 800224c:	f002 f984 	bl	8004558 <LoadingFunc>
	printLCD(0, "Unlock ", ENTER_SYMBOL);
 8002250:	2201      	movs	r2, #1
 8002252:	4911      	ldr	r1, [pc, #68]	; (8002298 <UnlockCannister+0x60>)
 8002254:	2000      	movs	r0, #0
 8002256:	f002 fdb9 	bl	8004dcc <printLCD>
	HAL_Delay(1000);
 800225a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800225e:	f006 faff 	bl	8008860 <HAL_Delay>
	while(TRUE){
		ReadKeypadVar(CONTROL);
 8002262:	2002      	movs	r0, #2
 8002264:	f001 ff4c 	bl	8004100 <ReadKeypadVar>
		if(lastKeyPressed == ENTERKEY){
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <UnlockCannister+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b0b      	cmp	r3, #11
 800226e:	d1f8      	bne.n	8002262 <UnlockCannister+0x2a>
			moveMotorSpindleToLocBlock(M2POS1VAL);
 8002270:	2000      	movs	r0, #0
 8002272:	f000 febf 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			moveMotorClampToLocBlock(M1POS1VAL);
 8002276:	2000      	movs	r0, #0
 8002278:	f000 fee8 	bl	800304c <moveMotorClampToLocBlock>
			LCD_Clear();
 800227c:	f002 fca6 	bl	8004bcc <LCD_Clear>
			HAL_Delay(200);
 8002280:	20c8      	movs	r0, #200	; 0xc8
 8002282:	f006 faed 	bl	8008860 <HAL_Delay>
			CleaningExitCounter = 0;
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <UnlockCannister+0x68>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			LoadingFunc(BLINK, LOADING);
 800228c:	2101      	movs	r1, #1
 800228e:	2002      	movs	r0, #2
 8002290:	f002 f962 	bl	8004558 <LoadingFunc>
			return;
 8002294:	bf00      	nop
			CleaningExitCounter = 0;
			return;
		}*/
	}
	UpdateTimeToSDCard( hours,  minutes,  seconds);
}
 8002296:	bd80      	pop	{r7, pc}
 8002298:	08019e24 	.word	0x08019e24
 800229c:	20000110 	.word	0x20000110
 80022a0:	20000395 	.word	0x20000395

080022a4 <cleaningCycleProcess>:

static void cleaningCycleProcess(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
	 CleaningCancelFlag = FALSE;
 80022aa:	4ba9      	ldr	r3, [pc, #676]	; (8002550 <cleaningCycleProcess+0x2ac>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]
	 moveMotorClampToLocBlock(M1POS2VAL);      //(M1POS4VAL, NONE);  //M1 to P4
 80022b0:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 80022b4:	f000 feca 	bl	800304c <moveMotorClampToLocBlock>
	 Servo_SetPercent(ValveOpen);
 80022b8:	2064      	movs	r0, #100	; 0x64
 80022ba:	f003 f9f9 	bl	80056b0 <Servo_SetPercent>
	 moveMotor(VALVEMOTOR, ON, INT_INF);
 80022be:	4aa5      	ldr	r2, [pc, #660]	; (8002554 <cleaningCycleProcess+0x2b0>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	2003      	movs	r0, #3
 80022c4:	f001 f806 	bl	80032d4 <moveMotor>
	 LoadingFunc(BLINK, LOADING);
 80022c8:	2101      	movs	r1, #1
 80022ca:	2002      	movs	r0, #2
 80022cc:	f002 f944 	bl	8004558 <LoadingFunc>
     LCD_Clear();
 80022d0:	f002 fc7c 	bl	8004bcc <LCD_Clear>
	 HAL_Delay(500);
 80022d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022d8:	f006 fac2 	bl	8008860 <HAL_Delay>
	 uint32_t tickstart = HAL_GetTick();
 80022dc:	f006 fab4 	bl	8008848 <HAL_GetTick>
 80022e0:	6078      	str	r0, [r7, #4]
	printLCDInt(3,"Cycle No: ",1, UserCleaningCycleNumber);
 80022e2:	4b9d      	ldr	r3, [pc, #628]	; (8002558 <cleaningCycleProcess+0x2b4>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2201      	movs	r2, #1
 80022ea:	499c      	ldr	r1, [pc, #624]	; (800255c <cleaningCycleProcess+0x2b8>)
 80022ec:	2003      	movs	r0, #3
 80022ee:	f002 fce9 	bl	8004cc4 <printLCDInt>
	tickstart = HAL_GetTick();
 80022f2:	f006 faa9 	bl	8008848 <HAL_GetTick>
 80022f6:	6078      	str	r0, [r7, #4]
	completedCycles = 0;
 80022f8:	4b99      	ldr	r3, [pc, #612]	; (8002560 <cleaningCycleProcess+0x2bc>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
	 while (completedCycles < UserCleaningCycleNumber)
 80022fe:	e0f7      	b.n	80024f0 <cleaningCycleProcess+0x24c>
	 {
		for(int j = 0; j < 4; j++)
 8002300:	2300      	movs	r3, #0
 8002302:	603b      	str	r3, [r7, #0]
 8002304:	e0a7      	b.n	8002456 <cleaningCycleProcess+0x1b2>
		{
			if(operationCancelled() == 0){ break;}
 8002306:	f7ff f9c3 	bl	8001690 <operationCancelled>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a7 	beq.w	8002460 <cleaningCycleProcess+0x1bc>
			while((HAL_GetTick() - tickstart) <= 1000 );
 8002312:	bf00      	nop
 8002314:	f006 fa98 	bl	8008848 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002322:	d9f7      	bls.n	8002314 <cleaningCycleProcess+0x70>
			tickstart = HAL_GetTick();
 8002324:	f006 fa90 	bl	8008848 <HAL_GetTick>
 8002328:	6078      	str	r0, [r7, #4]
			printLCDInt(3,"Cycle No: ",completedCycles + 1, UserCleaningCycleNumber);
 800232a:	4b8d      	ldr	r3, [pc, #564]	; (8002560 <cleaningCycleProcess+0x2bc>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <cleaningCycleProcess+0x2b4>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4988      	ldr	r1, [pc, #544]	; (800255c <cleaningCycleProcess+0x2b8>)
 800233a:	2003      	movs	r0, #3
 800233c:	f002 fcc2 	bl	8004cc4 <printLCDInt>
			moveMotorSpindleToLocBlock(M2POS7VAL);
 8002340:	f241 7004 	movw	r0, #5892	; 0x1704
 8002344:	f000 fe56 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 8002348:	bf00      	nop
 800234a:	f006 fa7d 	bl	8008848 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002358:	d9f7      	bls.n	800234a <cleaningCycleProcess+0xa6>
			tickstart = HAL_GetTick();
 800235a:	f006 fa75 	bl	8008848 <HAL_GetTick>
 800235e:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 8002360:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <cleaningCycleProcess+0x2ac>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d103      	bne.n	8002370 <cleaningCycleProcess+0xcc>
 8002368:	4b7e      	ldr	r3, [pc, #504]	; (8002564 <cleaningCycleProcess+0x2c0>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2b64      	cmp	r3, #100	; 0x64
 800236e:	d905      	bls.n	800237c <cleaningCycleProcess+0xd8>
				printLCD(3, "Stop", NO_SYMBOL);
 8002370:	2200      	movs	r2, #0
 8002372:	497d      	ldr	r1, [pc, #500]	; (8002568 <cleaningCycleProcess+0x2c4>)
 8002374:	2003      	movs	r0, #3
 8002376:	f002 fd29 	bl	8004dcc <printLCD>
				break;
 800237a:	e072      	b.n	8002462 <cleaningCycleProcess+0x1be>
			}
			moveMotorSpindleToLocBlock(M2POS8VAL);
 800237c:	f641 1064 	movw	r0, #6500	; 0x1964
 8002380:	f000 fe38 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 8002384:	bf00      	nop
 8002386:	f006 fa5f 	bl	8008848 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002394:	d9f7      	bls.n	8002386 <cleaningCycleProcess+0xe2>
			tickstart = HAL_GetTick();
 8002396:	f006 fa57 	bl	8008848 <HAL_GetTick>
 800239a:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 800239c:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <cleaningCycleProcess+0x2ac>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d103      	bne.n	80023ac <cleaningCycleProcess+0x108>
 80023a4:	4b6f      	ldr	r3, [pc, #444]	; (8002564 <cleaningCycleProcess+0x2c0>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d905      	bls.n	80023b8 <cleaningCycleProcess+0x114>
				printLCD(3, "Stop", NO_SYMBOL);
 80023ac:	2200      	movs	r2, #0
 80023ae:	496e      	ldr	r1, [pc, #440]	; (8002568 <cleaningCycleProcess+0x2c4>)
 80023b0:	2003      	movs	r0, #3
 80023b2:	f002 fd0b 	bl	8004dcc <printLCD>
				break;
 80023b6:	e054      	b.n	8002462 <cleaningCycleProcess+0x1be>
			}
			moveMotorSpindleToLocBlock(M2POS9VAL);
 80023b8:	f641 30df 	movw	r0, #7135	; 0x1bdf
 80023bc:	f000 fe1a 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 80023c0:	bf00      	nop
 80023c2:	f006 fa41 	bl	8008848 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d0:	d9f7      	bls.n	80023c2 <cleaningCycleProcess+0x11e>
			tickstart = HAL_GetTick();
 80023d2:	f006 fa39 	bl	8008848 <HAL_GetTick>
 80023d6:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 80023d8:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <cleaningCycleProcess+0x2ac>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <cleaningCycleProcess+0x144>
 80023e0:	4b60      	ldr	r3, [pc, #384]	; (8002564 <cleaningCycleProcess+0x2c0>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	2b64      	cmp	r3, #100	; 0x64
 80023e6:	d905      	bls.n	80023f4 <cleaningCycleProcess+0x150>
				printLCD(3, "Stop", NO_SYMBOL);
 80023e8:	2200      	movs	r2, #0
 80023ea:	495f      	ldr	r1, [pc, #380]	; (8002568 <cleaningCycleProcess+0x2c4>)
 80023ec:	2003      	movs	r0, #3
 80023ee:	f002 fced 	bl	8004dcc <printLCD>
				break;
 80023f2:	e036      	b.n	8002462 <cleaningCycleProcess+0x1be>
			}
			moveMotorSpindleToLocBlock(M2POS8VAL);
 80023f4:	f641 1064 	movw	r0, #6500	; 0x1964
 80023f8:	f000 fdfc 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 80023fc:	bf00      	nop
 80023fe:	f006 fa23 	bl	8008848 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800240c:	d9f7      	bls.n	80023fe <cleaningCycleProcess+0x15a>
			tickstart = HAL_GetTick();
 800240e:	f006 fa1b 	bl	8008848 <HAL_GetTick>
 8002412:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <cleaningCycleProcess+0x2ac>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <cleaningCycleProcess+0x180>
 800241c:	4b51      	ldr	r3, [pc, #324]	; (8002564 <cleaningCycleProcess+0x2c0>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	2b64      	cmp	r3, #100	; 0x64
 8002422:	d905      	bls.n	8002430 <cleaningCycleProcess+0x18c>
				printLCD(3, "Stop", NO_SYMBOL);
 8002424:	2200      	movs	r2, #0
 8002426:	4950      	ldr	r1, [pc, #320]	; (8002568 <cleaningCycleProcess+0x2c4>)
 8002428:	2003      	movs	r0, #3
 800242a:	f002 fccf 	bl	8004dcc <printLCD>
				break;
 800242e:	e018      	b.n	8002462 <cleaningCycleProcess+0x1be>
			}

			printLCDInt(3,"Cycle No: ",completedCycles + 1, UserCleaningCycleNumber);
 8002430:	4b4b      	ldr	r3, [pc, #300]	; (8002560 <cleaningCycleProcess+0x2bc>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <cleaningCycleProcess+0x2b4>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4947      	ldr	r1, [pc, #284]	; (800255c <cleaningCycleProcess+0x2b8>)
 8002440:	2003      	movs	r0, #3
 8002442:	f002 fc3f 	bl	8004cc4 <printLCDInt>
			moveMotor(VALVEMOTOR, ON, INT_INF); //Valve ON
 8002446:	4a43      	ldr	r2, [pc, #268]	; (8002554 <cleaningCycleProcess+0x2b0>)
 8002448:	2101      	movs	r1, #1
 800244a:	2003      	movs	r0, #3
 800244c:	f000 ff42 	bl	80032d4 <moveMotor>
		for(int j = 0; j < 4; j++)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	3301      	adds	r3, #1
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b03      	cmp	r3, #3
 800245a:	f77f af54 	ble.w	8002306 <cleaningCycleProcess+0x62>
 800245e:	e000      	b.n	8002462 <cleaningCycleProcess+0x1be>
			if(operationCancelled() == 0){ break;}
 8002460:	bf00      	nop
	}

// Check for updates to UserCleaningCycleNumber
		if (completedCycles >= UserCleaningCycleNumber) {
 8002462:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <cleaningCycleProcess+0x2bc>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <cleaningCycleProcess+0x2b4>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	429a      	cmp	r2, r3
 8002470:	d248      	bcs.n	8002504 <cleaningCycleProcess+0x260>
			break; // Stop if cycles are reduced below the current index
		}

		completedCycles++; // Increment completed cycles
 8002472:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <cleaningCycleProcess+0x2bc>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b38      	ldr	r3, [pc, #224]	; (8002560 <cleaningCycleProcess+0x2bc>)
 800247e:	701a      	strb	r2, [r3, #0]
		if(CleaningCancelFlag|| adc_pressure > 100){break;}
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <cleaningCycleProcess+0x2ac>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d13e      	bne.n	8002506 <cleaningCycleProcess+0x262>
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <cleaningCycleProcess+0x2c0>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	2b64      	cmp	r3, #100	; 0x64
 800248e:	d83a      	bhi.n	8002506 <cleaningCycleProcess+0x262>
		moveMotorSpindleToLocBlock(M2POS9VAL);
 8002490:	f641 30df 	movw	r0, #7135	; 0x1bdf
 8002494:	f000 fdae 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		while((HAL_GetTick() - tickstart) <= 1000 );
 8002498:	bf00      	nop
 800249a:	f006 f9d5 	bl	8008848 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024a8:	d9f7      	bls.n	800249a <cleaningCycleProcess+0x1f6>
		tickstart = HAL_GetTick();
 80024aa:	f006 f9cd 	bl	8008848 <HAL_GetTick>
 80024ae:	6078      	str	r0, [r7, #4]
		if(CleaningCancelFlag|| adc_pressure > 100){break;}
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <cleaningCycleProcess+0x2ac>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d126      	bne.n	8002506 <cleaningCycleProcess+0x262>
 80024b8:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <cleaningCycleProcess+0x2c0>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b64      	cmp	r3, #100	; 0x64
 80024be:	d822      	bhi.n	8002506 <cleaningCycleProcess+0x262>
		moveMotorSpindleToLocBlock(M2POS7VAL);
 80024c0:	f241 7004 	movw	r0, #5892	; 0x1704
 80024c4:	f000 fd96 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		while((HAL_GetTick() - tickstart) <= 1000 );
 80024c8:	bf00      	nop
 80024ca:	f006 f9bd 	bl	8008848 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d8:	d9f7      	bls.n	80024ca <cleaningCycleProcess+0x226>
		tickstart = HAL_GetTick();
 80024da:	f006 f9b5 	bl	8008848 <HAL_GetTick>
 80024de:	6078      	str	r0, [r7, #4]
		if(CleaningCancelFlag|| adc_pressure > 100){break;}
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <cleaningCycleProcess+0x2ac>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10e      	bne.n	8002506 <cleaningCycleProcess+0x262>
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <cleaningCycleProcess+0x2c0>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b64      	cmp	r3, #100	; 0x64
 80024ee:	d80a      	bhi.n	8002506 <cleaningCycleProcess+0x262>
	 while (completedCycles < UserCleaningCycleNumber)
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <cleaningCycleProcess+0x2bc>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <cleaningCycleProcess+0x2b4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f4ff aeff 	bcc.w	8002300 <cleaningCycleProcess+0x5c>
 8002502:	e000      	b.n	8002506 <cleaningCycleProcess+0x262>
			break; // Stop if cycles are reduced below the current index
 8002504:	bf00      	nop

	}
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <cleaningCycleProcess+0x2b0>)
 8002508:	2100      	movs	r1, #0
 800250a:	2003      	movs	r0, #3
 800250c:	f000 fee2 	bl	80032d4 <moveMotor>
	while((HAL_GetTick() - tickstart) <= 1000 );
 8002510:	bf00      	nop
 8002512:	f006 f999 	bl	8008848 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002520:	d9f7      	bls.n	8002512 <cleaningCycleProcess+0x26e>
	tickstart = HAL_GetTick();
 8002522:	f006 f991 	bl	8008848 <HAL_GetTick>
 8002526:	6078      	str	r0, [r7, #4]
	CleaningCancelFlag = TRUE;
 8002528:	4b09      	ldr	r3, [pc, #36]	; (8002550 <cleaningCycleProcess+0x2ac>)
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
	cleanLongPressed = FALSE;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <cleaningCycleProcess+0x2c8>)
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]
	delLongPressed = FALSE;
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <cleaningCycleProcess+0x2cc>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
	UserCleaningCycleNumber = 1;
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <cleaningCycleProcess+0x2b4>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
	CleaningOperationFlag = FALSE;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <cleaningCycleProcess+0x2d0>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200000f1 	.word	0x200000f1
 8002554:	0098967f 	.word	0x0098967f
 8002558:	200000f2 	.word	0x200000f2
 800255c:	08019e2c 	.word	0x08019e2c
 8002560:	200003a1 	.word	0x200003a1
 8002564:	200003b8 	.word	0x200003b8
 8002568:	08019c3c 	.word	0x08019c3c
 800256c:	200003f9 	.word	0x200003f9
 8002570:	200003fa 	.word	0x200003fa
 8002574:	20000393 	.word	0x20000393

08002578 <servoCleaning>:

static void servoCleaning(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
	uint32_t get_timeTick = HAL_GetTick();
 800257e:	f006 f963 	bl	8008848 <HAL_GetTick>
 8002582:	6078      	str	r0, [r7, #4]
	moveMotor(VALVEMOTOR, ON, INT_INF); //Valve ON
 8002584:	4a39      	ldr	r2, [pc, #228]	; (800266c <servoCleaning+0xf4>)
 8002586:	2101      	movs	r1, #1
 8002588:	2003      	movs	r0, #3
 800258a:	f000 fea3 	bl	80032d4 <moveMotor>
	Servo_SetPercent(90);
 800258e:	205a      	movs	r0, #90	; 0x5a
 8002590:	f003 f88e 	bl	80056b0 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 8002594:	f006 f958 	bl	8008848 <HAL_GetTick>
 8002598:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 2000);
 800259a:	bf00      	nop
 800259c:	f006 f954 	bl	8008848 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025aa:	d9f7      	bls.n	800259c <servoCleaning+0x24>
	Servo_SetPercent(40);
 80025ac:	2028      	movs	r0, #40	; 0x28
 80025ae:	f003 f87f 	bl	80056b0 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 80025b2:	f006 f949 	bl	8008848 <HAL_GetTick>
 80025b6:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 1000);
 80025b8:	bf00      	nop
 80025ba:	f006 f945 	bl	8008848 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c8:	d9f7      	bls.n	80025ba <servoCleaning+0x42>

	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80025ca:	4a28      	ldr	r2, [pc, #160]	; (800266c <servoCleaning+0xf4>)
 80025cc:	2100      	movs	r1, #0
 80025ce:	2003      	movs	r0, #3
 80025d0:	f000 fe80 	bl	80032d4 <moveMotor>
	Servo_SetPercent(90);
 80025d4:	205a      	movs	r0, #90	; 0x5a
 80025d6:	f003 f86b 	bl	80056b0 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 80025da:	f006 f935 	bl	8008848 <HAL_GetTick>
 80025de:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 2000);
 80025e0:	bf00      	nop
 80025e2:	f006 f931 	bl	8008848 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80025f0:	d9f7      	bls.n	80025e2 <servoCleaning+0x6a>

	Servo_SetPercent(40);
 80025f2:	2028      	movs	r0, #40	; 0x28
 80025f4:	f003 f85c 	bl	80056b0 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 80025f8:	f006 f926 	bl	8008848 <HAL_GetTick>
 80025fc:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 1000);
 80025fe:	bf00      	nop
 8002600:	f006 f922 	bl	8008848 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800260e:	d9f7      	bls.n	8002600 <servoCleaning+0x88>

	get_timeTick =  HAL_GetTick();
 8002610:	f006 f91a 	bl	8008848 <HAL_GetTick>
 8002614:	6078      	str	r0, [r7, #4]
	Servo_SetPercent(90);
 8002616:	205a      	movs	r0, #90	; 0x5a
 8002618:	f003 f84a 	bl	80056b0 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 2000);
 800261c:	bf00      	nop
 800261e:	f006 f913 	bl	8008848 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800262c:	d9f7      	bls.n	800261e <servoCleaning+0xa6>

	Servo_SetPercent(40);
 800262e:	2028      	movs	r0, #40	; 0x28
 8002630:	f003 f83e 	bl	80056b0 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 8002634:	f006 f908 	bl	8008848 <HAL_GetTick>
 8002638:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 1000);
 800263a:	bf00      	nop
 800263c:	f006 f904 	bl	8008848 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800264a:	d9f7      	bls.n	800263c <servoCleaning+0xc4>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 800264c:	4a07      	ldr	r2, [pc, #28]	; (800266c <servoCleaning+0xf4>)
 800264e:	2100      	movs	r1, #0
 8002650:	2003      	movs	r0, #3
 8002652:	f000 fe3f 	bl	80032d4 <moveMotor>
	Servo_SetPercent(90);
 8002656:	205a      	movs	r0, #90	; 0x5a
 8002658:	f003 f82a 	bl	80056b0 <Servo_SetPercent>
	ManualOperation = FALSE;
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <servoCleaning+0xf8>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]

}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	0098967f 	.word	0x0098967f
 8002670:	200003a0 	.word	0x200003a0

08002674 <capCleaning_Servo>:


static void capCleaning_Servo(void)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b0ca      	sub	sp, #296	; 0x128
 800267a:	af00      	add	r7, sp, #0
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 800267c:	2101      	movs	r1, #1
 800267e:	2002      	movs	r0, #2
 8002680:	f001 ff6a 	bl	8004558 <LoadingFunc>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Valve OFF
 8002684:	4ad9      	ldr	r2, [pc, #868]	; (80029ec <capCleaning_Servo+0x378>)
 8002686:	2101      	movs	r1, #1
 8002688:	2003      	movs	r0, #3
 800268a:	f000 fe23 	bl	80032d4 <moveMotor>
	HAL_Delay(100);
 800268e:	2064      	movs	r0, #100	; 0x64
 8002690:	f006 f8e6 	bl	8008860 <HAL_Delay>
	moveMotorSpindleToLocBlock(M2POS1VAL);
 8002694:	2000      	movs	r0, #0
 8002696:	f000 fcad 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	uint64_t get_timeTick =  HAL_GetTick();
 800269a:	f006 f8d5 	bl	8008848 <HAL_GetTick>
 800269e:	4603      	mov	r3, r0
 80026a0:	2200      	movs	r2, #0
 80026a2:	663b      	str	r3, [r7, #96]	; 0x60
 80026a4:	667a      	str	r2, [r7, #100]	; 0x64
 80026a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80026aa:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 1000);
 80026ae:	bf00      	nop
 80026b0:	f006 f8ca 	bl	8008848 <HAL_GetTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2200      	movs	r2, #0
 80026b8:	469a      	mov	sl, r3
 80026ba:	4693      	mov	fp, r2
 80026bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80026c0:	ebba 0402 	subs.w	r4, sl, r2
 80026c4:	eb6b 0503 	sbc.w	r5, fp, r3
 80026c8:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80026cc:	429c      	cmp	r4, r3
 80026ce:	f175 0300 	sbcs.w	r3, r5, #0
 80026d2:	d3ed      	bcc.n	80026b0 <capCleaning_Servo+0x3c>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80026d4:	4ac5      	ldr	r2, [pc, #788]	; (80029ec <capCleaning_Servo+0x378>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	2003      	movs	r0, #3
 80026da:	f000 fdfb 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 80026de:	f006 f8b3 	bl	8008848 <HAL_GetTick>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2200      	movs	r2, #0
 80026e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80026e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026ea:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80026ee:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 3000);
 80026f2:	bf00      	nop
 80026f4:	f006 f8a8 	bl	8008848 <HAL_GetTick>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002700:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002704:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002708:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800270c:	4621      	mov	r1, r4
 800270e:	ebb1 0802 	subs.w	r8, r1, r2
 8002712:	4629      	mov	r1, r5
 8002714:	eb61 0903 	sbc.w	r9, r1, r3
 8002718:	f640 33b9 	movw	r3, #3001	; 0xbb9
 800271c:	4598      	cmp	r8, r3
 800271e:	f179 0300 	sbcs.w	r3, r9, #0
 8002722:	d3e7      	bcc.n	80026f4 <capCleaning_Servo+0x80>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8002724:	4ab1      	ldr	r2, [pc, #708]	; (80029ec <capCleaning_Servo+0x378>)
 8002726:	2101      	movs	r1, #1
 8002728:	2003      	movs	r0, #3
 800272a:	f000 fdd3 	bl	80032d4 <moveMotor>
	Servo_SetPercent(90);
 800272e:	205a      	movs	r0, #90	; 0x5a
 8002730:	f002 ffbe 	bl	80056b0 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 8002734:	f006 f888 	bl	8008848 <HAL_GetTick>
 8002738:	4603      	mov	r3, r0
 800273a:	2200      	movs	r2, #0
 800273c:	653b      	str	r3, [r7, #80]	; 0x50
 800273e:	657a      	str	r2, [r7, #84]	; 0x54
 8002740:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002744:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 200);
 8002748:	bf00      	nop
 800274a:	f006 f87d 	bl	8008848 <HAL_GetTick>
 800274e:	4603      	mov	r3, r0
 8002750:	2200      	movs	r2, #0
 8002752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002756:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800275a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800275e:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8002762:	4621      	mov	r1, r4
 8002764:	1a89      	subs	r1, r1, r2
 8002766:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800276a:	4629      	mov	r1, r5
 800276c:	eb61 0303 	sbc.w	r3, r1, r3
 8002770:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002774:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002778:	460b      	mov	r3, r1
 800277a:	2bc9      	cmp	r3, #201	; 0xc9
 800277c:	4613      	mov	r3, r2
 800277e:	f173 0300 	sbcs.w	r3, r3, #0
 8002782:	d3e2      	bcc.n	800274a <capCleaning_Servo+0xd6>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002784:	4a99      	ldr	r2, [pc, #612]	; (80029ec <capCleaning_Servo+0x378>)
 8002786:	2100      	movs	r1, #0
 8002788:	2003      	movs	r0, #3
 800278a:	f000 fda3 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 800278e:	f006 f85b 	bl	8008848 <HAL_GetTick>
 8002792:	4603      	mov	r3, r0
 8002794:	2200      	movs	r2, #0
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
 8002798:	64fa      	str	r2, [r7, #76]	; 0x4c
 800279a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800279e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 80027a2:	bf00      	nop
 80027a4:	f006 f850 	bl	8008848 <HAL_GetTick>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2200      	movs	r2, #0
 80027ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027b0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80027b4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80027b8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80027bc:	4621      	mov	r1, r4
 80027be:	1a89      	subs	r1, r1, r2
 80027c0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80027c4:	4629      	mov	r1, r5
 80027c6:	eb61 0303 	sbc.w	r3, r1, r3
 80027ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027ce:	f240 13f5 	movw	r3, #501	; 0x1f5
 80027d2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80027d6:	4602      	mov	r2, r0
 80027d8:	429a      	cmp	r2, r3
 80027da:	460b      	mov	r3, r1
 80027dc:	f173 0300 	sbcs.w	r3, r3, #0
 80027e0:	d3e0      	bcc.n	80027a4 <capCleaning_Servo+0x130>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 80027e2:	4a82      	ldr	r2, [pc, #520]	; (80029ec <capCleaning_Servo+0x378>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	2003      	movs	r0, #3
 80027e8:	f000 fd74 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 80027ec:	f006 f82c 	bl	8008848 <HAL_GetTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2200      	movs	r2, #0
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
 80027f6:	647a      	str	r2, [r7, #68]	; 0x44
 80027f8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80027fc:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	Servo_SetPercent(40);
 8002800:	2028      	movs	r0, #40	; 0x28
 8002802:	f002 ff55 	bl	80056b0 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 1000);
 8002806:	bf00      	nop
 8002808:	f006 f81e 	bl	8008848 <HAL_GetTick>
 800280c:	4603      	mov	r3, r0
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002814:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002818:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800281c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8002820:	4621      	mov	r1, r4
 8002822:	1a89      	subs	r1, r1, r2
 8002824:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8002828:	4629      	mov	r1, r5
 800282a:	eb61 0303 	sbc.w	r3, r1, r3
 800282e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002832:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002836:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800283a:	4602      	mov	r2, r0
 800283c:	429a      	cmp	r2, r3
 800283e:	460b      	mov	r3, r1
 8002840:	f173 0300 	sbcs.w	r3, r3, #0
 8002844:	d3e0      	bcc.n	8002808 <capCleaning_Servo+0x194>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002846:	4a69      	ldr	r2, [pc, #420]	; (80029ec <capCleaning_Servo+0x378>)
 8002848:	2100      	movs	r1, #0
 800284a:	2003      	movs	r0, #3
 800284c:	f000 fd42 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002850:	f005 fffa 	bl	8008848 <HAL_GetTick>
 8002854:	4603      	mov	r3, r0
 8002856:	2200      	movs	r2, #0
 8002858:	63bb      	str	r3, [r7, #56]	; 0x38
 800285a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800285c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002860:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 8002864:	bf00      	nop
 8002866:	f005 ffef 	bl	8008848 <HAL_GetTick>
 800286a:	4603      	mov	r3, r0
 800286c:	2200      	movs	r2, #0
 800286e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002872:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002876:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800287a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800287e:	4621      	mov	r1, r4
 8002880:	1a89      	subs	r1, r1, r2
 8002882:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8002886:	4629      	mov	r1, r5
 8002888:	eb61 0303 	sbc.w	r3, r1, r3
 800288c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002890:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002894:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8002898:	4602      	mov	r2, r0
 800289a:	429a      	cmp	r2, r3
 800289c:	460b      	mov	r3, r1
 800289e:	f173 0300 	sbcs.w	r3, r3, #0
 80028a2:	d3e0      	bcc.n	8002866 <capCleaning_Servo+0x1f2>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 80028a4:	4a51      	ldr	r2, [pc, #324]	; (80029ec <capCleaning_Servo+0x378>)
 80028a6:	2101      	movs	r1, #1
 80028a8:	2003      	movs	r0, #3
 80028aa:	f000 fd13 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 80028ae:	f005 ffcb 	bl	8008848 <HAL_GetTick>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2200      	movs	r2, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
 80028b8:	637a      	str	r2, [r7, #52]	; 0x34
 80028ba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80028be:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	Servo_SetPercent(90);
 80028c2:	205a      	movs	r0, #90	; 0x5a
 80028c4:	f002 fef4 	bl	80056b0 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 1000);
 80028c8:	bf00      	nop
 80028ca:	f005 ffbd 	bl	8008848 <HAL_GetTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028d6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80028de:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80028e2:	4621      	mov	r1, r4
 80028e4:	1a89      	subs	r1, r1, r2
 80028e6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80028ea:	4629      	mov	r1, r5
 80028ec:	eb61 0303 	sbc.w	r3, r1, r3
 80028f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028f4:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80028f8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028fc:	4602      	mov	r2, r0
 80028fe:	429a      	cmp	r2, r3
 8002900:	460b      	mov	r3, r1
 8002902:	f173 0300 	sbcs.w	r3, r3, #0
 8002906:	d3e0      	bcc.n	80028ca <capCleaning_Servo+0x256>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002908:	4a38      	ldr	r2, [pc, #224]	; (80029ec <capCleaning_Servo+0x378>)
 800290a:	2100      	movs	r1, #0
 800290c:	2003      	movs	r0, #3
 800290e:	f000 fce1 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002912:	f005 ff99 	bl	8008848 <HAL_GetTick>
 8002916:	4603      	mov	r3, r0
 8002918:	2200      	movs	r2, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
 800291c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800291e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002922:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 8002926:	bf00      	nop
 8002928:	f005 ff8e 	bl	8008848 <HAL_GetTick>
 800292c:	4603      	mov	r3, r0
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002934:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002938:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800293c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8002940:	4621      	mov	r1, r4
 8002942:	1a89      	subs	r1, r1, r2
 8002944:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002948:	4629      	mov	r1, r5
 800294a:	eb61 0303 	sbc.w	r3, r1, r3
 800294e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002952:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002956:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800295a:	4602      	mov	r2, r0
 800295c:	429a      	cmp	r2, r3
 800295e:	460b      	mov	r3, r1
 8002960:	f173 0300 	sbcs.w	r3, r3, #0
 8002964:	d3e0      	bcc.n	8002928 <capCleaning_Servo+0x2b4>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <capCleaning_Servo+0x378>)
 8002968:	2101      	movs	r1, #1
 800296a:	2003      	movs	r0, #3
 800296c:	f000 fcb2 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002970:	f005 ff6a 	bl	8008848 <HAL_GetTick>
 8002974:	4603      	mov	r3, r0
 8002976:	2200      	movs	r2, #0
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	627a      	str	r2, [r7, #36]	; 0x24
 800297c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002980:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	Servo_SetPercent(40);
 8002984:	2028      	movs	r0, #40	; 0x28
 8002986:	f002 fe93 	bl	80056b0 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 1000);
 800298a:	bf00      	nop
 800298c:	f005 ff5c 	bl	8008848 <HAL_GetTick>
 8002990:	4603      	mov	r3, r0
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002998:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800299c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80029a0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80029a4:	4621      	mov	r1, r4
 80029a6:	1a89      	subs	r1, r1, r2
 80029a8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80029ac:	4629      	mov	r1, r5
 80029ae:	eb61 0303 	sbc.w	r3, r1, r3
 80029b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029b6:	f240 33e9 	movw	r3, #1001	; 0x3e9
 80029ba:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80029be:	4602      	mov	r2, r0
 80029c0:	429a      	cmp	r2, r3
 80029c2:	460b      	mov	r3, r1
 80029c4:	f173 0300 	sbcs.w	r3, r3, #0
 80029c8:	d3e0      	bcc.n	800298c <capCleaning_Servo+0x318>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80029ca:	4a08      	ldr	r2, [pc, #32]	; (80029ec <capCleaning_Servo+0x378>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	2003      	movs	r0, #3
 80029d0:	f000 fc80 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 80029d4:	f005 ff38 	bl	8008848 <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	2200      	movs	r2, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	61fa      	str	r2, [r7, #28]
 80029e0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80029e4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 80029e8:	bf00      	nop
 80029ea:	e001      	b.n	80029f0 <capCleaning_Servo+0x37c>
 80029ec:	0098967f 	.word	0x0098967f
 80029f0:	f005 ff2a 	bl	8008848 <HAL_GetTick>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2200      	movs	r2, #0
 80029f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a00:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002a04:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8002a08:	4621      	mov	r1, r4
 8002a0a:	1a89      	subs	r1, r1, r2
 8002a0c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002a10:	4629      	mov	r1, r5
 8002a12:	eb61 0303 	sbc.w	r3, r1, r3
 8002a16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a1a:	f240 13f5 	movw	r3, #501	; 0x1f5
 8002a1e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a22:	4602      	mov	r2, r0
 8002a24:	429a      	cmp	r2, r3
 8002a26:	460b      	mov	r3, r1
 8002a28:	f173 0300 	sbcs.w	r3, r3, #0
 8002a2c:	d3e0      	bcc.n	80029f0 <capCleaning_Servo+0x37c>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8002a2e:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <capCleaning_Servo+0x4e0>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	2003      	movs	r0, #3
 8002a34:	f000 fc4e 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002a38:	f005 ff06 	bl	8008848 <HAL_GetTick>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2200      	movs	r2, #0
 8002a40:	613b      	str	r3, [r7, #16]
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a48:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 100);
 8002a4c:	bf00      	nop
 8002a4e:	f005 fefb 	bl	8008848 <HAL_GetTick>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2200      	movs	r2, #0
 8002a56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002a62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a66:	4621      	mov	r1, r4
 8002a68:	1a89      	subs	r1, r1, r2
 8002a6a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8002a6e:	4629      	mov	r1, r5
 8002a70:	eb61 0303 	sbc.w	r3, r1, r3
 8002a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	2b65      	cmp	r3, #101	; 0x65
 8002a80:	4613      	mov	r3, r2
 8002a82:	f173 0300 	sbcs.w	r3, r3, #0
 8002a86:	d3e2      	bcc.n	8002a4e <capCleaning_Servo+0x3da>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002a88:	4a32      	ldr	r2, [pc, #200]	; (8002b54 <capCleaning_Servo+0x4e0>)
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 fc21 	bl	80032d4 <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002a92:	f005 fed9 	bl	8008848 <HAL_GetTick>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	60fa      	str	r2, [r7, #12]
 8002a9e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002aa2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 3000);
 8002aa6:	bf00      	nop
 8002aa8:	f005 fece 	bl	8008848 <HAL_GetTick>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ab4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ab8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002abc:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	1a89      	subs	r1, r1, r2
 8002ac4:	67b9      	str	r1, [r7, #120]	; 0x78
 8002ac6:	4629      	mov	r1, r5
 8002ac8:	eb61 0303 	sbc.w	r3, r1, r3
 8002acc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ace:	f640 33b9 	movw	r3, #3001	; 0xbb9
 8002ad2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	460b      	mov	r3, r1
 8002adc:	f173 0300 	sbcs.w	r3, r3, #0
 8002ae0:	d3e2      	bcc.n	8002aa8 <capCleaning_Servo+0x434>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <capCleaning_Servo+0x4e0>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2003      	movs	r0, #3
 8002ae8:	f000 fbf4 	bl	80032d4 <moveMotor>
	moveMotorSpindleToLocBlock(M2POS1VAL);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f000 fa81 	bl	8002ff4 <moveMotorSpindleToLocBlock>
	get_timeTick =  HAL_GetTick();
 8002af2:	f005 fea9 	bl	8008848 <HAL_GetTick>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2200      	movs	r2, #0
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	607a      	str	r2, [r7, #4]
 8002afe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b02:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	while(HAL_GetTick() - get_timeTick <= 1000);
 8002b06:	bf00      	nop
 8002b08:	f005 fe9e 	bl	8008848 <HAL_GetTick>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2200      	movs	r2, #0
 8002b10:	673b      	str	r3, [r7, #112]	; 0x70
 8002b12:	677a      	str	r2, [r7, #116]	; 0x74
 8002b14:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002b18:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002b1c:	4621      	mov	r1, r4
 8002b1e:	1a89      	subs	r1, r1, r2
 8002b20:	66b9      	str	r1, [r7, #104]	; 0x68
 8002b22:	4629      	mov	r1, r5
 8002b24:	eb61 0303 	sbc.w	r3, r1, r3
 8002b28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b2a:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002b2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b32:	4602      	mov	r2, r0
 8002b34:	429a      	cmp	r2, r3
 8002b36:	460b      	mov	r3, r1
 8002b38:	f173 0300 	sbcs.w	r3, r3, #0
 8002b3c:	d3e4      	bcc.n	8002b08 <capCleaning_Servo+0x494>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Servo?
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <capCleaning_Servo+0x4e0>)
 8002b40:	2100      	movs	r1, #0
 8002b42:	2003      	movs	r0, #3
 8002b44:	f000 fbc6 	bl	80032d4 <moveMotor>
}
 8002b48:	bf00      	nop
 8002b4a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b54:	0098967f 	.word	0x0098967f

08002b58 <DemoApp>:
 */

#include <main.h>
#include <DemoApp.h>

void DemoApp() {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
	isPowerLEDBlinking = TRUE;
 8002b5e:	4b84      	ldr	r3, [pc, #528]	; (8002d70 <DemoApp+0x218>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	701a      	strb	r2, [r3, #0]
	SerialPrintln("DEMO");
 8002b64:	4883      	ldr	r0, [pc, #524]	; (8002d74 <DemoApp+0x21c>)
 8002b66:	f002 fd05 	bl	8005574 <SerialPrintln>
	LCDRGBControl(WHITE);
 8002b6a:	2064      	movs	r0, #100	; 0x64
 8002b6c:	f002 f99a 	bl	8004ea4 <LCDRGBControl>
	LCD_Clear();
 8002b70:	f002 f82c 	bl	8004bcc <LCD_Clear>
	LoadingFunc(BLINK, LOADING);
 8002b74:	2101      	movs	r1, #1
 8002b76:	2002      	movs	r0, #2
 8002b78:	f001 fcee 	bl	8004558 <LoadingFunc>
	InitializeMachine();
 8002b7c:	f001 f954 	bl	8003e28 <InitializeMachine>
	LoadingFunc(ON, NOT_LOADING);
 8002b80:	2100      	movs	r1, #0
 8002b82:	2001      	movs	r0, #1
 8002b84:	f001 fce8 	bl	8004558 <LoadingFunc>
	printLCD(0, "Put Cannister On ", ENTER_SYMBOL);
 8002b88:	2201      	movs	r2, #1
 8002b8a:	497b      	ldr	r1, [pc, #492]	; (8002d78 <DemoApp+0x220>)
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f002 f91d 	bl	8004dcc <printLCD>
	printLCD(1, " ", NO_SYMBOL);
 8002b92:	2200      	movs	r2, #0
 8002b94:	4979      	ldr	r1, [pc, #484]	; (8002d7c <DemoApp+0x224>)
 8002b96:	2001      	movs	r0, #1
 8002b98:	f002 f918 	bl	8004dcc <printLCD>
	printLCD(2, " ", NO_SYMBOL);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	4977      	ldr	r1, [pc, #476]	; (8002d7c <DemoApp+0x224>)
 8002ba0:	2002      	movs	r0, #2
 8002ba2:	f002 f913 	bl	8004dcc <printLCD>
	printLCD(3, "DEMO", NO_SYMBOL);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	4972      	ldr	r1, [pc, #456]	; (8002d74 <DemoApp+0x21c>)
 8002baa:	2003      	movs	r0, #3
 8002bac:	f002 f90e 	bl	8004dcc <printLCD>
	//While enter key is not pressed. Here we did not use read key func as we want to enter dev menu
	//Dev menu reads keys, and as read key func is a blocking one, it will cause issues
	while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 8002bb0:	e004      	b.n	8002bbc <DemoApp+0x64>
		//What is inside this loop is just for testing and developer use, not by customer app
		HAL_Delay(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f005 fe54 	bl	8008860 <HAL_Delay>
		DeveloperMenu();
 8002bb8:	f003 f8fe 	bl	8005db8 <DeveloperMenu>
	while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 8002bbc:	200d      	movs	r0, #13
 8002bbe:	f000 f9d1 	bl	8002f64 <digitalRead>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d0f4      	beq.n	8002bb2 <DemoApp+0x5a>
	}
	printLCD(3, " ", NO_SYMBOL);
 8002bc8:	2200      	movs	r2, #0
 8002bca:	496c      	ldr	r1, [pc, #432]	; (8002d7c <DemoApp+0x224>)
 8002bcc:	2003      	movs	r0, #3
 8002bce:	f002 f8fd 	bl	8004dcc <printLCD>

	for (int k = 0; k < 5; k++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e19a      	b.n	8002f0e <DemoApp+0x3b6>
		LCD_Clear();                //Make sure nothing is written on LCD screen
 8002bd8:	f001 fff8 	bl	8004bcc <LCD_Clear>
		printLCD(0, "DEMO APP active", NO_SYMBOL);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4968      	ldr	r1, [pc, #416]	; (8002d80 <DemoApp+0x228>)
 8002be0:	2000      	movs	r0, #0
 8002be2:	f002 f8f3 	bl	8004dcc <printLCD>
		moveMotorClampToLocBlock(M1POS2VAL);
 8002be6:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8002bea:	f000 fa2f 	bl	800304c <moveMotorClampToLocBlock>
		LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f001 fcb1 	bl	8004558 <LoadingFunc>
		printLCD(1, "Liters: ", CURSOR_DEMO_SYMBOL);
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	4962      	ldr	r1, [pc, #392]	; (8002d84 <DemoApp+0x22c>)
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f002 f8e6 	bl	8004dcc <printLCD>
		printLCD(2, "Kg/Liters: ", NO_SYMBOL);
 8002c00:	2200      	movs	r2, #0
 8002c02:	4961      	ldr	r1, [pc, #388]	; (8002d88 <DemoApp+0x230>)
 8002c04:	2002      	movs	r0, #2
 8002c06:	f002 f8e1 	bl	8004dcc <printLCD>
		HAL_Delay(1500);
 8002c0a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c0e:	f005 fe27 	bl	8008860 <HAL_Delay>
		printLCD(1, "Liters: 2", CURSOR_DEMO_SYMBOL);
 8002c12:	2204      	movs	r2, #4
 8002c14:	495d      	ldr	r1, [pc, #372]	; (8002d8c <DemoApp+0x234>)
 8002c16:	2001      	movs	r0, #1
 8002c18:	f002 f8d8 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c1c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c20:	f005 fe1e 	bl	8008860 <HAL_Delay>
		printLCD(1, "Liters: 2.", CURSOR_DEMO_SYMBOL);
 8002c24:	2204      	movs	r2, #4
 8002c26:	495a      	ldr	r1, [pc, #360]	; (8002d90 <DemoApp+0x238>)
 8002c28:	2001      	movs	r0, #1
 8002c2a:	f002 f8cf 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c2e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c32:	f005 fe15 	bl	8008860 <HAL_Delay>
		printLCD(1, "Liters: 2.5", CURSOR_DEMO_SYMBOL);
 8002c36:	2204      	movs	r2, #4
 8002c38:	4956      	ldr	r1, [pc, #344]	; (8002d94 <DemoApp+0x23c>)
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f002 f8c6 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c40:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c44:	f005 fe0c 	bl	8008860 <HAL_Delay>
		printLCD(1, "Liters: 2.5", NO_SYMBOL);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4952      	ldr	r1, [pc, #328]	; (8002d94 <DemoApp+0x23c>)
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f002 f8bd 	bl	8004dcc <printLCD>
		printLCD(2, "Kg/Liters: ", CURSOR_DEMO_SYMBOL);
 8002c52:	2204      	movs	r2, #4
 8002c54:	494c      	ldr	r1, [pc, #304]	; (8002d88 <DemoApp+0x230>)
 8002c56:	2002      	movs	r0, #2
 8002c58:	f002 f8b8 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c60:	f005 fdfe 	bl	8008860 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1", CURSOR_DEMO_SYMBOL);
 8002c64:	2204      	movs	r2, #4
 8002c66:	494c      	ldr	r1, [pc, #304]	; (8002d98 <DemoApp+0x240>)
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f002 f8af 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c72:	f005 fdf5 	bl	8008860 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1.", CURSOR_DEMO_SYMBOL);
 8002c76:	2204      	movs	r2, #4
 8002c78:	4948      	ldr	r1, [pc, #288]	; (8002d9c <DemoApp+0x244>)
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f002 f8a6 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c80:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c84:	f005 fdec 	bl	8008860 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1.1", CURSOR_DEMO_SYMBOL);
 8002c88:	2204      	movs	r2, #4
 8002c8a:	4945      	ldr	r1, [pc, #276]	; (8002da0 <DemoApp+0x248>)
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f002 f89d 	bl	8004dcc <printLCD>
		HAL_Delay(400);
 8002c92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002c96:	f005 fde3 	bl	8008860 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1.1", NO_SYMBOL);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4940      	ldr	r1, [pc, #256]	; (8002da0 <DemoApp+0x248>)
 8002c9e:	2002      	movs	r0, #2
 8002ca0:	f002 f894 	bl	8004dcc <printLCD>
		LoadingFunc(BLINK, NOT_LOADING);
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f001 fc56 	bl	8004558 <LoadingFunc>
		printLCD(0, "0.00 / 2.5L", NO_SYMBOL);
 8002cac:	2200      	movs	r2, #0
 8002cae:	493d      	ldr	r1, [pc, #244]	; (8002da4 <DemoApp+0x24c>)
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f002 f88b 	bl	8004dcc <printLCD>
		float i = 0.0;
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
		char LitersOf[20]; // Ensure the array is large enough for your string
		strcpy(LitersOf, "0.00 / 2.5L"); // Initialize the array with your string
 8002cbc:	463b      	mov	r3, r7
 8002cbe:	4a39      	ldr	r2, [pc, #228]	; (8002da4 <DemoApp+0x24c>)
 8002cc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		unsigned long temptmr = HAL_GetTick(); //millis();
 8002cc6:	f005 fdbf 	bl	8008848 <HAL_GetTick>
 8002cca:	6178      	str	r0, [r7, #20]
		//Once spindle motor (Cap) penetrates the CAN, then liquid starts flowing
		//While spindle is moving up inside the CAN, the liquid is still flawing
		//We need to show dispensed amount on the LCD, while the spindle is still moving!

		//Move M1 to clamp position POS2
		moveMotorClampToLocBlock(M1POS2VAL);
 8002ccc:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8002cd0:	f000 f9bc 	bl	800304c <moveMotorClampToLocBlock>
		if (Clamp_M2_EncA_Pulses >= M1POS2VAL) {
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <DemoApp+0x250>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8002cdc:	f2c0 8098 	blt.w	8002e10 <DemoApp+0x2b8>
			//Move spindle to POS3
			moveMotorSpindleToLocBlock(M2POS3VAL);
 8002ce0:	f241 1094 	movw	r0, #4500	; 0x1194
 8002ce4:	f000 f986 	bl	8002ff4 <moveMotorSpindleToLocBlock>
			if (Spindle_M3_EncA_Pulses >= M2POS3VAL) {
 8002ce8:	4b30      	ldr	r3, [pc, #192]	; (8002dac <DemoApp+0x254>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f241 1293 	movw	r2, #4499	; 0x1193
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f340 808a 	ble.w	8002e0a <DemoApp+0x2b2>
				//Open valve servo by 100%
				Servo_SetPercent(ValveOpen);
 8002cf6:	2064      	movs	r0, #100	; 0x64
 8002cf8:	f002 fcda 	bl	80056b0 <Servo_SetPercent>
				//Update LCD with dispensed amount until 2.0 L (quick update) -- liquid rush
				if (HAL_GetTick() > temptmr + 2 && i <= 2.0) { //Update screen only if M1 reaches open position, once every 100mS, and if dosing < needed 2.5L
 8002cfc:	f005 fda4 	bl	8008848 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3302      	adds	r3, #2
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d92a      	bls.n	8002d60 <DemoApp+0x208>
 8002d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	d821      	bhi.n	8002d60 <DemoApp+0x208>
					temptmr = HAL_GetTick(); //millis();
 8002d1c:	f005 fd94 	bl	8008848 <HAL_GetTick>
 8002d20:	6178      	str	r0, [r7, #20]
					sprintf(LitersOf, "%.2f / 2.0L", i); // Formats 'i' as a floating-point and stores in LitersOf
 8002d22:	69b8      	ldr	r0, [r7, #24]
 8002d24:	f7fd fc20 	bl	8000568 <__aeabi_f2d>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	4920      	ldr	r1, [pc, #128]	; (8002db0 <DemoApp+0x258>)
 8002d30:	f013 fbe8 	bl	8016504 <siprintf>
					printLCD(0, LitersOf, NO_SYMBOL);
 8002d34:	463b      	mov	r3, r7
 8002d36:	2200      	movs	r2, #0
 8002d38:	4619      	mov	r1, r3
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f002 f846 	bl	8004dcc <printLCD>
					i = i + 0.1;
 8002d40:	69b8      	ldr	r0, [r7, #24]
 8002d42:	f7fd fc11 	bl	8000568 <__aeabi_f2d>
 8002d46:	a308      	add	r3, pc, #32	; (adr r3, 8002d68 <DemoApp+0x210>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd faae 	bl	80002ac <__adddf3>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	f7fd ff56 	bl	8000c08 <__aeabi_d2f>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	61bb      	str	r3, [r7, #24]
				}
				Servo_SetPercent(15);
 8002d60:	200f      	movs	r0, #15
 8002d62:	f002 fca5 	bl	80056b0 <Servo_SetPercent>
				//update LCD with dispensed amount until 2.5 L (slower update) -- precise measurement
				while (i < 2.5) { //Complete dosing
 8002d66:	e047      	b.n	8002df8 <DemoApp+0x2a0>
 8002d68:	9999999a 	.word	0x9999999a
 8002d6c:	3fb99999 	.word	0x3fb99999
 8002d70:	200004a0 	.word	0x200004a0
 8002d74:	08019e38 	.word	0x08019e38
 8002d78:	08019e40 	.word	0x08019e40
 8002d7c:	08019e54 	.word	0x08019e54
 8002d80:	08019e58 	.word	0x08019e58
 8002d84:	08019e68 	.word	0x08019e68
 8002d88:	08019e74 	.word	0x08019e74
 8002d8c:	08019e80 	.word	0x08019e80
 8002d90:	08019e8c 	.word	0x08019e8c
 8002d94:	08019e98 	.word	0x08019e98
 8002d98:	08019ea4 	.word	0x08019ea4
 8002d9c:	08019eb4 	.word	0x08019eb4
 8002da0:	08019ec4 	.word	0x08019ec4
 8002da4:	08019ed4 	.word	0x08019ed4
 8002da8:	200000fc 	.word	0x200000fc
 8002dac:	20000104 	.word	0x20000104
 8002db0:	08019ee0 	.word	0x08019ee0
					sprintf(LitersOf, "%.2f / 2.5L", i);
 8002db4:	69b8      	ldr	r0, [r7, #24]
 8002db6:	f7fd fbd7 	bl	8000568 <__aeabi_f2d>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4638      	mov	r0, r7
 8002dc0:	4959      	ldr	r1, [pc, #356]	; (8002f28 <DemoApp+0x3d0>)
 8002dc2:	f013 fb9f 	bl	8016504 <siprintf>
					printLCD(0, LitersOf, NO_SYMBOL);
 8002dc6:	463b      	mov	r3, r7
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f001 fffd 	bl	8004dcc <printLCD>
					HAL_Delay(100);
 8002dd2:	2064      	movs	r0, #100	; 0x64
 8002dd4:	f005 fd44 	bl	8008860 <HAL_Delay>
					i = i + 0.1;
 8002dd8:	69b8      	ldr	r0, [r7, #24]
 8002dda:	f7fd fbc5 	bl	8000568 <__aeabi_f2d>
 8002dde:	a350      	add	r3, pc, #320	; (adr r3, 8002f20 <DemoApp+0x3c8>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd fa62 	bl	80002ac <__adddf3>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7fd ff0a 	bl	8000c08 <__aeabi_d2f>
 8002df4:	4603      	mov	r3, r0
 8002df6:	61bb      	str	r3, [r7, #24]
				while (i < 2.5) { //Complete dosing
 8002df8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dfc:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 8002e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e08:	d4d4      	bmi.n	8002db4 <DemoApp+0x25c>
				}
			}
			//close valve servo to 0%
			Servo_SetPercent(ValveClose);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f002 fc50 	bl	80056b0 <Servo_SetPercent>
		}
		LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8002e10:	2100      	movs	r1, #0
 8002e12:	2001      	movs	r0, #1
 8002e14:	f001 fba0 	bl	8004558 <LoadingFunc>
		printLCD(0, "Transfer Complete", NO_SYMBOL);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4944      	ldr	r1, [pc, #272]	; (8002f2c <DemoApp+0x3d4>)
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f001 ffd5 	bl	8004dcc <printLCD>
		moveMotorClampToLocBlock(M1POS2VAL);
 8002e22:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8002e26:	f000 f911 	bl	800304c <moveMotorClampToLocBlock>
		HAL_Delay(1000);
 8002e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e2e:	f005 fd17 	bl	8008860 <HAL_Delay>
		isDemoCleaning = TRUE;
 8002e32:	4b3f      	ldr	r3, [pc, #252]	; (8002f30 <DemoApp+0x3d8>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
		printLCD(3, "CLEANING", NO_SYMBOL);
 8002e38:	2200      	movs	r2, #0
 8002e3a:	493e      	ldr	r1, [pc, #248]	; (8002f34 <DemoApp+0x3dc>)
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	f001 ffc5 	bl	8004dcc <printLCD>
		SerialPrintln("X0");
 8002e42:	483d      	ldr	r0, [pc, #244]	; (8002f38 <DemoApp+0x3e0>)
 8002e44:	f002 fb96 	bl	8005574 <SerialPrintln>
		LoadingFunc(BLINK, LOADING);
 8002e48:	2101      	movs	r1, #1
 8002e4a:	2002      	movs	r0, #2
 8002e4c:	f001 fb84 	bl	8004558 <LoadingFunc>
		SerialPrintln("X1");
 8002e50:	483a      	ldr	r0, [pc, #232]	; (8002f3c <DemoApp+0x3e4>)
 8002e52:	f002 fb8f 	bl	8005574 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS2VAL);
 8002e56:	f640 40b2 	movw	r0, #3250	; 0xcb2
 8002e5a:	f000 f8cb 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		SerialPrintln("X2");
 8002e5e:	4838      	ldr	r0, [pc, #224]	; (8002f40 <DemoApp+0x3e8>)
 8002e60:	f002 fb88 	bl	8005574 <SerialPrintln>
		moveMotor(VALVEMOTOR, ON, INT_INF); //Relay On
 8002e64:	4a37      	ldr	r2, [pc, #220]	; (8002f44 <DemoApp+0x3ec>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	2003      	movs	r0, #3
 8002e6a:	f000 fa33 	bl	80032d4 <moveMotor>
		SerialPrintln("X3");
 8002e6e:	4836      	ldr	r0, [pc, #216]	; (8002f48 <DemoApp+0x3f0>)
 8002e70:	f002 fb80 	bl	8005574 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS4VAL);
 8002e74:	f641 30bc 	movw	r0, #7100	; 0x1bbc
 8002e78:	f000 f8bc 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		SerialPrintln("X4");
 8002e7c:	4833      	ldr	r0, [pc, #204]	; (8002f4c <DemoApp+0x3f4>)
 8002e7e:	f002 fb79 	bl	8005574 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS3VAL);
 8002e82:	f241 1094 	movw	r0, #4500	; 0x1194
 8002e86:	f000 f8b5 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		SerialPrintln("X5");
 8002e8a:	4831      	ldr	r0, [pc, #196]	; (8002f50 <DemoApp+0x3f8>)
 8002e8c:	f002 fb72 	bl	8005574 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS4VAL);
 8002e90:	f641 30bc 	movw	r0, #7100	; 0x1bbc
 8002e94:	f000 f8ae 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		moveMotor(VALVEMOTOR, OFF, INT_INF); //Relay Off
 8002e98:	4a2a      	ldr	r2, [pc, #168]	; (8002f44 <DemoApp+0x3ec>)
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	2003      	movs	r0, #3
 8002e9e:	f000 fa19 	bl	80032d4 <moveMotor>
		moveMotorSpindleToLocBlock(M2POS1VAL);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f000 f8a6 	bl	8002ff4 <moveMotorSpindleToLocBlock>
		moveMotor(VALVEMOTOR, ON, INT_INF); //Relay On
 8002ea8:	4a26      	ldr	r2, [pc, #152]	; (8002f44 <DemoApp+0x3ec>)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	2003      	movs	r0, #3
 8002eae:	f000 fa11 	bl	80032d4 <moveMotor>
		HAL_Delay(3000);
 8002eb2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eb6:	f005 fcd3 	bl	8008860 <HAL_Delay>
		moveMotor(VALVEMOTOR, OFF, INT_INF); //Relay Off
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <DemoApp+0x3ec>)
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	f000 fa08 	bl	80032d4 <moveMotor>
		isDemoCleaning = FALSE;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <DemoApp+0x3d8>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	701a      	strb	r2, [r3, #0]
		printLCD(3, " ", NO_SYMBOL);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	4921      	ldr	r1, [pc, #132]	; (8002f54 <DemoApp+0x3fc>)
 8002ece:	2003      	movs	r0, #3
 8002ed0:	f001 ff7c 	bl	8004dcc <printLCD>
		moveMotorClampToLocBlock(M1POS1VAL);
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f000 f8b9 	bl	800304c <moveMotorClampToLocBlock>
		;
		LoadingFunc(ON, NOT_LOADING);
 8002eda:	2100      	movs	r1, #0
 8002edc:	2001      	movs	r0, #1
 8002ede:	f001 fb3b 	bl	8004558 <LoadingFunc>
		printLCD(0, "Cannister Unlocked", NO_SYMBOL);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	491c      	ldr	r1, [pc, #112]	; (8002f58 <DemoApp+0x400>)
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f001 ff70 	bl	8004dcc <printLCD>
		printLCD(1, "Next Cannister Please", NO_SYMBOL);
 8002eec:	2200      	movs	r2, #0
 8002eee:	491b      	ldr	r1, [pc, #108]	; (8002f5c <DemoApp+0x404>)
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f001 ff6b 	bl	8004dcc <printLCD>
		printLCD(2, "Put Cannister On ", ENTER_SYMBOL);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4919      	ldr	r1, [pc, #100]	; (8002f60 <DemoApp+0x408>)
 8002efa:	2002      	movs	r0, #2
 8002efc:	f001 ff66 	bl	8004dcc <printLCD>
		HAL_Delay(3000);
 8002f00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002f04:	f005 fcac 	bl	8008860 <HAL_Delay>
	for (int k = 0; k < 5; k++) {
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	f77f ae61 	ble.w	8002bd8 <DemoApp+0x80>
	}

}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	9999999a 	.word	0x9999999a
 8002f24:	3fb99999 	.word	0x3fb99999
 8002f28:	08019eec 	.word	0x08019eec
 8002f2c:	08019ef8 	.word	0x08019ef8
 8002f30:	200003fb 	.word	0x200003fb
 8002f34:	08019f0c 	.word	0x08019f0c
 8002f38:	08019f18 	.word	0x08019f18
 8002f3c:	08019f1c 	.word	0x08019f1c
 8002f40:	08019f20 	.word	0x08019f20
 8002f44:	0098967f 	.word	0x0098967f
 8002f48:	08019f24 	.word	0x08019f24
 8002f4c:	08019f28 	.word	0x08019f28
 8002f50:	08019f2c 	.word	0x08019f2c
 8002f54:	08019e54 	.word	0x08019e54
 8002f58:	08019f30 	.word	0x08019f30
 8002f5c:	08019f44 	.word	0x08019f44
 8002f60:	08019e40 	.word	0x08019e40

08002f64 <digitalRead>:
    {Button_Enter_Input_PullUp_GPIO_Port, Button_Enter_Input_PullUp_Pin}, 		// BUTTON_ENTER_Input_Pullup
    {Button_Comma_Input_PullUp_GPIO_Port, Button_Comma_Input_PullUp_Pin}  		// BUTTON_COMMA_Input_Pullup
};


GPIO_PinState digitalRead(UserLabel label) {
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	71fb      	strb	r3, [r7, #7]
    if (label >= sizeof(gpioMap) / sizeof(GPIO_Map)) {
 8002f6e:	79fb      	ldrb	r3, [r7, #7]
 8002f70:	2b0e      	cmp	r3, #14
 8002f72:	d901      	bls.n	8002f78 <digitalRead+0x14>
        // Handle invalid label
        return GPIO_PIN_RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e010      	b.n	8002f9a <digitalRead+0x36>
    }

    GPIO_Map map = gpioMap[label];
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	490a      	ldr	r1, [pc, #40]	; (8002fa4 <digitalRead+0x40>)
 8002f7c:	f107 0208 	add.w	r2, r7, #8
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002f88:	e882 0003 	stmia.w	r2, {r0, r1}
    return HAL_GPIO_ReadPin(map.port, map.pin);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	89ba      	ldrh	r2, [r7, #12]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f007 f8a0 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8002f98:	4603      	mov	r3, r0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000000 	.word	0x20000000

08002fa8 <digitalWrite>:
	{EN_DCDC_5V_Output_GPIO_Port, EN_DCDC_5V_Output_Pin},				// EN_DCDC_5V_Output
	{EN_DCDC_8V_Output_GPIO_Port, EN_DCDC_8V_Output_Pin},				// EN_DCDC_8V_Output
};

void digitalWrite(OutputLabel label, int state)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6039      	str	r1, [r7, #0]
 8002fb2:	71fb      	strb	r3, [r7, #7]
    if (label >= sizeof(outputMap) / sizeof(GPIO_OutputMap))
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	2b0e      	cmp	r3, #14
 8002fb8:	d815      	bhi.n	8002fe6 <digitalWrite+0x3e>
    {
        // Handle invalid label
        return;
    }

    GPIO_OutputMap map = outputMap[label];
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	490c      	ldr	r1, [pc, #48]	; (8002ff0 <digitalWrite+0x48>)
 8002fbe:	f107 0208 	add.w	r2, r7, #8
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	440b      	add	r3, r1
 8002fc6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fca:	e882 0003 	stmia.w	r2, {r0, r1}
    HAL_GPIO_WritePin(map.port, map.pin, (state != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002fce:	68b8      	ldr	r0, [r7, #8]
 8002fd0:	89b9      	ldrh	r1, [r7, #12]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f007 f892 	bl	800a108 <HAL_GPIO_WritePin>
 8002fe4:	e000      	b.n	8002fe8 <digitalWrite+0x40>
        return;
 8002fe6:	bf00      	nop
}
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000078 	.word	0x20000078

08002ff4 <moveMotorSpindleToLocBlock>:

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;

void moveMotorSpindleToLocBlock(long posM2) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	int DelayRequired = FALSE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
	while (!moveMotorSpindleToLocNoneBlock(posM2)) {
 8003000:	e001      	b.n	8003006 <moveMotorSpindleToLocBlock+0x12>
		DelayRequired = TRUE;
 8003002:	2301      	movs	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
	while (!moveMotorSpindleToLocNoneBlock(posM2)) {
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f84c 	bl	80030a4 <moveMotorSpindleToLocNoneBlock>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f7      	beq.n	8003002 <moveMotorSpindleToLocBlock+0xe>
	}
	if (DelayRequired == TRUE) {
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d115      	bne.n	8003044 <moveMotorSpindleToLocBlock+0x50>
		for(uint16_t j = 0; j < 1000; j++){
 8003018:	2300      	movs	r3, #0
 800301a:	817b      	strh	r3, [r7, #10]
 800301c:	e00e      	b.n	800303c <moveMotorSpindleToLocBlock+0x48>
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 800301e:	2300      	movs	r3, #0
 8003020:	813b      	strh	r3, [r7, #8]
 8003022:	e003      	b.n	800302c <moveMotorSpindleToLocBlock+0x38>
				__NOP();
 8003024:	bf00      	nop
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	3301      	adds	r3, #1
 800302a:	813b      	strh	r3, [r7, #8]
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	f243 62af 	movw	r2, #13999	; 0x36af
 8003032:	4293      	cmp	r3, r2
 8003034:	d9f6      	bls.n	8003024 <moveMotorSpindleToLocBlock+0x30>
		for(uint16_t j = 0; j < 1000; j++){
 8003036:	897b      	ldrh	r3, [r7, #10]
 8003038:	3301      	adds	r3, #1
 800303a:	817b      	strh	r3, [r7, #10]
 800303c:	897b      	ldrh	r3, [r7, #10]
 800303e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003042:	d3ec      	bcc.n	800301e <moveMotorSpindleToLocBlock+0x2a>
			}
		}
	}

}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <moveMotorClampToLocBlock>:

void moveMotorClampToLocBlock(long posM1) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	int DelayRequired = FALSE;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
	while (!moveMotorClampToLocNoneBlock(posM1)) {
 8003058:	e001      	b.n	800305e <moveMotorClampToLocBlock+0x12>
		DelayRequired = TRUE;
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
	while (!moveMotorClampToLocNoneBlock(posM1)) {
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8a6 	bl	80031b0 <moveMotorClampToLocNoneBlock>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f7      	beq.n	800305a <moveMotorClampToLocBlock+0xe>
	}
	if (DelayRequired == TRUE) {
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d115      	bne.n	800309c <moveMotorClampToLocBlock+0x50>
		for(uint16_t j = 0; j < 1000; j++){
 8003070:	2300      	movs	r3, #0
 8003072:	817b      	strh	r3, [r7, #10]
 8003074:	e00e      	b.n	8003094 <moveMotorClampToLocBlock+0x48>
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8003076:	2300      	movs	r3, #0
 8003078:	813b      	strh	r3, [r7, #8]
 800307a:	e003      	b.n	8003084 <moveMotorClampToLocBlock+0x38>
				__NOP();
 800307c:	bf00      	nop
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 800307e:	893b      	ldrh	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	813b      	strh	r3, [r7, #8]
 8003084:	893b      	ldrh	r3, [r7, #8]
 8003086:	f243 62af 	movw	r2, #13999	; 0x36af
 800308a:	4293      	cmp	r3, r2
 800308c:	d9f6      	bls.n	800307c <moveMotorClampToLocBlock+0x30>
		for(uint16_t j = 0; j < 1000; j++){
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	3301      	adds	r3, #1
 8003092:	817b      	strh	r3, [r7, #10]
 8003094:	897b      	ldrh	r3, [r7, #10]
 8003096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309a:	d3ec      	bcc.n	8003076 <moveMotorClampToLocBlock+0x2a>
			}
		}
	}
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <moveMotorSpindleToLocNoneBlock>:

uint8_t moveMotorSpindleToLocNoneBlock(long posM2) {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

	int M2Dir;
	uint8_t isSuccess = FALSE; // 0 for false, 1 for true
 80030ac:	2300      	movs	r3, #0
 80030ae:	72fb      	strb	r3, [r7, #11]

	if (posM2 == M2POS1VAL && Spindle_M3_EncA_Pulses > M2POS1VAL) { //Going back home
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <moveMotorSpindleToLocNoneBlock+0x20>
 80030b6:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	dd02      	ble.n	80030c4 <moveMotorSpindleToLocNoneBlock+0x20>
		M2Dir = CCW;
 80030be:	2302      	movs	r3, #2
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e028      	b.n	8003116 <moveMotorSpindleToLocNoneBlock+0x72>
	}
	else if (abs(Spindle_M3_EncA_Pulses - posM2) <= M2ACCEPTEDERROR || posM2 == NONE) {
 80030c4:	4b38      	ldr	r3, [pc, #224]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80030d0:	db05      	blt.n	80030de <moveMotorSpindleToLocNoneBlock+0x3a>
 80030d2:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	dd03      	ble.n	80030e6 <moveMotorSpindleToLocNoneBlock+0x42>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d10d      	bne.n	8003102 <moveMotorSpindleToLocNoneBlock+0x5e>
		M2Dir = OFF;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
		posM2 = Spindle_M3_EncA_Pulses;
 80030ea:	4b2f      	ldr	r3, [pc, #188]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	607b      	str	r3, [r7, #4]
		moveMotor(CAPMOTOR, OFF, INT_INF);
 80030f0:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <moveMotorSpindleToLocNoneBlock+0x108>)
 80030f2:	2100      	movs	r1, #0
 80030f4:	2002      	movs	r0, #2
 80030f6:	f000 f8ed 	bl	80032d4 <moveMotor>
		isSuccess = TRUE;
 80030fa:	2301      	movs	r3, #1
 80030fc:	72fb      	strb	r3, [r7, #11]
		return isSuccess;
 80030fe:	7afb      	ldrb	r3, [r7, #11]
 8003100:	e04d      	b.n	800319e <moveMotorSpindleToLocNoneBlock+0xfa>
	}
	else if (Spindle_M3_EncA_Pulses < posM2) {
 8003102:	4b29      	ldr	r3, [pc, #164]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	429a      	cmp	r2, r3
 800310a:	dd02      	ble.n	8003112 <moveMotorSpindleToLocNoneBlock+0x6e>
		M2Dir = CW; //before CW changed while testing
 800310c:	2301      	movs	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e001      	b.n	8003116 <moveMotorSpindleToLocNoneBlock+0x72>
	}
	else {
		M2Dir = CCW; //before CCw
 8003112:	2302      	movs	r3, #2
 8003114:	60fb      	str	r3, [r7, #12]
	}

	if (Spindle_M3_EncA_Pulses != posM2) {
 8003116:	4b24      	ldr	r3, [pc, #144]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	d036      	beq.n	800318e <moveMotorSpindleToLocNoneBlock+0xea>

		// Motor 2 Movement Logic
		if (M2Dir == CW) {
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d113      	bne.n	800314e <moveMotorSpindleToLocNoneBlock+0xaa>
			if (Spindle_M3_EncA_Pulses < posM2) {
 8003126:	4b20      	ldr	r3, [pc, #128]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	dd05      	ble.n	800313c <moveMotorSpindleToLocNoneBlock+0x98>
				moveMotor(CAPMOTOR, CW, posM2);
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f000 f8cd 	bl	80032d4 <moveMotor>
 800313a:	e02f      	b.n	800319c <moveMotorSpindleToLocNoneBlock+0xf8>
			} else {
				moveMotor(CAPMOTOR, OFF, INT_INF);
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <moveMotorSpindleToLocNoneBlock+0x108>)
 800313e:	2100      	movs	r1, #0
 8003140:	2002      	movs	r0, #2
 8003142:	f000 f8c7 	bl	80032d4 <moveMotor>
				posM2 = Spindle_M3_EncA_Pulses;
 8003146:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	e026      	b.n	800319c <moveMotorSpindleToLocNoneBlock+0xf8>
			}
		} else if (M2Dir == CCW) {
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d113      	bne.n	800317c <moveMotorSpindleToLocNoneBlock+0xd8>
			if (Spindle_M3_EncA_Pulses > posM2) {
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	429a      	cmp	r2, r3
 800315c:	da05      	bge.n	800316a <moveMotorSpindleToLocNoneBlock+0xc6>
				moveMotor(CAPMOTOR, CCW, posM2);
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	2102      	movs	r1, #2
 8003162:	2002      	movs	r0, #2
 8003164:	f000 f8b6 	bl	80032d4 <moveMotor>
 8003168:	e018      	b.n	800319c <moveMotorSpindleToLocNoneBlock+0xf8>
			} else {
				moveMotor(CAPMOTOR, OFF, INT_INF);
 800316a:	4a10      	ldr	r2, [pc, #64]	; (80031ac <moveMotorSpindleToLocNoneBlock+0x108>)
 800316c:	2100      	movs	r1, #0
 800316e:	2002      	movs	r0, #2
 8003170:	f000 f8b0 	bl	80032d4 <moveMotor>
				posM2 = Spindle_M3_EncA_Pulses;
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	e00f      	b.n	800319c <moveMotorSpindleToLocNoneBlock+0xf8>
			}
		} else {
			moveMotor(CAPMOTOR, OFF, INT_INF);
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <moveMotorSpindleToLocNoneBlock+0x108>)
 800317e:	2100      	movs	r1, #0
 8003180:	2002      	movs	r0, #2
 8003182:	f000 f8a7 	bl	80032d4 <moveMotor>
			posM2 = Spindle_M3_EncA_Pulses;
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <moveMotorSpindleToLocNoneBlock+0x104>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	e006      	b.n	800319c <moveMotorSpindleToLocNoneBlock+0xf8>
		}
	} else {
		moveMotor(CAPMOTOR, OFF, INT_INF);
 800318e:	4a07      	ldr	r2, [pc, #28]	; (80031ac <moveMotorSpindleToLocNoneBlock+0x108>)
 8003190:	2100      	movs	r1, #0
 8003192:	2002      	movs	r0, #2
 8003194:	f000 f89e 	bl	80032d4 <moveMotor>
		isSuccess = TRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	72fb      	strb	r3, [r7, #11]
	}
	return isSuccess;
 800319c:	7afb      	ldrb	r3, [r7, #11]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000104 	.word	0x20000104
 80031ac:	0098967f 	.word	0x0098967f

080031b0 <moveMotorClampToLocNoneBlock>:

uint8_t moveMotorClampToLocNoneBlock(long posM1) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	int M1Dir;

	uint8_t isSuccess = FALSE; // 0 for false, 1 for true
 80031b8:	2300      	movs	r3, #0
 80031ba:	72fb      	strb	r3, [r7, #11]

	if (posM1 == M1POS1VAL && Clamp_M2_EncA_Pulses > M1POS1VAL) { //Going back home
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <moveMotorClampToLocNoneBlock+0x20>
 80031c2:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dd02      	ble.n	80031d0 <moveMotorClampToLocNoneBlock+0x20>
		M1Dir = CW;
 80031ca:	2301      	movs	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e02b      	b.n	8003228 <moveMotorClampToLocNoneBlock+0x78>
	} else if (abs(Clamp_M2_EncA_Pulses - posM1) <= M1ACCEPTEDERROR || posM1 == NONE) {
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80031dc:	db05      	blt.n	80031ea <moveMotorClampToLocNoneBlock+0x3a>
 80031de:	4b39      	ldr	r3, [pc, #228]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	; 0x64
 80031e8:	dd03      	ble.n	80031f2 <moveMotorClampToLocNoneBlock+0x42>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d110      	bne.n	8003214 <moveMotorClampToLocNoneBlock+0x64>
		M1Dir = OFF;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
		posM1 = Clamp_M2_EncA_Pulses;
 80031f6:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	607b      	str	r3, [r7, #4]
		moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80031fc:	4a32      	ldr	r2, [pc, #200]	; (80032c8 <moveMotorClampToLocNoneBlock+0x118>)
 80031fe:	2100      	movs	r1, #0
 8003200:	2001      	movs	r0, #1
 8003202:	f000 f867 	bl	80032d4 <moveMotor>
		isSuccess = TRUE;
 8003206:	2301      	movs	r3, #1
 8003208:	72fb      	strb	r3, [r7, #11]
		SerialPrintln("SUCCESS CLAMP");
 800320a:	4830      	ldr	r0, [pc, #192]	; (80032cc <moveMotorClampToLocNoneBlock+0x11c>)
 800320c:	f002 f9b2 	bl	8005574 <SerialPrintln>
		return isSuccess;
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	e052      	b.n	80032ba <moveMotorClampToLocNoneBlock+0x10a>
	} else if (Clamp_M2_EncA_Pulses < posM1) {
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	429a      	cmp	r2, r3
 800321c:	dd02      	ble.n	8003224 <moveMotorClampToLocNoneBlock+0x74>
		M1Dir = CCW;
 800321e:	2302      	movs	r3, #2
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e001      	b.n	8003228 <moveMotorClampToLocNoneBlock+0x78>
	} else {
		M1Dir = CW;
 8003224:	2301      	movs	r3, #1
 8003226:	60fb      	str	r3, [r7, #12]
	}

	if (Clamp_M2_EncA_Pulses != posM1) {
 8003228:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	429a      	cmp	r2, r3
 8003230:	d038      	beq.n	80032a4 <moveMotorClampToLocNoneBlock+0xf4>

		// Motor 1 Movement Logic
		if (M1Dir == CCW) {
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d113      	bne.n	8003260 <moveMotorClampToLocNoneBlock+0xb0>
			if (Clamp_M2_EncA_Pulses < posM1) {
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	429a      	cmp	r2, r3
 8003240:	dd05      	ble.n	800324e <moveMotorClampToLocNoneBlock+0x9e>
				moveMotor(CLAMPMOTOR, CCW, posM1);
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	2102      	movs	r1, #2
 8003246:	2001      	movs	r0, #1
 8003248:	f000 f844 	bl	80032d4 <moveMotor>
 800324c:	e027      	b.n	800329e <moveMotorClampToLocNoneBlock+0xee>
			} else {
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 800324e:	4a1e      	ldr	r2, [pc, #120]	; (80032c8 <moveMotorClampToLocNoneBlock+0x118>)
 8003250:	2100      	movs	r1, #0
 8003252:	2001      	movs	r0, #1
 8003254:	f000 f83e 	bl	80032d4 <moveMotor>
				posM1 = Clamp_M2_EncA_Pulses;
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	e01e      	b.n	800329e <moveMotorClampToLocNoneBlock+0xee>
			}
		} else if (M1Dir == CW) {
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d113      	bne.n	800328e <moveMotorClampToLocNoneBlock+0xde>
			if (Clamp_M2_EncA_Pulses > posM1) {
 8003266:	4b17      	ldr	r3, [pc, #92]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	da05      	bge.n	800327c <moveMotorClampToLocNoneBlock+0xcc>
				moveMotor(CLAMPMOTOR, CW, posM1);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	2101      	movs	r1, #1
 8003274:	2001      	movs	r0, #1
 8003276:	f000 f82d 	bl	80032d4 <moveMotor>
 800327a:	e010      	b.n	800329e <moveMotorClampToLocNoneBlock+0xee>
			} else {
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 800327c:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <moveMotorClampToLocNoneBlock+0x118>)
 800327e:	2100      	movs	r1, #0
 8003280:	2001      	movs	r0, #1
 8003282:	f000 f827 	bl	80032d4 <moveMotor>
				posM1 = Clamp_M2_EncA_Pulses;
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	e007      	b.n	800329e <moveMotorClampToLocNoneBlock+0xee>
			}
		} else {
			moveMotor(CLAMPMOTOR, OFF, INT_INF);
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <moveMotorClampToLocNoneBlock+0x118>)
 8003290:	2100      	movs	r1, #0
 8003292:	2001      	movs	r0, #1
 8003294:	f000 f81e 	bl	80032d4 <moveMotor>
			posM1 = Clamp_M2_EncA_Pulses;
 8003298:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <moveMotorClampToLocNoneBlock+0x114>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	607b      	str	r3, [r7, #4]
		}

		isSuccess = FALSE;
 800329e:	2300      	movs	r3, #0
 80032a0:	72fb      	strb	r3, [r7, #11]
 80032a2:	e009      	b.n	80032b8 <moveMotorClampToLocNoneBlock+0x108>
	} else {
		SerialPrintln("POSITION REACHED");
 80032a4:	480a      	ldr	r0, [pc, #40]	; (80032d0 <moveMotorClampToLocNoneBlock+0x120>)
 80032a6:	f002 f965 	bl	8005574 <SerialPrintln>
		moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80032aa:	4a07      	ldr	r2, [pc, #28]	; (80032c8 <moveMotorClampToLocNoneBlock+0x118>)
 80032ac:	2100      	movs	r1, #0
 80032ae:	2001      	movs	r0, #1
 80032b0:	f000 f810 	bl	80032d4 <moveMotor>
		isSuccess = TRUE;
 80032b4:	2301      	movs	r3, #1
 80032b6:	72fb      	strb	r3, [r7, #11]
	}
	return isSuccess;
 80032b8:	7afb      	ldrb	r3, [r7, #11]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200000fc 	.word	0x200000fc
 80032c8:	0098967f 	.word	0x0098967f
 80032cc:	08019f5c 	.word	0x08019f5c
 80032d0:	08019f6c 	.word	0x08019f6c

080032d4 <moveMotor>:

void moveMotor(int motorNum, int Dir, int targetPoint) {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
	if (motorNum == CLAMPMOTOR) {
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d147      	bne.n	8003376 <moveMotor+0xa2>
		if (Dir == CW) {
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <moveMotor+0x28>
			ClampMotorState = CW;
 80032ec:	4b60      	ldr	r3, [pc, #384]	; (8003470 <moveMotor+0x19c>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
			digitalWrite(Clamp_M2_Dir_Output, LOW);
 80032f2:	2100      	movs	r1, #0
 80032f4:	2005      	movs	r0, #5
 80032f6:	f7ff fe57 	bl	8002fa8 <digitalWrite>
 80032fa:	e00f      	b.n	800331c <moveMotor+0x48>
		} else if (Dir == CCW) {
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d107      	bne.n	8003312 <moveMotor+0x3e>
			ClampMotorState = CCW;
 8003302:	4b5b      	ldr	r3, [pc, #364]	; (8003470 <moveMotor+0x19c>)
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
			digitalWrite(Clamp_M2_Dir_Output, HIGH);
 8003308:	2101      	movs	r1, #1
 800330a:	2005      	movs	r0, #5
 800330c:	f7ff fe4c 	bl	8002fa8 <digitalWrite>
 8003310:	e004      	b.n	800331c <moveMotor+0x48>
		} else {
			pwm(Clamp_M2_PWM, OFF);
 8003312:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8003474 <moveMotor+0x1a0>
 8003316:	2001      	movs	r0, #1
 8003318:	f004 f824 	bl	8007364 <pwm>
		}

		if (Dir != OFF) {
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80a2 	beq.w	8003468 <moveMotor+0x194>
			checkFaultsMotors(CLAMPMOTOR);
 8003324:	2001      	movs	r0, #1
 8003326:	f000 f8bd 	bl	80034a4 <checkFaultsMotors>
			if (abs(Clamp_M2_EncA_Pulses - targetPoint) < MOVEM1SLOWPULSES) { //If we are close to our target, move slowly
 800332a:	4b53      	ldr	r3, [pc, #332]	; (8003478 <moveMotor+0x1a4>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8003336:	dd12      	ble.n	800335e <moveMotor+0x8a>
 8003338:	4b4f      	ldr	r3, [pc, #316]	; (8003478 <moveMotor+0x1a4>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003344:	da0b      	bge.n	800335e <moveMotor+0x8a>
				pwm(Clamp_M2_PWM, PWM_SLOW);
 8003346:	4b4d      	ldr	r3, [pc, #308]	; (800347c <moveMotor+0x1a8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	2001      	movs	r0, #1
 8003358:	f004 f804 	bl	8007364 <pwm>
 800335c:	e084      	b.n	8003468 <moveMotor+0x194>
			} else { //Else go with high speed
				pwm(Clamp_M2_PWM, PWM_FAST);
 800335e:	4b48      	ldr	r3, [pc, #288]	; (8003480 <moveMotor+0x1ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	ee07 3a90 	vmov	s15, r3
 8003366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800336a:	eeb0 0a67 	vmov.f32	s0, s15
 800336e:	2001      	movs	r0, #1
 8003370:	f003 fff8 	bl	8007364 <pwm>
			FreshValveStatus = 0;

		}
	}

}
 8003374:	e078      	b.n	8003468 <moveMotor+0x194>
	} else if (motorNum == CAPMOTOR) {
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b02      	cmp	r3, #2
 800337a:	d153      	bne.n	8003424 <moveMotor+0x150>
		if (Dir == CW) {
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <moveMotor+0xbe>
			SpindleMotorState = CW;
 8003382:	4b40      	ldr	r3, [pc, #256]	; (8003484 <moveMotor+0x1b0>)
 8003384:	2201      	movs	r2, #1
 8003386:	601a      	str	r2, [r3, #0]
			digitalWrite(Spindle_M3_Dir_Output, LOW);
 8003388:	2100      	movs	r1, #0
 800338a:	2004      	movs	r0, #4
 800338c:	f7ff fe0c 	bl	8002fa8 <digitalWrite>
 8003390:	e00f      	b.n	80033b2 <moveMotor+0xde>
		} else if (Dir == CCW) {
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <moveMotor+0xd4>
			SpindleMotorState = CCW;
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <moveMotor+0x1b0>)
 800339a:	2202      	movs	r2, #2
 800339c:	601a      	str	r2, [r3, #0]
			digitalWrite(Spindle_M3_Dir_Output, HIGH);
 800339e:	2101      	movs	r1, #1
 80033a0:	2004      	movs	r0, #4
 80033a2:	f7ff fe01 	bl	8002fa8 <digitalWrite>
 80033a6:	e004      	b.n	80033b2 <moveMotor+0xde>
			pwm(Spindle_M3_PWM, OFF);
 80033a8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003474 <moveMotor+0x1a0>
 80033ac:	2002      	movs	r0, #2
 80033ae:	f003 ffd9 	bl	8007364 <pwm>
		if (Dir != OFF) {
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d057      	beq.n	8003468 <moveMotor+0x194>
			if (abs(Spindle_M3_EncA_Pulses - targetPoint) < MOVEM2SLOWPULSES) { //If we are close to our target, move slowly
 80033b8:	4b33      	ldr	r3, [pc, #204]	; (8003488 <moveMotor+0x1b4>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80033c4:	dd12      	ble.n	80033ec <moveMotor+0x118>
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <moveMotor+0x1b4>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033d2:	da0b      	bge.n	80033ec <moveMotor+0x118>
				pwm(Spindle_M3_PWM, PWM_SLOW);
 80033d4:	4b29      	ldr	r3, [pc, #164]	; (800347c <moveMotor+0x1a8>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	ee07 3a90 	vmov	s15, r3
 80033dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033e0:	eeb0 0a67 	vmov.f32	s0, s15
 80033e4:	2002      	movs	r0, #2
 80033e6:	f003 ffbd 	bl	8007364 <pwm>
 80033ea:	e03d      	b.n	8003468 <moveMotor+0x194>
			} else if(CleaningFlag == TRUE){ //Else go with high speed
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <moveMotor+0x1b8>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d10b      	bne.n	800340c <moveMotor+0x138>
				pwm(Spindle_M3_PWM, PWM_CLEANING);
 80033f4:	4b26      	ldr	r3, [pc, #152]	; (8003490 <moveMotor+0x1bc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	ee07 3a90 	vmov	s15, r3
 80033fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003400:	eeb0 0a67 	vmov.f32	s0, s15
 8003404:	2002      	movs	r0, #2
 8003406:	f003 ffad 	bl	8007364 <pwm>
}
 800340a:	e02d      	b.n	8003468 <moveMotor+0x194>
				pwm(Spindle_M3_PWM, PWM_FAST);
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <moveMotor+0x1ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	eeb0 0a67 	vmov.f32	s0, s15
 800341c:	2002      	movs	r0, #2
 800341e:	f003 ffa1 	bl	8007364 <pwm>
}
 8003422:	e021      	b.n	8003468 <moveMotor+0x194>
	} else if (motorNum == VALVEMOTOR) {
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d11e      	bne.n	8003468 <moveMotor+0x194>
		if (Dir == ON) {
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d10d      	bne.n	800344c <moveMotor+0x178>
			digitalWrite(Relay_Output, HIGH);
 8003430:	2101      	movs	r1, #1
 8003432:	2003      	movs	r0, #3
 8003434:	f7ff fdb8 	bl	8002fa8 <digitalWrite>
			strcpy(ValveStatus, "Open");
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <moveMotor+0x1c0>)
 800343a:	4a17      	ldr	r2, [pc, #92]	; (8003498 <moveMotor+0x1c4>)
 800343c:	6810      	ldr	r0, [r2, #0]
 800343e:	6018      	str	r0, [r3, #0]
 8003440:	7912      	ldrb	r2, [r2, #4]
 8003442:	711a      	strb	r2, [r3, #4]
			FreshValveStatus = 1;
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <moveMotor+0x1c8>)
 8003446:	2201      	movs	r2, #1
 8003448:	701a      	strb	r2, [r3, #0]
}
 800344a:	e00d      	b.n	8003468 <moveMotor+0x194>
			digitalWrite(Relay_Output, LOW);
 800344c:	2100      	movs	r1, #0
 800344e:	2003      	movs	r0, #3
 8003450:	f7ff fdaa 	bl	8002fa8 <digitalWrite>
			strcpy(ValveStatus, "Close");
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <moveMotor+0x1c0>)
 8003456:	4a12      	ldr	r2, [pc, #72]	; (80034a0 <moveMotor+0x1cc>)
 8003458:	6810      	ldr	r0, [r2, #0]
 800345a:	6018      	str	r0, [r3, #0]
 800345c:	8892      	ldrh	r2, [r2, #4]
 800345e:	809a      	strh	r2, [r3, #4]
			FreshValveStatus = 0;
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <moveMotor+0x1c8>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
}
 8003466:	e7ff      	b.n	8003468 <moveMotor+0x194>
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	200003c4 	.word	0x200003c4
 8003474:	00000000 	.word	0x00000000
 8003478:	200000fc 	.word	0x200000fc
 800347c:	20000140 	.word	0x20000140
 8003480:	2000013c 	.word	0x2000013c
 8003484:	200003c8 	.word	0x200003c8
 8003488:	20000104 	.word	0x20000104
 800348c:	20000392 	.word	0x20000392
 8003490:	20000144 	.word	0x20000144
 8003494:	20000388 	.word	0x20000388
 8003498:	08019f80 	.word	0x08019f80
 800349c:	20000396 	.word	0x20000396
 80034a0:	08019f88 	.word	0x08019f88

080034a4 <checkFaultsMotors>:


void checkFaultsMotors(uint8_t x) {
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]

	GetADC();
 80034ae:	f000 f851 	bl	8003554 <GetADC>
	// Used to check pause status
	ReadKeypadVar(CONTROL);
 80034b2:	2002      	movs	r0, #2
 80034b4:	f000 fe24 	bl	8004100 <ReadKeypadVar>
	if (isPausedOperation == TRUE) {
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <checkFaultsMotors+0x90>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d135      	bne.n	800352c <checkFaultsMotors+0x88>
		printLCD(3, "PAUSE", NO_SYMBOL);
 80034c0:	2200      	movs	r2, #0
 80034c2:	491d      	ldr	r1, [pc, #116]	; (8003538 <checkFaultsMotors+0x94>)
 80034c4:	2003      	movs	r0, #3
 80034c6:	f001 fc81 	bl	8004dcc <printLCD>
		int isvalveopenOld = isValveOpen; // Store last valve state
 80034ca:	4b1c      	ldr	r3, [pc, #112]	; (800353c <checkFaultsMotors+0x98>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

		while (isPausedOperation == TRUE) {
 80034d0:	e014      	b.n	80034fc <checkFaultsMotors+0x58>
			SerialPrintln("STUCK IN PAUSE");
 80034d2:	481b      	ldr	r0, [pc, #108]	; (8003540 <checkFaultsMotors+0x9c>)
 80034d4:	f002 f84e 	bl	8005574 <SerialPrintln>
			ReadKeypadVar(CONTROL);
 80034d8:	2002      	movs	r0, #2
 80034da:	f000 fe11 	bl	8004100 <ReadKeypadVar>
			moveMotor(CAPMOTOR, OFF, INT_INF);
 80034de:	4a19      	ldr	r2, [pc, #100]	; (8003544 <checkFaultsMotors+0xa0>)
 80034e0:	2100      	movs	r1, #0
 80034e2:	2002      	movs	r0, #2
 80034e4:	f7ff fef6 	bl	80032d4 <moveMotor>
			moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80034e8:	4a16      	ldr	r2, [pc, #88]	; (8003544 <checkFaultsMotors+0xa0>)
 80034ea:	2100      	movs	r1, #0
 80034ec:	2001      	movs	r0, #1
 80034ee:	f7ff fef1 	bl	80032d4 <moveMotor>
			moveMotor(VALVEMOTOR, OFF, INT_INF);
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <checkFaultsMotors+0xa0>)
 80034f4:	2100      	movs	r1, #0
 80034f6:	2003      	movs	r0, #3
 80034f8:	f7ff feec 	bl	80032d4 <moveMotor>
		while (isPausedOperation == TRUE) {
 80034fc:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <checkFaultsMotors+0x90>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d0e6      	beq.n	80034d2 <checkFaultsMotors+0x2e>
		}

		// Display relevant information on LCD based on the operation mode
		if (isDemoCleaning == TRUE) {
 8003504:	4b10      	ldr	r3, [pc, #64]	; (8003548 <checkFaultsMotors+0xa4>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d105      	bne.n	8003518 <checkFaultsMotors+0x74>
			printLCD(3, "CLEANING", NO_SYMBOL);
 800350c:	2200      	movs	r2, #0
 800350e:	490f      	ldr	r1, [pc, #60]	; (800354c <checkFaultsMotors+0xa8>)
 8003510:	2003      	movs	r0, #3
 8003512:	f001 fc5b 	bl	8004dcc <printLCD>
 8003516:	e004      	b.n	8003522 <checkFaultsMotors+0x7e>
		} else {
			printLCD(3, " ", NO_SYMBOL);
 8003518:	2200      	movs	r2, #0
 800351a:	490d      	ldr	r1, [pc, #52]	; (8003550 <checkFaultsMotors+0xac>)
 800351c:	2003      	movs	r0, #3
 800351e:	f001 fc55 	bl	8004dcc <printLCD>
		}

		// Resume operation after pause
		moveMotor(VALVEMOTOR, isvalveopenOld, INT_INF); // Revert valve to its previous state
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <checkFaultsMotors+0xa0>)
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	2003      	movs	r0, #3
 8003528:	f7ff fed4 	bl	80032d4 <moveMotor>
	}
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	200003f5 	.word	0x200003f5
 8003538:	08019f90 	.word	0x08019f90
 800353c:	20000380 	.word	0x20000380
 8003540:	08019f98 	.word	0x08019f98
 8003544:	0098967f 	.word	0x0098967f
 8003548:	200003fb 	.word	0x200003fb
 800354c:	08019fa8 	.word	0x08019fa8
 8003550:	08019fb4 	.word	0x08019fb4

08003554 <GetADC>:

void GetADC()
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0

}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003568:	f3bf 8f4f 	dsb	sy
}
 800356c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <__NVIC_SystemReset+0x24>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003576:	4904      	ldr	r1, [pc, #16]	; (8003588 <__NVIC_SystemReset+0x24>)
 8003578:	4b04      	ldr	r3, [pc, #16]	; (800358c <__NVIC_SystemReset+0x28>)
 800357a:	4313      	orrs	r3, r2
 800357c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800357e:	f3bf 8f4f 	dsb	sy
}
 8003582:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <__NVIC_SystemReset+0x20>
 8003588:	e000ed00 	.word	0xe000ed00
 800358c:	05fa0004 	.word	0x05fa0004

08003590 <HAL_GPIO_EXTI_Callback>:
 * @brief  GPIO Interrupt Check Callback Function when Triggered for using interrupts.
 * @param  GPIO_Pin :Pin number for the interrupt
 * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) /* @fn Callback Function*/
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	80fb      	strh	r3, [r7, #6]
// Check which pin triggered the interrupt and Callbacks Power Button Interrupts for turning on and turning off the machine
	// Check button state
	if (GPIO_Pin == Button_Power_Interrupt_PullUp_Pin) {
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	2b10      	cmp	r3, #16
 800359e:	d11b      	bne.n	80035d8 <HAL_GPIO_EXTI_Callback+0x48>
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear interrupt flag
 80035a0:	4a99      	ldr	r2, [pc, #612]	; (8003808 <HAL_GPIO_EXTI_Callback+0x278>)
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	6153      	str	r3, [r2, #20]

		if (HAL_GPIO_ReadPin(Button_Power_Interrupt_PullUp_GPIO_Port, Button_Power_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) {
 80035a6:	2110      	movs	r1, #16
 80035a8:	4898      	ldr	r0, [pc, #608]	; (800380c <HAL_GPIO_EXTI_Callback+0x27c>)
 80035aa:	f006 fd95 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10b      	bne.n	80035cc <HAL_GPIO_EXTI_Callback+0x3c>
			// Button pressed: Record press time and reset action flag
			PowerButtonPressTime = HAL_GetTick();
 80035b4:	f005 f948 	bl	8008848 <HAL_GetTick>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4a95      	ldr	r2, [pc, #596]	; (8003810 <HAL_GPIO_EXTI_Callback+0x280>)
 80035bc:	6013      	str	r3, [r2, #0]
			actionTaken = 0;
 80035be:	4b95      	ldr	r3, [pc, #596]	; (8003814 <HAL_GPIO_EXTI_Callback+0x284>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
			SerialPrintln("Power Button Pressed");
 80035c4:	4894      	ldr	r0, [pc, #592]	; (8003818 <HAL_GPIO_EXTI_Callback+0x288>)
 80035c6:	f001 ffd5 	bl	8005574 <SerialPrintln>
 80035ca:	e005      	b.n	80035d8 <HAL_GPIO_EXTI_Callback+0x48>
		} else {
			// Button released: Reset press time
			PowerButtonPressTime = 0;
 80035cc:	4b90      	ldr	r3, [pc, #576]	; (8003810 <HAL_GPIO_EXTI_Callback+0x280>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
			SerialPrintln("Power Button Released");
 80035d2:	4892      	ldr	r0, [pc, #584]	; (800381c <HAL_GPIO_EXTI_Callback+0x28c>)
 80035d4:	f001 ffce 	bl	8005574 <SerialPrintln>
	                }
	            }
	        }
	   }
*/
	if (GPIO_Pin == Button_Clean_Interrupt_PullUp_Pin) {
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d17c      	bne.n	80036d8 <HAL_GPIO_EXTI_Callback+0x148>
		        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the interrupt flag
 80035de:	4a8a      	ldr	r2, [pc, #552]	; (8003808 <HAL_GPIO_EXTI_Callback+0x278>)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	6153      	str	r3, [r2, #20]
		        SerialPrintln("Cleaning Started at start\n");
 80035e4:	488e      	ldr	r0, [pc, #568]	; (8003820 <HAL_GPIO_EXTI_Callback+0x290>)
 80035e6:	f001 ffc5 	bl	8005574 <SerialPrintln>
		        static uint32_t buttonPressStartTime = 0; // Track when the button was pressed
		        static uint8_t buttonState = 0;          // 0: Released, 1: Pressed
		        static uint8_t buttonPressCount = 0;     // Tracks button presses during cleaning

		        if (HAL_GPIO_ReadPin(Button_Clean_Interrupt_PullUp_GPIO_Port, Button_Clean_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) {
 80035ea:	2104      	movs	r1, #4
 80035ec:	4887      	ldr	r0, [pc, #540]	; (800380c <HAL_GPIO_EXTI_Callback+0x27c>)
 80035ee:	f006 fd73 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d110      	bne.n	800361a <HAL_GPIO_EXTI_Callback+0x8a>
		            // Button pressed
		            if (buttonState == 0) { // Detect initial press
 80035f8:	4b8a      	ldr	r3, [pc, #552]	; (8003824 <HAL_GPIO_EXTI_Callback+0x294>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f040 81d1 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
		                buttonPressStartTime = HAL_GetTick(); // Record press start time
 8003602:	f005 f921 	bl	8008848 <HAL_GetTick>
 8003606:	4603      	mov	r3, r0
 8003608:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_GPIO_EXTI_Callback+0x298>)
 800360a:	6013      	str	r3, [r2, #0]
		                buttonState = 1;
 800360c:	4b85      	ldr	r3, [pc, #532]	; (8003824 <HAL_GPIO_EXTI_Callback+0x294>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
		                SerialPrintln("Button State Change at start\n");
 8003612:	4886      	ldr	r0, [pc, #536]	; (800382c <HAL_GPIO_EXTI_Callback+0x29c>)
 8003614:	f001 ffae 	bl	8005574 <SerialPrintln>
					ServoDC_M1_EncB_Pulses--;
				}
			}
		}

}
 8003618:	e1c4      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
		            if (buttonState == 1) { // Detect release
 800361a:	4b82      	ldr	r3, [pc, #520]	; (8003824 <HAL_GPIO_EXTI_Callback+0x294>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	f040 81c0 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
		                uint32_t pressDuration = HAL_GetTick() - buttonPressStartTime; // Calculate press duration
 8003624:	f005 f910 	bl	8008848 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	4b7f      	ldr	r3, [pc, #508]	; (8003828 <HAL_GPIO_EXTI_Callback+0x298>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	60fb      	str	r3, [r7, #12]
		                buttonState = 0;
 8003632:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_GPIO_EXTI_Callback+0x294>)
 8003634:	2200      	movs	r2, #0
 8003636:	701a      	strb	r2, [r3, #0]
		                if (CleaningOperationFlag == FALSE && pressDuration >= BUTTON_HOLD_TIME_ON ) {
 8003638:	4b7d      	ldr	r3, [pc, #500]	; (8003830 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d113      	bne.n	800366a <HAL_GPIO_EXTI_Callback+0xda>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003648:	d30f      	bcc.n	800366a <HAL_GPIO_EXTI_Callback+0xda>
		                	CleaningOperationFlag = TRUE; // Start cleaning
 800364a:	4b79      	ldr	r3, [pc, #484]	; (8003830 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
		                	cleanLongPressed = TRUE;
 8003650:	4b78      	ldr	r3, [pc, #480]	; (8003834 <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
							UserCleaningCycleNumber = 1;  // Initialize cleaning cycle count
 8003656:	4b78      	ldr	r3, [pc, #480]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003658:	2201      	movs	r2, #1
 800365a:	701a      	strb	r2, [r3, #0]
							buttonPressCount = 0;         // Reset button press count
 800365c:	4b77      	ldr	r3, [pc, #476]	; (800383c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
							SerialPrintln("Cleaning Started\n");
 8003662:	4877      	ldr	r0, [pc, #476]	; (8003840 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003664:	f001 ff86 	bl	8005574 <SerialPrintln>
}
 8003668:	e19c      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
		                    if (CleaningOperationFlag == TRUE && pressDuration < 500) { // Short press
 800366a:	4b71      	ldr	r3, [pc, #452]	; (8003830 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 8197 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800367c:	f080 8192 	bcs.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
		                        buttonPressCount++;
 8003680:	4b6e      	ldr	r3, [pc, #440]	; (800383c <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800368a:	701a      	strb	r2, [r3, #0]
							   if (buttonPressCount > 3) {
 800368c:	4b6b      	ldr	r3, [pc, #428]	; (800383c <HAL_GPIO_EXTI_Callback+0x2ac>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d910      	bls.n	80036b6 <HAL_GPIO_EXTI_Callback+0x126>
								   if (UserCleaningCycleNumber > 1) {
 8003694:	4b68      	ldr	r3, [pc, #416]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d907      	bls.n	80036ae <HAL_GPIO_EXTI_Callback+0x11e>
									    if(UserCleaningCycleNumber > 3)
 800369e:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d902      	bls.n	80036ae <HAL_GPIO_EXTI_Callback+0x11e>
									    	UserCleaningCycleNumber = 1;
 80036a8:	4b63      	ldr	r3, [pc, #396]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
								   buttonPressCount = 0; // Reset press count
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	701a      	strb	r2, [r3, #0]
}
 80036b4:	e176      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
								   if (UserCleaningCycleNumber < MAXCLEANCYCLESALLOWED) {
 80036b6:	4b60      	ldr	r3, [pc, #384]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	f200 8171 	bhi.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
									   UserCleaningCycleNumber++;
 80036c2:	4b5d      	ldr	r3, [pc, #372]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80036ce:	701a      	strb	r2, [r3, #0]
									   SerialPrintln("Increased Cleaning Cycle\n");
 80036d0:	485c      	ldr	r0, [pc, #368]	; (8003844 <HAL_GPIO_EXTI_Callback+0x2b4>)
 80036d2:	f001 ff4f 	bl	8005574 <SerialPrintln>
}
 80036d6:	e165      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Clamp_M2_Prox_Interrupt_Pin)
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d128      	bne.n	8003730 <HAL_GPIO_EXTI_Callback+0x1a0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036de:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <HAL_GPIO_EXTI_Callback+0x278>)
 80036e0:	88fb      	ldrh	r3, [r7, #6]
 80036e2:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) == 1) {
 80036e4:	2101      	movs	r1, #1
 80036e6:	4858      	ldr	r0, [pc, #352]	; (8003848 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80036e8:	f006 fcf6 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d111      	bne.n	8003716 <HAL_GPIO_EXTI_Callback+0x186>
			Clamp_M2_EncA_Pulses = 0;
 80036f2:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
			Clamp_M2_EncB_Pulses = 0;
 80036f8:	4b55      	ldr	r3, [pc, #340]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
			pwm(Clamp_M2_PWM, 0);
 80036fe:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8003854 <HAL_GPIO_EXTI_Callback+0x2c4>
 8003702:	2001      	movs	r0, #1
 8003704:	f003 fe2e 	bl	8007364 <pwm>
			isClampLimitSwitchReached = TRUE;
 8003708:	4b53      	ldr	r3, [pc, #332]	; (8003858 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800370a:	2201      	movs	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
			SerialPrint("Clamp Interrupt M2 Limit rising\n");
 800370e:	4853      	ldr	r0, [pc, #332]	; (800385c <HAL_GPIO_EXTI_Callback+0x2cc>)
 8003710:	f001 ff1a 	bl	8005548 <SerialPrint>
}
 8003714:	e146      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			Clamp_M2_EncA_Pulses = 1;
 8003716:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
			Clamp_M2_EncB_Pulses = 1;
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800371e:	2201      	movs	r2, #1
 8003720:	601a      	str	r2, [r3, #0]
			isClampLimitSwitchReached = FALSE;
 8003722:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
			SerialPrint("Clamp Interrupt M2 Limit falling\n");
 8003728:	484d      	ldr	r0, [pc, #308]	; (8003860 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800372a:	f001 ff0d 	bl	8005548 <SerialPrint>
}
 800372e:	e139      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Clamp_M2_EncA_Interrupt_Pin)
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b20      	cmp	r3, #32
 8003734:	d121      	bne.n	800377a <HAL_GPIO_EXTI_Callback+0x1ea>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003736:	4a34      	ldr	r2, [pc, #208]	; (8003808 <HAL_GPIO_EXTI_Callback+0x278>)
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	6153      	str	r3, [r2, #20]
		if(!isClampLimitSwitchReached){
 800373c:	4b46      	ldr	r3, [pc, #280]	; (8003858 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 812f 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			if(ClampMotorState == CCW){
 8003746:	4b47      	ldr	r3, [pc, #284]	; (8003864 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d105      	bne.n	800375a <HAL_GPIO_EXTI_Callback+0x1ca>
				Clamp_M2_EncA_Pulses++;
 800374e:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3301      	adds	r3, #1
 8003754:	4a3d      	ldr	r2, [pc, #244]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	e124      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			else if(ClampMotorState == CW && Clamp_M2_EncA_Pulses > 1){
 800375a:	4b42      	ldr	r3, [pc, #264]	; (8003864 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b01      	cmp	r3, #1
 8003760:	f040 8120 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 8003764:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	f340 811b 	ble.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				Clamp_M2_EncA_Pulses--;
 800376e:	4b37      	ldr	r3, [pc, #220]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3b01      	subs	r3, #1
 8003774:	4a35      	ldr	r2, [pc, #212]	; (800384c <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003776:	6013      	str	r3, [r2, #0]
}
 8003778:	e114      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Clamp_M2_EncB__Interrupt_Pin)
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d121      	bne.n	80037c4 <HAL_GPIO_EXTI_Callback+0x234>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003780:	4a21      	ldr	r2, [pc, #132]	; (8003808 <HAL_GPIO_EXTI_Callback+0x278>)
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	6153      	str	r3, [r2, #20]
			if(!isClampLimitSwitchReached){
 8003786:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 810a 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				if(ClampMotorState == CCW){
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d105      	bne.n	80037a4 <HAL_GPIO_EXTI_Callback+0x214>
					Clamp_M2_EncB_Pulses++;
 8003798:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a2c      	ldr	r2, [pc, #176]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80037a0:	6013      	str	r3, [r2, #0]
}
 80037a2:	e0ff      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				else if(ClampMotorState == CW && Clamp_M2_EncB_Pulses > 1){
 80037a4:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_GPIO_EXTI_Callback+0x2d4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 80fb 	bne.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 80037ae:	4b28      	ldr	r3, [pc, #160]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	f340 80f6 	ble.w	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
					Clamp_M2_EncB_Pulses--;
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3b01      	subs	r3, #1
 80037be:	4a24      	ldr	r2, [pc, #144]	; (8003850 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80037c0:	6013      	str	r3, [r2, #0]
}
 80037c2:	e0ef      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Spindle_M3_Prox_Interrupt_Pin)
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ca:	d162      	bne.n	8003892 <HAL_GPIO_EXTI_Callback+0x302>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_GPIO_EXTI_Callback+0x278>)
 80037ce:	88fb      	ldrh	r3, [r7, #6]
 80037d0:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) == 1) {
 80037d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <HAL_GPIO_EXTI_Callback+0x27c>)
 80037d8:	f006 fc7e 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d14a      	bne.n	8003878 <HAL_GPIO_EXTI_Callback+0x2e8>
			Spindle_M3_EncA_Pulses=0;
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
			Spindle_M3_EncB_Pulses=0;
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_GPIO_EXTI_Callback+0x2dc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
			pwm(Spindle_M3_PWM, 0);
 80037ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003854 <HAL_GPIO_EXTI_Callback+0x2c4>
 80037f2:	2002      	movs	r0, #2
 80037f4:	f003 fdb6 	bl	8007364 <pwm>
			isSpindleLimitSwitchReached = TRUE;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
			SerialPrint("Spindle Interrupt M3 Limit rising\n");
 80037fe:	481d      	ldr	r0, [pc, #116]	; (8003874 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8003800:	f001 fea2 	bl	8005548 <SerialPrint>
}
 8003804:	e0ce      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 8003806:	bf00      	nop
 8003808:	40013c00 	.word	0x40013c00
 800380c:	40020000 	.word	0x40020000
 8003810:	200003f0 	.word	0x200003f0
 8003814:	200003c0 	.word	0x200003c0
 8003818:	08019fb8 	.word	0x08019fb8
 800381c:	08019fd0 	.word	0x08019fd0
 8003820:	08019fe8 	.word	0x08019fe8
 8003824:	200003e0 	.word	0x200003e0
 8003828:	200003e4 	.word	0x200003e4
 800382c:	0801a004 	.word	0x0801a004
 8003830:	20000393 	.word	0x20000393
 8003834:	200003f9 	.word	0x200003f9
 8003838:	200000f2 	.word	0x200000f2
 800383c:	200003e8 	.word	0x200003e8
 8003840:	0801a024 	.word	0x0801a024
 8003844:	0801a038 	.word	0x0801a038
 8003848:	40020800 	.word	0x40020800
 800384c:	200000fc 	.word	0x200000fc
 8003850:	20000100 	.word	0x20000100
 8003854:	00000000 	.word	0x00000000
 8003858:	2000010c 	.word	0x2000010c
 800385c:	0801a054 	.word	0x0801a054
 8003860:	0801a078 	.word	0x0801a078
 8003864:	200003c4 	.word	0x200003c4
 8003868:	20000104 	.word	0x20000104
 800386c:	20000108 	.word	0x20000108
 8003870:	2000010d 	.word	0x2000010d
 8003874:	0801a09c 	.word	0x0801a09c
			Spindle_M3_EncA_Pulses = 1;
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_GPIO_EXTI_Callback+0x41c>)
 800387a:	2201      	movs	r2, #1
 800387c:	601a      	str	r2, [r3, #0]
			Spindle_M3_EncB_Pulses = 1;
 800387e:	4b4c      	ldr	r3, [pc, #304]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x420>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
			isSpindleLimitSwitchReached = FALSE;
 8003884:	4b4b      	ldr	r3, [pc, #300]	; (80039b4 <HAL_GPIO_EXTI_Callback+0x424>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
			SerialPrint("Spindle Interrupt M3 Limit falling\n");
 800388a:	484b      	ldr	r0, [pc, #300]	; (80039b8 <HAL_GPIO_EXTI_Callback+0x428>)
 800388c:	f001 fe5c 	bl	8005548 <SerialPrint>
}
 8003890:	e088      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Spindle_M3_EncA_Interrupt_Pin)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b40      	cmp	r3, #64	; 0x40
 8003896:	d11e      	bne.n	80038d6 <HAL_GPIO_EXTI_Callback+0x346>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003898:	4a48      	ldr	r2, [pc, #288]	; (80039bc <HAL_GPIO_EXTI_Callback+0x42c>)
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	6153      	str	r3, [r2, #20]
		if(!isSpindleLimitSwitchReached){
 800389e:	4b45      	ldr	r3, [pc, #276]	; (80039b4 <HAL_GPIO_EXTI_Callback+0x424>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d17e      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			if(SpindleMotorState == CW){
 80038a6:	4b46      	ldr	r3, [pc, #280]	; (80039c0 <HAL_GPIO_EXTI_Callback+0x430>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d105      	bne.n	80038ba <HAL_GPIO_EXTI_Callback+0x32a>
				Spindle_M3_EncA_Pulses++;
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_GPIO_EXTI_Callback+0x41c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	4a3d      	ldr	r2, [pc, #244]	; (80039ac <HAL_GPIO_EXTI_Callback+0x41c>)
 80038b6:	6013      	str	r3, [r2, #0]
}
 80038b8:	e074      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			else if(SpindleMotorState == CCW && Spindle_M3_EncA_Pulses > 1){
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_GPIO_EXTI_Callback+0x430>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d170      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 80038c2:	4b3a      	ldr	r3, [pc, #232]	; (80039ac <HAL_GPIO_EXTI_Callback+0x41c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	dd6c      	ble.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				Spindle_M3_EncA_Pulses--;
 80038ca:	4b38      	ldr	r3, [pc, #224]	; (80039ac <HAL_GPIO_EXTI_Callback+0x41c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	4a36      	ldr	r2, [pc, #216]	; (80039ac <HAL_GPIO_EXTI_Callback+0x41c>)
 80038d2:	6013      	str	r3, [r2, #0]
}
 80038d4:	e066      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == Spindle_M3_EncB_Interrupt_Pin)
 80038d6:	88fb      	ldrh	r3, [r7, #6]
 80038d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038dc:	d11e      	bne.n	800391c <HAL_GPIO_EXTI_Callback+0x38c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038de:	4a37      	ldr	r2, [pc, #220]	; (80039bc <HAL_GPIO_EXTI_Callback+0x42c>)
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	6153      	str	r3, [r2, #20]
		if(!isSpindleLimitSwitchReached){
 80038e4:	4b33      	ldr	r3, [pc, #204]	; (80039b4 <HAL_GPIO_EXTI_Callback+0x424>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d15b      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			if(SpindleMotorState == CW){
 80038ec:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_GPIO_EXTI_Callback+0x430>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_GPIO_EXTI_Callback+0x370>
				Spindle_M3_EncB_Pulses++;
 80038f4:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x420>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a2d      	ldr	r2, [pc, #180]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x420>)
 80038fc:	6013      	str	r3, [r2, #0]
}
 80038fe:	e051      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			else if(SpindleMotorState == CCW && Spindle_M3_EncB_Pulses > 1){
 8003900:	4b2f      	ldr	r3, [pc, #188]	; (80039c0 <HAL_GPIO_EXTI_Callback+0x430>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b02      	cmp	r3, #2
 8003906:	d14d      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 8003908:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x420>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b01      	cmp	r3, #1
 800390e:	dd49      	ble.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				Spindle_M3_EncB_Pulses--;
 8003910:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x420>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3b01      	subs	r3, #1
 8003916:	4a26      	ldr	r2, [pc, #152]	; (80039b0 <HAL_GPIO_EXTI_Callback+0x420>)
 8003918:	6013      	str	r3, [r2, #0]
}
 800391a:	e043      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == ServoDC_M1_Prox_Interrupt_Pin)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003922:	d11d      	bne.n	8003960 <HAL_GPIO_EXTI_Callback+0x3d0>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003924:	4a25      	ldr	r2, [pc, #148]	; (80039bc <HAL_GPIO_EXTI_Callback+0x42c>)
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) == 1) {
 800392a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800392e:	4825      	ldr	r0, [pc, #148]	; (80039c4 <HAL_GPIO_EXTI_Callback+0x434>)
 8003930:	f006 fbd2 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d10b      	bne.n	8003952 <HAL_GPIO_EXTI_Callback+0x3c2>
			isServoLimitSwitchReached = TRUE;
 800393a:	4b23      	ldr	r3, [pc, #140]	; (80039c8 <HAL_GPIO_EXTI_Callback+0x438>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
			SerialPrint("Interrupt Servo/DC Limit rising\n");
 8003940:	4822      	ldr	r0, [pc, #136]	; (80039cc <HAL_GPIO_EXTI_Callback+0x43c>)
 8003942:	f001 fe01 	bl	8005548 <SerialPrint>
			pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt,0);
 8003946:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80039d0 <HAL_GPIO_EXTI_Callback+0x440>
 800394a:	2005      	movs	r0, #5
 800394c:	f003 fd0a 	bl	8007364 <pwm>
}
 8003950:	e028      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			isServoLimitSwitchReached = FALSE;
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <HAL_GPIO_EXTI_Callback+0x438>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
			SerialPrint("Interrupt Servo/DC Limit falling\n");
 8003958:	481e      	ldr	r0, [pc, #120]	; (80039d4 <HAL_GPIO_EXTI_Callback+0x444>)
 800395a:	f001 fdf5 	bl	8005548 <SerialPrint>
}
 800395e:	e021      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
	else if (GPIO_Pin == ServoDC_M1_EncB_Interrupt_Pin)
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003966:	d11d      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <HAL_GPIO_EXTI_Callback+0x42c>)
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	6153      	str	r3, [r2, #20]
			if(!isServoLimitSwitchReached){
 800396e:	4b16      	ldr	r3, [pc, #88]	; (80039c8 <HAL_GPIO_EXTI_Callback+0x438>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d116      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				if(ServoDCMotorState == CW){
 8003976:	4b18      	ldr	r3, [pc, #96]	; (80039d8 <HAL_GPIO_EXTI_Callback+0x448>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_GPIO_EXTI_Callback+0x3fa>
					ServoDC_M1_EncB_Pulses++;
 800397e:	4b17      	ldr	r3, [pc, #92]	; (80039dc <HAL_GPIO_EXTI_Callback+0x44c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3301      	adds	r3, #1
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <HAL_GPIO_EXTI_Callback+0x44c>)
 8003986:	6013      	str	r3, [r2, #0]
}
 8003988:	e00c      	b.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
				else if(ServoDCMotorState == CCW && ServoDC_M1_EncB_Pulses > 1){
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <HAL_GPIO_EXTI_Callback+0x448>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d108      	bne.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
 8003992:	4b12      	ldr	r3, [pc, #72]	; (80039dc <HAL_GPIO_EXTI_Callback+0x44c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	dd04      	ble.n	80039a4 <HAL_GPIO_EXTI_Callback+0x414>
					ServoDC_M1_EncB_Pulses--;
 800399a:	4b10      	ldr	r3, [pc, #64]	; (80039dc <HAL_GPIO_EXTI_Callback+0x44c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a0e      	ldr	r2, [pc, #56]	; (80039dc <HAL_GPIO_EXTI_Callback+0x44c>)
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000104 	.word	0x20000104
 80039b0:	20000108 	.word	0x20000108
 80039b4:	2000010d 	.word	0x2000010d
 80039b8:	0801a0c0 	.word	0x0801a0c0
 80039bc:	40013c00 	.word	0x40013c00
 80039c0:	200003c8 	.word	0x200003c8
 80039c4:	40020000 	.word	0x40020000
 80039c8:	2000010e 	.word	0x2000010e
 80039cc:	0801a0e4 	.word	0x0801a0e4
 80039d0:	00000000 	.word	0x00000000
 80039d4:	0801a108 	.word	0x0801a108
 80039d8:	200003cc 	.word	0x200003cc
 80039dc:	200000f8 	.word	0x200000f8

080039e0 <Blink>:
/**
 * @brief  PowerButton Interrupt Check Callback Function when Triggered for using interrupts.
 * @param  None
 * @retval None
*/
void Blink() { // If the power button is not held, we can check for loadcell reading!
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Button_Power_Interrupt_PullUp_GPIO_Port, Button_Power_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) { // GPIO_PIN_RESET)
 80039e6:	2110      	movs	r1, #16
 80039e8:	484c      	ldr	r0, [pc, #304]	; (8003b1c <Blink+0x13c>)
 80039ea:	f006 fb75 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d13b      	bne.n	8003a6c <Blink+0x8c>
	        // Button is being held
	        uint32_t holdTime = HAL_GetTick() - PowerButtonPressTime;
 80039f4:	f004 ff28 	bl	8008848 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b49      	ldr	r3, [pc, #292]	; (8003b20 <Blink+0x140>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	607b      	str	r3, [r7, #4]

	        if (!actionTaken) {
 8003a02:	4b48      	ldr	r3, [pc, #288]	; (8003b24 <Blink+0x144>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d12f      	bne.n	8003a6c <Blink+0x8c>
	            if (!isMachineOn && holdTime >= BUTTON_HOLD_TIME_ON) {
 8003a0c:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <Blink+0x148>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11b      	bne.n	8003a4c <Blink+0x6c>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003a1a:	d317      	bcc.n	8003a4c <Blink+0x6c>
	                // Turn ON the system if held for 2 seconds
	            	isMachineOn = 1; // Set system state to ON
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <Blink+0x148>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]
	            	SerialPrintln("MACHINE ON");
 8003a22:	4842      	ldr	r0, [pc, #264]	; (8003b2c <Blink+0x14c>)
 8003a24:	f001 fda6 	bl	8005574 <SerialPrintln>
	                actionTaken = 1; // Prevent repeated toggling
 8003a28:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <Blink+0x144>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
	             //just testing
				if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
 8003a2e:	4b40      	ldr	r3, [pc, #256]	; (8003b30 <Blink+0x150>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d11a      	bne.n	8003a6c <Blink+0x8c>
						powerLEDControl(!isPowerLEDOn);
 8003a36:	4b3f      	ldr	r3, [pc, #252]	; (8003b34 <Blink+0x154>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 fa4f 	bl	8004ee8 <powerLEDControl>
				if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
 8003a4a:	e00f      	b.n	8003a6c <Blink+0x8c>
					}
	            } else if (isMachineOn && holdTime >= BUTTON_HOLD_TIME_OFF) {
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <Blink+0x148>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <Blink+0x8c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a5a:	d307      	bcc.n	8003a6c <Blink+0x8c>
	                // Turn OFF the system if held for 500 ms
	            	isMachineOn = 0; // Set system state to ON
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <Blink+0x148>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
	            	SerialPrintln("MACHINE OFF");
 8003a62:	4835      	ldr	r0, [pc, #212]	; (8003b38 <Blink+0x158>)
 8003a64:	f001 fd86 	bl	8005574 <SerialPrintln>
	            	NVIC_SystemReset();  /// Reset the STM32 when turning off
 8003a68:	f7ff fd7c 	bl	8003564 <__NVIC_SystemReset>
	    }

	/*if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
		powerLEDControl(!isPowerLEDOn);
	}*/
	if (isScreenLoading == TRUE) {
 8003a6c:	4b33      	ldr	r3, [pc, #204]	; (8003b3c <Blink+0x15c>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d11f      	bne.n	8003ab4 <Blink+0xd4>
		size_t len = strlen(DotString);
 8003a74:	4832      	ldr	r0, [pc, #200]	; (8003b40 <Blink+0x160>)
 8003a76:	f7fc fc0b 	bl	8000290 <strlen>
 8003a7a:	6038      	str	r0, [r7, #0]
		if (len < LCD_COLUMN_COUNT) {
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b13      	cmp	r3, #19
 8003a80:	d80a      	bhi.n	8003a98 <Blink+0xb8>
			DotString[len] = '.';
 8003a82:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <Blink+0x160>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	222e      	movs	r2, #46	; 0x2e
 8003a8a:	701a      	strb	r2, [r3, #0]
			DotString[len + 1] = '\0'; // Ensure string is null-terminated
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <Blink+0x160>)
 8003a92:	2100      	movs	r1, #0
 8003a94:	54d1      	strb	r1, [r2, r3]
 8003a96:	e008      	b.n	8003aaa <Blink+0xca>
		} else {
			memset(DotString, 0, strlen(DotString));
 8003a98:	4829      	ldr	r0, [pc, #164]	; (8003b40 <Blink+0x160>)
 8003a9a:	f7fc fbf9 	bl	8000290 <strlen>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4826      	ldr	r0, [pc, #152]	; (8003b40 <Blink+0x160>)
 8003aa6:	f012 fdbe 	bl	8016626 <memset>
		}
		printLCD(0, DotString, NO_SYMBOL);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4924      	ldr	r1, [pc, #144]	; (8003b40 <Blink+0x160>)
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f001 f98c 	bl	8004dcc <printLCD>
	}
	static uint8_t skipRead = FALSE;
	static long delTimer = 0;
	static uint8_t dellaststate = FALSE;
	if (skipRead == TRUE) {
 8003ab4:	4b23      	ldr	r3, [pc, #140]	; (8003b44 <Blink+0x164>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d103      	bne.n	8003ac4 <Blink+0xe4>
		skipRead = FALSE;
 8003abc:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <Blink+0x164>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	}
	else{
		dellaststate = FALSE;
	}

}
 8003ac2:	e027      	b.n	8003b14 <Blink+0x134>
	else if(digitalRead(Button_DelBack_Input_PullUp) == LOW){
 8003ac4:	2002      	movs	r0, #2
 8003ac6:	f7ff fa4d 	bl	8002f64 <digitalRead>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11e      	bne.n	8003b0e <Blink+0x12e>
		if(dellaststate == FALSE){
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <Blink+0x168>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d109      	bne.n	8003aec <Blink+0x10c>
			dellaststate = TRUE;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <Blink+0x168>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
			delTimer = HAL_GetTick();
 8003ade:	f004 feb3 	bl	8008848 <HAL_GetTick>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4b19      	ldr	r3, [pc, #100]	; (8003b4c <Blink+0x16c>)
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	e013      	b.n	8003b14 <Blink+0x134>
		else if(HAL_GetTick() > delTimer + 900){
 8003aec:	f004 feac 	bl	8008848 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <Blink+0x16c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f503 7361 	add.w	r3, r3, #900	; 0x384
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d90a      	bls.n	8003b14 <Blink+0x134>
			if(delLongPressed == FALSE){
 8003afe:	4b14      	ldr	r3, [pc, #80]	; (8003b50 <Blink+0x170>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <Blink+0x134>
				delLongPressed = TRUE;
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <Blink+0x170>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
}
 8003b0c:	e002      	b.n	8003b14 <Blink+0x134>
		dellaststate = FALSE;
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <Blink+0x168>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	200003f0 	.word	0x200003f0
 8003b24:	200003c0 	.word	0x200003c0
 8003b28:	20000360 	.word	0x20000360
 8003b2c:	0801a12c 	.word	0x0801a12c
 8003b30:	200004a0 	.word	0x200004a0
 8003b34:	200004a1 	.word	0x200004a1
 8003b38:	0801a138 	.word	0x0801a138
 8003b3c:	200004a2 	.word	0x200004a2
 8003b40:	200004a4 	.word	0x200004a4
 8003b44:	200003e9 	.word	0x200003e9
 8003b48:	200003ea 	.word	0x200003ea
 8003b4c:	200003ec 	.word	0x200003ec
 8003b50:	200003fa 	.word	0x200003fa

08003b54 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Timer Callback Function when Triggered for using interrupts.
 * @param  TIM_HandleTypeDef: Timer handler type.
 * @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ /// Timer 2 Interrupt, called every 500mS
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d101      	bne.n	8003b6a <HAL_TIM_PeriodElapsedCallback+0x16>
	 Blink();
 8003b66:	f7ff ff3b 	bl	80039e0 <Blink>
			SerialPrint("CLEANING PROCESS STARTED\n");
			CleaningButtonStillHeld = FALSE; // Prevent repeated toggling while held
		}
*/
	}
	if (htim->Instance == TIM6) {		        // Increment time counters
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a90      	ldr	r2, [pc, #576]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d11f      	bne.n	8003bb4 <HAL_TIM_PeriodElapsedCallback+0x60>
		seconds++;
 8003b74:	4b8f      	ldr	r3, [pc, #572]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	4a8e      	ldr	r2, [pc, #568]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b7c:	6013      	str	r3, [r2, #0]
		if (seconds >= 30) {
 8003b7e:	4b8d      	ldr	r3, [pc, #564]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b1d      	cmp	r3, #29
 8003b84:	d913      	bls.n	8003bae <HAL_TIM_PeriodElapsedCallback+0x5a>
			seconds = 0;
 8003b86:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
			minutes++;
 8003b8c:	4b8a      	ldr	r3, [pc, #552]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3301      	adds	r3, #1
 8003b92:	4a89      	ldr	r2, [pc, #548]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b94:	6013      	str	r3, [r2, #0]
			// Update the time to the SD card
			//UpdateTimeToSDCard(hours, minutes, seconds);
			if (minutes >= 60) {
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b3b      	cmp	r3, #59	; 0x3b
 8003b9c:	d907      	bls.n	8003bae <HAL_TIM_PeriodElapsedCallback+0x5a>
				minutes = 0;
 8003b9e:	4b86      	ldr	r3, [pc, #536]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
				hours++;
 8003ba4:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	4a84      	ldr	r2, [pc, #528]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003bac:	6013      	str	r3, [r2, #0]
				/*if (hours >= 24) {
					hours = 0; // Reset after 24 hours
				}*/
			}
		}
		log_to_sd_flag = 1;
 8003bae:	4b84      	ldr	r3, [pc, #528]	; (8003dc0 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
 }
	if (htim->Instance == TIM7){/// Timer 7 Interrupt, called every 100mS
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a82      	ldr	r2, [pc, #520]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	f040 8089 	bne.w	8003cd2 <HAL_TIM_PeriodElapsedCallback+0x17e>
		// Your code to execute every 100 ms
		Tareweight = Total_Weight;
 8003bc0:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a81      	ldr	r2, [pc, #516]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003bc6:	6013      	str	r3, [r2, #0]
		if (CleaningOperationFlag == TRUE) {
 8003bc8:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d11e      	bne.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0xbc>
			//Cleaning exit logic
			if (readKeypadNonBlock(ALL) == ENTERKEY) {
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f000 fae0 	bl	8004198 <readKeypadNonBlock>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b0b      	cmp	r3, #11
 8003bdc:	d118      	bne.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0xbc>
				CleaningExitCounter = CleaningExitCounter + 1;
 8003bde:	4b7d      	ldr	r3, [pc, #500]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b7b      	ldr	r3, [pc, #492]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003be8:	701a      	strb	r2, [r3, #0]
				if (CleaningExitCounter > 10) //3 Seconds Read button
 8003bea:	4b7a      	ldr	r3, [pc, #488]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b0a      	cmp	r3, #10
 8003bf0:	d90e      	bls.n	8003c10 <HAL_TIM_PeriodElapsedCallback+0xbc>
				{
					CleaningExit = TRUE;
 8003bf2:	4b79      	ldr	r3, [pc, #484]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	701a      	strb	r2, [r3, #0]
					CleaningCancelFlag = TRUE;
 8003bf8:	4b78      	ldr	r3, [pc, #480]	; (8003ddc <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
                    SerialPrintln("reached 10 times");
 8003bfe:	4878      	ldr	r0, [pc, #480]	; (8003de0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003c00:	f001 fcb8 	bl	8005574 <SerialPrintln>
#endif
					CleaningExitCounter = 0;
 8003c04:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
					CleaningExit = FALSE;
 8003c0a:	4b73      	ldr	r3, [pc, #460]	; (8003dd8 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
			  {
				   UserCleaningCycleNumber = cleancyclepressed;
			  }
			  */
		}
		if(adc_pressure > 100)
 8003c10:	4b74      	ldr	r3, [pc, #464]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	2b64      	cmp	r3, #100	; 0x64
 8003c16:	d904      	bls.n	8003c22 <HAL_TIM_PeriodElapsedCallback+0xce>
		{
			moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve OFF
 8003c18:	4a73      	ldr	r2, [pc, #460]	; (8003de8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f7ff fb59 	bl	80032d4 <moveMotor>
		}


#if DEBUG == 1
		 SerialPrintINT(Total_Weight);
 8003c22:	4b69      	ldr	r3, [pc, #420]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 fcda 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c2c:	486f      	ldr	r0, [pc, #444]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c2e:	f001 fc8b 	bl	8005548 <SerialPrint>
		 SerialPrintINT(Clamp_M2_EncA_Pulses);
 8003c32:	4b6f      	ldr	r3, [pc, #444]	; (8003df0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f001 fcd2 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c3c:	486b      	ldr	r0, [pc, #428]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c3e:	f001 fc83 	bl	8005548 <SerialPrint>
		 SerialPrintINT(Spindle_M3_EncA_Pulses);
 8003c42:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fcca 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c4c:	4867      	ldr	r0, [pc, #412]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c4e:	f001 fc7b 	bl	8005548 <SerialPrint>
		 SerialPrintINT(percent);
 8003c52:	4b69      	ldr	r3, [pc, #420]	; (8003df8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f001 fcc2 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c5c:	4863      	ldr	r0, [pc, #396]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c5e:	f001 fc73 	bl	8005548 <SerialPrint>
		 SerialPrintINT(adc_pressure);
 8003c62:	4b60      	ldr	r3, [pc, #384]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fcba 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c6c:	485f      	ldr	r0, [pc, #380]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c6e:	f001 fc6b 	bl	8005548 <SerialPrint>
		 SerialPrintINT(adc_CurrentSpindle);
 8003c72:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003c74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f001 fcb1 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c7e:	485b      	ldr	r0, [pc, #364]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c80:	f001 fc62 	bl	8005548 <SerialPrint>
		 SerialPrintINT(adc_CurrentServo);
 8003c84:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fca8 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003c90:	4856      	ldr	r0, [pc, #344]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003c92:	f001 fc59 	bl	8005548 <SerialPrint>
		 SerialPrintINT(adc_CurrentClamp);
 8003c96:	4b5b      	ldr	r3, [pc, #364]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fc9f 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003ca2:	4852      	ldr	r0, [pc, #328]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003ca4:	f001 fc50 	bl	8005548 <SerialPrint>
		 SerialPrintINT(Weight_Initial);
 8003ca8:	4b57      	ldr	r3, [pc, #348]	; (8003e08 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 fc97 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003cb2:	484e      	ldr	r0, [pc, #312]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003cb4:	f001 fc48 	bl	8005548 <SerialPrint>
		 SerialPrintINT(Target_Weight);
 8003cb8:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 fc8f 	bl	80055e0 <SerialPrintINT>
		 SerialPrint(",");
 8003cc2:	484a      	ldr	r0, [pc, #296]	; (8003dec <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003cc4:	f001 fc40 	bl	8005548 <SerialPrint>
		 SerialPrintlnINT(FreshValveStatus);
 8003cc8:	4b51      	ldr	r3, [pc, #324]	; (8003e10 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 fc71 	bl	80055b4 <SerialPrintlnINT>


#endif
	 }

	if(htim->Instance == TIM10){ /// Timer 10 Interrupt, called every 1000mS - 1 Second
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a4f      	ldr	r2, [pc, #316]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d164      	bne.n	8003da6 <HAL_TIM_PeriodElapsedCallback+0x252>
		 count1++;
 8003cdc:	4b4e      	ldr	r3, [pc, #312]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	4a4d      	ldr	r2, [pc, #308]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003ce4:	6013      	str	r3, [r2, #0]
		 adc_pressure  = pressureSensorReading();
 8003ce6:	f7fd fa4d 	bl	8001184 <pressureSensorReading>
 8003cea:	eef0 7a40 	vmov.f32	s15, s0
 8003cee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf2:	ee17 3a90 	vmov	r3, s15
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003cfa:	801a      	strh	r2, [r3, #0]
		 int temp_c1 =  analogRead(Curr_Sensor_Spindle_M3);
 8003cfc:	2002      	movs	r0, #2
 8003cfe:	f7fd f987 	bl	8001010 <analogRead>
 8003d02:	4603      	mov	r3, r0
 8003d04:	617b      	str	r3, [r7, #20]
		 if(temp_c1 > temp_c11)
 8003d06:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	dd02      	ble.n	8003d16 <HAL_TIM_PeriodElapsedCallback+0x1c2>
		 {
			 temp_c11 = temp_c1;
 8003d10:	4a42      	ldr	r2, [pc, #264]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6013      	str	r3, [r2, #0]
		 }

		 int  temp_c2 =  analogRead(Curr_Sensor_ServoDC_M1);
 8003d16:	2000      	movs	r0, #0
 8003d18:	f7fd f97a 	bl	8001010 <analogRead>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	613b      	str	r3, [r7, #16]
		 if(temp_c2 > temp_c22)
 8003d20:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	dd02      	ble.n	8003d30 <HAL_TIM_PeriodElapsedCallback+0x1dc>
		 {
			 temp_c22 = temp_c2;
 8003d2a:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	6013      	str	r3, [r2, #0]
		 }
		 int temp_c3 =  analogRead(Curr_Sensor_Clamp_M2);
 8003d30:	2001      	movs	r0, #1
 8003d32:	f7fd f96d 	bl	8001010 <analogRead>
 8003d36:	4603      	mov	r3, r0
 8003d38:	60fb      	str	r3, [r7, #12]
		 if(temp_c3 > temp_c33)
 8003d3a:	4b3a      	ldr	r3, [pc, #232]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	dd02      	ble.n	8003d4a <HAL_TIM_PeriodElapsedCallback+0x1f6>
		 {
			 temp_c33 = temp_c3;
 8003d44:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6013      	str	r3, [r2, #0]
		 }
		if(count1 == 10){
 8003d4a:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b0a      	cmp	r3, #10
 8003d50:	d129      	bne.n	8003da6 <HAL_TIM_PeriodElapsedCallback+0x252>
			 adc_CurrentSpindle = Convert_ADC_To_Current(temp_c11);
 8003d52:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fd fa53 	bl	8001204 <Convert_ADC_To_Current>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	b21a      	sxth	r2, r3
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003d64:	801a      	strh	r2, [r3, #0]
			 adc_CurrentClamp =  Convert_ADC_To_Current(temp_c33);
 8003d66:	4b2f      	ldr	r3, [pc, #188]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd fa49 	bl	8001204 <Convert_ADC_To_Current>
 8003d72:	4603      	mov	r3, r0
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003d78:	801a      	strh	r2, [r3, #0]
			 adc_CurrentServo =  Convert_ADC_To_Current(temp_c22);
 8003d7a:	4b29      	ldr	r3, [pc, #164]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd fa3f 	bl	8001204 <Convert_ADC_To_Current>
 8003d86:	4603      	mov	r3, r0
 8003d88:	b21a      	sxth	r2, r3
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003d8c:	801a      	strh	r2, [r3, #0]
			 temp_c11 = temp_c1 , temp_c22 =temp_c2, temp_c33 = temp_c3;
 8003d8e:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4a22      	ldr	r2, [pc, #136]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6013      	str	r3, [r2, #0]
			 count1 = 0;
 8003da0:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
		  }
	}
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40001000 	.word	0x40001000
 8003db4:	200003a4 	.word	0x200003a4
 8003db8:	200003a8 	.word	0x200003a8
 8003dbc:	200003ac 	.word	0x200003ac
 8003dc0:	200003a2 	.word	0x200003a2
 8003dc4:	40001400 	.word	0x40001400
 8003dc8:	20000364 	.word	0x20000364
 8003dcc:	2000036c 	.word	0x2000036c
 8003dd0:	20000393 	.word	0x20000393
 8003dd4:	20000395 	.word	0x20000395
 8003dd8:	20000394 	.word	0x20000394
 8003ddc:	200000f1 	.word	0x200000f1
 8003de0:	0801a144 	.word	0x0801a144
 8003de4:	200003b8 	.word	0x200003b8
 8003de8:	0098967f 	.word	0x0098967f
 8003dec:	0801a158 	.word	0x0801a158
 8003df0:	200000fc 	.word	0x200000fc
 8003df4:	20000104 	.word	0x20000104
 8003df8:	200027e8 	.word	0x200027e8
 8003dfc:	200003ba 	.word	0x200003ba
 8003e00:	200003bc 	.word	0x200003bc
 8003e04:	200003be 	.word	0x200003be
 8003e08:	20000368 	.word	0x20000368
 8003e0c:	20000370 	.word	0x20000370
 8003e10:	20000396 	.word	0x20000396
 8003e14:	40014400 	.word	0x40014400
 8003e18:	200003d0 	.word	0x200003d0
 8003e1c:	200003d4 	.word	0x200003d4
 8003e20:	200003d8 	.word	0x200003d8
 8003e24:	200003dc 	.word	0x200003dc

08003e28 <InitializeMachine>:
#include <Initialize.h>

extern const char valuetosend;
void InitializeMachine2(void);

void InitializeMachine() {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
	InitComp = FALSE;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <InitializeMachine+0x34>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
	LCD_Init();
 8003e32:	f000 fde1 	bl	80049f8 <LCD_Init>
		do{
			//UpdateTimeToSDCard( hours,  minutes,  seconds);
			InitializeMachine2();
 8003e36:	f000 f85d 	bl	8003ef4 <InitializeMachine2>
			HAL_Delay(1000);
 8003e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e3e:	f004 fd0f 	bl	8008860 <HAL_Delay>
		}while(isClampLimitSwitchReached == FALSE || isSpindleLimitSwitchReached == FALSE);
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <InitializeMachine+0x38>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f5      	beq.n	8003e36 <InitializeMachine+0xe>
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <InitializeMachine+0x3c>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f1      	beq.n	8003e36 <InitializeMachine+0xe>

		InitComp = TRUE;
 8003e52:	4b02      	ldr	r3, [pc, #8]	; (8003e5c <InitializeMachine+0x34>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	200003b0 	.word	0x200003b0
 8003e60:	2000010c 	.word	0x2000010c
 8003e64:	2000010d 	.word	0x2000010d

08003e68 <CTS_Home_position>:


void CTS_Home_position(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
	 while(HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) != 1)
 8003e6c:	e008      	b.n	8003e80 <CTS_Home_position+0x18>
	  {
		   digitalWrite(Spindle_M3_Dir_Output, HIGH); //LOW
 8003e6e:	2101      	movs	r1, #1
 8003e70:	2004      	movs	r0, #4
 8003e72:	f7ff f899 	bl	8002fa8 <digitalWrite>
		   pwm(Spindle_M3_PWM, 90);
 8003e76:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8003ee0 <CTS_Home_position+0x78>
 8003e7a:	2002      	movs	r0, #2
 8003e7c:	f003 fa72 	bl	8007364 <pwm>
	 while(HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) != 1)
 8003e80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e84:	4817      	ldr	r0, [pc, #92]	; (8003ee4 <CTS_Home_position+0x7c>)
 8003e86:	f006 f927 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d1ee      	bne.n	8003e6e <CTS_Home_position+0x6>
	  }
	 digitalWrite(Spindle_M3_Dir_Output, LOW); //HIGH
 8003e90:	2100      	movs	r1, #0
 8003e92:	2004      	movs	r0, #4
 8003e94:	f7ff f888 	bl	8002fa8 <digitalWrite>
	 pwm(Spindle_M3_PWM, 0);
 8003e98:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003ee8 <CTS_Home_position+0x80>
 8003e9c:	2002      	movs	r0, #2
 8003e9e:	f003 fa61 	bl	8007364 <pwm>
		while(HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) != 1)
 8003ea2:	e008      	b.n	8003eb6 <CTS_Home_position+0x4e>
		{
		   digitalWrite(Clamp_M2_Dir_Output, LOW);
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	2005      	movs	r0, #5
 8003ea8:	f7ff f87e 	bl	8002fa8 <digitalWrite>
		   pwm(Clamp_M2_PWM,50);
 8003eac:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8003eec <CTS_Home_position+0x84>
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	f003 fa57 	bl	8007364 <pwm>
		while(HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) != 1)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <CTS_Home_position+0x88>)
 8003eba:	f006 f90d 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d1ef      	bne.n	8003ea4 <CTS_Home_position+0x3c>
		}
		digitalWrite(Clamp_M2_Dir_Output, HIGH);
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	2005      	movs	r0, #5
 8003ec8:	f7ff f86e 	bl	8002fa8 <digitalWrite>
		pwm(Clamp_M2_PWM, 0);
 8003ecc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8003ee8 <CTS_Home_position+0x80>
 8003ed0:	2001      	movs	r0, #1
 8003ed2:	f003 fa47 	bl	8007364 <pwm>

		Servo_Home_Position();
 8003ed6:	f001 fc5f 	bl	8005798 <Servo_Home_Position>
		//HAL_Delay(2000);// this is delaying the system
}
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	42b40000 	.word	0x42b40000
 8003ee4:	40020000 	.word	0x40020000
 8003ee8:	00000000 	.word	0x00000000
 8003eec:	42480000 	.word	0x42480000
 8003ef0:	40020800 	.word	0x40020800

08003ef4 <InitializeMachine2>:

void InitializeMachine2(void) {//Close valves, Drive down the Probe, Open clamps, tare load cells
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
    // Print beginning initialization message
#if DEBUG == 1
    SerialPrintln("Begin Initialize");
 8003ef8:	4843      	ldr	r0, [pc, #268]	; (8004008 <InitializeMachine2+0x114>)
 8003efa:	f001 fb3b 	bl	8005574 <SerialPrintln>
#endif
    HAL_Delay(500);
 8003efe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f02:	f004 fcad 	bl	8008860 <HAL_Delay>
    Clamp_M2_EncA_Pulses = 1;
 8003f06:	4b41      	ldr	r3, [pc, #260]	; (800400c <InitializeMachine2+0x118>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
    Clamp_M2_EncB_Pulses = 1;
 8003f0c:	4b40      	ldr	r3, [pc, #256]	; (8004010 <InitializeMachine2+0x11c>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
    Spindle_M3_EncA_Pulses = 1;
 8003f12:	4b40      	ldr	r3, [pc, #256]	; (8004014 <InitializeMachine2+0x120>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
    Spindle_M3_EncB_Pulses = 1;
 8003f18:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <InitializeMachine2+0x124>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    // Make sure valve is closed
    moveMotor(VALVEMOTOR, OFF, INT_INF); // Assuming 0 is a valid target point for VALVEMOTOR
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	; (800401c <InitializeMachine2+0x128>)
 8003f20:	2100      	movs	r1, #0
 8003f22:	2003      	movs	r0, #3
 8003f24:	f7ff f9d6 	bl	80032d4 <moveMotor>

    moveMotor(VALVEMOTOR, OFF, INT_INF);
 8003f28:	4a3c      	ldr	r2, [pc, #240]	; (800401c <InitializeMachine2+0x128>)
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2003      	movs	r0, #3
 8003f2e:	f7ff f9d1 	bl	80032d4 <moveMotor>
#if DEBUG == 1
    SerialPrintln("Read limits");
 8003f32:	483b      	ldr	r0, [pc, #236]	; (8004020 <InitializeMachine2+0x12c>)
 8003f34:	f001 fb1e 	bl	8005574 <SerialPrintln>
#endif
    if (HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) == 1) {
 8003f38:	2101      	movs	r1, #1
 8003f3a:	483a      	ldr	r0, [pc, #232]	; (8004024 <InitializeMachine2+0x130>)
 8003f3c:	f006 f8cc 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d111      	bne.n	8003f6a <InitializeMachine2+0x76>
		Clamp_M2_EncA_Pulses = 0;
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <InitializeMachine2+0x118>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
		Clamp_M2_EncB_Pulses = 0;
 8003f4c:	4b30      	ldr	r3, [pc, #192]	; (8004010 <InitializeMachine2+0x11c>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
		pwm(Clamp_M2_PWM, 0);
 8003f52:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8004028 <InitializeMachine2+0x134>
 8003f56:	2001      	movs	r0, #1
 8003f58:	f003 fa04 	bl	8007364 <pwm>
		isClampLimitSwitchReached = TRUE;
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <InitializeMachine2+0x138>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M2 Limit HIGH\n");
 8003f62:	4833      	ldr	r0, [pc, #204]	; (8004030 <InitializeMachine2+0x13c>)
 8003f64:	f001 faf0 	bl	8005548 <SerialPrint>
 8003f68:	e005      	b.n	8003f76 <InitializeMachine2+0x82>
#endif
    } else {
    	isClampLimitSwitchReached = FALSE;
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <InitializeMachine2+0x138>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M2 Limit LOW\n");
 8003f70:	4830      	ldr	r0, [pc, #192]	; (8004034 <InitializeMachine2+0x140>)
 8003f72:	f001 fae9 	bl	8005548 <SerialPrint>
#endif
    }

    if (HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) == 1) {
 8003f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f7a:	482f      	ldr	r0, [pc, #188]	; (8004038 <InitializeMachine2+0x144>)
 8003f7c:	f006 f8ac 	bl	800a0d8 <HAL_GPIO_ReadPin>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d111      	bne.n	8003faa <InitializeMachine2+0xb6>
		Spindle_M3_EncA_Pulses=0;
 8003f86:	4b23      	ldr	r3, [pc, #140]	; (8004014 <InitializeMachine2+0x120>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
		Spindle_M3_EncB_Pulses=0;
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <InitializeMachine2+0x124>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
		pwm(Spindle_M3_PWM, 0);
 8003f92:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8004028 <InitializeMachine2+0x134>
 8003f96:	2002      	movs	r0, #2
 8003f98:	f003 f9e4 	bl	8007364 <pwm>
		isSpindleLimitSwitchReached = TRUE;
 8003f9c:	4b27      	ldr	r3, [pc, #156]	; (800403c <InitializeMachine2+0x148>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M3 Limit HIGH\n");
 8003fa2:	4827      	ldr	r0, [pc, #156]	; (8004040 <InitializeMachine2+0x14c>)
 8003fa4:	f001 fad0 	bl	8005548 <SerialPrint>
 8003fa8:	e00b      	b.n	8003fc2 <InitializeMachine2+0xce>
#endif
    } else {
    	isSpindleLimitSwitchReached = FALSE;
 8003faa:	4b24      	ldr	r3, [pc, #144]	; (800403c <InitializeMachine2+0x148>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M3 Limit LOW\n");
 8003fb0:	4824      	ldr	r0, [pc, #144]	; (8004044 <InitializeMachine2+0x150>)
 8003fb2:	f001 fac9 	bl	8005548 <SerialPrint>
    	SerialPrintln("Servo Close");
 8003fb6:	4824      	ldr	r0, [pc, #144]	; (8004048 <InitializeMachine2+0x154>)
 8003fb8:	f001 fadc 	bl	8005574 <SerialPrintln>
#endif
    	Servo_SetPercent(90); //Normally set to ValveClose
 8003fbc:	205a      	movs	r0, #90	; 0x5a
 8003fbe:	f001 fb77 	bl	80056b0 <Servo_SetPercent>
    }
#if DEBUG == 1
    SerialPrintln("Check M3 position");
 8003fc2:	4822      	ldr	r0, [pc, #136]	; (800404c <InitializeMachine2+0x158>)
 8003fc4:	f001 fad6 	bl	8005574 <SerialPrintln>
#endif
    // Read the state of Motor2 limit switch and reset its position
    if (isSpindleLimitSwitchReached == FALSE) {
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <InitializeMachine2+0x148>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <InitializeMachine2+0xe2>
    	moveMotorSpindleToLocBlock(M2POS1VAL);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f7ff f80f 	bl	8002ff4 <moveMotorSpindleToLocBlock>
    }
#if DEBUG == 1
    SerialPrintln("Check M1 position");
 8003fd6:	481e      	ldr	r0, [pc, #120]	; (8004050 <InitializeMachine2+0x15c>)
 8003fd8:	f001 facc 	bl	8005574 <SerialPrintln>
#endif
    // Read the state of Motor1 limit switch and reset its position
    if (isClampLimitSwitchReached == FALSE) {
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <InitializeMachine2+0x138>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <InitializeMachine2+0xf6>
        moveMotorClampToLocBlock(M1POS1VAL);
 8003fe4:	2000      	movs	r0, #0
 8003fe6:	f7ff f831 	bl	800304c <moveMotorClampToLocBlock>
    }
#if DEBUG == 1
    SerialPrintln("Servo Close");
 8003fea:	4817      	ldr	r0, [pc, #92]	; (8004048 <InitializeMachine2+0x154>)
 8003fec:	f001 fac2 	bl	8005574 <SerialPrintln>
#endif
    Servo_SetPercent(90);  //Normally set to ValveClose
 8003ff0:	205a      	movs	r0, #90	; 0x5a
 8003ff2:	f001 fb5d 	bl	80056b0 <Servo_SetPercent>

    // Delay to give time for load cell values to stabilize after motor movement ends
    HAL_Delay(1); // Use HAL_Delay for STM32
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f004 fc32 	bl	8008860 <HAL_Delay>
    //SerialPrintln("Zero load cells");
#if DEBUG == 1
    // Print finishing initialization message
    SerialPrintln("Finish Initialize");
 8003ffc:	4815      	ldr	r0, [pc, #84]	; (8004054 <InitializeMachine2+0x160>)
 8003ffe:	f001 fab9 	bl	8005574 <SerialPrintln>
#endif
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	0801a15c 	.word	0x0801a15c
 800400c:	200000fc 	.word	0x200000fc
 8004010:	20000100 	.word	0x20000100
 8004014:	20000104 	.word	0x20000104
 8004018:	20000108 	.word	0x20000108
 800401c:	0098967f 	.word	0x0098967f
 8004020:	0801a170 	.word	0x0801a170
 8004024:	40020800 	.word	0x40020800
 8004028:	00000000 	.word	0x00000000
 800402c:	2000010c 	.word	0x2000010c
 8004030:	0801a17c 	.word	0x0801a17c
 8004034:	0801a18c 	.word	0x0801a18c
 8004038:	40020000 	.word	0x40020000
 800403c:	2000010d 	.word	0x2000010d
 8004040:	0801a19c 	.word	0x0801a19c
 8004044:	0801a1ac 	.word	0x0801a1ac
 8004048:	0801a1bc 	.word	0x0801a1bc
 800404c:	0801a1c8 	.word	0x0801a1c8
 8004050:	0801a1dc 	.word	0x0801a1dc
 8004054:	0801a1f0 	.word	0x0801a1f0

08004058 <SubInit>:

void SubInit(){								//Initialize LCD
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800405c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004060:	f004 fbfe 	bl	8008860 <HAL_Delay>
	LCD_Clear();								//Clear LCD
 8004064:	f000 fdb2 	bl	8004bcc <LCD_Clear>
	HAL_Delay(500);
 8004068:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800406c:	f004 fbf8 	bl	8008860 <HAL_Delay>
	HAL_Delay(1000);     // Wait for a second after initializing
 8004070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004074:	f004 fbf4 	bl	8008860 <HAL_Delay>
	return;
 8004078:	bf00      	nop
}
 800407a:	bd80      	pop	{r7, pc}

0800407c <goToSleep>:

void goToSleep() { //Function goToSleep is only called by setup as it is a blocking function
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
    // Turn OFF LCD RGB
    LCDRGBControl(OFF);
 8004080:	2000      	movs	r0, #0
 8004082:	f000 ff0f 	bl	8004ea4 <LCDRGBControl>
    pwm(LCD_LED_PWM,0);
 8004086:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80040f0 <goToSleep+0x74>
 800408a:	2004      	movs	r0, #4
 800408c:	f003 f96a 	bl	8007364 <pwm>
    pwm(LCD_Contrast_PWM,0);
 8004090:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80040f0 <goToSleep+0x74>
 8004094:	2003      	movs	r0, #3
 8004096:	f003 f965 	bl	8007364 <pwm>
    // Turn off power LED and stop loading screen
    LoadingFunc(OFF, NOT_LOADING);
 800409a:	2100      	movs	r1, #0
 800409c:	2000      	movs	r0, #0
 800409e:	f000 fa5b 	bl	8004558 <LoadingFunc>
    // Initialize the machine (the same initialization is used for shutdown and startup)
    InitializeMachine();
 80040a2:	f7ff fec1 	bl	8003e28 <InitializeMachine>
    // Print message to Serial
#if DEBUG == 1
    SerialPrintln("Sleeping..");
 80040a6:	4813      	ldr	r0, [pc, #76]	; (80040f4 <goToSleep+0x78>)
 80040a8:	f001 fa64 	bl	8005574 <SerialPrintln>
#endif
    HAL_Delay(500);   // Delay for a short period
 80040ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040b0:	f004 fbd6 	bl	8008860 <HAL_Delay>
    //UpdateTimeToSDCard( hours,  minutes,  seconds);
    // Wait while the machine is off
    while(isMachineOn == FALSE) {
 80040b4:	e002      	b.n	80040bc <goToSleep+0x40>
        HAL_Delay(100); // Use HAL_Delay instead of delay
 80040b6:	2064      	movs	r0, #100	; 0x64
 80040b8:	f004 fbd2 	bl	8008860 <HAL_Delay>
    while(isMachineOn == FALSE) {
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <goToSleep+0x7c>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f8      	beq.n	80040b6 <goToSleep+0x3a>
    }
    LoadingFunc(BLINK, LOADING);
 80040c4:	2101      	movs	r1, #1
 80040c6:	2002      	movs	r0, #2
 80040c8:	f000 fa46 	bl	8004558 <LoadingFunc>
    // On waking up, print message to Serial
#if DEBUG == 1
    SerialPrintln("Waking up..");
 80040cc:	480b      	ldr	r0, [pc, #44]	; (80040fc <goToSleep+0x80>)
 80040ce:	f001 fa51 	bl	8005574 <SerialPrintln>
#endif
	 MX_TIM8_Init();
 80040d2:	f003 fe87 	bl	8007de4 <MX_TIM8_Init>
	 LCD_Init();
 80040d6:	f000 fc8f 	bl	80049f8 <LCD_Init>
	 LCDRGBControl(WHITE);
 80040da:	2064      	movs	r0, #100	; 0x64
 80040dc:	f000 fee2 	bl	8004ea4 <LCDRGBControl>
	 controlLCDContrast(100);
 80040e0:	2064      	movs	r0, #100	; 0x64
 80040e2:	f000 ff21 	bl	8004f28 <controlLCDContrast>
    InitializeMachine();
 80040e6:	f7ff fe9f 	bl	8003e28 <InitializeMachine>
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	00000000 	.word	0x00000000
 80040f4:	0801a204 	.word	0x0801a204
 80040f8:	20000360 	.word	0x20000360
 80040fc:	0801a210 	.word	0x0801a210

08004100 <ReadKeypadVar>:
volatile uint8_t cleanLongPressed = FALSE; // State of long press of clean key
uint8_t delLongPressed = FALSE;
uint8_t isDemoCleaning = FALSE; // Demo cleaning state


int ReadKeypadVar(int group) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
    lastKeyPressed = readKeypad(group);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8db 	bl	80042c4 <readKeypad>
 800410e:	4603      	mov	r3, r0
 8004110:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <ReadKeypadVar+0x88>)
 8004112:	6013      	str	r3, [r2, #0]
    if (lastKeyPressed == MANAUTOKEY) {
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <ReadKeypadVar+0x88>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d10a      	bne.n	8004132 <ReadKeypadVar+0x32>
        isAutoOperation = !isAutoOperation;
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <ReadKeypadVar+0x8c>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf0c      	ite	eq
 8004124:	2301      	moveq	r3, #1
 8004126:	2300      	movne	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	4b17      	ldr	r3, [pc, #92]	; (800418c <ReadKeypadVar+0x8c>)
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e01c      	b.n	800416c <ReadKeypadVar+0x6c>
    } else if (lastKeyPressed == CLEANKEY) {
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <ReadKeypadVar+0x88>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b0f      	cmp	r3, #15
 8004138:	d10a      	bne.n	8004150 <ReadKeypadVar+0x50>
        isCleaningOperation = !isCleaningOperation;
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <ReadKeypadVar+0x90>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf0c      	ite	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	2300      	movne	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <ReadKeypadVar+0x90>)
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e00d      	b.n	800416c <ReadKeypadVar+0x6c>
    } else if (lastKeyPressed == PLAYSTOPKEY) {
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <ReadKeypadVar+0x88>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b0d      	cmp	r3, #13
 8004156:	d109      	bne.n	800416c <ReadKeypadVar+0x6c>
        isPausedOperation = !isPausedOperation;
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <ReadKeypadVar+0x94>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <ReadKeypadVar+0x94>)
 800416a:	701a      	strb	r2, [r3, #0]
    }
    if (lastKeyPressed != 255) {
 800416c:	4b06      	ldr	r3, [pc, #24]	; (8004188 <ReadKeypadVar+0x88>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2bff      	cmp	r3, #255	; 0xff
 8004172:	d002      	beq.n	800417a <ReadKeypadVar+0x7a>
        HAL_Delay(5); // Delay for debounce, using HAL_Delay for STM32
 8004174:	2005      	movs	r0, #5
 8004176:	f004 fb73 	bl	8008860 <HAL_Delay>
    }
    return lastKeyPressed;
 800417a:	4b03      	ldr	r3, [pc, #12]	; (8004188 <ReadKeypadVar+0x88>)
 800417c:	681b      	ldr	r3, [r3, #0]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000110 	.word	0x20000110
 800418c:	2000010f 	.word	0x2000010f
 8004190:	200003f4 	.word	0x200003f4
 8004194:	200003f5 	.word	0x200003f5

08004198 <readKeypadNonBlock>:

int readKeypadNonBlock(int group)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	//group=ALL;
  if (group == NUMPAD || group == ALL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d002      	beq.n	80041ac <readKeypadNonBlock+0x14>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d15f      	bne.n	800426c <readKeypadNonBlock+0xd4>
  {
    if (digitalRead(Button_1_Input_PullUp) == LOW) {
 80041ac:	2003      	movs	r0, #3
 80041ae:	f7fe fed9 	bl	8002f64 <digitalRead>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <readKeypadNonBlock+0x24>

      return 1;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e07e      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_2_Input_PullUp) == LOW) {
 80041bc:	2004      	movs	r0, #4
 80041be:	f7fe fed1 	bl	8002f64 <digitalRead>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <readKeypadNonBlock+0x34>

      return 2;
 80041c8:	2302      	movs	r3, #2
 80041ca:	e076      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_3_Input_PullUp) == LOW) {
 80041cc:	2005      	movs	r0, #5
 80041ce:	f7fe fec9 	bl	8002f64 <digitalRead>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <readKeypadNonBlock+0x44>

      return 3;
 80041d8:	2303      	movs	r3, #3
 80041da:	e06e      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_4_Input_PullUp) == LOW) {
 80041dc:	2006      	movs	r0, #6
 80041de:	f7fe fec1 	bl	8002f64 <digitalRead>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <readKeypadNonBlock+0x54>

      return 4;
 80041e8:	2304      	movs	r3, #4
 80041ea:	e066      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_5_Input_PullUp) == LOW) {
 80041ec:	2007      	movs	r0, #7
 80041ee:	f7fe feb9 	bl	8002f64 <digitalRead>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <readKeypadNonBlock+0x64>

      return 5;
 80041f8:	2305      	movs	r3, #5
 80041fa:	e05e      	b.n	80042ba <readKeypadNonBlock+0x122>
    }else if (digitalRead(Button_6_Input_PullUp) == LOW) {
 80041fc:	2008      	movs	r0, #8
 80041fe:	f7fe feb1 	bl	8002f64 <digitalRead>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <readKeypadNonBlock+0x74>

      return 6;
 8004208:	2306      	movs	r3, #6
 800420a:	e056      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_7_Input_PullUp) == LOW) {
 800420c:	2009      	movs	r0, #9
 800420e:	f7fe fea9 	bl	8002f64 <digitalRead>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <readKeypadNonBlock+0x84>

      return 7;
 8004218:	2307      	movs	r3, #7
 800421a:	e04e      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_8_Input_PullUp) == LOW) {
 800421c:	200a      	movs	r0, #10
 800421e:	f7fe fea1 	bl	8002f64 <digitalRead>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <readKeypadNonBlock+0x94>

      return 8;
 8004228:	2308      	movs	r3, #8
 800422a:	e046      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_9_Input_PullUp) == LOW) {
 800422c:	200b      	movs	r0, #11
 800422e:	f7fe fe99 	bl	8002f64 <digitalRead>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <readKeypadNonBlock+0xa4>

      return 9;
 8004238:	2309      	movs	r3, #9
 800423a:	e03e      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_0_Input_PullUp) == LOW) {
 800423c:	200c      	movs	r0, #12
 800423e:	f7fe fe91 	bl	8002f64 <digitalRead>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <readKeypadNonBlock+0xb4>

      return 0;
 8004248:	2300      	movs	r3, #0
 800424a:	e036      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 800424c:	200e      	movs	r0, #14
 800424e:	f7fe fe89 	bl	8002f64 <digitalRead>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <readKeypadNonBlock+0xc4>

      return COMMAKEY;
 8004258:	230a      	movs	r3, #10
 800425a:	e02e      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 800425c:	200d      	movs	r0, #13
 800425e:	f7fe fe81 	bl	8002f64 <digitalRead>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <readKeypadNonBlock+0xd4>

      return ENTERKEY;
 8004268:	230b      	movs	r3, #11
 800426a:	e026      	b.n	80042ba <readKeypadNonBlock+0x122>
    }
  }
  if (group == CONTROL || group == ALL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d002      	beq.n	8004278 <readKeypadNonBlock+0xe0>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11f      	bne.n	80042b8 <readKeypadNonBlock+0x120>
  {
    if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 8004278:	200d      	movs	r0, #13
 800427a:	f7fe fe73 	bl	8002f64 <digitalRead>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <readKeypadNonBlock+0xf0>

      return ENTERKEY;
 8004284:	230b      	movs	r3, #11
 8004286:	e018      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 8004288:	2000      	movs	r0, #0
 800428a:	f7fe fe6b 	bl	8002f64 <digitalRead>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <readKeypadNonBlock+0x100>

      return MANAUTOKEY;
 8004294:	230c      	movs	r3, #12
 8004296:	e010      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 8004298:	2001      	movs	r0, #1
 800429a:	f7fe fe63 	bl	8002f64 <digitalRead>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <readKeypadNonBlock+0x110>

      return PLAYSTOPKEY;
 80042a4:	230d      	movs	r3, #13
 80042a6:	e008      	b.n	80042ba <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 80042a8:	2002      	movs	r0, #2
 80042aa:	f7fe fe5b 	bl	8002f64 <digitalRead>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <readKeypadNonBlock+0x120>

      return DELKEY;
 80042b4:	230e      	movs	r3, #14
 80042b6:	e000      	b.n	80042ba <readKeypadNonBlock+0x122>
    }
  }
  return 255;
 80042b8:	23ff      	movs	r3, #255	; 0xff
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <readKeypad>:

int readKeypad(int group)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
	//group = ALL;
  if (group == NUMPAD || group == ALL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d003      	beq.n	80042da <readKeypad+0x16>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 80d8 	bne.w	800448a <readKeypad+0x1c6>
  {
    if (digitalRead(Button_1_Input_PullUp) == LOW){
 80042da:	2003      	movs	r0, #3
 80042dc:	f7fe fe42 	bl	8002f64 <digitalRead>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <readKeypad+0x3a>
      while (digitalRead(Button_1_Input_PullUp) == LOW) {
 80042e6:	e002      	b.n	80042ee <readKeypad+0x2a>
        HAL_Delay(1);
 80042e8:	2001      	movs	r0, #1
 80042ea:	f004 fab9 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_1_Input_PullUp) == LOW) {
 80042ee:	2003      	movs	r0, #3
 80042f0:	f7fe fe38 	bl	8002f64 <digitalRead>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f6      	beq.n	80042e8 <readKeypad+0x24>
      }
      return 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e126      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_2_Input_PullUp) == LOW){
 80042fe:	2004      	movs	r0, #4
 8004300:	f7fe fe30 	bl	8002f64 <digitalRead>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <readKeypad+0x5e>
      while (digitalRead(Button_2_Input_PullUp) == LOW){
 800430a:	e002      	b.n	8004312 <readKeypad+0x4e>
    	  HAL_Delay(1);
 800430c:	2001      	movs	r0, #1
 800430e:	f004 faa7 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_2_Input_PullUp) == LOW){
 8004312:	2004      	movs	r0, #4
 8004314:	f7fe fe26 	bl	8002f64 <digitalRead>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f6      	beq.n	800430c <readKeypad+0x48>
      }
      return 2;
 800431e:	2302      	movs	r3, #2
 8004320:	e114      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_3_Input_PullUp) == LOW) {
 8004322:	2005      	movs	r0, #5
 8004324:	f7fe fe1e 	bl	8002f64 <digitalRead>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <readKeypad+0x82>
    	while (digitalRead(Button_3_Input_PullUp) == LOW) {
 800432e:	e002      	b.n	8004336 <readKeypad+0x72>
      HAL_Delay(1);
 8004330:	2001      	movs	r0, #1
 8004332:	f004 fa95 	bl	8008860 <HAL_Delay>
    	while (digitalRead(Button_3_Input_PullUp) == LOW) {
 8004336:	2005      	movs	r0, #5
 8004338:	f7fe fe14 	bl	8002f64 <digitalRead>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0f6      	beq.n	8004330 <readKeypad+0x6c>
      }
      return 3;
 8004342:	2303      	movs	r3, #3
 8004344:	e102      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_4_Input_PullUp) == LOW) {
 8004346:	2006      	movs	r0, #6
 8004348:	f7fe fe0c 	bl	8002f64 <digitalRead>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <readKeypad+0xa6>
      while (digitalRead(Button_4_Input_PullUp) == LOW) {
 8004352:	e002      	b.n	800435a <readKeypad+0x96>
    	  HAL_Delay(1);
 8004354:	2001      	movs	r0, #1
 8004356:	f004 fa83 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_4_Input_PullUp) == LOW) {
 800435a:	2006      	movs	r0, #6
 800435c:	f7fe fe02 	bl	8002f64 <digitalRead>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f6      	beq.n	8004354 <readKeypad+0x90>
      }
      return 4;
 8004366:	2304      	movs	r3, #4
 8004368:	e0f0      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_5_Input_PullUp) == LOW) {
 800436a:	2007      	movs	r0, #7
 800436c:	f7fe fdfa 	bl	8002f64 <digitalRead>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <readKeypad+0xca>
      while (digitalRead(Button_5_Input_PullUp) == LOW) {
 8004376:	e002      	b.n	800437e <readKeypad+0xba>
    	  HAL_Delay(1);
 8004378:	2001      	movs	r0, #1
 800437a:	f004 fa71 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_5_Input_PullUp) == LOW) {
 800437e:	2007      	movs	r0, #7
 8004380:	f7fe fdf0 	bl	8002f64 <digitalRead>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0f6      	beq.n	8004378 <readKeypad+0xb4>
      }
      return 5;
 800438a:	2305      	movs	r3, #5
 800438c:	e0de      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_6_Input_PullUp) == LOW) {
 800438e:	2008      	movs	r0, #8
 8004390:	f7fe fde8 	bl	8002f64 <digitalRead>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10b      	bne.n	80043b2 <readKeypad+0xee>
      while (digitalRead(Button_6_Input_PullUp) == LOW) {
 800439a:	e002      	b.n	80043a2 <readKeypad+0xde>
    	  HAL_Delay(1);
 800439c:	2001      	movs	r0, #1
 800439e:	f004 fa5f 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_6_Input_PullUp) == LOW) {
 80043a2:	2008      	movs	r0, #8
 80043a4:	f7fe fdde 	bl	8002f64 <digitalRead>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f6      	beq.n	800439c <readKeypad+0xd8>
      }
      return 6;
 80043ae:	2306      	movs	r3, #6
 80043b0:	e0cc      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_7_Input_PullUp) == LOW) {
 80043b2:	2009      	movs	r0, #9
 80043b4:	f7fe fdd6 	bl	8002f64 <digitalRead>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <readKeypad+0x112>
      while (digitalRead(Button_7_Input_PullUp) == LOW) {
 80043be:	e002      	b.n	80043c6 <readKeypad+0x102>
    	  HAL_Delay(1);
 80043c0:	2001      	movs	r0, #1
 80043c2:	f004 fa4d 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_7_Input_PullUp) == LOW) {
 80043c6:	2009      	movs	r0, #9
 80043c8:	f7fe fdcc 	bl	8002f64 <digitalRead>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f6      	beq.n	80043c0 <readKeypad+0xfc>
      }
      return 7;
 80043d2:	2307      	movs	r3, #7
 80043d4:	e0ba      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_8_Input_PullUp) == LOW) {
 80043d6:	200a      	movs	r0, #10
 80043d8:	f7fe fdc4 	bl	8002f64 <digitalRead>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <readKeypad+0x136>
      while (digitalRead(Button_8_Input_PullUp) == LOW) {
 80043e2:	e002      	b.n	80043ea <readKeypad+0x126>
    	  HAL_Delay(1);
 80043e4:	2001      	movs	r0, #1
 80043e6:	f004 fa3b 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_8_Input_PullUp) == LOW) {
 80043ea:	200a      	movs	r0, #10
 80043ec:	f7fe fdba 	bl	8002f64 <digitalRead>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f6      	beq.n	80043e4 <readKeypad+0x120>
      }
      return 8;
 80043f6:	2308      	movs	r3, #8
 80043f8:	e0a8      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_9_Input_PullUp) == LOW) {
 80043fa:	200b      	movs	r0, #11
 80043fc:	f7fe fdb2 	bl	8002f64 <digitalRead>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <readKeypad+0x15a>
      while (digitalRead(Button_9_Input_PullUp) == LOW) {
 8004406:	e002      	b.n	800440e <readKeypad+0x14a>
    	  HAL_Delay(1);
 8004408:	2001      	movs	r0, #1
 800440a:	f004 fa29 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_9_Input_PullUp) == LOW) {
 800440e:	200b      	movs	r0, #11
 8004410:	f7fe fda8 	bl	8002f64 <digitalRead>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f6      	beq.n	8004408 <readKeypad+0x144>
      }
      return 9;
 800441a:	2309      	movs	r3, #9
 800441c:	e096      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_0_Input_PullUp) == LOW) {
 800441e:	200c      	movs	r0, #12
 8004420:	f7fe fda0 	bl	8002f64 <digitalRead>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <readKeypad+0x17e>
      while (digitalRead(Button_0_Input_PullUp) == LOW) {
 800442a:	e002      	b.n	8004432 <readKeypad+0x16e>
    	  HAL_Delay(1);
 800442c:	2001      	movs	r0, #1
 800442e:	f004 fa17 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_0_Input_PullUp) == LOW) {
 8004432:	200c      	movs	r0, #12
 8004434:	f7fe fd96 	bl	8002f64 <digitalRead>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f6      	beq.n	800442c <readKeypad+0x168>
      }

      return 0;
 800443e:	2300      	movs	r3, #0
 8004440:	e084      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 8004442:	200e      	movs	r0, #14
 8004444:	f7fe fd8e 	bl	8002f64 <digitalRead>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <readKeypad+0x1a2>
      while (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 800444e:	e002      	b.n	8004456 <readKeypad+0x192>
    	  HAL_Delay(1);
 8004450:	2001      	movs	r0, #1
 8004452:	f004 fa05 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 8004456:	200e      	movs	r0, #14
 8004458:	f7fe fd84 	bl	8002f64 <digitalRead>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f6      	beq.n	8004450 <readKeypad+0x18c>
      }

      return COMMAKEY;
 8004462:	230a      	movs	r3, #10
 8004464:	e072      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 8004466:	200d      	movs	r0, #13
 8004468:	f7fe fd7c 	bl	8002f64 <digitalRead>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10b      	bne.n	800448a <readKeypad+0x1c6>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 8004472:	e002      	b.n	800447a <readKeypad+0x1b6>
    	  HAL_Delay(1);
 8004474:	2001      	movs	r0, #1
 8004476:	f004 f9f3 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 800447a:	200d      	movs	r0, #13
 800447c:	f7fe fd72 	bl	8002f64 <digitalRead>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f6      	beq.n	8004474 <readKeypad+0x1b0>
      }

      return ENTERKEY;
 8004486:	230b      	movs	r3, #11
 8004488:	e060      	b.n	800454c <readKeypad+0x288>
    }
  }
  if (group == CONTROL || group == ALL) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d002      	beq.n	8004496 <readKeypad+0x1d2>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d159      	bne.n	800454a <readKeypad+0x286>
    if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 8004496:	200d      	movs	r0, #13
 8004498:	f7fe fd64 	bl	8002f64 <digitalRead>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <readKeypad+0x1f6>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80044a2:	e002      	b.n	80044aa <readKeypad+0x1e6>
    	  HAL_Delay(1);
 80044a4:	2001      	movs	r0, #1
 80044a6:	f004 f9db 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80044aa:	200d      	movs	r0, #13
 80044ac:	f7fe fd5a 	bl	8002f64 <digitalRead>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f6      	beq.n	80044a4 <readKeypad+0x1e0>
      }

      return ENTERKEY;
 80044b6:	230b      	movs	r3, #11
 80044b8:	e048      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7fe fd52 	bl	8002f64 <digitalRead>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10b      	bne.n	80044de <readKeypad+0x21a>
      while (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 80044c6:	e002      	b.n	80044ce <readKeypad+0x20a>
    	  HAL_Delay(1);
 80044c8:	2001      	movs	r0, #1
 80044ca:	f004 f9c9 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fe fd48 	bl	8002f64 <digitalRead>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f6      	beq.n	80044c8 <readKeypad+0x204>
      }

      return MANAUTOKEY;
 80044da:	230c      	movs	r3, #12
 80044dc:	e036      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 80044de:	2001      	movs	r0, #1
 80044e0:	f7fe fd40 	bl	8002f64 <digitalRead>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10b      	bne.n	8004502 <readKeypad+0x23e>
      while (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 80044ea:	e002      	b.n	80044f2 <readKeypad+0x22e>
    	  HAL_Delay(1);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f004 f9b7 	bl	8008860 <HAL_Delay>
      while (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 80044f2:	2001      	movs	r0, #1
 80044f4:	f7fe fd36 	bl	8002f64 <digitalRead>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f6      	beq.n	80044ec <readKeypad+0x228>
      }

      return PLAYSTOPKEY;
 80044fe:	230d      	movs	r3, #13
 8004500:	e024      	b.n	800454c <readKeypad+0x288>
    } else if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8004502:	2002      	movs	r0, #2
 8004504:	f7fe fd2e 	bl	8002f64 <digitalRead>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d11d      	bne.n	800454a <readKeypad+0x286>
    	unsigned long localDelTimer = HAL_GetTick();
 800450e:	f004 f99b 	bl	8008848 <HAL_GetTick>
 8004512:	60f8      	str	r0, [r7, #12]
    	delLongPressed = FALSE;
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <readKeypad+0x290>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
    	while (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 800451a:	e00e      	b.n	800453a <readKeypad+0x276>
    		HAL_Delay(1);
 800451c:	2001      	movs	r0, #1
 800451e:	f004 f99f 	bl	8008860 <HAL_Delay>
    		if (HAL_GetTick() - localDelTimer >= 2000) {
 8004522:	f004 f991 	bl	8008848 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004530:	d303      	bcc.n	800453a <readKeypad+0x276>
    			delLongPressed = TRUE;
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <readKeypad+0x290>)
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
    			break;
 8004538:	e005      	b.n	8004546 <readKeypad+0x282>
    	while (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 800453a:	2002      	movs	r0, #2
 800453c:	f7fe fd12 	bl	8002f64 <digitalRead>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0ea      	beq.n	800451c <readKeypad+0x258>
    		}
    	}

    	return DELKEY;
 8004546:	230e      	movs	r3, #14
 8004548:	e000      	b.n	800454c <readKeypad+0x288>
    }
  }
  return 255;
 800454a:	23ff      	movs	r3, #255	; 0xff
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	200003fa 	.word	0x200003fa

08004558 <LoadingFunc>:


void LoadingFunc(int blinkLED, uint8_t ScreenLoad) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	70fb      	strb	r3, [r7, #3]
    if (blinkLED == OFF) {
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <LoadingFunc+0x20>
        powerLEDControl(OFF);
 800456a:	2000      	movs	r0, #0
 800456c:	f000 fcbc 	bl	8004ee8 <powerLEDControl>
        isPowerLEDBlinking = FALSE;
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <LoadingFunc+0x6c>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e00f      	b.n	8004598 <LoadingFunc+0x40>
    } else if (blinkLED == ON) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d106      	bne.n	800458c <LoadingFunc+0x34>
       powerLEDControl(ON);
 800457e:	2001      	movs	r0, #1
 8004580:	f000 fcb2 	bl	8004ee8 <powerLEDControl>
        isPowerLEDBlinking = FALSE;
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <LoadingFunc+0x6c>)
 8004586:	2200      	movs	r2, #0
 8004588:	701a      	strb	r2, [r3, #0]
 800458a:	e005      	b.n	8004598 <LoadingFunc+0x40>
    } else if (blinkLED == BLINK) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d102      	bne.n	8004598 <LoadingFunc+0x40>
        isPowerLEDBlinking = TRUE;
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <LoadingFunc+0x6c>)
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
    }

    if (ScreenLoad==TRUE) {
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10b      	bne.n	80045b6 <LoadingFunc+0x5e>
        strcpy(DotString, ""); // Clear the DotString
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <LoadingFunc+0x70>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
        isScreenLoading = TRUE;
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <LoadingFunc+0x74>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	701a      	strb	r2, [r3, #0]
        printLCD(0, " ", NO_SYMBOL);
 80045aa:	2200      	movs	r2, #0
 80045ac:	4908      	ldr	r1, [pc, #32]	; (80045d0 <LoadingFunc+0x78>)
 80045ae:	2000      	movs	r0, #0
 80045b0:	f000 fc0c 	bl	8004dcc <printLCD>
    } else {
        isScreenLoading = FALSE;
    }
}
 80045b4:	e002      	b.n	80045bc <LoadingFunc+0x64>
        isScreenLoading = FALSE;
 80045b6:	4b05      	ldr	r3, [pc, #20]	; (80045cc <LoadingFunc+0x74>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200004a0 	.word	0x200004a0
 80045c8:	200004a4 	.word	0x200004a4
 80045cc:	200004a2 	.word	0x200004a2
 80045d0:	0801a21c 	.word	0x0801a21c

080045d4 <Take2RowEntries>:

void Take2RowEntries(char *Row1StaticString, char *Row2StaticString) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b0ae      	sub	sp, #184	; 0xb8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]

	uint8_t row2done = 0;  // false represented as 0
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char row1entryS[LCD_COLUMN_COUNT + 1]; // Assuming a max size of 50 for the string +1 is for null terminator
	row1entryS[0] = '\0';
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	char row2entryS[50];   // Adjust the size as needed
	row2entryS[0] = '\0';
 80045ea:	2300      	movs	r3, #0
 80045ec:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	float row1entryF = 0.0;
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float row2entryF = 0.0;
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	// Convert lastKeyPressed to a string
	char lastKeyPressedStr[3]; //For storing lastKeyPressed as a character array/string
	char SerialBuffer[32];		//For storing rowXentryF as a character array/string

	char CombStr1[LCD_COLUMN_COUNT + 1]; 	//For storing the combined strings of row 1
	CombStr1[0] = '\0';
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	char CombStr2[LCD_COLUMN_COUNT + 1];   //For storing the combined strings of row 2
	CombStr2[0] = '\0';
 8004606:	2300      	movs	r3, #0
 8004608:	733b      	strb	r3, [r7, #12]

	strcpy(CombStr1, Row1StaticString);
 800460a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4618      	mov	r0, r3
 8004612:	f012 f91e 	bl	8016852 <strcpy>
	strcat(CombStr1, row1entryS);
 8004616:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800461a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f012 f808 	bl	8016636 <strcat>

	strcpy(CombStr2, Row2StaticString);
 8004626:	f107 030c 	add.w	r3, r7, #12
 800462a:	6839      	ldr	r1, [r7, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f012 f910 	bl	8016852 <strcpy>
	strcat(CombStr2, row2entryS);
 8004632:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f011 fffa 	bl	8016636 <strcat>

	printLCD(2, CombStr2, NO_SYMBOL);
 8004642:	f107 030c 	add.w	r3, r7, #12
 8004646:	2200      	movs	r2, #0
 8004648:	4619      	mov	r1, r3
 800464a:	2002      	movs	r0, #2
 800464c:	f000 fbbe 	bl	8004dcc <printLCD>
	printLCD(1, CombStr1, CURSOR_SYMBOL);
 8004650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004654:	2203      	movs	r2, #3
 8004656:	4619      	mov	r1, r3
 8004658:	2001      	movs	r0, #1
 800465a:	f000 fbb7 	bl	8004dcc <printLCD>

	while (row2done == FALSE) {
 800465e:	e1b1      	b.n	80049c4 <Take2RowEntries+0x3f0>
		printLCD(2, CombStr2, NO_SYMBOL); //Remove any symbol from 2nd row. Useful when we hit delete on 2nd row and go to 1st row
 8004660:	f107 030c 	add.w	r3, r7, #12
 8004664:	2200      	movs	r2, #0
 8004666:	4619      	mov	r1, r3
 8004668:	2002      	movs	r0, #2
 800466a:	f000 fbaf 	bl	8004dcc <printLCD>
		//Take 1st row entry
		while (ReadKeypadVar(ALL) != ENTERKEY || row1entryF == 0.0) {
 800466e:	e0a4      	b.n	80047ba <Take2RowEntries+0x1e6>
			  if (lastKeyPressed == MANAUTOKEY)
 8004670:	4ba8      	ldr	r3, [pc, #672]	; (8004914 <Take2RowEntries+0x340>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b0c      	cmp	r3, #12
 8004676:	d101      	bne.n	800467c <Take2RowEntries+0xa8>
				{
				  CustomerApp();
 8004678:	f7fc ff4c 	bl	8001514 <CustomerApp>
				}

			if (lastKeyPressed >= 0 && lastKeyPressed <= 9) { //If last key pressed is a number
 800467c:	4ba5      	ldr	r3, [pc, #660]	; (8004914 <Take2RowEntries+0x340>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	db2d      	blt.n	80046e0 <Take2RowEntries+0x10c>
 8004684:	4ba3      	ldr	r3, [pc, #652]	; (8004914 <Take2RowEntries+0x340>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b09      	cmp	r3, #9
 800468a:	dc29      	bgt.n	80046e0 <Take2RowEntries+0x10c>
				//int temp;
				//temp = atoi(row1entryS);  // Convert string to integer
				if (lastKeyPressed == 0 && strcmp(row1entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 800468c:	4ba1      	ldr	r3, [pc, #644]	; (8004914 <Take2RowEntries+0x340>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d108      	bne.n	80046a6 <Take2RowEntries+0xd2>
 8004694:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004698:	499f      	ldr	r1, [pc, #636]	; (8004918 <Take2RowEntries+0x344>)
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb fd98 	bl	80001d0 <strcmp>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01b      	beq.n	80046de <Take2RowEntries+0x10a>
					//Do nothing
				} else if (strlen(row1entryS) >= MAX_ENTRY_KEYS) {
 80046a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fb fdf0 	bl	8000290 <strlen>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d85c      	bhi.n	8004770 <Take2RowEntries+0x19c>
					//Do nothing
				} else {
					lastKeyPressedStr[0] = '\0';
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
					sprintf(lastKeyPressedStr, "%d", lastKeyPressed);
 80046bc:	4b95      	ldr	r3, [pc, #596]	; (8004914 <Take2RowEntries+0x340>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046c4:	4995      	ldr	r1, [pc, #596]	; (800491c <Take2RowEntries+0x348>)
 80046c6:	4618      	mov	r0, r3
 80046c8:	f011 ff1c 	bl	8016504 <siprintf>
					strcat(row1entryS, lastKeyPressedStr);
 80046cc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80046d0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80046d4:	4611      	mov	r1, r2
 80046d6:	4618      	mov	r0, r3
 80046d8:	f011 ffad 	bl	8016636 <strcat>
				if (lastKeyPressed == 0 && strcmp(row1entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 80046dc:	e048      	b.n	8004770 <Take2RowEntries+0x19c>
 80046de:	e047      	b.n	8004770 <Take2RowEntries+0x19c>
				}
			}else if (lastKeyPressed == DELKEY && (strlen(row1entryS)) > 0) {
 80046e0:	4b8c      	ldr	r3, [pc, #560]	; (8004914 <Take2RowEntries+0x340>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b0e      	cmp	r3, #14
 80046e6:	d111      	bne.n	800470c <Take2RowEntries+0x138>
 80046e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00c      	beq.n	800470c <Take2RowEntries+0x138>
				row1entryS[(strlen(row1entryS)) - 1] = '\0'; //Delete last entry
 80046f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fb fdca 	bl	8000290 <strlen>
 80046fc:	4603      	mov	r3, r0
 80046fe:	3b01      	subs	r3, #1
 8004700:	33b8      	adds	r3, #184	; 0xb8
 8004702:	443b      	add	r3, r7
 8004704:	2200      	movs	r2, #0
 8004706:	f803 2c24 	strb.w	r2, [r3, #-36]
 800470a:	e032      	b.n	8004772 <Take2RowEntries+0x19e>

			} else if (lastKeyPressed == COMMAKEY) {
 800470c:	4b81      	ldr	r3, [pc, #516]	; (8004914 <Take2RowEntries+0x340>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b0a      	cmp	r3, #10
 8004712:	d12e      	bne.n	8004772 <Take2RowEntries+0x19e>
				if ((strlen(row1entryS)) == 0) { //If the user presses comma 1st thing in string, add a leading 0
 8004714:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10f      	bne.n	800473e <Take2RowEntries+0x16a>
					strcat(row1entryS, "0.");
 800471e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004722:	4618      	mov	r0, r3
 8004724:	f7fb fdb4 	bl	8000290 <strlen>
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004730:	4413      	add	r3, r2
 8004732:	4a7b      	ldr	r2, [pc, #492]	; (8004920 <Take2RowEntries+0x34c>)
 8004734:	8811      	ldrh	r1, [r2, #0]
 8004736:	7892      	ldrb	r2, [r2, #2]
 8004738:	8019      	strh	r1, [r3, #0]
 800473a:	709a      	strb	r2, [r3, #2]
 800473c:	e019      	b.n	8004772 <Take2RowEntries+0x19e>
				} else if (strchr(row1entryS, '.') == NULL) { //If there is no comma in string, add one
 800473e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004742:	212e      	movs	r1, #46	; 0x2e
 8004744:	4618      	mov	r0, r3
 8004746:	f011 ff85 	bl	8016654 <strchr>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d110      	bne.n	8004772 <Take2RowEntries+0x19e>
					strcat(row1entryS, ".");
 8004750:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004754:	4618      	mov	r0, r3
 8004756:	f7fb fd9b 	bl	8000290 <strlen>
 800475a:	4603      	mov	r3, r0
 800475c:	461a      	mov	r2, r3
 800475e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004762:	4413      	add	r3, r2
 8004764:	496f      	ldr	r1, [pc, #444]	; (8004924 <Take2RowEntries+0x350>)
 8004766:	461a      	mov	r2, r3
 8004768:	460b      	mov	r3, r1
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e000      	b.n	8004772 <Take2RowEntries+0x19e>
				if (lastKeyPressed == 0 && strcmp(row1entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 8004770:	bf00      	nop
				}
			}
			strcpy(CombStr1, Row1StaticString);
 8004772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4618      	mov	r0, r3
 800477a:	f012 f86a 	bl	8016852 <strcpy>
			strcat(CombStr1, row1entryS);
 800477e:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8004782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f011 ff54 	bl	8016636 <strcat>
			printLCD(1, CombStr1, CURSOR_SYMBOL);
 800478e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004792:	2203      	movs	r2, #3
 8004794:	4619      	mov	r1, r3
 8004796:	2001      	movs	r0, #1
 8004798:	f000 fb18 	bl	8004dcc <printLCD>
			row1entryF = strtod(row1entryS, NULL);
 800479c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80047a0:	2100      	movs	r1, #0
 80047a2:	4618      	mov	r0, r3
 80047a4:	f010 ff36 	bl	8015614 <strtod>
 80047a8:	ec53 2b10 	vmov	r2, r3, d0
 80047ac:	4610      	mov	r0, r2
 80047ae:	4619      	mov	r1, r3
 80047b0:	f7fc fa2a 	bl	8000c08 <__aeabi_d2f>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		while (ReadKeypadVar(ALL) != ENTERKEY || row1entryF == 0.0) {
 80047ba:	2000      	movs	r0, #0
 80047bc:	f7ff fca0 	bl	8004100 <ReadKeypadVar>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b0b      	cmp	r3, #11
 80047c4:	f47f af54 	bne.w	8004670 <Take2RowEntries+0x9c>
 80047c8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80047cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d4:	f43f af4c 	beq.w	8004670 <Take2RowEntries+0x9c>
		}

		SerialBuffer[0] = '\0';
 80047d8:	2300      	movs	r3, #0
 80047da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sprintf(SerialBuffer, "%.2f", row1entryF);
 80047de:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80047e2:	f7fb fec1 	bl	8000568 <__aeabi_f2d>
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80047ee:	494e      	ldr	r1, [pc, #312]	; (8004928 <Take2RowEntries+0x354>)
 80047f0:	f011 fe88 	bl	8016504 <siprintf>
		SerialPrint("Row1: ");
 80047f4:	484d      	ldr	r0, [pc, #308]	; (800492c <Take2RowEntries+0x358>)
 80047f6:	f000 fea7 	bl	8005548 <SerialPrint>
		SerialPrintln(SerialBuffer);
 80047fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 feb8 	bl	8005574 <SerialPrintln>

		//printLCD(1, CombStr1, NO_SYMBOL); //Used to remove cursor symbol when entry is done
		row2done = TRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

		//Take 2nd row entry
		while (ReadKeypadVar(ALL) != ENTERKEY || row2entryF == 0.0) {
 800480a:	e0b6      	b.n	800497a <Take2RowEntries+0x3a6>
      if (lastKeyPressed == MANAUTOKEY)
 800480c:	4b41      	ldr	r3, [pc, #260]	; (8004914 <Take2RowEntries+0x340>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d101      	bne.n	8004818 <Take2RowEntries+0x244>
			{
    	  	  CustomerApp();
 8004814:	f7fc fe7e 	bl	8001514 <CustomerApp>
			}
			if (lastKeyPressed >= 0 && lastKeyPressed <= 9) { //If last key pressed is a number
 8004818:	4b3e      	ldr	r3, [pc, #248]	; (8004914 <Take2RowEntries+0x340>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	db2d      	blt.n	800487c <Take2RowEntries+0x2a8>
 8004820:	4b3c      	ldr	r3, [pc, #240]	; (8004914 <Take2RowEntries+0x340>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b09      	cmp	r3, #9
 8004826:	dc29      	bgt.n	800487c <Take2RowEntries+0x2a8>
				//int temp;
				//temp = atoi(row2entryS);  // Convert string to integer
				if (lastKeyPressed == 0 && strcmp(row2entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 8004828:	4b3a      	ldr	r3, [pc, #232]	; (8004914 <Take2RowEntries+0x340>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d108      	bne.n	8004842 <Take2RowEntries+0x26e>
 8004830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004834:	4938      	ldr	r1, [pc, #224]	; (8004918 <Take2RowEntries+0x344>)
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fcca 	bl	80001d0 <strcmp>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01b      	beq.n	800487a <Take2RowEntries+0x2a6>
				//Do nothing
				} else if (strlen(row2entryS) >= MAX_ENTRY_KEYS) {
 8004842:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004846:	4618      	mov	r0, r3
 8004848:	f7fb fd22 	bl	8000290 <strlen>
 800484c:	4603      	mov	r3, r0
 800484e:	2b06      	cmp	r3, #6
 8004850:	d86e      	bhi.n	8004930 <Take2RowEntries+0x35c>
					//Do nothing
				} else {
					lastKeyPressedStr[0] = '\0';
 8004852:	2300      	movs	r3, #0
 8004854:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
					sprintf(lastKeyPressedStr, "%d", lastKeyPressed);
 8004858:	4b2e      	ldr	r3, [pc, #184]	; (8004914 <Take2RowEntries+0x340>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004860:	492e      	ldr	r1, [pc, #184]	; (800491c <Take2RowEntries+0x348>)
 8004862:	4618      	mov	r0, r3
 8004864:	f011 fe4e 	bl	8016504 <siprintf>
					strcat(row2entryS, lastKeyPressedStr);
 8004868:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800486c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f011 fedf 	bl	8016636 <strcat>
				if (lastKeyPressed == 0 && strcmp(row2entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 8004878:	e05a      	b.n	8004930 <Take2RowEntries+0x35c>
 800487a:	e059      	b.n	8004930 <Take2RowEntries+0x35c>
				}
			} else if (lastKeyPressed == DELKEY) {
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <Take2RowEntries+0x340>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b0e      	cmp	r3, #14
 8004882:	d115      	bne.n	80048b0 <Take2RowEntries+0x2dc>
				if (strlen(row2entryS) > 0) {
 8004884:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00c      	beq.n	80048a8 <Take2RowEntries+0x2d4>
					row2entryS[(strlen(row2entryS)) - 1] = '\0'; //Delete last entry
 800488e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004892:	4618      	mov	r0, r3
 8004894:	f7fb fcfc 	bl	8000290 <strlen>
 8004898:	4603      	mov	r3, r0
 800489a:	3b01      	subs	r3, #1
 800489c:	33b8      	adds	r3, #184	; 0xb8
 800489e:	443b      	add	r3, r7
 80048a0:	2200      	movs	r2, #0
 80048a2:	f803 2c58 	strb.w	r2, [r3, #-88]
 80048a6:	e044      	b.n	8004932 <Take2RowEntries+0x35e>
				} else { //Reaching here means del key is pressed in 2nd row, and that row is empty. go back to prev row!
					row2done = FALSE;
 80048a8:	2300      	movs	r3, #0
 80048aa:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
					break; //Exit the while loop. This should lead back to the 1st while loop
 80048ae:	e073      	b.n	8004998 <Take2RowEntries+0x3c4>
				}
			}  else if (lastKeyPressed == COMMAKEY) {
 80048b0:	4b18      	ldr	r3, [pc, #96]	; (8004914 <Take2RowEntries+0x340>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b0a      	cmp	r3, #10
 80048b6:	d13c      	bne.n	8004932 <Take2RowEntries+0x35e>
				if ((strlen(row2entryS)) == 0) { //If the user presses comma 1st thing in string, add a leading 0
 80048b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <Take2RowEntries+0x30e>
					strcat(row2entryS, "0.");
 80048c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fb fce2 	bl	8000290 <strlen>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048d4:	4413      	add	r3, r2
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <Take2RowEntries+0x34c>)
 80048d8:	8811      	ldrh	r1, [r2, #0]
 80048da:	7892      	ldrb	r2, [r2, #2]
 80048dc:	8019      	strh	r1, [r3, #0]
 80048de:	709a      	strb	r2, [r3, #2]
 80048e0:	e027      	b.n	8004932 <Take2RowEntries+0x35e>
				} else if (strchr(row2entryS, '.') == NULL) { //If there is no comma in string, add one
 80048e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048e6:	212e      	movs	r1, #46	; 0x2e
 80048e8:	4618      	mov	r0, r3
 80048ea:	f011 feb3 	bl	8016654 <strchr>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d11e      	bne.n	8004932 <Take2RowEntries+0x35e>
					strcat(row2entryS, ".");
 80048f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fb fcc9 	bl	8000290 <strlen>
 80048fe:	4603      	mov	r3, r0
 8004900:	461a      	mov	r2, r3
 8004902:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004906:	4413      	add	r3, r2
 8004908:	4906      	ldr	r1, [pc, #24]	; (8004924 <Take2RowEntries+0x350>)
 800490a:	461a      	mov	r2, r3
 800490c:	460b      	mov	r3, r1
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	8013      	strh	r3, [r2, #0]
 8004912:	e00e      	b.n	8004932 <Take2RowEntries+0x35e>
 8004914:	20000110 	.word	0x20000110
 8004918:	0801a220 	.word	0x0801a220
 800491c:	0801a224 	.word	0x0801a224
 8004920:	0801a228 	.word	0x0801a228
 8004924:	0801a22c 	.word	0x0801a22c
 8004928:	0801a230 	.word	0x0801a230
 800492c:	0801a238 	.word	0x0801a238
				if (lastKeyPressed == 0 && strcmp(row2entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 8004930:	bf00      	nop
				}
			}
			strcpy(CombStr2, Row2StaticString);
 8004932:	f107 030c 	add.w	r3, r7, #12
 8004936:	6839      	ldr	r1, [r7, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f011 ff8a 	bl	8016852 <strcpy>
			strcat(CombStr2, row2entryS);
 800493e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004942:	f107 030c 	add.w	r3, r7, #12
 8004946:	4611      	mov	r1, r2
 8004948:	4618      	mov	r0, r3
 800494a:	f011 fe74 	bl	8016636 <strcat>
			printLCD(2, CombStr2, CURSOR_SYMBOL);
 800494e:	f107 030c 	add.w	r3, r7, #12
 8004952:	2203      	movs	r2, #3
 8004954:	4619      	mov	r1, r3
 8004956:	2002      	movs	r0, #2
 8004958:	f000 fa38 	bl	8004dcc <printLCD>
			row2entryF = strtod(row2entryS, NULL);
 800495c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004960:	2100      	movs	r1, #0
 8004962:	4618      	mov	r0, r3
 8004964:	f010 fe56 	bl	8015614 <strtod>
 8004968:	ec53 2b10 	vmov	r2, r3, d0
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	f7fc f94a 	bl	8000c08 <__aeabi_d2f>
 8004974:	4603      	mov	r3, r0
 8004976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		while (ReadKeypadVar(ALL) != ENTERKEY || row2entryF == 0.0) {
 800497a:	2000      	movs	r0, #0
 800497c:	f7ff fbc0 	bl	8004100 <ReadKeypadVar>
 8004980:	4603      	mov	r3, r0
 8004982:	2b0b      	cmp	r3, #11
 8004984:	f47f af42 	bne.w	800480c <Take2RowEntries+0x238>
 8004988:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800498c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	f43f af3a 	beq.w	800480c <Take2RowEntries+0x238>
		}
		SerialBuffer[0] = '\0';
 8004998:	2300      	movs	r3, #0
 800499a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sprintf(SerialBuffer, "%.2f", row2entryF);
 800499e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80049a2:	f7fb fde1 	bl	8000568 <__aeabi_f2d>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80049ae:	490e      	ldr	r1, [pc, #56]	; (80049e8 <Take2RowEntries+0x414>)
 80049b0:	f011 fda8 	bl	8016504 <siprintf>
		SerialPrint("Row2: ");
 80049b4:	480d      	ldr	r0, [pc, #52]	; (80049ec <Take2RowEntries+0x418>)
 80049b6:	f000 fdc7 	bl	8005548 <SerialPrint>
		SerialPrintln(SerialBuffer);
 80049ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fdd8 	bl	8005574 <SerialPrintln>
	while (row2done == FALSE) {
 80049c4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f43f ae49 	beq.w	8004660 <Take2RowEntries+0x8c>
	}
	// Update global variables
	LitersVar = row1entryF;
 80049ce:	4a08      	ldr	r2, [pc, #32]	; (80049f0 <Take2RowEntries+0x41c>)
 80049d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80049d4:	6013      	str	r3, [r2, #0]
	DensityVar = row2entryF;
 80049d6:	4a07      	ldr	r2, [pc, #28]	; (80049f4 <Take2RowEntries+0x420>)
 80049d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049dc:	6013      	str	r3, [r2, #0]
}
 80049de:	bf00      	nop
 80049e0:	37b8      	adds	r7, #184	; 0xb8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	0801a230 	.word	0x0801a230
 80049ec:	0801a240 	.word	0x0801a240
 80049f0:	20000378 	.word	0x20000378
 80049f4:	2000037c 	.word	0x2000037c

080049f8 <LCD_Init>:
  0B01010
};


//Functions for LCD System
void LCD_Init() {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
	// Assuming GPIO has been initialized

	HAL_Delay(15); // Wait for more than 15ms after Vcc rises to 4.5V
 80049fc:	200f      	movs	r0, #15
 80049fe:	f003 ff2f 	bl	8008860 <HAL_Delay>

	// Function set: 8-bit mode
	LCD_SendHalfByte(0x03);
 8004a02:	2003      	movs	r0, #3
 8004a04:	f000 f8ee 	bl	8004be4 <LCD_SendHalfByte>
	HAL_Delay(5); // Wait for more than 4.1ms
 8004a08:	2005      	movs	r0, #5
 8004a0a:	f003 ff29 	bl	8008860 <HAL_Delay>
	LCD_SendHalfByte(0x03);
 8004a0e:	2003      	movs	r0, #3
 8004a10:	f000 f8e8 	bl	8004be4 <LCD_SendHalfByte>
	HAL_Delay(1); // Wait for more than 100us
 8004a14:	2001      	movs	r0, #1
 8004a16:	f003 ff23 	bl	8008860 <HAL_Delay>
	LCD_SendHalfByte(0x03);
 8004a1a:	2003      	movs	r0, #3
 8004a1c:	f000 f8e2 	bl	8004be4 <LCD_SendHalfByte>

	// Function set: Switch to 4-bit mode
	LCD_SendHalfByte(0x02);
 8004a20:	2002      	movs	r0, #2
 8004a22:	f000 f8df 	bl	8004be4 <LCD_SendHalfByte>

	// Complete function set: 4-bit mode, 2-line display, 5x8 font
	LCD_SendCommand(0x28);
 8004a26:	2028      	movs	r0, #40	; 0x28
 8004a28:	f000 f838 	bl	8004a9c <LCD_SendCommand>

	// Display ON, cursor OFF, blink OFF
	LCD_SendCommand(0x0C);
 8004a2c:	200c      	movs	r0, #12
 8004a2e:	f000 f835 	bl	8004a9c <LCD_SendCommand>

	// Entry mode set: Increment cursor, no shift
	LCD_SendCommand(0x06);
 8004a32:	2006      	movs	r0, #6
 8004a34:	f000 f832 	bl	8004a9c <LCD_SendCommand>

	// Clear display
	LCD_SendCommand(0x01);
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f000 f82f 	bl	8004a9c <LCD_SendCommand>
	HAL_Delay(2); // Clearing the display takes 1.52ms
 8004a3e:	2002      	movs	r0, #2
 8004a40:	f003 ff0e 	bl	8008860 <HAL_Delay>

	LCD_CreateCustomChar(0, Custom_Blank_Symbol);
 8004a44:	490f      	ldr	r1, [pc, #60]	; (8004a84 <LCD_Init+0x8c>)
 8004a46:	2000      	movs	r0, #0
 8004a48:	f000 f864 	bl	8004b14 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(1, Custom_Enter_Symbol);
 8004a4c:	490e      	ldr	r1, [pc, #56]	; (8004a88 <LCD_Init+0x90>)
 8004a4e:	2001      	movs	r0, #1
 8004a50:	f000 f860 	bl	8004b14 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(2, Custom_Reclean_Symbol);
 8004a54:	490d      	ldr	r1, [pc, #52]	; (8004a8c <LCD_Init+0x94>)
 8004a56:	2002      	movs	r0, #2
 8004a58:	f000 f85c 	bl	8004b14 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(3, Custom_Cursor_Symbol);
 8004a5c:	490c      	ldr	r1, [pc, #48]	; (8004a90 <LCD_Init+0x98>)
 8004a5e:	2003      	movs	r0, #3
 8004a60:	f000 f858 	bl	8004b14 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(4, Custom_demo_cursor_Symbol);
 8004a64:	490b      	ldr	r1, [pc, #44]	; (8004a94 <LCD_Init+0x9c>)
 8004a66:	2004      	movs	r0, #4
 8004a68:	f000 f854 	bl	8004b14 <LCD_CreateCustomChar>

	pwm(LCD_LED_PWM,50);
 8004a6c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8004a98 <LCD_Init+0xa0>
 8004a70:	2004      	movs	r0, #4
 8004a72:	f002 fc77 	bl	8007364 <pwm>
	pwm(LCD_Contrast_PWM,10);
 8004a76:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f002 fc72 	bl	8007364 <pwm>
}
 8004a80:	bf00      	nop
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	200004d4 	.word	0x200004d4
 8004a88:	20000114 	.word	0x20000114
 8004a8c:	2000011c 	.word	0x2000011c
 8004a90:	20000124 	.word	0x20000124
 8004a94:	2000012c 	.word	0x2000012c
 8004a98:	42480000 	.word	0x42480000

08004a9c <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_Output_GPIO_Port, LCD_RS_Output_Pin,
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	480a      	ldr	r0, [pc, #40]	; (8004ad4 <LCD_SendCommand+0x38>)
 8004aac:	f005 fb2c 	bl	800a108 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET); // RS = 0 for command
	//HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET); // RW = 0 for write
	LCD_SendHalfByte(cmd >> 4); // Send higher nibble
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f894 	bl	8004be4 <LCD_SendHalfByte>
	LCD_SendHalfByte(cmd & 0x0F); // Send lower nibble
 8004abc:	79fb      	ldrb	r3, [r7, #7]
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f88d 	bl	8004be4 <LCD_SendHalfByte>
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40020c00 	.word	0x40020c00

08004ad8 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Output_GPIO_Port, LCD_RS_Output_Pin, GPIO_PIN_SET); // RS = 1 for data
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	480a      	ldr	r0, [pc, #40]	; (8004b10 <LCD_SendData+0x38>)
 8004ae8:	f005 fb0e 	bl	800a108 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET); // RW = 0 for write

	LCD_SendHalfByte(data >> 4); // Send higher nibble
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f876 	bl	8004be4 <LCD_SendHalfByte>
	LCD_SendHalfByte(data & 0x0F); // Send lower nibble
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f86f 	bl	8004be4 <LCD_SendHalfByte>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40020c00 	.word	0x40020c00

08004b14 <LCD_CreateCustomChar>:

void LCD_CreateCustomChar(uint8_t location, uint8_t charmap[]) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	6039      	str	r1, [r7, #0]
 8004b1e:	71fb      	strb	r3, [r7, #7]
	location &= 0x07; // Only 8 locations (0-7)
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(0x40 | (location << 3)); // Set CGRAM address
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	b25b      	sxtb	r3, r3
 8004b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff ffb0 	bl	8004a9c <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e009      	b.n	8004b56 <LCD_CreateCustomChar+0x42>
		LCD_SendData(charmap[i]);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	4413      	add	r3, r2
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ffc4 	bl	8004ad8 <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b07      	cmp	r3, #7
 8004b5a:	ddf2      	ble.n	8004b42 <LCD_CreateCustomChar+0x2e>
	}
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
	...

08004b68 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	460a      	mov	r2, r1
 8004b72:	71fb      	strb	r3, [r7, #7]
 8004b74:	4613      	mov	r3, r2
 8004b76:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	// Each row has different starting addresses
	switch (row) {
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d819      	bhi.n	8004bb2 <LCD_SetCursor+0x4a>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <LCD_SetCursor+0x1c>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004b95 	.word	0x08004b95
 8004b88:	08004b9b 	.word	0x08004b9b
 8004b8c:	08004ba3 	.word	0x08004ba3
 8004b90:	08004bab 	.word	0x08004bab
	case 0:
		address = 0x00 + col;
 8004b94:	79bb      	ldrb	r3, [r7, #6]
 8004b96:	73fb      	strb	r3, [r7, #15]
		break; // 1st row starting from 0x00
 8004b98:	e00d      	b.n	8004bb6 <LCD_SetCursor+0x4e>
	case 1:
		address = 0x40 + col;
 8004b9a:	79bb      	ldrb	r3, [r7, #6]
 8004b9c:	3340      	adds	r3, #64	; 0x40
 8004b9e:	73fb      	strb	r3, [r7, #15]
		break; // 2nd row starting from 0x40
 8004ba0:	e009      	b.n	8004bb6 <LCD_SetCursor+0x4e>
	case 2:
		address = 0x14 + col;
 8004ba2:	79bb      	ldrb	r3, [r7, #6]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	73fb      	strb	r3, [r7, #15]
		break; // 3rd row starting from 0x14
 8004ba8:	e005      	b.n	8004bb6 <LCD_SetCursor+0x4e>
	case 3:
		address = 0x54 + col;
 8004baa:	79bb      	ldrb	r3, [r7, #6]
 8004bac:	3354      	adds	r3, #84	; 0x54
 8004bae:	73fb      	strb	r3, [r7, #15]
		break; // 4th row starting from 0x54
 8004bb0:	e001      	b.n	8004bb6 <LCD_SetCursor+0x4e>
	default:
		address = 0x00; // Default to first row if invalid row number
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
	}
	// Send command to set DDRAM address
	LCD_SendCommand(0x80 | address);
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff ff6c 	bl	8004a9c <LCD_SendCommand>
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <LCD_Clear>:

void LCD_Clear(void) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
	LCD_ClearStringBuffer();
 8004bd0:	f000 f85e 	bl	8004c90 <LCD_ClearStringBuffer>
	LCD_SendCommand(0x01); // Clear display command
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	f7ff ff61 	bl	8004a9c <LCD_SendCommand>
	HAL_Delay(2); // Wait for the command to be processed (clearing takes time)
 8004bda:	2002      	movs	r0, #2
 8004bdc:	f003 fe40 	bl	8008860 <HAL_Delay>
}
 8004be0:	bf00      	nop
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <LCD_SendHalfByte>:
void LCD_SendHalfByte(uint8_t data) {
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	4603      	mov	r3, r0
 8004bec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_Output_GPIO_Port, LCD_D4_Output_Pin,
			(data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004bee:	79fb      	ldrb	r3, [r7, #7]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_Output_GPIO_Port, LCD_D4_Output_Pin,
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2108      	movs	r1, #8
 8004bfa:	4824      	ldr	r0, [pc, #144]	; (8004c8c <LCD_SendHalfByte+0xa8>)
 8004bfc:	f005 fa84 	bl	800a108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_Output_GPIO_Port, LCD_D5_Output_Pin,
			(data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	105b      	asrs	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_Output_GPIO_Port, LCD_D5_Output_Pin,
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	2110      	movs	r1, #16
 8004c10:	481e      	ldr	r0, [pc, #120]	; (8004c8c <LCD_SendHalfByte+0xa8>)
 8004c12:	f005 fa79 	bl	800a108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_Output_GPIO_Port, LCD_D6_Output_Pin,
			(data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	109b      	asrs	r3, r3, #2
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_Output_GPIO_Port, LCD_D6_Output_Pin,
 8004c22:	461a      	mov	r2, r3
 8004c24:	2140      	movs	r1, #64	; 0x40
 8004c26:	4819      	ldr	r0, [pc, #100]	; (8004c8c <LCD_SendHalfByte+0xa8>)
 8004c28:	f005 fa6e 	bl	800a108 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_Output_GPIO_Port, LCD_D7_Output_Pin,
			(data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004c2c:	79fb      	ldrb	r3, [r7, #7]
 8004c2e:	10db      	asrs	r3, r3, #3
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_Output_GPIO_Port, LCD_D7_Output_Pin,
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2180      	movs	r1, #128	; 0x80
 8004c3c:	4813      	ldr	r0, [pc, #76]	; (8004c8c <LCD_SendHalfByte+0xa8>)
 8004c3e:	f005 fa63 	bl	800a108 <HAL_GPIO_WritePin>
	// Pulse the Enable pin
	HAL_GPIO_WritePin(LCD_EN_Output_GPIO_Port, LCD_EN_Output_Pin, GPIO_PIN_SET);
 8004c42:	2201      	movs	r2, #1
 8004c44:	2104      	movs	r1, #4
 8004c46:	4811      	ldr	r0, [pc, #68]	; (8004c8c <LCD_SendHalfByte+0xa8>)
 8004c48:	f005 fa5e 	bl	800a108 <HAL_GPIO_WritePin>
	//HAL_Delay(1); // Delay for enable pulse width
	for (uint16_t i = 0; i < 400; i++){ //140 is supposed to be 10uS
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	81fb      	strh	r3, [r7, #14]
 8004c50:	e003      	b.n	8004c5a <LCD_SendHalfByte+0x76>
		__NOP();
 8004c52:	bf00      	nop
	for (uint16_t i = 0; i < 400; i++){ //140 is supposed to be 10uS
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	3301      	adds	r3, #1
 8004c58:	81fb      	strh	r3, [r7, #14]
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c60:	d3f7      	bcc.n	8004c52 <LCD_SendHalfByte+0x6e>
	}
	HAL_GPIO_WritePin(LCD_EN_Output_GPIO_Port, LCD_EN_Output_Pin,
 8004c62:	2200      	movs	r2, #0
 8004c64:	2104      	movs	r1, #4
 8004c66:	4809      	ldr	r0, [pc, #36]	; (8004c8c <LCD_SendHalfByte+0xa8>)
 8004c68:	f005 fa4e 	bl	800a108 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	//HAL_Delay(1);
	for (uint16_t i = 0; i < 400; i++){
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	81bb      	strh	r3, [r7, #12]
 8004c70:	e003      	b.n	8004c7a <LCD_SendHalfByte+0x96>
		__NOP();
 8004c72:	bf00      	nop
	for (uint16_t i = 0; i < 400; i++){
 8004c74:	89bb      	ldrh	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	81bb      	strh	r3, [r7, #12]
 8004c7a:	89bb      	ldrh	r3, [r7, #12]
 8004c7c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004c80:	d3f7      	bcc.n	8004c72 <LCD_SendHalfByte+0x8e>
	}
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40020c00 	.word	0x40020c00

08004c90 <LCD_ClearStringBuffer>:

void LCD_ClearStringBuffer(void) {
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(stringBuffer); i++) {
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
 8004c9a:	e007      	b.n	8004cac <LCD_ClearStringBuffer+0x1c>
		stringBuffer[i] = '\0';
 8004c9c:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <LCD_ClearStringBuffer+0x30>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(stringBuffer); i++) {
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b14      	cmp	r3, #20
 8004cb0:	d9f4      	bls.n	8004c9c <LCD_ClearStringBuffer+0xc>
	}

//	memset(stringBuffer, 0, 21);
}
 8004cb2:	bf00      	nop
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	200004bc 	.word	0x200004bc

08004cc4 <printLCDInt>:
		}

	}
}

void printLCDInt(int row, char *data, int number,int totalCycle) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	; 0x38
 8004cc8:	af02      	add	r7, sp, #8
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
    int localcounter = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    char numberStr[22];
    if (row < 0 || row >= LCD_ROW_COUNT) {
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db6c      	blt.n	8004db6 <printLCDInt+0xf2>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	dc69      	bgt.n	8004db6 <printLCDInt+0xf2>
        return;
    }
    strncpy(lastLCDData[row], data, MAX_STRING_LENGTH - 1);
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	00da      	lsls	r2, r3, #3
 8004cec:	1ad2      	subs	r2, r2, r3
 8004cee:	4b34      	ldr	r3, [pc, #208]	; (8004dc0 <printLCDInt+0xfc>)
 8004cf0:	4413      	add	r3, r2
 8004cf2:	2214      	movs	r2, #20
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f011 fccb 	bl	8016692 <strncpy>
    lastLCDData[row][MAX_STRING_LENGTH - 1] = '\0';
 8004cfc:	4930      	ldr	r1, [pc, #192]	; (8004dc0 <printLCDInt+0xfc>)
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4613      	mov	r3, r2
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	4413      	add	r3, r2
 8004d06:	00da      	lsls	r2, r3, #3
 8004d08:	1ad2      	subs	r2, r2, r3
 8004d0a:	188b      	adds	r3, r1, r2
 8004d0c:	3314      	adds	r3, #20
 8004d0e:	2200      	movs	r2, #0
 8004d10:	701a      	strb	r2, [r3, #0]
    if(totalCycle > 0)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	dd09      	ble.n	8004d2c <printLCDInt+0x68>
    	snprintf(numberStr, sizeof(numberStr), "%d/%d", number,totalCycle);
 8004d18:	f107 0010 	add.w	r0, r7, #16
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <printLCDInt+0x100>)
 8004d24:	2116      	movs	r1, #22
 8004d26:	f011 fbb9 	bl	801649c <sniprintf>
 8004d2a:	e006      	b.n	8004d3a <printLCDInt+0x76>
    else
       	snprintf(numberStr, sizeof(numberStr), "%d", number);
 8004d2c:	f107 0010 	add.w	r0, r7, #16
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a25      	ldr	r2, [pc, #148]	; (8004dc8 <printLCDInt+0x104>)
 8004d34:	2116      	movs	r1, #22
 8004d36:	f011 fbb1 	bl	801649c <sniprintf>
    LCD_SetCursor(row, 0);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff11 	bl	8004b68 <LCD_SetCursor>
    	// Print the data
    	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004d46:	e009      	b.n	8004d5c <printLCDInt+0x98>
    		LCD_SendData(*data++);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	60ba      	str	r2, [r7, #8]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fec1 	bl	8004ad8 <LCD_SendData>
    		localcounter++;
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	3301      	adds	r3, #1
 8004d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <printLCDInt+0xa6>
 8004d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d66:	2b13      	cmp	r3, #19
 8004d68:	ddee      	ble.n	8004d48 <printLCDInt+0x84>
    	}
    	for (int i = 0; numberStr[i] != '\0' && localcounter < LCD_COLUMN_COUNT; i++) {
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	e00d      	b.n	8004d8c <printLCDInt+0xc8>
    	        LCD_SendData(numberStr[i]);
 8004d70:	f107 0210 	add.w	r2, r7, #16
 8004d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d76:	4413      	add	r3, r2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff feac 	bl	8004ad8 <LCD_SendData>
    	        localcounter++;
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	3301      	adds	r3, #1
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    	for (int i = 0; numberStr[i] != '\0' && localcounter < LCD_COLUMN_COUNT; i++) {
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	3301      	adds	r3, #1
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d8c:	f107 0210 	add.w	r2, r7, #16
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	4413      	add	r3, r2
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d009      	beq.n	8004dae <printLCDInt+0xea>
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	2b13      	cmp	r3, #19
 8004d9e:	dde7      	ble.n	8004d70 <printLCDInt+0xac>
    	LCD_SendData(numberStr);
    	localcounter++;
    	}
    	*/
    	//Fill rest of column with empty space
    	while(localcounter < LCD_COLUMN_COUNT){
 8004da0:	e005      	b.n	8004dae <printLCDInt+0xea>
    		LCD_SendData(0);
 8004da2:	2000      	movs	r0, #0
 8004da4:	f7ff fe98 	bl	8004ad8 <LCD_SendData>
    		localcounter++;
 8004da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004daa:	3301      	adds	r3, #1
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    	while(localcounter < LCD_COLUMN_COUNT){
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	2b13      	cmp	r3, #19
 8004db2:	ddf6      	ble.n	8004da2 <printLCDInt+0xde>
 8004db4:	e000      	b.n	8004db8 <printLCDInt+0xf4>
        return;
 8004db6:	bf00      	nop
    }
}
 8004db8:	3730      	adds	r7, #48	; 0x30
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200003fc 	.word	0x200003fc
 8004dc4:	0801a258 	.word	0x0801a258
 8004dc8:	0801a260 	.word	0x0801a260

08004dcc <printLCD>:
		localcounter++;
	}
}
*/

void printLCD(int row, char *data, int smiley) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
	int localcounter = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
	if (row < 0 || row >= LCD_ROW_COUNT) {
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db58      	blt.n	8004e94 <printLCD+0xc8>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	dc55      	bgt.n	8004e94 <printLCD+0xc8>
		return; // Row is out of bounds
	}
	// Store the data in the global array lastLCDData
	strncpy(lastLCDData[row], data, MAX_STRING_LENGTH - 1);
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	00da      	lsls	r2, r3, #3
 8004df2:	1ad2      	subs	r2, r2, r3
 8004df4:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <printLCD+0xd0>)
 8004df6:	4413      	add	r3, r2
 8004df8:	2214      	movs	r2, #20
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f011 fc48 	bl	8016692 <strncpy>
	lastLCDData[row][MAX_STRING_LENGTH - 1] = '\0'; // Ensure null termination
 8004e02:	4926      	ldr	r1, [pc, #152]	; (8004e9c <printLCD+0xd0>)
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4613      	mov	r3, r2
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00da      	lsls	r2, r3, #3
 8004e0e:	1ad2      	subs	r2, r2, r3
 8004e10:	188b      	adds	r3, r1, r2
 8004e12:	3314      	adds	r3, #20
 8004e14:	2200      	movs	r2, #0
 8004e16:	701a      	strb	r2, [r3, #0]
	// Store the smiley (custom character) code in lastLCDCustom
	lastLCDCustom[row] = smiley;
 8004e18:	4921      	ldr	r1, [pc, #132]	; (8004ea0 <printLCD+0xd4>)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Set cursor position
	LCD_SetCursor(row, 0);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fe9d 	bl	8004b68 <LCD_SetCursor>
	// Print the data
	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004e2e:	e009      	b.n	8004e44 <printLCD+0x78>
		LCD_SendData(*data++);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	60ba      	str	r2, [r7, #8]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fe4d 	bl	8004ad8 <LCD_SendData>
		localcounter++;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	3301      	adds	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <printLCD+0x86>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	2b13      	cmp	r3, #19
 8004e50:	ddee      	ble.n	8004e30 <printLCD+0x64>
	}
	// Check the length of the data and print the smiley if there is space
	if (strlen(lastLCDData[row]) < LCD_COLUMN_COUNT) {
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4613      	mov	r3, r2
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	4413      	add	r3, r2
 8004e5a:	00da      	lsls	r2, r3, #3
 8004e5c:	1ad2      	subs	r2, r2, r3
 8004e5e:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <printLCD+0xd0>)
 8004e60:	4413      	add	r3, r2
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fa14 	bl	8000290 <strlen>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b13      	cmp	r3, #19
 8004e6c:	d80e      	bhi.n	8004e8c <printLCD+0xc0>
		LCD_SendData(smiley);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fe30 	bl	8004ad8 <LCD_SendData>
		localcounter++;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
	}
	//Fill rest of column with empty space
	while(localcounter < LCD_COLUMN_COUNT){
 8004e7e:	e005      	b.n	8004e8c <printLCD+0xc0>
		LCD_SendData(0);
 8004e80:	2000      	movs	r0, #0
 8004e82:	f7ff fe29 	bl	8004ad8 <LCD_SendData>
		localcounter++;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	617b      	str	r3, [r7, #20]
	while(localcounter < LCD_COLUMN_COUNT){
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2b13      	cmp	r3, #19
 8004e90:	ddf6      	ble.n	8004e80 <printLCD+0xb4>
 8004e92:	e000      	b.n	8004e96 <printLCD+0xca>
		return; // Row is out of bounds
 8004e94:	bf00      	nop
	}
}
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200003fc 	.word	0x200003fc
 8004ea0:	20000450 	.word	0x20000450

08004ea4 <LCDRGBControl>:

void LCDRGBControl(int brightness) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	if (brightness > 100) {
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	dd02      	ble.n	8004eb8 <LCDRGBControl+0x14>
		brightness = 100;
 8004eb2:	2364      	movs	r3, #100	; 0x64
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	e004      	b.n	8004ec2 <LCDRGBControl+0x1e>
		} else if (brightness < 0) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da01      	bge.n	8004ec2 <LCDRGBControl+0x1e>
			brightness = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
		}
		int contrast = 100 - brightness;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004ec8:	60fb      	str	r3, [r7, #12]
	pwm(LCD_Contrast_PWM, contrast);  //Pins are Common Anode
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed8:	2003      	movs	r0, #3
 8004eda:	f002 fa43 	bl	8007364 <pwm>
}
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <powerLEDControl>:
	for (int i = 0; i < LCD_ROW_COUNT; i++) {
		printLCD(i, lastLCDData[i], lastLCDCustom[i]);
	}
}

void powerLEDControl(int state) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	if (state == OFF) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d107      	bne.n	8004f06 <powerLEDControl+0x1e>
		digitalWrite(Power_LED_Output, LOW);
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7fe f855 	bl	8002fa8 <digitalWrite>
		isPowerLEDOn = FALSE;
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <powerLEDControl+0x3c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
	} else if (state == ON) {
		digitalWrite(Power_LED_Output, HIGH);
		isPowerLEDOn = TRUE;
	}
}
 8004f04:	e009      	b.n	8004f1a <powerLEDControl+0x32>
	} else if (state == ON) {
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <powerLEDControl+0x32>
		digitalWrite(Power_LED_Output, HIGH);
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	2000      	movs	r0, #0
 8004f10:	f7fe f84a 	bl	8002fa8 <digitalWrite>
		isPowerLEDOn = TRUE;
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <powerLEDControl+0x3c>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200004a1 	.word	0x200004a1

08004f28 <controlLCDContrast>:

void controlLCDContrast(int contrastLevel) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	if (contrastLevel > 100) {
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	dd02      	ble.n	8004f3c <controlLCDContrast+0x14>
		contrastLevel = 100;
 8004f36:	2364      	movs	r3, #100	; 0x64
 8004f38:	607b      	str	r3, [r7, #4]
 8004f3a:	e004      	b.n	8004f46 <controlLCDContrast+0x1e>
	} else if (contrastLevel < 0) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	da01      	bge.n	8004f46 <controlLCDContrast+0x1e>
		contrastLevel = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
	}
	int contrast = 100 - contrastLevel;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8004f4c:	60fb      	str	r3, [r7, #12]
	pwm(LCD_Contrast_PWM, contrast);  //Change LCD contrast
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f58:	eeb0 0a67 	vmov.f32	s0, s15
 8004f5c:	2003      	movs	r0, #3
 8004f5e:	f002 fa01 	bl	8007364 <pwm>
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <SendTareWeight>:
/**
  * @brief  Function to send the Weight after Sending TARE command.
  * @Param   TareWeight which is the total weight or the weight when not zero
  * @retval None
  */
static void SendTareWeight(int Tareweight) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
    char buffer[7]= {0};// Allocate enough space for the number (max 10 digits)
 8004f74:	2300      	movs	r3, #0
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	f107 030c 	add.w	r3, r7, #12
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	460a      	mov	r2, r1
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	460a      	mov	r2, r1
 8004f84:	709a      	strb	r2, [r3, #2]
    sprintf(buffer, "%d", Tareweight);  // Convert integer to string
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <SendTareWeight+0x48>)
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f011 fab8 	bl	8016504 <siprintf>

    // Transmit data using DMA
    if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*)buffer,7) != HAL_OK) {
 8004f94:	f107 0308 	add.w	r3, r7, #8
 8004f98:	2207      	movs	r2, #7
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4806      	ldr	r0, [pc, #24]	; (8004fb8 <SendTareWeight+0x4c>)
 8004f9e:	f007 fbe5 	bl	800c76c <HAL_UART_Transmit_DMA>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <SendTareWeight+0x40>
        Error_Handler();  // Handle errors if transmission fails
 8004fa8:	f002 f9d6 	bl	8007358 <Error_Handler>
    }
}
 8004fac:	bf00      	nop
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	0801a264 	.word	0x0801a264
 8004fb8:	20002f24 	.word	0x20002f24

08004fbc <TareAll>:
/**
  * @brief  Function to send the "TARE" command using interrupt-based transmission.
  * @retval None
  */
void TareAll(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
	 HAL_Delay(2000);
 8004fc2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004fc6:	f003 fc4b 	bl	8008860 <HAL_Delay>
    // Start interrupt-based transmission of the "TARE" string
	   uint8_t tare[4] = "TARE";
 8004fca:	4b10      	ldr	r3, [pc, #64]	; (800500c <TareAll+0x50>)
 8004fcc:	607b      	str	r3, [r7, #4]

	   //sprintf(char_buffer, "%s%d", Data,Total_Weight);
	   if(HAL_UART_Transmit_DMA(&huart3, tare, sizeof(tare))!= HAL_OK)
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	480e      	ldr	r0, [pc, #56]	; (8005010 <TareAll+0x54>)
 8004fd6:	f007 fbc9 	bl	800c76c <HAL_UART_Transmit_DMA>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <TareAll+0x28>
	   {
			  Error_Handler();
 8004fe0:	f002 f9ba 	bl	8007358 <Error_Handler>
	   }
	   HAL_Delay(10);
 8004fe4:	200a      	movs	r0, #10
 8004fe6:	f003 fc3b 	bl	8008860 <HAL_Delay>
	   SendTareWeight(tareSend);
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <TareAll+0x58>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ffbc 	bl	8004f6c <SendTareWeight>
	   SerialPrintln("Taring the system");
 8004ff4:	4808      	ldr	r0, [pc, #32]	; (8005018 <TareAll+0x5c>)
 8004ff6:	f000 fabd 	bl	8005574 <SerialPrintln>
	   HAL_Delay(1000);
 8004ffa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ffe:	f003 fc2f 	bl	8008860 <HAL_Delay>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	45524154 	.word	0x45524154
 8005010:	20002f24 	.word	0x20002f24
 8005014:	2000039c 	.word	0x2000039c
 8005018:	0801a268 	.word	0x0801a268

0800501c <ReadLoadCellAVG>:
  * @brief  Processes the received 8-byte message and displays the weight if valid.
  * @param  message: Pointer to the received 8-byte message buffer.
  * @retval None
  */
void ReadLoadCellAVG()
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
	int current_A = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
	//startUARTReception();
    uint32_t syncWord = (rxBuffer[0] << 24) | (rxBuffer[1] << 16) | (rxBuffer[2] << 8) | rxBuffer[3];
 8005026:	4b22      	ldr	r3, [pc, #136]	; (80050b0 <ReadLoadCellAVG+0x94>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	061a      	lsls	r2, r3, #24
 800502c:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <ReadLoadCellAVG+0x94>)
 800502e:	785b      	ldrb	r3, [r3, #1]
 8005030:	041b      	lsls	r3, r3, #16
 8005032:	431a      	orrs	r2, r3
 8005034:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <ReadLoadCellAVG+0x94>)
 8005036:	789b      	ldrb	r3, [r3, #2]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	4313      	orrs	r3, r2
 800503c:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <ReadLoadCellAVG+0x94>)
 800503e:	78d2      	ldrb	r2, [r2, #3]
 8005040:	4313      	orrs	r3, r2
 8005042:	607b      	str	r3, [r7, #4]
    if (syncWord != SYNCWORD)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800504a:	d129      	bne.n	80050a0 <ReadLoadCellAVG+0x84>
    {
        return;
    }
    //Extract the weight values
    int16_t value1 = (rxBuffer[4] << 8) | rxBuffer[5];  // First weight value
 800504c:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <ReadLoadCellAVG+0x94>)
 800504e:	791b      	ldrb	r3, [r3, #4]
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	b21a      	sxth	r2, r3
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <ReadLoadCellAVG+0x94>)
 8005056:	795b      	ldrb	r3, [r3, #5]
 8005058:	b21b      	sxth	r3, r3
 800505a:	4313      	orrs	r3, r2
 800505c:	807b      	strh	r3, [r7, #2]
    int16_t value2 = (rxBuffer[6] << 8) | rxBuffer[7];  // Repeated weight value
 800505e:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <ReadLoadCellAVG+0x94>)
 8005060:	799b      	ldrb	r3, [r3, #6]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	b21a      	sxth	r2, r3
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <ReadLoadCellAVG+0x94>)
 8005068:	79db      	ldrb	r3, [r3, #7]
 800506a:	b21b      	sxth	r3, r3
 800506c:	4313      	orrs	r3, r2
 800506e:	803b      	strh	r3, [r7, #0]
    if (value1 != value2)
 8005070:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005074:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d113      	bne.n	80050a4 <ReadLoadCellAVG+0x88>
    {
        return;
    }
   // value1 = value1 * CORRECTION_FACTOR;
    for(int i = 0; i < AVERAGE; i++){
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]
 8005080:	e007      	b.n	8005092 <ReadLoadCellAVG+0x76>
       	current_A = current_A + value1;
 8005082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < AVERAGE; i++){
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	3301      	adds	r3, #1
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	ddf4      	ble.n	8005082 <ReadLoadCellAVG+0x66>
    }
    current_A = current_A / AVERAGE;
    //futureFilter(current_A);
    Total_Weight = current_A;
 8005098:	4a06      	ldr	r2, [pc, #24]	; (80050b4 <ReadLoadCellAVG+0x98>)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	e002      	b.n	80050a6 <ReadLoadCellAVG+0x8a>
        return;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <ReadLoadCellAVG+0x8a>
        return;
 80050a4:	bf00      	nop
    // Re-enable UART reception for the next message
    //startUARTReception();
}
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	20002b7c 	.word	0x20002b7c
 80050b4:	20000364 	.word	0x20000364

080050b8 <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]
 80050c2:	e007      	b.n	80050d4 <clear_buffer+0x1c>
 80050c4:	4a08      	ldr	r2, [pc, #32]	; (80050e8 <clear_buffer+0x30>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4413      	add	r3, r2
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3301      	adds	r3, #1
 80050d2:	607b      	str	r3, [r7, #4]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b7f      	cmp	r3, #127	; 0x7f
 80050d8:	ddf4      	ble.n	80050c4 <clear_buffer+0xc>
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	20002764 	.word	0x20002764

080050ec <send_uart>:

void send_uart (char *string)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f7fb f8cb 	bl	8000290 <strlen>
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	b29a      	uxth	r2, r3
 8005102:	f04f 33ff 	mov.w	r3, #4294967295
 8005106:	6879      	ldr	r1, [r7, #4]
 8005108:	4803      	ldr	r0, [pc, #12]	; (8005118 <send_uart+0x2c>)
 800510a:	f007 faa3 	bl	800c654 <HAL_UART_Transmit>
}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20002edc 	.word	0x20002edc

0800511c <sd_Card_Check>:


void sd_Card_Check(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af02      	add	r7, sp, #8
	 fresult = f_mount(&fs, "/", 1);
 8005122:	2201      	movs	r2, #1
 8005124:	4945      	ldr	r1, [pc, #276]	; (800523c <sd_Card_Check+0x120>)
 8005126:	4846      	ldr	r0, [pc, #280]	; (8005240 <sd_Card_Check+0x124>)
 8005128:	f00b f9b6 	bl	8010498 <f_mount>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	4b44      	ldr	r3, [pc, #272]	; (8005244 <sd_Card_Check+0x128>)
 8005132:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK){
 8005134:	4b43      	ldr	r3, [pc, #268]	; (8005244 <sd_Card_Check+0x128>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01c      	beq.n	8005176 <sd_Card_Check+0x5a>
				send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 800513c:	4842      	ldr	r0, [pc, #264]	; (8005248 <sd_Card_Check+0x12c>)
 800513e:	f7ff ffd5 	bl	80050ec <send_uart>
				if (f_mkfs("", FM_FAT32, 0, work, sizeof(work)) != FR_OK) {
 8005142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005146:	9300      	str	r3, [sp, #0]
 8005148:	4b40      	ldr	r3, [pc, #256]	; (800524c <sd_Card_Check+0x130>)
 800514a:	2200      	movs	r2, #0
 800514c:	2102      	movs	r1, #2
 800514e:	4840      	ldr	r0, [pc, #256]	; (8005250 <sd_Card_Check+0x134>)
 8005150:	f00c f99c 	bl	801148c <f_mkfs>
					// Handle format error
				}
				fresult = f_mount(&fs, "/", 1);
 8005154:	2201      	movs	r2, #1
 8005156:	4939      	ldr	r1, [pc, #228]	; (800523c <sd_Card_Check+0x120>)
 8005158:	4839      	ldr	r0, [pc, #228]	; (8005240 <sd_Card_Check+0x124>)
 800515a:	f00b f99d 	bl	8010498 <f_mount>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	4b38      	ldr	r3, [pc, #224]	; (8005244 <sd_Card_Check+0x128>)
 8005164:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK){
 8005166:	4b37      	ldr	r3, [pc, #220]	; (8005244 <sd_Card_Check+0x128>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <sd_Card_Check+0x60>
					send_uart ("Mounted SD CARD Sucesfully ...\n\n");
 800516e:	4839      	ldr	r0, [pc, #228]	; (8005254 <sd_Card_Check+0x138>)
 8005170:	f7ff ffbc 	bl	80050ec <send_uart>
 8005174:	e002      	b.n	800517c <sd_Card_Check+0x60>
				}
	  		}
	  	else send_uart("SD CARD mounted successfully...\n\n");
 8005176:	4838      	ldr	r0, [pc, #224]	; (8005258 <sd_Card_Check+0x13c>)
 8005178:	f7ff ffb8 	bl	80050ec <send_uart>

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	 	f_getfree("", &fre_clust, &pfs);
 800517c:	4a37      	ldr	r2, [pc, #220]	; (800525c <sd_Card_Check+0x140>)
 800517e:	4938      	ldr	r1, [pc, #224]	; (8005260 <sd_Card_Check+0x144>)
 8005180:	4833      	ldr	r0, [pc, #204]	; (8005250 <sd_Card_Check+0x134>)
 8005182:	f00c f8c6 	bl	8011312 <f_getfree>
	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8005186:	4b35      	ldr	r3, [pc, #212]	; (800525c <sd_Card_Check+0x140>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	3b02      	subs	r3, #2
 800518e:	4a33      	ldr	r2, [pc, #204]	; (800525c <sd_Card_Check+0x140>)
 8005190:	6812      	ldr	r2, [r2, #0]
 8005192:	8952      	ldrh	r2, [r2, #10]
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	4618      	mov	r0, r3
 800519a:	f7fb f9c3 	bl	8000524 <__aeabi_ui2d>
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	4b30      	ldr	r3, [pc, #192]	; (8005264 <sd_Card_Check+0x148>)
 80051a4:	f7fb fa38 	bl	8000618 <__aeabi_dmul>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4610      	mov	r0, r2
 80051ae:	4619      	mov	r1, r3
 80051b0:	f7fb fd0a 	bl	8000bc8 <__aeabi_d2uiz>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4a2c      	ldr	r2, [pc, #176]	; (8005268 <sd_Card_Check+0x14c>)
 80051b8:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 80051ba:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <sd_Card_Check+0x14c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	492a      	ldr	r1, [pc, #168]	; (800526c <sd_Card_Check+0x150>)
 80051c2:	482b      	ldr	r0, [pc, #172]	; (8005270 <sd_Card_Check+0x154>)
 80051c4:	f011 f99e 	bl	8016504 <siprintf>
	  	send_uart(buffer);
 80051c8:	4829      	ldr	r0, [pc, #164]	; (8005270 <sd_Card_Check+0x154>)
 80051ca:	f7ff ff8f 	bl	80050ec <send_uart>
	  	clear_buffer();
 80051ce:	f7ff ff73 	bl	80050b8 <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80051d2:	4b22      	ldr	r3, [pc, #136]	; (800525c <sd_Card_Check+0x140>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	895b      	ldrh	r3, [r3, #10]
 80051d8:	461a      	mov	r2, r3
 80051da:	4b21      	ldr	r3, [pc, #132]	; (8005260 <sd_Card_Check+0x144>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	fb02 f303 	mul.w	r3, r2, r3
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f99e 	bl	8000524 <__aeabi_ui2d>
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <sd_Card_Check+0x148>)
 80051ee:	f7fb fa13 	bl	8000618 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	f7fb fce5 	bl	8000bc8 <__aeabi_d2uiz>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a1c      	ldr	r2, [pc, #112]	; (8005274 <sd_Card_Check+0x158>)
 8005202:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8005204:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <sd_Card_Check+0x158>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	461a      	mov	r2, r3
 800520a:	491b      	ldr	r1, [pc, #108]	; (8005278 <sd_Card_Check+0x15c>)
 800520c:	4818      	ldr	r0, [pc, #96]	; (8005270 <sd_Card_Check+0x154>)
 800520e:	f011 f979 	bl	8016504 <siprintf>
	  	send_uart(buffer);
 8005212:	4817      	ldr	r0, [pc, #92]	; (8005270 <sd_Card_Check+0x154>)
 8005214:	f7ff ff6a 	bl	80050ec <send_uart>
	  	clear_buffer();
 8005218:	f7ff ff4e 	bl	80050b8 <clear_buffer>

	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	  	 fresult = f_open(&fil, "TimeLine.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800521c:	2213      	movs	r2, #19
 800521e:	4917      	ldr	r1, [pc, #92]	; (800527c <sd_Card_Check+0x160>)
 8005220:	4817      	ldr	r0, [pc, #92]	; (8005280 <sd_Card_Check+0x164>)
 8005222:	f00b f99d 	bl	8010560 <f_open>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	4b06      	ldr	r3, [pc, #24]	; (8005244 <sd_Card_Check+0x128>)
 800522c:	701a      	strb	r2, [r3, #0]
	    send_uart(buffer);
	  	send_uart("\n\n");
*/


	  	f_close(&fil);
 800522e:	4814      	ldr	r0, [pc, #80]	; (8005280 <sd_Card_Check+0x164>)
 8005230:	f00c f840 	bl	80112b4 <f_close>

}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	0801a27c 	.word	0x0801a27c
 8005240:	200004e4 	.word	0x200004e4
 8005244:	20002550 	.word	0x20002550
 8005248:	0801a280 	.word	0x0801a280
 800524c:	20002564 	.word	0x20002564
 8005250:	0801a2a4 	.word	0x0801a2a4
 8005254:	0801a2a8 	.word	0x0801a2a8
 8005258:	0801a2cc 	.word	0x0801a2cc
 800525c:	20002554 	.word	0x20002554
 8005260:	20002558 	.word	0x20002558
 8005264:	3fe00000 	.word	0x3fe00000
 8005268:	2000255c 	.word	0x2000255c
 800526c:	0801a2f0 	.word	0x0801a2f0
 8005270:	20002764 	.word	0x20002764
 8005274:	20002560 	.word	0x20002560
 8005278:	0801a30c 	.word	0x0801a30c
 800527c:	0801a328 	.word	0x0801a328
 8005280:	20001520 	.word	0x20001520

08005284 <LoadTimeFromSDCard>:

void LoadTimeFromSDCard(uint32_t *hours, uint32_t *minutes, uint32_t *seconds) {
 8005284:	b580      	push	{r7, lr}
 8005286:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 800528a:	af02      	add	r7, sp, #8
 800528c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005290:	f843 0c4c 	str.w	r0, [r3, #-76]
 8005294:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005298:	f843 1c50 	str.w	r1, [r3, #-80]
 800529c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052a0:	f843 2c54 	str.w	r2, [r3, #-84]
    FIL file;
    char time_str[16];
    FRESULT fresult;

    // Initialize time to zero in case of errors
    *hours = 0;
 80052a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052a8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
    *minutes = 0;
 80052b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052b4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
    *seconds = 0;
 80052bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052c0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

    /* Open file for reading */
    fresult = f_open(&file, "TimeLine.txt", FA_READ);
 80052c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052cc:	3b14      	subs	r3, #20
 80052ce:	2201      	movs	r2, #1
 80052d0:	492a      	ldr	r1, [pc, #168]	; (800537c <LoadTimeFromSDCard+0xf8>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f00b f944 	bl	8010560 <f_open>
 80052d8:	4603      	mov	r3, r0
 80052da:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80052de:	f102 0217 	add.w	r2, r2, #23
 80052e2:	7013      	strb	r3, [r2, #0]
    if (fresult == FR_OK) {
 80052e4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80052e8:	f103 0317 	add.w	r3, r3, #23
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d13d      	bne.n	800536e <LoadTimeFromSDCard+0xea>
        // Read the last saved time from the file
        UINT bytes_read;
        fresult = f_read(&file, time_str, sizeof(time_str) - 1, &bytes_read);
 80052f2:	f107 0318 	add.w	r3, r7, #24
 80052f6:	3b08      	subs	r3, #8
 80052f8:	f107 0118 	add.w	r1, r7, #24
 80052fc:	3904      	subs	r1, #4
 80052fe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005302:	3814      	subs	r0, #20
 8005304:	220f      	movs	r2, #15
 8005306:	f00b fbfb 	bl	8010b00 <f_read>
 800530a:	4603      	mov	r3, r0
 800530c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8005310:	f102 0217 	add.w	r2, r2, #23
 8005314:	7013      	strb	r3, [r2, #0]
        if (fresult == FR_OK) {
 8005316:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800531a:	f103 0317 	add.w	r3, r3, #23
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11e      	bne.n	8005362 <LoadTimeFromSDCard+0xde>
            time_str[bytes_read] = '\0'; // Null-terminate the string
 8005324:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005328:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800532c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005330:	4413      	add	r3, r2
 8005332:	2200      	movs	r2, #0
 8005334:	f803 2c44 	strb.w	r2, [r3, #-68]
            sscanf(time_str, "%02lu:%02lu:%02lu", hours, minutes, seconds); // Parse the time
 8005338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800533c:	4619      	mov	r1, r3
 800533e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005342:	461a      	mov	r2, r3
 8005344:	f107 0018 	add.w	r0, r7, #24
 8005348:	3804      	subs	r0, #4
 800534a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800534e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	f851 3c50 	ldr.w	r3, [r1, #-80]
 8005358:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800535c:	4908      	ldr	r1, [pc, #32]	; (8005380 <LoadTimeFromSDCard+0xfc>)
 800535e:	f011 f8f1 	bl	8016544 <siscanf>
        }
        f_close(&file);
 8005362:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005366:	3b14      	subs	r3, #20
 8005368:	4618      	mov	r0, r3
 800536a:	f00b ffa3 	bl	80112b4 <f_close>
    } else {
        // Handle case where the file doesn't exist or can't be read
        // Time will remain initialized to 0:0:0
    }
}
 800536e:	bf00      	nop
 8005370:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	0801a328 	.word	0x0801a328
 8005380:	0801a338 	.word	0x0801a338

08005384 <UpdateTimeToSDCard>:



void UpdateTimeToSDCard(uint32_t add_hours, uint32_t add_minutes, uint32_t add_seconds) {
 8005384:	b580      	push	{r7, lr}
 8005386:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
 800538a:	b086      	sub	sp, #24
 800538c:	af02      	add	r7, sp, #8
 800538e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005392:	f843 0c64 	str.w	r0, [r3, #-100]
 8005396:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800539a:	f843 1c68 	str.w	r1, [r3, #-104]
 800539e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80053a2:	f843 2c6c 	str.w	r2, [r3, #-108]
    uint32_t current_hours, current_minutes, current_seconds;

    if(log_to_sd_flag)
 80053a6:	4b64      	ldr	r3, [pc, #400]	; (8005538 <UpdateTimeToSDCard+0x1b4>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80bd 	beq.w	800552c <UpdateTimeToSDCard+0x1a8>
    {
    	log_to_sd_flag = 0;
 80053b2:	4b61      	ldr	r3, [pc, #388]	; (8005538 <UpdateTimeToSDCard+0x1b4>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	701a      	strb	r2, [r3, #0]
		// Load existing time from SD card
		LoadTimeFromSDCard(&current_hours, &current_minutes, &current_seconds);
 80053b8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80053bc:	f102 0214 	add.w	r2, r2, #20
 80053c0:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 80053c4:	f101 0118 	add.w	r1, r1, #24
 80053c8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053cc:	f103 031c 	add.w	r3, r3, #28
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff ff57 	bl	8005284 <LoadTimeFromSDCard>

		// Add the new time values
		uint32_t total_seconds = current_seconds + add_seconds;
 80053d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053da:	f103 0314 	add.w	r3, r3, #20
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80053e4:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 80053e8:	4413      	add	r3, r2
 80053ea:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80053ee:	f102 020c 	add.w	r2, r2, #12
 80053f2:	6013      	str	r3, [r2, #0]
		uint32_t total_minutes = current_minutes + add_minutes + (total_seconds / 60);
 80053f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80053f8:	f103 0318 	add.w	r3, r3, #24
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005402:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8005406:	441a      	add	r2, r3
 8005408:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800540c:	f103 030c 	add.w	r3, r3, #12
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	494a      	ldr	r1, [pc, #296]	; (800553c <UpdateTimeToSDCard+0x1b8>)
 8005414:	fba1 1303 	umull	r1, r3, r1, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	4413      	add	r3, r2
 800541c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8005420:	f102 0208 	add.w	r2, r2, #8
 8005424:	6013      	str	r3, [r2, #0]
		uint32_t total_hours = current_hours + add_hours + (total_minutes / 60);
 8005426:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800542a:	f103 031c 	add.w	r3, r3, #28
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005434:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8005438:	441a      	add	r2, r3
 800543a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800543e:	f103 0308 	add.w	r3, r3, #8
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	493d      	ldr	r1, [pc, #244]	; (800553c <UpdateTimeToSDCard+0x1b8>)
 8005446:	fba1 1303 	umull	r1, r3, r1, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	4413      	add	r3, r2
 800544e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8005452:	f102 0204 	add.w	r2, r2, #4
 8005456:	6013      	str	r3, [r2, #0]

		// Normalize the time
		total_seconds %= 60;
 8005458:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800545c:	f103 030c 	add.w	r3, r3, #12
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	4b36      	ldr	r3, [pc, #216]	; (800553c <UpdateTimeToSDCard+0x1b8>)
 8005464:	fba3 1302 	umull	r1, r3, r3, r2
 8005468:	0959      	lsrs	r1, r3, #5
 800546a:	460b      	mov	r3, r1
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	1a5b      	subs	r3, r3, r1
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8005478:	f102 020c 	add.w	r2, r2, #12
 800547c:	6013      	str	r3, [r2, #0]
		total_minutes %= 60;
 800547e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8005482:	f103 0308 	add.w	r3, r3, #8
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	4b2c      	ldr	r3, [pc, #176]	; (800553c <UpdateTimeToSDCard+0x1b8>)
 800548a:	fba3 1302 	umull	r1, r3, r3, r2
 800548e:	0959      	lsrs	r1, r3, #5
 8005490:	460b      	mov	r3, r1
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	1a5b      	subs	r3, r3, r1
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800549e:	f102 0208 	add.w	r2, r2, #8
 80054a2:	6013      	str	r3, [r2, #0]

		// Save the updated time back to the SD card
		char time_str[16];
		snprintf(time_str, sizeof(time_str), "%02lu:%02lu:%02lu\n", total_hours, total_minutes, total_seconds);
 80054a4:	f507 5082 	add.w	r0, r7, #4160	; 0x1040
 80054a8:	f100 0004 	add.w	r0, r0, #4
 80054ac:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80054b0:	f103 030c 	add.w	r3, r3, #12
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80054bc:	f103 0308 	add.w	r3, r3, #8
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80054c8:	f103 0304 	add.w	r3, r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <UpdateTimeToSDCard+0x1bc>)
 80054d0:	2110      	movs	r1, #16
 80054d2:	f010 ffe3 	bl	801649c <sniprintf>
		FIL file;
		UINT bytes_written;
		FRESULT fresult;

		/* Open file to write/ create a file if it doesn't exist */
		fresult = f_open(&file, "TimeLine.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80054d6:	f107 0310 	add.w	r3, r7, #16
 80054da:	220a      	movs	r2, #10
 80054dc:	4919      	ldr	r1, [pc, #100]	; (8005544 <UpdateTimeToSDCard+0x1c0>)
 80054de:	4618      	mov	r0, r3
 80054e0:	f00b f83e 	bl	8010560 <f_open>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80054ea:	f102 0203 	add.w	r2, r2, #3
 80054ee:	7013      	strb	r3, [r2, #0]
		if (fresult == FR_OK) {
 80054f0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80054f4:	f103 0303 	add.w	r3, r3, #3
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d116      	bne.n	800552c <UpdateTimeToSDCard+0x1a8>
			f_write(&file, time_str, strlen(time_str), &bytes_written);
 80054fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005502:	f103 0304 	add.w	r3, r3, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f7fa fec2 	bl	8000290 <strlen>
 800550c:	4602      	mov	r2, r0
 800550e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8005512:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8005516:	f101 0104 	add.w	r1, r1, #4
 800551a:	f107 0010 	add.w	r0, r7, #16
 800551e:	f00b fc7d 	bl	8010e1c <f_write>
			f_close(&file);
 8005522:	f107 0310 	add.w	r3, r7, #16
 8005526:	4618      	mov	r0, r3
 8005528:	f00b fec4 	bl	80112b4 <f_close>
		} else {
			// Handle error (e.g., SD card not inserted or write failure)
		}
    }
}
 800552c:	bf00      	nop
 800552e:	f507 5783 	add.w	r7, r7, #4192	; 0x1060
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	200003a2 	.word	0x200003a2
 800553c:	88888889 	.word	0x88888889
 8005540:	0801a34c 	.word	0x0801a34c
 8005544:	0801a328 	.word	0x0801a328

08005548 <SerialPrint>:
extern UART_HandleTypeDef huart1;


/*Print character data without the new line at the end*/
void SerialPrint(const char* Data)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fa fe9d 	bl	8000290 <strlen>
 8005556:	4603      	mov	r3, r0
 8005558:	b29a      	uxth	r2, r3
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4803      	ldr	r0, [pc, #12]	; (8005570 <SerialPrint+0x28>)
 8005562:	f007 f877 	bl	800c654 <HAL_UART_Transmit>
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20002edc 	.word	0x20002edc

08005574 <SerialPrintln>:

/*Print character data with the new line at the end*/
void SerialPrintln(const char* Data)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7fa fe87 	bl	8000290 <strlen>
 8005582:	4603      	mov	r3, r0
 8005584:	b29a      	uxth	r2, r3
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4808      	ldr	r0, [pc, #32]	; (80055b0 <SerialPrintln+0x3c>)
 800558e:	f007 f861 	bl	800c654 <HAL_UART_Transmit>
    const char newline[2] = "\r\n"; // Newline characters for UART
 8005592:	f640 230d 	movw	r3, #2573	; 0xa0d
 8005596:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t*)newline, 2, HAL_MAX_DELAY);
 8005598:	f107 010c 	add.w	r1, r7, #12
 800559c:	f04f 33ff 	mov.w	r3, #4294967295
 80055a0:	2202      	movs	r2, #2
 80055a2:	4803      	ldr	r0, [pc, #12]	; (80055b0 <SerialPrintln+0x3c>)
 80055a4:	f007 f856 	bl	800c654 <HAL_UART_Transmit>
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20002edc 	.word	0x20002edc

080055b4 <SerialPrintlnINT>:

/*Print Numeric data with the new line at the end*/
void SerialPrintlnINT(int Data)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	/*Here the UART Buffer is being used to store the numeric values and present then as character array*/
	char buffer[10];
	sprintf(buffer, "%d", Data);
 80055bc:	f107 030c 	add.w	r3, r7, #12
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	4906      	ldr	r1, [pc, #24]	; (80055dc <SerialPrintlnINT+0x28>)
 80055c4:	4618      	mov	r0, r3
 80055c6:	f010 ff9d 	bl	8016504 <siprintf>
	SerialPrintln(buffer);
 80055ca:	f107 030c 	add.w	r3, r7, #12
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ffd0 	bl	8005574 <SerialPrintln>
}
 80055d4:	bf00      	nop
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	0801a360 	.word	0x0801a360

080055e0 <SerialPrintINT>:

/*Print Numeric data without the new line at the end*/
void SerialPrintINT(int Data)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	/*Here the UART Buffer is being used to store the numeric values and present then as character array*/
	char buffer[10];
	sprintf(buffer, "%d", Data);
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	4906      	ldr	r1, [pc, #24]	; (8005608 <SerialPrintINT+0x28>)
 80055f0:	4618      	mov	r0, r3
 80055f2:	f010 ff87 	bl	8016504 <siprintf>
	SerialPrint(buffer);
 80055f6:	f107 030c 	add.w	r3, r7, #12
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ffa4 	bl	8005548 <SerialPrint>
}
 8005600:	bf00      	nop
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	0801a360 	.word	0x0801a360

0800560c <Servo_Init>:
int pulse = 0;
int16_t current_angle_offset = 0;
extern TIM_HandleTypeDef htim11; // Timer 11 is dedicated to the servo

// Initialize the servo control
void Servo_Init(void) {
 800560c:	b580      	push	{r7, lr}
 800560e:	af00      	add	r7, sp, #0
	// Start the PWM signal on Timer 11, Channel 1
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8005610:	2100      	movs	r1, #0
 8005612:	4802      	ldr	r0, [pc, #8]	; (800561c <Servo_Init+0x10>)
 8005614:	f006 f866 	bl	800b6e4 <HAL_TIM_PWM_Start>
}
 8005618:	bf00      	nop
 800561a:	bd80      	pop	{r7, pc}
 800561c:	20002e4c 	.word	0x20002e4c

08005620 <Servo_SetAngle>:

// Set the servo angle
void Servo_SetAngle(int16_t degree) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
	// Constrain the angle within the defined minimum and maximum limits
	 //HAL_GPIO_WritePin(GPIOC,EN_DCDC_8V_Output_Pin, GPIO_PIN_RESET);
	degree += current_angle_offset;
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <Servo_SetAngle+0x7c>)
 800562e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005632:	b29b      	uxth	r3, r3
 8005634:	4413      	add	r3, r2
 8005636:	b29b      	uxth	r3, r3
 8005638:	80fb      	strh	r3, [r7, #6]
	if (degree > SERVO_MAX_ANGLE) {
 800563a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800563e:	2baf      	cmp	r3, #175	; 0xaf
 8005640:	dd02      	ble.n	8005648 <Servo_SetAngle+0x28>
		degree = SERVO_MAX_ANGLE;
 8005642:	23af      	movs	r3, #175	; 0xaf
 8005644:	80fb      	strh	r3, [r7, #6]
 8005646:	e005      	b.n	8005654 <Servo_SetAngle+0x34>
	} else if (degree < SERVO_MIN_ANGLE) {
 8005648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800564c:	2b04      	cmp	r3, #4
 800564e:	dc01      	bgt.n	8005654 <Servo_SetAngle+0x34>
		degree = SERVO_MIN_ANGLE;
 8005650:	2305      	movs	r3, #5
 8005652:	80fb      	strh	r3, [r7, #6]
	}

	// Map the angle to the pulse width in microseconds
	uint32_t pulseWidth = SERVO_MIN_PULSE_WIDTH + (uint32_t) ((float) (degree - SERVO_MIN_ANGLE)
 8005654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005658:	3b05      	subs	r3, #5
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			/ (float) (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE) * (SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH));
 8005662:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80056a0 <Servo_SetAngle+0x80>
 8005666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800566a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80056a4 <Servo_SetAngle+0x84>
 800566e:	ee67 7a87 	vmul.f32	s15, s15, s14
	uint32_t pulseWidth = SERVO_MIN_PULSE_WIDTH + (uint32_t) ((float) (degree - SERVO_MIN_ANGLE)
 8005672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005676:	ee17 3a90 	vmov	r3, s15
 800567a:	33aa      	adds	r3, #170	; 0xaa
 800567c:	60fb      	str	r3, [r7, #12]

	pulse = pulseWidth;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <Servo_SetAngle+0x88>)
 8005682:	6013      	str	r3, [r2, #0]

	// Set the pulse width for PWM
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, pulseWidth);
 8005684:	4b09      	ldr	r3, [pc, #36]	; (80056ac <Servo_SetAngle+0x8c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	635a      	str	r2, [r3, #52]	; 0x34
	 HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 800568c:	2100      	movs	r1, #0
 800568e:	4807      	ldr	r0, [pc, #28]	; (80056ac <Servo_SetAngle+0x8c>)
 8005690:	f006 f828 	bl	800b6e4 <HAL_TIM_PWM_Start>
}
 8005694:	bf00      	nop
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	200027f0 	.word	0x200027f0
 80056a0:	432a0000 	.word	0x432a0000
 80056a4:	44098000 	.word	0x44098000
 80056a8:	200027ec 	.word	0x200027ec
 80056ac:	20002e4c 	.word	0x20002e4c

080056b0 <Servo_SetPercent>:

// Set the servo position based on a percentage
void Servo_SetPercent(int percentage) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	static int16_t old_angle = 1000; //Illogical number to ensure its not same as 1st input to function

	// Constrain the percentage to be between 0% and 100%
	if (percentage > 100) {
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b64      	cmp	r3, #100	; 0x64
 80056bc:	dd02      	ble.n	80056c4 <Servo_SetPercent+0x14>
		percentage = 100;
 80056be:	2364      	movs	r3, #100	; 0x64
 80056c0:	607b      	str	r3, [r7, #4]
 80056c2:	e004      	b.n	80056ce <Servo_SetPercent+0x1e>
	} else if (percentage < 0) {
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da01      	bge.n	80056ce <Servo_SetPercent+0x1e>
		percentage = 0;
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
	}
   percent = percentage;
 80056ce:	4a2d      	ldr	r2, [pc, #180]	; (8005784 <Servo_SetPercent+0xd4>)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6013      	str	r3, [r2, #0]
  // Map the percentage to the corresponding angle
  	if(ISSERVOINTERTED == 1){
  		percentage = 100 - percentage;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80056da:	607b      	str	r3, [r7, #4]
  	}
	// Map the percentage to the corresponding angle
	int16_t angle = SERVO_MIN_ANGLE + (int16_t) ((float) percentage / 100.0f * (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056e6:	eddf 6a28 	vldr	s13, [pc, #160]	; 8005788 <Servo_SetPercent+0xd8>
 80056ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800578c <Servo_SetPercent+0xdc>
 80056f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056fa:	ee17 3a90 	vmov	r3, s15
 80056fe:	b21b      	sxth	r3, r3
 8005700:	b29b      	uxth	r3, r3
 8005702:	3305      	adds	r3, #5
 8005704:	b29b      	uxth	r3, r3
 8005706:	81fb      	strh	r3, [r7, #14]

	Servo_SetAngle(angle - current_angle_offset); // Account for the offset
 8005708:	89fa      	ldrh	r2, [r7, #14]
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <Servo_SetPercent+0xe0>)
 800570c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005710:	b29b      	uxth	r3, r3
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	b29b      	uxth	r3, r3
 8005716:	b21b      	sxth	r3, r3
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff81 	bl	8005620 <Servo_SetAngle>
	// Set the servo angle
	//Servo_SetAngle(angle);

	//Relax servo only if new angle is more than 10 degrees different than old one, plus conditions inside this
	if (abs(old_angle - angle) > 10) {
 800571e:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <Servo_SetPercent+0xe4>)
 8005720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005724:	461a      	mov	r2, r3
 8005726:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	bfb8      	it	lt
 8005730:	425b      	neglt	r3, r3
 8005732:	2b0a      	cmp	r3, #10
 8005734:	dd1e      	ble.n	8005774 <Servo_SetPercent+0xc4>
		if (abs(percentage - ValveOpen) < 10) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3b64      	subs	r3, #100	; 0x64
 800573a:	f113 0f09 	cmn.w	r3, #9
 800573e:	db0b      	blt.n	8005758 <Servo_SetPercent+0xa8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3b64      	subs	r3, #100	; 0x64
 8005744:	2b09      	cmp	r3, #9
 8005746:	dc07      	bgt.n	8005758 <Servo_SetPercent+0xa8>
			HAL_Delay(1000);
 8005748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800574c:	f003 f888 	bl	8008860 <HAL_Delay>
			if (ISSERVOINTERTED == 1) {
				Servo_SetAngle(SERVO_MAX_ANGLE - 5);
 8005750:	20aa      	movs	r0, #170	; 0xaa
 8005752:	f7ff ff65 	bl	8005620 <Servo_SetAngle>
			if (ISSERVOINTERTED == 1) {
 8005756:	e00d      	b.n	8005774 <Servo_SetPercent+0xc4>
			} else {
				Servo_SetAngle(SERVO_MIN_ANGLE + 5);
			}
		} else if (abs(percentage - ValveClose) < 10) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f113 0f09 	cmn.w	r3, #9
 800575e:	db09      	blt.n	8005774 <Servo_SetPercent+0xc4>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b09      	cmp	r3, #9
 8005764:	dc06      	bgt.n	8005774 <Servo_SetPercent+0xc4>
			HAL_Delay(1000);
 8005766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800576a:	f003 f879 	bl	8008860 <HAL_Delay>
			if (ISSERVOINTERTED == 1) {
				Servo_SetAngle(SERVO_MIN_ANGLE + 5);
 800576e:	200a      	movs	r0, #10
 8005770:	f7ff ff56 	bl	8005620 <Servo_SetAngle>
			} else {
				Servo_SetAngle(SERVO_MAX_ANGLE - 5);
			}
		}
	}
	old_angle = angle;
 8005774:	4a07      	ldr	r2, [pc, #28]	; (8005794 <Servo_SetPercent+0xe4>)
 8005776:	89fb      	ldrh	r3, [r7, #14]
 8005778:	8013      	strh	r3, [r2, #0]
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	200027e8 	.word	0x200027e8
 8005788:	42c80000 	.word	0x42c80000
 800578c:	432a0000 	.word	0x432a0000
 8005790:	200027f0 	.word	0x200027f0
 8005794:	20000134 	.word	0x20000134

08005798 <Servo_Home_Position>:
    // Set the servo's current position as zero
    Servo_SetAngle(3); // Update internal logic if necessary to mark zero position
}

*/
void Servo_Home_Position(void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	af00      	add	r7, sp, #0
    static int16_t homing_angle = SERVO_MAX_ANGLE; // Start from maximum angle

    // Drive the servo to the limit switch
    while (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) != 1){
 800579c:	e01a      	b.n	80057d4 <Servo_Home_Position+0x3c>
        // Gradually move the servo angle toward the limit
        Servo_SetAngle(homing_angle);
 800579e:	4b21      	ldr	r3, [pc, #132]	; (8005824 <Servo_Home_Position+0x8c>)
 80057a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff3b 	bl	8005620 <Servo_SetAngle>
        homing_angle--;
 80057aa:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <Servo_Home_Position+0x8c>)
 80057ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	b21a      	sxth	r2, r3
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <Servo_Home_Position+0x8c>)
 80057ba:	801a      	strh	r2, [r3, #0]

        // Ensure the angle does not go below the minimum
        if (homing_angle < SERVO_MIN_ANGLE) {
 80057bc:	4b19      	ldr	r3, [pc, #100]	; (8005824 <Servo_Home_Position+0x8c>)
 80057be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	dc03      	bgt.n	80057ce <Servo_Home_Position+0x36>
            homing_angle = SERVO_MIN_ANGLE;
 80057c6:	4b17      	ldr	r3, [pc, #92]	; (8005824 <Servo_Home_Position+0x8c>)
 80057c8:	2205      	movs	r2, #5
 80057ca:	801a      	strh	r2, [r3, #0]
            break; // Exit if the servo reaches the minimum without triggering the limit switch
 80057cc:	e00a      	b.n	80057e4 <Servo_Home_Position+0x4c>
        }

        HAL_Delay(10); // Small delay to allow the servo to move and stabilize
 80057ce:	200a      	movs	r0, #10
 80057d0:	f003 f846 	bl	8008860 <HAL_Delay>
    while (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) != 1){
 80057d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057d8:	4813      	ldr	r0, [pc, #76]	; (8005828 <Servo_Home_Position+0x90>)
 80057da:	f004 fc7d 	bl	800a0d8 <HAL_GPIO_ReadPin>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d1dc      	bne.n	800579e <Servo_Home_Position+0x6>
    }
    HAL_Delay(2000);
 80057e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80057e8:	f003 f83a 	bl	8008860 <HAL_Delay>

    // Once the limit switch is triggered, stop the servo
    Servo_SetAngle(homing_angle);
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <Servo_Home_Position+0x8c>)
 80057ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ff14 	bl	8005620 <Servo_SetAngle>
#if DEBUG == 1
    SerialPrint("Servo During Homing");
 80057f8:	480c      	ldr	r0, [pc, #48]	; (800582c <Servo_Home_Position+0x94>)
 80057fa:	f7ff fea5 	bl	8005548 <SerialPrint>
#endif
   	SerialPrintINT(homing_angle);
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <Servo_Home_Position+0x8c>)
 8005800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff feeb 	bl	80055e0 <SerialPrintINT>

    // Update internal logic to mark the current position as zero
    current_angle_offset = homing_angle; // Store the "zero" offset
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <Servo_Home_Position+0x8c>)
 800580c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <Servo_Home_Position+0x98>)
 8005812:	801a      	strh	r2, [r3, #0]
    angle = 0; // Reset the angle variable to zero for consistency
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <Servo_Home_Position+0x9c>)
 8005816:	2200      	movs	r2, #0
 8005818:	801a      	strh	r2, [r3, #0]
    percent = 0; // Reset percentage to zero if used in your logic
 800581a:	4b07      	ldr	r3, [pc, #28]	; (8005838 <Servo_Home_Position+0xa0>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]

    // Adjust all future angle calculations to account for the offset
    //Servo_SetAngle(0); // Set servo to the logical zero position
}
 8005820:	bf00      	nop
 8005822:	bd80      	pop	{r7, pc}
 8005824:	20000136 	.word	0x20000136
 8005828:	40020000 	.word	0x40020000
 800582c:	0801a36c 	.word	0x0801a36c
 8005830:	200027f0 	.word	0x200027f0
 8005834:	200027e4 	.word	0x200027e4
 8005838:	200027e8 	.word	0x200027e8

0800583c <MotorTest>:
static uint64_t StoringTimedev = 0;

extern TaskHandle_t xCustomerAppTaskEndHandle;


void MotorTest() {
 800583c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005840:	b0a4      	sub	sp, #144	; 0x90
 8005842:	af02      	add	r7, sp, #8
	//TareAll();
	LCDRGBControl(WHITE); //Turn on LCD backlight and set it to color
 8005844:	2064      	movs	r0, #100	; 0x64
 8005846:	f7ff fb2d 	bl	8004ea4 <LCDRGBControl>
	printLCD(0, "Initializing", NO_SYMBOL);
 800584a:	2200      	movs	r2, #0
 800584c:	49b5      	ldr	r1, [pc, #724]	; (8005b24 <MotorTest+0x2e8>)
 800584e:	2000      	movs	r0, #0
 8005850:	f7ff fabc 	bl	8004dcc <printLCD>
	//TareAll();
	while (TRUE) {
		 if (HAL_GetTick() - StoringTimedev >= 1000) {  // Check if 2 seconds passed
 8005854:	f002 fff8 	bl	8008848 <HAL_GetTick>
 8005858:	4603      	mov	r3, r0
 800585a:	2200      	movs	r2, #0
 800585c:	4698      	mov	r8, r3
 800585e:	4691      	mov	r9, r2
 8005860:	4bb1      	ldr	r3, [pc, #708]	; (8005b28 <MotorTest+0x2ec>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	ebb8 0402 	subs.w	r4, r8, r2
 800586a:	eb69 0503 	sbc.w	r5, r9, r3
 800586e:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8005872:	f175 0300 	sbcs.w	r3, r5, #0
 8005876:	d30c      	bcc.n	8005892 <MotorTest+0x56>
			 StoringTimedev = HAL_GetTick();  // Update the last tick time
 8005878:	f002 ffe6 	bl	8008848 <HAL_GetTick>
 800587c:	4603      	mov	r3, r0
 800587e:	2200      	movs	r2, #0
 8005880:	469a      	mov	sl, r3
 8005882:	4693      	mov	fp, r2
 8005884:	4ba8      	ldr	r3, [pc, #672]	; (8005b28 <MotorTest+0x2ec>)
 8005886:	e9c3 ab00 	strd	sl, fp, [r3]
			 tareSend = Tareweight;  // Update the variable
 800588a:	4ba8      	ldr	r3, [pc, #672]	; (8005b2c <MotorTest+0x2f0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4aa8      	ldr	r2, [pc, #672]	; (8005b30 <MotorTest+0x2f4>)
 8005890:	6013      	str	r3, [r2, #0]
		  }
		DeveloperMenu();
 8005892:	f000 fa91 	bl	8005db8 <DeveloperMenu>
		ReadKeypadVar(CONTROL);
 8005896:	2002      	movs	r0, #2
 8005898:	f7fe fc32 	bl	8004100 <ReadKeypadVar>
		if (lastKeyPressed == PLAYSTOPKEY) {
 800589c:	4ba5      	ldr	r3, [pc, #660]	; (8005b34 <MotorTest+0x2f8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b0d      	cmp	r3, #13
 80058a2:	d113      	bne.n	80058cc <MotorTest+0x90>
			   	TareAll();
 80058a4:	f7ff fb8a 	bl	8004fbc <TareAll>
				printLCD(0, "TARE", NO_SYMBOL);
 80058a8:	2200      	movs	r2, #0
 80058aa:	49a3      	ldr	r1, [pc, #652]	; (8005b38 <MotorTest+0x2fc>)
 80058ac:	2000      	movs	r0, #0
 80058ae:	f7ff fa8d 	bl	8004dcc <printLCD>
				//TareAll();
				HAL_Delay(1000);
 80058b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058b6:	f002 ffd3 	bl	8008860 <HAL_Delay>
				lastKeyPressed = 255;
 80058ba:	4b9e      	ldr	r3, [pc, #632]	; (8005b34 <MotorTest+0x2f8>)
 80058bc:	22ff      	movs	r2, #255	; 0xff
 80058be:	601a      	str	r2, [r3, #0]
				SerialPrintln("ALways here");
 80058c0:	489e      	ldr	r0, [pc, #632]	; (8005b3c <MotorTest+0x300>)
 80058c2:	f7ff fe57 	bl	8005574 <SerialPrintln>
				CleaningExitCounter =0;
 80058c6:	4b9e      	ldr	r3, [pc, #632]	; (8005b40 <MotorTest+0x304>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
		}

		if (isAutoOperation == FALSE) {
 80058cc:	4b9d      	ldr	r3, [pc, #628]	; (8005b44 <MotorTest+0x308>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f040 81c5 	bne.w	8005c60 <MotorTest+0x424>
			int var = readKeypadNonBlock(ALL);
 80058d6:	2000      	movs	r0, #0
 80058d8:	f7fe fc5e 	bl	8004198 <readKeypadNonBlock>
 80058dc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			if (var == DELKEY) {
 80058e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80058e4:	2b0e      	cmp	r3, #14
 80058e6:	d12d      	bne.n	8005944 <MotorTest+0x108>
				lastKeyPressed = DELKEY;
 80058e8:	4b92      	ldr	r3, [pc, #584]	; (8005b34 <MotorTest+0x2f8>)
 80058ea:	220e      	movs	r2, #14
 80058ec:	601a      	str	r2, [r3, #0]
				uint32_t hours, minutes, seconds;
				LoadTimeFromSDCard(&hours,&minutes,&seconds);
 80058ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80058f2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80058f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fcc2 	bl	8005284 <LoadTimeFromSDCard>
				// Display the time on the LCD
				LCD_Clear();
 8005900:	f7ff f964 	bl	8004bcc <LCD_Clear>
				printLCD(1, "System Run Time", NO_SYMBOL);
 8005904:	2200      	movs	r2, #0
 8005906:	4990      	ldr	r1, [pc, #576]	; (8005b48 <MotorTest+0x30c>)
 8005908:	2001      	movs	r0, #1
 800590a:	f7ff fa5f 	bl	8004dcc <printLCD>
				char time_display[20];
				snprintf(time_display, sizeof(time_display), "Time: %02lu:%02lu:%02lu", hours, minutes, seconds);
 800590e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005914:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005918:	9201      	str	r2, [sp, #4]
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	460b      	mov	r3, r1
 800591e:	4a8b      	ldr	r2, [pc, #556]	; (8005b4c <MotorTest+0x310>)
 8005920:	2114      	movs	r1, #20
 8005922:	f010 fdbb 	bl	801649c <sniprintf>
				printLCD(2, time_display, NO_SYMBOL);
 8005926:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800592a:	2200      	movs	r2, #0
 800592c:	4619      	mov	r1, r3
 800592e:	2002      	movs	r0, #2
 8005930:	f7ff fa4c 	bl	8004dcc <printLCD>
				while(readKeypadNonBlock(ALL) != ENTERKEY);
 8005934:	bf00      	nop
 8005936:	2000      	movs	r0, #0
 8005938:	f7fe fc2e 	bl	8004198 <readKeypadNonBlock>
 800593c:	4603      	mov	r3, r0
 800593e:	2b0b      	cmp	r3, #11
 8005940:	d1f9      	bne.n	8005936 <MotorTest+0xfa>
 8005942:	e027      	b.n	8005994 <MotorTest+0x158>
			} else if (var == MANAUTOKEY) {
 8005944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d10e      	bne.n	800596a <MotorTest+0x12e>
				isAutoOperation = !isAutoOperation;
 800594c:	4b7d      	ldr	r3, [pc, #500]	; (8005b44 <MotorTest+0x308>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	461a      	mov	r2, r3
 800595c:	4b79      	ldr	r3, [pc, #484]	; (8005b44 <MotorTest+0x308>)
 800595e:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1000);
 8005960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005964:	f002 ff7c 	bl	8008860 <HAL_Delay>
 8005968:	e014      	b.n	8005994 <MotorTest+0x158>
			}
			else if (var == PLAYSTOPKEY) {
 800596a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800596e:	2b0d      	cmp	r3, #13
 8005970:	d110      	bne.n	8005994 <MotorTest+0x158>
				//lastKeyPressed = PLAYSTOPKEY;
				TareAll();
 8005972:	f7ff fb23 	bl	8004fbc <TareAll>
				printLCD(0, "TARE", NO_SYMBOL);
 8005976:	2200      	movs	r2, #0
 8005978:	496f      	ldr	r1, [pc, #444]	; (8005b38 <MotorTest+0x2fc>)
 800597a:	2000      	movs	r0, #0
 800597c:	f7ff fa26 	bl	8004dcc <printLCD>
				HAL_Delay(1000);
 8005980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005984:	f002 ff6c 	bl	8008860 <HAL_Delay>
				lastKeyPressed = 255;
 8005988:	4b6a      	ldr	r3, [pc, #424]	; (8005b34 <MotorTest+0x2f8>)
 800598a:	22ff      	movs	r2, #255	; 0xff
 800598c:	601a      	str	r2, [r3, #0]
				CleaningExitCounter =0;
 800598e:	4b6c      	ldr	r3, [pc, #432]	; (8005b40 <MotorTest+0x304>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
			}
			char buffer1[21]; // Buffer to hold the formatted string
			char buffer2[21]; // Buffer to hold the formatted string
			sprintf(buffer1, "MC-W:%ld S:%d", Total_Weight,percent); //Point # 7
 8005994:	4b6e      	ldr	r3, [pc, #440]	; (8005b50 <MotorTest+0x314>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b6e      	ldr	r3, [pc, #440]	; (8005b54 <MotorTest+0x318>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80059a0:	496d      	ldr	r1, [pc, #436]	; (8005b58 <MotorTest+0x31c>)
 80059a2:	f010 fdaf 	bl	8016504 <siprintf>
			printLCD(0, buffer1, NO_SYMBOL);
 80059a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80059aa:	2200      	movs	r2, #0
 80059ac:	4619      	mov	r1, r3
 80059ae:	2000      	movs	r0, #0
 80059b0:	f7ff fa0c 	bl	8004dcc <printLCD>
			printLCD(1, "CAP    CLAMP   SERVO", NO_SYMBOL);
 80059b4:	2200      	movs	r2, #0
 80059b6:	4969      	ldr	r1, [pc, #420]	; (8005b5c <MotorTest+0x320>)
 80059b8:	2001      	movs	r0, #1
 80059ba:	f7ff fa07 	bl	8004dcc <printLCD>
			printLCD(2, "0/8     4/6      7/9", NO_SYMBOL);
 80059be:	2200      	movs	r2, #0
 80059c0:	4967      	ldr	r1, [pc, #412]	; (8005b60 <MotorTest+0x324>)
 80059c2:	2002      	movs	r0, #2
 80059c4:	f7ff fa02 	bl	8004dcc <printLCD>
			sprintf(buffer2, "Valve: 1/3 %s", ValveStatus);
 80059c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80059cc:	4a65      	ldr	r2, [pc, #404]	; (8005b64 <MotorTest+0x328>)
 80059ce:	4966      	ldr	r1, [pc, #408]	; (8005b68 <MotorTest+0x32c>)
 80059d0:	4618      	mov	r0, r3
 80059d2:	f010 fd97 	bl	8016504 <siprintf>
			printLCD(3, buffer2, NO_SYMBOL);
 80059d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80059da:	2200      	movs	r2, #0
 80059dc:	4619      	mov	r1, r3
 80059de:	2003      	movs	r0, #3
 80059e0:	f7ff f9f4 	bl	8004dcc <printLCD>

			//Make sure safety is active and motor turns off whenever it reaches min or max positions
			if ((Spindle_M3_EncA_Pulses <= M2POS1VAL|| Spindle_M3_EncB_Pulses <= M2POS1VAL) || (Spindle_M3_EncA_Pulses >= M2POS4VAL || Spindle_M3_EncB_Pulses >= M2POS4VAL)) {
 80059e4:	4b61      	ldr	r3, [pc, #388]	; (8005b6c <MotorTest+0x330>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	dd0f      	ble.n	8005a0c <MotorTest+0x1d0>
 80059ec:	4b60      	ldr	r3, [pc, #384]	; (8005b70 <MotorTest+0x334>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	dd0b      	ble.n	8005a0c <MotorTest+0x1d0>
 80059f4:	4b5d      	ldr	r3, [pc, #372]	; (8005b6c <MotorTest+0x330>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 80059fc:	4293      	cmp	r3, r2
 80059fe:	dc05      	bgt.n	8005a0c <MotorTest+0x1d0>
 8005a00:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <MotorTest+0x334>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	dd04      	ble.n	8005a16 <MotorTest+0x1da>
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8005a0c:	4a59      	ldr	r2, [pc, #356]	; (8005b74 <MotorTest+0x338>)
 8005a0e:	2100      	movs	r1, #0
 8005a10:	2002      	movs	r0, #2
 8005a12:	f7fd fc5f 	bl	80032d4 <moveMotor>
			}
			if (Clamp_M2_EncA_Pulses <= M1POS1VAL  || percent >= ValveOpen) {
 8005a16:	4b58      	ldr	r3, [pc, #352]	; (8005b78 <MotorTest+0x33c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dd03      	ble.n	8005a26 <MotorTest+0x1ea>
 8005a1e:	4b4d      	ldr	r3, [pc, #308]	; (8005b54 <MotorTest+0x318>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b63      	cmp	r3, #99	; 0x63
 8005a24:	dd04      	ble.n	8005a30 <MotorTest+0x1f4>
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005a26:	4a53      	ldr	r2, [pc, #332]	; (8005b74 <MotorTest+0x338>)
 8005a28:	2100      	movs	r1, #0
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f7fd fc52 	bl	80032d4 <moveMotor>
			}
			if (var == 0) {
 8005a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11f      	bne.n	8005a78 <MotorTest+0x23c>
				while (readKeypadNonBlock(ALL) == 0) {
 8005a38:	e012      	b.n	8005a60 <MotorTest+0x224>
					if (Spindle_M3_EncA_Pulses > M2POS1VAL || Spindle_M3_EncB_Pulses > M2POS1VAL) {
 8005a3a:	4b4c      	ldr	r3, [pc, #304]	; (8005b6c <MotorTest+0x330>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dc03      	bgt.n	8005a4a <MotorTest+0x20e>
 8005a42:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <MotorTest+0x334>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dd05      	ble.n	8005a56 <MotorTest+0x21a>
						moveMotor(CAPMOTOR, CCW, M2POS1VAL);
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	2002      	movs	r0, #2
 8005a50:	f7fd fc40 	bl	80032d4 <moveMotor>
 8005a54:	e004      	b.n	8005a60 <MotorTest+0x224>

					} else {
						moveMotor(CAPMOTOR, OFF, INT_INF);
 8005a56:	4a47      	ldr	r2, [pc, #284]	; (8005b74 <MotorTest+0x338>)
 8005a58:	2100      	movs	r1, #0
 8005a5a:	2002      	movs	r0, #2
 8005a5c:	f7fd fc3a 	bl	80032d4 <moveMotor>
				while (readKeypadNonBlock(ALL) == 0) {
 8005a60:	2000      	movs	r0, #0
 8005a62:	f7fe fb99 	bl	8004198 <readKeypadNonBlock>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0e6      	beq.n	8005a3a <MotorTest+0x1fe>
					}
				}
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8005a6c:	4a41      	ldr	r2, [pc, #260]	; (8005b74 <MotorTest+0x338>)
 8005a6e:	2100      	movs	r1, #0
 8005a70:	2002      	movs	r0, #2
 8005a72:	f7fd fc2f 	bl	80032d4 <moveMotor>
 8005a76:	e027      	b.n	8005ac8 <MotorTest+0x28c>
			}
			else if (var == 8) {
 8005a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d123      	bne.n	8005ac8 <MotorTest+0x28c>
				while (readKeypadNonBlock(ALL) == 8) {
 8005a80:	e017      	b.n	8005ab2 <MotorTest+0x276>
					if (Spindle_M3_EncA_Pulses < M2POS4VAL ||  Spindle_M3_EncB_Pulses < M2POS4VAL) {
 8005a82:	4b3a      	ldr	r3, [pc, #232]	; (8005b6c <MotorTest+0x330>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	dd05      	ble.n	8005a9a <MotorTest+0x25e>
 8005a8e:	4b38      	ldr	r3, [pc, #224]	; (8005b70 <MotorTest+0x334>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f641 32bb 	movw	r2, #7099	; 0x1bbb
 8005a96:	4293      	cmp	r3, r2
 8005a98:	dc06      	bgt.n	8005aa8 <MotorTest+0x26c>
						moveMotor(CAPMOTOR, CW, M2POS4VAL);
 8005a9a:	f641 32bc 	movw	r2, #7100	; 0x1bbc
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	2002      	movs	r0, #2
 8005aa2:	f7fd fc17 	bl	80032d4 <moveMotor>
 8005aa6:	e004      	b.n	8005ab2 <MotorTest+0x276>
					} else {
						moveMotor(CAPMOTOR, OFF, INT_INF);
 8005aa8:	4a32      	ldr	r2, [pc, #200]	; (8005b74 <MotorTest+0x338>)
 8005aaa:	2100      	movs	r1, #0
 8005aac:	2002      	movs	r0, #2
 8005aae:	f7fd fc11 	bl	80032d4 <moveMotor>
				while (readKeypadNonBlock(ALL) == 8) {
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	f7fe fb70 	bl	8004198 <readKeypadNonBlock>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d0e1      	beq.n	8005a82 <MotorTest+0x246>
					}
				}
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8005abe:	4a2d      	ldr	r2, [pc, #180]	; (8005b74 <MotorTest+0x338>)
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	f7fd fc06 	bl	80032d4 <moveMotor>
			}

			if (var == 4) {
 8005ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d124      	bne.n	8005b1a <MotorTest+0x2de>
				while (readKeypadNonBlock(ALL) == 4) {
 8005ad0:	e017      	b.n	8005b02 <MotorTest+0x2c6>
					if (Clamp_M2_EncA_Pulses > M1POS1VAL || Clamp_M2_EncB_Pulses > M1POS1VAL) {
 8005ad2:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <MotorTest+0x33c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dc03      	bgt.n	8005ae2 <MotorTest+0x2a6>
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <MotorTest+0x340>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dd0a      	ble.n	8005af8 <MotorTest+0x2bc>
						SerialPrintlnINT(Clamp_M2_EncA_Pulses);
 8005ae2:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <MotorTest+0x33c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fd64 	bl	80055b4 <SerialPrintlnINT>
						moveMotor(CLAMPMOTOR, CW, M1POS1VAL);
 8005aec:	2200      	movs	r2, #0
 8005aee:	2101      	movs	r1, #1
 8005af0:	2001      	movs	r0, #1
 8005af2:	f7fd fbef 	bl	80032d4 <moveMotor>
 8005af6:	e004      	b.n	8005b02 <MotorTest+0x2c6>
					} else {
						moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005af8:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <MotorTest+0x338>)
 8005afa:	2100      	movs	r1, #0
 8005afc:	2001      	movs	r0, #1
 8005afe:	f7fd fbe9 	bl	80032d4 <moveMotor>
				while (readKeypadNonBlock(ALL) == 4) {
 8005b02:	2000      	movs	r0, #0
 8005b04:	f7fe fb48 	bl	8004198 <readKeypadNonBlock>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d0e1      	beq.n	8005ad2 <MotorTest+0x296>
					}
				}
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005b0e:	4a19      	ldr	r2, [pc, #100]	; (8005b74 <MotorTest+0x338>)
 8005b10:	2100      	movs	r1, #0
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fd fbde 	bl	80032d4 <moveMotor>
 8005b18:	e69c      	b.n	8005854 <MotorTest+0x18>
			}
			else if (var == 6) {
 8005b1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b1e:	2b06      	cmp	r3, #6
 8005b20:	d155      	bne.n	8005bce <MotorTest+0x392>
				while (readKeypadNonBlock(ALL) == 6) {
 8005b22:	e048      	b.n	8005bb6 <MotorTest+0x37a>
 8005b24:	0801a380 	.word	0x0801a380
 8005b28:	200027f8 	.word	0x200027f8
 8005b2c:	2000036c 	.word	0x2000036c
 8005b30:	2000039c 	.word	0x2000039c
 8005b34:	20000110 	.word	0x20000110
 8005b38:	0801a390 	.word	0x0801a390
 8005b3c:	0801a398 	.word	0x0801a398
 8005b40:	20000395 	.word	0x20000395
 8005b44:	2000010f 	.word	0x2000010f
 8005b48:	0801a3a4 	.word	0x0801a3a4
 8005b4c:	0801a3b4 	.word	0x0801a3b4
 8005b50:	20000364 	.word	0x20000364
 8005b54:	200027e8 	.word	0x200027e8
 8005b58:	0801a3cc 	.word	0x0801a3cc
 8005b5c:	0801a3dc 	.word	0x0801a3dc
 8005b60:	0801a3f4 	.word	0x0801a3f4
 8005b64:	20000388 	.word	0x20000388
 8005b68:	0801a40c 	.word	0x0801a40c
 8005b6c:	20000104 	.word	0x20000104
 8005b70:	20000108 	.word	0x20000108
 8005b74:	0098967f 	.word	0x0098967f
 8005b78:	200000fc 	.word	0x200000fc
 8005b7c:	20000100 	.word	0x20000100
					if (Clamp_M2_EncA_Pulses < (M1POS2VAL)  || Clamp_M2_EncB_Pulses < (M1POS2VAL)) {
 8005b80:	4b80      	ldr	r3, [pc, #512]	; (8005d84 <MotorTest+0x548>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8005b88:	db04      	blt.n	8005b94 <MotorTest+0x358>
 8005b8a:	4b7f      	ldr	r3, [pc, #508]	; (8005d88 <MotorTest+0x54c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8005b92:	da0b      	bge.n	8005bac <MotorTest+0x370>
						SerialPrintlnINT(Clamp_M2_EncA_Pulses);
 8005b94:	4b7b      	ldr	r3, [pc, #492]	; (8005d84 <MotorTest+0x548>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fd0b 	bl	80055b4 <SerialPrintlnINT>
						moveMotor(CLAMPMOTOR, CCW, (M1POS2VAL));
 8005b9e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	2001      	movs	r0, #1
 8005ba6:	f7fd fb95 	bl	80032d4 <moveMotor>
 8005baa:	e004      	b.n	8005bb6 <MotorTest+0x37a>
					} else {
						moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005bac:	4a77      	ldr	r2, [pc, #476]	; (8005d8c <MotorTest+0x550>)
 8005bae:	2100      	movs	r1, #0
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7fd fb8f 	bl	80032d4 <moveMotor>
				while (readKeypadNonBlock(ALL) == 6) {
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f7fe faee 	bl	8004198 <readKeypadNonBlock>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b06      	cmp	r3, #6
 8005bc0:	d0de      	beq.n	8005b80 <MotorTest+0x344>
					}
				}
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005bc2:	4a72      	ldr	r2, [pc, #456]	; (8005d8c <MotorTest+0x550>)
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f7fd fb84 	bl	80032d4 <moveMotor>
 8005bcc:	e642      	b.n	8005854 <MotorTest+0x18>
			}
			else if (var == 9) { //Which thing should be controlled with it?
 8005bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d11f      	bne.n	8005c16 <MotorTest+0x3da>
				while (readKeypadNonBlock(ALL) == 9) {
 8005bd6:	e012      	b.n	8005bfe <MotorTest+0x3c2>
					if(ValveOpen > ValveClose){
						if (percent <= ValveOpen) {
 8005bd8:	4b6d      	ldr	r3, [pc, #436]	; (8005d90 <MotorTest+0x554>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b64      	cmp	r3, #100	; 0x64
 8005bde:	dc09      	bgt.n	8005bf4 <MotorTest+0x3b8>
							Servo_SetPercent(percent +1);//(angle + 1);
 8005be0:	4b6b      	ldr	r3, [pc, #428]	; (8005d90 <MotorTest+0x554>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3301      	adds	r3, #1
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7ff fd62 	bl	80056b0 <Servo_SetPercent>
							HAL_Delay(20);
 8005bec:	2014      	movs	r0, #20
 8005bee:	f002 fe37 	bl	8008860 <HAL_Delay>
 8005bf2:	e004      	b.n	8005bfe <MotorTest+0x3c2>
						} else { //Do Nothing?
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8005bf4:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8005d94 <MotorTest+0x558>
 8005bf8:	2005      	movs	r0, #5
 8005bfa:	f001 fbb3 	bl	8007364 <pwm>
				while (readKeypadNonBlock(ALL) == 9) {
 8005bfe:	2000      	movs	r0, #0
 8005c00:	f7fe faca 	bl	8004198 <readKeypadNonBlock>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d0e6      	beq.n	8005bd8 <MotorTest+0x39c>
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
						}
					}
				}
				//moveMotor(CLAMPMOTOR, OFF, INT_INF);
				pwm(ServoDC_M1_PWM, 0);
 8005c0a:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8005d94 <MotorTest+0x558>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f001 fba8 	bl	8007364 <pwm>
 8005c14:	e61e      	b.n	8005854 <MotorTest+0x18>

			}
			else if (var == 7) { //Which thing should be controlled with it?
 8005c16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c1a:	2b07      	cmp	r3, #7
 8005c1c:	f47f ae1a 	bne.w	8005854 <MotorTest+0x18>
				while (readKeypadNonBlock(ALL) == 7) {
 8005c20:	e012      	b.n	8005c48 <MotorTest+0x40c>
					if(ValveOpen > ValveClose){
						if (percent >= ValveClose) {
 8005c22:	4b5b      	ldr	r3, [pc, #364]	; (8005d90 <MotorTest+0x554>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	db09      	blt.n	8005c3e <MotorTest+0x402>
							Servo_SetPercent(percent - 1);
 8005c2a:	4b59      	ldr	r3, [pc, #356]	; (8005d90 <MotorTest+0x554>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fd3d 	bl	80056b0 <Servo_SetPercent>
							HAL_Delay(20);
 8005c36:	2014      	movs	r0, #20
 8005c38:	f002 fe12 	bl	8008860 <HAL_Delay>
 8005c3c:	e004      	b.n	8005c48 <MotorTest+0x40c>
						} else { //Do Nothing?
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8005c3e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8005d94 <MotorTest+0x558>
 8005c42:	2005      	movs	r0, #5
 8005c44:	f001 fb8e 	bl	8007364 <pwm>
				while (readKeypadNonBlock(ALL) == 7) {
 8005c48:	2000      	movs	r0, #0
 8005c4a:	f7fe faa5 	bl	8004198 <readKeypadNonBlock>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b07      	cmp	r3, #7
 8005c52:	d0e6      	beq.n	8005c22 <MotorTest+0x3e6>
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
						}
					}
				}
				//moveMotor(CLAMPMOTOR, OFF, INT_INF);
				pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8005c54:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8005d94 <MotorTest+0x558>
 8005c58:	2005      	movs	r0, #5
 8005c5a:	f001 fb83 	bl	8007364 <pwm>
 8005c5e:	e5f9      	b.n	8005854 <MotorTest+0x18>
				//moveMotor(VALVEMOTOR, OFF, INT_INF);		//Relay Control ON
			} else if (var == 3) {
				//moveMotor(VALVEMOTOR, ON, INT_INF);	//Relay Control OFF
			}
		} else {
			ReadKeypadVar(ALL);
 8005c60:	2000      	movs	r0, #0
 8005c62:	f7fe fa4d 	bl	8004100 <ReadKeypadVar>
			char buffer[21]; // Buffer to hold the formatted string
			char buffer2[21]; // Buffer to hold the formatted string
			sprintf(buffer, "AC-W:%ld S:%d", Total_Weight,percent);
 8005c66:	4b4c      	ldr	r3, [pc, #304]	; (8005d98 <MotorTest+0x55c>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b49      	ldr	r3, [pc, #292]	; (8005d90 <MotorTest+0x554>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f107 001c 	add.w	r0, r7, #28
 8005c72:	494a      	ldr	r1, [pc, #296]	; (8005d9c <MotorTest+0x560>)
 8005c74:	f010 fc46 	bl	8016504 <siprintf>
			printLCD(0, buffer, NO_SYMBOL);
 8005c78:	f107 031c 	add.w	r3, r7, #28
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4619      	mov	r1, r3
 8005c80:	2000      	movs	r0, #0
 8005c82:	f7ff f8a3 	bl	8004dcc <printLCD>
			printLCD(1, "CAP    CLAMP   SERVO", NO_SYMBOL);
 8005c86:	2200      	movs	r2, #0
 8005c88:	4945      	ldr	r1, [pc, #276]	; (8005da0 <MotorTest+0x564>)
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f7ff f89e 	bl	8004dcc <printLCD>
			printLCD(2, "0,2,5,8   4/6    7/9", NO_SYMBOL);
 8005c90:	2200      	movs	r2, #0
 8005c92:	4944      	ldr	r1, [pc, #272]	; (8005da4 <MotorTest+0x568>)
 8005c94:	2002      	movs	r0, #2
 8005c96:	f7ff f899 	bl	8004dcc <printLCD>
			sprintf(buffer2, "Valve: 1/3 %s", ValveStatus);
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	4a42      	ldr	r2, [pc, #264]	; (8005da8 <MotorTest+0x56c>)
 8005c9e:	4943      	ldr	r1, [pc, #268]	; (8005dac <MotorTest+0x570>)
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f010 fc2f 	bl	8016504 <siprintf>
			printLCD(3, buffer2, NO_SYMBOL);
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	2200      	movs	r2, #0
 8005caa:	4619      	mov	r1, r3
 8005cac:	2003      	movs	r0, #3
 8005cae:	f7ff f88d 	bl	8004dcc <printLCD>

			switch(lastKeyPressed){
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <MotorTest+0x574>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b0d      	cmp	r3, #13
 8005cb8:	d85f      	bhi.n	8005d7a <MotorTest+0x53e>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <MotorTest+0x484>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005d3f 	.word	0x08005d3f
 8005cc4:	08005d0b 	.word	0x08005d0b
 8005cc8:	08005d47 	.word	0x08005d47
 8005ccc:	08005d17 	.word	0x08005d17
 8005cd0:	08005cf9 	.word	0x08005cf9
 8005cd4:	08005d51 	.word	0x08005d51
 8005cd8:	08005d01 	.word	0x08005d01
 8005cdc:	08005d23 	.word	0x08005d23
 8005ce0:	08005d5b 	.word	0x08005d5b
 8005ce4:	08005d31 	.word	0x08005d31
 8005ce8:	08005d65 	.word	0x08005d65
 8005cec:	08005d7b 	.word	0x08005d7b
 8005cf0:	08005d7b 	.word	0x08005d7b
 8005cf4:	08005d75 	.word	0x08005d75
			case  4:
				moveMotorClampToLocBlock(M1POS1VAL);
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f7fd f9a7 	bl	800304c <moveMotorClampToLocBlock>
				break;
 8005cfe:	e040      	b.n	8005d82 <MotorTest+0x546>
			case  6:
				moveMotorClampToLocBlock(M1POS2VAL);
 8005d00:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8005d04:	f7fd f9a2 	bl	800304c <moveMotorClampToLocBlock>
				break;
 8005d08:	e03b      	b.n	8005d82 <MotorTest+0x546>

			case  1:
				moveMotor(VALVEMOTOR, OFF, INT_INF);	//Relay Control ON
 8005d0a:	4a20      	ldr	r2, [pc, #128]	; (8005d8c <MotorTest+0x550>)
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	2003      	movs	r0, #3
 8005d10:	f7fd fae0 	bl	80032d4 <moveMotor>
				break;
 8005d14:	e035      	b.n	8005d82 <MotorTest+0x546>

			case  3:
				moveMotor(VALVEMOTOR, ON, INT_INF);		//Relay Control OFF
 8005d16:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <MotorTest+0x550>)
 8005d18:	2101      	movs	r1, #1
 8005d1a:	2003      	movs	r0, #3
 8005d1c:	f7fd fada 	bl	80032d4 <moveMotor>
				break;
 8005d20:	e02f      	b.n	8005d82 <MotorTest+0x546>

			case  7:
				Servo_SetPercent(percent - 10);
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <MotorTest+0x554>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3b0a      	subs	r3, #10
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fcc1 	bl	80056b0 <Servo_SetPercent>
				break;
 8005d2e:	e028      	b.n	8005d82 <MotorTest+0x546>
			case  9:
				Servo_SetPercent(percent + 10);
 8005d30:	4b17      	ldr	r3, [pc, #92]	; (8005d90 <MotorTest+0x554>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330a      	adds	r3, #10
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7ff fcba 	bl	80056b0 <Servo_SetPercent>
				break;
 8005d3c:	e021      	b.n	8005d82 <MotorTest+0x546>
			case  0:
				moveMotorSpindleToLocBlock(M2POS1VAL);
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f7fd f958 	bl	8002ff4 <moveMotorSpindleToLocBlock>
				break;
 8005d44:	e01d      	b.n	8005d82 <MotorTest+0x546>

			case  2:
				moveMotorSpindleToLocBlock(M2POS2VAL);
 8005d46:	f640 40b2 	movw	r0, #3250	; 0xcb2
 8005d4a:	f7fd f953 	bl	8002ff4 <moveMotorSpindleToLocBlock>
				break;
 8005d4e:	e018      	b.n	8005d82 <MotorTest+0x546>

			case  5:
				moveMotorSpindleToLocBlock(M2POS3VAL);
 8005d50:	f241 1094 	movw	r0, #4500	; 0x1194
 8005d54:	f7fd f94e 	bl	8002ff4 <moveMotorSpindleToLocBlock>
				break;
 8005d58:	e013      	b.n	8005d82 <MotorTest+0x546>

			case  8:
				moveMotorSpindleToLocBlock(M2POS4VAL);
 8005d5a:	f641 30bc 	movw	r0, #7100	; 0x1bbc
 8005d5e:	f7fd f949 	bl	8002ff4 <moveMotorSpindleToLocBlock>
				break;
 8005d62:	e00e      	b.n	8005d82 <MotorTest+0x546>

			case  10:
				xTaskNotifyGive(xCustomerAppTaskEndHandle);
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <MotorTest+0x578>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	2300      	movs	r3, #0
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	2100      	movs	r1, #0
 8005d6e:	f00e f8dd 	bl	8013f2c <xTaskGenericNotify>
				break;
 8005d72:	e006      	b.n	8005d82 <MotorTest+0x546>
			case  13:
				TareAll();
 8005d74:	f7ff f922 	bl	8004fbc <TareAll>
				break;
 8005d78:	e003      	b.n	8005d82 <MotorTest+0x546>
			default :
				lastKeyPressed =255;
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <MotorTest+0x574>)
 8005d7c:	22ff      	movs	r2, #255	; 0xff
 8005d7e:	601a      	str	r2, [r3, #0]
				break;
 8005d80:	bf00      	nop
		 if (HAL_GetTick() - StoringTimedev >= 1000) {  // Check if 2 seconds passed
 8005d82:	e567      	b.n	8005854 <MotorTest+0x18>
 8005d84:	200000fc 	.word	0x200000fc
 8005d88:	20000100 	.word	0x20000100
 8005d8c:	0098967f 	.word	0x0098967f
 8005d90:	200027e8 	.word	0x200027e8
 8005d94:	00000000 	.word	0x00000000
 8005d98:	20000364 	.word	0x20000364
 8005d9c:	0801a41c 	.word	0x0801a41c
 8005da0:	0801a3dc 	.word	0x0801a3dc
 8005da4:	0801a42c 	.word	0x0801a42c
 8005da8:	20000388 	.word	0x20000388
 8005dac:	0801a40c 	.word	0x0801a40c
 8005db0:	20000110 	.word	0x20000110
 8005db4:	20002ba8 	.word	0x20002ba8

08005db8 <DeveloperMenu>:
		}
	}

}

void DeveloperMenu(void) { //Enter developer menu under next condition
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	int pass = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	607b      	str	r3, [r7, #4]
	if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) { // Man/Auto, comma and delete are all pressed at same time
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f7fd f8ce 	bl	8002f64 <digitalRead>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d115      	bne.n	8005dfa <DeveloperMenu+0x42>
		if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 8005dce:	200e      	movs	r0, #14
 8005dd0:	f7fd f8c8 	bl	8002f64 <digitalRead>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <DeveloperMenu+0x42>
			if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8005dda:	2002      	movs	r0, #2
 8005ddc:	f7fd f8c2 	bl	8002f64 <digitalRead>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <DeveloperMenu+0x42>
				pass = EnterPassword();
 8005de6:	f000 f80d 	bl	8005e04 <EnterPassword>
 8005dea:	6078      	str	r0, [r7, #4]
				if (pass == 4869) { //Then this password is entered
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f241 3205 	movw	r2, #4869	; 0x1305
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d101      	bne.n	8005dfa <DeveloperMenu+0x42>
					MotorTest();
 8005df6:	f7ff fd21 	bl	800583c <MotorTest>
					//CustomerFrontEnd();
				}
			}
		}
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <EnterPassword>:

int EnterPassword(void) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b090      	sub	sp, #64	; 0x40
 8005e08:	af00      	add	r7, sp, #0
	int Key = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	char stars[21] = { '\0' }; // Allocate a char array for the password asterisks
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
 8005e12:	f107 0320 	add.w	r3, r7, #32
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	605a      	str	r2, [r3, #4]
 8005e1c:	609a      	str	r2, [r3, #8]
 8005e1e:	60da      	str	r2, [r3, #12]
 8005e20:	741a      	strb	r2, [r3, #16]
	char buffer[21];          // Buffer for converting numbers to strings

	LCD_Clear();
 8005e22:	f7fe fed3 	bl	8004bcc <LCD_Clear>
	printLCD(0, "Enter password:", NO_SYMBOL);
 8005e26:	2200      	movs	r2, #0
 8005e28:	4936      	ldr	r1, [pc, #216]	; (8005f04 <EnterPassword+0x100>)
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f7fe ffce 	bl	8004dcc <printLCD>
	ReadKeypadVar(ALL);
 8005e30:	2000      	movs	r0, #0
 8005e32:	f7fe f965 	bl	8004100 <ReadKeypadVar>

	while (lastKeyPressed != ENTERKEY) {
 8005e36:	e056      	b.n	8005ee6 <EnterPassword+0xe2>
		ReadKeypadVar(ALL);
 8005e38:	2000      	movs	r0, #0
 8005e3a:	f7fe f961 	bl	8004100 <ReadKeypadVar>
		if (lastKeyPressed >= 0 && lastKeyPressed <= 9) {
 8005e3e:	4b32      	ldr	r3, [pc, #200]	; (8005f08 <EnterPassword+0x104>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	db2b      	blt.n	8005e9e <EnterPassword+0x9a>
 8005e46:	4b30      	ldr	r3, [pc, #192]	; (8005f08 <EnterPassword+0x104>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b09      	cmp	r3, #9
 8005e4c:	dc27      	bgt.n	8005e9e <EnterPassword+0x9a>
			Key = Key * 10 + lastKeyPressed;
 8005e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b2b      	ldr	r3, [pc, #172]	; (8005f08 <EnterPassword+0x104>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4413      	add	r3, r2
 8005e60:	63fb      	str	r3, [r7, #60]	; 0x3c

			int len = strlen(stars);
 8005e62:	f107 031c 	add.w	r3, r7, #28
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa fa12 	bl	8000290 <strlen>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38
			if (len < sizeof(stars) - 1) {
 8005e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e72:	2b13      	cmp	r3, #19
 8005e74:	d80c      	bhi.n	8005e90 <EnterPassword+0x8c>
				stars[len] = '*';
 8005e76:	f107 021c 	add.w	r2, r7, #28
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	4413      	add	r3, r2
 8005e7e:	222a      	movs	r2, #42	; 0x2a
 8005e80:	701a      	strb	r2, [r3, #0]
				stars[len + 1] = '\0';  // Null-terminate the string
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	3301      	adds	r3, #1
 8005e86:	3340      	adds	r3, #64	; 0x40
 8005e88:	443b      	add	r3, r7
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f803 2c24 	strb.w	r2, [r3, #-36]
			}

			printLCD(1, stars, NO_SYMBOL);
 8005e90:	f107 031c 	add.w	r3, r7, #28
 8005e94:	2200      	movs	r2, #0
 8005e96:	4619      	mov	r1, r3
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f7fe ff97 	bl	8004dcc <printLCD>
		}
		// If DELKEY is pressed, remove the last entered character
		if (lastKeyPressed == DELKEY) {
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <EnterPassword+0x104>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b0e      	cmp	r3, #14
 8005ea4:	d11f      	bne.n	8005ee6 <EnterPassword+0xe2>
			Key /= 10;
 8005ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea8:	4a18      	ldr	r2, [pc, #96]	; (8005f0c <EnterPassword+0x108>)
 8005eaa:	fb82 1203 	smull	r1, r2, r2, r3
 8005eae:	1092      	asrs	r2, r2, #2
 8005eb0:	17db      	asrs	r3, r3, #31
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	63fb      	str	r3, [r7, #60]	; 0x3c

			int len = strlen(stars);
 8005eb6:	f107 031c 	add.w	r3, r7, #28
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fa f9e8 	bl	8000290 <strlen>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
			if (len > 0) {
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd06      	ble.n	8005ed8 <EnterPassword+0xd4>
				stars[len - 1] = '\0';
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	3340      	adds	r3, #64	; 0x40
 8005ed0:	443b      	add	r3, r7
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
			printLCD(1, stars, NO_SYMBOL);
 8005ed8:	f107 031c 	add.w	r3, r7, #28
 8005edc:	2200      	movs	r2, #0
 8005ede:	4619      	mov	r1, r3
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f7fe ff73 	bl	8004dcc <printLCD>
	while (lastKeyPressed != ENTERKEY) {
 8005ee6:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <EnterPassword+0x104>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b0b      	cmp	r3, #11
 8005eec:	d1a4      	bne.n	8005e38 <EnterPassword+0x34>
		}
	}
	// Convert integer Key to string and print
	snprintf(buffer, sizeof(buffer), "Pass: %d", Key);
 8005eee:	1d38      	adds	r0, r7, #4
 8005ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef2:	4a07      	ldr	r2, [pc, #28]	; (8005f10 <EnterPassword+0x10c>)
 8005ef4:	2115      	movs	r1, #21
 8005ef6:	f010 fad1 	bl	801649c <sniprintf>
	//SerialPrint(buffer);

	return Key;
 8005efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3740      	adds	r7, #64	; 0x40
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	0801a444 	.word	0x0801a444
 8005f08:	20000110 	.word	0x20000110
 8005f0c:	66666667 	.word	0x66666667
 8005f10:	0801a454 	.word	0x0801a454

08005f14 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f1a:	463b      	mov	r3, r7
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005f26:	4b21      	ldr	r3, [pc, #132]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f28:	4a21      	ldr	r2, [pc, #132]	; (8005fb0 <MX_ADC1_Init+0x9c>)
 8005f2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005f2c:	4b1f      	ldr	r3, [pc, #124]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f2e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005f32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005f34:	4b1d      	ldr	r3, [pc, #116]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005f40:	4b1a      	ldr	r3, [pc, #104]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f42:	2200      	movs	r2, #0
 8005f44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005f46:	4b19      	ldr	r3, [pc, #100]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f4e:	4b17      	ldr	r3, [pc, #92]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f54:	4b15      	ldr	r3, [pc, #84]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f56:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <MX_ADC1_Init+0xa0>)
 8005f58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f5a:	4b14      	ldr	r3, [pc, #80]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005f60:	4b12      	ldr	r3, [pc, #72]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005f66:	4b11      	ldr	r3, [pc, #68]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005f74:	480d      	ldr	r0, [pc, #52]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f76:	f002 fc97 	bl	80088a8 <HAL_ADC_Init>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005f80:	f001 f9ea 	bl	8007358 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005f84:	230e      	movs	r3, #14
 8005f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005f90:	463b      	mov	r3, r7
 8005f92:	4619      	mov	r1, r3
 8005f94:	4805      	ldr	r0, [pc, #20]	; (8005fac <MX_ADC1_Init+0x98>)
 8005f96:	f002 fe69 	bl	8008c6c <HAL_ADC_ConfigChannel>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005fa0:	f001 f9da 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20002800 	.word	0x20002800
 8005fb0:	40012000 	.word	0x40012000
 8005fb4:	0f000001 	.word	0x0f000001

08005fb8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	605a      	str	r2, [r3, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
 8005fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <MX_ADC2_Init+0x98>)
 8005fcc:	4a21      	ldr	r2, [pc, #132]	; (8006054 <MX_ADC2_Init+0x9c>)
 8005fce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005fd0:	4b1f      	ldr	r3, [pc, #124]	; (8006050 <MX_ADC2_Init+0x98>)
 8005fd2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005fd6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <MX_ADC2_Init+0x98>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005fde:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <MX_ADC2_Init+0x98>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <MX_ADC2_Init+0x98>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005fea:	4b19      	ldr	r3, [pc, #100]	; (8006050 <MX_ADC2_Init+0x98>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ff2:	4b17      	ldr	r3, [pc, #92]	; (8006050 <MX_ADC2_Init+0x98>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <MX_ADC2_Init+0x98>)
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <MX_ADC2_Init+0xa0>)
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <MX_ADC2_Init+0x98>)
 8006000:	2200      	movs	r2, #0
 8006002:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006004:	4b12      	ldr	r3, [pc, #72]	; (8006050 <MX_ADC2_Init+0x98>)
 8006006:	2201      	movs	r2, #1
 8006008:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800600a:	4b11      	ldr	r3, [pc, #68]	; (8006050 <MX_ADC2_Init+0x98>)
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <MX_ADC2_Init+0x98>)
 8006014:	2201      	movs	r2, #1
 8006016:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006018:	480d      	ldr	r0, [pc, #52]	; (8006050 <MX_ADC2_Init+0x98>)
 800601a:	f002 fc45 	bl	80088a8 <HAL_ADC_Init>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006024:	f001 f998 	bl	8007358 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006028:	2301      	movs	r3, #1
 800602a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800602c:	2301      	movs	r3, #1
 800602e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006030:	2300      	movs	r3, #0
 8006032:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006034:	463b      	mov	r3, r7
 8006036:	4619      	mov	r1, r3
 8006038:	4805      	ldr	r0, [pc, #20]	; (8006050 <MX_ADC2_Init+0x98>)
 800603a:	f002 fe17 	bl	8008c6c <HAL_ADC_ConfigChannel>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006044:	f001 f988 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20002848 	.word	0x20002848
 8006054:	40012100 	.word	0x40012100
 8006058:	0f000001 	.word	0x0f000001

0800605c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006062:	463b      	mov	r3, r7
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800606e:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <MX_ADC3_Init+0x98>)
 8006070:	4a21      	ldr	r2, [pc, #132]	; (80060f8 <MX_ADC3_Init+0x9c>)
 8006072:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006074:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <MX_ADC3_Init+0x98>)
 8006076:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800607a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800607c:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <MX_ADC3_Init+0x98>)
 800607e:	2200      	movs	r2, #0
 8006080:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8006082:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <MX_ADC3_Init+0x98>)
 8006084:	2200      	movs	r2, #0
 8006086:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8006088:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <MX_ADC3_Init+0x98>)
 800608a:	2201      	movs	r2, #1
 800608c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <MX_ADC3_Init+0x98>)
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006096:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <MX_ADC3_Init+0x98>)
 8006098:	2200      	movs	r2, #0
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800609c:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <MX_ADC3_Init+0x98>)
 800609e:	4a17      	ldr	r2, [pc, #92]	; (80060fc <MX_ADC3_Init+0xa0>)
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <MX_ADC3_Init+0x98>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80060a8:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <MX_ADC3_Init+0x98>)
 80060aa:	2201      	movs	r2, #1
 80060ac:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <MX_ADC3_Init+0x98>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80060b6:	4b0f      	ldr	r3, [pc, #60]	; (80060f4 <MX_ADC3_Init+0x98>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80060bc:	480d      	ldr	r0, [pc, #52]	; (80060f4 <MX_ADC3_Init+0x98>)
 80060be:	f002 fbf3 	bl	80088a8 <HAL_ADC_Init>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80060c8:	f001 f946 	bl	8007358 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80060d0:	2301      	movs	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80060d8:	463b      	mov	r3, r7
 80060da:	4619      	mov	r1, r3
 80060dc:	4805      	ldr	r0, [pc, #20]	; (80060f4 <MX_ADC3_Init+0x98>)
 80060de:	f002 fdc5 	bl	8008c6c <HAL_ADC_ConfigChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80060e8:	f001 f936 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20002890 	.word	0x20002890
 80060f8:	40012200 	.word	0x40012200
 80060fc:	0f000001 	.word	0x0f000001

08006100 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	; 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a52      	ldr	r2, [pc, #328]	; (8006268 <HAL_ADC_MspInit+0x168>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d128      	bne.n	8006174 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006122:	2300      	movs	r3, #0
 8006124:	623b      	str	r3, [r7, #32]
 8006126:	4b51      	ldr	r3, [pc, #324]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800612a:	4a50      	ldr	r2, [pc, #320]	; (800626c <HAL_ADC_MspInit+0x16c>)
 800612c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006130:	6453      	str	r3, [r2, #68]	; 0x44
 8006132:	4b4e      	ldr	r3, [pc, #312]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613a:	623b      	str	r3, [r7, #32]
 800613c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	61fb      	str	r3, [r7, #28]
 8006142:	4b4a      	ldr	r3, [pc, #296]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006146:	4a49      	ldr	r2, [pc, #292]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006148:	f043 0304 	orr.w	r3, r3, #4
 800614c:	6313      	str	r3, [r2, #48]	; 0x30
 800614e:	4b47      	ldr	r3, [pc, #284]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	61fb      	str	r3, [r7, #28]
 8006158:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = Sensor_Pressure_ADC_Input_Pin;
 800615a:	2310      	movs	r3, #16
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800615e:	2303      	movs	r3, #3
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Sensor_Pressure_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 8006166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800616a:	4619      	mov	r1, r3
 800616c:	4840      	ldr	r0, [pc, #256]	; (8006270 <HAL_ADC_MspInit+0x170>)
 800616e:	f003 fe17 	bl	8009da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8006172:	e074      	b.n	800625e <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3e      	ldr	r2, [pc, #248]	; (8006274 <HAL_ADC_MspInit+0x174>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d128      	bne.n	80061d0 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800617e:	2300      	movs	r3, #0
 8006180:	61bb      	str	r3, [r7, #24]
 8006182:	4b3a      	ldr	r3, [pc, #232]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	4a39      	ldr	r2, [pc, #228]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800618c:	6453      	str	r3, [r2, #68]	; 0x44
 800618e:	4b37      	ldr	r3, [pc, #220]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	4a32      	ldr	r2, [pc, #200]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	6313      	str	r3, [r2, #48]	; 0x30
 80061aa:	4b30      	ldr	r3, [pc, #192]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = V12_ADC_Input_Pin;
 80061b6:	2302      	movs	r3, #2
 80061b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061ba:	2303      	movs	r3, #3
 80061bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061be:	2300      	movs	r3, #0
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(V12_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 80061c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061c6:	4619      	mov	r1, r3
 80061c8:	482b      	ldr	r0, [pc, #172]	; (8006278 <HAL_ADC_MspInit+0x178>)
 80061ca:	f003 fde9 	bl	8009da0 <HAL_GPIO_Init>
}
 80061ce:	e046      	b.n	800625e <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a29      	ldr	r2, [pc, #164]	; (800627c <HAL_ADC_MspInit+0x17c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d141      	bne.n	800625e <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	613b      	str	r3, [r7, #16]
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e2:	4a22      	ldr	r2, [pc, #136]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061e8:	6453      	str	r3, [r2, #68]	; 0x44
 80061ea:	4b20      	ldr	r3, [pc, #128]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	613b      	str	r3, [r7, #16]
 80061f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	4b1c      	ldr	r3, [pc, #112]	; (800626c <HAL_ADC_MspInit+0x16c>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4a1b      	ldr	r2, [pc, #108]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006200:	f043 0304 	orr.w	r3, r3, #4
 8006204:	6313      	str	r3, [r2, #48]	; 0x30
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006212:	2300      	movs	r3, #0
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	4b15      	ldr	r3, [pc, #84]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621a:	4a14      	ldr	r2, [pc, #80]	; (800626c <HAL_ADC_MspInit+0x16c>)
 800621c:	f043 0301 	orr.w	r3, r3, #1
 8006220:	6313      	str	r3, [r2, #48]	; 0x30
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <HAL_ADC_MspInit+0x16c>)
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Curr_Sensor_ServoDC_ADC_Input_Pin|Curr_Sensor_Clamp_ADC_Input_Pin;
 800622e:	230c      	movs	r3, #12
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006232:	2303      	movs	r3, #3
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006236:	2300      	movs	r3, #0
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800623a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800623e:	4619      	mov	r1, r3
 8006240:	480b      	ldr	r0, [pc, #44]	; (8006270 <HAL_ADC_MspInit+0x170>)
 8006242:	f003 fdad 	bl	8009da0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Curr_Sensor_Spindle_ADC_Input_Pin;
 8006246:	2301      	movs	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800624a:	2303      	movs	r3, #3
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Curr_Sensor_Spindle_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 8006252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006256:	4619      	mov	r1, r3
 8006258:	4807      	ldr	r0, [pc, #28]	; (8006278 <HAL_ADC_MspInit+0x178>)
 800625a:	f003 fda1 	bl	8009da0 <HAL_GPIO_Init>
}
 800625e:	bf00      	nop
 8006260:	3738      	adds	r7, #56	; 0x38
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40012000 	.word	0x40012000
 800626c:	40023800 	.word	0x40023800
 8006270:	40020800 	.word	0x40020800
 8006274:	40012100 	.word	0x40012100
 8006278:	40020000 	.word	0x40020000
 800627c:	40012200 	.word	0x40012200

08006280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]
 800628a:	4b1b      	ldr	r3, [pc, #108]	; (80062f8 <MX_DMA_Init+0x78>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <MX_DMA_Init+0x78>)
 8006290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006294:	6313      	str	r3, [r2, #48]	; 0x30
 8006296:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <MX_DMA_Init+0x78>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80062a2:	2300      	movs	r3, #0
 80062a4:	603b      	str	r3, [r7, #0]
 80062a6:	4b14      	ldr	r3, [pc, #80]	; (80062f8 <MX_DMA_Init+0x78>)
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <MX_DMA_Init+0x78>)
 80062ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062b0:	6313      	str	r3, [r2, #48]	; 0x30
 80062b2:	4b11      	ldr	r3, [pc, #68]	; (80062f8 <MX_DMA_Init+0x78>)
 80062b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062ba:	603b      	str	r3, [r7, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80062be:	2200      	movs	r2, #0
 80062c0:	2105      	movs	r1, #5
 80062c2:	200c      	movs	r0, #12
 80062c4:	f002 ffa8 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80062c8:	200c      	movs	r0, #12
 80062ca:	f002 ffc1 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80062ce:	2200      	movs	r2, #0
 80062d0:	2105      	movs	r1, #5
 80062d2:	200e      	movs	r0, #14
 80062d4:	f002 ffa0 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80062d8:	200e      	movs	r0, #14
 80062da:	f002 ffb9 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2105      	movs	r1, #5
 80062e2:	203a      	movs	r0, #58	; 0x3a
 80062e4:	f002 ff98 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80062e8:	203a      	movs	r0, #58	; 0x3a
 80062ea:	f002 ffb1 	bl	8009250 <HAL_NVIC_EnableIRQ>

}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40023800 	.word	0x40023800

080062fc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006306:	4804      	ldr	r0, [pc, #16]	; (8006318 <SELECT+0x1c>)
 8006308:	f003 fefe 	bl	800a108 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800630c:	2001      	movs	r0, #1
 800630e:	f002 faa7 	bl	8008860 <HAL_Delay>
}
 8006312:	bf00      	nop
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40020000 	.word	0x40020000

0800631c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8006320:	2201      	movs	r2, #1
 8006322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006326:	4804      	ldr	r0, [pc, #16]	; (8006338 <DESELECT+0x1c>)
 8006328:	f003 feee 	bl	800a108 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800632c:	2001      	movs	r0, #1
 800632e:	f002 fa97 	bl	8008860 <HAL_Delay>
}
 8006332:	bf00      	nop
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	40020000 	.word	0x40020000

0800633c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8006346:	bf00      	nop
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <SPI_TxByte+0x30>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b02      	cmp	r3, #2
 8006354:	d1f8      	bne.n	8006348 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8006356:	1df9      	adds	r1, r7, #7
 8006358:	2364      	movs	r3, #100	; 0x64
 800635a:	2201      	movs	r2, #1
 800635c:	4803      	ldr	r0, [pc, #12]	; (800636c <SPI_TxByte+0x30>)
 800635e:	f004 fcd8 	bl	800ad12 <HAL_SPI_Transmit>
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20002bac 	.word	0x20002bac

08006370 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	460b      	mov	r3, r1
 800637a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800637c:	bf00      	nop
 800637e:	4b08      	ldr	r3, [pc, #32]	; (80063a0 <SPI_TxBuffer+0x30>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d1f8      	bne.n	800637e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800638c:	887a      	ldrh	r2, [r7, #2]
 800638e:	2364      	movs	r3, #100	; 0x64
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4803      	ldr	r0, [pc, #12]	; (80063a0 <SPI_TxBuffer+0x30>)
 8006394:	f004 fcbd 	bl	800ad12 <HAL_SPI_Transmit>
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20002bac 	.word	0x20002bac

080063a4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80063aa:	23ff      	movs	r3, #255	; 0xff
 80063ac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80063ae:	bf00      	nop
 80063b0:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <SPI_RxByte+0x34>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d1f8      	bne.n	80063b0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80063be:	1dba      	adds	r2, r7, #6
 80063c0:	1df9      	adds	r1, r7, #7
 80063c2:	2364      	movs	r3, #100	; 0x64
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	2301      	movs	r3, #1
 80063c8:	4803      	ldr	r0, [pc, #12]	; (80063d8 <SPI_RxByte+0x34>)
 80063ca:	f004 fde5 	bl	800af98 <HAL_SPI_TransmitReceive>

	return data;
 80063ce:	79bb      	ldrb	r3, [r7, #6]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20002bac 	.word	0x20002bac

080063dc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80063e4:	f7ff ffde 	bl	80063a4 <SPI_RxByte>
 80063e8:	4603      	mov	r3, r0
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	701a      	strb	r2, [r3, #0]
}
 80063f0:	bf00      	nop
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80063fe:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <SD_ReadyWait+0x30>)
 8006400:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006404:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8006406:	f7ff ffcd 	bl	80063a4 <SPI_RxByte>
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	2bff      	cmp	r3, #255	; 0xff
 8006412:	d004      	beq.n	800641e <SD_ReadyWait+0x26>
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <SD_ReadyWait+0x30>)
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	b29b      	uxth	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f3      	bne.n	8006406 <SD_ReadyWait+0xe>

	return res;
 800641e:	79fb      	ldrb	r3, [r7, #7]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20002c4d 	.word	0x20002c4d

0800642c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8006432:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8006436:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8006438:	f7ff ff70 	bl	800631c <DESELECT>
	for(int i = 0; i < 10; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	60bb      	str	r3, [r7, #8]
 8006440:	e005      	b.n	800644e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8006442:	20ff      	movs	r0, #255	; 0xff
 8006444:	f7ff ff7a 	bl	800633c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	3301      	adds	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2b09      	cmp	r3, #9
 8006452:	ddf6      	ble.n	8006442 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8006454:	f7ff ff52 	bl	80062fc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8006458:	2340      	movs	r3, #64	; 0x40
 800645a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 800646c:	2395      	movs	r3, #149	; 0x95
 800646e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8006470:	463b      	mov	r3, r7
 8006472:	2106      	movs	r1, #6
 8006474:	4618      	mov	r0, r3
 8006476:	f7ff ff7b 	bl	8006370 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800647a:	e002      	b.n	8006482 <SD_PowerOn+0x56>
	{
		cnt--;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3b01      	subs	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8006482:	f7ff ff8f 	bl	80063a4 <SPI_RxByte>
 8006486:	4603      	mov	r3, r0
 8006488:	2b01      	cmp	r3, #1
 800648a:	d002      	beq.n	8006492 <SD_PowerOn+0x66>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1f4      	bne.n	800647c <SD_PowerOn+0x50>
	}

	DESELECT();
 8006492:	f7ff ff43 	bl	800631c <DESELECT>
	SPI_TxByte(0XFF);
 8006496:	20ff      	movs	r0, #255	; 0xff
 8006498:	f7ff ff50 	bl	800633c <SPI_TxByte>

	PowerFlag = 1;
 800649c:	4b03      	ldr	r3, [pc, #12]	; (80064ac <SD_PowerOn+0x80>)
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200028d9 	.word	0x200028d9

080064b0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <SD_PowerOff+0x14>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	701a      	strb	r2, [r3, #0]
}
 80064ba:	bf00      	nop
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	200028d9 	.word	0x200028d9

080064c8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
	return PowerFlag;
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <SD_CheckPower+0x14>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	200028d9 	.word	0x200028d9

080064e0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80064ea:	4b14      	ldr	r3, [pc, #80]	; (800653c <SD_RxDataBlock+0x5c>)
 80064ec:	22c8      	movs	r2, #200	; 0xc8
 80064ee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80064f0:	f7ff ff58 	bl	80063a4 <SPI_RxByte>
 80064f4:	4603      	mov	r3, r0
 80064f6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2bff      	cmp	r3, #255	; 0xff
 80064fc:	d104      	bne.n	8006508 <SD_RxDataBlock+0x28>
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <SD_RxDataBlock+0x5c>)
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	b29b      	uxth	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f3      	bne.n	80064f0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	2bfe      	cmp	r3, #254	; 0xfe
 800650c:	d001      	beq.n	8006512 <SD_RxDataBlock+0x32>
 800650e:	2300      	movs	r3, #0
 8006510:	e00f      	b.n	8006532 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ff5f 	bl	80063dc <SPI_RxBytePtr>
	} while(len--);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	1e5a      	subs	r2, r3, #1
 8006522:	603a      	str	r2, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f4      	bne.n	8006512 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8006528:	f7ff ff3c 	bl	80063a4 <SPI_RxByte>
	SPI_RxByte();
 800652c:	f7ff ff3a 	bl	80063a4 <SPI_RxByte>

	return TRUE;
 8006530:	2301      	movs	r3, #1
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20002c4c 	.word	0x20002c4c

08006540 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	460b      	mov	r3, r1
 800654a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8006550:	f7ff ff52 	bl	80063f8 <SD_ReadyWait>
 8006554:	4603      	mov	r3, r0
 8006556:	2bff      	cmp	r3, #255	; 0xff
 8006558:	d001      	beq.n	800655e <SD_TxDataBlock+0x1e>
 800655a:	2300      	movs	r3, #0
 800655c:	e02f      	b.n	80065be <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff feeb 	bl	800633c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	2bfd      	cmp	r3, #253	; 0xfd
 800656a:	d020      	beq.n	80065ae <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800656c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fefd 	bl	8006370 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8006576:	f7ff ff15 	bl	80063a4 <SPI_RxByte>
		SPI_RxByte();
 800657a:	f7ff ff13 	bl	80063a4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800657e:	e00b      	b.n	8006598 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8006580:	f7ff ff10 	bl	80063a4 <SPI_RxByte>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2b05      	cmp	r3, #5
 8006590:	d006      	beq.n	80065a0 <SD_TxDataBlock+0x60>
			i++;
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	3301      	adds	r3, #1
 8006596:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d9f0      	bls.n	8006580 <SD_TxDataBlock+0x40>
 800659e:	e000      	b.n	80065a2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80065a0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80065a2:	bf00      	nop
 80065a4:	f7ff fefe 	bl	80063a4 <SPI_RxByte>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0fa      	beq.n	80065a4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	2b05      	cmp	r3, #5
 80065b6:	d101      	bne.n	80065bc <SD_TxDataBlock+0x7c>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <SD_TxDataBlock+0x7e>

	return FALSE;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	4603      	mov	r3, r0
 80065ce:	6039      	str	r1, [r7, #0]
 80065d0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80065d2:	f7ff ff11 	bl	80063f8 <SD_ReadyWait>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2bff      	cmp	r3, #255	; 0xff
 80065da:	d001      	beq.n	80065e0 <SD_SendCmd+0x1a>
 80065dc:	23ff      	movs	r3, #255	; 0xff
 80065de:	e042      	b.n	8006666 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7ff feaa 	bl	800633c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	0e1b      	lsrs	r3, r3, #24
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fea4 	bl	800633c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fe9e 	bl	800633c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	b2db      	uxtb	r3, r3
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fe98 	bl	800633c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fe93 	bl	800633c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d102      	bne.n	8006622 <SD_SendCmd+0x5c>
 800661c:	2395      	movs	r3, #149	; 0x95
 800661e:	73fb      	strb	r3, [r7, #15]
 8006620:	e007      	b.n	8006632 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	2b48      	cmp	r3, #72	; 0x48
 8006626:	d102      	bne.n	800662e <SD_SendCmd+0x68>
 8006628:	2387      	movs	r3, #135	; 0x87
 800662a:	73fb      	strb	r3, [r7, #15]
 800662c:	e001      	b.n	8006632 <SD_SendCmd+0x6c>
	else crc = 1;
 800662e:	2301      	movs	r3, #1
 8006630:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8006632:	7bfb      	ldrb	r3, [r7, #15]
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fe81 	bl	800633c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	2b4c      	cmp	r3, #76	; 0x4c
 800663e:	d101      	bne.n	8006644 <SD_SendCmd+0x7e>
 8006640:	f7ff feb0 	bl	80063a4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8006644:	230a      	movs	r3, #10
 8006646:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8006648:	f7ff feac 	bl	80063a4 <SPI_RxByte>
 800664c:	4603      	mov	r3, r0
 800664e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8006650:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8006654:	2b00      	cmp	r3, #0
 8006656:	da05      	bge.n	8006664 <SD_SendCmd+0x9e>
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	3b01      	subs	r3, #1
 800665c:	73bb      	strb	r3, [r7, #14]
 800665e:	7bbb      	ldrb	r3, [r7, #14]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f1      	bne.n	8006648 <SD_SendCmd+0x82>

	return res;
 8006664:	7b7b      	ldrb	r3, [r7, #13]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <SD_disk_initialize+0x14>
 8006680:	2301      	movs	r3, #1
 8006682:	e0d6      	b.n	8006832 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8006684:	4b6d      	ldr	r3, [pc, #436]	; (800683c <SD_disk_initialize+0x1cc>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <SD_disk_initialize+0x2a>
 8006692:	4b6a      	ldr	r3, [pc, #424]	; (800683c <SD_disk_initialize+0x1cc>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	e0cb      	b.n	8006832 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800669a:	f7ff fec7 	bl	800642c <SD_PowerOn>

	/* slave select */
	SELECT();
 800669e:	f7ff fe2d 	bl	80062fc <SELECT>

	/* check disk type */
	type = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80066a6:	2100      	movs	r1, #0
 80066a8:	2040      	movs	r0, #64	; 0x40
 80066aa:	f7ff ff8c 	bl	80065c6 <SD_SendCmd>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	f040 80a6 	bne.w	8006802 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80066b6:	4b62      	ldr	r3, [pc, #392]	; (8006840 <SD_disk_initialize+0x1d0>)
 80066b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066bc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80066be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066c2:	2048      	movs	r0, #72	; 0x48
 80066c4:	f7ff ff7f 	bl	80065c6 <SD_SendCmd>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d158      	bne.n	8006780 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
 80066d2:	e00c      	b.n	80066ee <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80066d4:	7bfc      	ldrb	r4, [r7, #15]
 80066d6:	f7ff fe65 	bl	80063a4 <SPI_RxByte>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	f104 0310 	add.w	r3, r4, #16
 80066e2:	443b      	add	r3, r7
 80066e4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	3301      	adds	r3, #1
 80066ec:	73fb      	strb	r3, [r7, #15]
 80066ee:	7bfb      	ldrb	r3, [r7, #15]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d9ef      	bls.n	80066d4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80066f4:	7abb      	ldrb	r3, [r7, #10]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	f040 8083 	bne.w	8006802 <SD_disk_initialize+0x192>
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	2baa      	cmp	r3, #170	; 0xaa
 8006700:	d17f      	bne.n	8006802 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8006702:	2100      	movs	r1, #0
 8006704:	2077      	movs	r0, #119	; 0x77
 8006706:	f7ff ff5e 	bl	80065c6 <SD_SendCmd>
 800670a:	4603      	mov	r3, r0
 800670c:	2b01      	cmp	r3, #1
 800670e:	d807      	bhi.n	8006720 <SD_disk_initialize+0xb0>
 8006710:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006714:	2069      	movs	r0, #105	; 0x69
 8006716:	f7ff ff56 	bl	80065c6 <SD_SendCmd>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8006720:	4b47      	ldr	r3, [pc, #284]	; (8006840 <SD_disk_initialize+0x1d0>)
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1eb      	bne.n	8006702 <SD_disk_initialize+0x92>
 800672a:	e000      	b.n	800672e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800672c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800672e:	4b44      	ldr	r3, [pc, #272]	; (8006840 <SD_disk_initialize+0x1d0>)
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d064      	beq.n	8006802 <SD_disk_initialize+0x192>
 8006738:	2100      	movs	r1, #0
 800673a:	207a      	movs	r0, #122	; 0x7a
 800673c:	f7ff ff43 	bl	80065c6 <SD_SendCmd>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d15d      	bne.n	8006802 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
 800674a:	e00c      	b.n	8006766 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800674c:	7bfc      	ldrb	r4, [r7, #15]
 800674e:	f7ff fe29 	bl	80063a4 <SPI_RxByte>
 8006752:	4603      	mov	r3, r0
 8006754:	461a      	mov	r2, r3
 8006756:	f104 0310 	add.w	r3, r4, #16
 800675a:	443b      	add	r3, r7
 800675c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	3301      	adds	r3, #1
 8006764:	73fb      	strb	r3, [r7, #15]
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d9ef      	bls.n	800674c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800676c:	7a3b      	ldrb	r3, [r7, #8]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <SD_disk_initialize+0x10a>
 8006776:	230c      	movs	r3, #12
 8006778:	e000      	b.n	800677c <SD_disk_initialize+0x10c>
 800677a:	2304      	movs	r3, #4
 800677c:	73bb      	strb	r3, [r7, #14]
 800677e:	e040      	b.n	8006802 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8006780:	2100      	movs	r1, #0
 8006782:	2077      	movs	r0, #119	; 0x77
 8006784:	f7ff ff1f 	bl	80065c6 <SD_SendCmd>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d808      	bhi.n	80067a0 <SD_disk_initialize+0x130>
 800678e:	2100      	movs	r1, #0
 8006790:	2069      	movs	r0, #105	; 0x69
 8006792:	f7ff ff18 	bl	80065c6 <SD_SendCmd>
 8006796:	4603      	mov	r3, r0
 8006798:	2b01      	cmp	r3, #1
 800679a:	d801      	bhi.n	80067a0 <SD_disk_initialize+0x130>
 800679c:	2302      	movs	r3, #2
 800679e:	e000      	b.n	80067a2 <SD_disk_initialize+0x132>
 80067a0:	2301      	movs	r3, #1
 80067a2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d10e      	bne.n	80067c8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80067aa:	2100      	movs	r1, #0
 80067ac:	2077      	movs	r0, #119	; 0x77
 80067ae:	f7ff ff0a 	bl	80065c6 <SD_SendCmd>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d80e      	bhi.n	80067d6 <SD_disk_initialize+0x166>
 80067b8:	2100      	movs	r1, #0
 80067ba:	2069      	movs	r0, #105	; 0x69
 80067bc:	f7ff ff03 	bl	80065c6 <SD_SendCmd>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <SD_disk_initialize+0x166>
 80067c6:	e00d      	b.n	80067e4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80067c8:	2100      	movs	r1, #0
 80067ca:	2041      	movs	r0, #65	; 0x41
 80067cc:	f7ff fefb 	bl	80065c6 <SD_SendCmd>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80067d6:	4b1a      	ldr	r3, [pc, #104]	; (8006840 <SD_disk_initialize+0x1d0>)
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e1      	bne.n	80067a4 <SD_disk_initialize+0x134>
 80067e0:	e000      	b.n	80067e4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80067e2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80067e4:	4b16      	ldr	r3, [pc, #88]	; (8006840 <SD_disk_initialize+0x1d0>)
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <SD_disk_initialize+0x18e>
 80067ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067f2:	2050      	movs	r0, #80	; 0x50
 80067f4:	f7ff fee7 	bl	80065c6 <SD_SendCmd>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <SD_disk_initialize+0x192>
 80067fe:	2300      	movs	r3, #0
 8006800:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8006802:	4a10      	ldr	r2, [pc, #64]	; (8006844 <SD_disk_initialize+0x1d4>)
 8006804:	7bbb      	ldrb	r3, [r7, #14]
 8006806:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8006808:	f7ff fd88 	bl	800631c <DESELECT>
	SPI_RxByte();
 800680c:	f7ff fdca 	bl	80063a4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8006810:	7bbb      	ldrb	r3, [r7, #14]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8006816:	4b09      	ldr	r3, [pc, #36]	; (800683c <SD_disk_initialize+0x1cc>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <SD_disk_initialize+0x1cc>)
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e001      	b.n	800682c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8006828:	f7ff fe42 	bl	80064b0 <SD_PowerOff>
	}

	return Stat;
 800682c:	4b03      	ldr	r3, [pc, #12]	; (800683c <SD_disk_initialize+0x1cc>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b2db      	uxtb	r3, r3
}
 8006832:	4618      	mov	r0, r3
 8006834:	3714      	adds	r7, #20
 8006836:	46bd      	mov	sp, r7
 8006838:	bd90      	pop	{r4, r7, pc}
 800683a:	bf00      	nop
 800683c:	20000138 	.word	0x20000138
 8006840:	20002c4c 	.word	0x20002c4c
 8006844:	200028d8 	.word	0x200028d8

08006848 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d001      	beq.n	800685c <SD_disk_status+0x14>
 8006858:	2301      	movs	r3, #1
 800685a:	e002      	b.n	8006862 <SD_disk_status+0x1a>
	return Stat;
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <SD_disk_status+0x28>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	b2db      	uxtb	r3, r3
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000138 	.word	0x20000138

08006874 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	4603      	mov	r3, r0
 8006882:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <SD_disk_read+0x1c>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <SD_disk_read+0x20>
 8006890:	2304      	movs	r3, #4
 8006892:	e051      	b.n	8006938 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006894:	4b2a      	ldr	r3, [pc, #168]	; (8006940 <SD_disk_read+0xcc>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <SD_disk_read+0x32>
 80068a2:	2303      	movs	r3, #3
 80068a4:	e048      	b.n	8006938 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80068a6:	4b27      	ldr	r3, [pc, #156]	; (8006944 <SD_disk_read+0xd0>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <SD_disk_read+0x44>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	025b      	lsls	r3, r3, #9
 80068b6:	607b      	str	r3, [r7, #4]

	SELECT();
 80068b8:	f7ff fd20 	bl	80062fc <SELECT>

	if (count == 1)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d111      	bne.n	80068e6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	2051      	movs	r0, #81	; 0x51
 80068c6:	f7ff fe7e 	bl	80065c6 <SD_SendCmd>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d129      	bne.n	8006924 <SD_disk_read+0xb0>
 80068d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068d4:	68b8      	ldr	r0, [r7, #8]
 80068d6:	f7ff fe03 	bl	80064e0 <SD_RxDataBlock>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d021      	beq.n	8006924 <SD_disk_read+0xb0>
 80068e0:	2300      	movs	r3, #0
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	e01e      	b.n	8006924 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80068e6:	6879      	ldr	r1, [r7, #4]
 80068e8:	2052      	movs	r0, #82	; 0x52
 80068ea:	f7ff fe6c 	bl	80065c6 <SD_SendCmd>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d117      	bne.n	8006924 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80068f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068f8:	68b8      	ldr	r0, [r7, #8]
 80068fa:	f7ff fdf1 	bl	80064e0 <SD_RxDataBlock>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00a      	beq.n	800691a <SD_disk_read+0xa6>
				buff += 512;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800690a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	3b01      	subs	r3, #1
 8006910:	603b      	str	r3, [r7, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ed      	bne.n	80068f4 <SD_disk_read+0x80>
 8006918:	e000      	b.n	800691c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800691a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 800691c:	2100      	movs	r1, #0
 800691e:	204c      	movs	r0, #76	; 0x4c
 8006920:	f7ff fe51 	bl	80065c6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8006924:	f7ff fcfa 	bl	800631c <DESELECT>
	SPI_RxByte();
 8006928:	f7ff fd3c 	bl	80063a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	bf14      	ite	ne
 8006932:	2301      	movne	r3, #1
 8006934:	2300      	moveq	r3, #0
 8006936:	b2db      	uxtb	r3, r3
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	20000138 	.word	0x20000138
 8006944:	200028d8 	.word	0x200028d8

08006948 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	4603      	mov	r3, r0
 8006956:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <SD_disk_write+0x1c>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <SD_disk_write+0x20>
 8006964:	2304      	movs	r3, #4
 8006966:	e06b      	b.n	8006a40 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006968:	4b37      	ldr	r3, [pc, #220]	; (8006a48 <SD_disk_write+0x100>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <SD_disk_write+0x32>
 8006976:	2303      	movs	r3, #3
 8006978:	e062      	b.n	8006a40 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800697a:	4b33      	ldr	r3, [pc, #204]	; (8006a48 <SD_disk_write+0x100>)
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <SD_disk_write+0x44>
 8006988:	2302      	movs	r3, #2
 800698a:	e059      	b.n	8006a40 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800698c:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <SD_disk_write+0x104>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d102      	bne.n	800699e <SD_disk_write+0x56>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	025b      	lsls	r3, r3, #9
 800699c:	607b      	str	r3, [r7, #4]

	SELECT();
 800699e:	f7ff fcad 	bl	80062fc <SELECT>

	if (count == 1)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d110      	bne.n	80069ca <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	2058      	movs	r0, #88	; 0x58
 80069ac:	f7ff fe0b 	bl	80065c6 <SD_SendCmd>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d13a      	bne.n	8006a2c <SD_disk_write+0xe4>
 80069b6:	21fe      	movs	r1, #254	; 0xfe
 80069b8:	68b8      	ldr	r0, [r7, #8]
 80069ba:	f7ff fdc1 	bl	8006540 <SD_TxDataBlock>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d033      	beq.n	8006a2c <SD_disk_write+0xe4>
			count = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	e030      	b.n	8006a2c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80069ca:	4b20      	ldr	r3, [pc, #128]	; (8006a4c <SD_disk_write+0x104>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80069d6:	2100      	movs	r1, #0
 80069d8:	2077      	movs	r0, #119	; 0x77
 80069da:	f7ff fdf4 	bl	80065c6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80069de:	6839      	ldr	r1, [r7, #0]
 80069e0:	2057      	movs	r0, #87	; 0x57
 80069e2:	f7ff fdf0 	bl	80065c6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	2059      	movs	r0, #89	; 0x59
 80069ea:	f7ff fdec 	bl	80065c6 <SD_SendCmd>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d11b      	bne.n	8006a2c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80069f4:	21fc      	movs	r1, #252	; 0xfc
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f7ff fda2 	bl	8006540 <SD_TxDataBlock>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <SD_disk_write+0xd0>
				buff += 512;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006a08:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1ee      	bne.n	80069f4 <SD_disk_write+0xac>
 8006a16:	e000      	b.n	8006a1a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006a18:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8006a1a:	21fd      	movs	r1, #253	; 0xfd
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f7ff fd8f 	bl	8006540 <SD_TxDataBlock>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <SD_disk_write+0xe4>
			{
				count = 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8006a2c:	f7ff fc76 	bl	800631c <DESELECT>
	SPI_RxByte();
 8006a30:	f7ff fcb8 	bl	80063a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	bf14      	ite	ne
 8006a3a:	2301      	movne	r3, #1
 8006a3c:	2300      	moveq	r3, #0
 8006a3e:	b2db      	uxtb	r3, r3
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20000138 	.word	0x20000138
 8006a4c:	200028d8 	.word	0x200028d8

08006a50 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8006a50:	b590      	push	{r4, r7, lr}
 8006a52:	b08b      	sub	sp, #44	; 0x2c
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	603a      	str	r2, [r7, #0]
 8006a5a:	71fb      	strb	r3, [r7, #7]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <SD_disk_ioctl+0x1e>
 8006a6a:	2304      	movs	r3, #4
 8006a6c:	e115      	b.n	8006c9a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8006a74:	79bb      	ldrb	r3, [r7, #6]
 8006a76:	2b05      	cmp	r3, #5
 8006a78:	d124      	bne.n	8006ac4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d012      	beq.n	8006aa8 <SD_disk_ioctl+0x58>
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	dc1a      	bgt.n	8006abc <SD_disk_ioctl+0x6c>
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <SD_disk_ioctl+0x40>
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d006      	beq.n	8006a9c <SD_disk_ioctl+0x4c>
 8006a8e:	e015      	b.n	8006abc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8006a90:	f7ff fd0e 	bl	80064b0 <SD_PowerOff>
			res = RES_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006a9a:	e0fc      	b.n	8006c96 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8006a9c:	f7ff fcc6 	bl	800642c <SD_PowerOn>
			res = RES_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006aa6:	e0f6      	b.n	8006c96 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	1c5c      	adds	r4, r3, #1
 8006aac:	f7ff fd0c 	bl	80064c8 <SD_CheckPower>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006aba:	e0ec      	b.n	8006c96 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ac2:	e0e8      	b.n	8006c96 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006ac4:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <SD_disk_ioctl+0x254>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <SD_disk_ioctl+0x86>
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e0e1      	b.n	8006c9a <SD_disk_ioctl+0x24a>

		SELECT();
 8006ad6:	f7ff fc11 	bl	80062fc <SELECT>

		switch (ctrl)
 8006ada:	79bb      	ldrb	r3, [r7, #6]
 8006adc:	2b0d      	cmp	r3, #13
 8006ade:	f200 80cb 	bhi.w	8006c78 <SD_disk_ioctl+0x228>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <SD_disk_ioctl+0x98>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006be3 	.word	0x08006be3
 8006aec:	08006b21 	.word	0x08006b21
 8006af0:	08006bd3 	.word	0x08006bd3
 8006af4:	08006c79 	.word	0x08006c79
 8006af8:	08006c79 	.word	0x08006c79
 8006afc:	08006c79 	.word	0x08006c79
 8006b00:	08006c79 	.word	0x08006c79
 8006b04:	08006c79 	.word	0x08006c79
 8006b08:	08006c79 	.word	0x08006c79
 8006b0c:	08006c79 	.word	0x08006c79
 8006b10:	08006c79 	.word	0x08006c79
 8006b14:	08006bf5 	.word	0x08006bf5
 8006b18:	08006c19 	.word	0x08006c19
 8006b1c:	08006c3d 	.word	0x08006c3d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8006b20:	2100      	movs	r1, #0
 8006b22:	2049      	movs	r0, #73	; 0x49
 8006b24:	f7ff fd4f 	bl	80065c6 <SD_SendCmd>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 80a8 	bne.w	8006c80 <SD_disk_ioctl+0x230>
 8006b30:	f107 030c 	add.w	r3, r7, #12
 8006b34:	2110      	movs	r1, #16
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff fcd2 	bl	80064e0 <SD_RxDataBlock>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 809e 	beq.w	8006c80 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8006b44:	7b3b      	ldrb	r3, [r7, #12]
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d10e      	bne.n	8006b6c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006b4e:	7d7b      	ldrb	r3, [r7, #21]
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	7d3b      	ldrb	r3, [r7, #20]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	021b      	lsls	r3, r3, #8
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3301      	adds	r3, #1
 8006b60:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8006b62:	8bfb      	ldrh	r3, [r7, #30]
 8006b64:	029a      	lsls	r2, r3, #10
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e02e      	b.n	8006bca <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006b6c:	7c7b      	ldrb	r3, [r7, #17]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	7dbb      	ldrb	r3, [r7, #22]
 8006b76:	09db      	lsrs	r3, r3, #7
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	4413      	add	r3, r2
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	7d7b      	ldrb	r3, [r7, #21]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0306 	and.w	r3, r3, #6
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	3302      	adds	r3, #2
 8006b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8006b94:	7d3b      	ldrb	r3, [r7, #20]
 8006b96:	099b      	lsrs	r3, r3, #6
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	7cfb      	ldrb	r3, [r7, #19]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	4413      	add	r3, r2
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	7cbb      	ldrb	r3, [r7, #18]
 8006baa:	029b      	lsls	r3, r3, #10
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4413      	add	r3, r2
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3301      	adds	r3, #1
 8006bba:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8006bbc:	8bfa      	ldrh	r2, [r7, #30]
 8006bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bc2:	3b09      	subs	r3, #9
 8006bc4:	409a      	lsls	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8006bd0:	e056      	b.n	8006c80 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006be0:	e055      	b.n	8006c8e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8006be2:	f7ff fc09 	bl	80063f8 <SD_ReadyWait>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2bff      	cmp	r3, #255	; 0xff
 8006bea:	d14b      	bne.n	8006c84 <SD_disk_ioctl+0x234>
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006bf2:	e047      	b.n	8006c84 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2049      	movs	r0, #73	; 0x49
 8006bf8:	f7ff fce5 	bl	80065c6 <SD_SendCmd>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d142      	bne.n	8006c88 <SD_disk_ioctl+0x238>
 8006c02:	2110      	movs	r1, #16
 8006c04:	6a38      	ldr	r0, [r7, #32]
 8006c06:	f7ff fc6b 	bl	80064e0 <SD_RxDataBlock>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03b      	beq.n	8006c88 <SD_disk_ioctl+0x238>
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006c16:	e037      	b.n	8006c88 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006c18:	2100      	movs	r1, #0
 8006c1a:	204a      	movs	r0, #74	; 0x4a
 8006c1c:	f7ff fcd3 	bl	80065c6 <SD_SendCmd>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d132      	bne.n	8006c8c <SD_disk_ioctl+0x23c>
 8006c26:	2110      	movs	r1, #16
 8006c28:	6a38      	ldr	r0, [r7, #32]
 8006c2a:	f7ff fc59 	bl	80064e0 <SD_RxDataBlock>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02b      	beq.n	8006c8c <SD_disk_ioctl+0x23c>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8006c3a:	e027      	b.n	8006c8c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	207a      	movs	r0, #122	; 0x7a
 8006c40:	f7ff fcc1 	bl	80065c6 <SD_SendCmd>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d116      	bne.n	8006c78 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c50:	e00b      	b.n	8006c6a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8006c52:	6a3c      	ldr	r4, [r7, #32]
 8006c54:	1c63      	adds	r3, r4, #1
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	f7ff fba4 	bl	80063a4 <SPI_RxByte>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8006c60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c64:	3301      	adds	r3, #1
 8006c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d9ef      	bls.n	8006c52 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c7e:	e006      	b.n	8006c8e <SD_disk_ioctl+0x23e>
			break;
 8006c80:	bf00      	nop
 8006c82:	e004      	b.n	8006c8e <SD_disk_ioctl+0x23e>
			break;
 8006c84:	bf00      	nop
 8006c86:	e002      	b.n	8006c8e <SD_disk_ioctl+0x23e>
			break;
 8006c88:	bf00      	nop
 8006c8a:	e000      	b.n	8006c8e <SD_disk_ioctl+0x23e>
			break;
 8006c8c:	bf00      	nop
		}

		DESELECT();
 8006c8e:	f7ff fb45 	bl	800631c <DESELECT>
		SPI_RxByte();
 8006c92:	f7ff fb87 	bl	80063a4 <SPI_RxByte>
	}

	return res;
 8006c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	372c      	adds	r7, #44	; 0x2c
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd90      	pop	{r4, r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000138 	.word	0x20000138

08006ca8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006cb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a06      	ldr	r2, [pc, #24]	; (8006cd8 <vApplicationGetIdleTaskMemory+0x30>)
 8006cbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2280      	movs	r2, #128	; 0x80
 8006cc4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	200028dc 	.word	0x200028dc
 8006cd8:	2000297c 	.word	0x2000297c

08006cdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08c      	sub	sp, #48	; 0x30
 8006ce0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce2:	f107 031c 	add.w	r3, r7, #28
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	605a      	str	r2, [r3, #4]
 8006cec:	609a      	str	r2, [r3, #8]
 8006cee:	60da      	str	r2, [r3, #12]
 8006cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	4ba2      	ldr	r3, [pc, #648]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	4aa1      	ldr	r2, [pc, #644]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006cfc:	f043 0310 	orr.w	r3, r3, #16
 8006d00:	6313      	str	r3, [r2, #48]	; 0x30
 8006d02:	4b9f      	ldr	r3, [pc, #636]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	4b9b      	ldr	r3, [pc, #620]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	4a9a      	ldr	r2, [pc, #616]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d18:	f043 0304 	orr.w	r3, r3, #4
 8006d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d1e:	4b98      	ldr	r3, [pc, #608]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	4b94      	ldr	r3, [pc, #592]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	4a93      	ldr	r2, [pc, #588]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d38:	6313      	str	r3, [r2, #48]	; 0x30
 8006d3a:	4b91      	ldr	r3, [pc, #580]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d42:	613b      	str	r3, [r7, #16]
 8006d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	60fb      	str	r3, [r7, #12]
 8006d4a:	4b8d      	ldr	r3, [pc, #564]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	4a8c      	ldr	r2, [pc, #560]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	6313      	str	r3, [r2, #48]	; 0x30
 8006d56:	4b8a      	ldr	r3, [pc, #552]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	60bb      	str	r3, [r7, #8]
 8006d66:	4b86      	ldr	r3, [pc, #536]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	4a85      	ldr	r2, [pc, #532]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d6c:	f043 0302 	orr.w	r3, r3, #2
 8006d70:	6313      	str	r3, [r2, #48]	; 0x30
 8006d72:	4b83      	ldr	r3, [pc, #524]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d7e:	2300      	movs	r3, #0
 8006d80:	607b      	str	r3, [r7, #4]
 8006d82:	4b7f      	ldr	r3, [pc, #508]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	4a7e      	ldr	r2, [pc, #504]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d88:	f043 0308 	orr.w	r3, r3, #8
 8006d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d8e:	4b7c      	ldr	r3, [pc, #496]	; (8006f80 <MX_GPIO_Init+0x2a4>)
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	f003 0308 	and.w	r3, r3, #8
 8006d96:	607b      	str	r3, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_RESET);
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8006da0:	4878      	ldr	r0, [pc, #480]	; (8006f84 <MX_GPIO_Init+0x2a8>)
 8006da2:	f003 f9b1 	bl	800a108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_LED_Output_GPIO_Port, Power_LED_Output_Pin, GPIO_PIN_RESET);
 8006da6:	2200      	movs	r2, #0
 8006da8:	2108      	movs	r1, #8
 8006daa:	4877      	ldr	r0, [pc, #476]	; (8006f88 <MX_GPIO_Init+0x2ac>)
 8006dac:	f003 f9ac 	bl	800a108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ServoDC_M1_Dir_Output_Pin|USB_EN_Output_Pin, GPIO_PIN_RESET);
 8006db0:	2200      	movs	r2, #0
 8006db2:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8006db6:	4875      	ldr	r0, [pc, #468]	; (8006f8c <MX_GPIO_Init+0x2b0>)
 8006db8:	f003 f9a6 	bl	800a108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin|Relay_Output_Pin|Spindle_M3_Dir_Output_Pin|Clamp_M2_Dir_Output_Pin
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f244 71de 	movw	r1, #18398	; 0x47de
 8006dc2:	4873      	ldr	r0, [pc, #460]	; (8006f90 <MX_GPIO_Init+0x2b4>)
 8006dc4:	f003 f9a0 	bl	800a108 <HAL_GPIO_WritePin>
                          |LCD_RS_Output_Pin|LCD_EN_Output_Pin|LCD_D4_Output_Pin|LCD_D5_Output_Pin
                          |LCD_D6_Output_Pin|LCD_D7_Output_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Sensor_BottlePosition_Input_Pin|Sensor_RES_Input_Pin;
 8006dc8:	2314      	movs	r3, #20
 8006dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dd4:	f107 031c 	add.w	r3, r7, #28
 8006dd8:	4619      	mov	r1, r3
 8006dda:	486e      	ldr	r0, [pc, #440]	; (8006f94 <MX_GPIO_Init+0x2b8>)
 8006ddc:	f002 ffe0 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Clamp_M2_EncA_Interrupt_Pin|Spindle_M3_EncA_Interrupt_Pin;
 8006de0:	2360      	movs	r3, #96	; 0x60
 8006de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006de4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dee:	f107 031c 	add.w	r3, r7, #28
 8006df2:	4619      	mov	r1, r3
 8006df4:	4867      	ldr	r0, [pc, #412]	; (8006f94 <MX_GPIO_Init+0x2b8>)
 8006df6:	f002 ffd3 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Spindle_M3_EncB_Interrupt_Pin|Clamp_M2_EncB__Interrupt_Pin;
 8006dfa:	f242 0302 	movw	r3, #8194	; 0x2002
 8006dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e0a:	f107 031c 	add.w	r3, r7, #28
 8006e0e:	4619      	mov	r1, r3
 8006e10:	485c      	ldr	r0, [pc, #368]	; (8006f84 <MX_GPIO_Init+0x2a8>)
 8006e12:	f002 ffc5 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin;
 8006e16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e24:	2300      	movs	r3, #0
 8006e26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e28:	f107 031c 	add.w	r3, r7, #28
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4855      	ldr	r0, [pc, #340]	; (8006f84 <MX_GPIO_Init+0x2a8>)
 8006e30:	f002 ffb6 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Clamp_M2_Prox_Interrupt_Pin;
 8006e34:	2301      	movs	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006e38:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Clamp_M2_Prox_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8006e42:	f107 031c 	add.w	r3, r7, #28
 8006e46:	4619      	mov	r1, r3
 8006e48:	484e      	ldr	r0, [pc, #312]	; (8006f84 <MX_GPIO_Init+0x2a8>)
 8006e4a:	f002 ffa9 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button_Clean_Interrupt_PullUp_Pin|Button_Power_Interrupt_PullUp_Pin;
 8006e4e:	2314      	movs	r3, #20
 8006e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e5c:	f107 031c 	add.w	r3, r7, #28
 8006e60:	4619      	mov	r1, r3
 8006e62:	4849      	ldr	r0, [pc, #292]	; (8006f88 <MX_GPIO_Init+0x2ac>)
 8006e64:	f002 ff9c 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power_LED_Output_Pin;
 8006e68:	2308      	movs	r3, #8
 8006e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e74:	2300      	movs	r3, #0
 8006e76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Power_LED_Output_GPIO_Port, &GPIO_InitStruct);
 8006e78:	f107 031c 	add.w	r3, r7, #28
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4842      	ldr	r0, [pc, #264]	; (8006f88 <MX_GPIO_Init+0x2ac>)
 8006e80:	f002 ff8e 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Button_ManAuto_Input_PullUp_Pin|Button_PlayStop_Input_PullUp_Pin|Button_DelBack_Input_PullUp_Pin;
 8006e84:	23e0      	movs	r3, #224	; 0xe0
 8006e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e90:	f107 031c 	add.w	r3, r7, #28
 8006e94:	4619      	mov	r1, r3
 8006e96:	483c      	ldr	r0, [pc, #240]	; (8006f88 <MX_GPIO_Init+0x2ac>)
 8006e98:	f002 ff82 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_1_Input_PullUp_Pin;
 8006e9c:	2320      	movs	r3, #32
 8006e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_1_Input_PullUp_GPIO_Port, &GPIO_InitStruct);
 8006ea8:	f107 031c 	add.w	r3, r7, #28
 8006eac:	4619      	mov	r1, r3
 8006eae:	4835      	ldr	r0, [pc, #212]	; (8006f84 <MX_GPIO_Init+0x2a8>)
 8006eb0:	f002 ff76 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Button_2_Input_PullUp_Pin|Button_3_Input_PullUp_Pin|Button_4_Input_PullUp_Pin;
 8006eb4:	2307      	movs	r3, #7
 8006eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ec0:	f107 031c 	add.w	r3, r7, #28
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4831      	ldr	r0, [pc, #196]	; (8006f8c <MX_GPIO_Init+0x2b0>)
 8006ec8:	f002 ff6a 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button_5_Input_PullUp_Pin|Button_6_Input_PullUp_Pin|Button_7_Input_PullUp_Pin|Button_8_Input_PullUp_Pin
 8006ecc:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8006ed0:	61fb      	str	r3, [r7, #28]
                          |Button_9_Input_PullUp_Pin|Button_0_Input_PullUp_Pin|Button_Enter_Input_PullUp_Pin|Button_Comma_Input_PullUp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006eda:	f107 031c 	add.w	r3, r7, #28
 8006ede:	4619      	mov	r1, r3
 8006ee0:	482c      	ldr	r0, [pc, #176]	; (8006f94 <MX_GPIO_Init+0x2b8>)
 8006ee2:	f002 ff5d 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USBFlag_Interrupt_PullUp_Pin;
 8006ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006eec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USBFlag_Interrupt_PullUp_GPIO_Port, &GPIO_InitStruct);
 8006ef6:	f107 031c 	add.w	r3, r7, #28
 8006efa:	4619      	mov	r1, r3
 8006efc:	4823      	ldr	r0, [pc, #140]	; (8006f8c <MX_GPIO_Init+0x2b0>)
 8006efe:	f002 ff4f 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ServoDC_M1_Dir_Output_Pin|USB_EN_Output_Pin;
 8006f02:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8006f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f10:	2300      	movs	r3, #0
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f14:	f107 031c 	add.w	r3, r7, #28
 8006f18:	4619      	mov	r1, r3
 8006f1a:	481c      	ldr	r0, [pc, #112]	; (8006f8c <MX_GPIO_Init+0x2b0>)
 8006f1c:	f002 ff40 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = nRESET_LPC_Output_Pin|Relay_Output_Pin|Spindle_M3_Dir_Output_Pin|Clamp_M2_Dir_Output_Pin
 8006f20:	f244 73de 	movw	r3, #18398	; 0x47de
 8006f24:	61fb      	str	r3, [r7, #28]
                          |LCD_RS_Output_Pin|LCD_EN_Output_Pin|LCD_D4_Output_Pin|LCD_D5_Output_Pin
                          |LCD_D6_Output_Pin|LCD_D7_Output_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f26:	2301      	movs	r3, #1
 8006f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f32:	f107 031c 	add.w	r3, r7, #28
 8006f36:	4619      	mov	r1, r3
 8006f38:	4815      	ldr	r0, [pc, #84]	; (8006f90 <MX_GPIO_Init+0x2b4>)
 8006f3a:	f002 ff31 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ServoDC_M1_EncB_Interrupt_Pin;
 8006f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006f44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ServoDC_M1_EncB_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8006f4e:	f107 031c 	add.w	r3, r7, #28
 8006f52:	4619      	mov	r1, r3
 8006f54:	480e      	ldr	r0, [pc, #56]	; (8006f90 <MX_GPIO_Init+0x2b4>)
 8006f56:	f002 ff23 	bl	8009da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ServoDC_M1_Prox_Interrupt_Pin|Spindle_M3_Prox_Interrupt_Pin;
 8006f5a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006f60:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f6a:	f107 031c 	add.w	r3, r7, #28
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4805      	ldr	r0, [pc, #20]	; (8006f88 <MX_GPIO_Init+0x2ac>)
 8006f72:	f002 ff15 	bl	8009da0 <HAL_GPIO_Init>

}
 8006f76:	bf00      	nop
 8006f78:	3730      	adds	r7, #48	; 0x30
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40023800 	.word	0x40023800
 8006f84:	40020800 	.word	0x40020800
 8006f88:	40020000 	.word	0x40020000
 8006f8c:	40020400 	.word	0x40020400
 8006f90:	40020c00 	.word	0x40020c00
 8006f94:	40021000 	.word	0x40021000

08006f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f9e:	f001 fc31 	bl	8008804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006fa2:	f000 f903 	bl	80071ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006fa6:	f7ff fe99 	bl	8006cdc <MX_GPIO_Init>
  MX_DMA_Init();
 8006faa:	f7ff f969 	bl	8006280 <MX_DMA_Init>
  MX_ADC1_Init();
 8006fae:	f7fe ffb1 	bl	8005f14 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006fb2:	f7ff f801 	bl	8005fb8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8006fb6:	f7ff f851 	bl	800605c <MX_ADC3_Init>
  MX_SPI1_Init();
 8006fba:	f000 fa6b 	bl	8007494 <MX_SPI1_Init>
  MX_TIM3_Init();
 8006fbe:	f000 fdad 	bl	8007b1c <MX_TIM3_Init>
  MX_TIM4_Init();
 8006fc2:	f000 fe21 	bl	8007c08 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006fc6:	f000 ff0d 	bl	8007de4 <MX_TIM8_Init>
  MX_TIM11_Init();
 8006fca:	f000 ffdb 	bl	8007f84 <MX_TIM11_Init>
  MX_UART4_Init();
 8006fce:	f001 f9a9 	bl	8008324 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8006fd2:	f001 f9d1 	bl	8008378 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8006fd6:	f001 f9f9 	bl	80083cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8006fda:	f001 fb7b 	bl	80086d4 <MX_USB_OTG_FS_HCD_Init>
  MX_TIM2_Init();
 8006fde:	f000 fd4f 	bl	8007a80 <MX_TIM2_Init>
  MX_TIM7_Init();
 8006fe2:	f000 fec9 	bl	8007d78 <MX_TIM7_Init>
  MX_TIM10_Init();
 8006fe6:	f000 ffa9 	bl	8007f3c <MX_TIM10_Init>
  MX_FATFS_Init();
 8006fea:	f006 ffc5 	bl	800df78 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006fee:	f000 fe8d 	bl	8007d0c <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006ff2:	f000 f945 	bl	8007280 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8006ff6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006ffa:	f001 fc31 	bl	8008860 <HAL_Delay>
	// Start Timer 7 in interrupt mode
  HAL_TIM_Base_Start_IT(&htim7);
 8006ffe:	4851      	ldr	r0, [pc, #324]	; (8007144 <main+0x1ac>)
 8007000:	f004 faa6 	bl	800b550 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8007004:	4850      	ldr	r0, [pc, #320]	; (8007148 <main+0x1b0>)
 8007006:	f004 faa3 	bl	800b550 <HAL_TIM_Base_Start_IT>
  /** ENABLING LPC  AND THE LOAD CELLS WILL GET ACTIVATED **/
  HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_SET);
 800700a:	2201      	movs	r2, #1
 800700c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8007010:	484e      	ldr	r0, [pc, #312]	; (800714c <main+0x1b4>)
 8007012:	f003 f879 	bl	800a108 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin, GPIO_PIN_SET);
  /********************************************************/
  HAL_Delay(1000);
 8007016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800701a:	f001 fc21 	bl	8008860 <HAL_Delay>
  moveMotor(VALVEMOTOR, OFF, INT_INF);
 800701e:	4a4c      	ldr	r2, [pc, #304]	; (8007150 <main+0x1b8>)
 8007020:	2100      	movs	r1, #0
 8007022:	2003      	movs	r0, #3
 8007024:	f7fc f956 	bl	80032d4 <moveMotor>
  Servo_Init();
 8007028:	f7fe faf0 	bl	800560c <Servo_Init>
  digitalWrite(Spindle_M3_Dir_Output, LOW);
 800702c:	2100      	movs	r1, #0
 800702e:	2004      	movs	r0, #4
 8007030:	f7fb ffba 	bl	8002fa8 <digitalWrite>
  digitalWrite(Clamp_M2_Dir_Output, LOW);
 8007034:	2100      	movs	r1, #0
 8007036:	2005      	movs	r0, #5
 8007038:	f7fb ffb6 	bl	8002fa8 <digitalWrite>
  pwm(Spindle_M3_PWM, 0);
 800703c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8007154 <main+0x1bc>
 8007040:	2002      	movs	r0, #2
 8007042:	f000 f98f 	bl	8007364 <pwm>
  pwm(Clamp_M2_PWM, 0);
 8007046:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8007154 <main+0x1bc>
 800704a:	2001      	movs	r0, #1
 800704c:	f000 f98a 	bl	8007364 <pwm>
  sd_Card_Check();
 8007050:	f7fe f864 	bl	800511c <sd_Card_Check>

  if (isMachineOn == FALSE) {
 8007054:	4b40      	ldr	r3, [pc, #256]	; (8007158 <main+0x1c0>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <main+0xc8>
		goToSleep(); // Ensure goToSleep is adapted for STM32
 800705c:	f7fd f80e 	bl	800407c <goToSleep>
	}

  //HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin, GPIO_PIN_SET);
 8007060:	2201      	movs	r2, #1
 8007062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007066:	483d      	ldr	r0, [pc, #244]	; (800715c <main+0x1c4>)
 8007068:	f003 f84e 	bl	800a108 <HAL_GPIO_WritePin>
  //HAL_Delay(1000);
  HAL_TIM_Base_Start_IT(&htim6);
 800706c:	483c      	ldr	r0, [pc, #240]	; (8007160 <main+0x1c8>)
 800706e:	f004 fa6f 	bl	800b550 <HAL_TIM_Base_Start_IT>
	  LCD_Init();
	  LCDRGBControl(WHITE);
	  controlLCDContrast(100);
  */
  /* THIS iS DEVELOPER AND TESTING PURPOSE ONLE */
  printLCD(0, "SOFTWARE VER ", NO_SYMBOL);
 8007072:	2200      	movs	r2, #0
 8007074:	493b      	ldr	r1, [pc, #236]	; (8007164 <main+0x1cc>)
 8007076:	2000      	movs	r0, #0
 8007078:	f7fd fea8 	bl	8004dcc <printLCD>
  snprintf(VERSION_NO, sizeof(VERSION_NO), "%d.%d.%d ", MAJOR_VERSION,MINOR_VERSION,PATCH_VERSION);
 800707c:	2300      	movs	r3, #0
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	2300      	movs	r3, #0
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	2306      	movs	r3, #6
 8007086:	4a38      	ldr	r2, [pc, #224]	; (8007168 <main+0x1d0>)
 8007088:	210a      	movs	r1, #10
 800708a:	4838      	ldr	r0, [pc, #224]	; (800716c <main+0x1d4>)
 800708c:	f00f fa06 	bl	801649c <sniprintf>
  printLCD(1, VERSION_NO, NO_SYMBOL);
 8007090:	2200      	movs	r2, #0
 8007092:	4936      	ldr	r1, [pc, #216]	; (800716c <main+0x1d4>)
 8007094:	2001      	movs	r0, #1
 8007096:	f7fd fe99 	bl	8004dcc <printLCD>
  /************************************************/

  CTS_Home_position();
 800709a:	f7fc fee5 	bl	8003e68 <CTS_Home_position>
  HAL_Delay(100);
 800709e:	2064      	movs	r0, #100	; 0x64
 80070a0:	f001 fbde 	bl	8008860 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, rxBuffer, 8);
 80070a4:	2208      	movs	r2, #8
 80070a6:	4932      	ldr	r1, [pc, #200]	; (8007170 <main+0x1d8>)
 80070a8:	4832      	ldr	r0, [pc, #200]	; (8007174 <main+0x1dc>)
 80070aa:	f005 fbcf 	bl	800c84c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, rxBuffer1, 11);
 80070ae:	220b      	movs	r2, #11
 80070b0:	4931      	ldr	r1, [pc, #196]	; (8007178 <main+0x1e0>)
 80070b2:	4832      	ldr	r0, [pc, #200]	; (800717c <main+0x1e4>)
 80070b4:	f005 fbca 	bl	800c84c <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim10);
 80070b8:	4831      	ldr	r0, [pc, #196]	; (8007180 <main+0x1e8>)
 80070ba:	f004 fa49 	bl	800b550 <HAL_TIM_Base_Start_IT>
  LoadTimeFromSDCard(0,0,0);
 80070be:	2200      	movs	r2, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	2000      	movs	r0, #0
 80070c4:	f7fe f8de 	bl	8005284 <LoadTimeFromSDCard>
  UpdateTimeToSDCard(hours,  minutes,  seconds);
 80070c8:	4b2e      	ldr	r3, [pc, #184]	; (8007184 <main+0x1ec>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a2e      	ldr	r2, [pc, #184]	; (8007188 <main+0x1f0>)
 80070ce:	6811      	ldr	r1, [r2, #0]
 80070d0:	4a2e      	ldr	r2, [pc, #184]	; (800718c <main+0x1f4>)
 80070d2:	6812      	ldr	r2, [r2, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe f955 	bl	8005384 <UpdateTimeToSDCard>




  LCDMutex = xSemaphoreCreateMutex();
 80070da:	2001      	movs	r0, #1
 80070dc:	f00b fa77 	bl	80125ce <xQueueCreateMutex>
 80070e0:	4603      	mov	r3, r0
 80070e2:	4a2b      	ldr	r2, [pc, #172]	; (8007190 <main+0x1f8>)
 80070e4:	6013      	str	r3, [r2, #0]
  SDCardMutex = xSemaphoreCreateMutex();
 80070e6:	2001      	movs	r0, #1
 80070e8:	f00b fa71 	bl	80125ce <xQueueCreateMutex>
 80070ec:	4603      	mov	r3, r0
 80070ee:	4a29      	ldr	r2, [pc, #164]	; (8007194 <main+0x1fc>)
 80070f0:	6013      	str	r3, [r2, #0]
  ButtonMutex = xSemaphoreCreateMutex();
 80070f2:	2001      	movs	r0, #1
 80070f4:	f00b fa6b 	bl	80125ce <xQueueCreateMutex>
 80070f8:	4603      	mov	r3, r0
 80070fa:	4a27      	ldr	r2, [pc, #156]	; (8007198 <main+0x200>)
 80070fc:	6013      	str	r3, [r2, #0]

//  	 xTaskCreate(vTaskLCDHandler, "LCD_Handler", 256, NULL, 2, NULL);
//     xTaskCreate(vTaskButtonHandler, "Button_Handler", 256, NULL, 3, NULL);
//     xTaskCreate(vTaskSDCardLogger, "SDCard_Logger", 256, NULL, 2, NULL);
//     xTaskCreate(vTaskMotorControl, "Motor_Control", 256, NULL, 4, NULL);
     xTaskCreate(CustomerFrontEnd, "Customer_App", 256, NULL, 2, &xCustomerAppTaskEndHandle);
 80070fe:	4b27      	ldr	r3, [pc, #156]	; (800719c <main+0x204>)
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2302      	movs	r3, #2
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800710c:	4924      	ldr	r1, [pc, #144]	; (80071a0 <main+0x208>)
 800710e:	4825      	ldr	r0, [pc, #148]	; (80071a4 <main+0x20c>)
 8007110:	f00b ff61 	bl	8012fd6 <xTaskCreate>


vTaskStartScheduler();
 8007114:	f00c f8e0 	bl	80132d8 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 {
	  if (ProgramToRun == CUSTOMERAPP) {
 8007118:	4b23      	ldr	r3, [pc, #140]	; (80071a8 <main+0x210>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d107      	bne.n	8007130 <main+0x198>
		  xTaskNotifyGive(xCustomerAppTaskEndHandle);
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <main+0x204>)
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	2202      	movs	r2, #2
 8007128:	2100      	movs	r1, #0
 800712a:	f00c feff 	bl	8013f2c <xTaskGenericNotify>
 800712e:	e7f3      	b.n	8007118 <main+0x180>
		}
	  else if (ProgramToRun == TESTAPP) {
 8007130:	4b1d      	ldr	r3, [pc, #116]	; (80071a8 <main+0x210>)
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d102      	bne.n	800713e <main+0x1a6>
			MotorTest();
 8007138:	f7fe fb80 	bl	800583c <MotorTest>
 800713c:	e7ec      	b.n	8007118 <main+0x180>
	  }
	  else {
			DemoApp();
 800713e:	f7fb fd0b 	bl	8002b58 <DemoApp>
	  if (ProgramToRun == CUSTOMERAPP) {
 8007142:	e7e9      	b.n	8007118 <main+0x180>
 8007144:	20002d74 	.word	0x20002d74
 8007148:	20002c54 	.word	0x20002c54
 800714c:	40020800 	.word	0x40020800
 8007150:	0098967f 	.word	0x0098967f
 8007154:	00000000 	.word	0x00000000
 8007158:	20000360 	.word	0x20000360
 800715c:	40020c00 	.word	0x40020c00
 8007160:	20002d2c 	.word	0x20002d2c
 8007164:	0801a460 	.word	0x0801a460
 8007168:	0801a470 	.word	0x0801a470
 800716c:	20002b90 	.word	0x20002b90
 8007170:	20002b7c 	.word	0x20002b7c
 8007174:	20002f24 	.word	0x20002f24
 8007178:	20002b84 	.word	0x20002b84
 800717c:	20002edc 	.word	0x20002edc
 8007180:	20002e04 	.word	0x20002e04
 8007184:	200003ac 	.word	0x200003ac
 8007188:	200003a8 	.word	0x200003a8
 800718c:	200003a4 	.word	0x200003a4
 8007190:	20002b9c 	.word	0x20002b9c
 8007194:	20002ba0 	.word	0x20002ba0
 8007198:	20002ba4 	.word	0x20002ba4
 800719c:	20002ba8 	.word	0x20002ba8
 80071a0:	0801a47c 	.word	0x0801a47c
 80071a4:	08001249 	.word	0x08001249
 80071a8:	200000f0 	.word	0x200000f0

080071ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b094      	sub	sp, #80	; 0x50
 80071b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071b2:	f107 0320 	add.w	r3, r7, #32
 80071b6:	2230      	movs	r2, #48	; 0x30
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f00f fa33 	bl	8016626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071c0:	f107 030c 	add.w	r3, r7, #12
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	605a      	str	r2, [r3, #4]
 80071ca:	609a      	str	r2, [r3, #8]
 80071cc:	60da      	str	r2, [r3, #12]
 80071ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80071d0:	2300      	movs	r3, #0
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	4b28      	ldr	r3, [pc, #160]	; (8007278 <SystemClock_Config+0xcc>)
 80071d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d8:	4a27      	ldr	r2, [pc, #156]	; (8007278 <SystemClock_Config+0xcc>)
 80071da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071de:	6413      	str	r3, [r2, #64]	; 0x40
 80071e0:	4b25      	ldr	r3, [pc, #148]	; (8007278 <SystemClock_Config+0xcc>)
 80071e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80071ec:	2300      	movs	r3, #0
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	4b22      	ldr	r3, [pc, #136]	; (800727c <SystemClock_Config+0xd0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a21      	ldr	r2, [pc, #132]	; (800727c <SystemClock_Config+0xd0>)
 80071f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	4b1f      	ldr	r3, [pc, #124]	; (800727c <SystemClock_Config+0xd0>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007208:	2301      	movs	r3, #1
 800720a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800720c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007212:	2302      	movs	r3, #2
 8007214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800721c:	2308      	movs	r3, #8
 800721e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007220:	23a8      	movs	r3, #168	; 0xa8
 8007222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007224:	2302      	movs	r3, #2
 8007226:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007228:	2307      	movs	r3, #7
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800722c:	f107 0320 	add.w	r3, r7, #32
 8007230:	4618      	mov	r0, r3
 8007232:	f003 f81d 	bl	800a270 <HAL_RCC_OscConfig>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800723c:	f000 f88c 	bl	8007358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007240:	230f      	movs	r3, #15
 8007242:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007244:	2302      	movs	r3, #2
 8007246:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800724c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007250:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007256:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007258:	f107 030c 	add.w	r3, r7, #12
 800725c:	2105      	movs	r1, #5
 800725e:	4618      	mov	r0, r3
 8007260:	f003 fa7e 	bl	800a760 <HAL_RCC_ClockConfig>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800726a:	f000 f875 	bl	8007358 <Error_Handler>
  }
}
 800726e:	bf00      	nop
 8007270:	3750      	adds	r7, #80	; 0x50
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	40023800 	.word	0x40023800
 800727c:	40007000 	.word	0x40007000

08007280 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8007284:	2200      	movs	r2, #0
 8007286:	2105      	movs	r1, #5
 8007288:	2037      	movs	r0, #55	; 0x37
 800728a:	f001 ffc5 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800728e:	2037      	movs	r0, #55	; 0x37
 8007290:	f001 ffde 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8007294:	2200      	movs	r2, #0
 8007296:	2105      	movs	r1, #5
 8007298:	2028      	movs	r0, #40	; 0x28
 800729a:	f001 ffbd 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800729e:	2028      	movs	r0, #40	; 0x28
 80072a0:	f001 ffd6 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80072a4:	2200      	movs	r2, #0
 80072a6:	2105      	movs	r1, #5
 80072a8:	201c      	movs	r0, #28
 80072aa:	f001 ffb5 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80072ae:	201c      	movs	r0, #28
 80072b0:	f001 ffce 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80072b4:	2200      	movs	r2, #0
 80072b6:	2105      	movs	r1, #5
 80072b8:	2017      	movs	r0, #23
 80072ba:	f001 ffad 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80072be:	2017      	movs	r0, #23
 80072c0:	f001 ffc6 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80072c4:	2200      	movs	r2, #0
 80072c6:	2105      	movs	r1, #5
 80072c8:	200a      	movs	r0, #10
 80072ca:	f001 ffa5 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80072ce:	200a      	movs	r0, #10
 80072d0:	f001 ffbe 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80072d4:	2200      	movs	r2, #0
 80072d6:	2105      	movs	r1, #5
 80072d8:	2008      	movs	r0, #8
 80072da:	f001 ff9d 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80072de:	2008      	movs	r0, #8
 80072e0:	f001 ffb6 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80072e4:	2200      	movs	r2, #0
 80072e6:	2105      	movs	r1, #5
 80072e8:	2007      	movs	r0, #7
 80072ea:	f001 ff95 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80072ee:	2007      	movs	r0, #7
 80072f0:	f001 ffae 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80072f4:	2200      	movs	r2, #0
 80072f6:	2105      	movs	r1, #5
 80072f8:	2006      	movs	r0, #6
 80072fa:	f001 ff8d 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80072fe:	2006      	movs	r0, #6
 8007300:	f001 ffa6 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 8007304:	2200      	movs	r2, #0
 8007306:	2105      	movs	r1, #5
 8007308:	2001      	movs	r0, #1
 800730a:	f001 ff85 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800730e:	2001      	movs	r0, #1
 8007310:	f001 ff9e 	bl	8009250 <HAL_NVIC_EnableIRQ>
}
 8007314:	bf00      	nop
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
   if (huart->Instance == USART3)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a09      	ldr	r2, [pc, #36]	; (800734c <HAL_UART_RxCpltCallback+0x34>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d10b      	bne.n	8007342 <HAL_UART_RxCpltCallback+0x2a>
   {
	   memcpy(dst,rxBuffer,sizeof(rxBuffer));
 800732a:	4a09      	ldr	r2, [pc, #36]	; (8007350 <HAL_UART_RxCpltCallback+0x38>)
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <HAL_UART_RxCpltCallback+0x3c>)
 800732e:	cb03      	ldmia	r3!, {r0, r1}
 8007330:	6010      	str	r0, [r2, #0]
 8007332:	6051      	str	r1, [r2, #4]
	   ReadLoadCellAVG();
 8007334:	f7fd fe72 	bl	800501c <ReadLoadCellAVG>
       HAL_UART_Receive_DMA(huart, rxBuffer, 8);
 8007338:	2208      	movs	r2, #8
 800733a:	4906      	ldr	r1, [pc, #24]	; (8007354 <HAL_UART_RxCpltCallback+0x3c>)
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f005 fa85 	bl	800c84c <HAL_UART_Receive_DMA>
   }

}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	40004800 	.word	0x40004800
 8007350:	200004dc 	.word	0x200004dc
 8007354:	20002b7c 	.word	0x20002b7c

08007358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800735c:	b672      	cpsid	i
}
 800735e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007360:	e7fe      	b.n	8007360 <Error_Handler+0x8>
	...

08007364 <pwm>:
int PWM_FAST=98;
int PWM_SLOW=90;
int PWM_CLEANING = 50;

void pwm(PWM_Label label, float percentage)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	ed87 0a00 	vstr	s0, [r7]
 8007370:	71fb      	strb	r3, [r7, #7]
    if (percentage < 0.0f) percentage = 0.0f;
 8007372:	edd7 7a00 	vldr	s15, [r7]
 8007376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737e:	d502      	bpl.n	8007386 <pwm+0x22>
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	603b      	str	r3, [r7, #0]
    if (percentage > 100.0f) percentage = 100.0f;
 8007386:	edd7 7a00 	vldr	s15, [r7]
 800738a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800747c <pwm+0x118>
 800738e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007396:	dd01      	ble.n	800739c <pwm+0x38>
 8007398:	4b39      	ldr	r3, [pc, #228]	; (8007480 <pwm+0x11c>)
 800739a:	603b      	str	r3, [r7, #0]

    uint32_t pulse = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
    TIM_HandleTypeDef* htim = NULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
    uint32_t channel = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]

    switch (label)
 80073a8:	79fb      	ldrb	r3, [r7, #7]
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d861      	bhi.n	8007472 <pwm+0x10e>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <pwm+0x50>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073cd 	.word	0x080073cd
 80073b8:	080073d7 	.word	0x080073d7
 80073bc:	080073e1 	.word	0x080073e1
 80073c0:	080073eb 	.word	0x080073eb
 80073c4:	080073f5 	.word	0x080073f5
 80073c8:	080073ff 	.word	0x080073ff
    {
        case ServoDC_M1_PWM:
            htim = &htim3;
 80073cc:	4b2d      	ldr	r3, [pc, #180]	; (8007484 <pwm+0x120>)
 80073ce:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_3;
 80073d0:	2308      	movs	r3, #8
 80073d2:	613b      	str	r3, [r7, #16]
            break;
 80073d4:	e018      	b.n	8007408 <pwm+0xa4>

        case Clamp_M2_PWM:
            htim = &htim4;
 80073d6:	4b2c      	ldr	r3, [pc, #176]	; (8007488 <pwm+0x124>)
 80073d8:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
            break;
 80073de:	e013      	b.n	8007408 <pwm+0xa4>

        case Spindle_M3_PWM:
            htim = &htim4;
 80073e0:	4b29      	ldr	r3, [pc, #164]	; (8007488 <pwm+0x124>)
 80073e2:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_2;
 80073e4:	2304      	movs	r3, #4
 80073e6:	613b      	str	r3, [r7, #16]
            break;
 80073e8:	e00e      	b.n	8007408 <pwm+0xa4>

        case LCD_Contrast_PWM:
            htim = &htim8;
 80073ea:	4b28      	ldr	r3, [pc, #160]	; (800748c <pwm+0x128>)
 80073ec:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 80073ee:	2300      	movs	r3, #0
 80073f0:	613b      	str	r3, [r7, #16]
            break;
 80073f2:	e009      	b.n	8007408 <pwm+0xa4>

        case LCD_LED_PWM:
            htim = &htim8;
 80073f4:	4b25      	ldr	r3, [pc, #148]	; (800748c <pwm+0x128>)
 80073f6:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_2;
 80073f8:	2304      	movs	r3, #4
 80073fa:	613b      	str	r3, [r7, #16]
            break;
 80073fc:	e004      	b.n	8007408 <pwm+0xa4>
#ifdef Servo
        case Servo_PWM_OR_DC_M1_EncA_Interrupt:
            htim = &htim11;
 80073fe:	4b24      	ldr	r3, [pc, #144]	; (8007490 <pwm+0x12c>)
 8007400:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
            break;
 8007406:	bf00      	nop
        default:
            return; // Invalid label
    }

    // Calculate the pulse value based on percentage
    pulse = (uint32_t)((percentage / 100.0f) * (htim->Init.Period + 1));
 8007408:	edd7 7a00 	vldr	s15, [r7]
 800740c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800747c <pwm+0x118>
 8007410:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	3301      	adds	r3, #1
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800742a:	ee17 3a90 	vmov	r3, s15
 800742e:	60fb      	str	r3, [r7, #12]

    // Set the pulse value for the corresponding channel
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d104      	bne.n	8007440 <pwm+0xdc>
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	635a      	str	r2, [r3, #52]	; 0x34
 800743e:	e013      	b.n	8007468 <pwm+0x104>
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	2b04      	cmp	r3, #4
 8007444:	d104      	bne.n	8007450 <pwm+0xec>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6393      	str	r3, [r2, #56]	; 0x38
 800744e:	e00b      	b.n	8007468 <pwm+0x104>
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	2b08      	cmp	r3, #8
 8007454:	d104      	bne.n	8007460 <pwm+0xfc>
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800745e:	e003      	b.n	8007468 <pwm+0x104>
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6413      	str	r3, [r2, #64]	; 0x40

    // Start PWM signal generation if not already running
    HAL_TIM_PWM_Start(htim, channel);
 8007468:	6939      	ldr	r1, [r7, #16]
 800746a:	6978      	ldr	r0, [r7, #20]
 800746c:	f004 f93a 	bl	800b6e4 <HAL_TIM_PWM_Start>
 8007470:	e000      	b.n	8007474 <pwm+0x110>
            return; // Invalid label
 8007472:	bf00      	nop
}
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	42c80000 	.word	0x42c80000
 8007480:	42c80000 	.word	0x42c80000
 8007484:	20002c9c 	.word	0x20002c9c
 8007488:	20002ce4 	.word	0x20002ce4
 800748c:	20002dbc 	.word	0x20002dbc
 8007490:	20002e4c 	.word	0x20002e4c

08007494 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007498:	4b17      	ldr	r3, [pc, #92]	; (80074f8 <MX_SPI1_Init+0x64>)
 800749a:	4a18      	ldr	r2, [pc, #96]	; (80074fc <MX_SPI1_Init+0x68>)
 800749c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800749e:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80074a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80074a6:	4b14      	ldr	r3, [pc, #80]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80074ac:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80074b2:	4b11      	ldr	r3, [pc, #68]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80074be:	4b0e      	ldr	r3, [pc, #56]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80074c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074c8:	2220      	movs	r2, #32
 80074ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80074d2:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074d8:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074da:	2200      	movs	r2, #0
 80074dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80074de:	4b06      	ldr	r3, [pc, #24]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074e0:	220a      	movs	r2, #10
 80074e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80074e4:	4804      	ldr	r0, [pc, #16]	; (80074f8 <MX_SPI1_Init+0x64>)
 80074e6:	f003 fb8b 	bl	800ac00 <HAL_SPI_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80074f0:	f7ff ff32 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80074f4:	bf00      	nop
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	20002bac 	.word	0x20002bac
 80074fc:	40013000 	.word	0x40013000

08007500 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	; 0x28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007508:	f107 0314 	add.w	r3, r7, #20
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	605a      	str	r2, [r3, #4]
 8007512:	609a      	str	r2, [r3, #8]
 8007514:	60da      	str	r2, [r3, #12]
 8007516:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a28      	ldr	r2, [pc, #160]	; (80075c0 <HAL_SPI_MspInit+0xc0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d14a      	bne.n	80075b8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800752a:	4a26      	ldr	r2, [pc, #152]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 800752c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007530:	6453      	str	r3, [r2, #68]	; 0x44
 8007532:	4b24      	ldr	r3, [pc, #144]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800753a:	613b      	str	r3, [r7, #16]
 800753c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	6313      	str	r3, [r2, #48]	; 0x30
 800754e:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800755a:	2300      	movs	r3, #0
 800755c:	60bb      	str	r3, [r7, #8]
 800755e:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	4a18      	ldr	r2, [pc, #96]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 8007564:	f043 0302 	orr.w	r3, r3, #2
 8007568:	6313      	str	r3, [r2, #48]	; 0x30
 800756a:	4b16      	ldr	r3, [pc, #88]	; (80075c4 <HAL_SPI_MspInit+0xc4>)
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	60bb      	str	r3, [r7, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_nSS_Pin;
 8007576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800757a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800757c:	2302      	movs	r3, #2
 800757e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007584:	2303      	movs	r3, #3
 8007586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007588:	2305      	movs	r3, #5
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_nSS_GPIO_Port, &GPIO_InitStruct);
 800758c:	f107 0314 	add.w	r3, r7, #20
 8007590:	4619      	mov	r1, r3
 8007592:	480d      	ldr	r0, [pc, #52]	; (80075c8 <HAL_SPI_MspInit+0xc8>)
 8007594:	f002 fc04 	bl	8009da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8007598:	2338      	movs	r3, #56	; 0x38
 800759a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800759c:	2302      	movs	r3, #2
 800759e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075a4:	2303      	movs	r3, #3
 80075a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80075a8:	2305      	movs	r3, #5
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ac:	f107 0314 	add.w	r3, r7, #20
 80075b0:	4619      	mov	r1, r3
 80075b2:	4806      	ldr	r0, [pc, #24]	; (80075cc <HAL_SPI_MspInit+0xcc>)
 80075b4:	f002 fbf4 	bl	8009da0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80075b8:	bf00      	nop
 80075ba:	3728      	adds	r7, #40	; 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40013000 	.word	0x40013000
 80075c4:	40023800 	.word	0x40023800
 80075c8:	40020000 	.word	0x40020000
 80075cc:	40020400 	.word	0x40020400

080075d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <HAL_MspInit+0x74>)
 80075dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075de:	4a19      	ldr	r2, [pc, #100]	; (8007644 <HAL_MspInit+0x74>)
 80075e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075e4:	6453      	str	r3, [r2, #68]	; 0x44
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <HAL_MspInit+0x74>)
 80075e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075ee:	607b      	str	r3, [r7, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075f2:	2300      	movs	r3, #0
 80075f4:	603b      	str	r3, [r7, #0]
 80075f6:	4b13      	ldr	r3, [pc, #76]	; (8007644 <HAL_MspInit+0x74>)
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	4a12      	ldr	r2, [pc, #72]	; (8007644 <HAL_MspInit+0x74>)
 80075fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007600:	6413      	str	r3, [r2, #64]	; 0x40
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <HAL_MspInit+0x74>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800760e:	2200      	movs	r2, #0
 8007610:	210f      	movs	r1, #15
 8007612:	f06f 0001 	mvn.w	r0, #1
 8007616:	f001 fdff 	bl	8009218 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800761a:	2200      	movs	r2, #0
 800761c:	2105      	movs	r1, #5
 800761e:	2004      	movs	r0, #4
 8007620:	f001 fdfa 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8007624:	2004      	movs	r0, #4
 8007626:	f001 fe13 	bl	8009250 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2105      	movs	r1, #5
 800762e:	2005      	movs	r0, #5
 8007630:	f001 fdf2 	bl	8009218 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007634:	2005      	movs	r0, #5
 8007636:	f001 fe0b 	bl	8009250 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800763a:	bf00      	nop
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800

08007648 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b08c      	sub	sp, #48	; 0x30
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8007650:	2300      	movs	r3, #0
 8007652:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007658:	2300      	movs	r3, #0
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	4b2f      	ldr	r3, [pc, #188]	; (800771c <HAL_InitTick+0xd4>)
 800765e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007660:	4a2e      	ldr	r2, [pc, #184]	; (800771c <HAL_InitTick+0xd4>)
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	6453      	str	r3, [r2, #68]	; 0x44
 8007668:	4b2c      	ldr	r3, [pc, #176]	; (800771c <HAL_InitTick+0xd4>)
 800766a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	60bb      	str	r3, [r7, #8]
 8007672:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007674:	f107 020c 	add.w	r2, r7, #12
 8007678:	f107 0310 	add.w	r3, r7, #16
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f003 fa8c 	bl	800ab9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007684:	f003 fa76 	bl	800ab74 <HAL_RCC_GetPCLK2Freq>
 8007688:	4603      	mov	r3, r0
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	4a23      	ldr	r2, [pc, #140]	; (8007720 <HAL_InitTick+0xd8>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	0c9b      	lsrs	r3, r3, #18
 8007698:	3b01      	subs	r3, #1
 800769a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800769c:	4b21      	ldr	r3, [pc, #132]	; (8007724 <HAL_InitTick+0xdc>)
 800769e:	4a22      	ldr	r2, [pc, #136]	; (8007728 <HAL_InitTick+0xe0>)
 80076a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80076a2:	4b20      	ldr	r3, [pc, #128]	; (8007724 <HAL_InitTick+0xdc>)
 80076a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80076a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80076aa:	4a1e      	ldr	r2, [pc, #120]	; (8007724 <HAL_InitTick+0xdc>)
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80076b0:	4b1c      	ldr	r3, [pc, #112]	; (8007724 <HAL_InitTick+0xdc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076b6:	4b1b      	ldr	r3, [pc, #108]	; (8007724 <HAL_InitTick+0xdc>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076bc:	4b19      	ldr	r3, [pc, #100]	; (8007724 <HAL_InitTick+0xdc>)
 80076be:	2200      	movs	r2, #0
 80076c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80076c2:	4818      	ldr	r0, [pc, #96]	; (8007724 <HAL_InitTick+0xdc>)
 80076c4:	f003 fef4 	bl	800b4b0 <HAL_TIM_Base_Init>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80076ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d11b      	bne.n	800770e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80076d6:	4813      	ldr	r0, [pc, #76]	; (8007724 <HAL_InitTick+0xdc>)
 80076d8:	f003 ff3a 	bl	800b550 <HAL_TIM_Base_Start_IT>
 80076dc:	4603      	mov	r3, r0
 80076de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80076e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d111      	bne.n	800770e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80076ea:	2019      	movs	r0, #25
 80076ec:	f001 fdb0 	bl	8009250 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b0f      	cmp	r3, #15
 80076f4:	d808      	bhi.n	8007708 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80076f6:	2200      	movs	r2, #0
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	2019      	movs	r0, #25
 80076fc:	f001 fd8c 	bl	8009218 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007700:	4a0a      	ldr	r2, [pc, #40]	; (800772c <HAL_InitTick+0xe4>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	e002      	b.n	800770e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800770e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007712:	4618      	mov	r0, r3
 8007714:	3730      	adds	r7, #48	; 0x30
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40023800 	.word	0x40023800
 8007720:	431bde83 	.word	0x431bde83
 8007724:	20002c04 	.word	0x20002c04
 8007728:	40010000 	.word	0x40010000
 800772c:	2000014c 	.word	0x2000014c

08007730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007734:	e7fe      	b.n	8007734 <NMI_Handler+0x4>

08007736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007736:	b480      	push	{r7}
 8007738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800773a:	e7fe      	b.n	800773a <HardFault_Handler+0x4>

0800773c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007740:	e7fe      	b.n	8007740 <MemManage_Handler+0x4>

08007742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007742:	b480      	push	{r7}
 8007744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007746:	e7fe      	b.n	8007746 <BusFault_Handler+0x4>

08007748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800774c:	e7fe      	b.n	800774c <UsageFault_Handler+0x4>

0800774e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800774e:	b480      	push	{r7}
 8007750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007752:	bf00      	nop
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8007760:	f002 fd6c 	bl	800a23c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8007764:	bf00      	nop
 8007766:	bd80      	pop	{r7, pc}

08007768 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800776c:	f002 f980 	bl	8009a70 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}

08007774 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007778:	bf00      	nop
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_Prox_Interrupt_Pin);
 8007786:	2001      	movs	r0, #1
 8007788:	f002 fcd8 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800778c:	bf00      	nop
 800778e:	bd80      	pop	{r7, pc}

08007790 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_EncB__Interrupt_Pin);
 8007794:	2002      	movs	r0, #2
 8007796:	f002 fcd1 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800779a:	bf00      	nop
 800779c:	bd80      	pop	{r7, pc}

0800779e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Clean_Interrupt_PullUp_Pin);
 80077a2:	2004      	movs	r0, #4
 80077a4:	f002 fcca 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80077a8:	bf00      	nop
 80077aa:	bd80      	pop	{r7, pc}

080077ac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Power_Interrupt_PullUp_Pin);
 80077b0:	2010      	movs	r0, #16
 80077b2:	f002 fcc3 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80077c0:	4802      	ldr	r0, [pc, #8]	; (80077cc <DMA1_Stream1_IRQHandler+0x10>)
 80077c2:	f001 feeb 	bl	800959c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80077c6:	bf00      	nop
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20002fcc 	.word	0x20002fcc

080077d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80077d4:	4802      	ldr	r0, [pc, #8]	; (80077e0 <DMA1_Stream3_IRQHandler+0x10>)
 80077d6:	f001 fee1 	bl	800959c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80077da:	bf00      	nop
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	2000302c 	.word	0x2000302c

080077e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_EncA_Interrupt_Pin);
 80077e8:	2020      	movs	r0, #32
 80077ea:	f002 fca7 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_EncA_Interrupt_Pin);
 80077ee:	2040      	movs	r0, #64	; 0x40
 80077f0:	f002 fca4 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ServoDC_M1_Prox_Interrupt_Pin);
 80077f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80077f8:	f002 fca0 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
//*  This  part will only work if we are using DC Motor instead of Servo Motor:
  #ifndef Servo
  HAL_GPIO_EXTI_IRQHandler(Servo_PWM_OR_DC_M1_EncA_Interrupt_Pin);
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}

08007800 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007804:	4803      	ldr	r0, [pc, #12]	; (8007814 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8007806:	f004 f835 	bl	800b874 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800780a:	4803      	ldr	r0, [pc, #12]	; (8007818 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800780c:	f004 f832 	bl	800b874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007810:	bf00      	nop
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20002c04 	.word	0x20002c04
 8007818:	20002e04 	.word	0x20002e04

0800781c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007820:	4802      	ldr	r0, [pc, #8]	; (800782c <TIM2_IRQHandler+0x10>)
 8007822:	f004 f827 	bl	800b874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007826:	bf00      	nop
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20002c54 	.word	0x20002c54

08007830 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007834:	4802      	ldr	r0, [pc, #8]	; (8007840 <USART1_IRQHandler+0x10>)
 8007836:	f005 f82f 	bl	800c898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20002edc 	.word	0x20002edc

08007844 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007848:	4802      	ldr	r0, [pc, #8]	; (8007854 <USART3_IRQHandler+0x10>)
 800784a:	f005 f825 	bl	800c898 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800784e:	bf00      	nop
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20002f24 	.word	0x20002f24

08007858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_Prox_Interrupt_Pin);
 800785c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007860:	f002 fc6c 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USBFlag_Interrupt_PullUp_Pin);
 8007864:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007868:	f002 fc68 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_EncB_Interrupt_Pin);
 800786c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007870:	f002 fc64 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ServoDC_M1_EncB_Interrupt_Pin);
 8007874:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007878:	f002 fc60 	bl	800a13c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800787c:	bf00      	nop
 800787e:	bd80      	pop	{r7, pc}

08007880 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007884:	4802      	ldr	r0, [pc, #8]	; (8007890 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8007886:	f003 fff5 	bl	800b874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800788a:	bf00      	nop
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20002dbc 	.word	0x20002dbc

08007894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007898:	4802      	ldr	r0, [pc, #8]	; (80078a4 <TIM6_DAC_IRQHandler+0x10>)
 800789a:	f003 ffeb 	bl	800b874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800789e:	bf00      	nop
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20002d2c 	.word	0x20002d2c

080078a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80078ac:	4802      	ldr	r0, [pc, #8]	; (80078b8 <TIM7_IRQHandler+0x10>)
 80078ae:	f003 ffe1 	bl	800b874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20002d74 	.word	0x20002d74

080078bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80078c0:	4802      	ldr	r0, [pc, #8]	; (80078cc <DMA2_Stream2_IRQHandler+0x10>)
 80078c2:	f001 fe6b 	bl	800959c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80078c6:	bf00      	nop
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20002f6c 	.word	0x20002f6c

080078d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return 1;
 80078d4:	2301      	movs	r3, #1
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <_kill>:

int _kill(int pid, int sig)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80078ea:	f00e ff85 	bl	80167f8 <__errno>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2216      	movs	r2, #22
 80078f2:	601a      	str	r2, [r3, #0]
  return -1;
 80078f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <_exit>:

void _exit (int status)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007908:	f04f 31ff 	mov.w	r1, #4294967295
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ffe7 	bl	80078e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007912:	e7fe      	b.n	8007912 <_exit+0x12>

08007914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e00a      	b.n	800793c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007926:	f3af 8000 	nop.w
 800792a:	4601      	mov	r1, r0
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	1c5a      	adds	r2, r3, #1
 8007930:	60ba      	str	r2, [r7, #8]
 8007932:	b2ca      	uxtb	r2, r1
 8007934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3301      	adds	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	429a      	cmp	r2, r3
 8007942:	dbf0      	blt.n	8007926 <_read+0x12>
  }

  return len;
 8007944:	687b      	ldr	r3, [r7, #4]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	e009      	b.n	8007974 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	60ba      	str	r2, [r7, #8]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	3301      	adds	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	429a      	cmp	r2, r3
 800797a:	dbf1      	blt.n	8007960 <_write+0x12>
  }
  return len;
 800797c:	687b      	ldr	r3, [r7, #4]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <_close>:

int _close(int file)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800798e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80079ae:	605a      	str	r2, [r3, #4]
  return 0;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <_isatty>:

int _isatty(int file)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80079c6:	2301      	movs	r3, #1
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
	...

080079f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079f8:	4a14      	ldr	r2, [pc, #80]	; (8007a4c <_sbrk+0x5c>)
 80079fa:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <_sbrk+0x60>)
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a04:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <_sbrk+0x64>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a0c:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <_sbrk+0x64>)
 8007a0e:	4a12      	ldr	r2, [pc, #72]	; (8007a58 <_sbrk+0x68>)
 8007a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <_sbrk+0x64>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4413      	add	r3, r2
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d207      	bcs.n	8007a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a20:	f00e feea 	bl	80167f8 <__errno>
 8007a24:	4603      	mov	r3, r0
 8007a26:	220c      	movs	r2, #12
 8007a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2e:	e009      	b.n	8007a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007a30:	4b08      	ldr	r3, [pc, #32]	; (8007a54 <_sbrk+0x64>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <_sbrk+0x64>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <_sbrk+0x64>)
 8007a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a42:	68fb      	ldr	r3, [r7, #12]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20020000 	.word	0x20020000
 8007a50:	00000400 	.word	0x00000400
 8007a54:	20002c50 	.word	0x20002c50
 8007a58:	200073b0 	.word	0x200073b0

08007a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a60:	4b06      	ldr	r3, [pc, #24]	; (8007a7c <SystemInit+0x20>)
 8007a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a66:	4a05      	ldr	r2, [pc, #20]	; (8007a7c <SystemInit+0x20>)
 8007a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007a70:	bf00      	nop
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	e000ed00 	.word	0xe000ed00

08007a80 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a86:	f107 0308 	add.w	r3, r7, #8
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	609a      	str	r2, [r3, #8]
 8007a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a94:	463b      	mov	r3, r7
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007a9c:	4b1e      	ldr	r3, [pc, #120]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16799;
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007aa6:	f244 129f 	movw	r2, #16799	; 0x419f
 8007aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007aac:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8007ab2:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007ab4:	f241 3287 	movw	r2, #4999	; 0x1387
 8007ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007aba:	4b17      	ldr	r3, [pc, #92]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ac0:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007ac6:	4814      	ldr	r0, [pc, #80]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007ac8:	f003 fcf2 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007ad2:	f7ff fc41 	bl	8007358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007adc:	f107 0308 	add.w	r3, r7, #8
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	480d      	ldr	r0, [pc, #52]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007ae4:	f004 f878 	bl	800bbd8 <HAL_TIM_ConfigClockSource>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007aee:	f7ff fc33 	bl	8007358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007af2:	2300      	movs	r3, #0
 8007af4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007afa:	463b      	mov	r3, r7
 8007afc:	4619      	mov	r1, r3
 8007afe:	4806      	ldr	r0, [pc, #24]	; (8007b18 <MX_TIM2_Init+0x98>)
 8007b00:	f004 fc76 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007b0a:	f7ff fc25 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007b0e:	bf00      	nop
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20002c54 	.word	0x20002c54

08007b1c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08e      	sub	sp, #56	; 0x38
 8007b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
/**  ServoDC Connector PWM Timer Configuration for Servo*/
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	605a      	str	r2, [r3, #4]
 8007b2c:	609a      	str	r2, [r3, #8]
 8007b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b30:	f107 0320 	add.w	r3, r7, #32
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b3a:	1d3b      	adds	r3, r7, #4
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	605a      	str	r2, [r3, #4]
 8007b42:	609a      	str	r2, [r3, #8]
 8007b44:	60da      	str	r2, [r3, #12]
 8007b46:	611a      	str	r2, [r3, #16]
 8007b48:	615a      	str	r2, [r3, #20]
 8007b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007b4c:	4b2c      	ldr	r3, [pc, #176]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b4e:	4a2d      	ldr	r2, [pc, #180]	; (8007c04 <MX_TIM3_Init+0xe8>)
 8007b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8007b52:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b54:	2253      	movs	r2, #83	; 0x53
 8007b56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b58:	4b29      	ldr	r3, [pc, #164]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 8007b5e:	4b28      	ldr	r3, [pc, #160]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b60:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b66:	4b26      	ldr	r3, [pc, #152]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b6c:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007b72:	4823      	ldr	r0, [pc, #140]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b74:	f003 fc9c 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8007b7e:	f7ff fbeb 	bl	8007358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	481c      	ldr	r0, [pc, #112]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007b90:	f004 f822 	bl	800bbd8 <HAL_TIM_ConfigClockSource>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8007b9a:	f7ff fbdd 	bl	8007358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007b9e:	4818      	ldr	r0, [pc, #96]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007ba0:	f003 fd46 	bl	800b630 <HAL_TIM_PWM_Init>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8007baa:	f7ff fbd5 	bl	8007358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007bb6:	f107 0320 	add.w	r3, r7, #32
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4810      	ldr	r0, [pc, #64]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007bbe:	f004 fc17 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007bc8:	f7ff fbc6 	bl	8007358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007bcc:	2360      	movs	r3, #96	; 0x60
 8007bce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007bdc:	1d3b      	adds	r3, r7, #4
 8007bde:	2208      	movs	r2, #8
 8007be0:	4619      	mov	r1, r3
 8007be2:	4807      	ldr	r0, [pc, #28]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007be4:	f003 ff36 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8007bee:	f7ff fbb3 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007bf2:	4803      	ldr	r0, [pc, #12]	; (8007c00 <MX_TIM3_Init+0xe4>)
 8007bf4:	f000 fae4 	bl	80081c0 <HAL_TIM_MspPostInit>

}
 8007bf8:	bf00      	nop
 8007bfa:	3738      	adds	r7, #56	; 0x38
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20002c9c 	.word	0x20002c9c
 8007c04:	40000400 	.word	0x40000400

08007c08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08e      	sub	sp, #56	; 0x38
 8007c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
/**  DC Clamp Motor and DC Spindle Motor PWM Timer Configration*/
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	605a      	str	r2, [r3, #4]
 8007c18:	609a      	str	r2, [r3, #8]
 8007c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c1c:	f107 0320 	add.w	r3, r7, #32
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	60da      	str	r2, [r3, #12]
 8007c32:	611a      	str	r2, [r3, #16]
 8007c34:	615a      	str	r2, [r3, #20]
 8007c36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007c38:	4b32      	ldr	r3, [pc, #200]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c3a:	4a33      	ldr	r2, [pc, #204]	; (8007d08 <MX_TIM4_Init+0x100>)
 8007c3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c40:	2253      	movs	r2, #83	; 0x53
 8007c42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c44:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8007c4a:	4b2e      	ldr	r3, [pc, #184]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c4c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007c50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c52:	4b2c      	ldr	r3, [pc, #176]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c58:	4b2a      	ldr	r3, [pc, #168]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007c5e:	4829      	ldr	r0, [pc, #164]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c60:	f003 fc26 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8007c6a:	f7ff fb75 	bl	8007358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4822      	ldr	r0, [pc, #136]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c7c:	f003 ffac 	bl	800bbd8 <HAL_TIM_ConfigClockSource>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007c86:	f7ff fb67 	bl	8007358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007c8a:	481e      	ldr	r0, [pc, #120]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007c8c:	f003 fcd0 	bl	800b630 <HAL_TIM_PWM_Init>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007c96:	f7ff fb5f 	bl	8007358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007ca2:	f107 0320 	add.w	r3, r7, #32
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4816      	ldr	r0, [pc, #88]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007caa:	f004 fba1 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007cb4:	f7ff fb50 	bl	8007358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cb8:	2360      	movs	r3, #96	; 0x60
 8007cba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cc8:	1d3b      	adds	r3, r7, #4
 8007cca:	2200      	movs	r2, #0
 8007ccc:	4619      	mov	r1, r3
 8007cce:	480d      	ldr	r0, [pc, #52]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007cd0:	f003 fec0 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8007cda:	f7ff fb3d 	bl	8007358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007cde:	1d3b      	adds	r3, r7, #4
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	4807      	ldr	r0, [pc, #28]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007ce6:	f003 feb5 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8007cea:	4603      	mov	r3, r0
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8007cf0:	f7ff fb32 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <MX_TIM4_Init+0xfc>)
 8007cf6:	f000 fa63 	bl	80081c0 <HAL_TIM_MspPostInit>

}
 8007cfa:	bf00      	nop
 8007cfc:	3738      	adds	r7, #56	; 0x38
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20002ce4 	.word	0x20002ce4
 8007d08:	40000800 	.word	0x40000800

08007d0c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d12:	463b      	mov	r3, r7
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007d1a:	4b15      	ldr	r3, [pc, #84]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d1c:	4a15      	ldr	r2, [pc, #84]	; (8007d74 <MX_TIM6_Init+0x68>)
 8007d1e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8007d20:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d22:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8007d26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d30:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8007d34:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007d3c:	480c      	ldr	r0, [pc, #48]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d3e:	f003 fbb7 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8007d48:	f7ff fb06 	bl	8007358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007d54:	463b      	mov	r3, r7
 8007d56:	4619      	mov	r1, r3
 8007d58:	4805      	ldr	r0, [pc, #20]	; (8007d70 <MX_TIM6_Init+0x64>)
 8007d5a:	f004 fb49 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d001      	beq.n	8007d68 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007d64:	f7ff faf8 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20002d2c 	.word	0x20002d2c
 8007d74:	40001000 	.word	0x40001000

08007d78 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d7e:	463b      	mov	r3, r7
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007d86:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007d88:	4a15      	ldr	r2, [pc, #84]	; (8007de0 <MX_TIM7_Init+0x68>)
 8007d8a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8007d8c:	4b13      	ldr	r3, [pc, #76]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007d8e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8007d92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d94:	4b11      	ldr	r3, [pc, #68]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8007d9a:	4b10      	ldr	r3, [pc, #64]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007d9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007da0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007da2:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007da8:	480c      	ldr	r0, [pc, #48]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007daa:	f003 fb81 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8007db4:	f7ff fad0 	bl	8007358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007db8:	2300      	movs	r3, #0
 8007dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4805      	ldr	r0, [pc, #20]	; (8007ddc <MX_TIM7_Init+0x64>)
 8007dc6:	f004 fb13 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8007dd0:	f7ff fac2 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007dd4:	bf00      	nop
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20002d74 	.word	0x20002d74
 8007de0:	40001400 	.word	0x40001400

08007de4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b096      	sub	sp, #88	; 0x58
 8007de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
/** LCD PWM Timer Configurations*/
  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007dea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	605a      	str	r2, [r3, #4]
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007df8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	605a      	str	r2, [r3, #4]
 8007e0c:	609a      	str	r2, [r3, #8]
 8007e0e:	60da      	str	r2, [r3, #12]
 8007e10:	611a      	str	r2, [r3, #16]
 8007e12:	615a      	str	r2, [r3, #20]
 8007e14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	2220      	movs	r2, #32
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f00e fc02 	bl	8016626 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007e22:	4b44      	ldr	r3, [pc, #272]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e24:	4a44      	ldr	r2, [pc, #272]	; (8007f38 <MX_TIM8_Init+0x154>)
 8007e26:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8007e28:	4b42      	ldr	r3, [pc, #264]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e2a:	2253      	movs	r2, #83	; 0x53
 8007e2c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e2e:	4b41      	ldr	r3, [pc, #260]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 8007e34:	4b3f      	ldr	r3, [pc, #252]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e36:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007e3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e3c:	4b3d      	ldr	r3, [pc, #244]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007e42:	4b3c      	ldr	r3, [pc, #240]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e48:	4b3a      	ldr	r3, [pc, #232]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007e4e:	4839      	ldr	r0, [pc, #228]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e50:	f003 fb2e 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8007e5a:	f7ff fa7d 	bl	8007358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007e64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4832      	ldr	r0, [pc, #200]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e6c:	f003 feb4 	bl	800bbd8 <HAL_TIM_ConfigClockSource>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d001      	beq.n	8007e7a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8007e76:	f7ff fa6f 	bl	8007358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007e7a:	482e      	ldr	r0, [pc, #184]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e7c:	f003 fbd8 	bl	800b630 <HAL_TIM_PWM_Init>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8007e86:	f7ff fa67 	bl	8007358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007e92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e96:	4619      	mov	r1, r3
 8007e98:	4826      	ldr	r0, [pc, #152]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007e9a:	f004 faa9 	bl	800c3f0 <HAL_TIMEx_MasterConfigSynchronization>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8007ea4:	f7ff fa58 	bl	8007358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ea8:	2360      	movs	r3, #96	; 0x60
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4819      	ldr	r0, [pc, #100]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007ece:	f003 fdc1 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8007ed8:	f7ff fa3e 	bl	8007358 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ee0:	2204      	movs	r2, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4813      	ldr	r0, [pc, #76]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007ee6:	f003 fdb5 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8007ef0:	f7ff fa32 	bl	8007358 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007efc:	2300      	movs	r3, #0
 8007efe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007f12:	1d3b      	adds	r3, r7, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4807      	ldr	r0, [pc, #28]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007f18:	f004 fae6 	bl	800c4e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8007f22:	f7ff fa19 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8007f26:	4803      	ldr	r0, [pc, #12]	; (8007f34 <MX_TIM8_Init+0x150>)
 8007f28:	f000 f94a 	bl	80081c0 <HAL_TIM_MspPostInit>

}
 8007f2c:	bf00      	nop
 8007f2e:	3758      	adds	r7, #88	; 0x58
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20002dbc 	.word	0x20002dbc
 8007f38:	40010400 	.word	0x40010400

08007f3c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8007f40:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f42:	4a0f      	ldr	r2, [pc, #60]	; (8007f80 <MX_TIM10_Init+0x44>)
 8007f44:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 65535;
 8007f46:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f4c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 270;
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f56:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8007f5a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f5c:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f62:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8007f68:	4804      	ldr	r0, [pc, #16]	; (8007f7c <MX_TIM10_Init+0x40>)
 8007f6a:	f003 faa1 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8007f74:	f7ff f9f0 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8007f78:	bf00      	nop
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20002e04 	.word	0x20002e04
 8007f80:	40014400 	.word	0x40014400

08007f84 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
/**  Servo Motor PWM Timer Configuration */
  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	605a      	str	r2, [r3, #4]
 8007f92:	609a      	str	r2, [r3, #8]
 8007f94:	60da      	str	r2, [r3, #12]
 8007f96:	611a      	str	r2, [r3, #16]
 8007f98:	615a      	str	r2, [r3, #20]
 8007f9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007f9c:	4b1e      	ldr	r3, [pc, #120]	; (8008018 <MX_TIM11_Init+0x94>)
 8007f9e:	4a1f      	ldr	r2, [pc, #124]	; (800801c <MX_TIM11_Init+0x98>)
 8007fa0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 509;
 8007fa2:	4b1d      	ldr	r3, [pc, #116]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fa4:	f240 12fd 	movw	r2, #509	; 0x1fd
 8007fa8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007faa:	4b1b      	ldr	r3, [pc, #108]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 3029;
 8007fb0:	4b19      	ldr	r3, [pc, #100]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fb2:	f640 32d5 	movw	r2, #3029	; 0xbd5
 8007fb6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fb8:	4b17      	ldr	r3, [pc, #92]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fbe:	4b16      	ldr	r3, [pc, #88]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007fc4:	4814      	ldr	r0, [pc, #80]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fc6:	f003 fa73 	bl	800b4b0 <HAL_TIM_Base_Init>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d001      	beq.n	8007fd4 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8007fd0:	f7ff f9c2 	bl	8007358 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8007fd4:	4810      	ldr	r0, [pc, #64]	; (8008018 <MX_TIM11_Init+0x94>)
 8007fd6:	f003 fb2b 	bl	800b630 <HAL_TIM_PWM_Init>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8007fe0:	f7ff f9ba 	bl	8007358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007fe4:	2360      	movs	r3, #96	; 0x60
 8007fe6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	4807      	ldr	r0, [pc, #28]	; (8008018 <MX_TIM11_Init+0x94>)
 8007ffc:	f003 fd2a 	bl	800ba54 <HAL_TIM_PWM_ConfigChannel>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8008006:	f7ff f9a7 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800800a:	4803      	ldr	r0, [pc, #12]	; (8008018 <MX_TIM11_Init+0x94>)
 800800c:	f000 f8d8 	bl	80081c0 <HAL_TIM_MspPostInit>

}
 8008010:	bf00      	nop
 8008012:	3720      	adds	r7, #32
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20002e4c 	.word	0x20002e4c
 800801c:	40014800 	.word	0x40014800

08008020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b08a      	sub	sp, #40	; 0x28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008030:	d10e      	bne.n	8008050 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	4b5a      	ldr	r3, [pc, #360]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	4a59      	ldr	r2, [pc, #356]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6413      	str	r3, [r2, #64]	; 0x40
 8008042:	4b57      	ldr	r3, [pc, #348]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800804e:	e0a2      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a53      	ldr	r2, [pc, #332]	; (80081a4 <HAL_TIM_Base_MspInit+0x184>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d10e      	bne.n	8008078 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800805a:	2300      	movs	r3, #0
 800805c:	623b      	str	r3, [r7, #32]
 800805e:	4b50      	ldr	r3, [pc, #320]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	4a4f      	ldr	r2, [pc, #316]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	6413      	str	r3, [r2, #64]	; 0x40
 800806a:	4b4d      	ldr	r3, [pc, #308]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	623b      	str	r3, [r7, #32]
 8008074:	6a3b      	ldr	r3, [r7, #32]
}
 8008076:	e08e      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a4a      	ldr	r2, [pc, #296]	; (80081a8 <HAL_TIM_Base_MspInit+0x188>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d10e      	bne.n	80080a0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	4b46      	ldr	r3, [pc, #280]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	4a45      	ldr	r2, [pc, #276]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 800808c:	f043 0304 	orr.w	r3, r3, #4
 8008090:	6413      	str	r3, [r2, #64]	; 0x40
 8008092:	4b43      	ldr	r3, [pc, #268]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f003 0304 	and.w	r3, r3, #4
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	69fb      	ldr	r3, [r7, #28]
}
 800809e:	e07a      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a41      	ldr	r2, [pc, #260]	; (80081ac <HAL_TIM_Base_MspInit+0x18c>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d116      	bne.n	80080d8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80080aa:	2300      	movs	r3, #0
 80080ac:	61bb      	str	r3, [r7, #24]
 80080ae:	4b3c      	ldr	r3, [pc, #240]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	4a3b      	ldr	r2, [pc, #236]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 80080b4:	f043 0310 	orr.w	r3, r3, #16
 80080b8:	6413      	str	r3, [r2, #64]	; 0x40
 80080ba:	4b39      	ldr	r3, [pc, #228]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	61bb      	str	r3, [r7, #24]
 80080c4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80080c6:	2200      	movs	r2, #0
 80080c8:	2105      	movs	r1, #5
 80080ca:	2036      	movs	r0, #54	; 0x36
 80080cc:	f001 f8a4 	bl	8009218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80080d0:	2036      	movs	r0, #54	; 0x36
 80080d2:	f001 f8bd 	bl	8009250 <HAL_NVIC_EnableIRQ>
}
 80080d6:	e05e      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a34      	ldr	r2, [pc, #208]	; (80081b0 <HAL_TIM_Base_MspInit+0x190>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d10e      	bne.n	8008100 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]
 80080e6:	4b2e      	ldr	r3, [pc, #184]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 80080e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ea:	4a2d      	ldr	r2, [pc, #180]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 80080ec:	f043 0320 	orr.w	r3, r3, #32
 80080f0:	6413      	str	r3, [r2, #64]	; 0x40
 80080f2:	4b2b      	ldr	r3, [pc, #172]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	697b      	ldr	r3, [r7, #20]
}
 80080fe:	e04a      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2b      	ldr	r2, [pc, #172]	; (80081b4 <HAL_TIM_Base_MspInit+0x194>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d116      	bne.n	8008138 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800810a:	2300      	movs	r3, #0
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008112:	4a23      	ldr	r2, [pc, #140]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008114:	f043 0302 	orr.w	r3, r3, #2
 8008118:	6453      	str	r3, [r2, #68]	; 0x44
 800811a:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 800811c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 5, 0);
 8008126:	2200      	movs	r2, #0
 8008128:	2105      	movs	r1, #5
 800812a:	202d      	movs	r0, #45	; 0x2d
 800812c:	f001 f874 	bl	8009218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8008130:	202d      	movs	r0, #45	; 0x2d
 8008132:	f001 f88d 	bl	8009250 <HAL_NVIC_EnableIRQ>
}
 8008136:	e02e      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM10)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <HAL_TIM_Base_MspInit+0x198>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d116      	bne.n	8008170 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814a:	4a15      	ldr	r2, [pc, #84]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 800814c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008150:	6453      	str	r3, [r2, #68]	; 0x44
 8008152:	4b13      	ldr	r3, [pc, #76]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800815e:	2200      	movs	r2, #0
 8008160:	210f      	movs	r1, #15
 8008162:	2019      	movs	r0, #25
 8008164:	f001 f858 	bl	8009218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008168:	2019      	movs	r0, #25
 800816a:	f001 f871 	bl	8009250 <HAL_NVIC_EnableIRQ>
}
 800816e:	e012      	b.n	8008196 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM11)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a11      	ldr	r2, [pc, #68]	; (80081bc <HAL_TIM_Base_MspInit+0x19c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d10d      	bne.n	8008196 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800817a:	2300      	movs	r3, #0
 800817c:	60bb      	str	r3, [r7, #8]
 800817e:	4b08      	ldr	r3, [pc, #32]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	4a07      	ldr	r2, [pc, #28]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 8008184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008188:	6453      	str	r3, [r2, #68]	; 0x44
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <HAL_TIM_Base_MspInit+0x180>)
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008192:	60bb      	str	r3, [r7, #8]
 8008194:	68bb      	ldr	r3, [r7, #8]
}
 8008196:	bf00      	nop
 8008198:	3728      	adds	r7, #40	; 0x28
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40023800 	.word	0x40023800
 80081a4:	40000400 	.word	0x40000400
 80081a8:	40000800 	.word	0x40000800
 80081ac:	40001000 	.word	0x40001000
 80081b0:	40001400 	.word	0x40001400
 80081b4:	40010400 	.word	0x40010400
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800

080081c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08c      	sub	sp, #48	; 0x30
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081c8:	f107 031c 	add.w	r3, r7, #28
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	605a      	str	r2, [r3, #4]
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	60da      	str	r2, [r3, #12]
 80081d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a49      	ldr	r2, [pc, #292]	; (8008304 <HAL_TIM_MspPostInit+0x144>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d11f      	bne.n	8008222 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081e2:	2300      	movs	r3, #0
 80081e4:	61bb      	str	r3, [r7, #24]
 80081e6:	4b48      	ldr	r3, [pc, #288]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	4a47      	ldr	r2, [pc, #284]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 80081ec:	f043 0304 	orr.w	r3, r3, #4
 80081f0:	6313      	str	r3, [r2, #48]	; 0x30
 80081f2:	4b45      	ldr	r3, [pc, #276]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	61bb      	str	r3, [r7, #24]
 80081fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ServoDC_M1_PWM_Pin;
 80081fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008204:	2302      	movs	r3, #2
 8008206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008208:	2300      	movs	r3, #0
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800820c:	2300      	movs	r3, #0
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008210:	2302      	movs	r3, #2
 8008212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ServoDC_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8008214:	f107 031c 	add.w	r3, r7, #28
 8008218:	4619      	mov	r1, r3
 800821a:	483c      	ldr	r0, [pc, #240]	; (800830c <HAL_TIM_MspPostInit+0x14c>)
 800821c:	f001 fdc0 	bl	8009da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8008220:	e06c      	b.n	80082fc <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a3a      	ldr	r2, [pc, #232]	; (8008310 <HAL_TIM_MspPostInit+0x150>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d11f      	bne.n	800826c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
 8008230:	4b35      	ldr	r3, [pc, #212]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008234:	4a34      	ldr	r2, [pc, #208]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 8008236:	f043 0308 	orr.w	r3, r3, #8
 800823a:	6313      	str	r3, [r2, #48]	; 0x30
 800823c:	4b32      	ldr	r3, [pc, #200]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	617b      	str	r3, [r7, #20]
 8008246:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Clamp_M2_PWM_Pin|Spindle_M3_PWM_Pin;
 8008248:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800824c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824e:	2302      	movs	r3, #2
 8008250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008252:	2300      	movs	r3, #0
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008256:	2300      	movs	r3, #0
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800825a:	2302      	movs	r3, #2
 800825c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800825e:	f107 031c 	add.w	r3, r7, #28
 8008262:	4619      	mov	r1, r3
 8008264:	482b      	ldr	r0, [pc, #172]	; (8008314 <HAL_TIM_MspPostInit+0x154>)
 8008266:	f001 fd9b 	bl	8009da0 <HAL_GPIO_Init>
}
 800826a:	e047      	b.n	80082fc <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a29      	ldr	r2, [pc, #164]	; (8008318 <HAL_TIM_MspPostInit+0x158>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d11e      	bne.n	80082b4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008276:	2300      	movs	r3, #0
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	4b23      	ldr	r3, [pc, #140]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 800827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827e:	4a22      	ldr	r2, [pc, #136]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 8008280:	f043 0304 	orr.w	r3, r3, #4
 8008284:	6313      	str	r3, [r2, #48]	; 0x30
 8008286:	4b20      	ldr	r3, [pc, #128]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_Contrast_PWM_Pin|LCD_LED_PWM_Pin;
 8008292:	23c0      	movs	r3, #192	; 0xc0
 8008294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008296:	2302      	movs	r3, #2
 8008298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829a:	2300      	movs	r3, #0
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829e:	2300      	movs	r3, #0
 80082a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80082a2:	2303      	movs	r3, #3
 80082a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a6:	f107 031c 	add.w	r3, r7, #28
 80082aa:	4619      	mov	r1, r3
 80082ac:	4817      	ldr	r0, [pc, #92]	; (800830c <HAL_TIM_MspPostInit+0x14c>)
 80082ae:	f001 fd77 	bl	8009da0 <HAL_GPIO_Init>
}
 80082b2:	e023      	b.n	80082fc <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a18      	ldr	r2, [pc, #96]	; (800831c <HAL_TIM_MspPostInit+0x15c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d11e      	bne.n	80082fc <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082be:	2300      	movs	r3, #0
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	4b11      	ldr	r3, [pc, #68]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	4a10      	ldr	r2, [pc, #64]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 80082c8:	f043 0302 	orr.w	r3, r3, #2
 80082cc:	6313      	str	r3, [r2, #48]	; 0x30
 80082ce:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <HAL_TIM_MspPostInit+0x148>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_PWM_OR_DC_M1_EncA_Interrupt_Pin;
 80082da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e0:	2302      	movs	r3, #2
 80082e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e8:	2300      	movs	r3, #0
 80082ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80082ec:	2303      	movs	r3, #3
 80082ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_PWM_OR_DC_M1_EncA_Interrupt_GPIO_Port, &GPIO_InitStruct);
 80082f0:	f107 031c 	add.w	r3, r7, #28
 80082f4:	4619      	mov	r1, r3
 80082f6:	480a      	ldr	r0, [pc, #40]	; (8008320 <HAL_TIM_MspPostInit+0x160>)
 80082f8:	f001 fd52 	bl	8009da0 <HAL_GPIO_Init>
}
 80082fc:	bf00      	nop
 80082fe:	3730      	adds	r7, #48	; 0x30
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	40000400 	.word	0x40000400
 8008308:	40023800 	.word	0x40023800
 800830c:	40020800 	.word	0x40020800
 8008310:	40000800 	.word	0x40000800
 8008314:	40020c00 	.word	0x40020c00
 8008318:	40010400 	.word	0x40010400
 800831c:	40014800 	.word	0x40014800
 8008320:	40020400 	.word	0x40020400

08008324 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008328:	4b11      	ldr	r3, [pc, #68]	; (8008370 <MX_UART4_Init+0x4c>)
 800832a:	4a12      	ldr	r2, [pc, #72]	; (8008374 <MX_UART4_Init+0x50>)
 800832c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800832e:	4b10      	ldr	r3, [pc, #64]	; (8008370 <MX_UART4_Init+0x4c>)
 8008330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008334:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008336:	4b0e      	ldr	r3, [pc, #56]	; (8008370 <MX_UART4_Init+0x4c>)
 8008338:	2200      	movs	r2, #0
 800833a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800833c:	4b0c      	ldr	r3, [pc, #48]	; (8008370 <MX_UART4_Init+0x4c>)
 800833e:	2200      	movs	r2, #0
 8008340:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008342:	4b0b      	ldr	r3, [pc, #44]	; (8008370 <MX_UART4_Init+0x4c>)
 8008344:	2200      	movs	r2, #0
 8008346:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008348:	4b09      	ldr	r3, [pc, #36]	; (8008370 <MX_UART4_Init+0x4c>)
 800834a:	220c      	movs	r2, #12
 800834c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800834e:	4b08      	ldr	r3, [pc, #32]	; (8008370 <MX_UART4_Init+0x4c>)
 8008350:	2200      	movs	r2, #0
 8008352:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008354:	4b06      	ldr	r3, [pc, #24]	; (8008370 <MX_UART4_Init+0x4c>)
 8008356:	2200      	movs	r2, #0
 8008358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800835a:	4805      	ldr	r0, [pc, #20]	; (8008370 <MX_UART4_Init+0x4c>)
 800835c:	f004 f92a 	bl	800c5b4 <HAL_UART_Init>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008366:	f7fe fff7 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20002e94 	.word	0x20002e94
 8008374:	40004c00 	.word	0x40004c00

08008378 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 800837e:	4a12      	ldr	r2, [pc, #72]	; (80083c8 <MX_USART1_UART_Init+0x50>)
 8008380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008382:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 8008384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 800838c:	2200      	movs	r2, #0
 800838e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 8008392:	2200      	movs	r2, #0
 8008394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008396:	4b0b      	ldr	r3, [pc, #44]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 8008398:	2200      	movs	r2, #0
 800839a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800839c:	4b09      	ldr	r3, [pc, #36]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 800839e:	220c      	movs	r2, #12
 80083a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083a2:	4b08      	ldr	r3, [pc, #32]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80083a8:	4b06      	ldr	r3, [pc, #24]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80083ae:	4805      	ldr	r0, [pc, #20]	; (80083c4 <MX_USART1_UART_Init+0x4c>)
 80083b0:	f004 f900 	bl	800c5b4 <HAL_UART_Init>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80083ba:	f7fe ffcd 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20002edc 	.word	0x20002edc
 80083c8:	40011000 	.word	0x40011000

080083cc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80083d0:	4b11      	ldr	r3, [pc, #68]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083d2:	4a12      	ldr	r2, [pc, #72]	; (800841c <MX_USART3_UART_Init+0x50>)
 80083d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80083d6:	4b10      	ldr	r3, [pc, #64]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80083dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80083de:	4b0e      	ldr	r3, [pc, #56]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80083e4:	4b0c      	ldr	r3, [pc, #48]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80083ea:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80083f0:	4b09      	ldr	r3, [pc, #36]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083f2:	220c      	movs	r2, #12
 80083f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083f6:	4b08      	ldr	r3, [pc, #32]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 80083fe:	2200      	movs	r2, #0
 8008400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008402:	4805      	ldr	r0, [pc, #20]	; (8008418 <MX_USART3_UART_Init+0x4c>)
 8008404:	f004 f8d6 	bl	800c5b4 <HAL_UART_Init>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800840e:	f7fe ffa3 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008412:	bf00      	nop
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20002f24 	.word	0x20002f24
 800841c:	40004800 	.word	0x40004800

08008420 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08e      	sub	sp, #56	; 0x38
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	609a      	str	r2, [r3, #8]
 8008434:	60da      	str	r2, [r3, #12]
 8008436:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a99      	ldr	r2, [pc, #612]	; (80086a4 <HAL_UART_MspInit+0x284>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d12d      	bne.n	800849e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008442:	2300      	movs	r3, #0
 8008444:	623b      	str	r3, [r7, #32]
 8008446:	4b98      	ldr	r3, [pc, #608]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	4a97      	ldr	r2, [pc, #604]	; (80086a8 <HAL_UART_MspInit+0x288>)
 800844c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008450:	6413      	str	r3, [r2, #64]	; 0x40
 8008452:	4b95      	ldr	r3, [pc, #596]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800845a:	623b      	str	r3, [r7, #32]
 800845c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800845e:	2300      	movs	r3, #0
 8008460:	61fb      	str	r3, [r7, #28]
 8008462:	4b91      	ldr	r3, [pc, #580]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	4a90      	ldr	r2, [pc, #576]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008468:	f043 0304 	orr.w	r3, r3, #4
 800846c:	6313      	str	r3, [r2, #48]	; 0x30
 800846e:	4b8e      	ldr	r3, [pc, #568]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008472:	f003 0304 	and.w	r3, r3, #4
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STMUART4_TX_ESPUART1RX_Pin|STMUART4_RX_ESPUART1TX_Pin;
 800847a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800847e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008480:	2302      	movs	r3, #2
 8008482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008484:	2300      	movs	r3, #0
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008488:	2303      	movs	r3, #3
 800848a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800848c:	2308      	movs	r3, #8
 800848e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008494:	4619      	mov	r1, r3
 8008496:	4885      	ldr	r0, [pc, #532]	; (80086ac <HAL_UART_MspInit+0x28c>)
 8008498:	f001 fc82 	bl	8009da0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800849c:	e0fe      	b.n	800869c <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a83      	ldr	r2, [pc, #524]	; (80086b0 <HAL_UART_MspInit+0x290>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d162      	bne.n	800856e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80084a8:	2300      	movs	r3, #0
 80084aa:	61bb      	str	r3, [r7, #24]
 80084ac:	4b7e      	ldr	r3, [pc, #504]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80084ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084b0:	4a7d      	ldr	r2, [pc, #500]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80084b2:	f043 0310 	orr.w	r3, r3, #16
 80084b6:	6453      	str	r3, [r2, #68]	; 0x44
 80084b8:	4b7b      	ldr	r3, [pc, #492]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80084ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084bc:	f003 0310 	and.w	r3, r3, #16
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c4:	2300      	movs	r3, #0
 80084c6:	617b      	str	r3, [r7, #20]
 80084c8:	4b77      	ldr	r3, [pc, #476]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	4a76      	ldr	r2, [pc, #472]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80084ce:	f043 0302 	orr.w	r3, r3, #2
 80084d2:	6313      	str	r3, [r2, #48]	; 0x30
 80084d4:	4b74      	ldr	r3, [pc, #464]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80084d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d8:	f003 0302 	and.w	r3, r3, #2
 80084dc:	617b      	str	r3, [r7, #20]
 80084de:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART1_TX_STLINK_RX_Pin|UART1_RX_STLINK_TX_Pin;
 80084e0:	23c0      	movs	r3, #192	; 0xc0
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084e4:	2302      	movs	r3, #2
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084ec:	2303      	movs	r3, #3
 80084ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80084f0:	2307      	movs	r3, #7
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f8:	4619      	mov	r1, r3
 80084fa:	486e      	ldr	r0, [pc, #440]	; (80086b4 <HAL_UART_MspInit+0x294>)
 80084fc:	f001 fc50 	bl	8009da0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008500:	4b6d      	ldr	r3, [pc, #436]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008502:	4a6e      	ldr	r2, [pc, #440]	; (80086bc <HAL_UART_MspInit+0x29c>)
 8008504:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008506:	4b6c      	ldr	r3, [pc, #432]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800850c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800850e:	4b6a      	ldr	r3, [pc, #424]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008510:	2200      	movs	r2, #0
 8008512:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008514:	4b68      	ldr	r3, [pc, #416]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008516:	2200      	movs	r2, #0
 8008518:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800851a:	4b67      	ldr	r3, [pc, #412]	; (80086b8 <HAL_UART_MspInit+0x298>)
 800851c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008520:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008522:	4b65      	ldr	r3, [pc, #404]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008524:	2200      	movs	r2, #0
 8008526:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008528:	4b63      	ldr	r3, [pc, #396]	; (80086b8 <HAL_UART_MspInit+0x298>)
 800852a:	2200      	movs	r2, #0
 800852c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800852e:	4b62      	ldr	r3, [pc, #392]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008530:	2200      	movs	r2, #0
 8008532:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008534:	4b60      	ldr	r3, [pc, #384]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008536:	2200      	movs	r2, #0
 8008538:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800853a:	4b5f      	ldr	r3, [pc, #380]	; (80086b8 <HAL_UART_MspInit+0x298>)
 800853c:	2200      	movs	r2, #0
 800853e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008540:	485d      	ldr	r0, [pc, #372]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008542:	f000 fe93 	bl	800926c <HAL_DMA_Init>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800854c:	f7fe ff04 	bl	8007358 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a59      	ldr	r2, [pc, #356]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008554:	63da      	str	r2, [r3, #60]	; 0x3c
 8008556:	4a58      	ldr	r2, [pc, #352]	; (80086b8 <HAL_UART_MspInit+0x298>)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800855c:	2200      	movs	r2, #0
 800855e:	2105      	movs	r1, #5
 8008560:	2025      	movs	r0, #37	; 0x25
 8008562:	f000 fe59 	bl	8009218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008566:	2025      	movs	r0, #37	; 0x25
 8008568:	f000 fe72 	bl	8009250 <HAL_NVIC_EnableIRQ>
}
 800856c:	e096      	b.n	800869c <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART3)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a53      	ldr	r2, [pc, #332]	; (80086c0 <HAL_UART_MspInit+0x2a0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	f040 8091 	bne.w	800869c <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	4b4a      	ldr	r3, [pc, #296]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	4a49      	ldr	r2, [pc, #292]	; (80086a8 <HAL_UART_MspInit+0x288>)
 8008584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008588:	6413      	str	r3, [r2, #64]	; 0x40
 800858a:	4b47      	ldr	r3, [pc, #284]	; (80086a8 <HAL_UART_MspInit+0x288>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008596:	2300      	movs	r3, #0
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	4b43      	ldr	r3, [pc, #268]	; (80086a8 <HAL_UART_MspInit+0x288>)
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	4a42      	ldr	r2, [pc, #264]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80085a0:	f043 0302 	orr.w	r3, r3, #2
 80085a4:	6313      	str	r3, [r2, #48]	; 0x30
 80085a6:	4b40      	ldr	r3, [pc, #256]	; (80086a8 <HAL_UART_MspInit+0x288>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3TX_FC1RX_Pin|UART3RX_FC1TX_Pin;
 80085b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80085b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085b8:	2302      	movs	r3, #2
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085bc:	2300      	movs	r3, #0
 80085be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085c0:	2303      	movs	r3, #3
 80085c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80085c4:	2307      	movs	r3, #7
 80085c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80085c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085cc:	4619      	mov	r1, r3
 80085ce:	4839      	ldr	r0, [pc, #228]	; (80086b4 <HAL_UART_MspInit+0x294>)
 80085d0:	f001 fbe6 	bl	8009da0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80085d4:	4b3b      	ldr	r3, [pc, #236]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085d6:	4a3c      	ldr	r2, [pc, #240]	; (80086c8 <HAL_UART_MspInit+0x2a8>)
 80085d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80085da:	4b3a      	ldr	r3, [pc, #232]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80085e2:	4b38      	ldr	r3, [pc, #224]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085e4:	2200      	movs	r2, #0
 80085e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80085e8:	4b36      	ldr	r3, [pc, #216]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80085ee:	4b35      	ldr	r3, [pc, #212]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80085f6:	4b33      	ldr	r3, [pc, #204]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085fc:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 80085fe:	2200      	movs	r2, #0
 8008600:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8008602:	4b30      	ldr	r3, [pc, #192]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 8008604:	2200      	movs	r2, #0
 8008606:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008608:	4b2e      	ldr	r3, [pc, #184]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 800860a:	2200      	movs	r2, #0
 800860c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800860e:	4b2d      	ldr	r3, [pc, #180]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 8008610:	2200      	movs	r2, #0
 8008612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008614:	482b      	ldr	r0, [pc, #172]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 8008616:	f000 fe29 	bl	800926c <HAL_DMA_Init>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8008620:	f7fe fe9a 	bl	8007358 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a27      	ldr	r2, [pc, #156]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 8008628:	63da      	str	r2, [r3, #60]	; 0x3c
 800862a:	4a26      	ldr	r2, [pc, #152]	; (80086c4 <HAL_UART_MspInit+0x2a4>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008630:	4b26      	ldr	r3, [pc, #152]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008632:	4a27      	ldr	r2, [pc, #156]	; (80086d0 <HAL_UART_MspInit+0x2b0>)
 8008634:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8008636:	4b25      	ldr	r3, [pc, #148]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008638:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800863c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800863e:	4b23      	ldr	r3, [pc, #140]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008640:	2240      	movs	r2, #64	; 0x40
 8008642:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008644:	4b21      	ldr	r3, [pc, #132]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008646:	2200      	movs	r2, #0
 8008648:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800864a:	4b20      	ldr	r3, [pc, #128]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 800864c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008650:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008652:	4b1e      	ldr	r3, [pc, #120]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008654:	2200      	movs	r2, #0
 8008656:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008658:	4b1c      	ldr	r3, [pc, #112]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 800865a:	2200      	movs	r2, #0
 800865c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800865e:	4b1b      	ldr	r3, [pc, #108]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008660:	2200      	movs	r2, #0
 8008662:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008664:	4b19      	ldr	r3, [pc, #100]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008666:	2200      	movs	r2, #0
 8008668:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800866a:	4b18      	ldr	r3, [pc, #96]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 800866c:	2200      	movs	r2, #0
 800866e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008670:	4816      	ldr	r0, [pc, #88]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008672:	f000 fdfb 	bl	800926c <HAL_DMA_Init>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <HAL_UART_MspInit+0x260>
      Error_Handler();
 800867c:	f7fe fe6c 	bl	8007358 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a12      	ldr	r2, [pc, #72]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008684:	639a      	str	r2, [r3, #56]	; 0x38
 8008686:	4a11      	ldr	r2, [pc, #68]	; (80086cc <HAL_UART_MspInit+0x2ac>)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800868c:	2200      	movs	r2, #0
 800868e:	2105      	movs	r1, #5
 8008690:	2027      	movs	r0, #39	; 0x27
 8008692:	f000 fdc1 	bl	8009218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008696:	2027      	movs	r0, #39	; 0x27
 8008698:	f000 fdda 	bl	8009250 <HAL_NVIC_EnableIRQ>
}
 800869c:	bf00      	nop
 800869e:	3738      	adds	r7, #56	; 0x38
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	40004c00 	.word	0x40004c00
 80086a8:	40023800 	.word	0x40023800
 80086ac:	40020800 	.word	0x40020800
 80086b0:	40011000 	.word	0x40011000
 80086b4:	40020400 	.word	0x40020400
 80086b8:	20002f6c 	.word	0x20002f6c
 80086bc:	40026440 	.word	0x40026440
 80086c0:	40004800 	.word	0x40004800
 80086c4:	20002fcc 	.word	0x20002fcc
 80086c8:	40026028 	.word	0x40026028
 80086cc:	2000302c 	.word	0x2000302c
 80086d0:	40026058 	.word	0x40026058

080086d4 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086d8:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80086da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086de:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80086e2:	2208      	movs	r2, #8
 80086e4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80086f4:	2202      	movs	r2, #2
 80086f6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086fe:	4805      	ldr	r0, [pc, #20]	; (8008714 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8008700:	f001 fd34 	bl	800a16c <HAL_HCD_Init>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800870a:	f7fe fe25 	bl	8007358 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	2000308c 	.word	0x2000308c

08008718 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008720:	f107 0314 	add.w	r3, r7, #20
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	605a      	str	r2, [r3, #4]
 800872a:	609a      	str	r2, [r3, #8]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008738:	d132      	bne.n	80087a0 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800873a:	2300      	movs	r3, #0
 800873c:	613b      	str	r3, [r7, #16]
 800873e:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 8008744:	f043 0301 	orr.w	r3, r3, #1
 8008748:	6313      	str	r3, [r2, #48]	; 0x30
 800874a:	4b17      	ldr	r3, [pc, #92]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 800874c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	613b      	str	r3, [r7, #16]
 8008754:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008756:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800875a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800875c:	2302      	movs	r3, #2
 800875e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008764:	2303      	movs	r3, #3
 8008766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008768:	230a      	movs	r3, #10
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4619      	mov	r1, r3
 8008772:	480e      	ldr	r0, [pc, #56]	; (80087ac <HAL_HCD_MspInit+0x94>)
 8008774:	f001 fb14 	bl	8009da0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008778:	4b0b      	ldr	r3, [pc, #44]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 800877a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877c:	4a0a      	ldr	r2, [pc, #40]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 800877e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008782:	6353      	str	r3, [r2, #52]	; 0x34
 8008784:	2300      	movs	r3, #0
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 800878a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878c:	4a06      	ldr	r2, [pc, #24]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 800878e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008792:	6453      	str	r3, [r2, #68]	; 0x44
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <HAL_HCD_MspInit+0x90>)
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087a0:	bf00      	nop
 80087a2:	3728      	adds	r7, #40	; 0x28
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40020000 	.word	0x40020000

080087b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80087b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80087b4:	f7ff f952 	bl	8007a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80087b8:	480c      	ldr	r0, [pc, #48]	; (80087ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80087ba:	490d      	ldr	r1, [pc, #52]	; (80087f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80087bc:	4a0d      	ldr	r2, [pc, #52]	; (80087f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80087be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087c0:	e002      	b.n	80087c8 <LoopCopyDataInit>

080087c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087c6:	3304      	adds	r3, #4

080087c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087cc:	d3f9      	bcc.n	80087c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087ce:	4a0a      	ldr	r2, [pc, #40]	; (80087f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80087d0:	4c0a      	ldr	r4, [pc, #40]	; (80087fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80087d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087d4:	e001      	b.n	80087da <LoopFillZerobss>

080087d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087d8:	3204      	adds	r2, #4

080087da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087dc:	d3fb      	bcc.n	80087d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80087de:	f00e f811 	bl	8016804 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087e2:	f7fe fbd9 	bl	8006f98 <main>
  bx  lr    
 80087e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80087e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80087ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80087f0:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 80087f4:	0801adc0 	.word	0x0801adc0
  ldr r2, =_sbss
 80087f8:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 80087fc:	200073ac 	.word	0x200073ac

08008800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008800:	e7fe      	b.n	8008800 <ADC_IRQHandler>
	...

08008804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008808:	4b0e      	ldr	r3, [pc, #56]	; (8008844 <HAL_Init+0x40>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a0d      	ldr	r2, [pc, #52]	; (8008844 <HAL_Init+0x40>)
 800880e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008814:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <HAL_Init+0x40>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a0a      	ldr	r2, [pc, #40]	; (8008844 <HAL_Init+0x40>)
 800881a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800881e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008820:	4b08      	ldr	r3, [pc, #32]	; (8008844 <HAL_Init+0x40>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a07      	ldr	r2, [pc, #28]	; (8008844 <HAL_Init+0x40>)
 8008826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800882c:	2003      	movs	r0, #3
 800882e:	f000 fce8 	bl	8009202 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008832:	200f      	movs	r0, #15
 8008834:	f7fe ff08 	bl	8007648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008838:	f7fe feca 	bl	80075d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40023c00 	.word	0x40023c00

08008848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return uwTick;
 800884c:	4b03      	ldr	r3, [pc, #12]	; (800885c <HAL_GetTick+0x14>)
 800884e:	681b      	ldr	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	2000346c 	.word	0x2000346c

08008860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008868:	f7ff ffee 	bl	8008848 <HAL_GetTick>
 800886c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008878:	d005      	beq.n	8008886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800887a:	4b0a      	ldr	r3, [pc, #40]	; (80088a4 <HAL_Delay+0x44>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	461a      	mov	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008886:	bf00      	nop
 8008888:	f7ff ffde 	bl	8008848 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	429a      	cmp	r2, r3
 8008896:	d8f7      	bhi.n	8008888 <HAL_Delay+0x28>
  {
  }
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000150 	.word	0x20000150

080088a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e033      	b.n	8008926 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fd fc1a 	bl	8006100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	f003 0310 	and.w	r3, r3, #16
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d118      	bne.n	8008918 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80088ee:	f023 0302 	bic.w	r3, r3, #2
 80088f2:	f043 0202 	orr.w	r2, r3, #2
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fad8 	bl	8008eb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	f023 0303 	bic.w	r3, r3, #3
 800890e:	f043 0201 	orr.w	r2, r3, #1
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	641a      	str	r2, [r3, #64]	; 0x40
 8008916:	e001      	b.n	800891c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8008938:	2300      	movs	r3, #0
 800893a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_ADC_Start+0x1a>
 8008946:	2302      	movs	r3, #2
 8008948:	e0b2      	b.n	8008ab0 <HAL_ADC_Start+0x180>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b01      	cmp	r3, #1
 800895e:	d018      	beq.n	8008992 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008970:	4b52      	ldr	r3, [pc, #328]	; (8008abc <HAL_ADC_Start+0x18c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a52      	ldr	r2, [pc, #328]	; (8008ac0 <HAL_ADC_Start+0x190>)
 8008976:	fba2 2303 	umull	r2, r3, r2, r3
 800897a:	0c9a      	lsrs	r2, r3, #18
 800897c:	4613      	mov	r3, r2
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	4413      	add	r3, r2
 8008982:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008984:	e002      	b.n	800898c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1f9      	bne.n	8008986 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f003 0301 	and.w	r3, r3, #1
 800899c:	2b01      	cmp	r3, #1
 800899e:	d17a      	bne.n	8008a96 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d007      	beq.n	80089d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80089ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089de:	d106      	bne.n	80089ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e4:	f023 0206 	bic.w	r2, r3, #6
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	645a      	str	r2, [r3, #68]	; 0x44
 80089ec:	e002      	b.n	80089f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80089fc:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <HAL_ADC_Start+0x194>)
 80089fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008a08:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f003 031f 	and.w	r3, r3, #31
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d12a      	bne.n	8008a6c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a2b      	ldr	r2, [pc, #172]	; (8008ac8 <HAL_ADC_Start+0x198>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d015      	beq.n	8008a4c <HAL_ADC_Start+0x11c>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a29      	ldr	r2, [pc, #164]	; (8008acc <HAL_ADC_Start+0x19c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d105      	bne.n	8008a36 <HAL_ADC_Start+0x106>
 8008a2a:	4b26      	ldr	r3, [pc, #152]	; (8008ac4 <HAL_ADC_Start+0x194>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a25      	ldr	r2, [pc, #148]	; (8008ad0 <HAL_ADC_Start+0x1a0>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d136      	bne.n	8008aae <HAL_ADC_Start+0x17e>
 8008a40:	4b20      	ldr	r3, [pc, #128]	; (8008ac4 <HAL_ADC_Start+0x194>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f003 0310 	and.w	r3, r3, #16
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d130      	bne.n	8008aae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d129      	bne.n	8008aae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689a      	ldr	r2, [r3, #8]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a68:	609a      	str	r2, [r3, #8]
 8008a6a:	e020      	b.n	8008aae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a15      	ldr	r2, [pc, #84]	; (8008ac8 <HAL_ADC_Start+0x198>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d11b      	bne.n	8008aae <HAL_ADC_Start+0x17e>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d114      	bne.n	8008aae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	e00b      	b.n	8008aae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	f043 0210 	orr.w	r2, r3, #16
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa6:	f043 0201 	orr.w	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008aae:	2300      	movs	r3, #0
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	20000148 	.word	0x20000148
 8008ac0:	431bde83 	.word	0x431bde83
 8008ac4:	40012300 	.word	0x40012300
 8008ac8:	40012000 	.word	0x40012000
 8008acc:	40012100 	.word	0x40012100
 8008ad0:	40012200 	.word	0x40012200

08008ad4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_ADC_Stop+0x16>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e021      	b.n	8008b2e <HAL_ADC_Stop+0x5a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689a      	ldr	r2, [r3, #8]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d109      	bne.n	8008b24 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b18:	f023 0301 	bic.w	r3, r3, #1
 8008b1c:	f043 0201 	orr.w	r2, r3, #1
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b56:	d113      	bne.n	8008b80 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b66:	d10b      	bne.n	8008b80 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	f043 0220 	orr.w	r2, r3, #32
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e063      	b.n	8008c48 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b80:	f7ff fe62 	bl	8008848 <HAL_GetTick>
 8008b84:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008b86:	e021      	b.n	8008bcc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d01d      	beq.n	8008bcc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <HAL_ADC_PollForConversion+0x6c>
 8008b96:	f7ff fe57 	bl	8008848 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d212      	bcs.n	8008bcc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0302 	and.w	r3, r3, #2
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d00b      	beq.n	8008bcc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb8:	f043 0204 	orr.w	r2, r3, #4
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e03d      	b.n	8008c48 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0302 	and.w	r3, r3, #2
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d1d6      	bne.n	8008b88 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f06f 0212 	mvn.w	r2, #18
 8008be2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d123      	bne.n	8008c46 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d11f      	bne.n	8008c46 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d006      	beq.n	8008c22 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d111      	bne.n	8008c46 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3e:	f043 0201 	orr.w	r2, r3, #1
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008c46:	2300      	movs	r3, #0
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_ADC_ConfigChannel+0x1c>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e105      	b.n	8008e94 <HAL_ADC_ConfigChannel+0x228>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b09      	cmp	r3, #9
 8008c96:	d925      	bls.n	8008ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68d9      	ldr	r1, [r3, #12]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	4413      	add	r3, r2
 8008cac:	3b1e      	subs	r3, #30
 8008cae:	2207      	movs	r2, #7
 8008cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb4:	43da      	mvns	r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	400a      	ands	r2, r1
 8008cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68d9      	ldr	r1, [r3, #12]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4618      	mov	r0, r3
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	4403      	add	r3, r0
 8008cd6:	3b1e      	subs	r3, #30
 8008cd8:	409a      	lsls	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	e022      	b.n	8008d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6919      	ldr	r1, [r3, #16]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	4413      	add	r3, r2
 8008cf8:	2207      	movs	r2, #7
 8008cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfe:	43da      	mvns	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	400a      	ands	r2, r1
 8008d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	6919      	ldr	r1, [r3, #16]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	689a      	ldr	r2, [r3, #8]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	4618      	mov	r0, r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	4403      	add	r3, r0
 8008d20:	409a      	lsls	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	430a      	orrs	r2, r1
 8008d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b06      	cmp	r3, #6
 8008d30:	d824      	bhi.n	8008d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	3b05      	subs	r3, #5
 8008d44:	221f      	movs	r2, #31
 8008d46:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4a:	43da      	mvns	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	400a      	ands	r2, r1
 8008d52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	4618      	mov	r0, r3
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3b05      	subs	r3, #5
 8008d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	635a      	str	r2, [r3, #52]	; 0x34
 8008d7a:	e04c      	b.n	8008e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2b0c      	cmp	r3, #12
 8008d82:	d824      	bhi.n	8008dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	685a      	ldr	r2, [r3, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	3b23      	subs	r3, #35	; 0x23
 8008d96:	221f      	movs	r2, #31
 8008d98:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9c:	43da      	mvns	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	400a      	ands	r2, r1
 8008da4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4618      	mov	r0, r3
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3b23      	subs	r3, #35	; 0x23
 8008dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	631a      	str	r2, [r3, #48]	; 0x30
 8008dcc:	e023      	b.n	8008e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	3b41      	subs	r3, #65	; 0x41
 8008de0:	221f      	movs	r2, #31
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43da      	mvns	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	400a      	ands	r2, r1
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	3b41      	subs	r3, #65	; 0x41
 8008e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	430a      	orrs	r2, r1
 8008e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008e16:	4b22      	ldr	r3, [pc, #136]	; (8008ea0 <HAL_ADC_ConfigChannel+0x234>)
 8008e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a21      	ldr	r2, [pc, #132]	; (8008ea4 <HAL_ADC_ConfigChannel+0x238>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d109      	bne.n	8008e38 <HAL_ADC_ConfigChannel+0x1cc>
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b12      	cmp	r3, #18
 8008e2a:	d105      	bne.n	8008e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a19      	ldr	r2, [pc, #100]	; (8008ea4 <HAL_ADC_ConfigChannel+0x238>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d123      	bne.n	8008e8a <HAL_ADC_ConfigChannel+0x21e>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b10      	cmp	r3, #16
 8008e48:	d003      	beq.n	8008e52 <HAL_ADC_ConfigChannel+0x1e6>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b11      	cmp	r3, #17
 8008e50:	d11b      	bne.n	8008e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d111      	bne.n	8008e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008e66:	4b10      	ldr	r3, [pc, #64]	; (8008ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a10      	ldr	r2, [pc, #64]	; (8008eac <HAL_ADC_ConfigChannel+0x240>)
 8008e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e70:	0c9a      	lsrs	r2, r3, #18
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008e7c:	e002      	b.n	8008e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1f9      	bne.n	8008e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3714      	adds	r7, #20
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr
 8008ea0:	40012300 	.word	0x40012300
 8008ea4:	40012000 	.word	0x40012000
 8008ea8:	20000148 	.word	0x20000148
 8008eac:	431bde83 	.word	0x431bde83

08008eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008eb8:	4b79      	ldr	r3, [pc, #484]	; (80090a0 <ADC_Init+0x1f0>)
 8008eba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6859      	ldr	r1, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	021a      	lsls	r2, r3, #8
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6859      	ldr	r1, [r3, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6899      	ldr	r1, [r3, #8]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	68da      	ldr	r2, [r3, #12]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	4a58      	ldr	r2, [pc, #352]	; (80090a4 <ADC_Init+0x1f4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d022      	beq.n	8008f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6899      	ldr	r1, [r3, #8]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6899      	ldr	r1, [r3, #8]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	e00f      	b.n	8008fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689a      	ldr	r2, [r3, #8]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008fac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0202 	bic.w	r2, r2, #2
 8008fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6899      	ldr	r1, [r3, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7e1b      	ldrb	r3, [r3, #24]
 8008fc8:	005a      	lsls	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01b      	beq.n	8009014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6859      	ldr	r1, [r3, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	3b01      	subs	r3, #1
 8009008:	035a      	lsls	r2, r3, #13
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	605a      	str	r2, [r3, #4]
 8009012:	e007      	b.n	8009024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009022:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009032:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	3b01      	subs	r3, #1
 8009040:	051a      	lsls	r2, r3, #20
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	430a      	orrs	r2, r1
 8009048:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6899      	ldr	r1, [r3, #8]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009066:	025a      	lsls	r2, r3, #9
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800907e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6899      	ldr	r1, [r3, #8]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	029a      	lsls	r2, r3, #10
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	430a      	orrs	r2, r1
 8009092:	609a      	str	r2, [r3, #8]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr
 80090a0:	40012300 	.word	0x40012300
 80090a4:	0f000001 	.word	0x0f000001

080090a8 <__NVIC_SetPriorityGrouping>:
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <__NVIC_SetPriorityGrouping+0x44>)
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090be:	68ba      	ldr	r2, [r7, #8]
 80090c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090c4:	4013      	ands	r3, r2
 80090c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090da:	4a04      	ldr	r2, [pc, #16]	; (80090ec <__NVIC_SetPriorityGrouping+0x44>)
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	60d3      	str	r3, [r2, #12]
}
 80090e0:	bf00      	nop
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr
 80090ec:	e000ed00 	.word	0xe000ed00

080090f0 <__NVIC_GetPriorityGrouping>:
{
 80090f0:	b480      	push	{r7}
 80090f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <__NVIC_GetPriorityGrouping+0x18>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	0a1b      	lsrs	r3, r3, #8
 80090fa:	f003 0307 	and.w	r3, r3, #7
}
 80090fe:	4618      	mov	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	e000ed00 	.word	0xe000ed00

0800910c <__NVIC_EnableIRQ>:
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800911a:	2b00      	cmp	r3, #0
 800911c:	db0b      	blt.n	8009136 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	f003 021f 	and.w	r2, r3, #31
 8009124:	4907      	ldr	r1, [pc, #28]	; (8009144 <__NVIC_EnableIRQ+0x38>)
 8009126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800912a:	095b      	lsrs	r3, r3, #5
 800912c:	2001      	movs	r0, #1
 800912e:	fa00 f202 	lsl.w	r2, r0, r2
 8009132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	e000e100 	.word	0xe000e100

08009148 <__NVIC_SetPriority>:
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	6039      	str	r1, [r7, #0]
 8009152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009158:	2b00      	cmp	r3, #0
 800915a:	db0a      	blt.n	8009172 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	b2da      	uxtb	r2, r3
 8009160:	490c      	ldr	r1, [pc, #48]	; (8009194 <__NVIC_SetPriority+0x4c>)
 8009162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009166:	0112      	lsls	r2, r2, #4
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	440b      	add	r3, r1
 800916c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009170:	e00a      	b.n	8009188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	b2da      	uxtb	r2, r3
 8009176:	4908      	ldr	r1, [pc, #32]	; (8009198 <__NVIC_SetPriority+0x50>)
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	f003 030f 	and.w	r3, r3, #15
 800917e:	3b04      	subs	r3, #4
 8009180:	0112      	lsls	r2, r2, #4
 8009182:	b2d2      	uxtb	r2, r2
 8009184:	440b      	add	r3, r1
 8009186:	761a      	strb	r2, [r3, #24]
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	e000e100 	.word	0xe000e100
 8009198:	e000ed00 	.word	0xe000ed00

0800919c <NVIC_EncodePriority>:
{
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	; 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	f1c3 0307 	rsb	r3, r3, #7
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	bf28      	it	cs
 80091ba:	2304      	movcs	r3, #4
 80091bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	3304      	adds	r3, #4
 80091c2:	2b06      	cmp	r3, #6
 80091c4:	d902      	bls.n	80091cc <NVIC_EncodePriority+0x30>
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	3b03      	subs	r3, #3
 80091ca:	e000      	b.n	80091ce <NVIC_EncodePriority+0x32>
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43da      	mvns	r2, r3
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	401a      	ands	r2, r3
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091e4:	f04f 31ff 	mov.w	r1, #4294967295
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	fa01 f303 	lsl.w	r3, r1, r3
 80091ee:	43d9      	mvns	r1, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091f4:	4313      	orrs	r3, r2
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3724      	adds	r7, #36	; 0x24
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b082      	sub	sp, #8
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ff4c 	bl	80090a8 <__NVIC_SetPriorityGrouping>
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009218:	b580      	push	{r7, lr}
 800921a:	b086      	sub	sp, #24
 800921c:	af00      	add	r7, sp, #0
 800921e:	4603      	mov	r3, r0
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009226:	2300      	movs	r3, #0
 8009228:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800922a:	f7ff ff61 	bl	80090f0 <__NVIC_GetPriorityGrouping>
 800922e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	68b9      	ldr	r1, [r7, #8]
 8009234:	6978      	ldr	r0, [r7, #20]
 8009236:	f7ff ffb1 	bl	800919c <NVIC_EncodePriority>
 800923a:	4602      	mov	r2, r0
 800923c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff ff80 	bl	8009148 <__NVIC_SetPriority>
}
 8009248:	bf00      	nop
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800925a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff ff54 	bl	800910c <__NVIC_EnableIRQ>
}
 8009264:	bf00      	nop
 8009266:	3708      	adds	r7, #8
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b086      	sub	sp, #24
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009278:	f7ff fae6 	bl	8008848 <HAL_GetTick>
 800927c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e099      	b.n	80093bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0201 	bic.w	r2, r2, #1
 80092a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092a8:	e00f      	b.n	80092ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092aa:	f7ff facd 	bl	8008848 <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b05      	cmp	r3, #5
 80092b6:	d908      	bls.n	80092ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2220      	movs	r2, #32
 80092bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2203      	movs	r2, #3
 80092c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e078      	b.n	80093bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 0301 	and.w	r3, r3, #1
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e8      	bne.n	80092aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4b38      	ldr	r3, [pc, #224]	; (80093c4 <HAL_DMA_Init+0x158>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80092f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009302:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800930e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	4313      	orrs	r3, r2
 800931a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	2b04      	cmp	r3, #4
 8009322:	d107      	bne.n	8009334 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800932c:	4313      	orrs	r3, r2
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	4313      	orrs	r3, r2
 8009332:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f023 0307 	bic.w	r3, r3, #7
 800934a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935a:	2b04      	cmp	r3, #4
 800935c:	d117      	bne.n	800938e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00e      	beq.n	800938e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fb01 	bl	8009978 <DMA_CheckFifoParam>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d008      	beq.n	800938e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2240      	movs	r2, #64	; 0x40
 8009380:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800938a:	2301      	movs	r3, #1
 800938c:	e016      	b.n	80093bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fab8 	bl	800990c <DMA_CalcBaseAndBitshift>
 800939c:	4603      	mov	r3, r0
 800939e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a4:	223f      	movs	r2, #63	; 0x3f
 80093a6:	409a      	lsls	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3718      	adds	r7, #24
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	f010803f 	.word	0xf010803f

080093c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_DMA_Start_IT+0x26>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e040      	b.n	8009470 <HAL_DMA_Start_IT+0xa8>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d12f      	bne.n	8009462 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2202      	movs	r2, #2
 8009406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	68b9      	ldr	r1, [r7, #8]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 fa4a 	bl	80098b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009420:	223f      	movs	r2, #63	; 0x3f
 8009422:	409a      	lsls	r2, r3
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f042 0216 	orr.w	r2, r2, #22
 8009436:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0208 	orr.w	r2, r2, #8
 800944e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0201 	orr.w	r2, r2, #1
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	e005      	b.n	800946e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800946a:	2302      	movs	r3, #2
 800946c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3718      	adds	r7, #24
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009484:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8009486:	f7ff f9df 	bl	8008848 <HAL_GetTick>
 800948a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d008      	beq.n	80094aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2280      	movs	r2, #128	; 0x80
 800949c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e052      	b.n	8009550 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0216 	bic.w	r2, r2, #22
 80094b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	695a      	ldr	r2, [r3, #20]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d103      	bne.n	80094da <HAL_DMA_Abort+0x62>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d007      	beq.n	80094ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0208 	bic.w	r2, r2, #8
 80094e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0201 	bic.w	r2, r2, #1
 80094f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80094fa:	e013      	b.n	8009524 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80094fc:	f7ff f9a4 	bl	8008848 <HAL_GetTick>
 8009500:	4602      	mov	r2, r0
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	2b05      	cmp	r3, #5
 8009508:	d90c      	bls.n	8009524 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2203      	movs	r2, #3
 8009514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e015      	b.n	8009550 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1e4      	bne.n	80094fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009536:	223f      	movs	r2, #63	; 0x3f
 8009538:	409a      	lsls	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800954e:	2300      	movs	r3, #0
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b02      	cmp	r3, #2
 800956a:	d004      	beq.n	8009576 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2280      	movs	r2, #128	; 0x80
 8009570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e00c      	b.n	8009590 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2205      	movs	r2, #5
 800957a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 0201 	bic.w	r2, r2, #1
 800958c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80095a8:	4b8e      	ldr	r3, [pc, #568]	; (80097e4 <HAL_DMA_IRQHandler+0x248>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a8e      	ldr	r2, [pc, #568]	; (80097e8 <HAL_DMA_IRQHandler+0x24c>)
 80095ae:	fba2 2303 	umull	r2, r3, r2, r3
 80095b2:	0a9b      	lsrs	r3, r3, #10
 80095b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c6:	2208      	movs	r2, #8
 80095c8:	409a      	lsls	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4013      	ands	r3, r2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d01a      	beq.n	8009608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0304 	and.w	r3, r3, #4
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d013      	beq.n	8009608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0204 	bic.w	r2, r2, #4
 80095ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f4:	2208      	movs	r2, #8
 80095f6:	409a      	lsls	r2, r3
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009600:	f043 0201 	orr.w	r2, r3, #1
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800960c:	2201      	movs	r2, #1
 800960e:	409a      	lsls	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4013      	ands	r3, r2
 8009614:	2b00      	cmp	r3, #0
 8009616:	d012      	beq.n	800963e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00b      	beq.n	800963e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800962a:	2201      	movs	r2, #1
 800962c:	409a      	lsls	r2, r3
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009636:	f043 0202 	orr.w	r2, r3, #2
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009642:	2204      	movs	r2, #4
 8009644:	409a      	lsls	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4013      	ands	r3, r2
 800964a:	2b00      	cmp	r3, #0
 800964c:	d012      	beq.n	8009674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009660:	2204      	movs	r2, #4
 8009662:	409a      	lsls	r2, r3
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800966c:	f043 0204 	orr.w	r2, r3, #4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009678:	2210      	movs	r2, #16
 800967a:	409a      	lsls	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4013      	ands	r3, r2
 8009680:	2b00      	cmp	r3, #0
 8009682:	d043      	beq.n	800970c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0308 	and.w	r3, r3, #8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d03c      	beq.n	800970c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009696:	2210      	movs	r2, #16
 8009698:	409a      	lsls	r2, r3
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d018      	beq.n	80096de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d108      	bne.n	80096cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d024      	beq.n	800970c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
 80096ca:	e01f      	b.n	800970c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01b      	beq.n	800970c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
 80096dc:	e016      	b.n	800970c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f022 0208 	bic.w	r2, r2, #8
 80096fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	2b00      	cmp	r3, #0
 8009702:	d003      	beq.n	800970c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009710:	2220      	movs	r2, #32
 8009712:	409a      	lsls	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 808f 	beq.w	800983c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 0310 	and.w	r3, r3, #16
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8087 	beq.w	800983c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009732:	2220      	movs	r2, #32
 8009734:	409a      	lsls	r2, r3
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b05      	cmp	r3, #5
 8009744:	d136      	bne.n	80097b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0216 	bic.w	r2, r2, #22
 8009754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	695a      	ldr	r2, [r3, #20]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	2b00      	cmp	r3, #0
 800976c:	d103      	bne.n	8009776 <HAL_DMA_IRQHandler+0x1da>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009772:	2b00      	cmp	r3, #0
 8009774:	d007      	beq.n	8009786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f022 0208 	bic.w	r2, r2, #8
 8009784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800978a:	223f      	movs	r2, #63	; 0x3f
 800978c:	409a      	lsls	r2, r3
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d07e      	beq.n	80098a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
        }
        return;
 80097b2:	e079      	b.n	80098a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01d      	beq.n	80097fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10d      	bne.n	80097ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d031      	beq.n	800983c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	e02c      	b.n	800983c <HAL_DMA_IRQHandler+0x2a0>
 80097e2:	bf00      	nop
 80097e4:	20000148 	.word	0x20000148
 80097e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d023      	beq.n	800983c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
 80097fc:	e01e      	b.n	800983c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10f      	bne.n	800982c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 0210 	bic.w	r2, r2, #16
 800981a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009840:	2b00      	cmp	r3, #0
 8009842:	d032      	beq.n	80098aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d022      	beq.n	8009896 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2205      	movs	r2, #5
 8009854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0201 	bic.w	r2, r2, #1
 8009866:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	3301      	adds	r3, #1
 800986c:	60bb      	str	r3, [r7, #8]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	429a      	cmp	r2, r3
 8009872:	d307      	bcc.n	8009884 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0301 	and.w	r3, r3, #1
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f2      	bne.n	8009868 <HAL_DMA_IRQHandler+0x2cc>
 8009882:	e000      	b.n	8009886 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009884:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
 80098a6:	e000      	b.n	80098aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80098a8:	bf00      	nop
    }
  }
}
 80098aa:	3718      	adds	r7, #24
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	2b40      	cmp	r3, #64	; 0x40
 80098dc:	d108      	bne.n	80098f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80098ee:	e007      	b.n	8009900 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	60da      	str	r2, [r3, #12]
}
 8009900:	bf00      	nop
 8009902:	3714      	adds	r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	3b10      	subs	r3, #16
 800991c:	4a14      	ldr	r2, [pc, #80]	; (8009970 <DMA_CalcBaseAndBitshift+0x64>)
 800991e:	fba2 2303 	umull	r2, r3, r2, r3
 8009922:	091b      	lsrs	r3, r3, #4
 8009924:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009926:	4a13      	ldr	r2, [pc, #76]	; (8009974 <DMA_CalcBaseAndBitshift+0x68>)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4413      	add	r3, r2
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d909      	bls.n	800994e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009942:	f023 0303 	bic.w	r3, r3, #3
 8009946:	1d1a      	adds	r2, r3, #4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	659a      	str	r2, [r3, #88]	; 0x58
 800994c:	e007      	b.n	800995e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009956:	f023 0303 	bic.w	r3, r3, #3
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009962:	4618      	mov	r0, r3
 8009964:	3714      	adds	r7, #20
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	aaaaaaab 	.word	0xaaaaaaab
 8009974:	0801a500 	.word	0x0801a500

08009978 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009988:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d11f      	bne.n	80099d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b03      	cmp	r3, #3
 8009996:	d856      	bhi.n	8009a46 <DMA_CheckFifoParam+0xce>
 8009998:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <DMA_CheckFifoParam+0x28>)
 800999a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999e:	bf00      	nop
 80099a0:	080099b1 	.word	0x080099b1
 80099a4:	080099c3 	.word	0x080099c3
 80099a8:	080099b1 	.word	0x080099b1
 80099ac:	08009a47 	.word	0x08009a47
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d046      	beq.n	8009a4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099c0:	e043      	b.n	8009a4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80099ca:	d140      	bne.n	8009a4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099d0:	e03d      	b.n	8009a4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099da:	d121      	bne.n	8009a20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d837      	bhi.n	8009a52 <DMA_CheckFifoParam+0xda>
 80099e2:	a201      	add	r2, pc, #4	; (adr r2, 80099e8 <DMA_CheckFifoParam+0x70>)
 80099e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e8:	080099f9 	.word	0x080099f9
 80099ec:	080099ff 	.word	0x080099ff
 80099f0:	080099f9 	.word	0x080099f9
 80099f4:	08009a11 	.word	0x08009a11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80099f8:	2301      	movs	r3, #1
 80099fa:	73fb      	strb	r3, [r7, #15]
      break;
 80099fc:	e030      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d025      	beq.n	8009a56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a0e:	e022      	b.n	8009a56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009a18:	d11f      	bne.n	8009a5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009a1e:	e01c      	b.n	8009a5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d903      	bls.n	8009a2e <DMA_CheckFifoParam+0xb6>
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d003      	beq.n	8009a34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009a2c:	e018      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	73fb      	strb	r3, [r7, #15]
      break;
 8009a32:	e015      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00e      	beq.n	8009a5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	73fb      	strb	r3, [r7, #15]
      break;
 8009a44:	e00b      	b.n	8009a5e <DMA_CheckFifoParam+0xe6>
      break;
 8009a46:	bf00      	nop
 8009a48:	e00a      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e008      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      break;
 8009a4e:	bf00      	nop
 8009a50:	e006      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      break;
 8009a52:	bf00      	nop
 8009a54:	e004      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      break;
 8009a56:	bf00      	nop
 8009a58:	e002      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      break;   
 8009a5a:	bf00      	nop
 8009a5c:	e000      	b.n	8009a60 <DMA_CheckFifoParam+0xe8>
      break;
 8009a5e:	bf00      	nop
    }
  } 
  
  return status; 
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop

08009a70 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009a7a:	4b4b      	ldr	r3, [pc, #300]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d020      	beq.n	8009ac8 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009a86:	4b49      	ldr	r3, [pc, #292]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d107      	bne.n	8009aa0 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009a90:	4b46      	ldr	r3, [pc, #280]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8009a96:	4b45      	ldr	r3, [pc, #276]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	e00b      	b.n	8009ab8 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009aa0:	4b42      	ldr	r3, [pc, #264]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d103      	bne.n	8009ab2 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8009aaa:	4b40      	ldr	r3, [pc, #256]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	607b      	str	r3, [r7, #4]
 8009ab0:	e002      	b.n	8009ab8 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8009ab2:	4b3e      	ldr	r3, [pc, #248]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8009ab8:	f000 f88e 	bl	8009bd8 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f881 	bl	8009bc4 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009ac2:	4b3a      	ldr	r3, [pc, #232]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009ac8:	4b37      	ldr	r3, [pc, #220]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0301 	and.w	r3, r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d04a      	beq.n	8009b6a <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009ad4:	4b34      	ldr	r3, [pc, #208]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009ada:	4b34      	ldr	r3, [pc, #208]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d12d      	bne.n	8009b40 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8009ae4:	4b31      	ldr	r3, [pc, #196]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	4a30      	ldr	r2, [pc, #192]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009aec:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8009aee:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d015      	beq.n	8009b22 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8009af6:	4b2d      	ldr	r3, [pc, #180]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f857 	bl	8009bb0 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8009b02:	4b2a      	ldr	r3, [pc, #168]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	3301      	adds	r3, #1
 8009b08:	4a28      	ldr	r2, [pc, #160]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b0a:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8009b0c:	4b27      	ldr	r3, [pc, #156]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8009b12:	4b26      	ldr	r3, [pc, #152]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b14:	7a1b      	ldrb	r3, [r3, #8]
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	4619      	mov	r1, r3
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f8b2 	bl	8009c84 <FLASH_Erase_Sector>
 8009b20:	e023      	b.n	8009b6a <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8009b22:	f04f 33ff 	mov.w	r3, #4294967295
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	4a20      	ldr	r2, [pc, #128]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009b2e:	4b1f      	ldr	r3, [pc, #124]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009b34:	f000 f8ee 	bl	8009d14 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f839 	bl	8009bb0 <HAL_FLASH_EndOfOperationCallback>
 8009b3e:	e014      	b.n	8009b6a <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009b40:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d107      	bne.n	8009b5a <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009b4a:	f000 f8e3 	bl	8009d14 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009b4e:	4b17      	ldr	r3, [pc, #92]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 f82c 	bl	8009bb0 <HAL_FLASH_EndOfOperationCallback>
 8009b58:	e004      	b.n	8009b64 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009b5a:	4b14      	ldr	r3, [pc, #80]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b5c:	695b      	ldr	r3, [r3, #20]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f826 	bl	8009bb0 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009b64:	4b11      	ldr	r3, [pc, #68]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009b6a:	4b10      	ldr	r3, [pc, #64]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d114      	bne.n	8009b9e <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009b74:	4b0c      	ldr	r3, [pc, #48]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	4a0b      	ldr	r2, [pc, #44]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009b7e:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009b80:	4b09      	ldr	r3, [pc, #36]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	4a08      	ldr	r2, [pc, #32]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009b86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b8a:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	4a05      	ldr	r2, [pc, #20]	; (8009ba8 <HAL_FLASH_IRQHandler+0x138>)
 8009b92:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b96:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009b98:	4b04      	ldr	r3, [pc, #16]	; (8009bac <HAL_FLASH_IRQHandler+0x13c>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	761a      	strb	r2, [r3, #24]
  }
}
 8009b9e:	bf00      	nop
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	40023c00 	.word	0x40023c00
 8009bac:	20003470 	.word	0x20003470

08009bb0 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009bdc:	4b27      	ldr	r3, [pc, #156]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	f003 0310 	and.w	r3, r3, #16
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d008      	beq.n	8009bfa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009be8:	4b25      	ldr	r3, [pc, #148]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	f043 0310 	orr.w	r3, r3, #16
 8009bf0:	4a23      	ldr	r2, [pc, #140]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009bf2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009bf4:	4b21      	ldr	r3, [pc, #132]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009bf6:	2210      	movs	r2, #16
 8009bf8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009bfa:	4b20      	ldr	r3, [pc, #128]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f003 0320 	and.w	r3, r3, #32
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d008      	beq.n	8009c18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009c06:	4b1e      	ldr	r3, [pc, #120]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	f043 0308 	orr.w	r3, r3, #8
 8009c0e:	4a1c      	ldr	r2, [pc, #112]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009c12:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c14:	2220      	movs	r2, #32
 8009c16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009c18:	4b18      	ldr	r3, [pc, #96]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d008      	beq.n	8009c36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009c24:	4b16      	ldr	r3, [pc, #88]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f043 0304 	orr.w	r3, r3, #4
 8009c2c:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009c30:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c32:	2240      	movs	r2, #64	; 0x40
 8009c34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009c36:	4b11      	ldr	r3, [pc, #68]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d008      	beq.n	8009c54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009c42:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f043 0302 	orr.w	r3, r3, #2
 8009c4a:	4a0d      	ldr	r2, [pc, #52]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c50:	2280      	movs	r2, #128	; 0x80
 8009c52:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009c54:	4b09      	ldr	r3, [pc, #36]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009c60:	4b07      	ldr	r3, [pc, #28]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	f043 0320 	orr.w	r3, r3, #32
 8009c68:	4a05      	ldr	r2, [pc, #20]	; (8009c80 <FLASH_SetErrorCode+0xa8>)
 8009c6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009c6c:	4b03      	ldr	r3, [pc, #12]	; (8009c7c <FLASH_SetErrorCode+0xa4>)
 8009c6e:	2202      	movs	r2, #2
 8009c70:	60da      	str	r2, [r3, #12]
  }
}
 8009c72:	bf00      	nop
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	40023c00 	.word	0x40023c00
 8009c80:	20003470 	.word	0x20003470

08009c84 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009c90:	2300      	movs	r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d102      	bne.n	8009ca0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	e010      	b.n	8009cc2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009ca0:	78fb      	ldrb	r3, [r7, #3]
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d103      	bne.n	8009cae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009caa:	60fb      	str	r3, [r7, #12]
 8009cac:	e009      	b.n	8009cc2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009cae:	78fb      	ldrb	r3, [r7, #3]
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d103      	bne.n	8009cbc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e002      	b.n	8009cc2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009cbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009cc0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009cc2:	4b13      	ldr	r3, [pc, #76]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	4a12      	ldr	r2, [pc, #72]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009cce:	4b10      	ldr	r3, [pc, #64]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cd0:	691a      	ldr	r2, [r3, #16]
 8009cd2:	490f      	ldr	r1, [pc, #60]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009cda:	4b0d      	ldr	r3, [pc, #52]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	4a0c      	ldr	r2, [pc, #48]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009ce0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009ce4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009ce6:	4b0a      	ldr	r3, [pc, #40]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009ce8:	691a      	ldr	r2, [r3, #16]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	4a07      	ldr	r2, [pc, #28]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cf2:	f043 0302 	orr.w	r3, r3, #2
 8009cf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009cf8:	4b05      	ldr	r3, [pc, #20]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	4a04      	ldr	r2, [pc, #16]	; (8009d10 <FLASH_Erase_Sector+0x8c>)
 8009cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d02:	6113      	str	r3, [r2, #16]
}
 8009d04:	bf00      	nop
 8009d06:	3714      	adds	r7, #20
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr
 8009d10:	40023c00 	.word	0x40023c00

08009d14 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009d18:	4b20      	ldr	r3, [pc, #128]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d017      	beq.n	8009d54 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009d24:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1c      	ldr	r2, [pc, #112]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d2e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009d30:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a19      	ldr	r2, [pc, #100]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	4b17      	ldr	r3, [pc, #92]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a16      	ldr	r2, [pc, #88]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d46:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009d48:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a13      	ldr	r2, [pc, #76]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d52:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009d54:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d017      	beq.n	8009d90 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a0d      	ldr	r2, [pc, #52]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d6a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0a      	ldr	r2, [pc, #40]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a07      	ldr	r2, [pc, #28]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d82:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009d84:	4b05      	ldr	r3, [pc, #20]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a04      	ldr	r2, [pc, #16]	; (8009d9c <FLASH_FlushCaches+0x88>)
 8009d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d8e:	6013      	str	r3, [r2, #0]
  }
}
 8009d90:	bf00      	nop
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	40023c00 	.word	0x40023c00

08009da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b089      	sub	sp, #36	; 0x24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009db6:	2300      	movs	r3, #0
 8009db8:	61fb      	str	r3, [r7, #28]
 8009dba:	e16b      	b.n	800a094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	697a      	ldr	r2, [r7, #20]
 8009dcc:	4013      	ands	r3, r2
 8009dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	f040 815a 	bne.w	800a08e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f003 0303 	and.w	r3, r3, #3
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d005      	beq.n	8009df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d130      	bne.n	8009e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	005b      	lsls	r3, r3, #1
 8009dfc:	2203      	movs	r2, #3
 8009dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009e02:	43db      	mvns	r3, r3
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	4013      	ands	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	69fb      	ldr	r3, [r7, #28]
 8009e10:	005b      	lsls	r3, r3, #1
 8009e12:	fa02 f303 	lsl.w	r3, r2, r3
 8009e16:	69ba      	ldr	r2, [r7, #24]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009e28:	2201      	movs	r2, #1
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	43db      	mvns	r3, r3
 8009e32:	69ba      	ldr	r2, [r7, #24]
 8009e34:	4013      	ands	r3, r2
 8009e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	091b      	lsrs	r3, r3, #4
 8009e3e:	f003 0201 	and.w	r2, r3, #1
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	fa02 f303 	lsl.w	r3, r2, r3
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	2b03      	cmp	r3, #3
 8009e5e:	d017      	beq.n	8009e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	005b      	lsls	r3, r3, #1
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e70:	43db      	mvns	r3, r3
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	4013      	ands	r3, r2
 8009e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	005b      	lsls	r3, r3, #1
 8009e80:	fa02 f303 	lsl.w	r3, r2, r3
 8009e84:	69ba      	ldr	r2, [r7, #24]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d123      	bne.n	8009ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	08da      	lsrs	r2, r3, #3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3208      	adds	r2, #8
 8009ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	f003 0307 	and.w	r3, r3, #7
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	220f      	movs	r2, #15
 8009eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009eb8:	43db      	mvns	r3, r3
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed0:	69ba      	ldr	r2, [r7, #24]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	08da      	lsrs	r2, r3, #3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3208      	adds	r2, #8
 8009ede:	69b9      	ldr	r1, [r7, #24]
 8009ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	2203      	movs	r2, #3
 8009ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef4:	43db      	mvns	r3, r3
 8009ef6:	69ba      	ldr	r2, [r7, #24]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	f003 0203 	and.w	r2, r3, #3
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	005b      	lsls	r3, r3, #1
 8009f08:	fa02 f303 	lsl.w	r3, r2, r3
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69ba      	ldr	r2, [r7, #24]
 8009f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f000 80b4 	beq.w	800a08e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f26:	2300      	movs	r3, #0
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	4b60      	ldr	r3, [pc, #384]	; (800a0ac <HAL_GPIO_Init+0x30c>)
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f2e:	4a5f      	ldr	r2, [pc, #380]	; (800a0ac <HAL_GPIO_Init+0x30c>)
 8009f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009f34:	6453      	str	r3, [r2, #68]	; 0x44
 8009f36:	4b5d      	ldr	r3, [pc, #372]	; (800a0ac <HAL_GPIO_Init+0x30c>)
 8009f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f3e:	60fb      	str	r3, [r7, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009f42:	4a5b      	ldr	r2, [pc, #364]	; (800a0b0 <HAL_GPIO_Init+0x310>)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	089b      	lsrs	r3, r3, #2
 8009f48:	3302      	adds	r3, #2
 8009f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	f003 0303 	and.w	r3, r3, #3
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	220f      	movs	r2, #15
 8009f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f5e:	43db      	mvns	r3, r3
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	4013      	ands	r3, r2
 8009f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a52      	ldr	r2, [pc, #328]	; (800a0b4 <HAL_GPIO_Init+0x314>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d02b      	beq.n	8009fc6 <HAL_GPIO_Init+0x226>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a51      	ldr	r2, [pc, #324]	; (800a0b8 <HAL_GPIO_Init+0x318>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d025      	beq.n	8009fc2 <HAL_GPIO_Init+0x222>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a50      	ldr	r2, [pc, #320]	; (800a0bc <HAL_GPIO_Init+0x31c>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d01f      	beq.n	8009fbe <HAL_GPIO_Init+0x21e>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a4f      	ldr	r2, [pc, #316]	; (800a0c0 <HAL_GPIO_Init+0x320>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d019      	beq.n	8009fba <HAL_GPIO_Init+0x21a>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a4e      	ldr	r2, [pc, #312]	; (800a0c4 <HAL_GPIO_Init+0x324>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d013      	beq.n	8009fb6 <HAL_GPIO_Init+0x216>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a4d      	ldr	r2, [pc, #308]	; (800a0c8 <HAL_GPIO_Init+0x328>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00d      	beq.n	8009fb2 <HAL_GPIO_Init+0x212>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a4c      	ldr	r2, [pc, #304]	; (800a0cc <HAL_GPIO_Init+0x32c>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d007      	beq.n	8009fae <HAL_GPIO_Init+0x20e>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a4b      	ldr	r2, [pc, #300]	; (800a0d0 <HAL_GPIO_Init+0x330>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d101      	bne.n	8009faa <HAL_GPIO_Init+0x20a>
 8009fa6:	2307      	movs	r3, #7
 8009fa8:	e00e      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009faa:	2308      	movs	r3, #8
 8009fac:	e00c      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fae:	2306      	movs	r3, #6
 8009fb0:	e00a      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fb2:	2305      	movs	r3, #5
 8009fb4:	e008      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fb6:	2304      	movs	r3, #4
 8009fb8:	e006      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fba:	2303      	movs	r3, #3
 8009fbc:	e004      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	e002      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e000      	b.n	8009fc8 <HAL_GPIO_Init+0x228>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	69fa      	ldr	r2, [r7, #28]
 8009fca:	f002 0203 	and.w	r2, r2, #3
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	4093      	lsls	r3, r2
 8009fd2:	69ba      	ldr	r2, [r7, #24]
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009fd8:	4935      	ldr	r1, [pc, #212]	; (800a0b0 <HAL_GPIO_Init+0x310>)
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	089b      	lsrs	r3, r3, #2
 8009fde:	3302      	adds	r3, #2
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009fe6:	4b3b      	ldr	r3, [pc, #236]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	43db      	mvns	r3, r3
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	4013      	ands	r3, r2
 8009ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a002:	69ba      	ldr	r2, [r7, #24]
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	4313      	orrs	r3, r2
 800a008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a00a:	4a32      	ldr	r2, [pc, #200]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a010:	4b30      	ldr	r3, [pc, #192]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	43db      	mvns	r3, r3
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	4013      	ands	r3, r2
 800a01e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	4313      	orrs	r3, r2
 800a032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a034:	4a27      	ldr	r2, [pc, #156]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a03a:	4b26      	ldr	r3, [pc, #152]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	43db      	mvns	r3, r3
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	4013      	ands	r3, r2
 800a048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a05e:	4a1d      	ldr	r2, [pc, #116]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a064:	4b1b      	ldr	r3, [pc, #108]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	43db      	mvns	r3, r3
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	4013      	ands	r3, r2
 800a072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a080:	69ba      	ldr	r2, [r7, #24]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a088:	4a12      	ldr	r2, [pc, #72]	; (800a0d4 <HAL_GPIO_Init+0x334>)
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	3301      	adds	r3, #1
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	2b0f      	cmp	r3, #15
 800a098:	f67f ae90 	bls.w	8009dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a09c:	bf00      	nop
 800a09e:	bf00      	nop
 800a0a0:	3724      	adds	r7, #36	; 0x24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	40023800 	.word	0x40023800
 800a0b0:	40013800 	.word	0x40013800
 800a0b4:	40020000 	.word	0x40020000
 800a0b8:	40020400 	.word	0x40020400
 800a0bc:	40020800 	.word	0x40020800
 800a0c0:	40020c00 	.word	0x40020c00
 800a0c4:	40021000 	.word	0x40021000
 800a0c8:	40021400 	.word	0x40021400
 800a0cc:	40021800 	.word	0x40021800
 800a0d0:	40021c00 	.word	0x40021c00
 800a0d4:	40013c00 	.word	0x40013c00

0800a0d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	691a      	ldr	r2, [r3, #16]
 800a0e8:	887b      	ldrh	r3, [r7, #2]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	73fb      	strb	r3, [r7, #15]
 800a0f4:	e001      	b.n	800a0fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
 800a114:	4613      	mov	r3, r2
 800a116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a118:	787b      	ldrb	r3, [r7, #1]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d003      	beq.n	800a126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a11e:	887a      	ldrh	r2, [r7, #2]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a124:	e003      	b.n	800a12e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a126:	887b      	ldrh	r3, [r7, #2]
 800a128:	041a      	lsls	r2, r3, #16
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	619a      	str	r2, [r3, #24]
}
 800a12e:	bf00      	nop
 800a130:	370c      	adds	r7, #12
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr
	...

0800a13c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a146:	4b08      	ldr	r3, [pc, #32]	; (800a168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a148:	695a      	ldr	r2, [r3, #20]
 800a14a:	88fb      	ldrh	r3, [r7, #6]
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d006      	beq.n	800a160 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a152:	4a05      	ldr	r2, [pc, #20]	; (800a168 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a154:	88fb      	ldrh	r3, [r7, #6]
 800a156:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a158:	88fb      	ldrh	r3, [r7, #6]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f9 fa18 	bl	8003590 <HAL_GPIO_EXTI_Callback>
  }
}
 800a160:	bf00      	nop
 800a162:	3708      	adds	r7, #8
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	40013c00 	.word	0x40013c00

0800a16c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b086      	sub	sp, #24
 800a170:	af02      	add	r7, sp, #8
 800a172:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e059      	b.n	800a232 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d106      	bne.n	800a19e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7fe fabd 	bl	8008718 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1ac:	d102      	bne.n	800a1b4 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f003 fd1d 	bl	800dbf8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7c1a      	ldrb	r2, [r3, #16]
 800a1c6:	f88d 2000 	strb.w	r2, [sp]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1ce:	f003 fcaf 	bl	800db30 <USB_CoreInit>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e026      	b.n	800a232 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f003 fd15 	bl	800dc1a <USB_SetCurrentMode>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	e017      	b.n	800a232 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6818      	ldr	r0, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	7c1a      	ldrb	r2, [r3, #16]
 800a20a:	f88d 2000 	strb.w	r2, [sp]
 800a20e:	3304      	adds	r3, #4
 800a210:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a212:	f003 fded 	bl	800ddf0 <USB_HostInit>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e004      	b.n	800a232 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3710      	adds	r7, #16
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800a240:	4b06      	ldr	r3, [pc, #24]	; (800a25c <HAL_PWR_PVD_IRQHandler+0x20>)
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d005      	beq.n	800a258 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a24c:	f000 f808 	bl	800a260 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a250:	4b02      	ldr	r3, [pc, #8]	; (800a25c <HAL_PWR_PVD_IRQHandler+0x20>)
 800a252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a256:	615a      	str	r2, [r3, #20]
  }
}
 800a258:	bf00      	nop
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40013c00 	.word	0x40013c00

0800a260 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800a260:	b480      	push	{r7}
 800a262:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800a264:	bf00      	nop
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b086      	sub	sp, #24
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e267      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d075      	beq.n	800a37a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a28e:	4b88      	ldr	r3, [pc, #544]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f003 030c 	and.w	r3, r3, #12
 800a296:	2b04      	cmp	r3, #4
 800a298:	d00c      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a29a:	4b85      	ldr	r3, [pc, #532]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a2a2:	2b08      	cmp	r3, #8
 800a2a4:	d112      	bne.n	800a2cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a2a6:	4b82      	ldr	r3, [pc, #520]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2b2:	d10b      	bne.n	800a2cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2b4:	4b7e      	ldr	r3, [pc, #504]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d05b      	beq.n	800a378 <HAL_RCC_OscConfig+0x108>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d157      	bne.n	800a378 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e242      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d4:	d106      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x74>
 800a2d6:	4b76      	ldr	r3, [pc, #472]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a75      	ldr	r2, [pc, #468]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	e01d      	b.n	800a320 <HAL_RCC_OscConfig+0xb0>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2ec:	d10c      	bne.n	800a308 <HAL_RCC_OscConfig+0x98>
 800a2ee:	4b70      	ldr	r3, [pc, #448]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a6f      	ldr	r2, [pc, #444]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	4b6d      	ldr	r3, [pc, #436]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a6c      	ldr	r2, [pc, #432]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	e00b      	b.n	800a320 <HAL_RCC_OscConfig+0xb0>
 800a308:	4b69      	ldr	r3, [pc, #420]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a68      	ldr	r2, [pc, #416]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a30e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	4b66      	ldr	r3, [pc, #408]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a65      	ldr	r2, [pc, #404]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a31a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a31e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d013      	beq.n	800a350 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a328:	f7fe fa8e 	bl	8008848 <HAL_GetTick>
 800a32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a32e:	e008      	b.n	800a342 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a330:	f7fe fa8a 	bl	8008848 <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	2b64      	cmp	r3, #100	; 0x64
 800a33c:	d901      	bls.n	800a342 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e207      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a342:	4b5b      	ldr	r3, [pc, #364]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d0f0      	beq.n	800a330 <HAL_RCC_OscConfig+0xc0>
 800a34e:	e014      	b.n	800a37a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a350:	f7fe fa7a 	bl	8008848 <HAL_GetTick>
 800a354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a356:	e008      	b.n	800a36a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a358:	f7fe fa76 	bl	8008848 <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b64      	cmp	r3, #100	; 0x64
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e1f3      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a36a:	4b51      	ldr	r3, [pc, #324]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1f0      	bne.n	800a358 <HAL_RCC_OscConfig+0xe8>
 800a376:	e000      	b.n	800a37a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d063      	beq.n	800a44e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a386:	4b4a      	ldr	r3, [pc, #296]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 030c 	and.w	r3, r3, #12
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00b      	beq.n	800a3aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a392:	4b47      	ldr	r3, [pc, #284]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a39a:	2b08      	cmp	r3, #8
 800a39c:	d11c      	bne.n	800a3d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a39e:	4b44      	ldr	r3, [pc, #272]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d116      	bne.n	800a3d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3aa:	4b41      	ldr	r3, [pc, #260]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0302 	and.w	r3, r3, #2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d005      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x152>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d001      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e1c7      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3c2:	4b3b      	ldr	r3, [pc, #236]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	4937      	ldr	r1, [pc, #220]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3d6:	e03a      	b.n	800a44e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d020      	beq.n	800a422 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3e0:	4b34      	ldr	r3, [pc, #208]	; (800a4b4 <HAL_RCC_OscConfig+0x244>)
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e6:	f7fe fa2f 	bl	8008848 <HAL_GetTick>
 800a3ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3ec:	e008      	b.n	800a400 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a3ee:	f7fe fa2b 	bl	8008848 <HAL_GetTick>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	1ad3      	subs	r3, r2, r3
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	d901      	bls.n	800a400 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e1a8      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a400:	4b2b      	ldr	r3, [pc, #172]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d0f0      	beq.n	800a3ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a40c:	4b28      	ldr	r3, [pc, #160]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	4925      	ldr	r1, [pc, #148]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	600b      	str	r3, [r1, #0]
 800a420:	e015      	b.n	800a44e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a422:	4b24      	ldr	r3, [pc, #144]	; (800a4b4 <HAL_RCC_OscConfig+0x244>)
 800a424:	2200      	movs	r2, #0
 800a426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a428:	f7fe fa0e 	bl	8008848 <HAL_GetTick>
 800a42c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a42e:	e008      	b.n	800a442 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a430:	f7fe fa0a 	bl	8008848 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	1ad3      	subs	r3, r2, r3
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d901      	bls.n	800a442 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a43e:	2303      	movs	r3, #3
 800a440:	e187      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a442:	4b1b      	ldr	r3, [pc, #108]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1f0      	bne.n	800a430 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d036      	beq.n	800a4c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d016      	beq.n	800a490 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a462:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <HAL_RCC_OscConfig+0x248>)
 800a464:	2201      	movs	r2, #1
 800a466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a468:	f7fe f9ee 	bl	8008848 <HAL_GetTick>
 800a46c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a46e:	e008      	b.n	800a482 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a470:	f7fe f9ea 	bl	8008848 <HAL_GetTick>
 800a474:	4602      	mov	r2, r0
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	1ad3      	subs	r3, r2, r3
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d901      	bls.n	800a482 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a47e:	2303      	movs	r3, #3
 800a480:	e167      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a482:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <HAL_RCC_OscConfig+0x240>)
 800a484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a486:	f003 0302 	and.w	r3, r3, #2
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0f0      	beq.n	800a470 <HAL_RCC_OscConfig+0x200>
 800a48e:	e01b      	b.n	800a4c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a490:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <HAL_RCC_OscConfig+0x248>)
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a496:	f7fe f9d7 	bl	8008848 <HAL_GetTick>
 800a49a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a49c:	e00e      	b.n	800a4bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a49e:	f7fe f9d3 	bl	8008848 <HAL_GetTick>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	1ad3      	subs	r3, r2, r3
 800a4a8:	2b02      	cmp	r3, #2
 800a4aa:	d907      	bls.n	800a4bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e150      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
 800a4b0:	40023800 	.word	0x40023800
 800a4b4:	42470000 	.word	0x42470000
 800a4b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4bc:	4b88      	ldr	r3, [pc, #544]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a4be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4c0:	f003 0302 	and.w	r3, r3, #2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1ea      	bne.n	800a49e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 8097 	beq.w	800a604 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4da:	4b81      	ldr	r3, [pc, #516]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10f      	bne.n	800a506 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60bb      	str	r3, [r7, #8]
 800a4ea:	4b7d      	ldr	r3, [pc, #500]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	4a7c      	ldr	r2, [pc, #496]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4f4:	6413      	str	r3, [r2, #64]	; 0x40
 800a4f6:	4b7a      	ldr	r3, [pc, #488]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4fe:	60bb      	str	r3, [r7, #8]
 800a500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a502:	2301      	movs	r3, #1
 800a504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a506:	4b77      	ldr	r3, [pc, #476]	; (800a6e4 <HAL_RCC_OscConfig+0x474>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d118      	bne.n	800a544 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a512:	4b74      	ldr	r3, [pc, #464]	; (800a6e4 <HAL_RCC_OscConfig+0x474>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a73      	ldr	r2, [pc, #460]	; (800a6e4 <HAL_RCC_OscConfig+0x474>)
 800a518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a51c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a51e:	f7fe f993 	bl	8008848 <HAL_GetTick>
 800a522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a524:	e008      	b.n	800a538 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a526:	f7fe f98f 	bl	8008848 <HAL_GetTick>
 800a52a:	4602      	mov	r2, r0
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b02      	cmp	r3, #2
 800a532:	d901      	bls.n	800a538 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a534:	2303      	movs	r3, #3
 800a536:	e10c      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a538:	4b6a      	ldr	r3, [pc, #424]	; (800a6e4 <HAL_RCC_OscConfig+0x474>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a540:	2b00      	cmp	r3, #0
 800a542:	d0f0      	beq.n	800a526 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d106      	bne.n	800a55a <HAL_RCC_OscConfig+0x2ea>
 800a54c:	4b64      	ldr	r3, [pc, #400]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a550:	4a63      	ldr	r2, [pc, #396]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	6713      	str	r3, [r2, #112]	; 0x70
 800a558:	e01c      	b.n	800a594 <HAL_RCC_OscConfig+0x324>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	2b05      	cmp	r3, #5
 800a560:	d10c      	bne.n	800a57c <HAL_RCC_OscConfig+0x30c>
 800a562:	4b5f      	ldr	r3, [pc, #380]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a566:	4a5e      	ldr	r2, [pc, #376]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a568:	f043 0304 	orr.w	r3, r3, #4
 800a56c:	6713      	str	r3, [r2, #112]	; 0x70
 800a56e:	4b5c      	ldr	r3, [pc, #368]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a572:	4a5b      	ldr	r2, [pc, #364]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a574:	f043 0301 	orr.w	r3, r3, #1
 800a578:	6713      	str	r3, [r2, #112]	; 0x70
 800a57a:	e00b      	b.n	800a594 <HAL_RCC_OscConfig+0x324>
 800a57c:	4b58      	ldr	r3, [pc, #352]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a580:	4a57      	ldr	r2, [pc, #348]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a582:	f023 0301 	bic.w	r3, r3, #1
 800a586:	6713      	str	r3, [r2, #112]	; 0x70
 800a588:	4b55      	ldr	r3, [pc, #340]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a58c:	4a54      	ldr	r2, [pc, #336]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a58e:	f023 0304 	bic.w	r3, r3, #4
 800a592:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d015      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a59c:	f7fe f954 	bl	8008848 <HAL_GetTick>
 800a5a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5a2:	e00a      	b.n	800a5ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5a4:	f7fe f950 	bl	8008848 <HAL_GetTick>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e0cb      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5ba:	4b49      	ldr	r3, [pc, #292]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0ee      	beq.n	800a5a4 <HAL_RCC_OscConfig+0x334>
 800a5c6:	e014      	b.n	800a5f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5c8:	f7fe f93e 	bl	8008848 <HAL_GetTick>
 800a5cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5ce:	e00a      	b.n	800a5e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a5d0:	f7fe f93a 	bl	8008848 <HAL_GetTick>
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e0b5      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5e6:	4b3e      	ldr	r3, [pc, #248]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ea:	f003 0302 	and.w	r3, r3, #2
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1ee      	bne.n	800a5d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d105      	bne.n	800a604 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5f8:	4b39      	ldr	r3, [pc, #228]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fc:	4a38      	ldr	r2, [pc, #224]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a5fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a602:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80a1 	beq.w	800a750 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a60e:	4b34      	ldr	r3, [pc, #208]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f003 030c 	and.w	r3, r3, #12
 800a616:	2b08      	cmp	r3, #8
 800a618:	d05c      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d141      	bne.n	800a6a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a622:	4b31      	ldr	r3, [pc, #196]	; (800a6e8 <HAL_RCC_OscConfig+0x478>)
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a628:	f7fe f90e 	bl	8008848 <HAL_GetTick>
 800a62c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a62e:	e008      	b.n	800a642 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a630:	f7fe f90a 	bl	8008848 <HAL_GetTick>
 800a634:	4602      	mov	r2, r0
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d901      	bls.n	800a642 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e087      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a642:	4b27      	ldr	r3, [pc, #156]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1f0      	bne.n	800a630 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	69da      	ldr	r2, [r3, #28]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	431a      	orrs	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	019b      	lsls	r3, r3, #6
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a664:	085b      	lsrs	r3, r3, #1
 800a666:	3b01      	subs	r3, #1
 800a668:	041b      	lsls	r3, r3, #16
 800a66a:	431a      	orrs	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	061b      	lsls	r3, r3, #24
 800a672:	491b      	ldr	r1, [pc, #108]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a674:	4313      	orrs	r3, r2
 800a676:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a678:	4b1b      	ldr	r3, [pc, #108]	; (800a6e8 <HAL_RCC_OscConfig+0x478>)
 800a67a:	2201      	movs	r2, #1
 800a67c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a67e:	f7fe f8e3 	bl	8008848 <HAL_GetTick>
 800a682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a684:	e008      	b.n	800a698 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a686:	f7fe f8df 	bl	8008848 <HAL_GetTick>
 800a68a:	4602      	mov	r2, r0
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	2b02      	cmp	r3, #2
 800a692:	d901      	bls.n	800a698 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e05c      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a698:	4b11      	ldr	r3, [pc, #68]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d0f0      	beq.n	800a686 <HAL_RCC_OscConfig+0x416>
 800a6a4:	e054      	b.n	800a750 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6a6:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <HAL_RCC_OscConfig+0x478>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6ac:	f7fe f8cc 	bl	8008848 <HAL_GetTick>
 800a6b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6b2:	e008      	b.n	800a6c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6b4:	f7fe f8c8 	bl	8008848 <HAL_GetTick>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d901      	bls.n	800a6c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e045      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6c6:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <HAL_RCC_OscConfig+0x470>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1f0      	bne.n	800a6b4 <HAL_RCC_OscConfig+0x444>
 800a6d2:	e03d      	b.n	800a750 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d107      	bne.n	800a6ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e038      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
 800a6e0:	40023800 	.word	0x40023800
 800a6e4:	40007000 	.word	0x40007000
 800a6e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	; (800a75c <HAL_RCC_OscConfig+0x4ec>)
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	699b      	ldr	r3, [r3, #24]
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d028      	beq.n	800a74c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a704:	429a      	cmp	r2, r3
 800a706:	d121      	bne.n	800a74c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a712:	429a      	cmp	r2, r3
 800a714:	d11a      	bne.n	800a74c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a71c:	4013      	ands	r3, r2
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a722:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a724:	4293      	cmp	r3, r2
 800a726:	d111      	bne.n	800a74c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a732:	085b      	lsrs	r3, r3, #1
 800a734:	3b01      	subs	r3, #1
 800a736:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a738:	429a      	cmp	r2, r3
 800a73a:	d107      	bne.n	800a74c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a746:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a748:	429a      	cmp	r2, r3
 800a74a:	d001      	beq.n	800a750 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e000      	b.n	800a752 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	40023800 	.word	0x40023800

0800a760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d101      	bne.n	800a774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	e0cc      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a774:	4b68      	ldr	r3, [pc, #416]	; (800a918 <HAL_RCC_ClockConfig+0x1b8>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d90c      	bls.n	800a79c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a782:	4b65      	ldr	r3, [pc, #404]	; (800a918 <HAL_RCC_ClockConfig+0x1b8>)
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	b2d2      	uxtb	r2, r2
 800a788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a78a:	4b63      	ldr	r3, [pc, #396]	; (800a918 <HAL_RCC_ClockConfig+0x1b8>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	429a      	cmp	r2, r3
 800a796:	d001      	beq.n	800a79c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e0b8      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d020      	beq.n	800a7ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a7b4:	4b59      	ldr	r3, [pc, #356]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	4a58      	ldr	r2, [pc, #352]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a7ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a7be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 0308 	and.w	r3, r3, #8
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d005      	beq.n	800a7d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a7cc:	4b53      	ldr	r3, [pc, #332]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	4a52      	ldr	r2, [pc, #328]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a7d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a7d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7d8:	4b50      	ldr	r3, [pc, #320]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	494d      	ldr	r1, [pc, #308]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0301 	and.w	r3, r3, #1
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d044      	beq.n	800a880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d107      	bne.n	800a80e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7fe:	4b47      	ldr	r3, [pc, #284]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d119      	bne.n	800a83e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e07f      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d003      	beq.n	800a81e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d107      	bne.n	800a82e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a81e:	4b3f      	ldr	r3, [pc, #252]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a826:	2b00      	cmp	r3, #0
 800a828:	d109      	bne.n	800a83e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e06f      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a82e:	4b3b      	ldr	r3, [pc, #236]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e067      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a83e:	4b37      	ldr	r3, [pc, #220]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f023 0203 	bic.w	r2, r3, #3
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	4934      	ldr	r1, [pc, #208]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a850:	f7fd fffa 	bl	8008848 <HAL_GetTick>
 800a854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a856:	e00a      	b.n	800a86e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a858:	f7fd fff6 	bl	8008848 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	1ad3      	subs	r3, r2, r3
 800a862:	f241 3288 	movw	r2, #5000	; 0x1388
 800a866:	4293      	cmp	r3, r2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e04f      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a86e:	4b2b      	ldr	r3, [pc, #172]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 020c 	and.w	r2, r3, #12
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d1eb      	bne.n	800a858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a880:	4b25      	ldr	r3, [pc, #148]	; (800a918 <HAL_RCC_ClockConfig+0x1b8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0307 	and.w	r3, r3, #7
 800a888:	683a      	ldr	r2, [r7, #0]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d20c      	bcs.n	800a8a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a88e:	4b22      	ldr	r3, [pc, #136]	; (800a918 <HAL_RCC_ClockConfig+0x1b8>)
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	b2d2      	uxtb	r2, r2
 800a894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a896:	4b20      	ldr	r3, [pc, #128]	; (800a918 <HAL_RCC_ClockConfig+0x1b8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0307 	and.w	r3, r3, #7
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d001      	beq.n	800a8a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e032      	b.n	800a90e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0304 	and.w	r3, r3, #4
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d008      	beq.n	800a8c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8b4:	4b19      	ldr	r3, [pc, #100]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	4916      	ldr	r1, [pc, #88]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d009      	beq.n	800a8e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a8d2:	4b12      	ldr	r3, [pc, #72]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	490e      	ldr	r1, [pc, #56]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a8e6:	f000 f821 	bl	800a92c <HAL_RCC_GetSysClockFreq>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4b0b      	ldr	r3, [pc, #44]	; (800a91c <HAL_RCC_ClockConfig+0x1bc>)
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	091b      	lsrs	r3, r3, #4
 800a8f2:	f003 030f 	and.w	r3, r3, #15
 800a8f6:	490a      	ldr	r1, [pc, #40]	; (800a920 <HAL_RCC_ClockConfig+0x1c0>)
 800a8f8:	5ccb      	ldrb	r3, [r1, r3]
 800a8fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a8fe:	4a09      	ldr	r2, [pc, #36]	; (800a924 <HAL_RCC_ClockConfig+0x1c4>)
 800a900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a902:	4b09      	ldr	r3, [pc, #36]	; (800a928 <HAL_RCC_ClockConfig+0x1c8>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4618      	mov	r0, r3
 800a908:	f7fc fe9e 	bl	8007648 <HAL_InitTick>

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	40023c00 	.word	0x40023c00
 800a91c:	40023800 	.word	0x40023800
 800a920:	0801a4e8 	.word	0x0801a4e8
 800a924:	20000148 	.word	0x20000148
 800a928:	2000014c 	.word	0x2000014c

0800a92c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a930:	b094      	sub	sp, #80	; 0x50
 800a932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a934:	2300      	movs	r3, #0
 800a936:	647b      	str	r3, [r7, #68]	; 0x44
 800a938:	2300      	movs	r3, #0
 800a93a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a93c:	2300      	movs	r3, #0
 800a93e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a940:	2300      	movs	r3, #0
 800a942:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a944:	4b79      	ldr	r3, [pc, #484]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x200>)
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f003 030c 	and.w	r3, r3, #12
 800a94c:	2b08      	cmp	r3, #8
 800a94e:	d00d      	beq.n	800a96c <HAL_RCC_GetSysClockFreq+0x40>
 800a950:	2b08      	cmp	r3, #8
 800a952:	f200 80e1 	bhi.w	800ab18 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d002      	beq.n	800a960 <HAL_RCC_GetSysClockFreq+0x34>
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d003      	beq.n	800a966 <HAL_RCC_GetSysClockFreq+0x3a>
 800a95e:	e0db      	b.n	800ab18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a960:	4b73      	ldr	r3, [pc, #460]	; (800ab30 <HAL_RCC_GetSysClockFreq+0x204>)
 800a962:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a964:	e0db      	b.n	800ab1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a966:	4b72      	ldr	r3, [pc, #456]	; (800ab30 <HAL_RCC_GetSysClockFreq+0x204>)
 800a968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a96a:	e0d8      	b.n	800ab1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a96c:	4b6f      	ldr	r3, [pc, #444]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x200>)
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a974:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a976:	4b6d      	ldr	r3, [pc, #436]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x200>)
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d063      	beq.n	800aa4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a982:	4b6a      	ldr	r3, [pc, #424]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x200>)
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	099b      	lsrs	r3, r3, #6
 800a988:	2200      	movs	r2, #0
 800a98a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a98c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a994:	633b      	str	r3, [r7, #48]	; 0x30
 800a996:	2300      	movs	r3, #0
 800a998:	637b      	str	r3, [r7, #52]	; 0x34
 800a99a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a99e:	4622      	mov	r2, r4
 800a9a0:	462b      	mov	r3, r5
 800a9a2:	f04f 0000 	mov.w	r0, #0
 800a9a6:	f04f 0100 	mov.w	r1, #0
 800a9aa:	0159      	lsls	r1, r3, #5
 800a9ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a9b0:	0150      	lsls	r0, r2, #5
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	4621      	mov	r1, r4
 800a9b8:	1a51      	subs	r1, r2, r1
 800a9ba:	6139      	str	r1, [r7, #16]
 800a9bc:	4629      	mov	r1, r5
 800a9be:	eb63 0301 	sbc.w	r3, r3, r1
 800a9c2:	617b      	str	r3, [r7, #20]
 800a9c4:	f04f 0200 	mov.w	r2, #0
 800a9c8:	f04f 0300 	mov.w	r3, #0
 800a9cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a9d0:	4659      	mov	r1, fp
 800a9d2:	018b      	lsls	r3, r1, #6
 800a9d4:	4651      	mov	r1, sl
 800a9d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a9da:	4651      	mov	r1, sl
 800a9dc:	018a      	lsls	r2, r1, #6
 800a9de:	4651      	mov	r1, sl
 800a9e0:	ebb2 0801 	subs.w	r8, r2, r1
 800a9e4:	4659      	mov	r1, fp
 800a9e6:	eb63 0901 	sbc.w	r9, r3, r1
 800a9ea:	f04f 0200 	mov.w	r2, #0
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9fe:	4690      	mov	r8, r2
 800aa00:	4699      	mov	r9, r3
 800aa02:	4623      	mov	r3, r4
 800aa04:	eb18 0303 	adds.w	r3, r8, r3
 800aa08:	60bb      	str	r3, [r7, #8]
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	eb49 0303 	adc.w	r3, r9, r3
 800aa10:	60fb      	str	r3, [r7, #12]
 800aa12:	f04f 0200 	mov.w	r2, #0
 800aa16:	f04f 0300 	mov.w	r3, #0
 800aa1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800aa1e:	4629      	mov	r1, r5
 800aa20:	028b      	lsls	r3, r1, #10
 800aa22:	4621      	mov	r1, r4
 800aa24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aa28:	4621      	mov	r1, r4
 800aa2a:	028a      	lsls	r2, r1, #10
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa32:	2200      	movs	r2, #0
 800aa34:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa36:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa3c:	f7f6 f934 	bl	8000ca8 <__aeabi_uldivmod>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4613      	mov	r3, r2
 800aa46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa48:	e058      	b.n	800aafc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aa4a:	4b38      	ldr	r3, [pc, #224]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x200>)
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	099b      	lsrs	r3, r3, #6
 800aa50:	2200      	movs	r2, #0
 800aa52:	4618      	mov	r0, r3
 800aa54:	4611      	mov	r1, r2
 800aa56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800aa5a:	623b      	str	r3, [r7, #32]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800aa64:	4642      	mov	r2, r8
 800aa66:	464b      	mov	r3, r9
 800aa68:	f04f 0000 	mov.w	r0, #0
 800aa6c:	f04f 0100 	mov.w	r1, #0
 800aa70:	0159      	lsls	r1, r3, #5
 800aa72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800aa76:	0150      	lsls	r0, r2, #5
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4641      	mov	r1, r8
 800aa7e:	ebb2 0a01 	subs.w	sl, r2, r1
 800aa82:	4649      	mov	r1, r9
 800aa84:	eb63 0b01 	sbc.w	fp, r3, r1
 800aa88:	f04f 0200 	mov.w	r2, #0
 800aa8c:	f04f 0300 	mov.w	r3, #0
 800aa90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800aa94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800aa98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800aa9c:	ebb2 040a 	subs.w	r4, r2, sl
 800aaa0:	eb63 050b 	sbc.w	r5, r3, fp
 800aaa4:	f04f 0200 	mov.w	r2, #0
 800aaa8:	f04f 0300 	mov.w	r3, #0
 800aaac:	00eb      	lsls	r3, r5, #3
 800aaae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aab2:	00e2      	lsls	r2, r4, #3
 800aab4:	4614      	mov	r4, r2
 800aab6:	461d      	mov	r5, r3
 800aab8:	4643      	mov	r3, r8
 800aaba:	18e3      	adds	r3, r4, r3
 800aabc:	603b      	str	r3, [r7, #0]
 800aabe:	464b      	mov	r3, r9
 800aac0:	eb45 0303 	adc.w	r3, r5, r3
 800aac4:	607b      	str	r3, [r7, #4]
 800aac6:	f04f 0200 	mov.w	r2, #0
 800aaca:	f04f 0300 	mov.w	r3, #0
 800aace:	e9d7 4500 	ldrd	r4, r5, [r7]
 800aad2:	4629      	mov	r1, r5
 800aad4:	028b      	lsls	r3, r1, #10
 800aad6:	4621      	mov	r1, r4
 800aad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800aadc:	4621      	mov	r1, r4
 800aade:	028a      	lsls	r2, r1, #10
 800aae0:	4610      	mov	r0, r2
 800aae2:	4619      	mov	r1, r3
 800aae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aae6:	2200      	movs	r2, #0
 800aae8:	61bb      	str	r3, [r7, #24]
 800aaea:	61fa      	str	r2, [r7, #28]
 800aaec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aaf0:	f7f6 f8da 	bl	8000ca8 <__aeabi_uldivmod>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4613      	mov	r3, r2
 800aafa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800aafc:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <HAL_RCC_GetSysClockFreq+0x200>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	0c1b      	lsrs	r3, r3, #16
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	3301      	adds	r3, #1
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800ab0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ab16:	e002      	b.n	800ab1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <HAL_RCC_GetSysClockFreq+0x204>)
 800ab1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800ab1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ab1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3750      	adds	r7, #80	; 0x50
 800ab24:	46bd      	mov	sp, r7
 800ab26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab2a:	bf00      	nop
 800ab2c:	40023800 	.word	0x40023800
 800ab30:	00f42400 	.word	0x00f42400

0800ab34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab38:	4b03      	ldr	r3, [pc, #12]	; (800ab48 <HAL_RCC_GetHCLKFreq+0x14>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
 800ab46:	bf00      	nop
 800ab48:	20000148 	.word	0x20000148

0800ab4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ab50:	f7ff fff0 	bl	800ab34 <HAL_RCC_GetHCLKFreq>
 800ab54:	4602      	mov	r2, r0
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	0a9b      	lsrs	r3, r3, #10
 800ab5c:	f003 0307 	and.w	r3, r3, #7
 800ab60:	4903      	ldr	r1, [pc, #12]	; (800ab70 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab62:	5ccb      	ldrb	r3, [r1, r3]
 800ab64:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	40023800 	.word	0x40023800
 800ab70:	0801a4f8 	.word	0x0801a4f8

0800ab74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ab78:	f7ff ffdc 	bl	800ab34 <HAL_RCC_GetHCLKFreq>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	4b05      	ldr	r3, [pc, #20]	; (800ab94 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	0b5b      	lsrs	r3, r3, #13
 800ab84:	f003 0307 	and.w	r3, r3, #7
 800ab88:	4903      	ldr	r1, [pc, #12]	; (800ab98 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab8a:	5ccb      	ldrb	r3, [r1, r3]
 800ab8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	40023800 	.word	0x40023800
 800ab98:	0801a4f8 	.word	0x0801a4f8

0800ab9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	220f      	movs	r2, #15
 800abaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800abac:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <HAL_RCC_GetClockConfig+0x5c>)
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0203 	and.w	r2, r3, #3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800abb8:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <HAL_RCC_GetClockConfig+0x5c>)
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800abc4:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <HAL_RCC_GetClockConfig+0x5c>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800abd0:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <HAL_RCC_GetClockConfig+0x5c>)
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	08db      	lsrs	r3, r3, #3
 800abd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800abde:	4b07      	ldr	r3, [pc, #28]	; (800abfc <HAL_RCC_GetClockConfig+0x60>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0207 	and.w	r2, r3, #7
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	601a      	str	r2, [r3, #0]
}
 800abea:	bf00      	nop
 800abec:	370c      	adds	r7, #12
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	40023800 	.word	0x40023800
 800abfc:	40023c00 	.word	0x40023c00

0800ac00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d101      	bne.n	800ac12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e07b      	b.n	800ad0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d108      	bne.n	800ac2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac22:	d009      	beq.n	800ac38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	61da      	str	r2, [r3, #28]
 800ac2a:	e005      	b.n	800ac38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d106      	bne.n	800ac58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7fc fc54 	bl	8007500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ac80:	431a      	orrs	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	f003 0302 	and.w	r3, r3, #2
 800ac94:	431a      	orrs	r2, r3
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	695b      	ldr	r3, [r3, #20]
 800ac9a:	f003 0301 	and.w	r3, r3, #1
 800ac9e:	431a      	orrs	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aca8:	431a      	orrs	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69db      	ldr	r3, [r3, #28]
 800acae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acb2:	431a      	orrs	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a1b      	ldr	r3, [r3, #32]
 800acb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acbc:	ea42 0103 	orr.w	r1, r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	430a      	orrs	r2, r1
 800acce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	0c1b      	lsrs	r3, r3, #16
 800acd6:	f003 0104 	and.w	r1, r3, #4
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	f003 0210 	and.w	r2, r3, #16
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	430a      	orrs	r2, r1
 800ace8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	69da      	ldr	r2, [r3, #28]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800acf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b088      	sub	sp, #32
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	60f8      	str	r0, [r7, #12]
 800ad1a:	60b9      	str	r1, [r7, #8]
 800ad1c:	603b      	str	r3, [r7, #0]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_SPI_Transmit+0x22>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e12d      	b.n	800af90 <HAL_SPI_Transmit+0x27e>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad3c:	f7fd fd84 	bl	8008848 <HAL_GetTick>
 800ad40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad42:	88fb      	ldrh	r3, [r7, #6]
 800ad44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d002      	beq.n	800ad58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad52:	2302      	movs	r3, #2
 800ad54:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad56:	e116      	b.n	800af86 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <HAL_SPI_Transmit+0x52>
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d102      	bne.n	800ad6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad68:	e10d      	b.n	800af86 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2203      	movs	r2, #3
 800ad6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	88fa      	ldrh	r2, [r7, #6]
 800ad82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	88fa      	ldrh	r2, [r7, #6]
 800ad88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adb0:	d10f      	bne.n	800add2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800add0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800addc:	2b40      	cmp	r3, #64	; 0x40
 800adde:	d007      	beq.n	800adf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adf8:	d14f      	bne.n	800ae9a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <HAL_SPI_Transmit+0xf6>
 800ae02:	8afb      	ldrh	r3, [r7, #22]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d142      	bne.n	800ae8e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0c:	881a      	ldrh	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	1c9a      	adds	r2, r3, #2
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	3b01      	subs	r3, #1
 800ae26:	b29a      	uxth	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ae2c:	e02f      	b.n	800ae8e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	f003 0302 	and.w	r3, r3, #2
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d112      	bne.n	800ae62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae40:	881a      	ldrh	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4c:	1c9a      	adds	r2, r3, #2
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae60:	e015      	b.n	800ae8e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae62:	f7fd fcf1 	bl	8008848 <HAL_GetTick>
 800ae66:	4602      	mov	r2, r0
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d803      	bhi.n	800ae7a <HAL_SPI_Transmit+0x168>
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae78:	d102      	bne.n	800ae80 <HAL_SPI_Transmit+0x16e>
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d106      	bne.n	800ae8e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800ae8c:	e07b      	b.n	800af86 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d1ca      	bne.n	800ae2e <HAL_SPI_Transmit+0x11c>
 800ae98:	e050      	b.n	800af3c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <HAL_SPI_Transmit+0x196>
 800aea2:	8afb      	ldrh	r3, [r7, #22]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d144      	bne.n	800af32 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	7812      	ldrb	r2, [r2, #0]
 800aeb4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aece:	e030      	b.n	800af32 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d113      	bne.n	800af06 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	330c      	adds	r3, #12
 800aee8:	7812      	ldrb	r2, [r2, #0]
 800aeea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef0:	1c5a      	adds	r2, r3, #1
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	3b01      	subs	r3, #1
 800aefe:	b29a      	uxth	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	86da      	strh	r2, [r3, #54]	; 0x36
 800af04:	e015      	b.n	800af32 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af06:	f7fd fc9f 	bl	8008848 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	429a      	cmp	r2, r3
 800af14:	d803      	bhi.n	800af1e <HAL_SPI_Transmit+0x20c>
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1c:	d102      	bne.n	800af24 <HAL_SPI_Transmit+0x212>
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800af30:	e029      	b.n	800af86 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af36:	b29b      	uxth	r3, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1c9      	bne.n	800aed0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af3c:	69ba      	ldr	r2, [r7, #24]
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 fa61 	bl	800b408 <SPI_EndRxTxTransaction>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2220      	movs	r2, #32
 800af50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10a      	bne.n	800af70 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af5a:	2300      	movs	r3, #0
 800af5c:	613b      	str	r3, [r7, #16]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	613b      	str	r3, [r7, #16]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	e003      	b.n	800af86 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3720      	adds	r7, #32
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08c      	sub	sp, #48	; 0x30
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800afa6:	2301      	movs	r3, #1
 800afa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d101      	bne.n	800afbe <HAL_SPI_TransmitReceive+0x26>
 800afba:	2302      	movs	r3, #2
 800afbc:	e198      	b.n	800b2f0 <HAL_SPI_TransmitReceive+0x358>
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afc6:	f7fd fc3f 	bl	8008848 <HAL_GetTick>
 800afca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800afdc:	887b      	ldrh	r3, [r7, #2]
 800afde:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800afe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d00f      	beq.n	800b008 <HAL_SPI_TransmitReceive+0x70>
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afee:	d107      	bne.n	800b000 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d103      	bne.n	800b000 <HAL_SPI_TransmitReceive+0x68>
 800aff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800affc:	2b04      	cmp	r3, #4
 800affe:	d003      	beq.n	800b008 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b000:	2302      	movs	r3, #2
 800b002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b006:	e16d      	b.n	800b2e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d005      	beq.n	800b01a <HAL_SPI_TransmitReceive+0x82>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <HAL_SPI_TransmitReceive+0x82>
 800b014:	887b      	ldrh	r3, [r7, #2]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d103      	bne.n	800b022 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b020:	e160      	b.n	800b2e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b04      	cmp	r3, #4
 800b02c:	d003      	beq.n	800b036 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2205      	movs	r2, #5
 800b032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	887a      	ldrh	r2, [r7, #2]
 800b046:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	887a      	ldrh	r2, [r7, #2]
 800b04c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	887a      	ldrh	r2, [r7, #2]
 800b058:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	887a      	ldrh	r2, [r7, #2]
 800b05e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	d007      	beq.n	800b08a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b092:	d17c      	bne.n	800b18e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <HAL_SPI_TransmitReceive+0x10a>
 800b09c:	8b7b      	ldrh	r3, [r7, #26]
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d16a      	bne.n	800b178 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a6:	881a      	ldrh	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b2:	1c9a      	adds	r2, r3, #2
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0c6:	e057      	b.n	800b178 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	f003 0302 	and.w	r3, r3, #2
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d11b      	bne.n	800b10e <HAL_SPI_TransmitReceive+0x176>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d016      	beq.n	800b10e <HAL_SPI_TransmitReceive+0x176>
 800b0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d113      	bne.n	800b10e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ea:	881a      	ldrh	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0f6:	1c9a      	adds	r2, r3, #2
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b100:	b29b      	uxth	r3, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	b29a      	uxth	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b10a:	2300      	movs	r3, #0
 800b10c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	f003 0301 	and.w	r3, r3, #1
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d119      	bne.n	800b150 <HAL_SPI_TransmitReceive+0x1b8>
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b120:	b29b      	uxth	r3, r3
 800b122:	2b00      	cmp	r3, #0
 800b124:	d014      	beq.n	800b150 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68da      	ldr	r2, [r3, #12]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b130:	b292      	uxth	r2, r2
 800b132:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b138:	1c9a      	adds	r2, r3, #2
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b142:	b29b      	uxth	r3, r3
 800b144:	3b01      	subs	r3, #1
 800b146:	b29a      	uxth	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b14c:	2301      	movs	r3, #1
 800b14e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b150:	f7fd fb7a 	bl	8008848 <HAL_GetTick>
 800b154:	4602      	mov	r2, r0
 800b156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d80b      	bhi.n	800b178 <HAL_SPI_TransmitReceive+0x1e0>
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b166:	d007      	beq.n	800b178 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b176:	e0b5      	b.n	800b2e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1a2      	bne.n	800b0c8 <HAL_SPI_TransmitReceive+0x130>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b186:	b29b      	uxth	r3, r3
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d19d      	bne.n	800b0c8 <HAL_SPI_TransmitReceive+0x130>
 800b18c:	e080      	b.n	800b290 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <HAL_SPI_TransmitReceive+0x204>
 800b196:	8b7b      	ldrh	r3, [r7, #26]
 800b198:	2b01      	cmp	r3, #1
 800b19a:	d16f      	bne.n	800b27c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	330c      	adds	r3, #12
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1c2:	e05b      	b.n	800b27c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d11c      	bne.n	800b20c <HAL_SPI_TransmitReceive+0x274>
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d017      	beq.n	800b20c <HAL_SPI_TransmitReceive+0x274>
 800b1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d114      	bne.n	800b20c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	330c      	adds	r3, #12
 800b1ec:	7812      	ldrb	r2, [r2, #0]
 800b1ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b208:	2300      	movs	r3, #0
 800b20a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b01      	cmp	r3, #1
 800b218:	d119      	bne.n	800b24e <HAL_SPI_TransmitReceive+0x2b6>
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d014      	beq.n	800b24e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22e:	b2d2      	uxtb	r2, r2
 800b230:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b240:	b29b      	uxth	r3, r3
 800b242:	3b01      	subs	r3, #1
 800b244:	b29a      	uxth	r2, r3
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b24a:	2301      	movs	r3, #1
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b24e:	f7fd fafb 	bl	8008848 <HAL_GetTick>
 800b252:	4602      	mov	r2, r0
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	1ad3      	subs	r3, r2, r3
 800b258:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d803      	bhi.n	800b266 <HAL_SPI_TransmitReceive+0x2ce>
 800b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b264:	d102      	bne.n	800b26c <HAL_SPI_TransmitReceive+0x2d4>
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d107      	bne.n	800b27c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800b27a:	e033      	b.n	800b2e4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b280:	b29b      	uxth	r3, r3
 800b282:	2b00      	cmp	r3, #0
 800b284:	d19e      	bne.n	800b1c4 <HAL_SPI_TransmitReceive+0x22c>
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d199      	bne.n	800b1c4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 f8b7 	bl	800b408 <SPI_EndRxTxTransaction>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d006      	beq.n	800b2ae <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2220      	movs	r2, #32
 800b2aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b2ac:	e01a      	b.n	800b2e4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10a      	bne.n	800b2cc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	617b      	str	r3, [r7, #20]
 800b2ca:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2da:	e003      	b.n	800b2e4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b2ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3730      	adds	r7, #48	; 0x30
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b088      	sub	sp, #32
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	603b      	str	r3, [r7, #0]
 800b304:	4613      	mov	r3, r2
 800b306:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b308:	f7fd fa9e 	bl	8008848 <HAL_GetTick>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	1a9b      	subs	r3, r3, r2
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	4413      	add	r3, r2
 800b316:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b318:	f7fd fa96 	bl	8008848 <HAL_GetTick>
 800b31c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b31e:	4b39      	ldr	r3, [pc, #228]	; (800b404 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	015b      	lsls	r3, r3, #5
 800b324:	0d1b      	lsrs	r3, r3, #20
 800b326:	69fa      	ldr	r2, [r7, #28]
 800b328:	fb02 f303 	mul.w	r3, r2, r3
 800b32c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b32e:	e054      	b.n	800b3da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d050      	beq.n	800b3da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b338:	f7fd fa86 	bl	8008848 <HAL_GetTick>
 800b33c:	4602      	mov	r2, r0
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	69fa      	ldr	r2, [r7, #28]
 800b344:	429a      	cmp	r2, r3
 800b346:	d902      	bls.n	800b34e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d13d      	bne.n	800b3ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b35c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b366:	d111      	bne.n	800b38c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b370:	d004      	beq.n	800b37c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b37a:	d107      	bne.n	800b38c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b38a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b394:	d10f      	bne.n	800b3b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b3b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	e017      	b.n	800b3fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	bf0c      	ite	eq
 800b3ea:	2301      	moveq	r3, #1
 800b3ec:	2300      	movne	r3, #0
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d19b      	bne.n	800b330 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3720      	adds	r7, #32
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20000148 	.word	0x20000148

0800b408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b088      	sub	sp, #32
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2201      	movs	r2, #1
 800b41c:	2102      	movs	r1, #2
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff ff6a 	bl	800b2f8 <SPI_WaitFlagStateUntilTimeout>
 800b424:	4603      	mov	r3, r0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d007      	beq.n	800b43a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42e:	f043 0220 	orr.w	r2, r3, #32
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e032      	b.n	800b4a0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b43a:	4b1b      	ldr	r3, [pc, #108]	; (800b4a8 <SPI_EndRxTxTransaction+0xa0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a1b      	ldr	r2, [pc, #108]	; (800b4ac <SPI_EndRxTxTransaction+0xa4>)
 800b440:	fba2 2303 	umull	r2, r3, r2, r3
 800b444:	0d5b      	lsrs	r3, r3, #21
 800b446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b44a:	fb02 f303 	mul.w	r3, r2, r3
 800b44e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b458:	d112      	bne.n	800b480 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	2200      	movs	r2, #0
 800b462:	2180      	movs	r1, #128	; 0x80
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7ff ff47 	bl	800b2f8 <SPI_WaitFlagStateUntilTimeout>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d016      	beq.n	800b49e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b474:	f043 0220 	orr.w	r2, r3, #32
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e00f      	b.n	800b4a0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	3b01      	subs	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b496:	2b80      	cmp	r3, #128	; 0x80
 800b498:	d0f2      	beq.n	800b480 <SPI_EndRxTxTransaction+0x78>
 800b49a:	e000      	b.n	800b49e <SPI_EndRxTxTransaction+0x96>
        break;
 800b49c:	bf00      	nop
  }

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20000148 	.word	0x20000148
 800b4ac:	165e9f81 	.word	0x165e9f81

0800b4b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e041      	b.n	800b546 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d106      	bne.n	800b4dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7fc fda2 	bl	8008020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2202      	movs	r2, #2
 800b4e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	f000 fc62 	bl	800bdb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	d001      	beq.n	800b568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e04e      	b.n	800b606 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f042 0201 	orr.w	r2, r2, #1
 800b57e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a23      	ldr	r2, [pc, #140]	; (800b614 <HAL_TIM_Base_Start_IT+0xc4>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d022      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b592:	d01d      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a1f      	ldr	r2, [pc, #124]	; (800b618 <HAL_TIM_Base_Start_IT+0xc8>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d018      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a1e      	ldr	r2, [pc, #120]	; (800b61c <HAL_TIM_Base_Start_IT+0xcc>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d013      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a1c      	ldr	r2, [pc, #112]	; (800b620 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d00e      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a1b      	ldr	r2, [pc, #108]	; (800b624 <HAL_TIM_Base_Start_IT+0xd4>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d009      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a19      	ldr	r2, [pc, #100]	; (800b628 <HAL_TIM_Base_Start_IT+0xd8>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d004      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a18      	ldr	r2, [pc, #96]	; (800b62c <HAL_TIM_Base_Start_IT+0xdc>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d111      	bne.n	800b5f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2b06      	cmp	r3, #6
 800b5e0:	d010      	beq.n	800b604 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f042 0201 	orr.w	r2, r2, #1
 800b5f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5f2:	e007      	b.n	800b604 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f042 0201 	orr.w	r2, r2, #1
 800b602:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40010000 	.word	0x40010000
 800b618:	40000400 	.word	0x40000400
 800b61c:	40000800 	.word	0x40000800
 800b620:	40000c00 	.word	0x40000c00
 800b624:	40010400 	.word	0x40010400
 800b628:	40014000 	.word	0x40014000
 800b62c:	40001800 	.word	0x40001800

0800b630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d101      	bne.n	800b642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b63e:	2301      	movs	r3, #1
 800b640:	e041      	b.n	800b6c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f839 	bl	800b6ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3304      	adds	r3, #4
 800b66c:	4619      	mov	r1, r3
 800b66e:	4610      	mov	r0, r2
 800b670:	f000 fba2 	bl	800bdb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3708      	adds	r7, #8
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b6ce:	b480      	push	{r7}
 800b6d0:	b083      	sub	sp, #12
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
	...

0800b6e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d109      	bne.n	800b708 <HAL_TIM_PWM_Start+0x24>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	e022      	b.n	800b74e <HAL_TIM_PWM_Start+0x6a>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2b04      	cmp	r3, #4
 800b70c:	d109      	bne.n	800b722 <HAL_TIM_PWM_Start+0x3e>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b01      	cmp	r3, #1
 800b718:	bf14      	ite	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	2300      	moveq	r3, #0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	e015      	b.n	800b74e <HAL_TIM_PWM_Start+0x6a>
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b08      	cmp	r3, #8
 800b726:	d109      	bne.n	800b73c <HAL_TIM_PWM_Start+0x58>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b01      	cmp	r3, #1
 800b732:	bf14      	ite	ne
 800b734:	2301      	movne	r3, #1
 800b736:	2300      	moveq	r3, #0
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	e008      	b.n	800b74e <HAL_TIM_PWM_Start+0x6a>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b01      	cmp	r3, #1
 800b746:	bf14      	ite	ne
 800b748:	2301      	movne	r3, #1
 800b74a:	2300      	moveq	r3, #0
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e07c      	b.n	800b850 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d104      	bne.n	800b766 <HAL_TIM_PWM_Start+0x82>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b764:	e013      	b.n	800b78e <HAL_TIM_PWM_Start+0xaa>
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d104      	bne.n	800b776 <HAL_TIM_PWM_Start+0x92>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2202      	movs	r2, #2
 800b770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b774:	e00b      	b.n	800b78e <HAL_TIM_PWM_Start+0xaa>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b08      	cmp	r3, #8
 800b77a:	d104      	bne.n	800b786 <HAL_TIM_PWM_Start+0xa2>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b784:	e003      	b.n	800b78e <HAL_TIM_PWM_Start+0xaa>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2202      	movs	r2, #2
 800b78a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2201      	movs	r2, #1
 800b794:	6839      	ldr	r1, [r7, #0]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 fe04 	bl	800c3a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a2d      	ldr	r2, [pc, #180]	; (800b858 <HAL_TIM_PWM_Start+0x174>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d004      	beq.n	800b7b0 <HAL_TIM_PWM_Start+0xcc>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a2c      	ldr	r2, [pc, #176]	; (800b85c <HAL_TIM_PWM_Start+0x178>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d101      	bne.n	800b7b4 <HAL_TIM_PWM_Start+0xd0>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e000      	b.n	800b7b6 <HAL_TIM_PWM_Start+0xd2>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d007      	beq.n	800b7ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a22      	ldr	r2, [pc, #136]	; (800b858 <HAL_TIM_PWM_Start+0x174>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d022      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7dc:	d01d      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a1f      	ldr	r2, [pc, #124]	; (800b860 <HAL_TIM_PWM_Start+0x17c>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d018      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a1d      	ldr	r2, [pc, #116]	; (800b864 <HAL_TIM_PWM_Start+0x180>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d013      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a1c      	ldr	r2, [pc, #112]	; (800b868 <HAL_TIM_PWM_Start+0x184>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d00e      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a16      	ldr	r2, [pc, #88]	; (800b85c <HAL_TIM_PWM_Start+0x178>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d009      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a18      	ldr	r2, [pc, #96]	; (800b86c <HAL_TIM_PWM_Start+0x188>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d004      	beq.n	800b81a <HAL_TIM_PWM_Start+0x136>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a16      	ldr	r2, [pc, #88]	; (800b870 <HAL_TIM_PWM_Start+0x18c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d111      	bne.n	800b83e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f003 0307 	and.w	r3, r3, #7
 800b824:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b06      	cmp	r3, #6
 800b82a:	d010      	beq.n	800b84e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f042 0201 	orr.w	r2, r2, #1
 800b83a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b83c:	e007      	b.n	800b84e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f042 0201 	orr.w	r2, r2, #1
 800b84c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	4618      	mov	r0, r3
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	40010000 	.word	0x40010000
 800b85c:	40010400 	.word	0x40010400
 800b860:	40000400 	.word	0x40000400
 800b864:	40000800 	.word	0x40000800
 800b868:	40000c00 	.word	0x40000c00
 800b86c:	40014000 	.word	0x40014000
 800b870:	40001800 	.word	0x40001800

0800b874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f003 0302 	and.w	r3, r3, #2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d020      	beq.n	800b8d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01b      	beq.n	800b8d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f06f 0202 	mvn.w	r2, #2
 800b8a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	f003 0303 	and.w	r3, r3, #3
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fa5b 	bl	800bd7a <HAL_TIM_IC_CaptureCallback>
 800b8c4:	e005      	b.n	800b8d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fa4d 	bl	800bd66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 fa5e 	bl	800bd8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d020      	beq.n	800b924 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f003 0304 	and.w	r3, r3, #4
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01b      	beq.n	800b924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f06f 0204 	mvn.w	r2, #4
 800b8f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2202      	movs	r2, #2
 800b8fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	699b      	ldr	r3, [r3, #24]
 800b902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 fa35 	bl	800bd7a <HAL_TIM_IC_CaptureCallback>
 800b910:	e005      	b.n	800b91e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa27 	bl	800bd66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fa38 	bl	800bd8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	f003 0308 	and.w	r3, r3, #8
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d020      	beq.n	800b970 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	2b00      	cmp	r3, #0
 800b936:	d01b      	beq.n	800b970 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f06f 0208 	mvn.w	r2, #8
 800b940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2204      	movs	r2, #4
 800b946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	69db      	ldr	r3, [r3, #28]
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b00      	cmp	r3, #0
 800b954:	d003      	beq.n	800b95e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa0f 	bl	800bd7a <HAL_TIM_IC_CaptureCallback>
 800b95c:	e005      	b.n	800b96a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fa01 	bl	800bd66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f000 fa12 	bl	800bd8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f003 0310 	and.w	r3, r3, #16
 800b976:	2b00      	cmp	r3, #0
 800b978:	d020      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f003 0310 	and.w	r3, r3, #16
 800b980:	2b00      	cmp	r3, #0
 800b982:	d01b      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f06f 0210 	mvn.w	r2, #16
 800b98c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2208      	movs	r2, #8
 800b992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	69db      	ldr	r3, [r3, #28]
 800b99a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d003      	beq.n	800b9aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f9e9 	bl	800bd7a <HAL_TIM_IC_CaptureCallback>
 800b9a8:	e005      	b.n	800b9b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f9db 	bl	800bd66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f000 f9ec 	bl	800bd8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0201 	mvn.w	r2, #1
 800b9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7f8 f8ba 	bl	8003b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fdce 	bl	800c5a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00c      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d007      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f9bd 	bl	800bda2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	f003 0320 	and.w	r3, r3, #32
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00c      	beq.n	800ba4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f003 0320 	and.w	r3, r3, #32
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f06f 0220 	mvn.w	r2, #32
 800ba44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fda0 	bl	800c58c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba4c:	bf00      	nop
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d101      	bne.n	800ba72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba6e:	2302      	movs	r3, #2
 800ba70:	e0ae      	b.n	800bbd0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2b0c      	cmp	r3, #12
 800ba7e:	f200 809f 	bhi.w	800bbc0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ba82:	a201      	add	r2, pc, #4	; (adr r2, 800ba88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba88:	0800babd 	.word	0x0800babd
 800ba8c:	0800bbc1 	.word	0x0800bbc1
 800ba90:	0800bbc1 	.word	0x0800bbc1
 800ba94:	0800bbc1 	.word	0x0800bbc1
 800ba98:	0800bafd 	.word	0x0800bafd
 800ba9c:	0800bbc1 	.word	0x0800bbc1
 800baa0:	0800bbc1 	.word	0x0800bbc1
 800baa4:	0800bbc1 	.word	0x0800bbc1
 800baa8:	0800bb3f 	.word	0x0800bb3f
 800baac:	0800bbc1 	.word	0x0800bbc1
 800bab0:	0800bbc1 	.word	0x0800bbc1
 800bab4:	0800bbc1 	.word	0x0800bbc1
 800bab8:	0800bb7f 	.word	0x0800bb7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	68b9      	ldr	r1, [r7, #8]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f000 fa24 	bl	800bf10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	699a      	ldr	r2, [r3, #24]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f042 0208 	orr.w	r2, r2, #8
 800bad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	699a      	ldr	r2, [r3, #24]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f022 0204 	bic.w	r2, r2, #4
 800bae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	6999      	ldr	r1, [r3, #24]
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	691a      	ldr	r2, [r3, #16]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	430a      	orrs	r2, r1
 800baf8:	619a      	str	r2, [r3, #24]
      break;
 800bafa:	e064      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	68b9      	ldr	r1, [r7, #8]
 800bb02:	4618      	mov	r0, r3
 800bb04:	f000 fa74 	bl	800bff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	699a      	ldr	r2, [r3, #24]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	6999      	ldr	r1, [r3, #24]
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	021a      	lsls	r2, r3, #8
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	430a      	orrs	r2, r1
 800bb3a:	619a      	str	r2, [r3, #24]
      break;
 800bb3c:	e043      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	68b9      	ldr	r1, [r7, #8]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 fac9 	bl	800c0dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	69da      	ldr	r2, [r3, #28]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f042 0208 	orr.w	r2, r2, #8
 800bb58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	69da      	ldr	r2, [r3, #28]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f022 0204 	bic.w	r2, r2, #4
 800bb68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	69d9      	ldr	r1, [r3, #28]
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	691a      	ldr	r2, [r3, #16]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	61da      	str	r2, [r3, #28]
      break;
 800bb7c:	e023      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fb1d 	bl	800c1c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69da      	ldr	r2, [r3, #28]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	69da      	ldr	r2, [r3, #28]
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	69d9      	ldr	r1, [r3, #28]
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	021a      	lsls	r2, r3, #8
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	61da      	str	r2, [r3, #28]
      break;
 800bbbe:	e002      	b.n	800bbc6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	75fb      	strb	r3, [r7, #23]
      break;
 800bbc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d101      	bne.n	800bbf4 <HAL_TIM_ConfigClockSource+0x1c>
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	e0b4      	b.n	800bd5e <HAL_TIM_ConfigClockSource+0x186>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2202      	movs	r2, #2
 800bc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc2c:	d03e      	beq.n	800bcac <HAL_TIM_ConfigClockSource+0xd4>
 800bc2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc32:	f200 8087 	bhi.w	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc3a:	f000 8086 	beq.w	800bd4a <HAL_TIM_ConfigClockSource+0x172>
 800bc3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc42:	d87f      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc44:	2b70      	cmp	r3, #112	; 0x70
 800bc46:	d01a      	beq.n	800bc7e <HAL_TIM_ConfigClockSource+0xa6>
 800bc48:	2b70      	cmp	r3, #112	; 0x70
 800bc4a:	d87b      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc4c:	2b60      	cmp	r3, #96	; 0x60
 800bc4e:	d050      	beq.n	800bcf2 <HAL_TIM_ConfigClockSource+0x11a>
 800bc50:	2b60      	cmp	r3, #96	; 0x60
 800bc52:	d877      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc54:	2b50      	cmp	r3, #80	; 0x50
 800bc56:	d03c      	beq.n	800bcd2 <HAL_TIM_ConfigClockSource+0xfa>
 800bc58:	2b50      	cmp	r3, #80	; 0x50
 800bc5a:	d873      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc5c:	2b40      	cmp	r3, #64	; 0x40
 800bc5e:	d058      	beq.n	800bd12 <HAL_TIM_ConfigClockSource+0x13a>
 800bc60:	2b40      	cmp	r3, #64	; 0x40
 800bc62:	d86f      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc64:	2b30      	cmp	r3, #48	; 0x30
 800bc66:	d064      	beq.n	800bd32 <HAL_TIM_ConfigClockSource+0x15a>
 800bc68:	2b30      	cmp	r3, #48	; 0x30
 800bc6a:	d86b      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc6c:	2b20      	cmp	r3, #32
 800bc6e:	d060      	beq.n	800bd32 <HAL_TIM_ConfigClockSource+0x15a>
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	d867      	bhi.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d05c      	beq.n	800bd32 <HAL_TIM_ConfigClockSource+0x15a>
 800bc78:	2b10      	cmp	r3, #16
 800bc7a:	d05a      	beq.n	800bd32 <HAL_TIM_ConfigClockSource+0x15a>
 800bc7c:	e062      	b.n	800bd44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc8e:	f000 fb69 	bl	800c364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bca0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	609a      	str	r2, [r3, #8]
      break;
 800bcaa:	e04f      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bcbc:	f000 fb52 	bl	800c364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	689a      	ldr	r2, [r3, #8]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcce:	609a      	str	r2, [r3, #8]
      break;
 800bcd0:	e03c      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcde:	461a      	mov	r2, r3
 800bce0:	f000 fac6 	bl	800c270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2150      	movs	r1, #80	; 0x50
 800bcea:	4618      	mov	r0, r3
 800bcec:	f000 fb1f 	bl	800c32e <TIM_ITRx_SetConfig>
      break;
 800bcf0:	e02c      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f000 fae5 	bl	800c2ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2160      	movs	r1, #96	; 0x60
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f000 fb0f 	bl	800c32e <TIM_ITRx_SetConfig>
      break;
 800bd10:	e01c      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd1e:	461a      	mov	r2, r3
 800bd20:	f000 faa6 	bl	800c270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2140      	movs	r1, #64	; 0x40
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 faff 	bl	800c32e <TIM_ITRx_SetConfig>
      break;
 800bd30:	e00c      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f000 faf6 	bl	800c32e <TIM_ITRx_SetConfig>
      break;
 800bd42:	e003      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd44:	2301      	movs	r3, #1
 800bd46:	73fb      	strb	r3, [r7, #15]
      break;
 800bd48:	e000      	b.n	800bd4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}

0800bd66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b083      	sub	sp, #12
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd6e:	bf00      	nop
 800bd70:	370c      	adds	r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd78:	4770      	bx	lr

0800bd7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b083      	sub	sp, #12
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b083      	sub	sp, #12
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
	...

0800bdb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b085      	sub	sp, #20
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a46      	ldr	r2, [pc, #280]	; (800bee4 <TIM_Base_SetConfig+0x12c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d013      	beq.n	800bdf8 <TIM_Base_SetConfig+0x40>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdd6:	d00f      	beq.n	800bdf8 <TIM_Base_SetConfig+0x40>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	4a43      	ldr	r2, [pc, #268]	; (800bee8 <TIM_Base_SetConfig+0x130>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d00b      	beq.n	800bdf8 <TIM_Base_SetConfig+0x40>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a42      	ldr	r2, [pc, #264]	; (800beec <TIM_Base_SetConfig+0x134>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d007      	beq.n	800bdf8 <TIM_Base_SetConfig+0x40>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a41      	ldr	r2, [pc, #260]	; (800bef0 <TIM_Base_SetConfig+0x138>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d003      	beq.n	800bdf8 <TIM_Base_SetConfig+0x40>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a40      	ldr	r2, [pc, #256]	; (800bef4 <TIM_Base_SetConfig+0x13c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d108      	bne.n	800be0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	4313      	orrs	r3, r2
 800be08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a35      	ldr	r2, [pc, #212]	; (800bee4 <TIM_Base_SetConfig+0x12c>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d02b      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be18:	d027      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	4a32      	ldr	r2, [pc, #200]	; (800bee8 <TIM_Base_SetConfig+0x130>)
 800be1e:	4293      	cmp	r3, r2
 800be20:	d023      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a31      	ldr	r2, [pc, #196]	; (800beec <TIM_Base_SetConfig+0x134>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d01f      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a30      	ldr	r2, [pc, #192]	; (800bef0 <TIM_Base_SetConfig+0x138>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d01b      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a2f      	ldr	r2, [pc, #188]	; (800bef4 <TIM_Base_SetConfig+0x13c>)
 800be36:	4293      	cmp	r3, r2
 800be38:	d017      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	4a2e      	ldr	r2, [pc, #184]	; (800bef8 <TIM_Base_SetConfig+0x140>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d013      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	4a2d      	ldr	r2, [pc, #180]	; (800befc <TIM_Base_SetConfig+0x144>)
 800be46:	4293      	cmp	r3, r2
 800be48:	d00f      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a2c      	ldr	r2, [pc, #176]	; (800bf00 <TIM_Base_SetConfig+0x148>)
 800be4e:	4293      	cmp	r3, r2
 800be50:	d00b      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a2b      	ldr	r2, [pc, #172]	; (800bf04 <TIM_Base_SetConfig+0x14c>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d007      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a2a      	ldr	r2, [pc, #168]	; (800bf08 <TIM_Base_SetConfig+0x150>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d003      	beq.n	800be6a <TIM_Base_SetConfig+0xb2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a29      	ldr	r2, [pc, #164]	; (800bf0c <TIM_Base_SetConfig+0x154>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d108      	bne.n	800be7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4313      	orrs	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	4313      	orrs	r3, r2
 800be88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	689a      	ldr	r2, [r3, #8]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	4a10      	ldr	r2, [pc, #64]	; (800bee4 <TIM_Base_SetConfig+0x12c>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d003      	beq.n	800beb0 <TIM_Base_SetConfig+0xf8>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a12      	ldr	r2, [pc, #72]	; (800bef4 <TIM_Base_SetConfig+0x13c>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d103      	bne.n	800beb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	691a      	ldr	r2, [r3, #16]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d105      	bne.n	800bed6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f023 0201 	bic.w	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	611a      	str	r2, [r3, #16]
  }
}
 800bed6:	bf00      	nop
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	40010000 	.word	0x40010000
 800bee8:	40000400 	.word	0x40000400
 800beec:	40000800 	.word	0x40000800
 800bef0:	40000c00 	.word	0x40000c00
 800bef4:	40010400 	.word	0x40010400
 800bef8:	40014000 	.word	0x40014000
 800befc:	40014400 	.word	0x40014400
 800bf00:	40014800 	.word	0x40014800
 800bf04:	40001800 	.word	0x40001800
 800bf08:	40001c00 	.word	0x40001c00
 800bf0c:	40002000 	.word	0x40002000

0800bf10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6a1b      	ldr	r3, [r3, #32]
 800bf24:	f023 0201 	bic.w	r2, r3, #1
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f023 0302 	bic.w	r3, r3, #2
 800bf58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a20      	ldr	r2, [pc, #128]	; (800bfe8 <TIM_OC1_SetConfig+0xd8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d003      	beq.n	800bf74 <TIM_OC1_SetConfig+0x64>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a1f      	ldr	r2, [pc, #124]	; (800bfec <TIM_OC1_SetConfig+0xdc>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d10c      	bne.n	800bf8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	f023 0308 	bic.w	r3, r3, #8
 800bf7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	4313      	orrs	r3, r2
 800bf84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f023 0304 	bic.w	r3, r3, #4
 800bf8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a15      	ldr	r2, [pc, #84]	; (800bfe8 <TIM_OC1_SetConfig+0xd8>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d003      	beq.n	800bf9e <TIM_OC1_SetConfig+0x8e>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a14      	ldr	r2, [pc, #80]	; (800bfec <TIM_OC1_SetConfig+0xdc>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d111      	bne.n	800bfc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	693a      	ldr	r2, [r7, #16]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	685a      	ldr	r2, [r3, #4]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	697a      	ldr	r2, [r7, #20]
 800bfda:	621a      	str	r2, [r3, #32]
}
 800bfdc:	bf00      	nop
 800bfde:	371c      	adds	r7, #28
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	40010000 	.word	0x40010000
 800bfec:	40010400 	.word	0x40010400

0800bff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b087      	sub	sp, #28
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	f023 0210 	bic.w	r2, r3, #16
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	021b      	lsls	r3, r3, #8
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	4313      	orrs	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f023 0320 	bic.w	r3, r3, #32
 800c03a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	011b      	lsls	r3, r3, #4
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	4313      	orrs	r3, r2
 800c046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	4a22      	ldr	r2, [pc, #136]	; (800c0d4 <TIM_OC2_SetConfig+0xe4>)
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d003      	beq.n	800c058 <TIM_OC2_SetConfig+0x68>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a21      	ldr	r2, [pc, #132]	; (800c0d8 <TIM_OC2_SetConfig+0xe8>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d10d      	bne.n	800c074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c05e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	011b      	lsls	r3, r3, #4
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a17      	ldr	r2, [pc, #92]	; (800c0d4 <TIM_OC2_SetConfig+0xe4>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d003      	beq.n	800c084 <TIM_OC2_SetConfig+0x94>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a16      	ldr	r2, [pc, #88]	; (800c0d8 <TIM_OC2_SetConfig+0xe8>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d113      	bne.n	800c0ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c08a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	685a      	ldr	r2, [r3, #4]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	621a      	str	r2, [r3, #32]
}
 800c0c6:	bf00      	nop
 800c0c8:	371c      	adds	r7, #28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr
 800c0d2:	bf00      	nop
 800c0d4:	40010000 	.word	0x40010000
 800c0d8:	40010400 	.word	0x40010400

0800c0dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	69db      	ldr	r3, [r3, #28]
 800c102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	021b      	lsls	r3, r3, #8
 800c12c:	697a      	ldr	r2, [r7, #20]
 800c12e:	4313      	orrs	r3, r2
 800c130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a21      	ldr	r2, [pc, #132]	; (800c1bc <TIM_OC3_SetConfig+0xe0>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d003      	beq.n	800c142 <TIM_OC3_SetConfig+0x66>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4a20      	ldr	r2, [pc, #128]	; (800c1c0 <TIM_OC3_SetConfig+0xe4>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d10d      	bne.n	800c15e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	021b      	lsls	r3, r3, #8
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	4313      	orrs	r3, r2
 800c154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c15c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a16      	ldr	r2, [pc, #88]	; (800c1bc <TIM_OC3_SetConfig+0xe0>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d003      	beq.n	800c16e <TIM_OC3_SetConfig+0x92>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a15      	ldr	r2, [pc, #84]	; (800c1c0 <TIM_OC3_SetConfig+0xe4>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d113      	bne.n	800c196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c17c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	011b      	lsls	r3, r3, #4
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	4313      	orrs	r3, r2
 800c188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	011b      	lsls	r3, r3, #4
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	4313      	orrs	r3, r2
 800c194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	693a      	ldr	r2, [r7, #16]
 800c19a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	685a      	ldr	r2, [r3, #4]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	621a      	str	r2, [r3, #32]
}
 800c1b0:	bf00      	nop
 800c1b2:	371c      	adds	r7, #28
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	40010000 	.word	0x40010000
 800c1c0:	40010400 	.word	0x40010400

0800c1c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6a1b      	ldr	r3, [r3, #32]
 800c1d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	021b      	lsls	r3, r3, #8
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	4313      	orrs	r3, r2
 800c206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c20e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	031b      	lsls	r3, r3, #12
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	4313      	orrs	r3, r2
 800c21a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a12      	ldr	r2, [pc, #72]	; (800c268 <TIM_OC4_SetConfig+0xa4>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d003      	beq.n	800c22c <TIM_OC4_SetConfig+0x68>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a11      	ldr	r2, [pc, #68]	; (800c26c <TIM_OC4_SetConfig+0xa8>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d109      	bne.n	800c240 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	695b      	ldr	r3, [r3, #20]
 800c238:	019b      	lsls	r3, r3, #6
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	697a      	ldr	r2, [r7, #20]
 800c244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68fa      	ldr	r2, [r7, #12]
 800c24a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	685a      	ldr	r2, [r3, #4]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	621a      	str	r2, [r3, #32]
}
 800c25a:	bf00      	nop
 800c25c:	371c      	adds	r7, #28
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	40010000 	.word	0x40010000
 800c26c:	40010400 	.word	0x40010400

0800c270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	f023 0201 	bic.w	r2, r3, #1
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f023 030a 	bic.w	r3, r3, #10
 800c2ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	693a      	ldr	r2, [r7, #16]
 800c2ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	621a      	str	r2, [r3, #32]
}
 800c2c2:	bf00      	nop
 800c2c4:	371c      	adds	r7, #28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b087      	sub	sp, #28
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6a1b      	ldr	r3, [r3, #32]
 800c2e4:	f023 0210 	bic.w	r2, r3, #16
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	699b      	ldr	r3, [r3, #24]
 800c2f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	031b      	lsls	r3, r3, #12
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	4313      	orrs	r3, r2
 800c302:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c30a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	011b      	lsls	r3, r3, #4
 800c310:	697a      	ldr	r2, [r7, #20]
 800c312:	4313      	orrs	r3, r2
 800c314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	621a      	str	r2, [r3, #32]
}
 800c322:	bf00      	nop
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr

0800c32e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c32e:	b480      	push	{r7}
 800c330:	b085      	sub	sp, #20
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	689b      	ldr	r3, [r3, #8]
 800c33c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	f043 0307 	orr.w	r3, r3, #7
 800c350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68fa      	ldr	r2, [r7, #12]
 800c356:	609a      	str	r2, [r3, #8]
}
 800c358:	bf00      	nop
 800c35a:	3714      	adds	r7, #20
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c364:	b480      	push	{r7}
 800c366:	b087      	sub	sp, #28
 800c368:	af00      	add	r7, sp, #0
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	60b9      	str	r1, [r7, #8]
 800c36e:	607a      	str	r2, [r7, #4]
 800c370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c37e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	021a      	lsls	r2, r3, #8
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	431a      	orrs	r2, r3
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4313      	orrs	r3, r2
 800c390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	609a      	str	r2, [r3, #8]
}
 800c398:	bf00      	nop
 800c39a:	371c      	adds	r7, #28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b087      	sub	sp, #28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f003 031f 	and.w	r3, r3, #31
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6a1a      	ldr	r2, [r3, #32]
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	43db      	mvns	r3, r3
 800c3c6:	401a      	ands	r2, r3
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6a1a      	ldr	r2, [r3, #32]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	f003 031f 	and.w	r3, r3, #31
 800c3d6:	6879      	ldr	r1, [r7, #4]
 800c3d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3dc:	431a      	orrs	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	621a      	str	r2, [r3, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
	...

0800c3f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c400:	2b01      	cmp	r3, #1
 800c402:	d101      	bne.n	800c408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c404:	2302      	movs	r3, #2
 800c406:	e05a      	b.n	800c4be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2202      	movs	r2, #2
 800c414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c42e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	4313      	orrs	r3, r2
 800c438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a21      	ldr	r2, [pc, #132]	; (800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d022      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c454:	d01d      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a1d      	ldr	r2, [pc, #116]	; (800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d018      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a1b      	ldr	r2, [pc, #108]	; (800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d013      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a1a      	ldr	r2, [pc, #104]	; (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d00e      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a18      	ldr	r2, [pc, #96]	; (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d009      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a17      	ldr	r2, [pc, #92]	; (800c4e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d004      	beq.n	800c492 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a15      	ldr	r2, [pc, #84]	; (800c4e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d10c      	bne.n	800c4ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c498:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	68ba      	ldr	r2, [r7, #8]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	68ba      	ldr	r2, [r7, #8]
 800c4aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	40010000 	.word	0x40010000
 800c4d0:	40000400 	.word	0x40000400
 800c4d4:	40000800 	.word	0x40000800
 800c4d8:	40000c00 	.word	0x40000c00
 800c4dc:	40010400 	.word	0x40010400
 800c4e0:	40014000 	.word	0x40014000
 800c4e4:	40001800 	.word	0x40001800

0800c4e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d101      	bne.n	800c504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c500:	2302      	movs	r3, #2
 800c502:	e03d      	b.n	800c580 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2201      	movs	r2, #1
 800c508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	4313      	orrs	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	4313      	orrs	r3, r2
 800c526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	4313      	orrs	r3, r2
 800c534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4313      	orrs	r3, r2
 800c542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	691b      	ldr	r3, [r3, #16]
 800c54e:	4313      	orrs	r3, r2
 800c550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	69db      	ldr	r3, [r3, #28]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c594:	bf00      	nop
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5a8:	bf00      	nop
 800c5aa:	370c      	adds	r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d101      	bne.n	800c5c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e042      	b.n	800c64c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7fb ff20 	bl	8008420 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2224      	movs	r2, #36	; 0x24
 800c5e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	68da      	ldr	r2, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f001 f825 	bl	800d648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	691a      	ldr	r2, [r3, #16]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c60c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c61c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68da      	ldr	r2, [r3, #12]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c62c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2220      	movs	r2, #32
 800c638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2220      	movs	r2, #32
 800c640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08a      	sub	sp, #40	; 0x28
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	603b      	str	r3, [r7, #0]
 800c660:	4613      	mov	r3, r2
 800c662:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c664:	2300      	movs	r3, #0
 800c666:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b20      	cmp	r3, #32
 800c672:	d175      	bne.n	800c760 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d002      	beq.n	800c680 <HAL_UART_Transmit+0x2c>
 800c67a:	88fb      	ldrh	r3, [r7, #6]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e06e      	b.n	800c762 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2221      	movs	r2, #33	; 0x21
 800c68e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c692:	f7fc f8d9 	bl	8008848 <HAL_GetTick>
 800c696:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	88fa      	ldrh	r2, [r7, #6]
 800c69c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	88fa      	ldrh	r2, [r7, #6]
 800c6a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	689b      	ldr	r3, [r3, #8]
 800c6a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6ac:	d108      	bne.n	800c6c0 <HAL_UART_Transmit+0x6c>
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	691b      	ldr	r3, [r3, #16]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d104      	bne.n	800c6c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	61bb      	str	r3, [r7, #24]
 800c6be:	e003      	b.n	800c6c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c6c8:	e02e      	b.n	800c728 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2180      	movs	r1, #128	; 0x80
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f000 fcfe 	bl	800d0d6 <UART_WaitOnFlagUntilTimeout>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d005      	beq.n	800c6ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e03a      	b.n	800c762 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10b      	bne.n	800c70a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c700:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	3302      	adds	r3, #2
 800c706:	61bb      	str	r3, [r7, #24]
 800c708:	e007      	b.n	800c71a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	781a      	ldrb	r2, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c714:	69fb      	ldr	r3, [r7, #28]
 800c716:	3301      	adds	r3, #1
 800c718:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c71e:	b29b      	uxth	r3, r3
 800c720:	3b01      	subs	r3, #1
 800c722:	b29a      	uxth	r2, r3
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1cb      	bne.n	800c6ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	9300      	str	r3, [sp, #0]
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	2200      	movs	r2, #0
 800c73a:	2140      	movs	r1, #64	; 0x40
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f000 fcca 	bl	800d0d6 <UART_WaitOnFlagUntilTimeout>
 800c742:	4603      	mov	r3, r0
 800c744:	2b00      	cmp	r3, #0
 800c746:	d005      	beq.n	800c754 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2220      	movs	r2, #32
 800c74c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e006      	b.n	800c762 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2220      	movs	r2, #32
 800c758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800c75c:	2300      	movs	r3, #0
 800c75e:	e000      	b.n	800c762 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c760:	2302      	movs	r3, #2
  }
}
 800c762:	4618      	mov	r0, r3
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
	...

0800c76c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08c      	sub	sp, #48	; 0x30
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	4613      	mov	r3, r2
 800c778:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c780:	b2db      	uxtb	r3, r3
 800c782:	2b20      	cmp	r3, #32
 800c784:	d156      	bne.n	800c834 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d002      	beq.n	800c792 <HAL_UART_Transmit_DMA+0x26>
 800c78c:	88fb      	ldrh	r3, [r7, #6]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d101      	bne.n	800c796 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c792:	2301      	movs	r3, #1
 800c794:	e04f      	b.n	800c836 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	88fa      	ldrh	r2, [r7, #6]
 800c7a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	88fa      	ldrh	r2, [r7, #6]
 800c7a6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2221      	movs	r2, #33	; 0x21
 800c7b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ba:	4a21      	ldr	r2, [pc, #132]	; (800c840 <HAL_UART_Transmit_DMA+0xd4>)
 800c7bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7c2:	4a20      	ldr	r2, [pc, #128]	; (800c844 <HAL_UART_Transmit_DMA+0xd8>)
 800c7c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	4a1f      	ldr	r2, [pc, #124]	; (800c848 <HAL_UART_Transmit_DMA+0xdc>)
 800c7cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c7d6:	f107 0308 	add.w	r3, r7, #8
 800c7da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	6819      	ldr	r1, [r3, #0]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	88fb      	ldrh	r3, [r7, #6]
 800c7ee:	f7fc fdeb 	bl	80093c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c7fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3314      	adds	r3, #20
 800c802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	e853 3f00 	ldrex	r3, [r3]
 800c80a:	617b      	str	r3, [r7, #20]
   return(result);
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c812:	62bb      	str	r3, [r7, #40]	; 0x28
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	3314      	adds	r3, #20
 800c81a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c81c:	627a      	str	r2, [r7, #36]	; 0x24
 800c81e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c820:	6a39      	ldr	r1, [r7, #32]
 800c822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c824:	e841 2300 	strex	r3, r2, [r1]
 800c828:	61fb      	str	r3, [r7, #28]
   return(result);
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1e5      	bne.n	800c7fc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c830:	2300      	movs	r3, #0
 800c832:	e000      	b.n	800c836 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c834:	2302      	movs	r3, #2
  }
}
 800c836:	4618      	mov	r0, r3
 800c838:	3730      	adds	r7, #48	; 0x30
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	0800ce25 	.word	0x0800ce25
 800c844:	0800cebf 	.word	0x0800cebf
 800c848:	0800d043 	.word	0x0800d043

0800c84c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b20      	cmp	r3, #32
 800c864:	d112      	bne.n	800c88c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d002      	beq.n	800c872 <HAL_UART_Receive_DMA+0x26>
 800c86c:	88fb      	ldrh	r3, [r7, #6]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	e00b      	b.n	800c88e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c87c:	88fb      	ldrh	r3, [r7, #6]
 800c87e:	461a      	mov	r2, r3
 800c880:	68b9      	ldr	r1, [r7, #8]
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f000 fc80 	bl	800d188 <UART_Start_Receive_DMA>
 800c888:	4603      	mov	r3, r0
 800c88a:	e000      	b.n	800c88e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c88c:	2302      	movs	r3, #2
  }
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b0ba      	sub	sp, #232	; 0xe8
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68db      	ldr	r3, [r3, #12]
 800c8b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8ce:	f003 030f 	and.w	r3, r3, #15
 800c8d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c8d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10f      	bne.n	800c8fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8e2:	f003 0320 	and.w	r3, r3, #32
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d009      	beq.n	800c8fe <HAL_UART_IRQHandler+0x66>
 800c8ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8ee:	f003 0320 	and.w	r3, r3, #32
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d003      	beq.n	800c8fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 fde7 	bl	800d4ca <UART_Receive_IT>
      return;
 800c8fc:	e25b      	b.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c8fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80de 	beq.w	800cac4 <HAL_UART_IRQHandler+0x22c>
 800c908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c90c:	f003 0301 	and.w	r3, r3, #1
 800c910:	2b00      	cmp	r3, #0
 800c912:	d106      	bne.n	800c922 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c918:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 80d1 	beq.w	800cac4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <HAL_UART_IRQHandler+0xae>
 800c92e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c93e:	f043 0201 	orr.w	r2, r3, #1
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c94a:	f003 0304 	and.w	r3, r3, #4
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00b      	beq.n	800c96a <HAL_UART_IRQHandler+0xd2>
 800c952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c956:	f003 0301 	and.w	r3, r3, #1
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d005      	beq.n	800c96a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c962:	f043 0202 	orr.w	r2, r3, #2
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c96a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00b      	beq.n	800c98e <HAL_UART_IRQHandler+0xf6>
 800c976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c986:	f043 0204 	orr.w	r2, r3, #4
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c992:	f003 0308 	and.w	r3, r3, #8
 800c996:	2b00      	cmp	r3, #0
 800c998:	d011      	beq.n	800c9be <HAL_UART_IRQHandler+0x126>
 800c99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c99e:	f003 0320 	and.w	r3, r3, #32
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d105      	bne.n	800c9b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c9a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9aa:	f003 0301 	and.w	r3, r3, #1
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d005      	beq.n	800c9be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b6:	f043 0208 	orr.w	r2, r3, #8
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f000 81f2 	beq.w	800cdac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9cc:	f003 0320 	and.w	r3, r3, #32
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d008      	beq.n	800c9e6 <HAL_UART_IRQHandler+0x14e>
 800c9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9d8:	f003 0320 	and.w	r3, r3, #32
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fd72 	bl	800d4ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f0:	2b40      	cmp	r3, #64	; 0x40
 800c9f2:	bf0c      	ite	eq
 800c9f4:	2301      	moveq	r3, #1
 800c9f6:	2300      	movne	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca02:	f003 0308 	and.w	r3, r3, #8
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d103      	bne.n	800ca12 <HAL_UART_IRQHandler+0x17a>
 800ca0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d04f      	beq.n	800cab2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f000 fc7a 	bl	800d30c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	695b      	ldr	r3, [r3, #20]
 800ca1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca22:	2b40      	cmp	r3, #64	; 0x40
 800ca24:	d141      	bne.n	800caaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	3314      	adds	r3, #20
 800ca2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca34:	e853 3f00 	ldrex	r3, [r3]
 800ca38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ca3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ca40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3314      	adds	r3, #20
 800ca4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ca52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ca56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ca5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ca62:	e841 2300 	strex	r3, r2, [r1]
 800ca66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ca6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1d9      	bne.n	800ca26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d013      	beq.n	800caa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7e:	4a7e      	ldr	r2, [pc, #504]	; (800cc78 <HAL_UART_IRQHandler+0x3e0>)
 800ca80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca86:	4618      	mov	r0, r3
 800ca88:	f7fc fd66 	bl	8009558 <HAL_DMA_Abort_IT>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d016      	beq.n	800cac0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caa0:	e00e      	b.n	800cac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 f9a8 	bl	800cdf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800caa8:	e00a      	b.n	800cac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f9a4 	bl	800cdf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cab0:	e006      	b.n	800cac0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 f9a0 	bl	800cdf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800cabe:	e175      	b.n	800cdac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cac0:	bf00      	nop
    return;
 800cac2:	e173      	b.n	800cdac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac8:	2b01      	cmp	r3, #1
 800caca:	f040 814f 	bne.w	800cd6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad2:	f003 0310 	and.w	r3, r3, #16
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	f000 8148 	beq.w	800cd6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cadc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cae0:	f003 0310 	and.w	r3, r3, #16
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f000 8141 	beq.w	800cd6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800caea:	2300      	movs	r3, #0
 800caec:	60bb      	str	r3, [r7, #8]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	60bb      	str	r3, [r7, #8]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	60bb      	str	r3, [r7, #8]
 800cafe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb0a:	2b40      	cmp	r3, #64	; 0x40
 800cb0c:	f040 80b6 	bne.w	800cc7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cb1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f000 8145 	beq.w	800cdb0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	f080 813e 	bcs.w	800cdb0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb46:	f000 8088 	beq.w	800cc5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	330c      	adds	r3, #12
 800cb50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb58:	e853 3f00 	ldrex	r3, [r3]
 800cb5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cb60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	330c      	adds	r3, #12
 800cb72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cb76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cb7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cb82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cb86:	e841 2300 	strex	r3, r2, [r1]
 800cb8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cb8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1d9      	bne.n	800cb4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	3314      	adds	r3, #20
 800cb9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cba0:	e853 3f00 	ldrex	r3, [r3]
 800cba4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cba8:	f023 0301 	bic.w	r3, r3, #1
 800cbac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3314      	adds	r3, #20
 800cbb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cbba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cbbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cbc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cbc6:	e841 2300 	strex	r3, r2, [r1]
 800cbca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cbcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d1e1      	bne.n	800cb96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	3314      	adds	r3, #20
 800cbd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbdc:	e853 3f00 	ldrex	r3, [r3]
 800cbe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cbe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3314      	adds	r3, #20
 800cbf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cbf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cbf8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cbfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbfe:	e841 2300 	strex	r3, r2, [r1]
 800cc02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cc04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e3      	bne.n	800cbd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc22:	e853 3f00 	ldrex	r3, [r3]
 800cc26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc2a:	f023 0310 	bic.w	r3, r3, #16
 800cc2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	330c      	adds	r3, #12
 800cc38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cc3c:	65ba      	str	r2, [r7, #88]	; 0x58
 800cc3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc44:	e841 2300 	strex	r3, r2, [r1]
 800cc48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1e3      	bne.n	800cc18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fc fc0f 	bl	8009478 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2202      	movs	r2, #2
 800cc5e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f8cb 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cc76:	e09b      	b.n	800cdb0 <HAL_UART_IRQHandler+0x518>
 800cc78:	0800d3d3 	.word	0x0800d3d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	1ad3      	subs	r3, r2, r3
 800cc88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 808e 	beq.w	800cdb4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cc98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 8089 	beq.w	800cdb4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	330c      	adds	r3, #12
 800cca8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	e853 3f00 	ldrex	r3, [r3]
 800ccb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ccb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	330c      	adds	r3, #12
 800ccc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ccc6:	647a      	str	r2, [r7, #68]	; 0x44
 800ccc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccce:	e841 2300 	strex	r3, r2, [r1]
 800ccd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ccd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d1e3      	bne.n	800cca2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3314      	adds	r3, #20
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	623b      	str	r3, [r7, #32]
   return(result);
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	f023 0301 	bic.w	r3, r3, #1
 800ccf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3314      	adds	r3, #20
 800ccfa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ccfe:	633a      	str	r2, [r7, #48]	; 0x30
 800cd00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e3      	bne.n	800ccda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2220      	movs	r2, #32
 800cd16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	330c      	adds	r3, #12
 800cd26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	e853 3f00 	ldrex	r3, [r3]
 800cd2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f023 0310 	bic.w	r3, r3, #16
 800cd36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	330c      	adds	r3, #12
 800cd40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cd44:	61fa      	str	r2, [r7, #28]
 800cd46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd48:	69b9      	ldr	r1, [r7, #24]
 800cd4a:	69fa      	ldr	r2, [r7, #28]
 800cd4c:	e841 2300 	strex	r3, r2, [r1]
 800cd50:	617b      	str	r3, [r7, #20]
   return(result);
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1e3      	bne.n	800cd20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cd5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f851 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cd6a:	e023      	b.n	800cdb4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cd6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d009      	beq.n	800cd8c <HAL_UART_IRQHandler+0x4f4>
 800cd78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f000 fb38 	bl	800d3fa <UART_Transmit_IT>
    return;
 800cd8a:	e014      	b.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cd8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00e      	beq.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
 800cd98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d008      	beq.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f000 fb78 	bl	800d49a <UART_EndTransmit_IT>
    return;
 800cdaa:	e004      	b.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
    return;
 800cdac:	bf00      	nop
 800cdae:	e002      	b.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
      return;
 800cdb0:	bf00      	nop
 800cdb2:	e000      	b.n	800cdb6 <HAL_UART_IRQHandler+0x51e>
      return;
 800cdb4:	bf00      	nop
  }
}
 800cdb6:	37e8      	adds	r7, #232	; 0xe8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b083      	sub	sp, #12
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b083      	sub	sp, #12
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cdd8:	bf00      	nop
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ce00:	bf00      	nop
 800ce02:	370c      	adds	r7, #12
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr

0800ce0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b083      	sub	sp, #12
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr

0800ce24 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b090      	sub	sp, #64	; 0x40
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d137      	bne.n	800ceb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ce40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce42:	2200      	movs	r2, #0
 800ce44:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ce46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3314      	adds	r3, #20
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	623b      	str	r3, [r7, #32]
   return(result);
 800ce56:	6a3b      	ldr	r3, [r7, #32]
 800ce58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce5c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3314      	adds	r3, #20
 800ce64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce66:	633a      	str	r2, [r7, #48]	; 0x30
 800ce68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e5      	bne.n	800ce46 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ce7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	330c      	adds	r3, #12
 800ce80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	e853 3f00 	ldrex	r3, [r3]
 800ce88:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce90:	637b      	str	r3, [r7, #52]	; 0x34
 800ce92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	330c      	adds	r3, #12
 800ce98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce9a:	61fa      	str	r2, [r7, #28]
 800ce9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9e:	69b9      	ldr	r1, [r7, #24]
 800cea0:	69fa      	ldr	r2, [r7, #28]
 800cea2:	e841 2300 	strex	r3, r2, [r1]
 800cea6:	617b      	str	r3, [r7, #20]
   return(result);
 800cea8:	697b      	ldr	r3, [r7, #20]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d1e5      	bne.n	800ce7a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ceae:	e002      	b.n	800ceb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ceb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ceb2:	f7ff ff83 	bl	800cdbc <HAL_UART_TxCpltCallback>
}
 800ceb6:	bf00      	nop
 800ceb8:	3740      	adds	r7, #64	; 0x40
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f7ff ff7f 	bl	800cdd0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ced2:	bf00      	nop
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b09c      	sub	sp, #112	; 0x70
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cee6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d172      	bne.n	800cfdc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cef8:	2200      	movs	r2, #0
 800cefa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cefc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	330c      	adds	r3, #12
 800cf02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf06:	e853 3f00 	ldrex	r3, [r3]
 800cf0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf12:	66bb      	str	r3, [r7, #104]	; 0x68
 800cf14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	330c      	adds	r3, #12
 800cf1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf1c:	65ba      	str	r2, [r7, #88]	; 0x58
 800cf1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf24:	e841 2300 	strex	r3, r2, [r1]
 800cf28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1e5      	bne.n	800cefc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3314      	adds	r3, #20
 800cf36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3a:	e853 3f00 	ldrex	r3, [r3]
 800cf3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf42:	f023 0301 	bic.w	r3, r3, #1
 800cf46:	667b      	str	r3, [r7, #100]	; 0x64
 800cf48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	3314      	adds	r3, #20
 800cf4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cf50:	647a      	str	r2, [r7, #68]	; 0x44
 800cf52:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf58:	e841 2300 	strex	r3, r2, [r1]
 800cf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e5      	bne.n	800cf30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	3314      	adds	r3, #20
 800cf6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	e853 3f00 	ldrex	r3, [r3]
 800cf72:	623b      	str	r3, [r7, #32]
   return(result);
 800cf74:	6a3b      	ldr	r3, [r7, #32]
 800cf76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf7a:	663b      	str	r3, [r7, #96]	; 0x60
 800cf7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3314      	adds	r3, #20
 800cf82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cf84:	633a      	str	r2, [r7, #48]	; 0x30
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8c:	e841 2300 	strex	r3, r2, [r1]
 800cf90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1e5      	bne.n	800cf64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf9a:	2220      	movs	r2, #32
 800cf9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d119      	bne.n	800cfdc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	330c      	adds	r3, #12
 800cfae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	e853 3f00 	ldrex	r3, [r3]
 800cfb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f023 0310 	bic.w	r3, r3, #16
 800cfbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	330c      	adds	r3, #12
 800cfc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfc8:	61fa      	str	r2, [r7, #28]
 800cfca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfcc:	69b9      	ldr	r1, [r7, #24]
 800cfce:	69fa      	ldr	r2, [r7, #28]
 800cfd0:	e841 2300 	strex	r3, r2, [r1]
 800cfd4:	617b      	str	r3, [r7, #20]
   return(result);
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d1e5      	bne.n	800cfa8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfde:	2200      	movs	r2, #0
 800cfe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	2b01      	cmp	r3, #1
 800cfe8:	d106      	bne.n	800cff8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cfea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cfee:	4619      	mov	r1, r3
 800cff0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cff2:	f7ff ff0b 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cff6:	e002      	b.n	800cffe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800cff8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cffa:	f7fa f98d 	bl	8007318 <HAL_UART_RxCpltCallback>
}
 800cffe:	bf00      	nop
 800d000:	3770      	adds	r7, #112	; 0x70
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d012:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2201      	movs	r2, #1
 800d018:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d108      	bne.n	800d034 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d026:	085b      	lsrs	r3, r3, #1
 800d028:	b29b      	uxth	r3, r3
 800d02a:	4619      	mov	r1, r3
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f7ff feed 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d032:	e002      	b.n	800d03a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f7ff fed5 	bl	800cde4 <HAL_UART_RxHalfCpltCallback>
}
 800d03a:	bf00      	nop
 800d03c:	3710      	adds	r7, #16
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b084      	sub	sp, #16
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d052:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	695b      	ldr	r3, [r3, #20]
 800d05a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d05e:	2b80      	cmp	r3, #128	; 0x80
 800d060:	bf0c      	ite	eq
 800d062:	2301      	moveq	r3, #1
 800d064:	2300      	movne	r3, #0
 800d066:	b2db      	uxtb	r3, r3
 800d068:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d070:	b2db      	uxtb	r3, r3
 800d072:	2b21      	cmp	r3, #33	; 0x21
 800d074:	d108      	bne.n	800d088 <UART_DMAError+0x46>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d005      	beq.n	800d088 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	2200      	movs	r2, #0
 800d080:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d082:	68b8      	ldr	r0, [r7, #8]
 800d084:	f000 f91a 	bl	800d2bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	695b      	ldr	r3, [r3, #20]
 800d08e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d092:	2b40      	cmp	r3, #64	; 0x40
 800d094:	bf0c      	ite	eq
 800d096:	2301      	moveq	r3, #1
 800d098:	2300      	movne	r3, #0
 800d09a:	b2db      	uxtb	r3, r3
 800d09c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b22      	cmp	r3, #34	; 0x22
 800d0a8:	d108      	bne.n	800d0bc <UART_DMAError+0x7a>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d005      	beq.n	800d0bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d0b6:	68b8      	ldr	r0, [r7, #8]
 800d0b8:	f000 f928 	bl	800d30c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c0:	f043 0210 	orr.w	r2, r3, #16
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d0c8:	68b8      	ldr	r0, [r7, #8]
 800d0ca:	f7ff fe95 	bl	800cdf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d0ce:	bf00      	nop
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b086      	sub	sp, #24
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	60f8      	str	r0, [r7, #12]
 800d0de:	60b9      	str	r1, [r7, #8]
 800d0e0:	603b      	str	r3, [r7, #0]
 800d0e2:	4613      	mov	r3, r2
 800d0e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0e6:	e03b      	b.n	800d160 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ee:	d037      	beq.n	800d160 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0f0:	f7fb fbaa 	bl	8008848 <HAL_GetTick>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	6a3a      	ldr	r2, [r7, #32]
 800d0fc:	429a      	cmp	r2, r3
 800d0fe:	d302      	bcc.n	800d106 <UART_WaitOnFlagUntilTimeout+0x30>
 800d100:	6a3b      	ldr	r3, [r7, #32]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d101      	bne.n	800d10a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d106:	2303      	movs	r3, #3
 800d108:	e03a      	b.n	800d180 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	68db      	ldr	r3, [r3, #12]
 800d110:	f003 0304 	and.w	r3, r3, #4
 800d114:	2b00      	cmp	r3, #0
 800d116:	d023      	beq.n	800d160 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	2b80      	cmp	r3, #128	; 0x80
 800d11c:	d020      	beq.n	800d160 <UART_WaitOnFlagUntilTimeout+0x8a>
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	2b40      	cmp	r3, #64	; 0x40
 800d122:	d01d      	beq.n	800d160 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0308 	and.w	r3, r3, #8
 800d12e:	2b08      	cmp	r3, #8
 800d130:	d116      	bne.n	800d160 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800d132:	2300      	movs	r3, #0
 800d134:	617b      	str	r3, [r7, #20]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	617b      	str	r3, [r7, #20]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	617b      	str	r3, [r7, #20]
 800d146:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f000 f8df 	bl	800d30c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2208      	movs	r2, #8
 800d152:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e00f      	b.n	800d180 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	4013      	ands	r3, r2
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	bf0c      	ite	eq
 800d170:	2301      	moveq	r3, #1
 800d172:	2300      	movne	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	461a      	mov	r2, r3
 800d178:	79fb      	ldrb	r3, [r7, #7]
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d0b4      	beq.n	800d0e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3718      	adds	r7, #24
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b098      	sub	sp, #96	; 0x60
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	60b9      	str	r1, [r7, #8]
 800d192:	4613      	mov	r3, r2
 800d194:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	88fa      	ldrh	r2, [r7, #6]
 800d1a0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2222      	movs	r2, #34	; 0x22
 800d1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1b4:	4a3e      	ldr	r2, [pc, #248]	; (800d2b0 <UART_Start_Receive_DMA+0x128>)
 800d1b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1bc:	4a3d      	ldr	r2, [pc, #244]	; (800d2b4 <UART_Start_Receive_DMA+0x12c>)
 800d1be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c4:	4a3c      	ldr	r2, [pc, #240]	; (800d2b8 <UART_Start_Receive_DMA+0x130>)
 800d1c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d1d0:	f107 0308 	add.w	r3, r7, #8
 800d1d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3304      	adds	r3, #4
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	88fb      	ldrh	r3, [r7, #6]
 800d1e8:	f7fc f8ee 	bl	80093c8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	613b      	str	r3, [r7, #16]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d019      	beq.n	800d23e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	330c      	adds	r3, #12
 800d210:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d214:	e853 3f00 	ldrex	r3, [r3]
 800d218:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d220:	65bb      	str	r3, [r7, #88]	; 0x58
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	330c      	adds	r3, #12
 800d228:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d22a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d22c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d232:	e841 2300 	strex	r3, r2, [r1]
 800d236:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1e5      	bne.n	800d20a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3314      	adds	r3, #20
 800d244:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d250:	f043 0301 	orr.w	r3, r3, #1
 800d254:	657b      	str	r3, [r7, #84]	; 0x54
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3314      	adds	r3, #20
 800d25c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d25e:	63ba      	str	r2, [r7, #56]	; 0x38
 800d260:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d262:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d266:	e841 2300 	strex	r3, r2, [r1]
 800d26a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1e5      	bne.n	800d23e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	3314      	adds	r3, #20
 800d278:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	e853 3f00 	ldrex	r3, [r3]
 800d280:	617b      	str	r3, [r7, #20]
   return(result);
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d288:	653b      	str	r3, [r7, #80]	; 0x50
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	3314      	adds	r3, #20
 800d290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d292:	627a      	str	r2, [r7, #36]	; 0x24
 800d294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d296:	6a39      	ldr	r1, [r7, #32]
 800d298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d29a:	e841 2300 	strex	r3, r2, [r1]
 800d29e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1e5      	bne.n	800d272 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3760      	adds	r7, #96	; 0x60
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	0800cedb 	.word	0x0800cedb
 800d2b4:	0800d007 	.word	0x0800d007
 800d2b8:	0800d043 	.word	0x0800d043

0800d2bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b089      	sub	sp, #36	; 0x24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	330c      	adds	r3, #12
 800d2ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	e853 3f00 	ldrex	r3, [r3]
 800d2d2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d2da:	61fb      	str	r3, [r7, #28]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	330c      	adds	r3, #12
 800d2e2:	69fa      	ldr	r2, [r7, #28]
 800d2e4:	61ba      	str	r2, [r7, #24]
 800d2e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e8:	6979      	ldr	r1, [r7, #20]
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	e841 2300 	strex	r3, r2, [r1]
 800d2f0:	613b      	str	r3, [r7, #16]
   return(result);
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d1e5      	bne.n	800d2c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800d300:	bf00      	nop
 800d302:	3724      	adds	r7, #36	; 0x24
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr

0800d30c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b095      	sub	sp, #84	; 0x54
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	330c      	adds	r3, #12
 800d31a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d32a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	330c      	adds	r3, #12
 800d332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d334:	643a      	str	r2, [r7, #64]	; 0x40
 800d336:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d33a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e5      	bne.n	800d314 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	3314      	adds	r3, #20
 800d34e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	6a3b      	ldr	r3, [r7, #32]
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	61fb      	str	r3, [r7, #28]
   return(result);
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	f023 0301 	bic.w	r3, r3, #1
 800d35e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	3314      	adds	r3, #20
 800d366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d368:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d36a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d36e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e5      	bne.n	800d348 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d380:	2b01      	cmp	r3, #1
 800d382:	d119      	bne.n	800d3b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	330c      	adds	r3, #12
 800d38a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	e853 3f00 	ldrex	r3, [r3]
 800d392:	60bb      	str	r3, [r7, #8]
   return(result);
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	f023 0310 	bic.w	r3, r3, #16
 800d39a:	647b      	str	r3, [r7, #68]	; 0x44
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	330c      	adds	r3, #12
 800d3a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3a4:	61ba      	str	r2, [r7, #24]
 800d3a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a8:	6979      	ldr	r1, [r7, #20]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	e841 2300 	strex	r3, r2, [r1]
 800d3b0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1e5      	bne.n	800d384 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2220      	movs	r2, #32
 800d3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d3c6:	bf00      	nop
 800d3c8:	3754      	adds	r7, #84	; 0x54
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f7ff fd03 	bl	800cdf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3f2:	bf00      	nop
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b085      	sub	sp, #20
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d408:	b2db      	uxtb	r3, r3
 800d40a:	2b21      	cmp	r3, #33	; 0x21
 800d40c:	d13e      	bne.n	800d48c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	689b      	ldr	r3, [r3, #8]
 800d412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d416:	d114      	bne.n	800d442 <UART_Transmit_IT+0x48>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d110      	bne.n	800d442 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6a1b      	ldr	r3, [r3, #32]
 800d424:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	881b      	ldrh	r3, [r3, #0]
 800d42a:	461a      	mov	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d434:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6a1b      	ldr	r3, [r3, #32]
 800d43a:	1c9a      	adds	r2, r3, #2
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	621a      	str	r2, [r3, #32]
 800d440:	e008      	b.n	800d454 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	1c59      	adds	r1, r3, #1
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	6211      	str	r1, [r2, #32]
 800d44c:	781a      	ldrb	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d458:	b29b      	uxth	r3, r3
 800d45a:	3b01      	subs	r3, #1
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	4619      	mov	r1, r3
 800d462:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10f      	bne.n	800d488 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d476:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68da      	ldr	r2, [r3, #12]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d486:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	e000      	b.n	800d48e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d48c:	2302      	movs	r3, #2
  }
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b082      	sub	sp, #8
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff fc7e 	bl	800cdbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d4c0:	2300      	movs	r3, #0
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b08c      	sub	sp, #48	; 0x30
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b22      	cmp	r3, #34	; 0x22
 800d4dc:	f040 80ae 	bne.w	800d63c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4e8:	d117      	bne.n	800d51a <UART_Receive_IT+0x50>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d113      	bne.n	800d51a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	b29b      	uxth	r3, r3
 800d504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d508:	b29a      	uxth	r2, r3
 800d50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d512:	1c9a      	adds	r2, r3, #2
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	629a      	str	r2, [r3, #40]	; 0x28
 800d518:	e026      	b.n	800d568 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d51e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d520:	2300      	movs	r3, #0
 800d522:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	689b      	ldr	r3, [r3, #8]
 800d528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d52c:	d007      	beq.n	800d53e <UART_Receive_IT+0x74>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10a      	bne.n	800d54c <UART_Receive_IT+0x82>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691b      	ldr	r3, [r3, #16]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	b2da      	uxtb	r2, r3
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	701a      	strb	r2, [r3, #0]
 800d54a:	e008      	b.n	800d55e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	685b      	ldr	r3, [r3, #4]
 800d552:	b2db      	uxtb	r3, r3
 800d554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d558:	b2da      	uxtb	r2, r3
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	3b01      	subs	r3, #1
 800d570:	b29b      	uxth	r3, r3
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	4619      	mov	r1, r3
 800d576:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d15d      	bne.n	800d638 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	68da      	ldr	r2, [r3, #12]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f022 0220 	bic.w	r2, r2, #32
 800d58a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68da      	ldr	r2, [r3, #12]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d59a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	695a      	ldr	r2, [r3, #20]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f022 0201 	bic.w	r2, r2, #1
 800d5aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d135      	bne.n	800d62e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	330c      	adds	r3, #12
 800d5ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	e853 3f00 	ldrex	r3, [r3]
 800d5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	f023 0310 	bic.w	r3, r3, #16
 800d5de:	627b      	str	r3, [r7, #36]	; 0x24
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	330c      	adds	r3, #12
 800d5e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e8:	623a      	str	r2, [r7, #32]
 800d5ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ec:	69f9      	ldr	r1, [r7, #28]
 800d5ee:	6a3a      	ldr	r2, [r7, #32]
 800d5f0:	e841 2300 	strex	r3, r2, [r1]
 800d5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5f6:	69bb      	ldr	r3, [r7, #24]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1e5      	bne.n	800d5c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f003 0310 	and.w	r3, r3, #16
 800d606:	2b10      	cmp	r3, #16
 800d608:	d10a      	bne.n	800d620 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d60a:	2300      	movs	r3, #0
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	60fb      	str	r3, [r7, #12]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	60fb      	str	r3, [r7, #12]
 800d61e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d624:	4619      	mov	r1, r3
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7ff fbf0 	bl	800ce0c <HAL_UARTEx_RxEventCallback>
 800d62c:	e002      	b.n	800d634 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7f9 fe72 	bl	8007318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	e002      	b.n	800d63e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	e000      	b.n	800d63e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d63c:	2302      	movs	r3, #2
  }
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3730      	adds	r7, #48	; 0x30
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
	...

0800d648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d64c:	b0c0      	sub	sp, #256	; 0x100
 800d64e:	af00      	add	r7, sp, #0
 800d650:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	691b      	ldr	r3, [r3, #16]
 800d65c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d664:	68d9      	ldr	r1, [r3, #12]
 800d666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	ea40 0301 	orr.w	r3, r0, r1
 800d670:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d676:	689a      	ldr	r2, [r3, #8]
 800d678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d67c:	691b      	ldr	r3, [r3, #16]
 800d67e:	431a      	orrs	r2, r3
 800d680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d684:	695b      	ldr	r3, [r3, #20]
 800d686:	431a      	orrs	r2, r3
 800d688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	4313      	orrs	r3, r2
 800d690:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d6a0:	f021 010c 	bic.w	r1, r1, #12
 800d6a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6a8:	681a      	ldr	r2, [r3, #0]
 800d6aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d6ae:	430b      	orrs	r3, r1
 800d6b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d6b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	695b      	ldr	r3, [r3, #20]
 800d6ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d6be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6c2:	6999      	ldr	r1, [r3, #24]
 800d6c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	ea40 0301 	orr.w	r3, r0, r1
 800d6ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d6d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	4b8f      	ldr	r3, [pc, #572]	; (800d914 <UART_SetConfig+0x2cc>)
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d005      	beq.n	800d6e8 <UART_SetConfig+0xa0>
 800d6dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	4b8d      	ldr	r3, [pc, #564]	; (800d918 <UART_SetConfig+0x2d0>)
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d104      	bne.n	800d6f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d6e8:	f7fd fa44 	bl	800ab74 <HAL_RCC_GetPCLK2Freq>
 800d6ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d6f0:	e003      	b.n	800d6fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d6f2:	f7fd fa2b 	bl	800ab4c <HAL_RCC_GetPCLK1Freq>
 800d6f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d6fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d6fe:	69db      	ldr	r3, [r3, #28]
 800d700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d704:	f040 810c 	bne.w	800d920 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d708:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d70c:	2200      	movs	r2, #0
 800d70e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d712:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d716:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d71a:	4622      	mov	r2, r4
 800d71c:	462b      	mov	r3, r5
 800d71e:	1891      	adds	r1, r2, r2
 800d720:	65b9      	str	r1, [r7, #88]	; 0x58
 800d722:	415b      	adcs	r3, r3
 800d724:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d726:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d72a:	4621      	mov	r1, r4
 800d72c:	eb12 0801 	adds.w	r8, r2, r1
 800d730:	4629      	mov	r1, r5
 800d732:	eb43 0901 	adc.w	r9, r3, r1
 800d736:	f04f 0200 	mov.w	r2, #0
 800d73a:	f04f 0300 	mov.w	r3, #0
 800d73e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d74a:	4690      	mov	r8, r2
 800d74c:	4699      	mov	r9, r3
 800d74e:	4623      	mov	r3, r4
 800d750:	eb18 0303 	adds.w	r3, r8, r3
 800d754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d758:	462b      	mov	r3, r5
 800d75a:	eb49 0303 	adc.w	r3, r9, r3
 800d75e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d76e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d772:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d776:	460b      	mov	r3, r1
 800d778:	18db      	adds	r3, r3, r3
 800d77a:	653b      	str	r3, [r7, #80]	; 0x50
 800d77c:	4613      	mov	r3, r2
 800d77e:	eb42 0303 	adc.w	r3, r2, r3
 800d782:	657b      	str	r3, [r7, #84]	; 0x54
 800d784:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d788:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d78c:	f7f3 fa8c 	bl	8000ca8 <__aeabi_uldivmod>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4b61      	ldr	r3, [pc, #388]	; (800d91c <UART_SetConfig+0x2d4>)
 800d796:	fba3 2302 	umull	r2, r3, r3, r2
 800d79a:	095b      	lsrs	r3, r3, #5
 800d79c:	011c      	lsls	r4, r3, #4
 800d79e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d7a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d7ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d7b0:	4642      	mov	r2, r8
 800d7b2:	464b      	mov	r3, r9
 800d7b4:	1891      	adds	r1, r2, r2
 800d7b6:	64b9      	str	r1, [r7, #72]	; 0x48
 800d7b8:	415b      	adcs	r3, r3
 800d7ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d7c0:	4641      	mov	r1, r8
 800d7c2:	eb12 0a01 	adds.w	sl, r2, r1
 800d7c6:	4649      	mov	r1, r9
 800d7c8:	eb43 0b01 	adc.w	fp, r3, r1
 800d7cc:	f04f 0200 	mov.w	r2, #0
 800d7d0:	f04f 0300 	mov.w	r3, #0
 800d7d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d7d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d7dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7e0:	4692      	mov	sl, r2
 800d7e2:	469b      	mov	fp, r3
 800d7e4:	4643      	mov	r3, r8
 800d7e6:	eb1a 0303 	adds.w	r3, sl, r3
 800d7ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d7ee:	464b      	mov	r3, r9
 800d7f0:	eb4b 0303 	adc.w	r3, fp, r3
 800d7f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d804:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d808:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d80c:	460b      	mov	r3, r1
 800d80e:	18db      	adds	r3, r3, r3
 800d810:	643b      	str	r3, [r7, #64]	; 0x40
 800d812:	4613      	mov	r3, r2
 800d814:	eb42 0303 	adc.w	r3, r2, r3
 800d818:	647b      	str	r3, [r7, #68]	; 0x44
 800d81a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d81e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d822:	f7f3 fa41 	bl	8000ca8 <__aeabi_uldivmod>
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	4611      	mov	r1, r2
 800d82c:	4b3b      	ldr	r3, [pc, #236]	; (800d91c <UART_SetConfig+0x2d4>)
 800d82e:	fba3 2301 	umull	r2, r3, r3, r1
 800d832:	095b      	lsrs	r3, r3, #5
 800d834:	2264      	movs	r2, #100	; 0x64
 800d836:	fb02 f303 	mul.w	r3, r2, r3
 800d83a:	1acb      	subs	r3, r1, r3
 800d83c:	00db      	lsls	r3, r3, #3
 800d83e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d842:	4b36      	ldr	r3, [pc, #216]	; (800d91c <UART_SetConfig+0x2d4>)
 800d844:	fba3 2302 	umull	r2, r3, r3, r2
 800d848:	095b      	lsrs	r3, r3, #5
 800d84a:	005b      	lsls	r3, r3, #1
 800d84c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d850:	441c      	add	r4, r3
 800d852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d856:	2200      	movs	r2, #0
 800d858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d85c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d860:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d864:	4642      	mov	r2, r8
 800d866:	464b      	mov	r3, r9
 800d868:	1891      	adds	r1, r2, r2
 800d86a:	63b9      	str	r1, [r7, #56]	; 0x38
 800d86c:	415b      	adcs	r3, r3
 800d86e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d874:	4641      	mov	r1, r8
 800d876:	1851      	adds	r1, r2, r1
 800d878:	6339      	str	r1, [r7, #48]	; 0x30
 800d87a:	4649      	mov	r1, r9
 800d87c:	414b      	adcs	r3, r1
 800d87e:	637b      	str	r3, [r7, #52]	; 0x34
 800d880:	f04f 0200 	mov.w	r2, #0
 800d884:	f04f 0300 	mov.w	r3, #0
 800d888:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d88c:	4659      	mov	r1, fp
 800d88e:	00cb      	lsls	r3, r1, #3
 800d890:	4651      	mov	r1, sl
 800d892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d896:	4651      	mov	r1, sl
 800d898:	00ca      	lsls	r2, r1, #3
 800d89a:	4610      	mov	r0, r2
 800d89c:	4619      	mov	r1, r3
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4642      	mov	r2, r8
 800d8a2:	189b      	adds	r3, r3, r2
 800d8a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d8a8:	464b      	mov	r3, r9
 800d8aa:	460a      	mov	r2, r1
 800d8ac:	eb42 0303 	adc.w	r3, r2, r3
 800d8b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d8c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d8c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	18db      	adds	r3, r3, r3
 800d8cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	eb42 0303 	adc.w	r3, r2, r3
 800d8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d8d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d8da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d8de:	f7f3 f9e3 	bl	8000ca8 <__aeabi_uldivmod>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	4b0d      	ldr	r3, [pc, #52]	; (800d91c <UART_SetConfig+0x2d4>)
 800d8e8:	fba3 1302 	umull	r1, r3, r3, r2
 800d8ec:	095b      	lsrs	r3, r3, #5
 800d8ee:	2164      	movs	r1, #100	; 0x64
 800d8f0:	fb01 f303 	mul.w	r3, r1, r3
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	00db      	lsls	r3, r3, #3
 800d8f8:	3332      	adds	r3, #50	; 0x32
 800d8fa:	4a08      	ldr	r2, [pc, #32]	; (800d91c <UART_SetConfig+0x2d4>)
 800d8fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d900:	095b      	lsrs	r3, r3, #5
 800d902:	f003 0207 	and.w	r2, r3, #7
 800d906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4422      	add	r2, r4
 800d90e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d910:	e106      	b.n	800db20 <UART_SetConfig+0x4d8>
 800d912:	bf00      	nop
 800d914:	40011000 	.word	0x40011000
 800d918:	40011400 	.word	0x40011400
 800d91c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d924:	2200      	movs	r2, #0
 800d926:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d92a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d92e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d932:	4642      	mov	r2, r8
 800d934:	464b      	mov	r3, r9
 800d936:	1891      	adds	r1, r2, r2
 800d938:	6239      	str	r1, [r7, #32]
 800d93a:	415b      	adcs	r3, r3
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
 800d93e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d942:	4641      	mov	r1, r8
 800d944:	1854      	adds	r4, r2, r1
 800d946:	4649      	mov	r1, r9
 800d948:	eb43 0501 	adc.w	r5, r3, r1
 800d94c:	f04f 0200 	mov.w	r2, #0
 800d950:	f04f 0300 	mov.w	r3, #0
 800d954:	00eb      	lsls	r3, r5, #3
 800d956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d95a:	00e2      	lsls	r2, r4, #3
 800d95c:	4614      	mov	r4, r2
 800d95e:	461d      	mov	r5, r3
 800d960:	4643      	mov	r3, r8
 800d962:	18e3      	adds	r3, r4, r3
 800d964:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d968:	464b      	mov	r3, r9
 800d96a:	eb45 0303 	adc.w	r3, r5, r3
 800d96e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d97e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d982:	f04f 0200 	mov.w	r2, #0
 800d986:	f04f 0300 	mov.w	r3, #0
 800d98a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d98e:	4629      	mov	r1, r5
 800d990:	008b      	lsls	r3, r1, #2
 800d992:	4621      	mov	r1, r4
 800d994:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d998:	4621      	mov	r1, r4
 800d99a:	008a      	lsls	r2, r1, #2
 800d99c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d9a0:	f7f3 f982 	bl	8000ca8 <__aeabi_uldivmod>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4b60      	ldr	r3, [pc, #384]	; (800db2c <UART_SetConfig+0x4e4>)
 800d9aa:	fba3 2302 	umull	r2, r3, r3, r2
 800d9ae:	095b      	lsrs	r3, r3, #5
 800d9b0:	011c      	lsls	r4, r3, #4
 800d9b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d9bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d9c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d9c4:	4642      	mov	r2, r8
 800d9c6:	464b      	mov	r3, r9
 800d9c8:	1891      	adds	r1, r2, r2
 800d9ca:	61b9      	str	r1, [r7, #24]
 800d9cc:	415b      	adcs	r3, r3
 800d9ce:	61fb      	str	r3, [r7, #28]
 800d9d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d9d4:	4641      	mov	r1, r8
 800d9d6:	1851      	adds	r1, r2, r1
 800d9d8:	6139      	str	r1, [r7, #16]
 800d9da:	4649      	mov	r1, r9
 800d9dc:	414b      	adcs	r3, r1
 800d9de:	617b      	str	r3, [r7, #20]
 800d9e0:	f04f 0200 	mov.w	r2, #0
 800d9e4:	f04f 0300 	mov.w	r3, #0
 800d9e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d9ec:	4659      	mov	r1, fp
 800d9ee:	00cb      	lsls	r3, r1, #3
 800d9f0:	4651      	mov	r1, sl
 800d9f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d9f6:	4651      	mov	r1, sl
 800d9f8:	00ca      	lsls	r2, r1, #3
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	4603      	mov	r3, r0
 800da00:	4642      	mov	r2, r8
 800da02:	189b      	adds	r3, r3, r2
 800da04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800da08:	464b      	mov	r3, r9
 800da0a:	460a      	mov	r2, r1
 800da0c:	eb42 0303 	adc.w	r3, r2, r3
 800da10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800da14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	2200      	movs	r2, #0
 800da1c:	67bb      	str	r3, [r7, #120]	; 0x78
 800da1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800da20:	f04f 0200 	mov.w	r2, #0
 800da24:	f04f 0300 	mov.w	r3, #0
 800da28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800da2c:	4649      	mov	r1, r9
 800da2e:	008b      	lsls	r3, r1, #2
 800da30:	4641      	mov	r1, r8
 800da32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800da36:	4641      	mov	r1, r8
 800da38:	008a      	lsls	r2, r1, #2
 800da3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800da3e:	f7f3 f933 	bl	8000ca8 <__aeabi_uldivmod>
 800da42:	4602      	mov	r2, r0
 800da44:	460b      	mov	r3, r1
 800da46:	4611      	mov	r1, r2
 800da48:	4b38      	ldr	r3, [pc, #224]	; (800db2c <UART_SetConfig+0x4e4>)
 800da4a:	fba3 2301 	umull	r2, r3, r3, r1
 800da4e:	095b      	lsrs	r3, r3, #5
 800da50:	2264      	movs	r2, #100	; 0x64
 800da52:	fb02 f303 	mul.w	r3, r2, r3
 800da56:	1acb      	subs	r3, r1, r3
 800da58:	011b      	lsls	r3, r3, #4
 800da5a:	3332      	adds	r3, #50	; 0x32
 800da5c:	4a33      	ldr	r2, [pc, #204]	; (800db2c <UART_SetConfig+0x4e4>)
 800da5e:	fba2 2303 	umull	r2, r3, r2, r3
 800da62:	095b      	lsrs	r3, r3, #5
 800da64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da68:	441c      	add	r4, r3
 800da6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da6e:	2200      	movs	r2, #0
 800da70:	673b      	str	r3, [r7, #112]	; 0x70
 800da72:	677a      	str	r2, [r7, #116]	; 0x74
 800da74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800da78:	4642      	mov	r2, r8
 800da7a:	464b      	mov	r3, r9
 800da7c:	1891      	adds	r1, r2, r2
 800da7e:	60b9      	str	r1, [r7, #8]
 800da80:	415b      	adcs	r3, r3
 800da82:	60fb      	str	r3, [r7, #12]
 800da84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da88:	4641      	mov	r1, r8
 800da8a:	1851      	adds	r1, r2, r1
 800da8c:	6039      	str	r1, [r7, #0]
 800da8e:	4649      	mov	r1, r9
 800da90:	414b      	adcs	r3, r1
 800da92:	607b      	str	r3, [r7, #4]
 800da94:	f04f 0200 	mov.w	r2, #0
 800da98:	f04f 0300 	mov.w	r3, #0
 800da9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800daa0:	4659      	mov	r1, fp
 800daa2:	00cb      	lsls	r3, r1, #3
 800daa4:	4651      	mov	r1, sl
 800daa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800daaa:	4651      	mov	r1, sl
 800daac:	00ca      	lsls	r2, r1, #3
 800daae:	4610      	mov	r0, r2
 800dab0:	4619      	mov	r1, r3
 800dab2:	4603      	mov	r3, r0
 800dab4:	4642      	mov	r2, r8
 800dab6:	189b      	adds	r3, r3, r2
 800dab8:	66bb      	str	r3, [r7, #104]	; 0x68
 800daba:	464b      	mov	r3, r9
 800dabc:	460a      	mov	r2, r1
 800dabe:	eb42 0303 	adc.w	r3, r2, r3
 800dac2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	663b      	str	r3, [r7, #96]	; 0x60
 800dace:	667a      	str	r2, [r7, #100]	; 0x64
 800dad0:	f04f 0200 	mov.w	r2, #0
 800dad4:	f04f 0300 	mov.w	r3, #0
 800dad8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dadc:	4649      	mov	r1, r9
 800dade:	008b      	lsls	r3, r1, #2
 800dae0:	4641      	mov	r1, r8
 800dae2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dae6:	4641      	mov	r1, r8
 800dae8:	008a      	lsls	r2, r1, #2
 800daea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800daee:	f7f3 f8db 	bl	8000ca8 <__aeabi_uldivmod>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	4b0d      	ldr	r3, [pc, #52]	; (800db2c <UART_SetConfig+0x4e4>)
 800daf8:	fba3 1302 	umull	r1, r3, r3, r2
 800dafc:	095b      	lsrs	r3, r3, #5
 800dafe:	2164      	movs	r1, #100	; 0x64
 800db00:	fb01 f303 	mul.w	r3, r1, r3
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	011b      	lsls	r3, r3, #4
 800db08:	3332      	adds	r3, #50	; 0x32
 800db0a:	4a08      	ldr	r2, [pc, #32]	; (800db2c <UART_SetConfig+0x4e4>)
 800db0c:	fba2 2303 	umull	r2, r3, r2, r3
 800db10:	095b      	lsrs	r3, r3, #5
 800db12:	f003 020f 	and.w	r2, r3, #15
 800db16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4422      	add	r2, r4
 800db1e:	609a      	str	r2, [r3, #8]
}
 800db20:	bf00      	nop
 800db22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800db26:	46bd      	mov	sp, r7
 800db28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db2c:	51eb851f 	.word	0x51eb851f

0800db30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db30:	b084      	sub	sp, #16
 800db32:	b580      	push	{r7, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
 800db3a:	f107 001c 	add.w	r0, r7, #28
 800db3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db42:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800db46:	2b01      	cmp	r3, #1
 800db48:	d123      	bne.n	800db92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800db5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db76:	2b01      	cmp	r3, #1
 800db78:	d105      	bne.n	800db86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 f901 	bl	800dd8e <USB_CoreReset>
 800db8c:	4603      	mov	r3, r0
 800db8e:	73fb      	strb	r3, [r7, #15]
 800db90:	e01b      	b.n	800dbca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 f8f5 	bl	800dd8e <USB_CoreReset>
 800dba4:	4603      	mov	r3, r0
 800dba6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dba8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d106      	bne.n	800dbbe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	639a      	str	r2, [r3, #56]	; 0x38
 800dbbc:	e005      	b.n	800dbca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dbca:	7fbb      	ldrb	r3, [r7, #30]
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d10b      	bne.n	800dbe8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	f043 0206 	orr.w	r2, r3, #6
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f043 0220 	orr.w	r2, r3, #32
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dbe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbf4:	b004      	add	sp, #16
 800dbf6:	4770      	bx	lr

0800dbf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dbf8:	b480      	push	{r7}
 800dbfa:	b083      	sub	sp, #12
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f023 0201 	bic.w	r2, r3, #1
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	370c      	adds	r7, #12
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b084      	sub	sp, #16
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	460b      	mov	r3, r1
 800dc24:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dc26:	2300      	movs	r3, #0
 800dc28:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	68db      	ldr	r3, [r3, #12]
 800dc2e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc36:	78fb      	ldrb	r3, [r7, #3]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d115      	bne.n	800dc68 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dc48:	200a      	movs	r0, #10
 800dc4a:	f7fa fe09 	bl	8008860 <HAL_Delay>
      ms += 10U;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	330a      	adds	r3, #10
 800dc52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f88c 	bl	800dd72 <USB_GetMode>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d01e      	beq.n	800dc9e <USB_SetCurrentMode+0x84>
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2bc7      	cmp	r3, #199	; 0xc7
 800dc64:	d9f0      	bls.n	800dc48 <USB_SetCurrentMode+0x2e>
 800dc66:	e01a      	b.n	800dc9e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dc68:	78fb      	ldrb	r3, [r7, #3]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d115      	bne.n	800dc9a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dc7a:	200a      	movs	r0, #10
 800dc7c:	f7fa fdf0 	bl	8008860 <HAL_Delay>
      ms += 10U;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	330a      	adds	r3, #10
 800dc84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f873 	bl	800dd72 <USB_GetMode>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d005      	beq.n	800dc9e <USB_SetCurrentMode+0x84>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2bc7      	cmp	r3, #199	; 0xc7
 800dc96:	d9f0      	bls.n	800dc7a <USB_SetCurrentMode+0x60>
 800dc98:	e001      	b.n	800dc9e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	e005      	b.n	800dcaa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2bc8      	cmp	r3, #200	; 0xc8
 800dca2:	d101      	bne.n	800dca8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e000      	b.n	800dcaa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dcb2:	b480      	push	{r7}
 800dcb4:	b085      	sub	sp, #20
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
 800dcba:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800dccc:	d901      	bls.n	800dcd2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dcce:	2303      	movs	r3, #3
 800dcd0:	e01b      	b.n	800dd0a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	daf2      	bge.n	800dcc0 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	019b      	lsls	r3, r3, #6
 800dce2:	f043 0220 	orr.w	r2, r3, #32
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3301      	adds	r3, #1
 800dcee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800dcf6:	d901      	bls.n	800dcfc <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	e006      	b.n	800dd0a <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	f003 0320 	and.w	r3, r3, #32
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	d0f0      	beq.n	800dcea <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd16:	b480      	push	{r7}
 800dd18:	b085      	sub	sp, #20
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	3301      	adds	r3, #1
 800dd26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800dd2e:	d901      	bls.n	800dd34 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dd30:	2303      	movs	r3, #3
 800dd32:	e018      	b.n	800dd66 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	691b      	ldr	r3, [r3, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	daf2      	bge.n	800dd22 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2210      	movs	r2, #16
 800dd44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800dd52:	d901      	bls.n	800dd58 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dd54:	2303      	movs	r3, #3
 800dd56:	e006      	b.n	800dd66 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	f003 0310 	and.w	r3, r3, #16
 800dd60:	2b10      	cmp	r3, #16
 800dd62:	d0f0      	beq.n	800dd46 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dd64:	2300      	movs	r3, #0
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3714      	adds	r7, #20
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr

0800dd72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dd72:	b480      	push	{r7}
 800dd74:	b083      	sub	sp, #12
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	f003 0301 	and.w	r3, r3, #1
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	370c      	adds	r7, #12
 800dd86:	46bd      	mov	sp, r7
 800dd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8c:	4770      	bx	lr

0800dd8e <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b085      	sub	sp, #20
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd96:	2300      	movs	r3, #0
 800dd98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800dda6:	d901      	bls.n	800ddac <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e01b      	b.n	800dde4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	691b      	ldr	r3, [r3, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	daf2      	bge.n	800dd9a <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	691b      	ldr	r3, [r3, #16]
 800ddbc:	f043 0201 	orr.w	r2, r3, #1
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ddd0:	d901      	bls.n	800ddd6 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	e006      	b.n	800dde4 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	691b      	ldr	r3, [r3, #16]
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d0f0      	beq.n	800ddc4 <USB_CoreReset+0x36>

  return HAL_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ddf0:	b084      	sub	sp, #16
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b086      	sub	sp, #24
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
 800ddfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ddfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800de02:	2300      	movs	r3, #0
 800de04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de10:	461a      	mov	r2, r3
 800de12:	2300      	movs	r3, #0
 800de14:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	68db      	ldr	r3, [r3, #12]
 800de3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de42:	2b00      	cmp	r3, #0
 800de44:	d119      	bne.n	800de7a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800de46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de4a:	2b01      	cmp	r3, #1
 800de4c:	d10a      	bne.n	800de64 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	68fa      	ldr	r2, [r7, #12]
 800de58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de5c:	f043 0304 	orr.w	r3, r3, #4
 800de60:	6013      	str	r3, [r2, #0]
 800de62:	e014      	b.n	800de8e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	68fa      	ldr	r2, [r7, #12]
 800de6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de72:	f023 0304 	bic.w	r3, r3, #4
 800de76:	6013      	str	r3, [r2, #0]
 800de78:	e009      	b.n	800de8e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	68fa      	ldr	r2, [r7, #12]
 800de84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800de88:	f023 0304 	bic.w	r3, r3, #4
 800de8c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800de8e:	2110      	movs	r1, #16
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ff0e 	bl	800dcb2 <USB_FlushTxFifo>
 800de96:	4603      	mov	r3, r0
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d001      	beq.n	800dea0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f7ff ff38 	bl	800dd16 <USB_FlushRxFifo>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d001      	beq.n	800deb0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800deb0:	2300      	movs	r3, #0
 800deb2:	613b      	str	r3, [r7, #16]
 800deb4:	e015      	b.n	800dee2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	015a      	lsls	r2, r3, #5
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	4413      	add	r3, r2
 800debe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dec2:	461a      	mov	r2, r3
 800dec4:	f04f 33ff 	mov.w	r3, #4294967295
 800dec8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	015a      	lsls	r2, r3, #5
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	4413      	add	r3, r2
 800ded2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ded6:	461a      	mov	r2, r3
 800ded8:	2300      	movs	r3, #0
 800deda:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	3301      	adds	r3, #1
 800dee0:	613b      	str	r3, [r7, #16]
 800dee2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800dee6:	461a      	mov	r2, r3
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	4293      	cmp	r3, r2
 800deec:	d3e3      	bcc.n	800deb6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f04f 32ff 	mov.w	r2, #4294967295
 800defa:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	4a18      	ldr	r2, [pc, #96]	; (800df60 <USB_HostInit+0x170>)
 800df00:	4293      	cmp	r3, r2
 800df02:	d10b      	bne.n	800df1c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	4a15      	ldr	r2, [pc, #84]	; (800df64 <USB_HostInit+0x174>)
 800df10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a14      	ldr	r2, [pc, #80]	; (800df68 <USB_HostInit+0x178>)
 800df16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800df1a:	e009      	b.n	800df30 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2280      	movs	r2, #128	; 0x80
 800df20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a11      	ldr	r2, [pc, #68]	; (800df6c <USB_HostInit+0x17c>)
 800df26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	4a11      	ldr	r2, [pc, #68]	; (800df70 <USB_HostInit+0x180>)
 800df2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800df30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df34:	2b00      	cmp	r3, #0
 800df36:	d105      	bne.n	800df44 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	699b      	ldr	r3, [r3, #24]
 800df3c:	f043 0210 	orr.w	r2, r3, #16
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	699a      	ldr	r2, [r3, #24]
 800df48:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <USB_HostInit+0x184>)
 800df4a:	4313      	orrs	r3, r2
 800df4c:	687a      	ldr	r2, [r7, #4]
 800df4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800df50:	7dfb      	ldrb	r3, [r7, #23]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3718      	adds	r7, #24
 800df56:	46bd      	mov	sp, r7
 800df58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df5c:	b004      	add	sp, #16
 800df5e:	4770      	bx	lr
 800df60:	40040000 	.word	0x40040000
 800df64:	01000200 	.word	0x01000200
 800df68:	00e00300 	.word	0x00e00300
 800df6c:	00600080 	.word	0x00600080
 800df70:	004000e0 	.word	0x004000e0
 800df74:	a3200008 	.word	0xa3200008

0800df78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800df7c:	4904      	ldr	r1, [pc, #16]	; (800df90 <MX_FATFS_Init+0x18>)
 800df7e:	4805      	ldr	r0, [pc, #20]	; (800df94 <MX_FATFS_Init+0x1c>)
 800df80:	f003 ff20 	bl	8011dc4 <FATFS_LinkDriver>
 800df84:	4603      	mov	r3, r0
 800df86:	461a      	mov	r2, r3
 800df88:	4b03      	ldr	r3, [pc, #12]	; (800df98 <MX_FATFS_Init+0x20>)
 800df8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800df8c:	bf00      	nop
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20003494 	.word	0x20003494
 800df94:	20000154 	.word	0x20000154
 800df98:	20003490 	.word	0x20003490

0800df9c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dfa0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		  /*Stat = STA_NOINIT;
		    return Stat;*/
			return SD_disk_initialize(pdrv);
 800dfb6:	79fb      	ldrb	r3, [r7, #7]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f7f8 fb59 	bl	8006670 <SD_disk_initialize>
 800dfbe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		 /*Stat = STA_NOINIT;
		    return Stat;*/
			return SD_disk_status(pdrv);
 800dfd2:	79fb      	ldrb	r3, [r7, #7]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7f8 fc37 	bl	8006848 <SD_disk_status>
 800dfda:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
 800dfee:	603b      	str	r3, [r7, #0]
 800dff0:	4603      	mov	r3, r0
 800dff2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		 // return RES_OK;
			return SD_disk_read(pdrv,buff,sector,count);
 800dff4:	7bf8      	ldrb	r0, [r7, #15]
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	68b9      	ldr	r1, [r7, #8]
 800dffc:	f7f8 fc3a 	bl	8006874 <SD_disk_read>
 800e000:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e002:	4618      	mov	r0, r3
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}

0800e00a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e00a:	b580      	push	{r7, lr}
 800e00c:	b084      	sub	sp, #16
 800e00e:	af00      	add	r7, sp, #0
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	603b      	str	r3, [r7, #0]
 800e016:	4603      	mov	r3, r0
 800e018:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	  /* USER CODE HERE */
		// return RES_OK;
			return SD_disk_write(pdrv,buff,sector,count);
 800e01a:	7bf8      	ldrb	r0, [r7, #15]
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	687a      	ldr	r2, [r7, #4]
 800e020:	68b9      	ldr	r1, [r7, #8]
 800e022:	f7f8 fc91 	bl	8006948 <SD_disk_write>
 800e026:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3710      	adds	r7, #16
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	603a      	str	r2, [r7, #0]
 800e03a:	71fb      	strb	r3, [r7, #7]
 800e03c:	460b      	mov	r3, r1
 800e03e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
		/* DRESULT res = RES_ERROR;
		    return res;*/
			return SD_disk_ioctl(pdrv,cmd,buff);
 800e040:	79b9      	ldrb	r1, [r7, #6]
 800e042:	79fb      	ldrb	r3, [r7, #7]
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	4618      	mov	r0, r3
 800e048:	f7f8 fd02 	bl	8006a50 <SD_disk_ioctl>
 800e04c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
	...

0800e058 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	4603      	mov	r3, r0
 800e060:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e062:	79fb      	ldrb	r3, [r7, #7]
 800e064:	4a08      	ldr	r2, [pc, #32]	; (800e088 <disk_status+0x30>)
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	79fa      	ldrb	r2, [r7, #7]
 800e070:	4905      	ldr	r1, [pc, #20]	; (800e088 <disk_status+0x30>)
 800e072:	440a      	add	r2, r1
 800e074:	7a12      	ldrb	r2, [r2, #8]
 800e076:	4610      	mov	r0, r2
 800e078:	4798      	blx	r3
 800e07a:	4603      	mov	r3, r0
 800e07c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	200034c0 	.word	0x200034c0

0800e08c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b084      	sub	sp, #16
 800e090:	af00      	add	r7, sp, #0
 800e092:	4603      	mov	r3, r0
 800e094:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e096:	2300      	movs	r3, #0
 800e098:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e09a:	79fb      	ldrb	r3, [r7, #7]
 800e09c:	4a0e      	ldr	r2, [pc, #56]	; (800e0d8 <disk_initialize+0x4c>)
 800e09e:	5cd3      	ldrb	r3, [r2, r3]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d114      	bne.n	800e0ce <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e0a4:	79fb      	ldrb	r3, [r7, #7]
 800e0a6:	4a0c      	ldr	r2, [pc, #48]	; (800e0d8 <disk_initialize+0x4c>)
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	79fa      	ldrb	r2, [r7, #7]
 800e0b2:	4909      	ldr	r1, [pc, #36]	; (800e0d8 <disk_initialize+0x4c>)
 800e0b4:	440a      	add	r2, r1
 800e0b6:	7a12      	ldrb	r2, [r2, #8]
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
 800e0bc:	4603      	mov	r3, r0
 800e0be:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800e0c0:	7bfb      	ldrb	r3, [r7, #15]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d103      	bne.n	800e0ce <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800e0c6:	79fb      	ldrb	r3, [r7, #7]
 800e0c8:	4a03      	ldr	r2, [pc, #12]	; (800e0d8 <disk_initialize+0x4c>)
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800e0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3710      	adds	r7, #16
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	200034c0 	.word	0x200034c0

0800e0dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e0dc:	b590      	push	{r4, r7, lr}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60b9      	str	r1, [r7, #8]
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	603b      	str	r3, [r7, #0]
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
 800e0ee:	4a0a      	ldr	r2, [pc, #40]	; (800e118 <disk_read+0x3c>)
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	689c      	ldr	r4, [r3, #8]
 800e0f8:	7bfb      	ldrb	r3, [r7, #15]
 800e0fa:	4a07      	ldr	r2, [pc, #28]	; (800e118 <disk_read+0x3c>)
 800e0fc:	4413      	add	r3, r2
 800e0fe:	7a18      	ldrb	r0, [r3, #8]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	68b9      	ldr	r1, [r7, #8]
 800e106:	47a0      	blx	r4
 800e108:	4603      	mov	r3, r0
 800e10a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e10c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	371c      	adds	r7, #28
 800e112:	46bd      	mov	sp, r7
 800e114:	bd90      	pop	{r4, r7, pc}
 800e116:	bf00      	nop
 800e118:	200034c0 	.word	0x200034c0

0800e11c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e11c:	b590      	push	{r4, r7, lr}
 800e11e:	b087      	sub	sp, #28
 800e120:	af00      	add	r7, sp, #0
 800e122:	60b9      	str	r1, [r7, #8]
 800e124:	607a      	str	r2, [r7, #4]
 800e126:	603b      	str	r3, [r7, #0]
 800e128:	4603      	mov	r3, r0
 800e12a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e12c:	7bfb      	ldrb	r3, [r7, #15]
 800e12e:	4a0a      	ldr	r2, [pc, #40]	; (800e158 <disk_write+0x3c>)
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	4413      	add	r3, r2
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	68dc      	ldr	r4, [r3, #12]
 800e138:	7bfb      	ldrb	r3, [r7, #15]
 800e13a:	4a07      	ldr	r2, [pc, #28]	; (800e158 <disk_write+0x3c>)
 800e13c:	4413      	add	r3, r2
 800e13e:	7a18      	ldrb	r0, [r3, #8]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	68b9      	ldr	r1, [r7, #8]
 800e146:	47a0      	blx	r4
 800e148:	4603      	mov	r3, r0
 800e14a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e14e:	4618      	mov	r0, r3
 800e150:	371c      	adds	r7, #28
 800e152:	46bd      	mov	sp, r7
 800e154:	bd90      	pop	{r4, r7, pc}
 800e156:	bf00      	nop
 800e158:	200034c0 	.word	0x200034c0

0800e15c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	4603      	mov	r3, r0
 800e164:	603a      	str	r2, [r7, #0]
 800e166:	71fb      	strb	r3, [r7, #7]
 800e168:	460b      	mov	r3, r1
 800e16a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e16c:	79fb      	ldrb	r3, [r7, #7]
 800e16e:	4a09      	ldr	r2, [pc, #36]	; (800e194 <disk_ioctl+0x38>)
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	79fa      	ldrb	r2, [r7, #7]
 800e17a:	4906      	ldr	r1, [pc, #24]	; (800e194 <disk_ioctl+0x38>)
 800e17c:	440a      	add	r2, r1
 800e17e:	7a10      	ldrb	r0, [r2, #8]
 800e180:	79b9      	ldrb	r1, [r7, #6]
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	4798      	blx	r3
 800e186:	4603      	mov	r3, r0
 800e188:	73fb      	strb	r3, [r7, #15]
  return res;
 800e18a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	200034c0 	.word	0x200034c0

0800e198 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e198:	b480      	push	{r7}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e1a8:	89fb      	ldrh	r3, [r7, #14]
 800e1aa:	021b      	lsls	r3, r3, #8
 800e1ac:	b21a      	sxth	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	b21b      	sxth	r3, r3
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	b21b      	sxth	r3, r3
 800e1b8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e1ba:	89fb      	ldrh	r3, [r7, #14]
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3714      	adds	r7, #20
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	3303      	adds	r3, #3
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	021b      	lsls	r3, r3, #8
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	3202      	adds	r2, #2
 800e1e0:	7812      	ldrb	r2, [r2, #0]
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	021b      	lsls	r3, r3, #8
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	3201      	adds	r2, #1
 800e1ee:	7812      	ldrb	r2, [r2, #0]
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	021b      	lsls	r3, r3, #8
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7812      	ldrb	r2, [r2, #0]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]
	return rv;
 800e200:	68fb      	ldr	r3, [r7, #12]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3714      	adds	r7, #20
 800e206:	46bd      	mov	sp, r7
 800e208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20c:	4770      	bx	lr

0800e20e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e20e:	b480      	push	{r7}
 800e210:	b083      	sub	sp, #12
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
 800e216:	460b      	mov	r3, r1
 800e218:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	887a      	ldrh	r2, [r7, #2]
 800e222:	b2d2      	uxtb	r2, r2
 800e224:	701a      	strb	r2, [r3, #0]
 800e226:	887b      	ldrh	r3, [r7, #2]
 800e228:	0a1b      	lsrs	r3, r3, #8
 800e22a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	1c5a      	adds	r2, r3, #1
 800e230:	607a      	str	r2, [r7, #4]
 800e232:	887a      	ldrh	r2, [r7, #2]
 800e234:	b2d2      	uxtb	r2, r2
 800e236:	701a      	strb	r2, [r3, #0]
}
 800e238:	bf00      	nop
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e244:	b480      	push	{r7}
 800e246:	b083      	sub	sp, #12
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	607a      	str	r2, [r7, #4]
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	b2d2      	uxtb	r2, r2
 800e258:	701a      	strb	r2, [r3, #0]
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	0a1b      	lsrs	r3, r3, #8
 800e25e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	607a      	str	r2, [r7, #4]
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	b2d2      	uxtb	r2, r2
 800e26a:	701a      	strb	r2, [r3, #0]
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	0a1b      	lsrs	r3, r3, #8
 800e270:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	1c5a      	adds	r2, r3, #1
 800e276:	607a      	str	r2, [r7, #4]
 800e278:	683a      	ldr	r2, [r7, #0]
 800e27a:	b2d2      	uxtb	r2, r2
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	0a1b      	lsrs	r3, r3, #8
 800e282:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	1c5a      	adds	r2, r3, #1
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	b2d2      	uxtb	r2, r2
 800e28e:	701a      	strb	r2, [r3, #0]
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e29c:	b480      	push	{r7}
 800e29e:	b087      	sub	sp, #28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00d      	beq.n	800e2d2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e2b6:	693a      	ldr	r2, [r7, #16]
 800e2b8:	1c53      	adds	r3, r2, #1
 800e2ba:	613b      	str	r3, [r7, #16]
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	1c59      	adds	r1, r3, #1
 800e2c0:	6179      	str	r1, [r7, #20]
 800e2c2:	7812      	ldrb	r2, [r2, #0]
 800e2c4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	3b01      	subs	r3, #1
 800e2ca:	607b      	str	r3, [r7, #4]
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1f1      	bne.n	800e2b6 <mem_cpy+0x1a>
	}
}
 800e2d2:	bf00      	nop
 800e2d4:	371c      	adds	r7, #28
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr

0800e2de <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e2de:	b480      	push	{r7}
 800e2e0:	b087      	sub	sp, #28
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	60f8      	str	r0, [r7, #12]
 800e2e6:	60b9      	str	r1, [r7, #8]
 800e2e8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	617a      	str	r2, [r7, #20]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	b2d2      	uxtb	r2, r2
 800e2f8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	3b01      	subs	r3, #1
 800e2fe:	607b      	str	r3, [r7, #4]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1f3      	bne.n	800e2ee <mem_set+0x10>
}
 800e306:	bf00      	nop
 800e308:	bf00      	nop
 800e30a:	371c      	adds	r7, #28
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e314:	b480      	push	{r7}
 800e316:	b089      	sub	sp, #36	; 0x24
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	61fb      	str	r3, [r7, #28]
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e328:	2300      	movs	r3, #0
 800e32a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	1c5a      	adds	r2, r3, #1
 800e330:	61fa      	str	r2, [r7, #28]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	4619      	mov	r1, r3
 800e336:	69bb      	ldr	r3, [r7, #24]
 800e338:	1c5a      	adds	r2, r3, #1
 800e33a:	61ba      	str	r2, [r7, #24]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	1acb      	subs	r3, r1, r3
 800e340:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	3b01      	subs	r3, #1
 800e346:	607b      	str	r3, [r7, #4]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d002      	beq.n	800e354 <mem_cmp+0x40>
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0eb      	beq.n	800e32c <mem_cmp+0x18>

	return r;
 800e354:	697b      	ldr	r3, [r7, #20]
}
 800e356:	4618      	mov	r0, r3
 800e358:	3724      	adds	r7, #36	; 0x24
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e362:	b480      	push	{r7}
 800e364:	b083      	sub	sp, #12
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e36c:	e002      	b.n	800e374 <chk_chr+0x12>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	3301      	adds	r3, #1
 800e372:	607b      	str	r3, [r7, #4]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <chk_chr+0x26>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	461a      	mov	r2, r3
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	4293      	cmp	r3, r2
 800e386:	d1f2      	bne.n	800e36e <chk_chr+0xc>
	return *str;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	781b      	ldrb	r3, [r3, #0]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d009      	beq.n	800e3ba <lock_fs+0x22>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f003 fe0c 	bl	8011fc8 <ff_req_grant>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d001      	beq.n	800e3ba <lock_fs+0x22>
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e000      	b.n	800e3bc <lock_fs+0x24>
 800e3ba:	2300      	movs	r3, #0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d00d      	beq.n	800e3f2 <unlock_fs+0x2e>
 800e3d6:	78fb      	ldrb	r3, [r7, #3]
 800e3d8:	2b0c      	cmp	r3, #12
 800e3da:	d00a      	beq.n	800e3f2 <unlock_fs+0x2e>
 800e3dc:	78fb      	ldrb	r3, [r7, #3]
 800e3de:	2b0b      	cmp	r3, #11
 800e3e0:	d007      	beq.n	800e3f2 <unlock_fs+0x2e>
 800e3e2:	78fb      	ldrb	r3, [r7, #3]
 800e3e4:	2b0f      	cmp	r3, #15
 800e3e6:	d004      	beq.n	800e3f2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f003 fe00 	bl	8011ff2 <ff_rel_grant>
	}
}
 800e3f2:	bf00      	nop
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e406:	2300      	movs	r3, #0
 800e408:	60bb      	str	r3, [r7, #8]
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	60fb      	str	r3, [r7, #12]
 800e40e:	e029      	b.n	800e464 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e410:	4a27      	ldr	r2, [pc, #156]	; (800e4b0 <chk_lock+0xb4>)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	011b      	lsls	r3, r3, #4
 800e416:	4413      	add	r3, r2
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d01d      	beq.n	800e45a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e41e:	4a24      	ldr	r2, [pc, #144]	; (800e4b0 <chk_lock+0xb4>)
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	011b      	lsls	r3, r3, #4
 800e424:	4413      	add	r3, r2
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d116      	bne.n	800e45e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e430:	4a1f      	ldr	r2, [pc, #124]	; (800e4b0 <chk_lock+0xb4>)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	011b      	lsls	r3, r3, #4
 800e436:	4413      	add	r3, r2
 800e438:	3304      	adds	r3, #4
 800e43a:	681a      	ldr	r2, [r3, #0]
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e440:	429a      	cmp	r2, r3
 800e442:	d10c      	bne.n	800e45e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e444:	4a1a      	ldr	r2, [pc, #104]	; (800e4b0 <chk_lock+0xb4>)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	011b      	lsls	r3, r3, #4
 800e44a:	4413      	add	r3, r2
 800e44c:	3308      	adds	r3, #8
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e454:	429a      	cmp	r2, r3
 800e456:	d102      	bne.n	800e45e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e458:	e007      	b.n	800e46a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e45a:	2301      	movs	r3, #1
 800e45c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3301      	adds	r3, #1
 800e462:	60fb      	str	r3, [r7, #12]
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2b01      	cmp	r3, #1
 800e468:	d9d2      	bls.n	800e410 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2b02      	cmp	r3, #2
 800e46e:	d109      	bne.n	800e484 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e470:	68bb      	ldr	r3, [r7, #8]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d102      	bne.n	800e47c <chk_lock+0x80>
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	2b02      	cmp	r3, #2
 800e47a:	d101      	bne.n	800e480 <chk_lock+0x84>
 800e47c:	2300      	movs	r3, #0
 800e47e:	e010      	b.n	800e4a2 <chk_lock+0xa6>
 800e480:	2312      	movs	r3, #18
 800e482:	e00e      	b.n	800e4a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d108      	bne.n	800e49c <chk_lock+0xa0>
 800e48a:	4a09      	ldr	r2, [pc, #36]	; (800e4b0 <chk_lock+0xb4>)
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	011b      	lsls	r3, r3, #4
 800e490:	4413      	add	r3, r2
 800e492:	330c      	adds	r3, #12
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e49a:	d101      	bne.n	800e4a0 <chk_lock+0xa4>
 800e49c:	2310      	movs	r3, #16
 800e49e:	e000      	b.n	800e4a2 <chk_lock+0xa6>
 800e4a0:	2300      	movs	r3, #0
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3714      	adds	r7, #20
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	200034a0 	.word	0x200034a0

0800e4b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	607b      	str	r3, [r7, #4]
 800e4be:	e002      	b.n	800e4c6 <enq_lock+0x12>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	607b      	str	r3, [r7, #4]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	d806      	bhi.n	800e4da <enq_lock+0x26>
 800e4cc:	4a09      	ldr	r2, [pc, #36]	; (800e4f4 <enq_lock+0x40>)
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	011b      	lsls	r3, r3, #4
 800e4d2:	4413      	add	r3, r2
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1f2      	bne.n	800e4c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2b02      	cmp	r3, #2
 800e4de:	bf14      	ite	ne
 800e4e0:	2301      	movne	r3, #1
 800e4e2:	2300      	moveq	r3, #0
 800e4e4:	b2db      	uxtb	r3, r3
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	200034a0 	.word	0x200034a0

0800e4f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b085      	sub	sp, #20
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e502:	2300      	movs	r3, #0
 800e504:	60fb      	str	r3, [r7, #12]
 800e506:	e01f      	b.n	800e548 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e508:	4a41      	ldr	r2, [pc, #260]	; (800e610 <inc_lock+0x118>)
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	011b      	lsls	r3, r3, #4
 800e50e:	4413      	add	r3, r2
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	429a      	cmp	r2, r3
 800e518:	d113      	bne.n	800e542 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e51a:	4a3d      	ldr	r2, [pc, #244]	; (800e610 <inc_lock+0x118>)
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	011b      	lsls	r3, r3, #4
 800e520:	4413      	add	r3, r2
 800e522:	3304      	adds	r3, #4
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d109      	bne.n	800e542 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e52e:	4a38      	ldr	r2, [pc, #224]	; (800e610 <inc_lock+0x118>)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	011b      	lsls	r3, r3, #4
 800e534:	4413      	add	r3, r2
 800e536:	3308      	adds	r3, #8
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e53e:	429a      	cmp	r2, r3
 800e540:	d006      	beq.n	800e550 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3301      	adds	r3, #1
 800e546:	60fb      	str	r3, [r7, #12]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d9dc      	bls.n	800e508 <inc_lock+0x10>
 800e54e:	e000      	b.n	800e552 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e550:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2b02      	cmp	r3, #2
 800e556:	d132      	bne.n	800e5be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e558:	2300      	movs	r3, #0
 800e55a:	60fb      	str	r3, [r7, #12]
 800e55c:	e002      	b.n	800e564 <inc_lock+0x6c>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	3301      	adds	r3, #1
 800e562:	60fb      	str	r3, [r7, #12]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d806      	bhi.n	800e578 <inc_lock+0x80>
 800e56a:	4a29      	ldr	r2, [pc, #164]	; (800e610 <inc_lock+0x118>)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	011b      	lsls	r3, r3, #4
 800e570:	4413      	add	r3, r2
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d1f2      	bne.n	800e55e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d101      	bne.n	800e582 <inc_lock+0x8a>
 800e57e:	2300      	movs	r3, #0
 800e580:	e040      	b.n	800e604 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	4922      	ldr	r1, [pc, #136]	; (800e610 <inc_lock+0x118>)
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	011b      	lsls	r3, r3, #4
 800e58c:	440b      	add	r3, r1
 800e58e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	689a      	ldr	r2, [r3, #8]
 800e594:	491e      	ldr	r1, [pc, #120]	; (800e610 <inc_lock+0x118>)
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	011b      	lsls	r3, r3, #4
 800e59a:	440b      	add	r3, r1
 800e59c:	3304      	adds	r3, #4
 800e59e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	695a      	ldr	r2, [r3, #20]
 800e5a4:	491a      	ldr	r1, [pc, #104]	; (800e610 <inc_lock+0x118>)
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	440b      	add	r3, r1
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e5b0:	4a17      	ldr	r2, [pc, #92]	; (800e610 <inc_lock+0x118>)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	011b      	lsls	r3, r3, #4
 800e5b6:	4413      	add	r3, r2
 800e5b8:	330c      	adds	r3, #12
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d009      	beq.n	800e5d8 <inc_lock+0xe0>
 800e5c4:	4a12      	ldr	r2, [pc, #72]	; (800e610 <inc_lock+0x118>)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	011b      	lsls	r3, r3, #4
 800e5ca:	4413      	add	r3, r2
 800e5cc:	330c      	adds	r3, #12
 800e5ce:	881b      	ldrh	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d001      	beq.n	800e5d8 <inc_lock+0xe0>
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	e015      	b.n	800e604 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d108      	bne.n	800e5f0 <inc_lock+0xf8>
 800e5de:	4a0c      	ldr	r2, [pc, #48]	; (800e610 <inc_lock+0x118>)
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	011b      	lsls	r3, r3, #4
 800e5e4:	4413      	add	r3, r2
 800e5e6:	330c      	adds	r3, #12
 800e5e8:	881b      	ldrh	r3, [r3, #0]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	e001      	b.n	800e5f4 <inc_lock+0xfc>
 800e5f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e5f4:	4906      	ldr	r1, [pc, #24]	; (800e610 <inc_lock+0x118>)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	011b      	lsls	r3, r3, #4
 800e5fa:	440b      	add	r3, r1
 800e5fc:	330c      	adds	r3, #12
 800e5fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
}
 800e604:	4618      	mov	r0, r3
 800e606:	3714      	adds	r7, #20
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr
 800e610:	200034a0 	.word	0x200034a0

0800e614 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3b01      	subs	r3, #1
 800e620:	607b      	str	r3, [r7, #4]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d825      	bhi.n	800e674 <dec_lock+0x60>
		n = Files[i].ctr;
 800e628:	4a17      	ldr	r2, [pc, #92]	; (800e688 <dec_lock+0x74>)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	011b      	lsls	r3, r3, #4
 800e62e:	4413      	add	r3, r2
 800e630:	330c      	adds	r3, #12
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e636:	89fb      	ldrh	r3, [r7, #14]
 800e638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e63c:	d101      	bne.n	800e642 <dec_lock+0x2e>
 800e63e:	2300      	movs	r3, #0
 800e640:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e642:	89fb      	ldrh	r3, [r7, #14]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d002      	beq.n	800e64e <dec_lock+0x3a>
 800e648:	89fb      	ldrh	r3, [r7, #14]
 800e64a:	3b01      	subs	r3, #1
 800e64c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e64e:	4a0e      	ldr	r2, [pc, #56]	; (800e688 <dec_lock+0x74>)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	011b      	lsls	r3, r3, #4
 800e654:	4413      	add	r3, r2
 800e656:	330c      	adds	r3, #12
 800e658:	89fa      	ldrh	r2, [r7, #14]
 800e65a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e65c:	89fb      	ldrh	r3, [r7, #14]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d105      	bne.n	800e66e <dec_lock+0x5a>
 800e662:	4a09      	ldr	r2, [pc, #36]	; (800e688 <dec_lock+0x74>)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	011b      	lsls	r3, r3, #4
 800e668:	4413      	add	r3, r2
 800e66a:	2200      	movs	r2, #0
 800e66c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	737b      	strb	r3, [r7, #13]
 800e672:	e001      	b.n	800e678 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e674:	2302      	movs	r3, #2
 800e676:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e678:	7b7b      	ldrb	r3, [r7, #13]
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3714      	adds	r7, #20
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	200034a0 	.word	0x200034a0

0800e68c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b085      	sub	sp, #20
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e694:	2300      	movs	r3, #0
 800e696:	60fb      	str	r3, [r7, #12]
 800e698:	e010      	b.n	800e6bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e69a:	4a0d      	ldr	r2, [pc, #52]	; (800e6d0 <clear_lock+0x44>)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	011b      	lsls	r3, r3, #4
 800e6a0:	4413      	add	r3, r2
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d105      	bne.n	800e6b6 <clear_lock+0x2a>
 800e6aa:	4a09      	ldr	r2, [pc, #36]	; (800e6d0 <clear_lock+0x44>)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	011b      	lsls	r3, r3, #4
 800e6b0:	4413      	add	r3, r2
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	60fb      	str	r3, [r7, #12]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d9eb      	bls.n	800e69a <clear_lock+0xe>
	}
}
 800e6c2:	bf00      	nop
 800e6c4:	bf00      	nop
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	200034a0 	.word	0x200034a0

0800e6d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b086      	sub	sp, #24
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	78db      	ldrb	r3, [r3, #3]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d034      	beq.n	800e752 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	7858      	ldrb	r0, [r3, #1]
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	f7ff fd0e 	bl	800e11c <disk_write>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d002      	beq.n	800e70c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e706:	2301      	movs	r3, #1
 800e708:	73fb      	strb	r3, [r7, #15]
 800e70a:	e022      	b.n	800e752 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2200      	movs	r2, #0
 800e710:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	1ad2      	subs	r2, r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e71e:	429a      	cmp	r2, r3
 800e720:	d217      	bcs.n	800e752 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	789b      	ldrb	r3, [r3, #2]
 800e726:	613b      	str	r3, [r7, #16]
 800e728:	e010      	b.n	800e74c <sync_window+0x78>
					wsect += fs->fsize;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e72e:	697a      	ldr	r2, [r7, #20]
 800e730:	4413      	add	r3, r2
 800e732:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	7858      	ldrb	r0, [r3, #1]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e73e:	2301      	movs	r3, #1
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	f7ff fceb 	bl	800e11c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	3b01      	subs	r3, #1
 800e74a:	613b      	str	r3, [r7, #16]
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d8eb      	bhi.n	800e72a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e752:	7bfb      	ldrb	r3, [r7, #15]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e766:	2300      	movs	r3, #0
 800e768:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d01b      	beq.n	800e7ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f7ff ffad 	bl	800e6d4 <sync_window>
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d113      	bne.n	800e7ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	7858      	ldrb	r0, [r3, #1]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e78e:	2301      	movs	r3, #1
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	f7ff fca3 	bl	800e0dc <disk_read>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e79c:	f04f 33ff 	mov.w	r3, #4294967295
 800e7a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	683a      	ldr	r2, [r7, #0]
 800e7aa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800e7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
	...

0800e7b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b084      	sub	sp, #16
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f7ff ff87 	bl	800e6d4 <sync_window>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e7ca:	7bfb      	ldrb	r3, [r7, #15]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d159      	bne.n	800e884 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	2b03      	cmp	r3, #3
 800e7d6:	d149      	bne.n	800e86c <sync_fs+0xb4>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	791b      	ldrb	r3, [r3, #4]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d145      	bne.n	800e86c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	899b      	ldrh	r3, [r3, #12]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	f7ff fd76 	bl	800e2de <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	333c      	adds	r3, #60	; 0x3c
 800e7f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e7fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7ff fd05 	bl	800e20e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	333c      	adds	r3, #60	; 0x3c
 800e808:	4921      	ldr	r1, [pc, #132]	; (800e890 <sync_fs+0xd8>)
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7ff fd1a 	bl	800e244 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	333c      	adds	r3, #60	; 0x3c
 800e814:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e818:	491e      	ldr	r1, [pc, #120]	; (800e894 <sync_fs+0xdc>)
 800e81a:	4618      	mov	r0, r3
 800e81c:	f7ff fd12 	bl	800e244 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	333c      	adds	r3, #60	; 0x3c
 800e824:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	69db      	ldr	r3, [r3, #28]
 800e82c:	4619      	mov	r1, r3
 800e82e:	4610      	mov	r0, r2
 800e830:	f7ff fd08 	bl	800e244 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	333c      	adds	r3, #60	; 0x3c
 800e838:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	699b      	ldr	r3, [r3, #24]
 800e840:	4619      	mov	r1, r3
 800e842:	4610      	mov	r0, r2
 800e844:	f7ff fcfe 	bl	800e244 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	7858      	ldrb	r0, [r3, #1]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e860:	2301      	movs	r3, #1
 800e862:	f7ff fc5b 	bl	800e11c <disk_write>
			fs->fsi_flag = 0;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2200      	movs	r2, #0
 800e86a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	785b      	ldrb	r3, [r3, #1]
 800e870:	2200      	movs	r2, #0
 800e872:	2100      	movs	r1, #0
 800e874:	4618      	mov	r0, r3
 800e876:	f7ff fc71 	bl	800e15c <disk_ioctl>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <sync_fs+0xcc>
 800e880:	2301      	movs	r3, #1
 800e882:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e884:	7bfb      	ldrb	r3, [r7, #15]
}
 800e886:	4618      	mov	r0, r3
 800e888:	3710      	adds	r7, #16
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bd80      	pop	{r7, pc}
 800e88e:	bf00      	nop
 800e890:	41615252 	.word	0x41615252
 800e894:	61417272 	.word	0x61417272

0800e898 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	3b02      	subs	r3, #2
 800e8a6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a1b      	ldr	r3, [r3, #32]
 800e8ac:	3b02      	subs	r3, #2
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d301      	bcc.n	800e8b8 <clust2sect+0x20>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	e008      	b.n	800e8ca <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	895b      	ldrh	r3, [r3, #10]
 800e8bc:	461a      	mov	r2, r3
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	fb03 f202 	mul.w	r2, r3, r2
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c8:	4413      	add	r3, r2
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	370c      	adds	r7, #12
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d4:	4770      	bx	lr

0800e8d6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b086      	sub	sp, #24
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
 800e8de:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d904      	bls.n	800e8f6 <get_fat+0x20>
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	683a      	ldr	r2, [r7, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d302      	bcc.n	800e8fc <get_fat+0x26>
		val = 1;	/* Internal error */
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	617b      	str	r3, [r7, #20]
 800e8fa:	e0bb      	b.n	800ea74 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e900:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2b03      	cmp	r3, #3
 800e908:	f000 8083 	beq.w	800ea12 <get_fat+0x13c>
 800e90c:	2b03      	cmp	r3, #3
 800e90e:	f300 80a7 	bgt.w	800ea60 <get_fat+0x18a>
 800e912:	2b01      	cmp	r3, #1
 800e914:	d002      	beq.n	800e91c <get_fat+0x46>
 800e916:	2b02      	cmp	r3, #2
 800e918:	d056      	beq.n	800e9c8 <get_fat+0xf2>
 800e91a:	e0a1      	b.n	800ea60 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	60fb      	str	r3, [r7, #12]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	085b      	lsrs	r3, r3, #1
 800e924:	68fa      	ldr	r2, [r7, #12]
 800e926:	4413      	add	r3, r2
 800e928:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	899b      	ldrh	r3, [r3, #12]
 800e932:	4619      	mov	r1, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	fbb3 f3f1 	udiv	r3, r3, r1
 800e93a:	4413      	add	r3, r2
 800e93c:	4619      	mov	r1, r3
 800e93e:	6938      	ldr	r0, [r7, #16]
 800e940:	f7ff ff0c 	bl	800e75c <move_window>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	f040 808d 	bne.w	800ea66 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	1c5a      	adds	r2, r3, #1
 800e950:	60fa      	str	r2, [r7, #12]
 800e952:	693a      	ldr	r2, [r7, #16]
 800e954:	8992      	ldrh	r2, [r2, #12]
 800e956:	fbb3 f1f2 	udiv	r1, r3, r2
 800e95a:	fb01 f202 	mul.w	r2, r1, r2
 800e95e:	1a9b      	subs	r3, r3, r2
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	4413      	add	r3, r2
 800e964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e968:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	899b      	ldrh	r3, [r3, #12]
 800e972:	4619      	mov	r1, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	fbb3 f3f1 	udiv	r3, r3, r1
 800e97a:	4413      	add	r3, r2
 800e97c:	4619      	mov	r1, r3
 800e97e:	6938      	ldr	r0, [r7, #16]
 800e980:	f7ff feec 	bl	800e75c <move_window>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d16f      	bne.n	800ea6a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e98a:	693b      	ldr	r3, [r7, #16]
 800e98c:	899b      	ldrh	r3, [r3, #12]
 800e98e:	461a      	mov	r2, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	fbb3 f1f2 	udiv	r1, r3, r2
 800e996:	fb01 f202 	mul.w	r2, r1, r2
 800e99a:	1a9b      	subs	r3, r3, r2
 800e99c:	693a      	ldr	r2, [r7, #16]
 800e99e:	4413      	add	r3, r2
 800e9a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9a4:	021b      	lsls	r3, r3, #8
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	f003 0301 	and.w	r3, r3, #1
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <get_fat+0xe8>
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	091b      	lsrs	r3, r3, #4
 800e9bc:	e002      	b.n	800e9c4 <get_fat+0xee>
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9c4:	617b      	str	r3, [r7, #20]
			break;
 800e9c6:	e055      	b.n	800ea74 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	899b      	ldrh	r3, [r3, #12]
 800e9d0:	085b      	lsrs	r3, r3, #1
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9dc:	4413      	add	r3, r2
 800e9de:	4619      	mov	r1, r3
 800e9e0:	6938      	ldr	r0, [r7, #16]
 800e9e2:	f7ff febb 	bl	800e75c <move_window>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d140      	bne.n	800ea6e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	005b      	lsls	r3, r3, #1
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	8992      	ldrh	r2, [r2, #12]
 800e9fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9fe:	fb00 f202 	mul.w	r2, r0, r2
 800ea02:	1a9b      	subs	r3, r3, r2
 800ea04:	440b      	add	r3, r1
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7ff fbc6 	bl	800e198 <ld_word>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	617b      	str	r3, [r7, #20]
			break;
 800ea10:	e030      	b.n	800ea74 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	899b      	ldrh	r3, [r3, #12]
 800ea1a:	089b      	lsrs	r3, r3, #2
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	4619      	mov	r1, r3
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea26:	4413      	add	r3, r2
 800ea28:	4619      	mov	r1, r3
 800ea2a:	6938      	ldr	r0, [r7, #16]
 800ea2c:	f7ff fe96 	bl	800e75c <move_window>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d11d      	bne.n	800ea72 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	693a      	ldr	r2, [r7, #16]
 800ea42:	8992      	ldrh	r2, [r2, #12]
 800ea44:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea48:	fb00 f202 	mul.w	r2, r0, r2
 800ea4c:	1a9b      	subs	r3, r3, r2
 800ea4e:	440b      	add	r3, r1
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff fbb9 	bl	800e1c8 <ld_dword>
 800ea56:	4603      	mov	r3, r0
 800ea58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ea5c:	617b      	str	r3, [r7, #20]
			break;
 800ea5e:	e009      	b.n	800ea74 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ea60:	2301      	movs	r3, #1
 800ea62:	617b      	str	r3, [r7, #20]
 800ea64:	e006      	b.n	800ea74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea66:	bf00      	nop
 800ea68:	e004      	b.n	800ea74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea6a:	bf00      	nop
 800ea6c:	e002      	b.n	800ea74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea6e:	bf00      	nop
 800ea70:	e000      	b.n	800ea74 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea72:	bf00      	nop
		}
	}

	return val;
 800ea74:	697b      	ldr	r3, [r7, #20]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ea7e:	b590      	push	{r4, r7, lr}
 800ea80:	b089      	sub	sp, #36	; 0x24
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	60f8      	str	r0, [r7, #12]
 800ea86:	60b9      	str	r1, [r7, #8]
 800ea88:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ea8a:	2302      	movs	r3, #2
 800ea8c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	f240 8109 	bls.w	800eca8 <put_fat+0x22a>
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6a1b      	ldr	r3, [r3, #32]
 800ea9a:	68ba      	ldr	r2, [r7, #8]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	f080 8103 	bcs.w	800eca8 <put_fat+0x22a>
		switch (fs->fs_type) {
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	f000 80b6 	beq.w	800ec18 <put_fat+0x19a>
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	f300 80fb 	bgt.w	800eca8 <put_fat+0x22a>
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d003      	beq.n	800eabe <put_fat+0x40>
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	f000 8083 	beq.w	800ebc2 <put_fat+0x144>
 800eabc:	e0f4      	b.n	800eca8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	61bb      	str	r3, [r7, #24]
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	085b      	lsrs	r3, r3, #1
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	4413      	add	r3, r2
 800eaca:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	899b      	ldrh	r3, [r3, #12]
 800ead4:	4619      	mov	r1, r3
 800ead6:	69bb      	ldr	r3, [r7, #24]
 800ead8:	fbb3 f3f1 	udiv	r3, r3, r1
 800eadc:	4413      	add	r3, r2
 800eade:	4619      	mov	r1, r3
 800eae0:	68f8      	ldr	r0, [r7, #12]
 800eae2:	f7ff fe3b 	bl	800e75c <move_window>
 800eae6:	4603      	mov	r3, r0
 800eae8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eaea:	7ffb      	ldrb	r3, [r7, #31]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f040 80d4 	bne.w	800ec9a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	1c5a      	adds	r2, r3, #1
 800eafc:	61ba      	str	r2, [r7, #24]
 800eafe:	68fa      	ldr	r2, [r7, #12]
 800eb00:	8992      	ldrh	r2, [r2, #12]
 800eb02:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb06:	fb00 f202 	mul.w	r2, r0, r2
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	440b      	add	r3, r1
 800eb0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f003 0301 	and.w	r3, r3, #1
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00d      	beq.n	800eb36 <put_fat+0xb8>
 800eb1a:	697b      	ldr	r3, [r7, #20]
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	b25b      	sxtb	r3, r3
 800eb20:	f003 030f 	and.w	r3, r3, #15
 800eb24:	b25a      	sxtb	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	b2db      	uxtb	r3, r3
 800eb2a:	011b      	lsls	r3, r3, #4
 800eb2c:	b25b      	sxtb	r3, r3
 800eb2e:	4313      	orrs	r3, r2
 800eb30:	b25b      	sxtb	r3, r3
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	e001      	b.n	800eb3a <put_fat+0xbc>
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	697a      	ldr	r2, [r7, #20]
 800eb3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2201      	movs	r2, #1
 800eb42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	69bb      	ldr	r3, [r7, #24]
 800eb50:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb54:	4413      	add	r3, r2
 800eb56:	4619      	mov	r1, r3
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f7ff fdff 	bl	800e75c <move_window>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb62:	7ffb      	ldrb	r3, [r7, #31]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	f040 809a 	bne.w	800ec9e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	899b      	ldrh	r3, [r3, #12]
 800eb74:	461a      	mov	r2, r3
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb7c:	fb00 f202 	mul.w	r2, r0, r2
 800eb80:	1a9b      	subs	r3, r3, r2
 800eb82:	440b      	add	r3, r1
 800eb84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d003      	beq.n	800eb98 <put_fat+0x11a>
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	091b      	lsrs	r3, r3, #4
 800eb94:	b2db      	uxtb	r3, r3
 800eb96:	e00e      	b.n	800ebb6 <put_fat+0x138>
 800eb98:	697b      	ldr	r3, [r7, #20]
 800eb9a:	781b      	ldrb	r3, [r3, #0]
 800eb9c:	b25b      	sxtb	r3, r3
 800eb9e:	f023 030f 	bic.w	r3, r3, #15
 800eba2:	b25a      	sxtb	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	0a1b      	lsrs	r3, r3, #8
 800eba8:	b25b      	sxtb	r3, r3
 800ebaa:	f003 030f 	and.w	r3, r3, #15
 800ebae:	b25b      	sxtb	r3, r3
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	b25b      	sxtb	r3, r3
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	697a      	ldr	r2, [r7, #20]
 800ebb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	70da      	strb	r2, [r3, #3]
			break;
 800ebc0:	e072      	b.n	800eca8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	899b      	ldrh	r3, [r3, #12]
 800ebca:	085b      	lsrs	r3, r3, #1
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebd6:	4413      	add	r3, r2
 800ebd8:	4619      	mov	r1, r3
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f7ff fdbe 	bl	800e75c <move_window>
 800ebe0:	4603      	mov	r3, r0
 800ebe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebe4:	7ffb      	ldrb	r3, [r7, #31]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d15b      	bne.n	800eca2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	005b      	lsls	r3, r3, #1
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	8992      	ldrh	r2, [r2, #12]
 800ebf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebfc:	fb00 f202 	mul.w	r2, r0, r2
 800ec00:	1a9b      	subs	r3, r3, r2
 800ec02:	440b      	add	r3, r1
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	b292      	uxth	r2, r2
 800ec08:	4611      	mov	r1, r2
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7ff faff 	bl	800e20e <st_word>
			fs->wflag = 1;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2201      	movs	r2, #1
 800ec14:	70da      	strb	r2, [r3, #3]
			break;
 800ec16:	e047      	b.n	800eca8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	899b      	ldrh	r3, [r3, #12]
 800ec20:	089b      	lsrs	r3, r3, #2
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	4619      	mov	r1, r3
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec2c:	4413      	add	r3, r2
 800ec2e:	4619      	mov	r1, r3
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f7ff fd93 	bl	800e75c <move_window>
 800ec36:	4603      	mov	r3, r0
 800ec38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec3a:	7ffb      	ldrb	r3, [r7, #31]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d132      	bne.n	800eca6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	8992      	ldrh	r2, [r2, #12]
 800ec54:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec58:	fb00 f202 	mul.w	r2, r0, r2
 800ec5c:	1a9b      	subs	r3, r3, r2
 800ec5e:	440b      	add	r3, r1
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fab1 	bl	800e1c8 <ld_dword>
 800ec66:	4603      	mov	r3, r0
 800ec68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ec6c:	4323      	orrs	r3, r4
 800ec6e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	009b      	lsls	r3, r3, #2
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	8992      	ldrh	r2, [r2, #12]
 800ec7e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec82:	fb00 f202 	mul.w	r2, r0, r2
 800ec86:	1a9b      	subs	r3, r3, r2
 800ec88:	440b      	add	r3, r1
 800ec8a:	6879      	ldr	r1, [r7, #4]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7ff fad9 	bl	800e244 <st_dword>
			fs->wflag = 1;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	2201      	movs	r2, #1
 800ec96:	70da      	strb	r2, [r3, #3]
			break;
 800ec98:	e006      	b.n	800eca8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ec9a:	bf00      	nop
 800ec9c:	e004      	b.n	800eca8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ec9e:	bf00      	nop
 800eca0:	e002      	b.n	800eca8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800eca2:	bf00      	nop
 800eca4:	e000      	b.n	800eca8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800eca6:	bf00      	nop
		}
	}
	return res;
 800eca8:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3724      	adds	r7, #36	; 0x24
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd90      	pop	{r4, r7, pc}

0800ecb2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ecb2:	b580      	push	{r7, lr}
 800ecb4:	b088      	sub	sp, #32
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	60f8      	str	r0, [r7, #12]
 800ecba:	60b9      	str	r1, [r7, #8]
 800ecbc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b01      	cmp	r3, #1
 800eccc:	d904      	bls.n	800ecd8 <remove_chain+0x26>
 800ecce:	69bb      	ldr	r3, [r7, #24]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	68ba      	ldr	r2, [r7, #8]
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d301      	bcc.n	800ecdc <remove_chain+0x2a>
 800ecd8:	2302      	movs	r3, #2
 800ecda:	e04b      	b.n	800ed74 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00c      	beq.n	800ecfc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ece2:	f04f 32ff 	mov.w	r2, #4294967295
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	69b8      	ldr	r0, [r7, #24]
 800ecea:	f7ff fec8 	bl	800ea7e <put_fat>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ecf2:	7ffb      	ldrb	r3, [r7, #31]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d001      	beq.n	800ecfc <remove_chain+0x4a>
 800ecf8:	7ffb      	ldrb	r3, [r7, #31]
 800ecfa:	e03b      	b.n	800ed74 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ecfc:	68b9      	ldr	r1, [r7, #8]
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f7ff fde9 	bl	800e8d6 <get_fat>
 800ed04:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d031      	beq.n	800ed70 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d101      	bne.n	800ed16 <remove_chain+0x64>
 800ed12:	2302      	movs	r3, #2
 800ed14:	e02e      	b.n	800ed74 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1c:	d101      	bne.n	800ed22 <remove_chain+0x70>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e028      	b.n	800ed74 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed22:	2200      	movs	r2, #0
 800ed24:	68b9      	ldr	r1, [r7, #8]
 800ed26:	69b8      	ldr	r0, [r7, #24]
 800ed28:	f7ff fea9 	bl	800ea7e <put_fat>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ed30:	7ffb      	ldrb	r3, [r7, #31]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d001      	beq.n	800ed3a <remove_chain+0x88>
 800ed36:	7ffb      	ldrb	r3, [r7, #31]
 800ed38:	e01c      	b.n	800ed74 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	69da      	ldr	r2, [r3, #28]
 800ed3e:	69bb      	ldr	r3, [r7, #24]
 800ed40:	6a1b      	ldr	r3, [r3, #32]
 800ed42:	3b02      	subs	r3, #2
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d20b      	bcs.n	800ed60 <remove_chain+0xae>
			fs->free_clst++;
 800ed48:	69bb      	ldr	r3, [r7, #24]
 800ed4a:	69db      	ldr	r3, [r3, #28]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	791b      	ldrb	r3, [r3, #4]
 800ed56:	f043 0301 	orr.w	r3, r3, #1
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	6a1b      	ldr	r3, [r3, #32]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d3c6      	bcc.n	800ecfc <remove_chain+0x4a>
 800ed6e:	e000      	b.n	800ed72 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ed70:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3720      	adds	r7, #32
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10d      	bne.n	800edae <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	699b      	ldr	r3, [r3, #24]
 800ed96:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d004      	beq.n	800eda8 <create_chain+0x2c>
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	69ba      	ldr	r2, [r7, #24]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d31b      	bcc.n	800ede0 <create_chain+0x64>
 800eda8:	2301      	movs	r3, #1
 800edaa:	61bb      	str	r3, [r7, #24]
 800edac:	e018      	b.n	800ede0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f7ff fd90 	bl	800e8d6 <get_fat>
 800edb6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d801      	bhi.n	800edc2 <create_chain+0x46>
 800edbe:	2301      	movs	r3, #1
 800edc0:	e070      	b.n	800eea4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edc8:	d101      	bne.n	800edce <create_chain+0x52>
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	e06a      	b.n	800eea4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d201      	bcs.n	800eddc <create_chain+0x60>
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	e063      	b.n	800eea4 <create_chain+0x128>
		scl = clst;
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	3301      	adds	r3, #1
 800ede8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	69fa      	ldr	r2, [r7, #28]
 800edf0:	429a      	cmp	r2, r3
 800edf2:	d307      	bcc.n	800ee04 <create_chain+0x88>
				ncl = 2;
 800edf4:	2302      	movs	r3, #2
 800edf6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800edf8:	69fa      	ldr	r2, [r7, #28]
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d901      	bls.n	800ee04 <create_chain+0x88>
 800ee00:	2300      	movs	r3, #0
 800ee02:	e04f      	b.n	800eea4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee04:	69f9      	ldr	r1, [r7, #28]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7ff fd65 	bl	800e8d6 <get_fat>
 800ee0c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00e      	beq.n	800ee32 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d003      	beq.n	800ee22 <create_chain+0xa6>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee20:	d101      	bne.n	800ee26 <create_chain+0xaa>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	e03e      	b.n	800eea4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ee26:	69fa      	ldr	r2, [r7, #28]
 800ee28:	69bb      	ldr	r3, [r7, #24]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d1da      	bne.n	800ede4 <create_chain+0x68>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	e038      	b.n	800eea4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ee32:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ee34:	f04f 32ff 	mov.w	r2, #4294967295
 800ee38:	69f9      	ldr	r1, [r7, #28]
 800ee3a:	6938      	ldr	r0, [r7, #16]
 800ee3c:	f7ff fe1f 	bl	800ea7e <put_fat>
 800ee40:	4603      	mov	r3, r0
 800ee42:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ee44:	7dfb      	ldrb	r3, [r7, #23]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d109      	bne.n	800ee5e <create_chain+0xe2>
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d006      	beq.n	800ee5e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ee50:	69fa      	ldr	r2, [r7, #28]
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6938      	ldr	r0, [r7, #16]
 800ee56:	f7ff fe12 	bl	800ea7e <put_fat>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ee5e:	7dfb      	ldrb	r3, [r7, #23]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d116      	bne.n	800ee92 <create_chain+0x116>
		fs->last_clst = ncl;
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	69fa      	ldr	r2, [r7, #28]
 800ee68:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	69da      	ldr	r2, [r3, #28]
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	3b02      	subs	r3, #2
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d804      	bhi.n	800ee82 <create_chain+0x106>
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	69db      	ldr	r3, [r3, #28]
 800ee7c:	1e5a      	subs	r2, r3, #1
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	791b      	ldrb	r3, [r3, #4]
 800ee86:	f043 0301 	orr.w	r3, r3, #1
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	711a      	strb	r2, [r3, #4]
 800ee90:	e007      	b.n	800eea2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ee92:	7dfb      	ldrb	r3, [r7, #23]
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d102      	bne.n	800ee9e <create_chain+0x122>
 800ee98:	f04f 33ff 	mov.w	r3, #4294967295
 800ee9c:	e000      	b.n	800eea0 <create_chain+0x124>
 800ee9e:	2301      	movs	r3, #1
 800eea0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eea2:	69fb      	ldr	r3, [r7, #28]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3720      	adds	r7, #32
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b087      	sub	sp, #28
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec0:	3304      	adds	r3, #4
 800eec2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	899b      	ldrh	r3, [r3, #12]
 800eec8:	461a      	mov	r2, r3
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	8952      	ldrh	r2, [r2, #10]
 800eed4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	1d1a      	adds	r2, r3, #4
 800eede:	613a      	str	r2, [r7, #16]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d101      	bne.n	800eeee <clmt_clust+0x42>
 800eeea:	2300      	movs	r3, #0
 800eeec:	e010      	b.n	800ef10 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800eeee:	697a      	ldr	r2, [r7, #20]
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d307      	bcc.n	800ef06 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800eef6:	697a      	ldr	r2, [r7, #20]
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	1ad3      	subs	r3, r2, r3
 800eefc:	617b      	str	r3, [r7, #20]
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	3304      	adds	r3, #4
 800ef02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef04:	e7e9      	b.n	800eeda <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ef06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	4413      	add	r3, r2
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b086      	sub	sp, #24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef32:	d204      	bcs.n	800ef3e <dir_sdi+0x22>
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	f003 031f 	and.w	r3, r3, #31
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ef3e:	2302      	movs	r3, #2
 800ef40:	e071      	b.n	800f026 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	683a      	ldr	r2, [r7, #0]
 800ef46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ef4e:	697b      	ldr	r3, [r7, #20]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d106      	bne.n	800ef62 <dir_sdi+0x46>
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d902      	bls.n	800ef62 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d10c      	bne.n	800ef82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	095b      	lsrs	r3, r3, #5
 800ef6c:	693a      	ldr	r2, [r7, #16]
 800ef6e:	8912      	ldrh	r2, [r2, #8]
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d301      	bcc.n	800ef78 <dir_sdi+0x5c>
 800ef74:	2302      	movs	r3, #2
 800ef76:	e056      	b.n	800f026 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	61da      	str	r2, [r3, #28]
 800ef80:	e02d      	b.n	800efde <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	895b      	ldrh	r3, [r3, #10]
 800ef86:	461a      	mov	r2, r3
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	899b      	ldrh	r3, [r3, #12]
 800ef8c:	fb02 f303 	mul.w	r3, r2, r3
 800ef90:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ef92:	e019      	b.n	800efc8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6979      	ldr	r1, [r7, #20]
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff fc9c 	bl	800e8d6 <get_fat>
 800ef9e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa6:	d101      	bne.n	800efac <dir_sdi+0x90>
 800efa8:	2301      	movs	r3, #1
 800efaa:	e03c      	b.n	800f026 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	2b01      	cmp	r3, #1
 800efb0:	d904      	bls.n	800efbc <dir_sdi+0xa0>
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	6a1b      	ldr	r3, [r3, #32]
 800efb6:	697a      	ldr	r2, [r7, #20]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d301      	bcc.n	800efc0 <dir_sdi+0xa4>
 800efbc:	2302      	movs	r3, #2
 800efbe:	e032      	b.n	800f026 <dir_sdi+0x10a>
			ofs -= csz;
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	1ad3      	subs	r3, r2, r3
 800efc6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d2e1      	bcs.n	800ef94 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800efd0:	6979      	ldr	r1, [r7, #20]
 800efd2:	6938      	ldr	r0, [r7, #16]
 800efd4:	f7ff fc60 	bl	800e898 <clust2sect>
 800efd8:	4602      	mov	r2, r0
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	69db      	ldr	r3, [r3, #28]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d101      	bne.n	800eff0 <dir_sdi+0xd4>
 800efec:	2302      	movs	r3, #2
 800efee:	e01a      	b.n	800f026 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	69da      	ldr	r2, [r3, #28]
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	899b      	ldrh	r3, [r3, #12]
 800eff8:	4619      	mov	r1, r3
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f000:	441a      	add	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	899b      	ldrh	r3, [r3, #12]
 800f010:	461a      	mov	r2, r3
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	fbb3 f0f2 	udiv	r0, r3, r2
 800f018:	fb00 f202 	mul.w	r2, r0, r2
 800f01c:	1a9b      	subs	r3, r3, r2
 800f01e:	18ca      	adds	r2, r1, r3
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f024:	2300      	movs	r3, #0
}
 800f026:	4618      	mov	r0, r3
 800f028:	3718      	adds	r7, #24
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b086      	sub	sp, #24
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
 800f036:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	695b      	ldr	r3, [r3, #20]
 800f042:	3320      	adds	r3, #32
 800f044:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	69db      	ldr	r3, [r3, #28]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d003      	beq.n	800f056 <dir_next+0x28>
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f054:	d301      	bcc.n	800f05a <dir_next+0x2c>
 800f056:	2304      	movs	r3, #4
 800f058:	e0bb      	b.n	800f1d2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	899b      	ldrh	r3, [r3, #12]
 800f05e:	461a      	mov	r2, r3
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	fbb3 f1f2 	udiv	r1, r3, r2
 800f066:	fb01 f202 	mul.w	r2, r1, r2
 800f06a:	1a9b      	subs	r3, r3, r2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	f040 809d 	bne.w	800f1ac <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	699b      	ldr	r3, [r3, #24]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d10b      	bne.n	800f09c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	095b      	lsrs	r3, r3, #5
 800f088:	68fa      	ldr	r2, [r7, #12]
 800f08a:	8912      	ldrh	r2, [r2, #8]
 800f08c:	4293      	cmp	r3, r2
 800f08e:	f0c0 808d 	bcc.w	800f1ac <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	61da      	str	r2, [r3, #28]
 800f098:	2304      	movs	r3, #4
 800f09a:	e09a      	b.n	800f1d2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	899b      	ldrh	r3, [r3, #12]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	8952      	ldrh	r2, [r2, #10]
 800f0ac:	3a01      	subs	r2, #1
 800f0ae:	4013      	ands	r3, r2
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d17b      	bne.n	800f1ac <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f0b4:	687a      	ldr	r2, [r7, #4]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	4610      	mov	r0, r2
 800f0be:	f7ff fc0a 	bl	800e8d6 <get_fat>
 800f0c2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d801      	bhi.n	800f0ce <dir_next+0xa0>
 800f0ca:	2302      	movs	r3, #2
 800f0cc:	e081      	b.n	800f1d2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d4:	d101      	bne.n	800f0da <dir_next+0xac>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e07b      	b.n	800f1d2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	697a      	ldr	r2, [r7, #20]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d359      	bcc.n	800f198 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d104      	bne.n	800f0f4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	61da      	str	r2, [r3, #28]
 800f0f0:	2304      	movs	r3, #4
 800f0f2:	e06e      	b.n	800f1d2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	699b      	ldr	r3, [r3, #24]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	f7ff fe3d 	bl	800ed7c <create_chain>
 800f102:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d101      	bne.n	800f10e <dir_next+0xe0>
 800f10a:	2307      	movs	r3, #7
 800f10c:	e061      	b.n	800f1d2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d101      	bne.n	800f118 <dir_next+0xea>
 800f114:	2302      	movs	r3, #2
 800f116:	e05c      	b.n	800f1d2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d101      	bne.n	800f124 <dir_next+0xf6>
 800f120:	2301      	movs	r3, #1
 800f122:	e056      	b.n	800f1d2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f7ff fad5 	bl	800e6d4 <sync_window>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d001      	beq.n	800f134 <dir_next+0x106>
 800f130:	2301      	movs	r3, #1
 800f132:	e04e      	b.n	800f1d2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	899b      	ldrh	r3, [r3, #12]
 800f13e:	461a      	mov	r2, r3
 800f140:	2100      	movs	r1, #0
 800f142:	f7ff f8cc 	bl	800e2de <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f146:	2300      	movs	r3, #0
 800f148:	613b      	str	r3, [r7, #16]
 800f14a:	6979      	ldr	r1, [r7, #20]
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff fba3 	bl	800e898 <clust2sect>
 800f152:	4602      	mov	r2, r0
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	639a      	str	r2, [r3, #56]	; 0x38
 800f158:	e012      	b.n	800f180 <dir_next+0x152>
						fs->wflag = 1;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2201      	movs	r2, #1
 800f15e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f7ff fab7 	bl	800e6d4 <sync_window>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d001      	beq.n	800f170 <dir_next+0x142>
 800f16c:	2301      	movs	r3, #1
 800f16e:	e030      	b.n	800f1d2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	3301      	adds	r3, #1
 800f174:	613b      	str	r3, [r7, #16]
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	639a      	str	r2, [r3, #56]	; 0x38
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	895b      	ldrh	r3, [r3, #10]
 800f184:	461a      	mov	r2, r3
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	4293      	cmp	r3, r2
 800f18a:	d3e6      	bcc.n	800f15a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	1ad2      	subs	r2, r2, r3
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f19e:	6979      	ldr	r1, [r7, #20]
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f7ff fb79 	bl	800e898 <clust2sect>
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	899b      	ldrh	r3, [r3, #12]
 800f1bc:	461a      	mov	r2, r3
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1c4:	fb00 f202 	mul.w	r2, r0, r2
 800f1c8:	1a9b      	subs	r3, r3, r2
 800f1ca:	18ca      	adds	r2, r1, r3
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3718      	adds	r7, #24
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	bd80      	pop	{r7, pc}

0800f1da <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f1da:	b580      	push	{r7, lr}
 800f1dc:	b086      	sub	sp, #24
 800f1de:	af00      	add	r7, sp, #0
 800f1e0:	6078      	str	r0, [r7, #4]
 800f1e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f7ff fe95 	bl	800ef1c <dir_sdi>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d12b      	bne.n	800f254 <dir_alloc+0x7a>
		n = 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	69db      	ldr	r3, [r3, #28]
 800f204:	4619      	mov	r1, r3
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7ff faa8 	bl	800e75c <move_window>
 800f20c:	4603      	mov	r3, r0
 800f20e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d11d      	bne.n	800f252 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	2be5      	cmp	r3, #229	; 0xe5
 800f21e:	d004      	beq.n	800f22a <dir_alloc+0x50>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6a1b      	ldr	r3, [r3, #32]
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d107      	bne.n	800f23a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	3301      	adds	r3, #1
 800f22e:	613b      	str	r3, [r7, #16]
 800f230:	693a      	ldr	r2, [r7, #16]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	429a      	cmp	r2, r3
 800f236:	d102      	bne.n	800f23e <dir_alloc+0x64>
 800f238:	e00c      	b.n	800f254 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f23a:	2300      	movs	r3, #0
 800f23c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f23e:	2101      	movs	r1, #1
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff fef4 	bl	800f02e <dir_next>
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d0d7      	beq.n	800f200 <dir_alloc+0x26>
 800f250:	e000      	b.n	800f254 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f252:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f254:	7dfb      	ldrb	r3, [r7, #23]
 800f256:	2b04      	cmp	r3, #4
 800f258:	d101      	bne.n	800f25e <dir_alloc+0x84>
 800f25a:	2307      	movs	r3, #7
 800f25c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	331a      	adds	r3, #26
 800f276:	4618      	mov	r0, r3
 800f278:	f7fe ff8e 	bl	800e198 <ld_word>
 800f27c:	4603      	mov	r3, r0
 800f27e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b03      	cmp	r3, #3
 800f286:	d109      	bne.n	800f29c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	3314      	adds	r3, #20
 800f28c:	4618      	mov	r0, r3
 800f28e:	f7fe ff83 	bl	800e198 <ld_word>
 800f292:	4603      	mov	r3, r0
 800f294:	041b      	lsls	r3, r3, #16
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4313      	orrs	r3, r2
 800f29a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f29c:	68fb      	ldr	r3, [r7, #12]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3710      	adds	r7, #16
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b084      	sub	sp, #16
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	60f8      	str	r0, [r7, #12]
 800f2ae:	60b9      	str	r1, [r7, #8]
 800f2b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	331a      	adds	r3, #26
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	b292      	uxth	r2, r2
 800f2ba:	4611      	mov	r1, r2
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7fe ffa6 	bl	800e20e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	2b03      	cmp	r3, #3
 800f2c8:	d109      	bne.n	800f2de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	f103 0214 	add.w	r2, r3, #20
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	0c1b      	lsrs	r3, r3, #16
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	4610      	mov	r0, r2
 800f2da:	f7fe ff98 	bl	800e20e <st_word>
	}
}
 800f2de:	bf00      	nop
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f2e8:	b590      	push	{r4, r7, lr}
 800f2ea:	b087      	sub	sp, #28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	331a      	adds	r3, #26
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fe ff4e 	bl	800e198 <ld_word>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d001      	beq.n	800f306 <cmp_lfn+0x1e>
 800f302:	2300      	movs	r3, #0
 800f304:	e059      	b.n	800f3ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f30e:	1e5a      	subs	r2, r3, #1
 800f310:	4613      	mov	r3, r2
 800f312:	005b      	lsls	r3, r3, #1
 800f314:	4413      	add	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	4413      	add	r3, r2
 800f31a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f31c:	2301      	movs	r3, #1
 800f31e:	81fb      	strh	r3, [r7, #14]
 800f320:	2300      	movs	r3, #0
 800f322:	613b      	str	r3, [r7, #16]
 800f324:	e033      	b.n	800f38e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f326:	4a27      	ldr	r2, [pc, #156]	; (800f3c4 <cmp_lfn+0xdc>)
 800f328:	693b      	ldr	r3, [r7, #16]
 800f32a:	4413      	add	r3, r2
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	4413      	add	r3, r2
 800f334:	4618      	mov	r0, r3
 800f336:	f7fe ff2f 	bl	800e198 <ld_word>
 800f33a:	4603      	mov	r3, r0
 800f33c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f33e:	89fb      	ldrh	r3, [r7, #14]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d01a      	beq.n	800f37a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2bfe      	cmp	r3, #254	; 0xfe
 800f348:	d812      	bhi.n	800f370 <cmp_lfn+0x88>
 800f34a:	89bb      	ldrh	r3, [r7, #12]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f002 fd85 	bl	8011e5c <ff_wtoupper>
 800f352:	4603      	mov	r3, r0
 800f354:	461c      	mov	r4, r3
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	1c5a      	adds	r2, r3, #1
 800f35a:	617a      	str	r2, [r7, #20]
 800f35c:	005b      	lsls	r3, r3, #1
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	4413      	add	r3, r2
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	4618      	mov	r0, r3
 800f366:	f002 fd79 	bl	8011e5c <ff_wtoupper>
 800f36a:	4603      	mov	r3, r0
 800f36c:	429c      	cmp	r4, r3
 800f36e:	d001      	beq.n	800f374 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f370:	2300      	movs	r3, #0
 800f372:	e022      	b.n	800f3ba <cmp_lfn+0xd2>
			}
			wc = uc;
 800f374:	89bb      	ldrh	r3, [r7, #12]
 800f376:	81fb      	strh	r3, [r7, #14]
 800f378:	e006      	b.n	800f388 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f37a:	89bb      	ldrh	r3, [r7, #12]
 800f37c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f380:	4293      	cmp	r3, r2
 800f382:	d001      	beq.n	800f388 <cmp_lfn+0xa0>
 800f384:	2300      	movs	r3, #0
 800f386:	e018      	b.n	800f3ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	3301      	adds	r3, #1
 800f38c:	613b      	str	r3, [r7, #16]
 800f38e:	693b      	ldr	r3, [r7, #16]
 800f390:	2b0c      	cmp	r3, #12
 800f392:	d9c8      	bls.n	800f326 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d00b      	beq.n	800f3b8 <cmp_lfn+0xd0>
 800f3a0:	89fb      	ldrh	r3, [r7, #14]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d008      	beq.n	800f3b8 <cmp_lfn+0xd0>
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	005b      	lsls	r3, r3, #1
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d001      	beq.n	800f3b8 <cmp_lfn+0xd0>
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	e000      	b.n	800f3ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f3b8:	2301      	movs	r3, #1
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	371c      	adds	r7, #28
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd90      	pop	{r4, r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	0801a588 	.word	0x0801a588

0800f3c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b088      	sub	sp, #32
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	460b      	mov	r3, r1
 800f3d8:	71fb      	strb	r3, [r7, #7]
 800f3da:	4613      	mov	r3, r2
 800f3dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	330d      	adds	r3, #13
 800f3e2:	79ba      	ldrb	r2, [r7, #6]
 800f3e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	330b      	adds	r3, #11
 800f3ea:	220f      	movs	r2, #15
 800f3ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	330c      	adds	r3, #12
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	331a      	adds	r3, #26
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fe ff06 	bl	800e20e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f402:	79fb      	ldrb	r3, [r7, #7]
 800f404:	1e5a      	subs	r2, r3, #1
 800f406:	4613      	mov	r3, r2
 800f408:	005b      	lsls	r3, r3, #1
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	82fb      	strh	r3, [r7, #22]
 800f416:	2300      	movs	r3, #0
 800f418:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f41a:	8afb      	ldrh	r3, [r7, #22]
 800f41c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f420:	4293      	cmp	r3, r2
 800f422:	d007      	beq.n	800f434 <put_lfn+0x6c>
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	1c5a      	adds	r2, r3, #1
 800f428:	61fa      	str	r2, [r7, #28]
 800f42a:	005b      	lsls	r3, r3, #1
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4413      	add	r3, r2
 800f430:	881b      	ldrh	r3, [r3, #0]
 800f432:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f434:	4a17      	ldr	r2, [pc, #92]	; (800f494 <put_lfn+0xcc>)
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	4413      	add	r3, r2
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	461a      	mov	r2, r3
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	4413      	add	r3, r2
 800f442:	8afa      	ldrh	r2, [r7, #22]
 800f444:	4611      	mov	r1, r2
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe fee1 	bl	800e20e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f44c:	8afb      	ldrh	r3, [r7, #22]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d102      	bne.n	800f458 <put_lfn+0x90>
 800f452:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f456:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	3301      	adds	r3, #1
 800f45c:	61bb      	str	r3, [r7, #24]
 800f45e:	69bb      	ldr	r3, [r7, #24]
 800f460:	2b0c      	cmp	r3, #12
 800f462:	d9da      	bls.n	800f41a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f464:	8afb      	ldrh	r3, [r7, #22]
 800f466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d006      	beq.n	800f47c <put_lfn+0xb4>
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	005b      	lsls	r3, r3, #1
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	4413      	add	r3, r2
 800f476:	881b      	ldrh	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d103      	bne.n	800f484 <put_lfn+0xbc>
 800f47c:	79fb      	ldrb	r3, [r7, #7]
 800f47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f482:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	79fa      	ldrb	r2, [r7, #7]
 800f488:	701a      	strb	r2, [r3, #0]
}
 800f48a:	bf00      	nop
 800f48c:	3720      	adds	r7, #32
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	0801a588 	.word	0x0801a588

0800f498 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b08c      	sub	sp, #48	; 0x30
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	60f8      	str	r0, [r7, #12]
 800f4a0:	60b9      	str	r1, [r7, #8]
 800f4a2:	607a      	str	r2, [r7, #4]
 800f4a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f4a6:	220b      	movs	r2, #11
 800f4a8:	68b9      	ldr	r1, [r7, #8]
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f7fe fef6 	bl	800e29c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2b05      	cmp	r3, #5
 800f4b4:	d92b      	bls.n	800f50e <gen_numname+0x76>
		sr = seq;
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f4ba:	e022      	b.n	800f502 <gen_numname+0x6a>
			wc = *lfn++;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	1c9a      	adds	r2, r3, #2
 800f4c0:	607a      	str	r2, [r7, #4]
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4ca:	e017      	b.n	800f4fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	005a      	lsls	r2, r3, #1
 800f4d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4d2:	f003 0301 	and.w	r3, r3, #1
 800f4d6:	4413      	add	r3, r2
 800f4d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f4da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4dc:	085b      	lsrs	r3, r3, #1
 800f4de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d005      	beq.n	800f4f6 <gen_numname+0x5e>
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f4f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f4f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f8:	3301      	adds	r3, #1
 800f4fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fe:	2b0f      	cmp	r3, #15
 800f500:	d9e4      	bls.n	800f4cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d1d8      	bne.n	800f4bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f50e:	2307      	movs	r3, #7
 800f510:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	b2db      	uxtb	r3, r3
 800f516:	f003 030f 	and.w	r3, r3, #15
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	3330      	adds	r3, #48	; 0x30
 800f51e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f522:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f526:	2b39      	cmp	r3, #57	; 0x39
 800f528:	d904      	bls.n	800f534 <gen_numname+0x9c>
 800f52a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f52e:	3307      	adds	r3, #7
 800f530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f536:	1e5a      	subs	r2, r3, #1
 800f538:	62ba      	str	r2, [r7, #40]	; 0x28
 800f53a:	3330      	adds	r3, #48	; 0x30
 800f53c:	443b      	add	r3, r7
 800f53e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f542:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	091b      	lsrs	r3, r3, #4
 800f54a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1df      	bne.n	800f512 <gen_numname+0x7a>
	ns[i] = '~';
 800f552:	f107 0214 	add.w	r2, r7, #20
 800f556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f558:	4413      	add	r3, r2
 800f55a:	227e      	movs	r2, #126	; 0x7e
 800f55c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f55e:	2300      	movs	r3, #0
 800f560:	627b      	str	r3, [r7, #36]	; 0x24
 800f562:	e002      	b.n	800f56a <gen_numname+0xd2>
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	3301      	adds	r3, #1
 800f568:	627b      	str	r3, [r7, #36]	; 0x24
 800f56a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56e:	429a      	cmp	r2, r3
 800f570:	d205      	bcs.n	800f57e <gen_numname+0xe6>
 800f572:	68fa      	ldr	r2, [r7, #12]
 800f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f576:	4413      	add	r3, r2
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	2b20      	cmp	r3, #32
 800f57c:	d1f2      	bne.n	800f564 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f580:	2b07      	cmp	r3, #7
 800f582:	d807      	bhi.n	800f594 <gen_numname+0xfc>
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	1c5a      	adds	r2, r3, #1
 800f588:	62ba      	str	r2, [r7, #40]	; 0x28
 800f58a:	3330      	adds	r3, #48	; 0x30
 800f58c:	443b      	add	r3, r7
 800f58e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f592:	e000      	b.n	800f596 <gen_numname+0xfe>
 800f594:	2120      	movs	r1, #32
 800f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f598:	1c5a      	adds	r2, r3, #1
 800f59a:	627a      	str	r2, [r7, #36]	; 0x24
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	4413      	add	r3, r2
 800f5a0:	460a      	mov	r2, r1
 800f5a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a6:	2b07      	cmp	r3, #7
 800f5a8:	d9e9      	bls.n	800f57e <gen_numname+0xe6>
}
 800f5aa:	bf00      	nop
 800f5ac:	bf00      	nop
 800f5ae:	3730      	adds	r7, #48	; 0x30
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f5c0:	230b      	movs	r3, #11
 800f5c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f5c4:	7bfb      	ldrb	r3, [r7, #15]
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	0852      	lsrs	r2, r2, #1
 800f5ca:	01db      	lsls	r3, r3, #7
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	b2da      	uxtb	r2, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	1c59      	adds	r1, r3, #1
 800f5d4:	6079      	str	r1, [r7, #4]
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	4413      	add	r3, r2
 800f5da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	3b01      	subs	r3, #1
 800f5e0:	60bb      	str	r3, [r7, #8]
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d1ed      	bne.n	800f5c4 <sum_sfn+0x10>
	return sum;
 800f5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr

0800f5f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b086      	sub	sp, #24
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f604:	2100      	movs	r1, #0
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	f7ff fc88 	bl	800ef1c <dir_sdi>
 800f60c:	4603      	mov	r3, r0
 800f60e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f610:	7dfb      	ldrb	r3, [r7, #23]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <dir_find+0x24>
 800f616:	7dfb      	ldrb	r3, [r7, #23]
 800f618:	e0a9      	b.n	800f76e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f61a:	23ff      	movs	r3, #255	; 0xff
 800f61c:	753b      	strb	r3, [r7, #20]
 800f61e:	7d3b      	ldrb	r3, [r7, #20]
 800f620:	757b      	strb	r3, [r7, #21]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f04f 32ff 	mov.w	r2, #4294967295
 800f628:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	69db      	ldr	r3, [r3, #28]
 800f62e:	4619      	mov	r1, r3
 800f630:	6938      	ldr	r0, [r7, #16]
 800f632:	f7ff f893 	bl	800e75c <move_window>
 800f636:	4603      	mov	r3, r0
 800f638:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f63a:	7dfb      	ldrb	r3, [r7, #23]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	f040 8090 	bne.w	800f762 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6a1b      	ldr	r3, [r3, #32]
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f64a:	7dbb      	ldrb	r3, [r7, #22]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d102      	bne.n	800f656 <dir_find+0x60>
 800f650:	2304      	movs	r3, #4
 800f652:	75fb      	strb	r3, [r7, #23]
 800f654:	e08a      	b.n	800f76c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	330b      	adds	r3, #11
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f662:	73fb      	strb	r3, [r7, #15]
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	7bfa      	ldrb	r2, [r7, #15]
 800f668:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f66a:	7dbb      	ldrb	r3, [r7, #22]
 800f66c:	2be5      	cmp	r3, #229	; 0xe5
 800f66e:	d007      	beq.n	800f680 <dir_find+0x8a>
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	f003 0308 	and.w	r3, r3, #8
 800f676:	2b00      	cmp	r3, #0
 800f678:	d009      	beq.n	800f68e <dir_find+0x98>
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
 800f67c:	2b0f      	cmp	r3, #15
 800f67e:	d006      	beq.n	800f68e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f680:	23ff      	movs	r3, #255	; 0xff
 800f682:	757b      	strb	r3, [r7, #21]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f04f 32ff 	mov.w	r2, #4294967295
 800f68a:	631a      	str	r2, [r3, #48]	; 0x30
 800f68c:	e05e      	b.n	800f74c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	2b0f      	cmp	r3, #15
 800f692:	d136      	bne.n	800f702 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f69a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d154      	bne.n	800f74c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f6a2:	7dbb      	ldrb	r3, [r7, #22]
 800f6a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00d      	beq.n	800f6c8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	7b5b      	ldrb	r3, [r3, #13]
 800f6b2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f6b4:	7dbb      	ldrb	r3, [r7, #22]
 800f6b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6ba:	75bb      	strb	r3, [r7, #22]
 800f6bc:	7dbb      	ldrb	r3, [r7, #22]
 800f6be:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	695a      	ldr	r2, [r3, #20]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f6c8:	7dba      	ldrb	r2, [r7, #22]
 800f6ca:	7d7b      	ldrb	r3, [r7, #21]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d115      	bne.n	800f6fc <dir_find+0x106>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6a1b      	ldr	r3, [r3, #32]
 800f6d4:	330d      	adds	r3, #13
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	7d3a      	ldrb	r2, [r7, #20]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d10e      	bne.n	800f6fc <dir_find+0x106>
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	691a      	ldr	r2, [r3, #16]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6a1b      	ldr	r3, [r3, #32]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	f7ff fdfd 	bl	800f2e8 <cmp_lfn>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d003      	beq.n	800f6fc <dir_find+0x106>
 800f6f4:	7d7b      	ldrb	r3, [r7, #21]
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	b2db      	uxtb	r3, r3
 800f6fa:	e000      	b.n	800f6fe <dir_find+0x108>
 800f6fc:	23ff      	movs	r3, #255	; 0xff
 800f6fe:	757b      	strb	r3, [r7, #21]
 800f700:	e024      	b.n	800f74c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f702:	7d7b      	ldrb	r3, [r7, #21]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d109      	bne.n	800f71c <dir_find+0x126>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff ff51 	bl	800f5b4 <sum_sfn>
 800f712:	4603      	mov	r3, r0
 800f714:	461a      	mov	r2, r3
 800f716:	7d3b      	ldrb	r3, [r7, #20]
 800f718:	4293      	cmp	r3, r2
 800f71a:	d024      	beq.n	800f766 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d10a      	bne.n	800f740 <dir_find+0x14a>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6a18      	ldr	r0, [r3, #32]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	3324      	adds	r3, #36	; 0x24
 800f732:	220b      	movs	r2, #11
 800f734:	4619      	mov	r1, r3
 800f736:	f7fe fded 	bl	800e314 <mem_cmp>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d014      	beq.n	800f76a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f740:	23ff      	movs	r3, #255	; 0xff
 800f742:	757b      	strb	r3, [r7, #21]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f04f 32ff 	mov.w	r2, #4294967295
 800f74a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f74c:	2100      	movs	r1, #0
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7ff fc6d 	bl	800f02e <dir_next>
 800f754:	4603      	mov	r3, r0
 800f756:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f758:	7dfb      	ldrb	r3, [r7, #23]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f43f af65 	beq.w	800f62a <dir_find+0x34>
 800f760:	e004      	b.n	800f76c <dir_find+0x176>
		if (res != FR_OK) break;
 800f762:	bf00      	nop
 800f764:	e002      	b.n	800f76c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f766:	bf00      	nop
 800f768:	e000      	b.n	800f76c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f76a:	bf00      	nop

	return res;
 800f76c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
	...

0800f778 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b08c      	sub	sp, #48	; 0x30
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f78c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d001      	beq.n	800f798 <dir_register+0x20>
 800f794:	2306      	movs	r3, #6
 800f796:	e0e0      	b.n	800f95a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f798:	2300      	movs	r3, #0
 800f79a:	627b      	str	r3, [r7, #36]	; 0x24
 800f79c:	e002      	b.n	800f7a4 <dir_register+0x2c>
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	627b      	str	r3, [r7, #36]	; 0x24
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	691a      	ldr	r2, [r3, #16]
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7aa:	005b      	lsls	r3, r3, #1
 800f7ac:	4413      	add	r3, r2
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d1f4      	bne.n	800f79e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f7ba:	f107 030c 	add.w	r3, r7, #12
 800f7be:	220c      	movs	r2, #12
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f7fe fd6b 	bl	800e29c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f7c6:	7dfb      	ldrb	r3, [r7, #23]
 800f7c8:	f003 0301 	and.w	r3, r3, #1
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d032      	beq.n	800f836 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2240      	movs	r2, #64	; 0x40
 800f7d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f7d8:	2301      	movs	r3, #1
 800f7da:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7dc:	e016      	b.n	800f80c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	691a      	ldr	r2, [r3, #16]
 800f7e8:	f107 010c 	add.w	r1, r7, #12
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	f7ff fe53 	bl	800f498 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7ff feff 	bl	800f5f6 <dir_find>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f808:	3301      	adds	r3, #1
 800f80a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80e:	2b63      	cmp	r3, #99	; 0x63
 800f810:	d9e5      	bls.n	800f7de <dir_register+0x66>
 800f812:	e000      	b.n	800f816 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f814:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f818:	2b64      	cmp	r3, #100	; 0x64
 800f81a:	d101      	bne.n	800f820 <dir_register+0xa8>
 800f81c:	2307      	movs	r3, #7
 800f81e:	e09c      	b.n	800f95a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f824:	2b04      	cmp	r3, #4
 800f826:	d002      	beq.n	800f82e <dir_register+0xb6>
 800f828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f82c:	e095      	b.n	800f95a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f82e:	7dfa      	ldrb	r2, [r7, #23]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	f003 0302 	and.w	r3, r3, #2
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d007      	beq.n	800f850 <dir_register+0xd8>
 800f840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f842:	330c      	adds	r3, #12
 800f844:	4a47      	ldr	r2, [pc, #284]	; (800f964 <dir_register+0x1ec>)
 800f846:	fba2 2303 	umull	r2, r3, r2, r3
 800f84a:	089b      	lsrs	r3, r3, #2
 800f84c:	3301      	adds	r3, #1
 800f84e:	e000      	b.n	800f852 <dir_register+0xda>
 800f850:	2301      	movs	r3, #1
 800f852:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f854:	6a39      	ldr	r1, [r7, #32]
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff fcbf 	bl	800f1da <dir_alloc>
 800f85c:	4603      	mov	r3, r0
 800f85e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f866:	2b00      	cmp	r3, #0
 800f868:	d148      	bne.n	800f8fc <dir_register+0x184>
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	3b01      	subs	r3, #1
 800f86e:	623b      	str	r3, [r7, #32]
 800f870:	6a3b      	ldr	r3, [r7, #32]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d042      	beq.n	800f8fc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	695a      	ldr	r2, [r3, #20]
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	015b      	lsls	r3, r3, #5
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7ff fb4a 	bl	800ef1c <dir_sdi>
 800f888:	4603      	mov	r3, r0
 800f88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f88e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f892:	2b00      	cmp	r3, #0
 800f894:	d132      	bne.n	800f8fc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	3324      	adds	r3, #36	; 0x24
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7ff fe8a 	bl	800f5b4 <sum_sfn>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	69db      	ldr	r3, [r3, #28]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	69f8      	ldr	r0, [r7, #28]
 800f8ac:	f7fe ff56 	bl	800e75c <move_window>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f8b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d11d      	bne.n	800f8fa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f8be:	69fb      	ldr	r3, [r7, #28]
 800f8c0:	6918      	ldr	r0, [r3, #16]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a19      	ldr	r1, [r3, #32]
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	b2da      	uxtb	r2, r3
 800f8ca:	7efb      	ldrb	r3, [r7, #27]
 800f8cc:	f7ff fd7c 	bl	800f3c8 <put_lfn>
				fs->wflag = 1;
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	2201      	movs	r2, #1
 800f8d4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f7ff fba8 	bl	800f02e <dir_next>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d107      	bne.n	800f8fc <dir_register+0x184>
 800f8ec:	6a3b      	ldr	r3, [r7, #32]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	623b      	str	r3, [r7, #32]
 800f8f2:	6a3b      	ldr	r3, [r7, #32]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d1d5      	bne.n	800f8a4 <dir_register+0x12c>
 800f8f8:	e000      	b.n	800f8fc <dir_register+0x184>
				if (res != FR_OK) break;
 800f8fa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f8fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f900:	2b00      	cmp	r3, #0
 800f902:	d128      	bne.n	800f956 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	69db      	ldr	r3, [r3, #28]
 800f908:	4619      	mov	r1, r3
 800f90a:	69f8      	ldr	r0, [r7, #28]
 800f90c:	f7fe ff26 	bl	800e75c <move_window>
 800f910:	4603      	mov	r3, r0
 800f912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d11b      	bne.n	800f956 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	2220      	movs	r2, #32
 800f924:	2100      	movs	r1, #0
 800f926:	4618      	mov	r0, r3
 800f928:	f7fe fcd9 	bl	800e2de <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6a18      	ldr	r0, [r3, #32]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	3324      	adds	r3, #36	; 0x24
 800f934:	220b      	movs	r2, #11
 800f936:	4619      	mov	r1, r3
 800f938:	f7fe fcb0 	bl	800e29c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a1b      	ldr	r3, [r3, #32]
 800f946:	330c      	adds	r3, #12
 800f948:	f002 0218 	and.w	r2, r2, #24
 800f94c:	b2d2      	uxtb	r2, r2
 800f94e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	2201      	movs	r2, #1
 800f954:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3730      	adds	r7, #48	; 0x30
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	4ec4ec4f 	.word	0x4ec4ec4f

0800f968 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08a      	sub	sp, #40	; 0x28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	613b      	str	r3, [r7, #16]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	691b      	ldr	r3, [r3, #16]
 800f97e:	60fb      	str	r3, [r7, #12]
 800f980:	2300      	movs	r3, #0
 800f982:	617b      	str	r3, [r7, #20]
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	1c5a      	adds	r2, r3, #1
 800f98c:	61ba      	str	r2, [r7, #24]
 800f98e:	693a      	ldr	r2, [r7, #16]
 800f990:	4413      	add	r3, r2
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f998:	2b1f      	cmp	r3, #31
 800f99a:	d940      	bls.n	800fa1e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f99c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f99e:	2b2f      	cmp	r3, #47	; 0x2f
 800f9a0:	d006      	beq.n	800f9b0 <create_name+0x48>
 800f9a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9a4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9a6:	d110      	bne.n	800f9ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f9a8:	e002      	b.n	800f9b0 <create_name+0x48>
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	61bb      	str	r3, [r7, #24]
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2b2f      	cmp	r3, #47	; 0x2f
 800f9ba:	d0f6      	beq.n	800f9aa <create_name+0x42>
 800f9bc:	693a      	ldr	r2, [r7, #16]
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	781b      	ldrb	r3, [r3, #0]
 800f9c4:	2b5c      	cmp	r3, #92	; 0x5c
 800f9c6:	d0f0      	beq.n	800f9aa <create_name+0x42>
			break;
 800f9c8:	e02a      	b.n	800fa20 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	2bfe      	cmp	r3, #254	; 0xfe
 800f9ce:	d901      	bls.n	800f9d4 <create_name+0x6c>
 800f9d0:	2306      	movs	r3, #6
 800f9d2:	e17d      	b.n	800fcd0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9dc:	2101      	movs	r1, #1
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f002 fa00 	bl	8011de4 <ff_convert>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f9e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <create_name+0x8a>
 800f9ee:	2306      	movs	r3, #6
 800f9f0:	e16e      	b.n	800fcd0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9f4:	2b7f      	cmp	r3, #127	; 0x7f
 800f9f6:	d809      	bhi.n	800fa0c <create_name+0xa4>
 800f9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	488d      	ldr	r0, [pc, #564]	; (800fc34 <create_name+0x2cc>)
 800f9fe:	f7fe fcb0 	bl	800e362 <chk_chr>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <create_name+0xa4>
 800fa08:	2306      	movs	r3, #6
 800fa0a:	e161      	b.n	800fcd0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	1c5a      	adds	r2, r3, #1
 800fa10:	617a      	str	r2, [r7, #20]
 800fa12:	005b      	lsls	r3, r3, #1
 800fa14:	68fa      	ldr	r2, [r7, #12]
 800fa16:	4413      	add	r3, r2
 800fa18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa1a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fa1c:	e7b4      	b.n	800f988 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fa1e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fa20:	693a      	ldr	r2, [r7, #16]
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	441a      	add	r2, r3
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fa2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa2c:	2b1f      	cmp	r3, #31
 800fa2e:	d801      	bhi.n	800fa34 <create_name+0xcc>
 800fa30:	2304      	movs	r3, #4
 800fa32:	e000      	b.n	800fa36 <create_name+0xce>
 800fa34:	2300      	movs	r3, #0
 800fa36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fa3a:	e011      	b.n	800fa60 <create_name+0xf8>
		w = lfn[di - 1];
 800fa3c:	697b      	ldr	r3, [r7, #20]
 800fa3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fa42:	3b01      	subs	r3, #1
 800fa44:	005b      	lsls	r3, r3, #1
 800fa46:	68fa      	ldr	r2, [r7, #12]
 800fa48:	4413      	add	r3, r2
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fa4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa50:	2b20      	cmp	r3, #32
 800fa52:	d002      	beq.n	800fa5a <create_name+0xf2>
 800fa54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa56:	2b2e      	cmp	r3, #46	; 0x2e
 800fa58:	d106      	bne.n	800fa68 <create_name+0x100>
		di--;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d1ea      	bne.n	800fa3c <create_name+0xd4>
 800fa66:	e000      	b.n	800fa6a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fa68:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	005b      	lsls	r3, r3, #1
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	4413      	add	r3, r2
 800fa72:	2200      	movs	r2, #0
 800fa74:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d101      	bne.n	800fa80 <create_name+0x118>
 800fa7c:	2306      	movs	r3, #6
 800fa7e:	e127      	b.n	800fcd0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	3324      	adds	r3, #36	; 0x24
 800fa84:	220b      	movs	r2, #11
 800fa86:	2120      	movs	r1, #32
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe fc28 	bl	800e2de <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fa8e:	2300      	movs	r3, #0
 800fa90:	61bb      	str	r3, [r7, #24]
 800fa92:	e002      	b.n	800fa9a <create_name+0x132>
 800fa94:	69bb      	ldr	r3, [r7, #24]
 800fa96:	3301      	adds	r3, #1
 800fa98:	61bb      	str	r3, [r7, #24]
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	4413      	add	r3, r2
 800faa2:	881b      	ldrh	r3, [r3, #0]
 800faa4:	2b20      	cmp	r3, #32
 800faa6:	d0f5      	beq.n	800fa94 <create_name+0x12c>
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	2b2e      	cmp	r3, #46	; 0x2e
 800fab4:	d0ee      	beq.n	800fa94 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fab6:	69bb      	ldr	r3, [r7, #24]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d009      	beq.n	800fad0 <create_name+0x168>
 800fabc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fac0:	f043 0303 	orr.w	r3, r3, #3
 800fac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fac8:	e002      	b.n	800fad0 <create_name+0x168>
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	3b01      	subs	r3, #1
 800face:	617b      	str	r3, [r7, #20]
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d009      	beq.n	800faea <create_name+0x182>
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fadc:	3b01      	subs	r3, #1
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	68fa      	ldr	r2, [r7, #12]
 800fae2:	4413      	add	r3, r2
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	2b2e      	cmp	r3, #46	; 0x2e
 800fae8:	d1ef      	bne.n	800faca <create_name+0x162>

	i = b = 0; ni = 8;
 800faea:	2300      	movs	r3, #0
 800faec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800faf0:	2300      	movs	r3, #0
 800faf2:	623b      	str	r3, [r7, #32]
 800faf4:	2308      	movs	r3, #8
 800faf6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	1c5a      	adds	r2, r3, #1
 800fafc:	61ba      	str	r2, [r7, #24]
 800fafe:	005b      	lsls	r3, r3, #1
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	4413      	add	r3, r2
 800fb04:	881b      	ldrh	r3, [r3, #0]
 800fb06:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fb08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f000 8090 	beq.w	800fc30 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fb10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb12:	2b20      	cmp	r3, #32
 800fb14:	d006      	beq.n	800fb24 <create_name+0x1bc>
 800fb16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb18:	2b2e      	cmp	r3, #46	; 0x2e
 800fb1a:	d10a      	bne.n	800fb32 <create_name+0x1ca>
 800fb1c:	69ba      	ldr	r2, [r7, #24]
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d006      	beq.n	800fb32 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb28:	f043 0303 	orr.w	r3, r3, #3
 800fb2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb30:	e07d      	b.n	800fc2e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fb32:	6a3a      	ldr	r2, [r7, #32]
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d203      	bcs.n	800fb42 <create_name+0x1da>
 800fb3a:	69ba      	ldr	r2, [r7, #24]
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d123      	bne.n	800fb8a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	2b0b      	cmp	r3, #11
 800fb46:	d106      	bne.n	800fb56 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb4c:	f043 0303 	orr.w	r3, r3, #3
 800fb50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb54:	e075      	b.n	800fc42 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fb56:	69ba      	ldr	r2, [r7, #24]
 800fb58:	697b      	ldr	r3, [r7, #20]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d005      	beq.n	800fb6a <create_name+0x202>
 800fb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb62:	f043 0303 	orr.w	r3, r3, #3
 800fb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fb6a:	69ba      	ldr	r2, [r7, #24]
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d866      	bhi.n	800fc40 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	61bb      	str	r3, [r7, #24]
 800fb76:	2308      	movs	r3, #8
 800fb78:	623b      	str	r3, [r7, #32]
 800fb7a:	230b      	movs	r3, #11
 800fb7c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fb7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb88:	e051      	b.n	800fc2e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb8c:	2b7f      	cmp	r3, #127	; 0x7f
 800fb8e:	d914      	bls.n	800fbba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fb90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb92:	2100      	movs	r1, #0
 800fb94:	4618      	mov	r0, r3
 800fb96:	f002 f925 	bl	8011de4 <ff_convert>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fb9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d004      	beq.n	800fbae <create_name+0x246>
 800fba4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fba6:	3b80      	subs	r3, #128	; 0x80
 800fba8:	4a23      	ldr	r2, [pc, #140]	; (800fc38 <create_name+0x2d0>)
 800fbaa:	5cd3      	ldrb	r3, [r2, r3]
 800fbac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fbae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbb2:	f043 0302 	orr.w	r3, r3, #2
 800fbb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fbba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d007      	beq.n	800fbd0 <create_name+0x268>
 800fbc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	481d      	ldr	r0, [pc, #116]	; (800fc3c <create_name+0x2d4>)
 800fbc6:	f7fe fbcc 	bl	800e362 <chk_chr>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d008      	beq.n	800fbe2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fbd0:	235f      	movs	r3, #95	; 0x5f
 800fbd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd8:	f043 0303 	orr.w	r3, r3, #3
 800fbdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbe0:	e01b      	b.n	800fc1a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fbe2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbe4:	2b40      	cmp	r3, #64	; 0x40
 800fbe6:	d909      	bls.n	800fbfc <create_name+0x294>
 800fbe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbea:	2b5a      	cmp	r3, #90	; 0x5a
 800fbec:	d806      	bhi.n	800fbfc <create_name+0x294>
					b |= 2;
 800fbee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbf2:	f043 0302 	orr.w	r3, r3, #2
 800fbf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fbfa:	e00e      	b.n	800fc1a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fbfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbfe:	2b60      	cmp	r3, #96	; 0x60
 800fc00:	d90b      	bls.n	800fc1a <create_name+0x2b2>
 800fc02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc04:	2b7a      	cmp	r3, #122	; 0x7a
 800fc06:	d808      	bhi.n	800fc1a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fc08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc0c:	f043 0301 	orr.w	r3, r3, #1
 800fc10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc16:	3b20      	subs	r3, #32
 800fc18:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	623a      	str	r2, [r7, #32]
 800fc20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc22:	b2d1      	uxtb	r1, r2
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	4413      	add	r3, r2
 800fc28:	460a      	mov	r2, r1
 800fc2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fc2e:	e763      	b.n	800faf8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fc30:	bf00      	nop
 800fc32:	e006      	b.n	800fc42 <create_name+0x2da>
 800fc34:	0801a48c 	.word	0x0801a48c
 800fc38:	0801a508 	.word	0x0801a508
 800fc3c:	0801a498 	.word	0x0801a498
			if (si > di) break;			/* No extension */
 800fc40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fc48:	2be5      	cmp	r3, #229	; 0xe5
 800fc4a:	d103      	bne.n	800fc54 <create_name+0x2ec>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	2205      	movs	r2, #5
 800fc50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	2b08      	cmp	r3, #8
 800fc58:	d104      	bne.n	800fc64 <create_name+0x2fc>
 800fc5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fc64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc68:	f003 030c 	and.w	r3, r3, #12
 800fc6c:	2b0c      	cmp	r3, #12
 800fc6e:	d005      	beq.n	800fc7c <create_name+0x314>
 800fc70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc74:	f003 0303 	and.w	r3, r3, #3
 800fc78:	2b03      	cmp	r3, #3
 800fc7a:	d105      	bne.n	800fc88 <create_name+0x320>
 800fc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc80:	f043 0302 	orr.w	r3, r3, #2
 800fc84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fc88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc8c:	f003 0302 	and.w	r3, r3, #2
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d117      	bne.n	800fcc4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fc94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc98:	f003 0303 	and.w	r3, r3, #3
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d105      	bne.n	800fcac <create_name+0x344>
 800fca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fca4:	f043 0310 	orr.w	r3, r3, #16
 800fca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fcac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcb0:	f003 030c 	and.w	r3, r3, #12
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d105      	bne.n	800fcc4 <create_name+0x35c>
 800fcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcbc:	f043 0308 	orr.w	r3, r3, #8
 800fcc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fcca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800fcce:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3728      	adds	r7, #40	; 0x28
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b086      	sub	sp, #24
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fcec:	e002      	b.n	800fcf4 <follow_path+0x1c>
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	3301      	adds	r3, #1
 800fcf2:	603b      	str	r3, [r7, #0]
 800fcf4:	683b      	ldr	r3, [r7, #0]
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	2b2f      	cmp	r3, #47	; 0x2f
 800fcfa:	d0f8      	beq.n	800fcee <follow_path+0x16>
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2b5c      	cmp	r3, #92	; 0x5c
 800fd02:	d0f4      	beq.n	800fcee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	2200      	movs	r2, #0
 800fd08:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	2b1f      	cmp	r3, #31
 800fd10:	d80a      	bhi.n	800fd28 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2280      	movs	r2, #128	; 0x80
 800fd16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fd1a:	2100      	movs	r1, #0
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff f8fd 	bl	800ef1c <dir_sdi>
 800fd22:	4603      	mov	r3, r0
 800fd24:	75fb      	strb	r3, [r7, #23]
 800fd26:	e048      	b.n	800fdba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd28:	463b      	mov	r3, r7
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff fe1b 	bl	800f968 <create_name>
 800fd32:	4603      	mov	r3, r0
 800fd34:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fd36:	7dfb      	ldrb	r3, [r7, #23]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d139      	bne.n	800fdb0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff fc5a 	bl	800f5f6 <dir_find>
 800fd42:	4603      	mov	r3, r0
 800fd44:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fd4c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fd4e:	7dfb      	ldrb	r3, [r7, #23]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00a      	beq.n	800fd6a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fd54:	7dfb      	ldrb	r3, [r7, #23]
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	d12c      	bne.n	800fdb4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fd5a:	7afb      	ldrb	r3, [r7, #11]
 800fd5c:	f003 0304 	and.w	r3, r3, #4
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d127      	bne.n	800fdb4 <follow_path+0xdc>
 800fd64:	2305      	movs	r3, #5
 800fd66:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fd68:	e024      	b.n	800fdb4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd6a:	7afb      	ldrb	r3, [r7, #11]
 800fd6c:	f003 0304 	and.w	r3, r3, #4
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d121      	bne.n	800fdb8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	799b      	ldrb	r3, [r3, #6]
 800fd78:	f003 0310 	and.w	r3, r3, #16
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d102      	bne.n	800fd86 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fd80:	2305      	movs	r3, #5
 800fd82:	75fb      	strb	r3, [r7, #23]
 800fd84:	e019      	b.n	800fdba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	68fa      	ldr	r2, [r7, #12]
 800fd92:	8992      	ldrh	r2, [r2, #12]
 800fd94:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd98:	fb00 f202 	mul.w	r2, r0, r2
 800fd9c:	1a9b      	subs	r3, r3, r2
 800fd9e:	440b      	add	r3, r1
 800fda0:	4619      	mov	r1, r3
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	f7ff fa60 	bl	800f268 <ld_clust>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fdae:	e7bb      	b.n	800fd28 <follow_path+0x50>
			if (res != FR_OK) break;
 800fdb0:	bf00      	nop
 800fdb2:	e002      	b.n	800fdba <follow_path+0xe2>
				break;
 800fdb4:	bf00      	nop
 800fdb6:	e000      	b.n	800fdba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fdb8:	bf00      	nop
			}
		}
	}

	return res;
 800fdba:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3718      	adds	r7, #24
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	bd80      	pop	{r7, pc}

0800fdc4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b087      	sub	sp, #28
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fdcc:	f04f 33ff 	mov.w	r3, #4294967295
 800fdd0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d031      	beq.n	800fe3e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	617b      	str	r3, [r7, #20]
 800fde0:	e002      	b.n	800fde8 <get_ldnumber+0x24>
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	3301      	adds	r3, #1
 800fde6:	617b      	str	r3, [r7, #20]
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	2b1f      	cmp	r3, #31
 800fdee:	d903      	bls.n	800fdf8 <get_ldnumber+0x34>
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	2b3a      	cmp	r3, #58	; 0x3a
 800fdf6:	d1f4      	bne.n	800fde2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	781b      	ldrb	r3, [r3, #0]
 800fdfc:	2b3a      	cmp	r3, #58	; 0x3a
 800fdfe:	d11c      	bne.n	800fe3a <get_ldnumber+0x76>
			tp = *path;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	1c5a      	adds	r2, r3, #1
 800fe0a:	60fa      	str	r2, [r7, #12]
 800fe0c:	781b      	ldrb	r3, [r3, #0]
 800fe0e:	3b30      	subs	r3, #48	; 0x30
 800fe10:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2b09      	cmp	r3, #9
 800fe16:	d80e      	bhi.n	800fe36 <get_ldnumber+0x72>
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d10a      	bne.n	800fe36 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d107      	bne.n	800fe36 <get_ldnumber+0x72>
					vol = (int)i;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	617b      	str	r3, [r7, #20]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	697a      	ldr	r2, [r7, #20]
 800fe34:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	e002      	b.n	800fe40 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fe3e:	693b      	ldr	r3, [r7, #16]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	371c      	adds	r7, #28
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	70da      	strb	r2, [r3, #3]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe62:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fe64:	6839      	ldr	r1, [r7, #0]
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f7fe fc78 	bl	800e75c <move_window>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d001      	beq.n	800fe76 <check_fs+0x2a>
 800fe72:	2304      	movs	r3, #4
 800fe74:	e038      	b.n	800fee8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	333c      	adds	r3, #60	; 0x3c
 800fe7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fe f98a 	bl	800e198 <ld_word>
 800fe84:	4603      	mov	r3, r0
 800fe86:	461a      	mov	r2, r3
 800fe88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d001      	beq.n	800fe94 <check_fs+0x48>
 800fe90:	2303      	movs	r3, #3
 800fe92:	e029      	b.n	800fee8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe9a:	2be9      	cmp	r3, #233	; 0xe9
 800fe9c:	d009      	beq.n	800feb2 <check_fs+0x66>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fea4:	2beb      	cmp	r3, #235	; 0xeb
 800fea6:	d11e      	bne.n	800fee6 <check_fs+0x9a>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800feae:	2b90      	cmp	r3, #144	; 0x90
 800feb0:	d119      	bne.n	800fee6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	333c      	adds	r3, #60	; 0x3c
 800feb6:	3336      	adds	r3, #54	; 0x36
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fe f985 	bl	800e1c8 <ld_dword>
 800febe:	4603      	mov	r3, r0
 800fec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fec4:	4a0a      	ldr	r2, [pc, #40]	; (800fef0 <check_fs+0xa4>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d101      	bne.n	800fece <check_fs+0x82>
 800feca:	2300      	movs	r3, #0
 800fecc:	e00c      	b.n	800fee8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	333c      	adds	r3, #60	; 0x3c
 800fed2:	3352      	adds	r3, #82	; 0x52
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7fe f977 	bl	800e1c8 <ld_dword>
 800feda:	4603      	mov	r3, r0
 800fedc:	4a05      	ldr	r2, [pc, #20]	; (800fef4 <check_fs+0xa8>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d101      	bne.n	800fee6 <check_fs+0x9a>
 800fee2:	2300      	movs	r3, #0
 800fee4:	e000      	b.n	800fee8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fee6:	2302      	movs	r3, #2
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3708      	adds	r7, #8
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}
 800fef0:	00544146 	.word	0x00544146
 800fef4:	33544146 	.word	0x33544146

0800fef8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b096      	sub	sp, #88	; 0x58
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	4613      	mov	r3, r2
 800ff04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ff0c:	68f8      	ldr	r0, [r7, #12]
 800ff0e:	f7ff ff59 	bl	800fdc4 <get_ldnumber>
 800ff12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ff14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	da01      	bge.n	800ff1e <find_volume+0x26>
 800ff1a:	230b      	movs	r3, #11
 800ff1c:	e26a      	b.n	80103f4 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ff1e:	4aa3      	ldr	r2, [pc, #652]	; (80101ac <find_volume+0x2b4>)
 800ff20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <find_volume+0x3a>
 800ff2e:	230c      	movs	r3, #12
 800ff30:	e260      	b.n	80103f4 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800ff32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff34:	f7fe fa30 	bl	800e398 <lock_fs>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d101      	bne.n	800ff42 <find_volume+0x4a>
 800ff3e:	230f      	movs	r3, #15
 800ff40:	e258      	b.n	80103f4 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ff48:	79fb      	ldrb	r3, [r7, #7]
 800ff4a:	f023 0301 	bic.w	r3, r3, #1
 800ff4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ff50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d01a      	beq.n	800ff8e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	785b      	ldrb	r3, [r3, #1]
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fe f87b 	bl	800e058 <disk_status>
 800ff62:	4603      	mov	r3, r0
 800ff64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ff68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff6c:	f003 0301 	and.w	r3, r3, #1
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d10c      	bne.n	800ff8e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ff74:	79fb      	ldrb	r3, [r7, #7]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d007      	beq.n	800ff8a <find_volume+0x92>
 800ff7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff7e:	f003 0304 	and.w	r3, r3, #4
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d001      	beq.n	800ff8a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ff86:	230a      	movs	r3, #10
 800ff88:	e234      	b.n	80103f4 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	e232      	b.n	80103f4 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	2200      	movs	r2, #0
 800ff92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ff94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff96:	b2da      	uxtb	r2, r3
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9e:	785b      	ldrb	r3, [r3, #1]
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7fe f873 	bl	800e08c <disk_initialize>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ffac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffb0:	f003 0301 	and.w	r3, r3, #1
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d001      	beq.n	800ffbc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ffb8:	2303      	movs	r3, #3
 800ffba:	e21b      	b.n	80103f4 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ffbc:	79fb      	ldrb	r3, [r7, #7]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d007      	beq.n	800ffd2 <find_volume+0xda>
 800ffc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ffc6:	f003 0304 	and.w	r3, r3, #4
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ffce:	230a      	movs	r3, #10
 800ffd0:	e210      	b.n	80103f4 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd4:	7858      	ldrb	r0, [r3, #1]
 800ffd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd8:	330c      	adds	r3, #12
 800ffda:	461a      	mov	r2, r3
 800ffdc:	2102      	movs	r1, #2
 800ffde:	f7fe f8bd 	bl	800e15c <disk_ioctl>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d001      	beq.n	800ffec <find_volume+0xf4>
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e203      	b.n	80103f4 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ffec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffee:	899b      	ldrh	r3, [r3, #12]
 800fff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fff4:	d80d      	bhi.n	8010012 <find_volume+0x11a>
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	899b      	ldrh	r3, [r3, #12]
 800fffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fffe:	d308      	bcc.n	8010012 <find_volume+0x11a>
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	899b      	ldrh	r3, [r3, #12]
 8010004:	461a      	mov	r2, r3
 8010006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010008:	899b      	ldrh	r3, [r3, #12]
 801000a:	3b01      	subs	r3, #1
 801000c:	4013      	ands	r3, r2
 801000e:	2b00      	cmp	r3, #0
 8010010:	d001      	beq.n	8010016 <find_volume+0x11e>
 8010012:	2301      	movs	r3, #1
 8010014:	e1ee      	b.n	80103f4 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010016:	2300      	movs	r3, #0
 8010018:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801001a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801001c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801001e:	f7ff ff15 	bl	800fe4c <check_fs>
 8010022:	4603      	mov	r3, r0
 8010024:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801002c:	2b02      	cmp	r3, #2
 801002e:	d149      	bne.n	80100c4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010030:	2300      	movs	r3, #0
 8010032:	643b      	str	r3, [r7, #64]	; 0x40
 8010034:	e01e      	b.n	8010074 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010038:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801003c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801003e:	011b      	lsls	r3, r3, #4
 8010040:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010044:	4413      	add	r3, r2
 8010046:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004a:	3304      	adds	r3, #4
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <find_volume+0x168>
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	3308      	adds	r3, #8
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe f8b6 	bl	800e1c8 <ld_dword>
 801005c:	4602      	mov	r2, r0
 801005e:	e000      	b.n	8010062 <find_volume+0x16a>
 8010060:	2200      	movs	r2, #0
 8010062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010064:	009b      	lsls	r3, r3, #2
 8010066:	3358      	adds	r3, #88	; 0x58
 8010068:	443b      	add	r3, r7
 801006a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801006e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010070:	3301      	adds	r3, #1
 8010072:	643b      	str	r3, [r7, #64]	; 0x40
 8010074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010076:	2b03      	cmp	r3, #3
 8010078:	d9dd      	bls.n	8010036 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801007a:	2300      	movs	r3, #0
 801007c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801007e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010080:	2b00      	cmp	r3, #0
 8010082:	d002      	beq.n	801008a <find_volume+0x192>
 8010084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010086:	3b01      	subs	r3, #1
 8010088:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801008a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801008c:	009b      	lsls	r3, r3, #2
 801008e:	3358      	adds	r3, #88	; 0x58
 8010090:	443b      	add	r3, r7
 8010092:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010096:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801009a:	2b00      	cmp	r3, #0
 801009c:	d005      	beq.n	80100aa <find_volume+0x1b2>
 801009e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100a2:	f7ff fed3 	bl	800fe4c <check_fs>
 80100a6:	4603      	mov	r3, r0
 80100a8:	e000      	b.n	80100ac <find_volume+0x1b4>
 80100aa:	2303      	movs	r3, #3
 80100ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80100b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d905      	bls.n	80100c4 <find_volume+0x1cc>
 80100b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100ba:	3301      	adds	r3, #1
 80100bc:	643b      	str	r3, [r7, #64]	; 0x40
 80100be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100c0:	2b03      	cmp	r3, #3
 80100c2:	d9e2      	bls.n	801008a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80100c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100c8:	2b04      	cmp	r3, #4
 80100ca:	d101      	bne.n	80100d0 <find_volume+0x1d8>
 80100cc:	2301      	movs	r3, #1
 80100ce:	e191      	b.n	80103f4 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80100d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d901      	bls.n	80100dc <find_volume+0x1e4>
 80100d8:	230d      	movs	r3, #13
 80100da:	e18b      	b.n	80103f4 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	333c      	adds	r3, #60	; 0x3c
 80100e0:	330b      	adds	r3, #11
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fe f858 	bl	800e198 <ld_word>
 80100e8:	4603      	mov	r3, r0
 80100ea:	461a      	mov	r2, r3
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	899b      	ldrh	r3, [r3, #12]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d001      	beq.n	80100f8 <find_volume+0x200>
 80100f4:	230d      	movs	r3, #13
 80100f6:	e17d      	b.n	80103f4 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80100f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fa:	333c      	adds	r3, #60	; 0x3c
 80100fc:	3316      	adds	r3, #22
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fe f84a 	bl	800e198 <ld_word>
 8010104:	4603      	mov	r3, r0
 8010106:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801010a:	2b00      	cmp	r3, #0
 801010c:	d106      	bne.n	801011c <find_volume+0x224>
 801010e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010110:	333c      	adds	r3, #60	; 0x3c
 8010112:	3324      	adds	r3, #36	; 0x24
 8010114:	4618      	mov	r0, r3
 8010116:	f7fe f857 	bl	800e1c8 <ld_dword>
 801011a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801011c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010120:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801012c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012e:	789b      	ldrb	r3, [r3, #2]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d005      	beq.n	8010140 <find_volume+0x248>
 8010134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010136:	789b      	ldrb	r3, [r3, #2]
 8010138:	2b02      	cmp	r3, #2
 801013a:	d001      	beq.n	8010140 <find_volume+0x248>
 801013c:	230d      	movs	r3, #13
 801013e:	e159      	b.n	80103f4 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010142:	789b      	ldrb	r3, [r3, #2]
 8010144:	461a      	mov	r2, r3
 8010146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010148:	fb02 f303 	mul.w	r3, r2, r3
 801014c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801014e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010150:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010154:	b29a      	uxth	r2, r3
 8010156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010158:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801015a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015c:	895b      	ldrh	r3, [r3, #10]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d008      	beq.n	8010174 <find_volume+0x27c>
 8010162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010164:	895b      	ldrh	r3, [r3, #10]
 8010166:	461a      	mov	r2, r3
 8010168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016a:	895b      	ldrh	r3, [r3, #10]
 801016c:	3b01      	subs	r3, #1
 801016e:	4013      	ands	r3, r2
 8010170:	2b00      	cmp	r3, #0
 8010172:	d001      	beq.n	8010178 <find_volume+0x280>
 8010174:	230d      	movs	r3, #13
 8010176:	e13d      	b.n	80103f4 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017a:	333c      	adds	r3, #60	; 0x3c
 801017c:	3311      	adds	r3, #17
 801017e:	4618      	mov	r0, r3
 8010180:	f7fe f80a 	bl	800e198 <ld_word>
 8010184:	4603      	mov	r3, r0
 8010186:	461a      	mov	r2, r3
 8010188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801018c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018e:	891b      	ldrh	r3, [r3, #8]
 8010190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010192:	8992      	ldrh	r2, [r2, #12]
 8010194:	0952      	lsrs	r2, r2, #5
 8010196:	b292      	uxth	r2, r2
 8010198:	fbb3 f1f2 	udiv	r1, r3, r2
 801019c:	fb01 f202 	mul.w	r2, r1, r2
 80101a0:	1a9b      	subs	r3, r3, r2
 80101a2:	b29b      	uxth	r3, r3
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d003      	beq.n	80101b0 <find_volume+0x2b8>
 80101a8:	230d      	movs	r3, #13
 80101aa:	e123      	b.n	80103f4 <find_volume+0x4fc>
 80101ac:	20003498 	.word	0x20003498

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	333c      	adds	r3, #60	; 0x3c
 80101b4:	3313      	adds	r3, #19
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fd ffee 	bl	800e198 <ld_word>
 80101bc:	4603      	mov	r3, r0
 80101be:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80101c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d106      	bne.n	80101d4 <find_volume+0x2dc>
 80101c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c8:	333c      	adds	r3, #60	; 0x3c
 80101ca:	3320      	adds	r3, #32
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fd fffb 	bl	800e1c8 <ld_dword>
 80101d2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	333c      	adds	r3, #60	; 0x3c
 80101d8:	330e      	adds	r3, #14
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fd ffdc 	bl	800e198 <ld_word>
 80101e0:	4603      	mov	r3, r0
 80101e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80101e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <find_volume+0x2f6>
 80101ea:	230d      	movs	r3, #13
 80101ec:	e102      	b.n	80103f4 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80101ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80101f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101f2:	4413      	add	r3, r2
 80101f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101f6:	8911      	ldrh	r1, [r2, #8]
 80101f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80101fa:	8992      	ldrh	r2, [r2, #12]
 80101fc:	0952      	lsrs	r2, r2, #5
 80101fe:	b292      	uxth	r2, r2
 8010200:	fbb1 f2f2 	udiv	r2, r1, r2
 8010204:	b292      	uxth	r2, r2
 8010206:	4413      	add	r3, r2
 8010208:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801020a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801020c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020e:	429a      	cmp	r2, r3
 8010210:	d201      	bcs.n	8010216 <find_volume+0x31e>
 8010212:	230d      	movs	r3, #13
 8010214:	e0ee      	b.n	80103f4 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010216:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021a:	1ad3      	subs	r3, r2, r3
 801021c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801021e:	8952      	ldrh	r2, [r2, #10]
 8010220:	fbb3 f3f2 	udiv	r3, r3, r2
 8010224:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010228:	2b00      	cmp	r3, #0
 801022a:	d101      	bne.n	8010230 <find_volume+0x338>
 801022c:	230d      	movs	r3, #13
 801022e:	e0e1      	b.n	80103f4 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8010230:	2303      	movs	r3, #3
 8010232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801023c:	4293      	cmp	r3, r2
 801023e:	d802      	bhi.n	8010246 <find_volume+0x34e>
 8010240:	2302      	movs	r3, #2
 8010242:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	f640 72f5 	movw	r2, #4085	; 0xff5
 801024c:	4293      	cmp	r3, r2
 801024e:	d802      	bhi.n	8010256 <find_volume+0x35e>
 8010250:	2301      	movs	r3, #1
 8010252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010258:	1c9a      	adds	r2, r3, #2
 801025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801025e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010262:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010264:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010268:	441a      	add	r2, r3
 801026a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801026e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010272:	441a      	add	r2, r3
 8010274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010276:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8010278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801027c:	2b03      	cmp	r3, #3
 801027e:	d11e      	bne.n	80102be <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010282:	333c      	adds	r3, #60	; 0x3c
 8010284:	332a      	adds	r3, #42	; 0x2a
 8010286:	4618      	mov	r0, r3
 8010288:	f7fd ff86 	bl	800e198 <ld_word>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <find_volume+0x39e>
 8010292:	230d      	movs	r3, #13
 8010294:	e0ae      	b.n	80103f4 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010298:	891b      	ldrh	r3, [r3, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <find_volume+0x3aa>
 801029e:	230d      	movs	r3, #13
 80102a0:	e0a8      	b.n	80103f4 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	333c      	adds	r3, #60	; 0x3c
 80102a6:	332c      	adds	r3, #44	; 0x2c
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fd ff8d 	bl	800e1c8 <ld_dword>
 80102ae:	4602      	mov	r2, r0
 80102b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80102b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b6:	6a1b      	ldr	r3, [r3, #32]
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	647b      	str	r3, [r7, #68]	; 0x44
 80102bc:	e01f      	b.n	80102fe <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80102be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c0:	891b      	ldrh	r3, [r3, #8]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d101      	bne.n	80102ca <find_volume+0x3d2>
 80102c6:	230d      	movs	r3, #13
 80102c8:	e094      	b.n	80103f4 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80102ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102d0:	441a      	add	r2, r3
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80102d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d103      	bne.n	80102e6 <find_volume+0x3ee>
 80102de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e0:	6a1b      	ldr	r3, [r3, #32]
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	e00a      	b.n	80102fc <find_volume+0x404>
 80102e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e8:	6a1a      	ldr	r2, [r3, #32]
 80102ea:	4613      	mov	r3, r2
 80102ec:	005b      	lsls	r3, r3, #1
 80102ee:	4413      	add	r3, r2
 80102f0:	085a      	lsrs	r2, r3, #1
 80102f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f4:	6a1b      	ldr	r3, [r3, #32]
 80102f6:	f003 0301 	and.w	r3, r3, #1
 80102fa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80102fc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80102fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010304:	899b      	ldrh	r3, [r3, #12]
 8010306:	4619      	mov	r1, r3
 8010308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801030a:	440b      	add	r3, r1
 801030c:	3b01      	subs	r3, #1
 801030e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010310:	8989      	ldrh	r1, [r1, #12]
 8010312:	fbb3 f3f1 	udiv	r3, r3, r1
 8010316:	429a      	cmp	r2, r3
 8010318:	d201      	bcs.n	801031e <find_volume+0x426>
 801031a:	230d      	movs	r3, #13
 801031c:	e06a      	b.n	80103f4 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801031e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010320:	f04f 32ff 	mov.w	r2, #4294967295
 8010324:	61da      	str	r2, [r3, #28]
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	69da      	ldr	r2, [r3, #28]
 801032a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801032e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010330:	2280      	movs	r2, #128	; 0x80
 8010332:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010338:	2b03      	cmp	r3, #3
 801033a:	d149      	bne.n	80103d0 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801033c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033e:	333c      	adds	r3, #60	; 0x3c
 8010340:	3330      	adds	r3, #48	; 0x30
 8010342:	4618      	mov	r0, r3
 8010344:	f7fd ff28 	bl	800e198 <ld_word>
 8010348:	4603      	mov	r3, r0
 801034a:	2b01      	cmp	r3, #1
 801034c:	d140      	bne.n	80103d0 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801034e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010350:	3301      	adds	r3, #1
 8010352:	4619      	mov	r1, r3
 8010354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010356:	f7fe fa01 	bl	800e75c <move_window>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d137      	bne.n	80103d0 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	2200      	movs	r2, #0
 8010364:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010368:	333c      	adds	r3, #60	; 0x3c
 801036a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801036e:	4618      	mov	r0, r3
 8010370:	f7fd ff12 	bl	800e198 <ld_word>
 8010374:	4603      	mov	r3, r0
 8010376:	461a      	mov	r2, r3
 8010378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801037c:	429a      	cmp	r2, r3
 801037e:	d127      	bne.n	80103d0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010382:	333c      	adds	r3, #60	; 0x3c
 8010384:	4618      	mov	r0, r3
 8010386:	f7fd ff1f 	bl	800e1c8 <ld_dword>
 801038a:	4603      	mov	r3, r0
 801038c:	4a1b      	ldr	r2, [pc, #108]	; (80103fc <find_volume+0x504>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d11e      	bne.n	80103d0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010394:	333c      	adds	r3, #60	; 0x3c
 8010396:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801039a:	4618      	mov	r0, r3
 801039c:	f7fd ff14 	bl	800e1c8 <ld_dword>
 80103a0:	4603      	mov	r3, r0
 80103a2:	4a17      	ldr	r2, [pc, #92]	; (8010400 <find_volume+0x508>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d113      	bne.n	80103d0 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80103a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103aa:	333c      	adds	r3, #60	; 0x3c
 80103ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fd ff09 	bl	800e1c8 <ld_dword>
 80103b6:	4602      	mov	r2, r0
 80103b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ba:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80103bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103be:	333c      	adds	r3, #60	; 0x3c
 80103c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fd feff 	bl	800e1c8 <ld_dword>
 80103ca:	4602      	mov	r2, r0
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80103d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80103d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80103d8:	4b0a      	ldr	r3, [pc, #40]	; (8010404 <find_volume+0x50c>)
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	3301      	adds	r3, #1
 80103de:	b29a      	uxth	r2, r3
 80103e0:	4b08      	ldr	r3, [pc, #32]	; (8010404 <find_volume+0x50c>)
 80103e2:	801a      	strh	r2, [r3, #0]
 80103e4:	4b07      	ldr	r3, [pc, #28]	; (8010404 <find_volume+0x50c>)
 80103e6:	881a      	ldrh	r2, [r3, #0]
 80103e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80103ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103ee:	f7fe f94d 	bl	800e68c <clear_lock>
#endif
	return FR_OK;
 80103f2:	2300      	movs	r3, #0
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3758      	adds	r7, #88	; 0x58
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	41615252 	.word	0x41615252
 8010400:	61417272 	.word	0x61417272
 8010404:	2000349c 	.word	0x2000349c

08010408 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010412:	2309      	movs	r3, #9
 8010414:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d02e      	beq.n	801047a <validate+0x72>
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d02a      	beq.n	801047a <validate+0x72>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d025      	beq.n	801047a <validate+0x72>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	889a      	ldrh	r2, [r3, #4]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	88db      	ldrh	r3, [r3, #6]
 8010438:	429a      	cmp	r2, r3
 801043a:	d11e      	bne.n	801047a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4618      	mov	r0, r3
 8010442:	f7fd ffa9 	bl	800e398 <lock_fs>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d014      	beq.n	8010476 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	785b      	ldrb	r3, [r3, #1]
 8010452:	4618      	mov	r0, r3
 8010454:	f7fd fe00 	bl	800e058 <disk_status>
 8010458:	4603      	mov	r3, r0
 801045a:	f003 0301 	and.w	r3, r3, #1
 801045e:	2b00      	cmp	r3, #0
 8010460:	d102      	bne.n	8010468 <validate+0x60>
				res = FR_OK;
 8010462:	2300      	movs	r3, #0
 8010464:	73fb      	strb	r3, [r7, #15]
 8010466:	e008      	b.n	801047a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2100      	movs	r1, #0
 801046e:	4618      	mov	r0, r3
 8010470:	f7fd ffa8 	bl	800e3c4 <unlock_fs>
 8010474:	e001      	b.n	801047a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010476:	230f      	movs	r3, #15
 8010478:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801047a:	7bfb      	ldrb	r3, [r7, #15]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <validate+0x7e>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	e000      	b.n	8010488 <validate+0x80>
 8010486:	2300      	movs	r3, #0
 8010488:	683a      	ldr	r2, [r7, #0]
 801048a:	6013      	str	r3, [r2, #0]
	return res;
 801048c:	7bfb      	ldrb	r3, [r7, #15]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}
	...

08010498 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b088      	sub	sp, #32
 801049c:	af00      	add	r7, sp, #0
 801049e:	60f8      	str	r0, [r7, #12]
 80104a0:	60b9      	str	r1, [r7, #8]
 80104a2:	4613      	mov	r3, r2
 80104a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80104aa:	f107 0310 	add.w	r3, r7, #16
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7ff fc88 	bl	800fdc4 <get_ldnumber>
 80104b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80104b6:	69fb      	ldr	r3, [r7, #28]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	da01      	bge.n	80104c0 <f_mount+0x28>
 80104bc:	230b      	movs	r3, #11
 80104be:	e048      	b.n	8010552 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80104c0:	4a26      	ldr	r2, [pc, #152]	; (801055c <f_mount+0xc4>)
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d00f      	beq.n	80104f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80104d0:	69b8      	ldr	r0, [r7, #24]
 80104d2:	f7fe f8db 	bl	800e68c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	695b      	ldr	r3, [r3, #20]
 80104da:	4618      	mov	r0, r3
 80104dc:	f001 fd68 	bl	8011fb0 <ff_del_syncobj>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <f_mount+0x52>
 80104e6:	2302      	movs	r3, #2
 80104e8:	e033      	b.n	8010552 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	2200      	movs	r2, #0
 80104ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00f      	beq.n	8010516 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2200      	movs	r2, #0
 80104fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	b2da      	uxtb	r2, r3
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	3314      	adds	r3, #20
 8010504:	4619      	mov	r1, r3
 8010506:	4610      	mov	r0, r2
 8010508:	f001 fd32 	bl	8011f70 <ff_cre_syncobj>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d101      	bne.n	8010516 <f_mount+0x7e>
 8010512:	2302      	movs	r3, #2
 8010514:	e01d      	b.n	8010552 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010516:	68fa      	ldr	r2, [r7, #12]
 8010518:	4910      	ldr	r1, [pc, #64]	; (801055c <f_mount+0xc4>)
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d002      	beq.n	801052c <f_mount+0x94>
 8010526:	79fb      	ldrb	r3, [r7, #7]
 8010528:	2b01      	cmp	r3, #1
 801052a:	d001      	beq.n	8010530 <f_mount+0x98>
 801052c:	2300      	movs	r3, #0
 801052e:	e010      	b.n	8010552 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010530:	f107 010c 	add.w	r1, r7, #12
 8010534:	f107 0308 	add.w	r3, r7, #8
 8010538:	2200      	movs	r2, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff fcdc 	bl	800fef8 <find_volume>
 8010540:	4603      	mov	r3, r0
 8010542:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	7dfa      	ldrb	r2, [r7, #23]
 8010548:	4611      	mov	r1, r2
 801054a:	4618      	mov	r0, r3
 801054c:	f7fd ff3a 	bl	800e3c4 <unlock_fs>
 8010550:	7dfb      	ldrb	r3, [r7, #23]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3720      	adds	r7, #32
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	20003498 	.word	0x20003498

08010560 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010566:	af00      	add	r7, sp, #0
 8010568:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801056c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010570:	6018      	str	r0, [r3, #0]
 8010572:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010576:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 801057a:	6019      	str	r1, [r3, #0]
 801057c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010580:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8010584:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010586:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801058a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d101      	bne.n	8010598 <f_open+0x38>
 8010594:	2309      	movs	r3, #9
 8010596:	e2ae      	b.n	8010af6 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010598:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801059c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80105a0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80105a4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80105a8:	7812      	ldrb	r2, [r2, #0]
 80105aa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80105ae:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80105b0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80105b4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80105b8:	781a      	ldrb	r2, [r3, #0]
 80105ba:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80105be:	f107 0308 	add.w	r3, r7, #8
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7ff fc98 	bl	800fef8 <find_volume>
 80105c8:	4603      	mov	r3, r0
 80105ca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80105ce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	f040 827a 	bne.w	8010acc <f_open+0x56c>
		dj.obj.fs = fs;
 80105d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80105dc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80105e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80105e4:	f107 0214 	add.w	r2, r7, #20
 80105e8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80105ea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80105ee:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80105f8:	4611      	mov	r1, r2
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff fb6c 	bl	800fcd8 <follow_path>
 8010600:	4603      	mov	r3, r0
 8010602:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010606:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801060a:	2b00      	cmp	r3, #0
 801060c:	d11e      	bne.n	801064c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801060e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8010612:	b25b      	sxtb	r3, r3
 8010614:	2b00      	cmp	r3, #0
 8010616:	da03      	bge.n	8010620 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8010618:	2306      	movs	r3, #6
 801061a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801061e:	e015      	b.n	801064c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010620:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010624:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	f023 0301 	bic.w	r3, r3, #1
 801062e:	2b00      	cmp	r3, #0
 8010630:	bf14      	ite	ne
 8010632:	2301      	movne	r3, #1
 8010634:	2300      	moveq	r3, #0
 8010636:	b2db      	uxtb	r3, r3
 8010638:	461a      	mov	r2, r3
 801063a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801063e:	4611      	mov	r1, r2
 8010640:	4618      	mov	r0, r3
 8010642:	f7fd fedb 	bl	800e3fc <chk_lock>
 8010646:	4603      	mov	r3, r0
 8010648:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801064c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010650:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	f003 031c 	and.w	r3, r3, #28
 801065a:	2b00      	cmp	r3, #0
 801065c:	f000 80a7 	beq.w	80107ae <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8010660:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010664:	2b00      	cmp	r3, #0
 8010666:	d01f      	beq.n	80106a8 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010668:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801066c:	2b04      	cmp	r3, #4
 801066e:	d10e      	bne.n	801068e <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010670:	f7fd ff20 	bl	800e4b4 <enq_lock>
 8010674:	4603      	mov	r3, r0
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <f_open+0x128>
 801067a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801067e:	4618      	mov	r0, r3
 8010680:	f7ff f87a 	bl	800f778 <dir_register>
 8010684:	4603      	mov	r3, r0
 8010686:	e000      	b.n	801068a <f_open+0x12a>
 8010688:	2312      	movs	r3, #18
 801068a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801068e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010692:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8010696:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801069a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 801069e:	7812      	ldrb	r2, [r2, #0]
 80106a0:	f042 0208 	orr.w	r2, r2, #8
 80106a4:	701a      	strb	r2, [r3, #0]
 80106a6:	e015      	b.n	80106d4 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80106a8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80106ac:	f003 0311 	and.w	r3, r3, #17
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d003      	beq.n	80106bc <f_open+0x15c>
					res = FR_DENIED;
 80106b4:	2307      	movs	r3, #7
 80106b6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80106ba:	e00b      	b.n	80106d4 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80106bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80106c0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	f003 0304 	and.w	r3, r3, #4
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d002      	beq.n	80106d4 <f_open+0x174>
 80106ce:	2308      	movs	r3, #8
 80106d0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80106d4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f040 8088 	bne.w	80107ee <f_open+0x28e>
 80106de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80106e2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	f003 0308 	and.w	r3, r3, #8
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d07e      	beq.n	80107ee <f_open+0x28e>
				dw = GET_FATTIME();
 80106f0:	f7fd fc54 	bl	800df9c <get_fattime>
 80106f4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80106f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80106fc:	330e      	adds	r3, #14
 80106fe:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010702:	4618      	mov	r0, r3
 8010704:	f7fd fd9e 	bl	800e244 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010708:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801070c:	3316      	adds	r3, #22
 801070e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010712:	4618      	mov	r0, r3
 8010714:	f7fd fd96 	bl	800e244 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010718:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801071c:	330b      	adds	r3, #11
 801071e:	2220      	movs	r2, #32
 8010720:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010722:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010726:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801072a:	4611      	mov	r1, r2
 801072c:	4618      	mov	r0, r3
 801072e:	f7fe fd9b 	bl	800f268 <ld_clust>
 8010732:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010736:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801073a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 801073e:	2200      	movs	r2, #0
 8010740:	4618      	mov	r0, r3
 8010742:	f7fe fdb0 	bl	800f2a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010746:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801074a:	331c      	adds	r3, #28
 801074c:	2100      	movs	r1, #0
 801074e:	4618      	mov	r0, r3
 8010750:	f7fd fd78 	bl	800e244 <st_dword>
					fs->wflag = 1;
 8010754:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010758:	2201      	movs	r2, #1
 801075a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801075c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010760:	2b00      	cmp	r3, #0
 8010762:	d044      	beq.n	80107ee <f_open+0x28e>
						dw = fs->winsect;
 8010764:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801076a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 801076e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010772:	2200      	movs	r2, #0
 8010774:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8010778:	4618      	mov	r0, r3
 801077a:	f7fe fa9a 	bl	800ecb2 <remove_chain>
 801077e:	4603      	mov	r3, r0
 8010780:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8010784:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010788:	2b00      	cmp	r3, #0
 801078a:	d130      	bne.n	80107ee <f_open+0x28e>
							res = move_window(fs, dw);
 801078c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010790:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010794:	4618      	mov	r0, r3
 8010796:	f7fd ffe1 	bl	800e75c <move_window>
 801079a:	4603      	mov	r3, r0
 801079c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80107a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80107a4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80107a8:	3a01      	subs	r2, #1
 80107aa:	619a      	str	r2, [r3, #24]
 80107ac:	e01f      	b.n	80107ee <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80107ae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d11b      	bne.n	80107ee <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80107b6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80107ba:	f003 0310 	and.w	r3, r3, #16
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d003      	beq.n	80107ca <f_open+0x26a>
					res = FR_NO_FILE;
 80107c2:	2304      	movs	r3, #4
 80107c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80107c8:	e011      	b.n	80107ee <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80107ca:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80107ce:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	f003 0302 	and.w	r3, r3, #2
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d008      	beq.n	80107ee <f_open+0x28e>
 80107dc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80107e0:	f003 0301 	and.w	r3, r3, #1
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d002      	beq.n	80107ee <f_open+0x28e>
						res = FR_DENIED;
 80107e8:	2307      	movs	r3, #7
 80107ea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80107ee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d14a      	bne.n	801088c <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80107f6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80107fa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	f003 0308 	and.w	r3, r3, #8
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8010808:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801080c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8010810:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8010814:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8010818:	7812      	ldrb	r2, [r2, #0]
 801081a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801081e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010820:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010826:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801082a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010832:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010836:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801083a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010842:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010846:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	f023 0301 	bic.w	r3, r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	bf14      	ite	ne
 8010854:	2301      	movne	r3, #1
 8010856:	2300      	moveq	r3, #0
 8010858:	b2db      	uxtb	r3, r3
 801085a:	461a      	mov	r2, r3
 801085c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010860:	4611      	mov	r1, r2
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd fe48 	bl	800e4f8 <inc_lock>
 8010868:	4602      	mov	r2, r0
 801086a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801086e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010876:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801087a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d102      	bne.n	801088c <f_open+0x32c>
 8010886:	2302      	movs	r3, #2
 8010888:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801088c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010890:	2b00      	cmp	r3, #0
 8010892:	f040 811b 	bne.w	8010acc <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010896:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801089a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801089e:	4611      	mov	r1, r2
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe fce1 	bl	800f268 <ld_clust>
 80108a6:	4602      	mov	r2, r0
 80108a8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80108ac:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80108b4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80108b8:	331c      	adds	r3, #28
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fd fc84 	bl	800e1c8 <ld_dword>
 80108c0:	4602      	mov	r2, r0
 80108c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80108c6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80108ce:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80108d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	2200      	movs	r2, #0
 80108da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80108dc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80108e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80108e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80108ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80108f0:	88da      	ldrh	r2, [r3, #6]
 80108f2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80108f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80108fe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010902:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f507 721a 	add.w	r2, r7, #616	; 0x268
 801090c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8010910:	7812      	ldrb	r2, [r2, #0]
 8010912:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010914:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010918:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2200      	movs	r2, #0
 8010920:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010922:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010926:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2200      	movs	r2, #0
 801092e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010930:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010934:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2200      	movs	r2, #0
 801093c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801093e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010942:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	3330      	adds	r3, #48	; 0x30
 801094a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801094e:	2100      	movs	r1, #0
 8010950:	4618      	mov	r0, r3
 8010952:	f7fd fcc4 	bl	800e2de <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010956:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801095a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	f003 0320 	and.w	r3, r3, #32
 8010964:	2b00      	cmp	r3, #0
 8010966:	f000 80b1 	beq.w	8010acc <f_open+0x56c>
 801096a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801096e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	68db      	ldr	r3, [r3, #12]
 8010976:	2b00      	cmp	r3, #0
 8010978:	f000 80a8 	beq.w	8010acc <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801097c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010980:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	68da      	ldr	r2, [r3, #12]
 8010988:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801098c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010994:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010998:	895b      	ldrh	r3, [r3, #10]
 801099a:	461a      	mov	r2, r3
 801099c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80109a0:	899b      	ldrh	r3, [r3, #12]
 80109a2:	fb02 f303 	mul.w	r3, r2, r3
 80109a6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80109aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80109ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	689b      	ldr	r3, [r3, #8]
 80109b6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80109ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80109be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	68db      	ldr	r3, [r3, #12]
 80109c6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80109ca:	e021      	b.n	8010a10 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 80109cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80109d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80109da:	4618      	mov	r0, r3
 80109dc:	f7fd ff7b 	bl	800e8d6 <get_fat>
 80109e0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80109e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d802      	bhi.n	80109f2 <f_open+0x492>
 80109ec:	2302      	movs	r3, #2
 80109ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80109f2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80109f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109fa:	d102      	bne.n	8010a02 <f_open+0x4a2>
 80109fc:	2301      	movs	r3, #1
 80109fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010a02:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010a06:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010a10:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d105      	bne.n	8010a24 <f_open+0x4c4>
 8010a18:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010a1c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d8d3      	bhi.n	80109cc <f_open+0x46c>
				}
				fp->clust = clst;
 8010a24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010a28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8010a32:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010a34:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d147      	bne.n	8010acc <f_open+0x56c>
 8010a3c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010a40:	899b      	ldrh	r3, [r3, #12]
 8010a42:	461a      	mov	r2, r3
 8010a44:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010a48:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a4c:	fb01 f202 	mul.w	r2, r1, r2
 8010a50:	1a9b      	subs	r3, r3, r2
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d03a      	beq.n	8010acc <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010a56:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010a5a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fd ff1a 	bl	800e898 <clust2sect>
 8010a64:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8010a68:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d103      	bne.n	8010a78 <f_open+0x518>
						res = FR_INT_ERR;
 8010a70:	2302      	movs	r3, #2
 8010a72:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010a76:	e029      	b.n	8010acc <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010a78:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010a7c:	899b      	ldrh	r3, [r3, #12]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010a84:	fbb3 f2f2 	udiv	r2, r3, r2
 8010a88:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010a8c:	441a      	add	r2, r3
 8010a8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010a92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010a9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010a9e:	7858      	ldrb	r0, [r3, #1]
 8010aa0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010aa4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010aae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010ab2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	6a1a      	ldr	r2, [r3, #32]
 8010aba:	2301      	movs	r3, #1
 8010abc:	f7fd fb0e 	bl	800e0dc <disk_read>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d002      	beq.n	8010acc <f_open+0x56c>
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010acc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d006      	beq.n	8010ae2 <f_open+0x582>
 8010ad4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8010ad8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010ae2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010ae6:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8010aea:	4611      	mov	r1, r2
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fd fc69 	bl	800e3c4 <unlock_fs>
 8010af2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8010afc:	46bd      	mov	sp, r7
 8010afe:	bd80      	pop	{r7, pc}

08010b00 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b08e      	sub	sp, #56	; 0x38
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	2200      	movs	r2, #0
 8010b16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f107 0214 	add.w	r2, r7, #20
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fc71 	bl	8010408 <validate>
 8010b26:	4603      	mov	r3, r0
 8010b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d107      	bne.n	8010b44 <f_read+0x44>
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	7d5b      	ldrb	r3, [r3, #21]
 8010b38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010b3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d009      	beq.n	8010b58 <f_read+0x58>
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010b4a:	4611      	mov	r1, r2
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7fd fc39 	bl	800e3c4 <unlock_fs>
 8010b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b56:	e15d      	b.n	8010e14 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	7d1b      	ldrb	r3, [r3, #20]
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d106      	bne.n	8010b72 <f_read+0x72>
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	2107      	movs	r1, #7
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7fd fc2b 	bl	800e3c4 <unlock_fs>
 8010b6e:	2307      	movs	r3, #7
 8010b70:	e150      	b.n	8010e14 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	68da      	ldr	r2, [r3, #12]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	699b      	ldr	r3, [r3, #24]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	6a3b      	ldr	r3, [r7, #32]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	f240 813c 	bls.w	8010e00 <f_read+0x300>
 8010b88:	6a3b      	ldr	r3, [r7, #32]
 8010b8a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010b8c:	e138      	b.n	8010e00 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	699b      	ldr	r3, [r3, #24]
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	8992      	ldrh	r2, [r2, #12]
 8010b96:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b9a:	fb01 f202 	mul.w	r2, r1, r2
 8010b9e:	1a9b      	subs	r3, r3, r2
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	f040 80f3 	bne.w	8010d8c <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	699b      	ldr	r3, [r3, #24]
 8010baa:	697a      	ldr	r2, [r7, #20]
 8010bac:	8992      	ldrh	r2, [r2, #12]
 8010bae:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bb2:	697a      	ldr	r2, [r7, #20]
 8010bb4:	8952      	ldrh	r2, [r2, #10]
 8010bb6:	3a01      	subs	r2, #1
 8010bb8:	4013      	ands	r3, r2
 8010bba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d139      	bne.n	8010c36 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d103      	bne.n	8010bd2 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	689b      	ldr	r3, [r3, #8]
 8010bce:	633b      	str	r3, [r7, #48]	; 0x30
 8010bd0:	e013      	b.n	8010bfa <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	699b      	ldr	r3, [r3, #24]
 8010bde:	4619      	mov	r1, r3
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f7fe f963 	bl	800eeac <clmt_clust>
 8010be6:	6338      	str	r0, [r7, #48]	; 0x30
 8010be8:	e007      	b.n	8010bfa <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	69db      	ldr	r3, [r3, #28]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	4610      	mov	r0, r2
 8010bf4:	f7fd fe6f 	bl	800e8d6 <get_fat>
 8010bf8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	2b01      	cmp	r3, #1
 8010bfe:	d809      	bhi.n	8010c14 <f_read+0x114>
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2202      	movs	r2, #2
 8010c04:	755a      	strb	r2, [r3, #21]
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2102      	movs	r1, #2
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fd fbda 	bl	800e3c4 <unlock_fs>
 8010c10:	2302      	movs	r3, #2
 8010c12:	e0ff      	b.n	8010e14 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c1a:	d109      	bne.n	8010c30 <f_read+0x130>
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2201      	movs	r2, #1
 8010c20:	755a      	strb	r2, [r3, #21]
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	2101      	movs	r1, #1
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fd fbcc 	bl	800e3c4 <unlock_fs>
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	e0f1      	b.n	8010e14 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c34:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c36:	697a      	ldr	r2, [r7, #20]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	69db      	ldr	r3, [r3, #28]
 8010c3c:	4619      	mov	r1, r3
 8010c3e:	4610      	mov	r0, r2
 8010c40:	f7fd fe2a 	bl	800e898 <clust2sect>
 8010c44:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d109      	bne.n	8010c60 <f_read+0x160>
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	2202      	movs	r2, #2
 8010c50:	755a      	strb	r2, [r3, #21]
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	2102      	movs	r1, #2
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fd fbb4 	bl	800e3c4 <unlock_fs>
 8010c5c:	2302      	movs	r3, #2
 8010c5e:	e0d9      	b.n	8010e14 <f_read+0x314>
			sect += csect;
 8010c60:	69ba      	ldr	r2, [r7, #24]
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	4413      	add	r3, r2
 8010c66:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	899b      	ldrh	r3, [r3, #12]
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c74:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d046      	beq.n	8010d0a <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c7c:	69fa      	ldr	r2, [r7, #28]
 8010c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c80:	4413      	add	r3, r2
 8010c82:	697a      	ldr	r2, [r7, #20]
 8010c84:	8952      	ldrh	r2, [r2, #10]
 8010c86:	4293      	cmp	r3, r2
 8010c88:	d905      	bls.n	8010c96 <f_read+0x196>
					cc = fs->csize - csect;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	895b      	ldrh	r3, [r3, #10]
 8010c8e:	461a      	mov	r2, r3
 8010c90:	69fb      	ldr	r3, [r7, #28]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	7858      	ldrb	r0, [r3, #1]
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	69ba      	ldr	r2, [r7, #24]
 8010c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ca0:	f7fd fa1c 	bl	800e0dc <disk_read>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d009      	beq.n	8010cbe <f_read+0x1be>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2201      	movs	r2, #1
 8010cae:	755a      	strb	r2, [r3, #21]
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	f7fd fb85 	bl	800e3c4 <unlock_fs>
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e0aa      	b.n	8010e14 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	7d1b      	ldrb	r3, [r3, #20]
 8010cc2:	b25b      	sxtb	r3, r3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	da18      	bge.n	8010cfa <f_read+0x1fa>
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6a1a      	ldr	r2, [r3, #32]
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d911      	bls.n	8010cfa <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6a1a      	ldr	r2, [r3, #32]
 8010cda:	69bb      	ldr	r3, [r7, #24]
 8010cdc:	1ad3      	subs	r3, r2, r3
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	8992      	ldrh	r2, [r2, #12]
 8010ce2:	fb02 f303 	mul.w	r3, r2, r3
 8010ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ce8:	18d0      	adds	r0, r2, r3
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	899b      	ldrh	r3, [r3, #12]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	f7fd fad1 	bl	800e29c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	899b      	ldrh	r3, [r3, #12]
 8010cfe:	461a      	mov	r2, r3
 8010d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d02:	fb02 f303 	mul.w	r3, r2, r3
 8010d06:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010d08:	e066      	b.n	8010dd8 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6a1b      	ldr	r3, [r3, #32]
 8010d0e:	69ba      	ldr	r2, [r7, #24]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d038      	beq.n	8010d86 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	7d1b      	ldrb	r3, [r3, #20]
 8010d18:	b25b      	sxtb	r3, r3
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	da1d      	bge.n	8010d5a <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	7858      	ldrb	r0, [r3, #1]
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6a1a      	ldr	r2, [r3, #32]
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	f7fd f9f5 	bl	800e11c <disk_write>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d009      	beq.n	8010d4c <f_read+0x24c>
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	755a      	strb	r2, [r3, #21]
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	2101      	movs	r1, #1
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fd fb3e 	bl	800e3c4 <unlock_fs>
 8010d48:	2301      	movs	r3, #1
 8010d4a:	e063      	b.n	8010e14 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	7d1b      	ldrb	r3, [r3, #20]
 8010d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010d5a:	697b      	ldr	r3, [r7, #20]
 8010d5c:	7858      	ldrb	r0, [r3, #1]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d64:	2301      	movs	r3, #1
 8010d66:	69ba      	ldr	r2, [r7, #24]
 8010d68:	f7fd f9b8 	bl	800e0dc <disk_read>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d009      	beq.n	8010d86 <f_read+0x286>
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	2201      	movs	r2, #1
 8010d76:	755a      	strb	r2, [r3, #21]
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f7fd fb21 	bl	800e3c4 <unlock_fs>
 8010d82:	2301      	movs	r3, #1
 8010d84:	e046      	b.n	8010e14 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	69ba      	ldr	r2, [r7, #24]
 8010d8a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	899b      	ldrh	r3, [r3, #12]
 8010d90:	4618      	mov	r0, r3
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	699b      	ldr	r3, [r3, #24]
 8010d96:	697a      	ldr	r2, [r7, #20]
 8010d98:	8992      	ldrh	r2, [r2, #12]
 8010d9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d9e:	fb01 f202 	mul.w	r2, r1, r2
 8010da2:	1a9b      	subs	r3, r3, r2
 8010da4:	1ac3      	subs	r3, r0, r3
 8010da6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d901      	bls.n	8010db4 <f_read+0x2b4>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	699b      	ldr	r3, [r3, #24]
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	8992      	ldrh	r2, [r2, #12]
 8010dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dc6:	fb00 f202 	mul.w	r2, r0, r2
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	440b      	add	r3, r1
 8010dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dd4:	f7fd fa62 	bl	800e29c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ddc:	4413      	add	r3, r2
 8010dde:	627b      	str	r3, [r7, #36]	; 0x24
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	699a      	ldr	r2, [r3, #24]
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	441a      	add	r2, r3
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	619a      	str	r2, [r3, #24]
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	681a      	ldr	r2, [r3, #0]
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	441a      	add	r2, r3
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	601a      	str	r2, [r3, #0]
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfc:	1ad3      	subs	r3, r2, r3
 8010dfe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	f47f aec3 	bne.w	8010b8e <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fd fad9 	bl	800e3c4 <unlock_fs>
 8010e12:	2300      	movs	r3, #0
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3738      	adds	r7, #56	; 0x38
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}

08010e1c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08c      	sub	sp, #48	; 0x30
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	60f8      	str	r0, [r7, #12]
 8010e24:	60b9      	str	r1, [r7, #8]
 8010e26:	607a      	str	r2, [r7, #4]
 8010e28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	2200      	movs	r2, #0
 8010e32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	f107 0210 	add.w	r2, r7, #16
 8010e3a:	4611      	mov	r1, r2
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7ff fae3 	bl	8010408 <validate>
 8010e42:	4603      	mov	r3, r0
 8010e44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d107      	bne.n	8010e60 <f_write+0x44>
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	7d5b      	ldrb	r3, [r3, #21]
 8010e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d009      	beq.n	8010e74 <f_write+0x58>
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010e66:	4611      	mov	r1, r2
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fd faab 	bl	800e3c4 <unlock_fs>
 8010e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e72:	e192      	b.n	801119a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	7d1b      	ldrb	r3, [r3, #20]
 8010e78:	f003 0302 	and.w	r3, r3, #2
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d106      	bne.n	8010e8e <f_write+0x72>
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	2107      	movs	r1, #7
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fd fa9d 	bl	800e3c4 <unlock_fs>
 8010e8a:	2307      	movs	r3, #7
 8010e8c:	e185      	b.n	801119a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	699a      	ldr	r2, [r3, #24]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	441a      	add	r2, r3
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	699b      	ldr	r3, [r3, #24]
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	f080 816a 	bcs.w	8011174 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	43db      	mvns	r3, r3
 8010ea6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010ea8:	e164      	b.n	8011174 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	699b      	ldr	r3, [r3, #24]
 8010eae:	693a      	ldr	r2, [r7, #16]
 8010eb0:	8992      	ldrh	r2, [r2, #12]
 8010eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8010eb6:	fb01 f202 	mul.w	r2, r1, r2
 8010eba:	1a9b      	subs	r3, r3, r2
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f040 810f 	bne.w	80110e0 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	699b      	ldr	r3, [r3, #24]
 8010ec6:	693a      	ldr	r2, [r7, #16]
 8010ec8:	8992      	ldrh	r2, [r2, #12]
 8010eca:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ece:	693a      	ldr	r2, [r7, #16]
 8010ed0:	8952      	ldrh	r2, [r2, #10]
 8010ed2:	3a01      	subs	r2, #1
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010ed8:	69bb      	ldr	r3, [r7, #24]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d14d      	bne.n	8010f7a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10c      	bne.n	8010f00 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	689b      	ldr	r3, [r3, #8]
 8010eea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d11a      	bne.n	8010f28 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2100      	movs	r1, #0
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fd ff40 	bl	800ed7c <create_chain>
 8010efc:	62b8      	str	r0, [r7, #40]	; 0x28
 8010efe:	e013      	b.n	8010f28 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d007      	beq.n	8010f18 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	699b      	ldr	r3, [r3, #24]
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	68f8      	ldr	r0, [r7, #12]
 8010f10:	f7fd ffcc 	bl	800eeac <clmt_clust>
 8010f14:	62b8      	str	r0, [r7, #40]	; 0x28
 8010f16:	e007      	b.n	8010f28 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	69db      	ldr	r3, [r3, #28]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	4610      	mov	r0, r2
 8010f22:	f7fd ff2b 	bl	800ed7c <create_chain>
 8010f26:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f000 8127 	beq.w	801117e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d109      	bne.n	8010f4a <f_write+0x12e>
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	2202      	movs	r2, #2
 8010f3a:	755a      	strb	r2, [r3, #21]
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	2102      	movs	r1, #2
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fd fa3f 	bl	800e3c4 <unlock_fs>
 8010f46:	2302      	movs	r3, #2
 8010f48:	e127      	b.n	801119a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f50:	d109      	bne.n	8010f66 <f_write+0x14a>
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	2201      	movs	r2, #1
 8010f56:	755a      	strb	r2, [r3, #21]
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	2101      	movs	r1, #1
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fd fa31 	bl	800e3c4 <unlock_fs>
 8010f62:	2301      	movs	r3, #1
 8010f64:	e119      	b.n	801119a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f6a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	689b      	ldr	r3, [r3, #8]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d102      	bne.n	8010f7a <f_write+0x15e>
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f78:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	7d1b      	ldrb	r3, [r3, #20]
 8010f7e:	b25b      	sxtb	r3, r3
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	da1d      	bge.n	8010fc0 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	7858      	ldrb	r0, [r3, #1]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	6a1a      	ldr	r2, [r3, #32]
 8010f92:	2301      	movs	r3, #1
 8010f94:	f7fd f8c2 	bl	800e11c <disk_write>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d009      	beq.n	8010fb2 <f_write+0x196>
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	755a      	strb	r2, [r3, #21]
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	2101      	movs	r1, #1
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7fd fa0b 	bl	800e3c4 <unlock_fs>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e0f3      	b.n	801119a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	7d1b      	ldrb	r3, [r3, #20]
 8010fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010fba:	b2da      	uxtb	r2, r3
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010fc0:	693a      	ldr	r2, [r7, #16]
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	69db      	ldr	r3, [r3, #28]
 8010fc6:	4619      	mov	r1, r3
 8010fc8:	4610      	mov	r0, r2
 8010fca:	f7fd fc65 	bl	800e898 <clust2sect>
 8010fce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d109      	bne.n	8010fea <f_write+0x1ce>
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2202      	movs	r2, #2
 8010fda:	755a      	strb	r2, [r3, #21]
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	2102      	movs	r1, #2
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fd f9ef 	bl	800e3c4 <unlock_fs>
 8010fe6:	2302      	movs	r3, #2
 8010fe8:	e0d7      	b.n	801119a <f_write+0x37e>
			sect += csect;
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	4413      	add	r3, r2
 8010ff0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	899b      	ldrh	r3, [r3, #12]
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ffe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011000:	6a3b      	ldr	r3, [r7, #32]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d048      	beq.n	8011098 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011006:	69ba      	ldr	r2, [r7, #24]
 8011008:	6a3b      	ldr	r3, [r7, #32]
 801100a:	4413      	add	r3, r2
 801100c:	693a      	ldr	r2, [r7, #16]
 801100e:	8952      	ldrh	r2, [r2, #10]
 8011010:	4293      	cmp	r3, r2
 8011012:	d905      	bls.n	8011020 <f_write+0x204>
					cc = fs->csize - csect;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	895b      	ldrh	r3, [r3, #10]
 8011018:	461a      	mov	r2, r3
 801101a:	69bb      	ldr	r3, [r7, #24]
 801101c:	1ad3      	subs	r3, r2, r3
 801101e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	7858      	ldrb	r0, [r3, #1]
 8011024:	6a3b      	ldr	r3, [r7, #32]
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	69f9      	ldr	r1, [r7, #28]
 801102a:	f7fd f877 	bl	800e11c <disk_write>
 801102e:	4603      	mov	r3, r0
 8011030:	2b00      	cmp	r3, #0
 8011032:	d009      	beq.n	8011048 <f_write+0x22c>
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2201      	movs	r2, #1
 8011038:	755a      	strb	r2, [r3, #21]
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	2101      	movs	r1, #1
 801103e:	4618      	mov	r0, r3
 8011040:	f7fd f9c0 	bl	800e3c4 <unlock_fs>
 8011044:	2301      	movs	r3, #1
 8011046:	e0a8      	b.n	801119a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	6a1a      	ldr	r2, [r3, #32]
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	1ad3      	subs	r3, r2, r3
 8011050:	6a3a      	ldr	r2, [r7, #32]
 8011052:	429a      	cmp	r2, r3
 8011054:	d918      	bls.n	8011088 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	6a1a      	ldr	r2, [r3, #32]
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	693a      	ldr	r2, [r7, #16]
 8011066:	8992      	ldrh	r2, [r2, #12]
 8011068:	fb02 f303 	mul.w	r3, r2, r3
 801106c:	69fa      	ldr	r2, [r7, #28]
 801106e:	18d1      	adds	r1, r2, r3
 8011070:	693b      	ldr	r3, [r7, #16]
 8011072:	899b      	ldrh	r3, [r3, #12]
 8011074:	461a      	mov	r2, r3
 8011076:	f7fd f911 	bl	800e29c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	7d1b      	ldrb	r3, [r3, #20]
 801107e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011082:	b2da      	uxtb	r2, r3
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	899b      	ldrh	r3, [r3, #12]
 801108c:	461a      	mov	r2, r3
 801108e:	6a3b      	ldr	r3, [r7, #32]
 8011090:	fb02 f303 	mul.w	r3, r2, r3
 8011094:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011096:	e050      	b.n	801113a <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	6a1b      	ldr	r3, [r3, #32]
 801109c:	697a      	ldr	r2, [r7, #20]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d01b      	beq.n	80110da <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	699a      	ldr	r2, [r3, #24]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d215      	bcs.n	80110da <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	7858      	ldrb	r0, [r3, #1]
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110b8:	2301      	movs	r3, #1
 80110ba:	697a      	ldr	r2, [r7, #20]
 80110bc:	f7fd f80e 	bl	800e0dc <disk_read>
 80110c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d009      	beq.n	80110da <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2201      	movs	r2, #1
 80110ca:	755a      	strb	r2, [r3, #21]
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	2101      	movs	r1, #1
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7fd f977 	bl	800e3c4 <unlock_fs>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e05f      	b.n	801119a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	697a      	ldr	r2, [r7, #20]
 80110de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	899b      	ldrh	r3, [r3, #12]
 80110e4:	4618      	mov	r0, r3
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	699b      	ldr	r3, [r3, #24]
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	8992      	ldrh	r2, [r2, #12]
 80110ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80110f2:	fb01 f202 	mul.w	r2, r1, r2
 80110f6:	1a9b      	subs	r3, r3, r2
 80110f8:	1ac3      	subs	r3, r0, r3
 80110fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80110fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	429a      	cmp	r2, r3
 8011102:	d901      	bls.n	8011108 <f_write+0x2ec>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	699b      	ldr	r3, [r3, #24]
 8011112:	693a      	ldr	r2, [r7, #16]
 8011114:	8992      	ldrh	r2, [r2, #12]
 8011116:	fbb3 f0f2 	udiv	r0, r3, r2
 801111a:	fb00 f202 	mul.w	r2, r0, r2
 801111e:	1a9b      	subs	r3, r3, r2
 8011120:	440b      	add	r3, r1
 8011122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011124:	69f9      	ldr	r1, [r7, #28]
 8011126:	4618      	mov	r0, r3
 8011128:	f7fd f8b8 	bl	800e29c <mem_cpy>
		fp->flag |= FA_DIRTY;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	7d1b      	ldrb	r3, [r3, #20]
 8011130:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011134:	b2da      	uxtb	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801113a:	69fa      	ldr	r2, [r7, #28]
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	4413      	add	r3, r2
 8011140:	61fb      	str	r3, [r7, #28]
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	699a      	ldr	r2, [r3, #24]
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	441a      	add	r2, r3
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	619a      	str	r2, [r3, #24]
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	68da      	ldr	r2, [r3, #12]
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	699b      	ldr	r3, [r3, #24]
 8011156:	429a      	cmp	r2, r3
 8011158:	bf38      	it	cc
 801115a:	461a      	movcc	r2, r3
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	60da      	str	r2, [r3, #12]
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	681a      	ldr	r2, [r3, #0]
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011166:	441a      	add	r2, r3
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	601a      	str	r2, [r3, #0]
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011170:	1ad3      	subs	r3, r2, r3
 8011172:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2b00      	cmp	r3, #0
 8011178:	f47f ae97 	bne.w	8010eaa <f_write+0x8e>
 801117c:	e000      	b.n	8011180 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801117e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	7d1b      	ldrb	r3, [r3, #20]
 8011184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011188:	b2da      	uxtb	r2, r3
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	2100      	movs	r1, #0
 8011192:	4618      	mov	r0, r3
 8011194:	f7fd f916 	bl	800e3c4 <unlock_fs>
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3730      	adds	r7, #48	; 0x30
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}

080111a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80111a2:	b580      	push	{r7, lr}
 80111a4:	b086      	sub	sp, #24
 80111a6:	af00      	add	r7, sp, #0
 80111a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f107 0208 	add.w	r2, r7, #8
 80111b0:	4611      	mov	r1, r2
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff f928 	bl	8010408 <validate>
 80111b8:	4603      	mov	r3, r0
 80111ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80111bc:	7dfb      	ldrb	r3, [r7, #23]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d16d      	bne.n	801129e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	7d1b      	ldrb	r3, [r3, #20]
 80111c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d067      	beq.n	801129e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	7d1b      	ldrb	r3, [r3, #20]
 80111d2:	b25b      	sxtb	r3, r3
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	da1a      	bge.n	801120e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	7858      	ldrb	r0, [r3, #1]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6a1a      	ldr	r2, [r3, #32]
 80111e6:	2301      	movs	r3, #1
 80111e8:	f7fc ff98 	bl	800e11c <disk_write>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d006      	beq.n	8011200 <f_sync+0x5e>
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	2101      	movs	r1, #1
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fd f8e4 	bl	800e3c4 <unlock_fs>
 80111fc:	2301      	movs	r3, #1
 80111fe:	e055      	b.n	80112ac <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	7d1b      	ldrb	r3, [r3, #20]
 8011204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011208:	b2da      	uxtb	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801120e:	f7fc fec5 	bl	800df9c <get_fattime>
 8011212:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121a:	4619      	mov	r1, r3
 801121c:	4610      	mov	r0, r2
 801121e:	f7fd fa9d 	bl	800e75c <move_window>
 8011222:	4603      	mov	r3, r0
 8011224:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d138      	bne.n	801129e <f_sync+0xfc>
					dir = fp->dir_ptr;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011230:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	330b      	adds	r3, #11
 8011236:	781a      	ldrb	r2, [r3, #0]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	330b      	adds	r3, #11
 801123c:	f042 0220 	orr.w	r2, r2, #32
 8011240:	b2d2      	uxtb	r2, r2
 8011242:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	689b      	ldr	r3, [r3, #8]
 801124c:	461a      	mov	r2, r3
 801124e:	68f9      	ldr	r1, [r7, #12]
 8011250:	f7fe f829 	bl	800f2a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	f103 021c 	add.w	r2, r3, #28
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	4619      	mov	r1, r3
 8011260:	4610      	mov	r0, r2
 8011262:	f7fc ffef 	bl	800e244 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	3316      	adds	r3, #22
 801126a:	6939      	ldr	r1, [r7, #16]
 801126c:	4618      	mov	r0, r3
 801126e:	f7fc ffe9 	bl	800e244 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	3312      	adds	r3, #18
 8011276:	2100      	movs	r1, #0
 8011278:	4618      	mov	r0, r3
 801127a:	f7fc ffc8 	bl	800e20e <st_word>
					fs->wflag = 1;
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2201      	movs	r2, #1
 8011282:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	4618      	mov	r0, r3
 8011288:	f7fd fa96 	bl	800e7b8 <sync_fs>
 801128c:	4603      	mov	r3, r0
 801128e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	7d1b      	ldrb	r3, [r3, #20]
 8011294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011298:	b2da      	uxtb	r2, r3
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	7dfa      	ldrb	r2, [r7, #23]
 80112a2:	4611      	mov	r1, r2
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fd f88d 	bl	800e3c4 <unlock_fs>
 80112aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3718      	adds	r7, #24
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f7ff ff70 	bl	80111a2 <f_sync>
 80112c2:	4603      	mov	r3, r0
 80112c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80112c6:	7bfb      	ldrb	r3, [r7, #15]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d11d      	bne.n	8011308 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f107 0208 	add.w	r2, r7, #8
 80112d2:	4611      	mov	r1, r2
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7ff f897 	bl	8010408 <validate>
 80112da:	4603      	mov	r3, r0
 80112dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80112de:	7bfb      	ldrb	r3, [r7, #15]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d111      	bne.n	8011308 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	691b      	ldr	r3, [r3, #16]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fd f993 	bl	800e614 <dec_lock>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d102      	bne.n	80112fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2200      	movs	r2, #0
 80112fc:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2100      	movs	r1, #0
 8011302:	4618      	mov	r0, r3
 8011304:	f7fd f85e 	bl	800e3c4 <unlock_fs>
#endif
		}
	}
	return res;
 8011308:	7bfb      	ldrb	r3, [r7, #15]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3710      	adds	r7, #16
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8011312:	b580      	push	{r7, lr}
 8011314:	b092      	sub	sp, #72	; 0x48
 8011316:	af00      	add	r7, sp, #0
 8011318:	60f8      	str	r0, [r7, #12]
 801131a:	60b9      	str	r1, [r7, #8]
 801131c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801131e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8011322:	f107 030c 	add.w	r3, r7, #12
 8011326:	2200      	movs	r2, #0
 8011328:	4618      	mov	r0, r3
 801132a:	f7fe fde5 	bl	800fef8 <find_volume>
 801132e:	4603      	mov	r3, r0
 8011330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8011334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011338:	2b00      	cmp	r3, #0
 801133a:	f040 8099 	bne.w	8011470 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801133e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	69da      	ldr	r2, [r3, #28]
 8011348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134a:	6a1b      	ldr	r3, [r3, #32]
 801134c:	3b02      	subs	r3, #2
 801134e:	429a      	cmp	r2, r3
 8011350:	d804      	bhi.n	801135c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8011352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011354:	69da      	ldr	r2, [r3, #28]
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	601a      	str	r2, [r3, #0]
 801135a:	e089      	b.n	8011470 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801135c:	2300      	movs	r3, #0
 801135e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8011360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	2b01      	cmp	r3, #1
 8011366:	d128      	bne.n	80113ba <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8011368:	2302      	movs	r3, #2
 801136a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8011370:	f107 0314 	add.w	r3, r7, #20
 8011374:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011376:	4618      	mov	r0, r3
 8011378:	f7fd faad 	bl	800e8d6 <get_fat>
 801137c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011384:	d103      	bne.n	801138e <f_getfree+0x7c>
 8011386:	2301      	movs	r3, #1
 8011388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801138c:	e063      	b.n	8011456 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011390:	2b01      	cmp	r3, #1
 8011392:	d103      	bne.n	801139c <f_getfree+0x8a>
 8011394:	2302      	movs	r3, #2
 8011396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801139a:	e05c      	b.n	8011456 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801139c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d102      	bne.n	80113a8 <f_getfree+0x96>
 80113a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113a4:	3301      	adds	r3, #1
 80113a6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80113a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113aa:	3301      	adds	r3, #1
 80113ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b0:	6a1b      	ldr	r3, [r3, #32]
 80113b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d3db      	bcc.n	8011370 <f_getfree+0x5e>
 80113b8:	e04d      	b.n	8011456 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80113ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113bc:	6a1b      	ldr	r3, [r3, #32]
 80113be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80113c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	637b      	str	r3, [r7, #52]	; 0x34
 80113ca:	2300      	movs	r3, #0
 80113cc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80113ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d113      	bne.n	80113fc <f_getfree+0xea>
							res = move_window(fs, sect++);
 80113d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	63ba      	str	r2, [r7, #56]	; 0x38
 80113dc:	4619      	mov	r1, r3
 80113de:	f7fd f9bd 	bl	800e75c <move_window>
 80113e2:	4603      	mov	r3, r0
 80113e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80113e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d131      	bne.n	8011454 <f_getfree+0x142>
							p = fs->win;
 80113f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f2:	333c      	adds	r3, #60	; 0x3c
 80113f4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80113f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f8:	899b      	ldrh	r3, [r3, #12]
 80113fa:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80113fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b02      	cmp	r3, #2
 8011402:	d10f      	bne.n	8011424 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8011404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011406:	f7fc fec7 	bl	800e198 <ld_word>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d102      	bne.n	8011416 <f_getfree+0x104>
 8011410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011412:	3301      	adds	r3, #1
 8011414:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	3302      	adds	r3, #2
 801141a:	633b      	str	r3, [r7, #48]	; 0x30
 801141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801141e:	3b02      	subs	r3, #2
 8011420:	637b      	str	r3, [r7, #52]	; 0x34
 8011422:	e010      	b.n	8011446 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8011424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011426:	f7fc fecf 	bl	800e1c8 <ld_dword>
 801142a:	4603      	mov	r3, r0
 801142c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011430:	2b00      	cmp	r3, #0
 8011432:	d102      	bne.n	801143a <f_getfree+0x128>
 8011434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011436:	3301      	adds	r3, #1
 8011438:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143c:	3304      	adds	r3, #4
 801143e:	633b      	str	r3, [r7, #48]	; 0x30
 8011440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011442:	3b04      	subs	r3, #4
 8011444:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8011446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011448:	3b01      	subs	r3, #1
 801144a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801144c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1bd      	bne.n	80113ce <f_getfree+0xbc>
 8011452:	e000      	b.n	8011456 <f_getfree+0x144>
							if (res != FR_OK) break;
 8011454:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801145a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011460:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8011462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011464:	791a      	ldrb	r2, [r3, #4]
 8011466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011468:	f042 0201 	orr.w	r2, r2, #1
 801146c:	b2d2      	uxtb	r2, r2
 801146e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8011470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011472:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8011476:	4611      	mov	r1, r2
 8011478:	4618      	mov	r0, r3
 801147a:	f7fc ffa3 	bl	800e3c4 <unlock_fs>
 801147e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8011482:	4618      	mov	r0, r3
 8011484:	3748      	adds	r7, #72	; 0x48
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
	...

0801148c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801148c:	b590      	push	{r4, r7, lr}
 801148e:	b09d      	sub	sp, #116	; 0x74
 8011490:	af00      	add	r7, sp, #0
 8011492:	60f8      	str	r0, [r7, #12]
 8011494:	607a      	str	r2, [r7, #4]
 8011496:	603b      	str	r3, [r7, #0]
 8011498:	460b      	mov	r3, r1
 801149a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 801149c:	2301      	movs	r3, #1
 801149e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 80114a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114a4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 80114a6:	f107 030c 	add.w	r3, r7, #12
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe fc8a 	bl	800fdc4 <get_ldnumber>
 80114b0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80114b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	da02      	bge.n	80114be <f_mkfs+0x32>
 80114b8:	230b      	movs	r3, #11
 80114ba:	f000 bc31 	b.w	8011d20 <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 80114be:	4aa5      	ldr	r2, [pc, #660]	; (8011754 <f_mkfs+0x2c8>)
 80114c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d005      	beq.n	80114d6 <f_mkfs+0x4a>
 80114ca:	4aa2      	ldr	r2, [pc, #648]	; (8011754 <f_mkfs+0x2c8>)
 80114cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114d2:	2200      	movs	r2, #0
 80114d4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 80114dc:	2300      	movs	r3, #0
 80114de:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 80114e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fc fdd0 	bl	800e08c <disk_initialize>
 80114ec:	4603      	mov	r3, r0
 80114ee:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80114f2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80114f6:	f003 0301 	and.w	r3, r3, #1
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <f_mkfs+0x78>
 80114fe:	2303      	movs	r3, #3
 8011500:	f000 bc0e 	b.w	8011d20 <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8011504:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8011508:	f003 0304 	and.w	r3, r3, #4
 801150c:	2b00      	cmp	r3, #0
 801150e:	d002      	beq.n	8011516 <f_mkfs+0x8a>
 8011510:	230a      	movs	r3, #10
 8011512:	f000 bc05 	b.w	8011d20 <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8011516:	f107 0214 	add.w	r2, r7, #20
 801151a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801151e:	2103      	movs	r1, #3
 8011520:	4618      	mov	r0, r3
 8011522:	f7fc fe1b 	bl	800e15c <disk_ioctl>
 8011526:	4603      	mov	r3, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10c      	bne.n	8011546 <f_mkfs+0xba>
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d009      	beq.n	8011546 <f_mkfs+0xba>
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011538:	d805      	bhi.n	8011546 <f_mkfs+0xba>
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	1e5a      	subs	r2, r3, #1
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	4013      	ands	r3, r2
 8011542:	2b00      	cmp	r3, #0
 8011544:	d001      	beq.n	801154a <f_mkfs+0xbe>
 8011546:	2301      	movs	r3, #1
 8011548:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 801154a:	f107 021a 	add.w	r2, r7, #26
 801154e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011552:	2102      	movs	r1, #2
 8011554:	4618      	mov	r0, r3
 8011556:	f7fc fe01 	bl	800e15c <disk_ioctl>
 801155a:	4603      	mov	r3, r0
 801155c:	2b00      	cmp	r3, #0
 801155e:	d001      	beq.n	8011564 <f_mkfs+0xd8>
 8011560:	2301      	movs	r3, #1
 8011562:	e3dd      	b.n	8011d20 <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8011564:	8b7b      	ldrh	r3, [r7, #26]
 8011566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801156a:	d80a      	bhi.n	8011582 <f_mkfs+0xf6>
 801156c:	8b7b      	ldrh	r3, [r7, #26]
 801156e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011572:	d306      	bcc.n	8011582 <f_mkfs+0xf6>
 8011574:	8b7b      	ldrh	r3, [r7, #26]
 8011576:	461a      	mov	r2, r3
 8011578:	8b7b      	ldrh	r3, [r7, #26]
 801157a:	3b01      	subs	r3, #1
 801157c:	4013      	ands	r3, r2
 801157e:	2b00      	cmp	r3, #0
 8011580:	d001      	beq.n	8011586 <f_mkfs+0xfa>
 8011582:	2301      	movs	r3, #1
 8011584:	e3cc      	b.n	8011d20 <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d004      	beq.n	8011596 <f_mkfs+0x10a>
 801158c:	8b7b      	ldrh	r3, [r7, #26]
 801158e:	461a      	mov	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	4293      	cmp	r3, r2
 8011594:	d309      	bcc.n	80115aa <f_mkfs+0x11e>
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801159c:	d805      	bhi.n	80115aa <f_mkfs+0x11e>
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	1e5a      	subs	r2, r3, #1
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	4013      	ands	r3, r2
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d001      	beq.n	80115ae <f_mkfs+0x122>
 80115aa:	2313      	movs	r3, #19
 80115ac:	e3b8      	b.n	8011d20 <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 80115ae:	8b7b      	ldrh	r3, [r7, #26]
 80115b0:	461a      	mov	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80115b8:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 80115ba:	683b      	ldr	r3, [r7, #0]
 80115bc:	637b      	str	r3, [r7, #52]	; 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 80115be:	8b7b      	ldrh	r3, [r7, #26]
 80115c0:	461a      	mov	r2, r3
 80115c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80115ca:	633b      	str	r3, [r7, #48]	; 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80115cc:	8b7b      	ldrh	r3, [r7, #26]
 80115ce:	461a      	mov	r2, r3
 80115d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d2:	fb02 f303 	mul.w	r3, r2, r3
 80115d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 80115d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d101      	bne.n	80115e2 <f_mkfs+0x156>
 80115de:	230e      	movs	r3, #14
 80115e0:	e39e      	b.n	8011d20 <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80115e2:	f107 0210 	add.w	r2, r7, #16
 80115e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80115ea:	2101      	movs	r1, #1
 80115ec:	4618      	mov	r0, r3
 80115ee:	f7fc fdb5 	bl	800e15c <disk_ioctl>
 80115f2:	4603      	mov	r3, r0
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d001      	beq.n	80115fc <f_mkfs+0x170>
 80115f8:	2301      	movs	r3, #1
 80115fa:	e391      	b.n	8011d20 <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80115fc:	7afb      	ldrb	r3, [r7, #11]
 80115fe:	f003 0308 	and.w	r3, r3, #8
 8011602:	2b00      	cmp	r3, #0
 8011604:	d001      	beq.n	801160a <f_mkfs+0x17e>
 8011606:	2300      	movs	r3, #0
 8011608:	e000      	b.n	801160c <f_mkfs+0x180>
 801160a:	233f      	movs	r3, #63	; 0x3f
 801160c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011612:	429a      	cmp	r2, r3
 8011614:	d901      	bls.n	801161a <f_mkfs+0x18e>
 8011616:	230e      	movs	r3, #14
 8011618:	e382      	b.n	8011d20 <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 801161a:	693a      	ldr	r2, [r7, #16]
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	1ad3      	subs	r3, r2, r3
 8011620:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	2b7f      	cmp	r3, #127	; 0x7f
 8011626:	d801      	bhi.n	801162c <f_mkfs+0x1a0>
 8011628:	230e      	movs	r3, #14
 801162a:	e379      	b.n	8011d20 <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2b80      	cmp	r3, #128	; 0x80
 8011630:	d901      	bls.n	8011636 <f_mkfs+0x1aa>
 8011632:	2313      	movs	r3, #19
 8011634:	e374      	b.n	8011d20 <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8011636:	7afb      	ldrb	r3, [r7, #11]
 8011638:	f003 0302 	and.w	r3, r3, #2
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00d      	beq.n	801165c <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 8011640:	7afb      	ldrb	r3, [r7, #11]
 8011642:	f003 0307 	and.w	r3, r3, #7
 8011646:	2b02      	cmp	r3, #2
 8011648:	d004      	beq.n	8011654 <f_mkfs+0x1c8>
 801164a:	7afb      	ldrb	r3, [r7, #11]
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	2b00      	cmp	r3, #0
 8011652:	d103      	bne.n	801165c <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8011654:	2303      	movs	r3, #3
 8011656:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 801165a:	e009      	b.n	8011670 <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 801165c:	7afb      	ldrb	r3, [r7, #11]
 801165e:	f003 0301 	and.w	r3, r3, #1
 8011662:	2b00      	cmp	r3, #0
 8011664:	d101      	bne.n	801166a <f_mkfs+0x1de>
 8011666:	2313      	movs	r3, #19
 8011668:	e35a      	b.n	8011d20 <f_mkfs+0x894>
		fmt = FS_FAT16;
 801166a:	2302      	movs	r3, #2
 801166c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8011674:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011678:	2b03      	cmp	r3, #3
 801167a:	d13c      	bne.n	80116f6 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 801167c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801167e:	2b00      	cmp	r3, #0
 8011680:	d11b      	bne.n	80116ba <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	0c5b      	lsrs	r3, r3, #17
 8011686:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011688:	2300      	movs	r3, #0
 801168a:	64bb      	str	r3, [r7, #72]	; 0x48
 801168c:	2301      	movs	r3, #1
 801168e:	653b      	str	r3, [r7, #80]	; 0x50
 8011690:	e005      	b.n	801169e <f_mkfs+0x212>
 8011692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011694:	3301      	adds	r3, #1
 8011696:	64bb      	str	r3, [r7, #72]	; 0x48
 8011698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	653b      	str	r3, [r7, #80]	; 0x50
 801169e:	4a2e      	ldr	r2, [pc, #184]	; (8011758 <f_mkfs+0x2cc>)
 80116a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d007      	beq.n	80116ba <f_mkfs+0x22e>
 80116aa:	4a2b      	ldr	r2, [pc, #172]	; (8011758 <f_mkfs+0x2cc>)
 80116ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116b2:	461a      	mov	r2, r3
 80116b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d2eb      	bcs.n	8011692 <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 80116ba:	693a      	ldr	r2, [r7, #16]
 80116bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116be:	fbb2 f3f3 	udiv	r3, r2, r3
 80116c2:	627b      	str	r3, [r7, #36]	; 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 80116c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c6:	3302      	adds	r3, #2
 80116c8:	009b      	lsls	r3, r3, #2
 80116ca:	8b7a      	ldrh	r2, [r7, #26]
 80116cc:	4413      	add	r3, r2
 80116ce:	3b01      	subs	r3, #1
 80116d0:	8b7a      	ldrh	r2, [r7, #26]
 80116d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80116d6:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80116d8:	2320      	movs	r3, #32
 80116da:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 80116dc:	2300      	movs	r3, #0
 80116de:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80116e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d903      	bls.n	80116f2 <f_mkfs+0x266>
 80116ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ec:	4a1b      	ldr	r2, [pc, #108]	; (801175c <f_mkfs+0x2d0>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d954      	bls.n	801179c <f_mkfs+0x310>
 80116f2:	230e      	movs	r3, #14
 80116f4:	e314      	b.n	8011d20 <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80116f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d11b      	bne.n	8011734 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80116fc:	693b      	ldr	r3, [r7, #16]
 80116fe:	0b1b      	lsrs	r3, r3, #12
 8011700:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011702:	2300      	movs	r3, #0
 8011704:	64bb      	str	r3, [r7, #72]	; 0x48
 8011706:	2301      	movs	r3, #1
 8011708:	653b      	str	r3, [r7, #80]	; 0x50
 801170a:	e005      	b.n	8011718 <f_mkfs+0x28c>
 801170c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801170e:	3301      	adds	r3, #1
 8011710:	64bb      	str	r3, [r7, #72]	; 0x48
 8011712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011714:	005b      	lsls	r3, r3, #1
 8011716:	653b      	str	r3, [r7, #80]	; 0x50
 8011718:	4a11      	ldr	r2, [pc, #68]	; (8011760 <f_mkfs+0x2d4>)
 801171a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801171c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d007      	beq.n	8011734 <f_mkfs+0x2a8>
 8011724:	4a0e      	ldr	r2, [pc, #56]	; (8011760 <f_mkfs+0x2d4>)
 8011726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801172c:	461a      	mov	r2, r3
 801172e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011730:	4293      	cmp	r3, r2
 8011732:	d2eb      	bcs.n	801170c <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8011734:	693a      	ldr	r2, [r7, #16]
 8011736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011738:	fbb2 f3f3 	udiv	r3, r2, r3
 801173c:	627b      	str	r3, [r7, #36]	; 0x24
				if (n_clst > MAX_FAT12) {
 801173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011740:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011744:	4293      	cmp	r3, r2
 8011746:	d90d      	bls.n	8011764 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8011748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174a:	3302      	adds	r3, #2
 801174c:	005b      	lsls	r3, r3, #1
 801174e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011750:	e013      	b.n	801177a <f_mkfs+0x2ee>
 8011752:	bf00      	nop
 8011754:	20003498 	.word	0x20003498
 8011758:	0801a598 	.word	0x0801a598
 801175c:	0ffffff5 	.word	0x0ffffff5
 8011760:	0801a5a8 	.word	0x0801a5a8
				} else {
					fmt = FS_FAT12;
 8011764:	2301      	movs	r3, #1
 8011766:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 801176a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801176c:	4613      	mov	r3, r2
 801176e:	005b      	lsls	r3, r3, #1
 8011770:	4413      	add	r3, r2
 8011772:	3301      	adds	r3, #1
 8011774:	085b      	lsrs	r3, r3, #1
 8011776:	3303      	adds	r3, #3
 8011778:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 801177a:	8b7b      	ldrh	r3, [r7, #26]
 801177c:	461a      	mov	r2, r3
 801177e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011780:	4413      	add	r3, r2
 8011782:	3b01      	subs	r3, #1
 8011784:	8b7a      	ldrh	r2, [r7, #26]
 8011786:	fbb3 f3f2 	udiv	r3, r3, r2
 801178a:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 801178c:	2301      	movs	r3, #1
 801178e:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8011790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011792:	015b      	lsls	r3, r3, #5
 8011794:	8b7a      	ldrh	r2, [r7, #26]
 8011796:	fbb3 f3f2 	udiv	r3, r3, r2
 801179a:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801179c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801179e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117a0:	4413      	add	r3, r2
 80117a2:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80117a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80117a8:	fb03 f202 	mul.w	r2, r3, r2
 80117ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80117ae:	4413      	add	r3, r2
 80117b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80117b2:	4413      	add	r3, r2
 80117b4:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	6a3b      	ldr	r3, [r7, #32]
 80117ba:	4413      	add	r3, r2
 80117bc:	1e5a      	subs	r2, r3, #1
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	425b      	negs	r3, r3
 80117c2:	401a      	ands	r2, r3
 80117c4:	6a3b      	ldr	r3, [r7, #32]
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 80117ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80117ce:	2b03      	cmp	r3, #3
 80117d0:	d108      	bne.n	80117e4 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 80117d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80117d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117d6:	4413      	add	r3, r2
 80117d8:	657b      	str	r3, [r7, #84]	; 0x54
 80117da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80117dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117de:	4413      	add	r3, r2
 80117e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80117e2:	e006      	b.n	80117f2 <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80117e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80117e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80117ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80117ee:	4413      	add	r3, r2
 80117f0:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80117f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f4:	011a      	lsls	r2, r3, #4
 80117f6:	6a3b      	ldr	r3, [r7, #32]
 80117f8:	441a      	add	r2, r3
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fc:	1ad2      	subs	r2, r2, r3
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	429a      	cmp	r2, r3
 8011802:	d901      	bls.n	8011808 <f_mkfs+0x37c>
 8011804:	230e      	movs	r3, #14
 8011806:	e28b      	b.n	8011d20 <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8011808:	693a      	ldr	r2, [r7, #16]
 801180a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801180c:	1ad2      	subs	r2, r2, r3
 801180e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011812:	fb01 f303 	mul.w	r3, r1, r3
 8011816:	1ad2      	subs	r2, r2, r3
 8011818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801181a:	1ad2      	subs	r2, r2, r3
 801181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011822:	627b      	str	r3, [r7, #36]	; 0x24
			if (fmt == FS_FAT32) {
 8011824:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011828:	2b03      	cmp	r3, #3
 801182a:	d10f      	bne.n	801184c <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011832:	4293      	cmp	r3, r2
 8011834:	d80a      	bhi.n	801184c <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d105      	bne.n	8011848 <f_mkfs+0x3bc>
 801183c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801183e:	085b      	lsrs	r3, r3, #1
 8011840:	607b      	str	r3, [r7, #4]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d144      	bne.n	80118d2 <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8011848:	230e      	movs	r3, #14
 801184a:	e269      	b.n	8011d20 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 801184c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011850:	2b02      	cmp	r3, #2
 8011852:	d133      	bne.n	80118bc <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801185a:	4293      	cmp	r3, r2
 801185c:	d91e      	bls.n	801189c <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d107      	bne.n	8011874 <f_mkfs+0x3e8>
 8011864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011866:	005b      	lsls	r3, r3, #1
 8011868:	2b40      	cmp	r3, #64	; 0x40
 801186a:	d803      	bhi.n	8011874 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801186c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801186e:	005b      	lsls	r3, r3, #1
 8011870:	607b      	str	r3, [r7, #4]
 8011872:	e033      	b.n	80118dc <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8011874:	7afb      	ldrb	r3, [r7, #11]
 8011876:	f003 0302 	and.w	r3, r3, #2
 801187a:	2b00      	cmp	r3, #0
 801187c:	d003      	beq.n	8011886 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801187e:	2303      	movs	r3, #3
 8011880:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8011884:	e02a      	b.n	80118dc <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d105      	bne.n	8011898 <f_mkfs+0x40c>
 801188c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801188e:	005b      	lsls	r3, r3, #1
 8011890:	607b      	str	r3, [r7, #4]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	2b80      	cmp	r3, #128	; 0x80
 8011896:	d91e      	bls.n	80118d6 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8011898:	230e      	movs	r3, #14
 801189a:	e241      	b.n	8011d20 <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189e:	f640 72f5 	movw	r2, #4085	; 0xff5
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d80a      	bhi.n	80118bc <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d105      	bne.n	80118b8 <f_mkfs+0x42c>
 80118ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ae:	005b      	lsls	r3, r3, #1
 80118b0:	607b      	str	r3, [r7, #4]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2b80      	cmp	r3, #128	; 0x80
 80118b6:	d910      	bls.n	80118da <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 80118b8:	230e      	movs	r3, #14
 80118ba:	e231      	b.n	8011d20 <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 80118bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d10c      	bne.n	80118de <f_mkfs+0x452>
 80118c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d907      	bls.n	80118de <f_mkfs+0x452>
 80118ce:	230e      	movs	r3, #14
 80118d0:	e226      	b.n	8011d20 <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80118d2:	bf00      	nop
 80118d4:	e6cc      	b.n	8011670 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80118d6:	bf00      	nop
 80118d8:	e6ca      	b.n	8011670 <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80118da:	bf00      	nop
			pau = au;
 80118dc:	e6c8      	b.n	8011670 <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 80118de:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80118e0:	8b7b      	ldrh	r3, [r7, #26]
 80118e2:	461a      	mov	r2, r3
 80118e4:	2100      	movs	r1, #0
 80118e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80118e8:	f7fc fcf9 	bl	800e2de <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80118ec:	220b      	movs	r2, #11
 80118ee:	49b3      	ldr	r1, [pc, #716]	; (8011bbc <f_mkfs+0x730>)
 80118f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80118f2:	f7fc fcd3 	bl	800e29c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80118f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f8:	330b      	adds	r3, #11
 80118fa:	8b7a      	ldrh	r2, [r7, #26]
 80118fc:	4611      	mov	r1, r2
 80118fe:	4618      	mov	r0, r3
 8011900:	f7fc fc85 	bl	800e20e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8011904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011906:	330d      	adds	r3, #13
 8011908:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801190a:	b2d2      	uxtb	r2, r2
 801190c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 801190e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011910:	330e      	adds	r3, #14
 8011912:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011914:	b292      	uxth	r2, r2
 8011916:	4611      	mov	r1, r2
 8011918:	4618      	mov	r0, r3
 801191a:	f7fc fc78 	bl	800e20e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 801191e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011920:	3310      	adds	r3, #16
 8011922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011924:	b2d2      	uxtb	r2, r2
 8011926:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8011928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801192a:	f103 0211 	add.w	r2, r3, #17
 801192e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011932:	2b03      	cmp	r3, #3
 8011934:	d002      	beq.n	801193c <f_mkfs+0x4b0>
 8011936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011938:	b29b      	uxth	r3, r3
 801193a:	e000      	b.n	801193e <f_mkfs+0x4b2>
 801193c:	2300      	movs	r3, #0
 801193e:	4619      	mov	r1, r3
 8011940:	4610      	mov	r0, r2
 8011942:	f7fc fc64 	bl	800e20e <st_word>
		if (sz_vol < 0x10000) {
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801194c:	d208      	bcs.n	8011960 <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 801194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011950:	3313      	adds	r3, #19
 8011952:	693a      	ldr	r2, [r7, #16]
 8011954:	b292      	uxth	r2, r2
 8011956:	4611      	mov	r1, r2
 8011958:	4618      	mov	r0, r3
 801195a:	f7fc fc58 	bl	800e20e <st_word>
 801195e:	e006      	b.n	801196e <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8011960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011962:	3320      	adds	r3, #32
 8011964:	693a      	ldr	r2, [r7, #16]
 8011966:	4611      	mov	r1, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f7fc fc6b 	bl	800e244 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011970:	3315      	adds	r3, #21
 8011972:	22f8      	movs	r2, #248	; 0xf8
 8011974:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8011976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011978:	3318      	adds	r3, #24
 801197a:	213f      	movs	r1, #63	; 0x3f
 801197c:	4618      	mov	r0, r3
 801197e:	f7fc fc46 	bl	800e20e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8011982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011984:	331a      	adds	r3, #26
 8011986:	21ff      	movs	r1, #255	; 0xff
 8011988:	4618      	mov	r0, r3
 801198a:	f7fc fc40 	bl	800e20e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801198e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011990:	331c      	adds	r3, #28
 8011992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011994:	4618      	mov	r0, r3
 8011996:	f7fc fc55 	bl	800e244 <st_dword>
		if (fmt == FS_FAT32) {
 801199a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801199e:	2b03      	cmp	r3, #3
 80119a0:	d131      	bne.n	8011a06 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80119a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a4:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80119a8:	f7fc faf8 	bl	800df9c <get_fattime>
 80119ac:	4603      	mov	r3, r0
 80119ae:	4619      	mov	r1, r3
 80119b0:	4620      	mov	r0, r4
 80119b2:	f7fc fc47 	bl	800e244 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80119b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119b8:	3324      	adds	r3, #36	; 0x24
 80119ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80119bc:	4618      	mov	r0, r3
 80119be:	f7fc fc41 	bl	800e244 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80119c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c4:	332c      	adds	r3, #44	; 0x2c
 80119c6:	2102      	movs	r1, #2
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7fc fc3b 	bl	800e244 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80119ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d0:	3330      	adds	r3, #48	; 0x30
 80119d2:	2101      	movs	r1, #1
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fc fc1a 	bl	800e20e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80119da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119dc:	3332      	adds	r3, #50	; 0x32
 80119de:	2106      	movs	r1, #6
 80119e0:	4618      	mov	r0, r3
 80119e2:	f7fc fc14 	bl	800e20e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80119e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119e8:	3340      	adds	r3, #64	; 0x40
 80119ea:	2280      	movs	r2, #128	; 0x80
 80119ec:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80119ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f0:	3342      	adds	r3, #66	; 0x42
 80119f2:	2229      	movs	r2, #41	; 0x29
 80119f4:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80119f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f8:	3347      	adds	r3, #71	; 0x47
 80119fa:	2213      	movs	r2, #19
 80119fc:	4970      	ldr	r1, [pc, #448]	; (8011bc0 <f_mkfs+0x734>)
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fc fc4c 	bl	800e29c <mem_cpy>
 8011a04:	e020      	b.n	8011a48 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8011a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a08:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8011a0c:	f7fc fac6 	bl	800df9c <get_fattime>
 8011a10:	4603      	mov	r3, r0
 8011a12:	4619      	mov	r1, r3
 8011a14:	4620      	mov	r0, r4
 8011a16:	f7fc fc15 	bl	800e244 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8011a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a1c:	3316      	adds	r3, #22
 8011a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011a20:	b292      	uxth	r2, r2
 8011a22:	4611      	mov	r1, r2
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fc fbf2 	bl	800e20e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8011a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2c:	3324      	adds	r3, #36	; 0x24
 8011a2e:	2280      	movs	r2, #128	; 0x80
 8011a30:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8011a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a34:	3326      	adds	r3, #38	; 0x26
 8011a36:	2229      	movs	r2, #41	; 0x29
 8011a38:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8011a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a3c:	332b      	adds	r3, #43	; 0x2b
 8011a3e:	2213      	movs	r2, #19
 8011a40:	4960      	ldr	r1, [pc, #384]	; (8011bc4 <f_mkfs+0x738>)
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fc fc2a 	bl	800e29c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8011a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a4e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7fc fbdb 	bl	800e20e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8011a58:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011a62:	f7fc fb5b 	bl	800e11c <disk_write>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d001      	beq.n	8011a70 <f_mkfs+0x5e4>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	e157      	b.n	8011d20 <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8011a70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011a74:	2b03      	cmp	r3, #3
 8011a76:	d140      	bne.n	8011afa <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8011a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a7a:	1d9a      	adds	r2, r3, #6
 8011a7c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011a80:	2301      	movs	r3, #1
 8011a82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011a84:	f7fc fb4a 	bl	800e11c <disk_write>
			mem_set(buf, 0, ss);
 8011a88:	8b7b      	ldrh	r3, [r7, #26]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a90:	f7fc fc25 	bl	800e2de <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8011a94:	494c      	ldr	r1, [pc, #304]	; (8011bc8 <f_mkfs+0x73c>)
 8011a96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011a98:	f7fc fbd4 	bl	800e244 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8011a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011aa2:	494a      	ldr	r1, [pc, #296]	; (8011bcc <f_mkfs+0x740>)
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fc fbcd 	bl	800e244 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aac:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab2:	3b01      	subs	r3, #1
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	4610      	mov	r0, r2
 8011ab8:	f7fc fbc4 	bl	800e244 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8011abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011abe:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011ac2:	2102      	movs	r1, #2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fc fbbd 	bl	800e244 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011acc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ad0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fc fb9a 	bl	800e20e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8011ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011adc:	1dda      	adds	r2, r3, #7
 8011ade:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ae6:	f7fc fb19 	bl	800e11c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8011aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aec:	1c5a      	adds	r2, r3, #1
 8011aee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011af2:	2301      	movs	r3, #1
 8011af4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011af6:	f7fc fb11 	bl	800e11c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8011afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011afc:	2100      	movs	r1, #0
 8011afe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b00:	f7fc fbed 	bl	800e2de <mem_set>
		sect = b_fat;		/* FAT start sector */
 8011b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b06:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011b08:	2300      	movs	r3, #0
 8011b0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b0c:	e04b      	b.n	8011ba6 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 8011b0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011b12:	2b03      	cmp	r3, #3
 8011b14:	d113      	bne.n	8011b3e <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8011b16:	f06f 0107 	mvn.w	r1, #7
 8011b1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b1c:	f7fc fb92 	bl	800e244 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8011b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b22:	3304      	adds	r3, #4
 8011b24:	f04f 31ff 	mov.w	r1, #4294967295
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f7fc fb8b 	bl	800e244 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8011b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b30:	3308      	adds	r3, #8
 8011b32:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fc fb84 	bl	800e244 <st_dword>
 8011b3c:	e00b      	b.n	8011b56 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8011b3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d101      	bne.n	8011b4a <f_mkfs+0x6be>
 8011b46:	4b22      	ldr	r3, [pc, #136]	; (8011bd0 <f_mkfs+0x744>)
 8011b48:	e001      	b.n	8011b4e <f_mkfs+0x6c2>
 8011b4a:	f06f 0307 	mvn.w	r3, #7
 8011b4e:	4619      	mov	r1, r3
 8011b50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b52:	f7fc fb77 	bl	800e244 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8011b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b58:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011b5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	bf28      	it	cs
 8011b62:	4613      	movcs	r3, r2
 8011b64:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011b66:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011b6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011b70:	f7fc fad4 	bl	800e11c <disk_write>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d001      	beq.n	8011b7e <f_mkfs+0x6f2>
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e0d0      	b.n	8011d20 <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 8011b7e:	8b7b      	ldrh	r3, [r7, #26]
 8011b80:	461a      	mov	r2, r3
 8011b82:	2100      	movs	r1, #0
 8011b84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011b86:	f7fc fbaa 	bl	800e2de <mem_set>
				sect += n; nsect -= n;
 8011b8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b8e:	4413      	add	r3, r2
 8011b90:	667b      	str	r3, [r7, #100]	; 0x64
 8011b92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8011b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d1dc      	bne.n	8011b5a <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8011ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011ba6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d3af      	bcc.n	8011b0e <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8011bae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011bb2:	2b03      	cmp	r3, #3
 8011bb4:	d10e      	bne.n	8011bd4 <f_mkfs+0x748>
 8011bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bb8:	e00d      	b.n	8011bd6 <f_mkfs+0x74a>
 8011bba:	bf00      	nop
 8011bbc:	0801a4a0 	.word	0x0801a4a0
 8011bc0:	0801a4ac 	.word	0x0801a4ac
 8011bc4:	0801a4c0 	.word	0x0801a4c0
 8011bc8:	41615252 	.word	0x41615252
 8011bcc:	61417272 	.word	0x61417272
 8011bd0:	00fffff8 	.word	0x00fffff8
 8011bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bd6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8011bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bdc:	4293      	cmp	r3, r2
 8011bde:	bf28      	it	cs
 8011be0:	4613      	movcs	r3, r2
 8011be2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011be4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011bec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011bee:	f7fc fa95 	bl	800e11c <disk_write>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d001      	beq.n	8011bfc <f_mkfs+0x770>
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	e091      	b.n	8011d20 <f_mkfs+0x894>
			sect += n; nsect -= n;
 8011bfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011bfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c00:	4413      	add	r3, r2
 8011c02:	667b      	str	r3, [r7, #100]	; 0x64
 8011c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c08:	1ad3      	subs	r3, r2, r3
 8011c0a:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8011c0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d1e2      	bne.n	8011bd8 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8011c12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011c16:	2b03      	cmp	r3, #3
 8011c18:	d103      	bne.n	8011c22 <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 8011c1a:	230c      	movs	r3, #12
 8011c1c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011c20:	e010      	b.n	8011c44 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c28:	d303      	bcc.n	8011c32 <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8011c2a:	2306      	movs	r3, #6
 8011c2c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8011c30:	e008      	b.n	8011c44 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8011c32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8011c36:	2b02      	cmp	r3, #2
 8011c38:	d101      	bne.n	8011c3e <f_mkfs+0x7b2>
 8011c3a:	2304      	movs	r3, #4
 8011c3c:	e000      	b.n	8011c40 <f_mkfs+0x7b4>
 8011c3e:	2301      	movs	r3, #1
 8011c40:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8011c44:	7afb      	ldrb	r3, [r7, #11]
 8011c46:	f003 0308 	and.w	r3, r3, #8
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d15b      	bne.n	8011d06 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 8011c4e:	8b7b      	ldrh	r3, [r7, #26]
 8011c50:	461a      	mov	r2, r3
 8011c52:	2100      	movs	r1, #0
 8011c54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011c56:	f7fc fb42 	bl	800e2de <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8011c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c5c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c60:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7fc fad2 	bl	800e20e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8011c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011c70:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8011c72:	69fb      	ldr	r3, [r7, #28]
 8011c74:	2200      	movs	r2, #0
 8011c76:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	3302      	adds	r3, #2
 8011c84:	2201      	movs	r2, #1
 8011c86:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	3303      	adds	r3, #3
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	3304      	adds	r3, #4
 8011c94:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8011c98:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8011c9a:	693a      	ldr	r2, [r7, #16]
 8011c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c9e:	441a      	add	r2, r3
 8011ca0:	4b21      	ldr	r3, [pc, #132]	; (8011d28 <f_mkfs+0x89c>)
 8011ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8011ca6:	1ad2      	subs	r2, r2, r3
 8011ca8:	0852      	lsrs	r2, r2, #1
 8011caa:	4413      	add	r3, r2
 8011cac:	0b5b      	lsrs	r3, r3, #13
 8011cae:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8011cb0:	69fb      	ldr	r3, [r7, #28]
 8011cb2:	3305      	adds	r3, #5
 8011cb4:	22fe      	movs	r2, #254	; 0xfe
 8011cb6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cba:	089b      	lsrs	r3, r3, #2
 8011cbc:	b2da      	uxtb	r2, r3
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	3306      	adds	r3, #6
 8011cc2:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8011cc6:	b2d2      	uxtb	r2, r2
 8011cc8:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	3307      	adds	r3, #7
 8011cce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011cd0:	b2d2      	uxtb	r2, r2
 8011cd2:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	3308      	adds	r3, #8
 8011cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fc fab2 	bl	800e244 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	330c      	adds	r3, #12
 8011ce4:	693a      	ldr	r2, [r7, #16]
 8011ce6:	4611      	mov	r1, r2
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7fc faab 	bl	800e244 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8011cee:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8011cf2:	2301      	movs	r3, #1
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011cf8:	f7fc fa10 	bl	800e11c <disk_write>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <f_mkfs+0x87a>
 8011d02:	2301      	movs	r3, #1
 8011d04:	e00c      	b.n	8011d20 <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8011d06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fc fa24 	bl	800e15c <disk_ioctl>
 8011d14:	4603      	mov	r3, r0
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <f_mkfs+0x892>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e000      	b.n	8011d20 <f_mkfs+0x894>

	return FR_OK;
 8011d1e:	2300      	movs	r3, #0
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3774      	adds	r7, #116	; 0x74
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd90      	pop	{r4, r7, pc}
 8011d28:	0515565b 	.word	0x0515565b

08011d2c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b087      	sub	sp, #28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	4613      	mov	r3, r2
 8011d38:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011d42:	4b1f      	ldr	r3, [pc, #124]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d44:	7a5b      	ldrb	r3, [r3, #9]
 8011d46:	b2db      	uxtb	r3, r3
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d131      	bne.n	8011db0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011d4c:	4b1c      	ldr	r3, [pc, #112]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d4e:	7a5b      	ldrb	r3, [r3, #9]
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	461a      	mov	r2, r3
 8011d54:	4b1a      	ldr	r3, [pc, #104]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d56:	2100      	movs	r1, #0
 8011d58:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011d5a:	4b19      	ldr	r3, [pc, #100]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d5c:	7a5b      	ldrb	r3, [r3, #9]
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	4a17      	ldr	r2, [pc, #92]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	4413      	add	r3, r2
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011d6a:	4b15      	ldr	r3, [pc, #84]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d6c:	7a5b      	ldrb	r3, [r3, #9]
 8011d6e:	b2db      	uxtb	r3, r3
 8011d70:	461a      	mov	r2, r3
 8011d72:	4b13      	ldr	r3, [pc, #76]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d74:	4413      	add	r3, r2
 8011d76:	79fa      	ldrb	r2, [r7, #7]
 8011d78:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011d7a:	4b11      	ldr	r3, [pc, #68]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d7c:	7a5b      	ldrb	r3, [r3, #9]
 8011d7e:	b2db      	uxtb	r3, r3
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	b2d1      	uxtb	r1, r2
 8011d84:	4a0e      	ldr	r2, [pc, #56]	; (8011dc0 <FATFS_LinkDriverEx+0x94>)
 8011d86:	7251      	strb	r1, [r2, #9]
 8011d88:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011d8a:	7dbb      	ldrb	r3, [r7, #22]
 8011d8c:	3330      	adds	r3, #48	; 0x30
 8011d8e:	b2da      	uxtb	r2, r3
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	3301      	adds	r3, #1
 8011d98:	223a      	movs	r2, #58	; 0x3a
 8011d9a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	3302      	adds	r3, #2
 8011da0:	222f      	movs	r2, #47	; 0x2f
 8011da2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	3303      	adds	r3, #3
 8011da8:	2200      	movs	r2, #0
 8011daa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011dac:	2300      	movs	r3, #0
 8011dae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	371c      	adds	r7, #28
 8011db6:	46bd      	mov	sp, r7
 8011db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbc:	4770      	bx	lr
 8011dbe:	bf00      	nop
 8011dc0:	200034c0 	.word	0x200034c0

08011dc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b082      	sub	sp, #8
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
 8011dcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011dce:	2200      	movs	r2, #0
 8011dd0:	6839      	ldr	r1, [r7, #0]
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	f7ff ffaa 	bl	8011d2c <FATFS_LinkDriverEx>
 8011dd8:	4603      	mov	r3, r0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	3708      	adds	r7, #8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
	...

08011de4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011de4:	b480      	push	{r7}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	4603      	mov	r3, r0
 8011dec:	6039      	str	r1, [r7, #0]
 8011dee:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011df0:	88fb      	ldrh	r3, [r7, #6]
 8011df2:	2b7f      	cmp	r3, #127	; 0x7f
 8011df4:	d802      	bhi.n	8011dfc <ff_convert+0x18>
		c = chr;
 8011df6:	88fb      	ldrh	r3, [r7, #6]
 8011df8:	81fb      	strh	r3, [r7, #14]
 8011dfa:	e025      	b.n	8011e48 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00b      	beq.n	8011e1a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011e02:	88fb      	ldrh	r3, [r7, #6]
 8011e04:	2bff      	cmp	r3, #255	; 0xff
 8011e06:	d805      	bhi.n	8011e14 <ff_convert+0x30>
 8011e08:	88fb      	ldrh	r3, [r7, #6]
 8011e0a:	3b80      	subs	r3, #128	; 0x80
 8011e0c:	4a12      	ldr	r2, [pc, #72]	; (8011e58 <ff_convert+0x74>)
 8011e0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e12:	e000      	b.n	8011e16 <ff_convert+0x32>
 8011e14:	2300      	movs	r3, #0
 8011e16:	81fb      	strh	r3, [r7, #14]
 8011e18:	e016      	b.n	8011e48 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	81fb      	strh	r3, [r7, #14]
 8011e1e:	e009      	b.n	8011e34 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011e20:	89fb      	ldrh	r3, [r7, #14]
 8011e22:	4a0d      	ldr	r2, [pc, #52]	; (8011e58 <ff_convert+0x74>)
 8011e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e28:	88fa      	ldrh	r2, [r7, #6]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d006      	beq.n	8011e3c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011e2e:	89fb      	ldrh	r3, [r7, #14]
 8011e30:	3301      	adds	r3, #1
 8011e32:	81fb      	strh	r3, [r7, #14]
 8011e34:	89fb      	ldrh	r3, [r7, #14]
 8011e36:	2b7f      	cmp	r3, #127	; 0x7f
 8011e38:	d9f2      	bls.n	8011e20 <ff_convert+0x3c>
 8011e3a:	e000      	b.n	8011e3e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011e3c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011e3e:	89fb      	ldrh	r3, [r7, #14]
 8011e40:	3380      	adds	r3, #128	; 0x80
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011e48:	89fb      	ldrh	r3, [r7, #14]
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop
 8011e58:	0801a5b8 	.word	0x0801a5b8

08011e5c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b087      	sub	sp, #28
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	4603      	mov	r3, r0
 8011e64:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011e66:	88fb      	ldrh	r3, [r7, #6]
 8011e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e6c:	d201      	bcs.n	8011e72 <ff_wtoupper+0x16>
 8011e6e:	4b3e      	ldr	r3, [pc, #248]	; (8011f68 <ff_wtoupper+0x10c>)
 8011e70:	e000      	b.n	8011e74 <ff_wtoupper+0x18>
 8011e72:	4b3e      	ldr	r3, [pc, #248]	; (8011f6c <ff_wtoupper+0x110>)
 8011e74:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	1c9a      	adds	r2, r3, #2
 8011e7a:	617a      	str	r2, [r7, #20]
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011e80:	8a7b      	ldrh	r3, [r7, #18]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d068      	beq.n	8011f58 <ff_wtoupper+0xfc>
 8011e86:	88fa      	ldrh	r2, [r7, #6]
 8011e88:	8a7b      	ldrh	r3, [r7, #18]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d364      	bcc.n	8011f58 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	1c9a      	adds	r2, r3, #2
 8011e92:	617a      	str	r2, [r7, #20]
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	823b      	strh	r3, [r7, #16]
 8011e98:	8a3b      	ldrh	r3, [r7, #16]
 8011e9a:	0a1b      	lsrs	r3, r3, #8
 8011e9c:	81fb      	strh	r3, [r7, #14]
 8011e9e:	8a3b      	ldrh	r3, [r7, #16]
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011ea4:	88fa      	ldrh	r2, [r7, #6]
 8011ea6:	8a79      	ldrh	r1, [r7, #18]
 8011ea8:	8a3b      	ldrh	r3, [r7, #16]
 8011eaa:	440b      	add	r3, r1
 8011eac:	429a      	cmp	r2, r3
 8011eae:	da49      	bge.n	8011f44 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011eb0:	89fb      	ldrh	r3, [r7, #14]
 8011eb2:	2b08      	cmp	r3, #8
 8011eb4:	d84f      	bhi.n	8011f56 <ff_wtoupper+0xfa>
 8011eb6:	a201      	add	r2, pc, #4	; (adr r2, 8011ebc <ff_wtoupper+0x60>)
 8011eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ebc:	08011ee1 	.word	0x08011ee1
 8011ec0:	08011ef3 	.word	0x08011ef3
 8011ec4:	08011f09 	.word	0x08011f09
 8011ec8:	08011f11 	.word	0x08011f11
 8011ecc:	08011f19 	.word	0x08011f19
 8011ed0:	08011f21 	.word	0x08011f21
 8011ed4:	08011f29 	.word	0x08011f29
 8011ed8:	08011f31 	.word	0x08011f31
 8011edc:	08011f39 	.word	0x08011f39
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011ee0:	88fa      	ldrh	r2, [r7, #6]
 8011ee2:	8a7b      	ldrh	r3, [r7, #18]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	005b      	lsls	r3, r3, #1
 8011ee8:	697a      	ldr	r2, [r7, #20]
 8011eea:	4413      	add	r3, r2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	80fb      	strh	r3, [r7, #6]
 8011ef0:	e027      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011ef2:	88fa      	ldrh	r2, [r7, #6]
 8011ef4:	8a7b      	ldrh	r3, [r7, #18]
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	f003 0301 	and.w	r3, r3, #1
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	88fa      	ldrh	r2, [r7, #6]
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	80fb      	strh	r3, [r7, #6]
 8011f06:	e01c      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011f08:	88fb      	ldrh	r3, [r7, #6]
 8011f0a:	3b10      	subs	r3, #16
 8011f0c:	80fb      	strh	r3, [r7, #6]
 8011f0e:	e018      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011f10:	88fb      	ldrh	r3, [r7, #6]
 8011f12:	3b20      	subs	r3, #32
 8011f14:	80fb      	strh	r3, [r7, #6]
 8011f16:	e014      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011f18:	88fb      	ldrh	r3, [r7, #6]
 8011f1a:	3b30      	subs	r3, #48	; 0x30
 8011f1c:	80fb      	strh	r3, [r7, #6]
 8011f1e:	e010      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011f20:	88fb      	ldrh	r3, [r7, #6]
 8011f22:	3b1a      	subs	r3, #26
 8011f24:	80fb      	strh	r3, [r7, #6]
 8011f26:	e00c      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011f28:	88fb      	ldrh	r3, [r7, #6]
 8011f2a:	3308      	adds	r3, #8
 8011f2c:	80fb      	strh	r3, [r7, #6]
 8011f2e:	e008      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011f30:	88fb      	ldrh	r3, [r7, #6]
 8011f32:	3b50      	subs	r3, #80	; 0x50
 8011f34:	80fb      	strh	r3, [r7, #6]
 8011f36:	e004      	b.n	8011f42 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011f38:	88fb      	ldrh	r3, [r7, #6]
 8011f3a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011f3e:	80fb      	strh	r3, [r7, #6]
 8011f40:	bf00      	nop
			}
			break;
 8011f42:	e008      	b.n	8011f56 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011f44:	89fb      	ldrh	r3, [r7, #14]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d195      	bne.n	8011e76 <ff_wtoupper+0x1a>
 8011f4a:	8a3b      	ldrh	r3, [r7, #16]
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	697a      	ldr	r2, [r7, #20]
 8011f50:	4413      	add	r3, r2
 8011f52:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011f54:	e78f      	b.n	8011e76 <ff_wtoupper+0x1a>
			break;
 8011f56:	bf00      	nop
	}

	return chr;
 8011f58:	88fb      	ldrh	r3, [r7, #6]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	371c      	adds	r7, #28
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	0801a6b8 	.word	0x0801a6b8
 8011f6c:	0801a8ac 	.word	0x0801a8ac

08011f70 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	4603      	mov	r3, r0
 8011f78:	6039      	str	r1, [r7, #0]
 8011f7a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	60fb      	str	r3, [r7, #12]
 8011f80:	2300      	movs	r3, #0
 8011f82:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8011f84:	f107 030c 	add.w	r3, r7, #12
 8011f88:	2101      	movs	r1, #1
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f000 f84e 	bl	801202c <osSemaphoreCreate>
 8011f90:	4602      	mov	r2, r0
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	bf14      	ite	ne
 8011f9e:	2301      	movne	r3, #1
 8011fa0:	2300      	moveq	r3, #0
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	617b      	str	r3, [r7, #20]

    return ret;
 8011fa6:	697b      	ldr	r3, [r7, #20]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3718      	adds	r7, #24
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f000 f8ed 	bl	8012198 <osSemaphoreDelete>
#endif
    return 1;
 8011fbe:	2301      	movs	r3, #1
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b084      	sub	sp, #16
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8011fd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011fd8:	6878      	ldr	r0, [r7, #4]
 8011fda:	f000 f859 	bl	8012090 <osSemaphoreWait>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d101      	bne.n	8011fe8 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011fe8:	68fb      	ldr	r3, [r7, #12]
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	3710      	adds	r7, #16
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	bd80      	pop	{r7, pc}

08011ff2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011ff2:	b580      	push	{r7, lr}
 8011ff4:	b082      	sub	sp, #8
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 f896 	bl	801212c <osSemaphoreRelease>
#endif
}
 8012000:	bf00      	nop
 8012002:	3708      	adds	r7, #8
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}

08012008 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801200e:	f3ef 8305 	mrs	r3, IPSR
 8012012:	607b      	str	r3, [r7, #4]
  return(result);
 8012014:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8012016:	2b00      	cmp	r3, #0
 8012018:	bf14      	ite	ne
 801201a:	2301      	movne	r3, #1
 801201c:	2300      	moveq	r3, #0
 801201e:	b2db      	uxtb	r3, r3
}
 8012020:	4618      	mov	r0, r3
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801202c:	b580      	push	{r7, lr}
 801202e:	b086      	sub	sp, #24
 8012030:	af02      	add	r7, sp, #8
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d00f      	beq.n	801205e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	2b01      	cmp	r3, #1
 8012042:	d10a      	bne.n	801205a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	2203      	movs	r2, #3
 801204a:	9200      	str	r2, [sp, #0]
 801204c:	2200      	movs	r2, #0
 801204e:	2100      	movs	r1, #0
 8012050:	2001      	movs	r0, #1
 8012052:	f000 f9d1 	bl	80123f8 <xQueueGenericCreateStatic>
 8012056:	4603      	mov	r3, r0
 8012058:	e016      	b.n	8012088 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801205a:	2300      	movs	r3, #0
 801205c:	e014      	b.n	8012088 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	2b01      	cmp	r3, #1
 8012062:	d110      	bne.n	8012086 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8012064:	2203      	movs	r2, #3
 8012066:	2100      	movs	r1, #0
 8012068:	2001      	movs	r0, #1
 801206a:	f000 fa3d 	bl	80124e8 <xQueueGenericCreate>
 801206e:	60f8      	str	r0, [r7, #12]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d005      	beq.n	8012082 <osSemaphoreCreate+0x56>
 8012076:	2300      	movs	r3, #0
 8012078:	2200      	movs	r2, #0
 801207a:	2100      	movs	r1, #0
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f000 fabf 	bl	8012600 <xQueueGenericSend>
      return sema;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	e000      	b.n	8012088 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012086:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
 8012098:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801209a:	2300      	movs	r3, #0
 801209c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d101      	bne.n	80120a8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80120a4:	2380      	movs	r3, #128	; 0x80
 80120a6:	e03a      	b.n	801211e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80120a8:	2300      	movs	r3, #0
 80120aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80120ac:	683b      	ldr	r3, [r7, #0]
 80120ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120b2:	d103      	bne.n	80120bc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80120b4:	f04f 33ff 	mov.w	r3, #4294967295
 80120b8:	60fb      	str	r3, [r7, #12]
 80120ba:	e009      	b.n	80120d0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d006      	beq.n	80120d0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d101      	bne.n	80120d0 <osSemaphoreWait+0x40>
      ticks = 1;
 80120cc:	2301      	movs	r3, #1
 80120ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80120d0:	f7ff ff9a 	bl	8012008 <inHandlerMode>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d017      	beq.n	801210a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80120da:	f107 0308 	add.w	r3, r7, #8
 80120de:	461a      	mov	r2, r3
 80120e0:	2100      	movs	r1, #0
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 fd24 	bl	8012b30 <xQueueReceiveFromISR>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d001      	beq.n	80120f2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80120ee:	23ff      	movs	r3, #255	; 0xff
 80120f0:	e015      	b.n	801211e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d011      	beq.n	801211c <osSemaphoreWait+0x8c>
 80120f8:	4b0b      	ldr	r3, [pc, #44]	; (8012128 <osSemaphoreWait+0x98>)
 80120fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120fe:	601a      	str	r2, [r3, #0]
 8012100:	f3bf 8f4f 	dsb	sy
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	e008      	b.n	801211c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801210a:	68f9      	ldr	r1, [r7, #12]
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 fc03 	bl	8012918 <xQueueSemaphoreTake>
 8012112:	4603      	mov	r3, r0
 8012114:	2b01      	cmp	r3, #1
 8012116:	d001      	beq.n	801211c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012118:	23ff      	movs	r3, #255	; 0xff
 801211a:	e000      	b.n	801211e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 801211c:	2300      	movs	r3, #0
}
 801211e:	4618      	mov	r0, r3
 8012120:	3710      	adds	r7, #16
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	e000ed04 	.word	0xe000ed04

0801212c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b084      	sub	sp, #16
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012134:	2300      	movs	r3, #0
 8012136:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012138:	2300      	movs	r3, #0
 801213a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801213c:	f7ff ff64 	bl	8012008 <inHandlerMode>
 8012140:	4603      	mov	r3, r0
 8012142:	2b00      	cmp	r3, #0
 8012144:	d016      	beq.n	8012174 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012146:	f107 0308 	add.w	r3, r7, #8
 801214a:	4619      	mov	r1, r3
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f000 fb55 	bl	80127fc <xQueueGiveFromISR>
 8012152:	4603      	mov	r3, r0
 8012154:	2b01      	cmp	r3, #1
 8012156:	d001      	beq.n	801215c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8012158:	23ff      	movs	r3, #255	; 0xff
 801215a:	e017      	b.n	801218c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801215c:	68bb      	ldr	r3, [r7, #8]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d013      	beq.n	801218a <osSemaphoreRelease+0x5e>
 8012162:	4b0c      	ldr	r3, [pc, #48]	; (8012194 <osSemaphoreRelease+0x68>)
 8012164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012168:	601a      	str	r2, [r3, #0]
 801216a:	f3bf 8f4f 	dsb	sy
 801216e:	f3bf 8f6f 	isb	sy
 8012172:	e00a      	b.n	801218a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012174:	2300      	movs	r3, #0
 8012176:	2200      	movs	r2, #0
 8012178:	2100      	movs	r1, #0
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fa40 	bl	8012600 <xQueueGenericSend>
 8012180:	4603      	mov	r3, r0
 8012182:	2b01      	cmp	r3, #1
 8012184:	d001      	beq.n	801218a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012186:	23ff      	movs	r3, #255	; 0xff
 8012188:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801218a:	68fb      	ldr	r3, [r7, #12]
}
 801218c:	4618      	mov	r0, r3
 801218e:	3710      	adds	r7, #16
 8012190:	46bd      	mov	sp, r7
 8012192:	bd80      	pop	{r7, pc}
 8012194:	e000ed04 	.word	0xe000ed04

08012198 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80121a0:	f7ff ff32 	bl	8012008 <inHandlerMode>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d001      	beq.n	80121ae <osSemaphoreDelete+0x16>
    return osErrorISR;
 80121aa:	2382      	movs	r3, #130	; 0x82
 80121ac:	e003      	b.n	80121b6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f000 fd3e 	bl	8012c30 <vQueueDelete>

  return osOK; 
 80121b4:	2300      	movs	r3, #0
}
 80121b6:	4618      	mov	r0, r3
 80121b8:	3708      	adds	r7, #8
 80121ba:	46bd      	mov	sp, r7
 80121bc:	bd80      	pop	{r7, pc}

080121be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80121be:	b480      	push	{r7}
 80121c0:	b083      	sub	sp, #12
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f103 0208 	add.w	r2, r3, #8
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f04f 32ff 	mov.w	r2, #4294967295
 80121d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f103 0208 	add.w	r2, r3, #8
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f103 0208 	add.w	r2, r3, #8
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2200      	movs	r2, #0
 80121f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80121f2:	bf00      	nop
 80121f4:	370c      	adds	r7, #12
 80121f6:	46bd      	mov	sp, r7
 80121f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121fc:	4770      	bx	lr

080121fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80121fe:	b480      	push	{r7}
 8012200:	b083      	sub	sp, #12
 8012202:	af00      	add	r7, sp, #0
 8012204:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2200      	movs	r2, #0
 801220a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801220c:	bf00      	nop
 801220e:	370c      	adds	r7, #12
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012218:	b480      	push	{r7}
 801221a:	b085      	sub	sp, #20
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	68fa      	ldr	r2, [r7, #12]
 801222c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	689a      	ldr	r2, [r3, #8]
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	689b      	ldr	r3, [r3, #8]
 801223a:	683a      	ldr	r2, [r7, #0]
 801223c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	683a      	ldr	r2, [r7, #0]
 8012242:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	687a      	ldr	r2, [r7, #4]
 8012248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	1c5a      	adds	r2, r3, #1
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	601a      	str	r2, [r3, #0]
}
 8012254:	bf00      	nop
 8012256:	3714      	adds	r7, #20
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012260:	b480      	push	{r7}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801226a:	683b      	ldr	r3, [r7, #0]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012270:	68bb      	ldr	r3, [r7, #8]
 8012272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012276:	d103      	bne.n	8012280 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	691b      	ldr	r3, [r3, #16]
 801227c:	60fb      	str	r3, [r7, #12]
 801227e:	e00c      	b.n	801229a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	3308      	adds	r3, #8
 8012284:	60fb      	str	r3, [r7, #12]
 8012286:	e002      	b.n	801228e <vListInsert+0x2e>
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	685b      	ldr	r3, [r3, #4]
 801228c:	60fb      	str	r3, [r7, #12]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	429a      	cmp	r2, r3
 8012298:	d2f6      	bcs.n	8012288 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	685a      	ldr	r2, [r3, #4]
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	683a      	ldr	r2, [r7, #0]
 80122a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	68fa      	ldr	r2, [r7, #12]
 80122ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	683a      	ldr	r2, [r7, #0]
 80122b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	1c5a      	adds	r2, r3, #1
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	601a      	str	r2, [r3, #0]
}
 80122c6:	bf00      	nop
 80122c8:	3714      	adds	r7, #20
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr

080122d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80122d2:	b480      	push	{r7}
 80122d4:	b085      	sub	sp, #20
 80122d6:	af00      	add	r7, sp, #0
 80122d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	691b      	ldr	r3, [r3, #16]
 80122de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	685b      	ldr	r3, [r3, #4]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	6892      	ldr	r2, [r2, #8]
 80122e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	689b      	ldr	r3, [r3, #8]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	6852      	ldr	r2, [r2, #4]
 80122f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d103      	bne.n	8012306 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	689a      	ldr	r2, [r3, #8]
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2200      	movs	r2, #0
 801230a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	1e5a      	subs	r2, r3, #1
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
}
 801231a:	4618      	mov	r0, r3
 801231c:	3714      	adds	r7, #20
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr
	...

08012328 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d10a      	bne.n	8012352 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801233c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012340:	f383 8811 	msr	BASEPRI, r3
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801234e:	bf00      	nop
 8012350:	e7fe      	b.n	8012350 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012352:	f002 f83f 	bl	80143d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	681a      	ldr	r2, [r3, #0]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801235e:	68f9      	ldr	r1, [r7, #12]
 8012360:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012362:	fb01 f303 	mul.w	r3, r1, r3
 8012366:	441a      	add	r2, r3
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2200      	movs	r2, #0
 8012370:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681a      	ldr	r2, [r3, #0]
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012382:	3b01      	subs	r3, #1
 8012384:	68f9      	ldr	r1, [r7, #12]
 8012386:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012388:	fb01 f303 	mul.w	r3, r1, r3
 801238c:	441a      	add	r2, r3
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	22ff      	movs	r2, #255	; 0xff
 8012396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	22ff      	movs	r2, #255	; 0xff
 801239e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80123a2:	683b      	ldr	r3, [r7, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d114      	bne.n	80123d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d01a      	beq.n	80123e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	3310      	adds	r3, #16
 80123b4:	4618      	mov	r0, r3
 80123b6:	f001 f9f1 	bl	801379c <xTaskRemoveFromEventList>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d012      	beq.n	80123e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80123c0:	4b0c      	ldr	r3, [pc, #48]	; (80123f4 <xQueueGenericReset+0xcc>)
 80123c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123c6:	601a      	str	r2, [r3, #0]
 80123c8:	f3bf 8f4f 	dsb	sy
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	e009      	b.n	80123e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	3310      	adds	r3, #16
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7ff fef1 	bl	80121be <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	3324      	adds	r3, #36	; 0x24
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7ff feec 	bl	80121be <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80123e6:	f002 f825 	bl	8014434 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80123ea:	2301      	movs	r3, #1
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3710      	adds	r7, #16
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}
 80123f4:	e000ed04 	.word	0xe000ed04

080123f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b08e      	sub	sp, #56	; 0x38
 80123fc:	af02      	add	r7, sp, #8
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	607a      	str	r2, [r7, #4]
 8012404:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d10a      	bne.n	8012422 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012410:	f383 8811 	msr	BASEPRI, r3
 8012414:	f3bf 8f6f 	isb	sy
 8012418:	f3bf 8f4f 	dsb	sy
 801241c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801241e:	bf00      	nop
 8012420:	e7fe      	b.n	8012420 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d10a      	bne.n	801243e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242c:	f383 8811 	msr	BASEPRI, r3
 8012430:	f3bf 8f6f 	isb	sy
 8012434:	f3bf 8f4f 	dsb	sy
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
}
 801243a:	bf00      	nop
 801243c:	e7fe      	b.n	801243c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d002      	beq.n	801244a <xQueueGenericCreateStatic+0x52>
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d001      	beq.n	801244e <xQueueGenericCreateStatic+0x56>
 801244a:	2301      	movs	r3, #1
 801244c:	e000      	b.n	8012450 <xQueueGenericCreateStatic+0x58>
 801244e:	2300      	movs	r3, #0
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10a      	bne.n	801246a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	623b      	str	r3, [r7, #32]
}
 8012466:	bf00      	nop
 8012468:	e7fe      	b.n	8012468 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d102      	bne.n	8012476 <xQueueGenericCreateStatic+0x7e>
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <xQueueGenericCreateStatic+0x82>
 8012476:	2301      	movs	r3, #1
 8012478:	e000      	b.n	801247c <xQueueGenericCreateStatic+0x84>
 801247a:	2300      	movs	r3, #0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d10a      	bne.n	8012496 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012484:	f383 8811 	msr	BASEPRI, r3
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	f3bf 8f4f 	dsb	sy
 8012490:	61fb      	str	r3, [r7, #28]
}
 8012492:	bf00      	nop
 8012494:	e7fe      	b.n	8012494 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012496:	2348      	movs	r3, #72	; 0x48
 8012498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	2b48      	cmp	r3, #72	; 0x48
 801249e:	d00a      	beq.n	80124b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80124a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a4:	f383 8811 	msr	BASEPRI, r3
 80124a8:	f3bf 8f6f 	isb	sy
 80124ac:	f3bf 8f4f 	dsb	sy
 80124b0:	61bb      	str	r3, [r7, #24]
}
 80124b2:	bf00      	nop
 80124b4:	e7fe      	b.n	80124b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80124b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80124bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00d      	beq.n	80124de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80124c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124c4:	2201      	movs	r2, #1
 80124c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80124ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80124ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d0:	9300      	str	r3, [sp, #0]
 80124d2:	4613      	mov	r3, r2
 80124d4:	687a      	ldr	r2, [r7, #4]
 80124d6:	68b9      	ldr	r1, [r7, #8]
 80124d8:	68f8      	ldr	r0, [r7, #12]
 80124da:	f000 f83f 	bl	801255c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80124de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3730      	adds	r7, #48	; 0x30
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b08a      	sub	sp, #40	; 0x28
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	4613      	mov	r3, r2
 80124f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d10a      	bne.n	8012512 <xQueueGenericCreate+0x2a>
	__asm volatile
 80124fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012500:	f383 8811 	msr	BASEPRI, r3
 8012504:	f3bf 8f6f 	isb	sy
 8012508:	f3bf 8f4f 	dsb	sy
 801250c:	613b      	str	r3, [r7, #16]
}
 801250e:	bf00      	nop
 8012510:	e7fe      	b.n	8012510 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	68ba      	ldr	r2, [r7, #8]
 8012516:	fb02 f303 	mul.w	r3, r2, r3
 801251a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801251c:	69fb      	ldr	r3, [r7, #28]
 801251e:	3348      	adds	r3, #72	; 0x48
 8012520:	4618      	mov	r0, r3
 8012522:	f002 f879 	bl	8014618 <pvPortMalloc>
 8012526:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d011      	beq.n	8012552 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	3348      	adds	r3, #72	; 0x48
 8012536:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	2200      	movs	r2, #0
 801253c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012540:	79fa      	ldrb	r2, [r7, #7]
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	4613      	mov	r3, r2
 8012548:	697a      	ldr	r2, [r7, #20]
 801254a:	68b9      	ldr	r1, [r7, #8]
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f000 f805 	bl	801255c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012552:	69bb      	ldr	r3, [r7, #24]
	}
 8012554:	4618      	mov	r0, r3
 8012556:	3720      	adds	r7, #32
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	607a      	str	r2, [r7, #4]
 8012568:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d103      	bne.n	8012578 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	69ba      	ldr	r2, [r7, #24]
 8012574:	601a      	str	r2, [r3, #0]
 8012576:	e002      	b.n	801257e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	68ba      	ldr	r2, [r7, #8]
 8012588:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801258a:	2101      	movs	r1, #1
 801258c:	69b8      	ldr	r0, [r7, #24]
 801258e:	f7ff fecb 	bl	8012328 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012592:	bf00      	nop
 8012594:	3710      	adds	r7, #16
 8012596:	46bd      	mov	sp, r7
 8012598:	bd80      	pop	{r7, pc}

0801259a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801259a:	b580      	push	{r7, lr}
 801259c:	b082      	sub	sp, #8
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00e      	beq.n	80125c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2200      	movs	r2, #0
 80125b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2200      	movs	r2, #0
 80125b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80125ba:	2300      	movs	r3, #0
 80125bc:	2200      	movs	r2, #0
 80125be:	2100      	movs	r1, #0
 80125c0:	6878      	ldr	r0, [r7, #4]
 80125c2:	f000 f81d 	bl	8012600 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80125c6:	bf00      	nop
 80125c8:	3708      	adds	r7, #8
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}

080125ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80125ce:	b580      	push	{r7, lr}
 80125d0:	b086      	sub	sp, #24
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	4603      	mov	r3, r0
 80125d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80125d8:	2301      	movs	r3, #1
 80125da:	617b      	str	r3, [r7, #20]
 80125dc:	2300      	movs	r3, #0
 80125de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80125e0:	79fb      	ldrb	r3, [r7, #7]
 80125e2:	461a      	mov	r2, r3
 80125e4:	6939      	ldr	r1, [r7, #16]
 80125e6:	6978      	ldr	r0, [r7, #20]
 80125e8:	f7ff ff7e 	bl	80124e8 <xQueueGenericCreate>
 80125ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80125ee:	68f8      	ldr	r0, [r7, #12]
 80125f0:	f7ff ffd3 	bl	801259a <prvInitialiseMutex>

		return xNewQueue;
 80125f4:	68fb      	ldr	r3, [r7, #12]
	}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3718      	adds	r7, #24
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
	...

08012600 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b08e      	sub	sp, #56	; 0x38
 8012604:	af00      	add	r7, sp, #0
 8012606:	60f8      	str	r0, [r7, #12]
 8012608:	60b9      	str	r1, [r7, #8]
 801260a:	607a      	str	r2, [r7, #4]
 801260c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801260e:	2300      	movs	r3, #0
 8012610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012618:	2b00      	cmp	r3, #0
 801261a:	d10a      	bne.n	8012632 <xQueueGenericSend+0x32>
	__asm volatile
 801261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012620:	f383 8811 	msr	BASEPRI, r3
 8012624:	f3bf 8f6f 	isb	sy
 8012628:	f3bf 8f4f 	dsb	sy
 801262c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801262e:	bf00      	nop
 8012630:	e7fe      	b.n	8012630 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012632:	68bb      	ldr	r3, [r7, #8]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d103      	bne.n	8012640 <xQueueGenericSend+0x40>
 8012638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801263c:	2b00      	cmp	r3, #0
 801263e:	d101      	bne.n	8012644 <xQueueGenericSend+0x44>
 8012640:	2301      	movs	r3, #1
 8012642:	e000      	b.n	8012646 <xQueueGenericSend+0x46>
 8012644:	2300      	movs	r3, #0
 8012646:	2b00      	cmp	r3, #0
 8012648:	d10a      	bne.n	8012660 <xQueueGenericSend+0x60>
	__asm volatile
 801264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801264e:	f383 8811 	msr	BASEPRI, r3
 8012652:	f3bf 8f6f 	isb	sy
 8012656:	f3bf 8f4f 	dsb	sy
 801265a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801265c:	bf00      	nop
 801265e:	e7fe      	b.n	801265e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	2b02      	cmp	r3, #2
 8012664:	d103      	bne.n	801266e <xQueueGenericSend+0x6e>
 8012666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801266a:	2b01      	cmp	r3, #1
 801266c:	d101      	bne.n	8012672 <xQueueGenericSend+0x72>
 801266e:	2301      	movs	r3, #1
 8012670:	e000      	b.n	8012674 <xQueueGenericSend+0x74>
 8012672:	2300      	movs	r3, #0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d10a      	bne.n	801268e <xQueueGenericSend+0x8e>
	__asm volatile
 8012678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801267c:	f383 8811 	msr	BASEPRI, r3
 8012680:	f3bf 8f6f 	isb	sy
 8012684:	f3bf 8f4f 	dsb	sy
 8012688:	623b      	str	r3, [r7, #32]
}
 801268a:	bf00      	nop
 801268c:	e7fe      	b.n	801268c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801268e:	f001 fa45 	bl	8013b1c <xTaskGetSchedulerState>
 8012692:	4603      	mov	r3, r0
 8012694:	2b00      	cmp	r3, #0
 8012696:	d102      	bne.n	801269e <xQueueGenericSend+0x9e>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d101      	bne.n	80126a2 <xQueueGenericSend+0xa2>
 801269e:	2301      	movs	r3, #1
 80126a0:	e000      	b.n	80126a4 <xQueueGenericSend+0xa4>
 80126a2:	2300      	movs	r3, #0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d10a      	bne.n	80126be <xQueueGenericSend+0xbe>
	__asm volatile
 80126a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ac:	f383 8811 	msr	BASEPRI, r3
 80126b0:	f3bf 8f6f 	isb	sy
 80126b4:	f3bf 8f4f 	dsb	sy
 80126b8:	61fb      	str	r3, [r7, #28]
}
 80126ba:	bf00      	nop
 80126bc:	e7fe      	b.n	80126bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126be:	f001 fe89 	bl	80143d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d302      	bcc.n	80126d4 <xQueueGenericSend+0xd4>
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	2b02      	cmp	r3, #2
 80126d2:	d129      	bne.n	8012728 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126d4:	683a      	ldr	r2, [r7, #0]
 80126d6:	68b9      	ldr	r1, [r7, #8]
 80126d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126da:	f000 fae4 	bl	8012ca6 <prvCopyDataToQueue>
 80126de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d010      	beq.n	801270a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ea:	3324      	adds	r3, #36	; 0x24
 80126ec:	4618      	mov	r0, r3
 80126ee:	f001 f855 	bl	801379c <xTaskRemoveFromEventList>
 80126f2:	4603      	mov	r3, r0
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d013      	beq.n	8012720 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80126f8:	4b3f      	ldr	r3, [pc, #252]	; (80127f8 <xQueueGenericSend+0x1f8>)
 80126fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126fe:	601a      	str	r2, [r3, #0]
 8012700:	f3bf 8f4f 	dsb	sy
 8012704:	f3bf 8f6f 	isb	sy
 8012708:	e00a      	b.n	8012720 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	2b00      	cmp	r3, #0
 801270e:	d007      	beq.n	8012720 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012710:	4b39      	ldr	r3, [pc, #228]	; (80127f8 <xQueueGenericSend+0x1f8>)
 8012712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	f3bf 8f4f 	dsb	sy
 801271c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012720:	f001 fe88 	bl	8014434 <vPortExitCritical>
				return pdPASS;
 8012724:	2301      	movs	r3, #1
 8012726:	e063      	b.n	80127f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d103      	bne.n	8012736 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801272e:	f001 fe81 	bl	8014434 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012732:	2300      	movs	r3, #0
 8012734:	e05c      	b.n	80127f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012738:	2b00      	cmp	r3, #0
 801273a:	d106      	bne.n	801274a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801273c:	f107 0314 	add.w	r3, r7, #20
 8012740:	4618      	mov	r0, r3
 8012742:	f001 f88d 	bl	8013860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012746:	2301      	movs	r3, #1
 8012748:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801274a:	f001 fe73 	bl	8014434 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801274e:	f000 fe2d 	bl	80133ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012752:	f001 fe3f 	bl	80143d4 <vPortEnterCritical>
 8012756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801275c:	b25b      	sxtb	r3, r3
 801275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012762:	d103      	bne.n	801276c <xQueueGenericSend+0x16c>
 8012764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012766:	2200      	movs	r2, #0
 8012768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012772:	b25b      	sxtb	r3, r3
 8012774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012778:	d103      	bne.n	8012782 <xQueueGenericSend+0x182>
 801277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277c:	2200      	movs	r2, #0
 801277e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012782:	f001 fe57 	bl	8014434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012786:	1d3a      	adds	r2, r7, #4
 8012788:	f107 0314 	add.w	r3, r7, #20
 801278c:	4611      	mov	r1, r2
 801278e:	4618      	mov	r0, r3
 8012790:	f001 f87c 	bl	801388c <xTaskCheckForTimeOut>
 8012794:	4603      	mov	r3, r0
 8012796:	2b00      	cmp	r3, #0
 8012798:	d124      	bne.n	80127e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801279a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801279c:	f000 fb7b 	bl	8012e96 <prvIsQueueFull>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d018      	beq.n	80127d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80127a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a8:	3310      	adds	r3, #16
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	4611      	mov	r1, r2
 80127ae:	4618      	mov	r0, r3
 80127b0:	f000 ffd0 	bl	8013754 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80127b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127b6:	f000 fb06 	bl	8012dc6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80127ba:	f000 fe05 	bl	80133c8 <xTaskResumeAll>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f47f af7c 	bne.w	80126be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80127c6:	4b0c      	ldr	r3, [pc, #48]	; (80127f8 <xQueueGenericSend+0x1f8>)
 80127c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127cc:	601a      	str	r2, [r3, #0]
 80127ce:	f3bf 8f4f 	dsb	sy
 80127d2:	f3bf 8f6f 	isb	sy
 80127d6:	e772      	b.n	80126be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80127d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127da:	f000 faf4 	bl	8012dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80127de:	f000 fdf3 	bl	80133c8 <xTaskResumeAll>
 80127e2:	e76c      	b.n	80126be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80127e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127e6:	f000 faee 	bl	8012dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127ea:	f000 fded 	bl	80133c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80127ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3738      	adds	r7, #56	; 0x38
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	e000ed04 	.word	0xe000ed04

080127fc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b08e      	sub	sp, #56	; 0x38
 8012800:	af00      	add	r7, sp, #0
 8012802:	6078      	str	r0, [r7, #4]
 8012804:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280c:	2b00      	cmp	r3, #0
 801280e:	d10a      	bne.n	8012826 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012814:	f383 8811 	msr	BASEPRI, r3
 8012818:	f3bf 8f6f 	isb	sy
 801281c:	f3bf 8f4f 	dsb	sy
 8012820:	623b      	str	r3, [r7, #32]
}
 8012822:	bf00      	nop
 8012824:	e7fe      	b.n	8012824 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801282a:	2b00      	cmp	r3, #0
 801282c:	d00a      	beq.n	8012844 <xQueueGiveFromISR+0x48>
	__asm volatile
 801282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012832:	f383 8811 	msr	BASEPRI, r3
 8012836:	f3bf 8f6f 	isb	sy
 801283a:	f3bf 8f4f 	dsb	sy
 801283e:	61fb      	str	r3, [r7, #28]
}
 8012840:	bf00      	nop
 8012842:	e7fe      	b.n	8012842 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d103      	bne.n	8012854 <xQueueGiveFromISR+0x58>
 801284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284e:	689b      	ldr	r3, [r3, #8]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d101      	bne.n	8012858 <xQueueGiveFromISR+0x5c>
 8012854:	2301      	movs	r3, #1
 8012856:	e000      	b.n	801285a <xQueueGiveFromISR+0x5e>
 8012858:	2300      	movs	r3, #0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d10a      	bne.n	8012874 <xQueueGiveFromISR+0x78>
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	61bb      	str	r3, [r7, #24]
}
 8012870:	bf00      	nop
 8012872:	e7fe      	b.n	8012872 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012874:	f001 fe90 	bl	8014598 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012878:	f3ef 8211 	mrs	r2, BASEPRI
 801287c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012880:	f383 8811 	msr	BASEPRI, r3
 8012884:	f3bf 8f6f 	isb	sy
 8012888:	f3bf 8f4f 	dsb	sy
 801288c:	617a      	str	r2, [r7, #20]
 801288e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012890:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012892:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012898:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801289e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d22b      	bcs.n	80128fc <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128b0:	1c5a      	adds	r2, r3, #1
 80128b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80128b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80128ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128be:	d112      	bne.n	80128e6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80128c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d016      	beq.n	80128f6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80128c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ca:	3324      	adds	r3, #36	; 0x24
 80128cc:	4618      	mov	r0, r3
 80128ce:	f000 ff65 	bl	801379c <xTaskRemoveFromEventList>
 80128d2:	4603      	mov	r3, r0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d00e      	beq.n	80128f6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80128d8:	683b      	ldr	r3, [r7, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00b      	beq.n	80128f6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	2201      	movs	r2, #1
 80128e2:	601a      	str	r2, [r3, #0]
 80128e4:	e007      	b.n	80128f6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80128e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128ea:	3301      	adds	r3, #1
 80128ec:	b2db      	uxtb	r3, r3
 80128ee:	b25a      	sxtb	r2, r3
 80128f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80128f6:	2301      	movs	r3, #1
 80128f8:	637b      	str	r3, [r7, #52]	; 0x34
 80128fa:	e001      	b.n	8012900 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80128fc:	2300      	movs	r3, #0
 80128fe:	637b      	str	r3, [r7, #52]	; 0x34
 8012900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012902:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801290a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801290c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801290e:	4618      	mov	r0, r3
 8012910:	3738      	adds	r7, #56	; 0x38
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
	...

08012918 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b08e      	sub	sp, #56	; 0x38
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012922:	2300      	movs	r3, #0
 8012924:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801292a:	2300      	movs	r3, #0
 801292c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012930:	2b00      	cmp	r3, #0
 8012932:	d10a      	bne.n	801294a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012938:	f383 8811 	msr	BASEPRI, r3
 801293c:	f3bf 8f6f 	isb	sy
 8012940:	f3bf 8f4f 	dsb	sy
 8012944:	623b      	str	r3, [r7, #32]
}
 8012946:	bf00      	nop
 8012948:	e7fe      	b.n	8012948 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801294e:	2b00      	cmp	r3, #0
 8012950:	d00a      	beq.n	8012968 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012956:	f383 8811 	msr	BASEPRI, r3
 801295a:	f3bf 8f6f 	isb	sy
 801295e:	f3bf 8f4f 	dsb	sy
 8012962:	61fb      	str	r3, [r7, #28]
}
 8012964:	bf00      	nop
 8012966:	e7fe      	b.n	8012966 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012968:	f001 f8d8 	bl	8013b1c <xTaskGetSchedulerState>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d102      	bne.n	8012978 <xQueueSemaphoreTake+0x60>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d101      	bne.n	801297c <xQueueSemaphoreTake+0x64>
 8012978:	2301      	movs	r3, #1
 801297a:	e000      	b.n	801297e <xQueueSemaphoreTake+0x66>
 801297c:	2300      	movs	r3, #0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d10a      	bne.n	8012998 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012986:	f383 8811 	msr	BASEPRI, r3
 801298a:	f3bf 8f6f 	isb	sy
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	61bb      	str	r3, [r7, #24]
}
 8012994:	bf00      	nop
 8012996:	e7fe      	b.n	8012996 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012998:	f001 fd1c 	bl	80143d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801299c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129a0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80129a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d024      	beq.n	80129f2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80129a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129aa:	1e5a      	subs	r2, r3, #1
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80129b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d104      	bne.n	80129c2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80129b8:	f001 fa58 	bl	8013e6c <pvTaskIncrementMutexHeldCount>
 80129bc:	4602      	mov	r2, r0
 80129be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c4:	691b      	ldr	r3, [r3, #16]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d00f      	beq.n	80129ea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129cc:	3310      	adds	r3, #16
 80129ce:	4618      	mov	r0, r3
 80129d0:	f000 fee4 	bl	801379c <xTaskRemoveFromEventList>
 80129d4:	4603      	mov	r3, r0
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d007      	beq.n	80129ea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80129da:	4b54      	ldr	r3, [pc, #336]	; (8012b2c <xQueueSemaphoreTake+0x214>)
 80129dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129e0:	601a      	str	r2, [r3, #0]
 80129e2:	f3bf 8f4f 	dsb	sy
 80129e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80129ea:	f001 fd23 	bl	8014434 <vPortExitCritical>
				return pdPASS;
 80129ee:	2301      	movs	r3, #1
 80129f0:	e097      	b.n	8012b22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d111      	bne.n	8012a1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80129f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00a      	beq.n	8012a14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	f383 8811 	msr	BASEPRI, r3
 8012a06:	f3bf 8f6f 	isb	sy
 8012a0a:	f3bf 8f4f 	dsb	sy
 8012a0e:	617b      	str	r3, [r7, #20]
}
 8012a10:	bf00      	nop
 8012a12:	e7fe      	b.n	8012a12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012a14:	f001 fd0e 	bl	8014434 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	e082      	b.n	8012b22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d106      	bne.n	8012a30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a22:	f107 030c 	add.w	r3, r7, #12
 8012a26:	4618      	mov	r0, r3
 8012a28:	f000 ff1a 	bl	8013860 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a30:	f001 fd00 	bl	8014434 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a34:	f000 fcba 	bl	80133ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a38:	f001 fccc 	bl	80143d4 <vPortEnterCritical>
 8012a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a42:	b25b      	sxtb	r3, r3
 8012a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a48:	d103      	bne.n	8012a52 <xQueueSemaphoreTake+0x13a>
 8012a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a58:	b25b      	sxtb	r3, r3
 8012a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a5e:	d103      	bne.n	8012a68 <xQueueSemaphoreTake+0x150>
 8012a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a68:	f001 fce4 	bl	8014434 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a6c:	463a      	mov	r2, r7
 8012a6e:	f107 030c 	add.w	r3, r7, #12
 8012a72:	4611      	mov	r1, r2
 8012a74:	4618      	mov	r0, r3
 8012a76:	f000 ff09 	bl	801388c <xTaskCheckForTimeOut>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d132      	bne.n	8012ae6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a82:	f000 f9f2 	bl	8012e6a <prvIsQueueEmpty>
 8012a86:	4603      	mov	r3, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d026      	beq.n	8012ada <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d109      	bne.n	8012aa8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012a94:	f001 fc9e 	bl	80143d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9a:	689b      	ldr	r3, [r3, #8]
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	f001 f85b 	bl	8013b58 <xTaskPriorityInherit>
 8012aa2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012aa4:	f001 fcc6 	bl	8014434 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aaa:	3324      	adds	r3, #36	; 0x24
 8012aac:	683a      	ldr	r2, [r7, #0]
 8012aae:	4611      	mov	r1, r2
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f000 fe4f 	bl	8013754 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012ab6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ab8:	f000 f985 	bl	8012dc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012abc:	f000 fc84 	bl	80133c8 <xTaskResumeAll>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f47f af68 	bne.w	8012998 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012ac8:	4b18      	ldr	r3, [pc, #96]	; (8012b2c <xQueueSemaphoreTake+0x214>)
 8012aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ace:	601a      	str	r2, [r3, #0]
 8012ad0:	f3bf 8f4f 	dsb	sy
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	e75e      	b.n	8012998 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012adc:	f000 f973 	bl	8012dc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012ae0:	f000 fc72 	bl	80133c8 <xTaskResumeAll>
 8012ae4:	e758      	b.n	8012998 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012ae6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ae8:	f000 f96d 	bl	8012dc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012aec:	f000 fc6c 	bl	80133c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012af2:	f000 f9ba 	bl	8012e6a <prvIsQueueEmpty>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	f43f af4d 	beq.w	8012998 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d00d      	beq.n	8012b20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012b04:	f001 fc66 	bl	80143d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b0a:	f000 f8b4 	bl	8012c76 <prvGetDisinheritPriorityAfterTimeout>
 8012b0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b12:	689b      	ldr	r3, [r3, #8]
 8012b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b16:	4618      	mov	r0, r3
 8012b18:	f001 f91a 	bl	8013d50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012b1c:	f001 fc8a 	bl	8014434 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012b22:	4618      	mov	r0, r3
 8012b24:	3738      	adds	r7, #56	; 0x38
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	e000ed04 	.word	0xe000ed04

08012b30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b08e      	sub	sp, #56	; 0x38
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10a      	bne.n	8012b5c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b4a:	f383 8811 	msr	BASEPRI, r3
 8012b4e:	f3bf 8f6f 	isb	sy
 8012b52:	f3bf 8f4f 	dsb	sy
 8012b56:	623b      	str	r3, [r7, #32]
}
 8012b58:	bf00      	nop
 8012b5a:	e7fe      	b.n	8012b5a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d103      	bne.n	8012b6a <xQueueReceiveFromISR+0x3a>
 8012b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d101      	bne.n	8012b6e <xQueueReceiveFromISR+0x3e>
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	e000      	b.n	8012b70 <xQueueReceiveFromISR+0x40>
 8012b6e:	2300      	movs	r3, #0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d10a      	bne.n	8012b8a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b78:	f383 8811 	msr	BASEPRI, r3
 8012b7c:	f3bf 8f6f 	isb	sy
 8012b80:	f3bf 8f4f 	dsb	sy
 8012b84:	61fb      	str	r3, [r7, #28]
}
 8012b86:	bf00      	nop
 8012b88:	e7fe      	b.n	8012b88 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b8a:	f001 fd05 	bl	8014598 <vPortValidateInterruptPriority>
	__asm volatile
 8012b8e:	f3ef 8211 	mrs	r2, BASEPRI
 8012b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b96:	f383 8811 	msr	BASEPRI, r3
 8012b9a:	f3bf 8f6f 	isb	sy
 8012b9e:	f3bf 8f4f 	dsb	sy
 8012ba2:	61ba      	str	r2, [r7, #24]
 8012ba4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012ba6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012bae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d02f      	beq.n	8012c16 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012bc0:	68b9      	ldr	r1, [r7, #8]
 8012bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012bc4:	f000 f8d9 	bl	8012d7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bca:	1e5a      	subs	r2, r3, #1
 8012bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012bd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bd8:	d112      	bne.n	8012c00 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bdc:	691b      	ldr	r3, [r3, #16]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d016      	beq.n	8012c10 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be4:	3310      	adds	r3, #16
 8012be6:	4618      	mov	r0, r3
 8012be8:	f000 fdd8 	bl	801379c <xTaskRemoveFromEventList>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d00e      	beq.n	8012c10 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d00b      	beq.n	8012c10 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2201      	movs	r2, #1
 8012bfc:	601a      	str	r2, [r3, #0]
 8012bfe:	e007      	b.n	8012c10 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c04:	3301      	adds	r3, #1
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	b25a      	sxtb	r2, r3
 8012c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012c10:	2301      	movs	r3, #1
 8012c12:	637b      	str	r3, [r7, #52]	; 0x34
 8012c14:	e001      	b.n	8012c1a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8012c16:	2300      	movs	r3, #0
 8012c18:	637b      	str	r3, [r7, #52]	; 0x34
 8012c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	f383 8811 	msr	BASEPRI, r3
}
 8012c24:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	3738      	adds	r7, #56	; 0x38
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	bd80      	pop	{r7, pc}

08012c30 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10a      	bne.n	8012c58 <vQueueDelete+0x28>
	__asm volatile
 8012c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c46:	f383 8811 	msr	BASEPRI, r3
 8012c4a:	f3bf 8f6f 	isb	sy
 8012c4e:	f3bf 8f4f 	dsb	sy
 8012c52:	60bb      	str	r3, [r7, #8]
}
 8012c54:	bf00      	nop
 8012c56:	e7fe      	b.n	8012c56 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012c58:	68f8      	ldr	r0, [r7, #12]
 8012c5a:	f000 f935 	bl	8012ec8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d102      	bne.n	8012c6e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f001 fda1 	bl	80147b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012c6e:	bf00      	nop
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}

08012c76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012c76:	b480      	push	{r7}
 8012c78:	b085      	sub	sp, #20
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d006      	beq.n	8012c94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f1c3 0307 	rsb	r3, r3, #7
 8012c90:	60fb      	str	r3, [r7, #12]
 8012c92:	e001      	b.n	8012c98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012c94:	2300      	movs	r3, #0
 8012c96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012c98:	68fb      	ldr	r3, [r7, #12]
	}
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3714      	adds	r7, #20
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca4:	4770      	bx	lr

08012ca6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012ca6:	b580      	push	{r7, lr}
 8012ca8:	b086      	sub	sp, #24
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	60f8      	str	r0, [r7, #12]
 8012cae:	60b9      	str	r1, [r7, #8]
 8012cb0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012cba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10d      	bne.n	8012ce0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d14d      	bne.n	8012d68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	689b      	ldr	r3, [r3, #8]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f000 ffb7 	bl	8013c44 <xTaskPriorityDisinherit>
 8012cd6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	609a      	str	r2, [r3, #8]
 8012cde:	e043      	b.n	8012d68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d119      	bne.n	8012d1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6858      	ldr	r0, [r3, #4]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cee:	461a      	mov	r2, r3
 8012cf0:	68b9      	ldr	r1, [r7, #8]
 8012cf2:	f003 fdb6 	bl	8016862 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	685a      	ldr	r2, [r3, #4]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cfe:	441a      	add	r2, r3
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	685a      	ldr	r2, [r3, #4]
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	689b      	ldr	r3, [r3, #8]
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d32b      	bcc.n	8012d68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	681a      	ldr	r2, [r3, #0]
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	605a      	str	r2, [r3, #4]
 8012d18:	e026      	b.n	8012d68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	68d8      	ldr	r0, [r3, #12]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d22:	461a      	mov	r2, r3
 8012d24:	68b9      	ldr	r1, [r7, #8]
 8012d26:	f003 fd9c 	bl	8016862 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	68da      	ldr	r2, [r3, #12]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d32:	425b      	negs	r3, r3
 8012d34:	441a      	add	r2, r3
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	68da      	ldr	r2, [r3, #12]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d207      	bcs.n	8012d56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	689a      	ldr	r2, [r3, #8]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d4e:	425b      	negs	r3, r3
 8012d50:	441a      	add	r2, r3
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2b02      	cmp	r3, #2
 8012d5a:	d105      	bne.n	8012d68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d002      	beq.n	8012d68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	3b01      	subs	r3, #1
 8012d66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	1c5a      	adds	r2, r3, #1
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012d70:	697b      	ldr	r3, [r7, #20]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012d7a:	b580      	push	{r7, lr}
 8012d7c:	b082      	sub	sp, #8
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
 8012d82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d018      	beq.n	8012dbe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	68da      	ldr	r2, [r3, #12]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d94:	441a      	add	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	68da      	ldr	r2, [r3, #12]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	689b      	ldr	r3, [r3, #8]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d303      	bcc.n	8012dae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	68d9      	ldr	r1, [r3, #12]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012db6:	461a      	mov	r2, r3
 8012db8:	6838      	ldr	r0, [r7, #0]
 8012dba:	f003 fd52 	bl	8016862 <memcpy>
	}
}
 8012dbe:	bf00      	nop
 8012dc0:	3708      	adds	r7, #8
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}

08012dc6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012dc6:	b580      	push	{r7, lr}
 8012dc8:	b084      	sub	sp, #16
 8012dca:	af00      	add	r7, sp, #0
 8012dcc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012dce:	f001 fb01 	bl	80143d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012dd8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012dda:	e011      	b.n	8012e00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d012      	beq.n	8012e0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	3324      	adds	r3, #36	; 0x24
 8012de8:	4618      	mov	r0, r3
 8012dea:	f000 fcd7 	bl	801379c <xTaskRemoveFromEventList>
 8012dee:	4603      	mov	r3, r0
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d001      	beq.n	8012df8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012df4:	f000 fdac 	bl	8013950 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012df8:	7bfb      	ldrb	r3, [r7, #15]
 8012dfa:	3b01      	subs	r3, #1
 8012dfc:	b2db      	uxtb	r3, r3
 8012dfe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	dce9      	bgt.n	8012ddc <prvUnlockQueue+0x16>
 8012e08:	e000      	b.n	8012e0c <prvUnlockQueue+0x46>
					break;
 8012e0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	22ff      	movs	r2, #255	; 0xff
 8012e10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012e14:	f001 fb0e 	bl	8014434 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012e18:	f001 fadc 	bl	80143d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e24:	e011      	b.n	8012e4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	691b      	ldr	r3, [r3, #16]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d012      	beq.n	8012e54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	3310      	adds	r3, #16
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 fcb2 	bl	801379c <xTaskRemoveFromEventList>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d001      	beq.n	8012e42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012e3e:	f000 fd87 	bl	8013950 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012e42:	7bbb      	ldrb	r3, [r7, #14]
 8012e44:	3b01      	subs	r3, #1
 8012e46:	b2db      	uxtb	r3, r3
 8012e48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012e4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	dce9      	bgt.n	8012e26 <prvUnlockQueue+0x60>
 8012e52:	e000      	b.n	8012e56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012e54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	22ff      	movs	r2, #255	; 0xff
 8012e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012e5e:	f001 fae9 	bl	8014434 <vPortExitCritical>
}
 8012e62:	bf00      	nop
 8012e64:	3710      	adds	r7, #16
 8012e66:	46bd      	mov	sp, r7
 8012e68:	bd80      	pop	{r7, pc}

08012e6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012e6a:	b580      	push	{r7, lr}
 8012e6c:	b084      	sub	sp, #16
 8012e6e:	af00      	add	r7, sp, #0
 8012e70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012e72:	f001 faaf 	bl	80143d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d102      	bne.n	8012e84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012e7e:	2301      	movs	r3, #1
 8012e80:	60fb      	str	r3, [r7, #12]
 8012e82:	e001      	b.n	8012e88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012e84:	2300      	movs	r3, #0
 8012e86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012e88:	f001 fad4 	bl	8014434 <vPortExitCritical>

	return xReturn;
 8012e8c:	68fb      	ldr	r3, [r7, #12]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012e9e:	f001 fa99 	bl	80143d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d102      	bne.n	8012eb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	60fb      	str	r3, [r7, #12]
 8012eb2:	e001      	b.n	8012eb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012eb8:	f001 fabc 	bl	8014434 <vPortExitCritical>

	return xReturn;
 8012ebc:	68fb      	ldr	r3, [r7, #12]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
	...

08012ec8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012ec8:	b480      	push	{r7}
 8012eca:	b085      	sub	sp, #20
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	60fb      	str	r3, [r7, #12]
 8012ed4:	e016      	b.n	8012f04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012ed6:	4a10      	ldr	r2, [pc, #64]	; (8012f18 <vQueueUnregisterQueue+0x50>)
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	00db      	lsls	r3, r3, #3
 8012edc:	4413      	add	r3, r2
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d10b      	bne.n	8012efe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012ee6:	4a0c      	ldr	r2, [pc, #48]	; (8012f18 <vQueueUnregisterQueue+0x50>)
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2100      	movs	r1, #0
 8012eec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012ef0:	4a09      	ldr	r2, [pc, #36]	; (8012f18 <vQueueUnregisterQueue+0x50>)
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	00db      	lsls	r3, r3, #3
 8012ef6:	4413      	add	r3, r2
 8012ef8:	2200      	movs	r2, #0
 8012efa:	605a      	str	r2, [r3, #4]
				break;
 8012efc:	e006      	b.n	8012f0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	3301      	adds	r3, #1
 8012f02:	60fb      	str	r3, [r7, #12]
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	2b07      	cmp	r3, #7
 8012f08:	d9e5      	bls.n	8012ed6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012f0a:	bf00      	nop
 8012f0c:	bf00      	nop
 8012f0e:	3714      	adds	r7, #20
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr
 8012f18:	200034cc 	.word	0x200034cc

08012f1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b08e      	sub	sp, #56	; 0x38
 8012f20:	af04      	add	r7, sp, #16
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
 8012f28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10a      	bne.n	8012f46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8012f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f34:	f383 8811 	msr	BASEPRI, r3
 8012f38:	f3bf 8f6f 	isb	sy
 8012f3c:	f3bf 8f4f 	dsb	sy
 8012f40:	623b      	str	r3, [r7, #32]
}
 8012f42:	bf00      	nop
 8012f44:	e7fe      	b.n	8012f44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d10a      	bne.n	8012f62 <xTaskCreateStatic+0x46>
	__asm volatile
 8012f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f50:	f383 8811 	msr	BASEPRI, r3
 8012f54:	f3bf 8f6f 	isb	sy
 8012f58:	f3bf 8f4f 	dsb	sy
 8012f5c:	61fb      	str	r3, [r7, #28]
}
 8012f5e:	bf00      	nop
 8012f60:	e7fe      	b.n	8012f60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012f62:	23a0      	movs	r3, #160	; 0xa0
 8012f64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012f66:	693b      	ldr	r3, [r7, #16]
 8012f68:	2ba0      	cmp	r3, #160	; 0xa0
 8012f6a:	d00a      	beq.n	8012f82 <xTaskCreateStatic+0x66>
	__asm volatile
 8012f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f70:	f383 8811 	msr	BASEPRI, r3
 8012f74:	f3bf 8f6f 	isb	sy
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	61bb      	str	r3, [r7, #24]
}
 8012f7e:	bf00      	nop
 8012f80:	e7fe      	b.n	8012f80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012f82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d01e      	beq.n	8012fc8 <xTaskCreateStatic+0xac>
 8012f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d01b      	beq.n	8012fc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9c:	2202      	movs	r2, #2
 8012f9e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	9303      	str	r3, [sp, #12]
 8012fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa8:	9302      	str	r3, [sp, #8]
 8012faa:	f107 0314 	add.w	r3, r7, #20
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	68b9      	ldr	r1, [r7, #8]
 8012fba:	68f8      	ldr	r0, [r7, #12]
 8012fbc:	f000 f850 	bl	8013060 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012fc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fc2:	f000 f8eb 	bl	801319c <prvAddNewTaskToReadyList>
 8012fc6:	e001      	b.n	8012fcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012fcc:	697b      	ldr	r3, [r7, #20]
	}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3728      	adds	r7, #40	; 0x28
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}

08012fd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012fd6:	b580      	push	{r7, lr}
 8012fd8:	b08c      	sub	sp, #48	; 0x30
 8012fda:	af04      	add	r7, sp, #16
 8012fdc:	60f8      	str	r0, [r7, #12]
 8012fde:	60b9      	str	r1, [r7, #8]
 8012fe0:	603b      	str	r3, [r7, #0]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012fe6:	88fb      	ldrh	r3, [r7, #6]
 8012fe8:	009b      	lsls	r3, r3, #2
 8012fea:	4618      	mov	r0, r3
 8012fec:	f001 fb14 	bl	8014618 <pvPortMalloc>
 8012ff0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d00e      	beq.n	8013016 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012ff8:	20a0      	movs	r0, #160	; 0xa0
 8012ffa:	f001 fb0d 	bl	8014618 <pvPortMalloc>
 8012ffe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d003      	beq.n	801300e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013006:	69fb      	ldr	r3, [r7, #28]
 8013008:	697a      	ldr	r2, [r7, #20]
 801300a:	631a      	str	r2, [r3, #48]	; 0x30
 801300c:	e005      	b.n	801301a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801300e:	6978      	ldr	r0, [r7, #20]
 8013010:	f001 fbce 	bl	80147b0 <vPortFree>
 8013014:	e001      	b.n	801301a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013016:	2300      	movs	r3, #0
 8013018:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801301a:	69fb      	ldr	r3, [r7, #28]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d017      	beq.n	8013050 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	2200      	movs	r2, #0
 8013024:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013028:	88fa      	ldrh	r2, [r7, #6]
 801302a:	2300      	movs	r3, #0
 801302c:	9303      	str	r3, [sp, #12]
 801302e:	69fb      	ldr	r3, [r7, #28]
 8013030:	9302      	str	r3, [sp, #8]
 8013032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013034:	9301      	str	r3, [sp, #4]
 8013036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	68b9      	ldr	r1, [r7, #8]
 801303e:	68f8      	ldr	r0, [r7, #12]
 8013040:	f000 f80e 	bl	8013060 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013044:	69f8      	ldr	r0, [r7, #28]
 8013046:	f000 f8a9 	bl	801319c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801304a:	2301      	movs	r3, #1
 801304c:	61bb      	str	r3, [r7, #24]
 801304e:	e002      	b.n	8013056 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013050:	f04f 33ff 	mov.w	r3, #4294967295
 8013054:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013056:	69bb      	ldr	r3, [r7, #24]
	}
 8013058:	4618      	mov	r0, r3
 801305a:	3720      	adds	r7, #32
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}

08013060 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b088      	sub	sp, #32
 8013064:	af00      	add	r7, sp, #0
 8013066:	60f8      	str	r0, [r7, #12]
 8013068:	60b9      	str	r1, [r7, #8]
 801306a:	607a      	str	r2, [r7, #4]
 801306c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013078:	3b01      	subs	r3, #1
 801307a:	009b      	lsls	r3, r3, #2
 801307c:	4413      	add	r3, r2
 801307e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	f023 0307 	bic.w	r3, r3, #7
 8013086:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	f003 0307 	and.w	r3, r3, #7
 801308e:	2b00      	cmp	r3, #0
 8013090:	d00a      	beq.n	80130a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8013092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013096:	f383 8811 	msr	BASEPRI, r3
 801309a:	f3bf 8f6f 	isb	sy
 801309e:	f3bf 8f4f 	dsb	sy
 80130a2:	617b      	str	r3, [r7, #20]
}
 80130a4:	bf00      	nop
 80130a6:	e7fe      	b.n	80130a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d01f      	beq.n	80130ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130ae:	2300      	movs	r3, #0
 80130b0:	61fb      	str	r3, [r7, #28]
 80130b2:	e012      	b.n	80130da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80130b4:	68ba      	ldr	r2, [r7, #8]
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	4413      	add	r3, r2
 80130ba:	7819      	ldrb	r1, [r3, #0]
 80130bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	4413      	add	r3, r2
 80130c2:	3334      	adds	r3, #52	; 0x34
 80130c4:	460a      	mov	r2, r1
 80130c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80130c8:	68ba      	ldr	r2, [r7, #8]
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	4413      	add	r3, r2
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d006      	beq.n	80130e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	3301      	adds	r3, #1
 80130d8:	61fb      	str	r3, [r7, #28]
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	2b0f      	cmp	r3, #15
 80130de:	d9e9      	bls.n	80130b4 <prvInitialiseNewTask+0x54>
 80130e0:	e000      	b.n	80130e4 <prvInitialiseNewTask+0x84>
			{
				break;
 80130e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80130e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e6:	2200      	movs	r2, #0
 80130e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80130ec:	e003      	b.n	80130f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80130ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f0:	2200      	movs	r2, #0
 80130f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80130f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f8:	2b06      	cmp	r3, #6
 80130fa:	d901      	bls.n	8013100 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80130fc:	2306      	movs	r3, #6
 80130fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013104:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801310a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801310e:	2200      	movs	r2, #0
 8013110:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013114:	3304      	adds	r3, #4
 8013116:	4618      	mov	r0, r3
 8013118:	f7ff f871 	bl	80121fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801311c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801311e:	3318      	adds	r3, #24
 8013120:	4618      	mov	r0, r3
 8013122:	f7ff f86c 	bl	80121fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801312a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312e:	f1c3 0207 	rsb	r2, r3, #7
 8013132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013134:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801313a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313e:	2200      	movs	r2, #0
 8013140:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013146:	2200      	movs	r2, #0
 8013148:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	334c      	adds	r3, #76	; 0x4c
 8013150:	224c      	movs	r2, #76	; 0x4c
 8013152:	2100      	movs	r1, #0
 8013154:	4618      	mov	r0, r3
 8013156:	f003 fa66 	bl	8016626 <memset>
 801315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801315c:	4a0c      	ldr	r2, [pc, #48]	; (8013190 <prvInitialiseNewTask+0x130>)
 801315e:	651a      	str	r2, [r3, #80]	; 0x50
 8013160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013162:	4a0c      	ldr	r2, [pc, #48]	; (8013194 <prvInitialiseNewTask+0x134>)
 8013164:	655a      	str	r2, [r3, #84]	; 0x54
 8013166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013168:	4a0b      	ldr	r2, [pc, #44]	; (8013198 <prvInitialiseNewTask+0x138>)
 801316a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801316c:	683a      	ldr	r2, [r7, #0]
 801316e:	68f9      	ldr	r1, [r7, #12]
 8013170:	69b8      	ldr	r0, [r7, #24]
 8013172:	f000 ffff 	bl	8014174 <pxPortInitialiseStack>
 8013176:	4602      	mov	r2, r0
 8013178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801317a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317e:	2b00      	cmp	r3, #0
 8013180:	d002      	beq.n	8013188 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013186:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013188:	bf00      	nop
 801318a:	3720      	adds	r7, #32
 801318c:	46bd      	mov	sp, r7
 801318e:	bd80      	pop	{r7, pc}
 8013190:	20007260 	.word	0x20007260
 8013194:	200072c8 	.word	0x200072c8
 8013198:	20007330 	.word	0x20007330

0801319c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80131a4:	f001 f916 	bl	80143d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80131a8:	4b2a      	ldr	r3, [pc, #168]	; (8013254 <prvAddNewTaskToReadyList+0xb8>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	3301      	adds	r3, #1
 80131ae:	4a29      	ldr	r2, [pc, #164]	; (8013254 <prvAddNewTaskToReadyList+0xb8>)
 80131b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80131b2:	4b29      	ldr	r3, [pc, #164]	; (8013258 <prvAddNewTaskToReadyList+0xbc>)
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d109      	bne.n	80131ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80131ba:	4a27      	ldr	r2, [pc, #156]	; (8013258 <prvAddNewTaskToReadyList+0xbc>)
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80131c0:	4b24      	ldr	r3, [pc, #144]	; (8013254 <prvAddNewTaskToReadyList+0xb8>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d110      	bne.n	80131ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80131c8:	f000 fbe6 	bl	8013998 <prvInitialiseTaskLists>
 80131cc:	e00d      	b.n	80131ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80131ce:	4b23      	ldr	r3, [pc, #140]	; (801325c <prvAddNewTaskToReadyList+0xc0>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d109      	bne.n	80131ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80131d6:	4b20      	ldr	r3, [pc, #128]	; (8013258 <prvAddNewTaskToReadyList+0xbc>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d802      	bhi.n	80131ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80131e4:	4a1c      	ldr	r2, [pc, #112]	; (8013258 <prvAddNewTaskToReadyList+0xbc>)
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80131ea:	4b1d      	ldr	r3, [pc, #116]	; (8013260 <prvAddNewTaskToReadyList+0xc4>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	3301      	adds	r3, #1
 80131f0:	4a1b      	ldr	r2, [pc, #108]	; (8013260 <prvAddNewTaskToReadyList+0xc4>)
 80131f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f8:	2201      	movs	r2, #1
 80131fa:	409a      	lsls	r2, r3
 80131fc:	4b19      	ldr	r3, [pc, #100]	; (8013264 <prvAddNewTaskToReadyList+0xc8>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	4313      	orrs	r3, r2
 8013202:	4a18      	ldr	r2, [pc, #96]	; (8013264 <prvAddNewTaskToReadyList+0xc8>)
 8013204:	6013      	str	r3, [r2, #0]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801320a:	4613      	mov	r3, r2
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	4413      	add	r3, r2
 8013210:	009b      	lsls	r3, r3, #2
 8013212:	4a15      	ldr	r2, [pc, #84]	; (8013268 <prvAddNewTaskToReadyList+0xcc>)
 8013214:	441a      	add	r2, r3
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	3304      	adds	r3, #4
 801321a:	4619      	mov	r1, r3
 801321c:	4610      	mov	r0, r2
 801321e:	f7fe fffb 	bl	8012218 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013222:	f001 f907 	bl	8014434 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013226:	4b0d      	ldr	r3, [pc, #52]	; (801325c <prvAddNewTaskToReadyList+0xc0>)
 8013228:	681b      	ldr	r3, [r3, #0]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d00e      	beq.n	801324c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801322e:	4b0a      	ldr	r3, [pc, #40]	; (8013258 <prvAddNewTaskToReadyList+0xbc>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013238:	429a      	cmp	r2, r3
 801323a:	d207      	bcs.n	801324c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801323c:	4b0b      	ldr	r3, [pc, #44]	; (801326c <prvAddNewTaskToReadyList+0xd0>)
 801323e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013242:	601a      	str	r2, [r3, #0]
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801324c:	bf00      	nop
 801324e:	3708      	adds	r7, #8
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	2000360c 	.word	0x2000360c
 8013258:	2000350c 	.word	0x2000350c
 801325c:	20003618 	.word	0x20003618
 8013260:	20003628 	.word	0x20003628
 8013264:	20003614 	.word	0x20003614
 8013268:	20003510 	.word	0x20003510
 801326c:	e000ed04 	.word	0xe000ed04

08013270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013278:	2300      	movs	r3, #0
 801327a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d017      	beq.n	80132b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013282:	4b13      	ldr	r3, [pc, #76]	; (80132d0 <vTaskDelay+0x60>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d00a      	beq.n	80132a0 <vTaskDelay+0x30>
	__asm volatile
 801328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801328e:	f383 8811 	msr	BASEPRI, r3
 8013292:	f3bf 8f6f 	isb	sy
 8013296:	f3bf 8f4f 	dsb	sy
 801329a:	60bb      	str	r3, [r7, #8]
}
 801329c:	bf00      	nop
 801329e:	e7fe      	b.n	801329e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80132a0:	f000 f884 	bl	80133ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80132a4:	2100      	movs	r1, #0
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f000 fefe 	bl	80140a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80132ac:	f000 f88c 	bl	80133c8 <xTaskResumeAll>
 80132b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d107      	bne.n	80132c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80132b8:	4b06      	ldr	r3, [pc, #24]	; (80132d4 <vTaskDelay+0x64>)
 80132ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	f3bf 8f4f 	dsb	sy
 80132c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80132c8:	bf00      	nop
 80132ca:	3710      	adds	r7, #16
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}
 80132d0:	20003634 	.word	0x20003634
 80132d4:	e000ed04 	.word	0xe000ed04

080132d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08a      	sub	sp, #40	; 0x28
 80132dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80132de:	2300      	movs	r3, #0
 80132e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80132e2:	2300      	movs	r3, #0
 80132e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80132e6:	463a      	mov	r2, r7
 80132e8:	1d39      	adds	r1, r7, #4
 80132ea:	f107 0308 	add.w	r3, r7, #8
 80132ee:	4618      	mov	r0, r3
 80132f0:	f7f3 fcda 	bl	8006ca8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80132f4:	6839      	ldr	r1, [r7, #0]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	68ba      	ldr	r2, [r7, #8]
 80132fa:	9202      	str	r2, [sp, #8]
 80132fc:	9301      	str	r3, [sp, #4]
 80132fe:	2300      	movs	r3, #0
 8013300:	9300      	str	r3, [sp, #0]
 8013302:	2300      	movs	r3, #0
 8013304:	460a      	mov	r2, r1
 8013306:	4921      	ldr	r1, [pc, #132]	; (801338c <vTaskStartScheduler+0xb4>)
 8013308:	4821      	ldr	r0, [pc, #132]	; (8013390 <vTaskStartScheduler+0xb8>)
 801330a:	f7ff fe07 	bl	8012f1c <xTaskCreateStatic>
 801330e:	4603      	mov	r3, r0
 8013310:	4a20      	ldr	r2, [pc, #128]	; (8013394 <vTaskStartScheduler+0xbc>)
 8013312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013314:	4b1f      	ldr	r3, [pc, #124]	; (8013394 <vTaskStartScheduler+0xbc>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d002      	beq.n	8013322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801331c:	2301      	movs	r3, #1
 801331e:	617b      	str	r3, [r7, #20]
 8013320:	e001      	b.n	8013326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013322:	2300      	movs	r3, #0
 8013324:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	2b01      	cmp	r3, #1
 801332a:	d11b      	bne.n	8013364 <vTaskStartScheduler+0x8c>
	__asm volatile
 801332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013330:	f383 8811 	msr	BASEPRI, r3
 8013334:	f3bf 8f6f 	isb	sy
 8013338:	f3bf 8f4f 	dsb	sy
 801333c:	613b      	str	r3, [r7, #16]
}
 801333e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013340:	4b15      	ldr	r3, [pc, #84]	; (8013398 <vTaskStartScheduler+0xc0>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	334c      	adds	r3, #76	; 0x4c
 8013346:	4a15      	ldr	r2, [pc, #84]	; (801339c <vTaskStartScheduler+0xc4>)
 8013348:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801334a:	4b15      	ldr	r3, [pc, #84]	; (80133a0 <vTaskStartScheduler+0xc8>)
 801334c:	f04f 32ff 	mov.w	r2, #4294967295
 8013350:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013352:	4b14      	ldr	r3, [pc, #80]	; (80133a4 <vTaskStartScheduler+0xcc>)
 8013354:	2201      	movs	r2, #1
 8013356:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013358:	4b13      	ldr	r3, [pc, #76]	; (80133a8 <vTaskStartScheduler+0xd0>)
 801335a:	2200      	movs	r2, #0
 801335c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801335e:	f000 ff97 	bl	8014290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013362:	e00e      	b.n	8013382 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	f1b3 3fff 	cmp.w	r3, #4294967295
 801336a:	d10a      	bne.n	8013382 <vTaskStartScheduler+0xaa>
	__asm volatile
 801336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	60fb      	str	r3, [r7, #12]
}
 801337e:	bf00      	nop
 8013380:	e7fe      	b.n	8013380 <vTaskStartScheduler+0xa8>
}
 8013382:	bf00      	nop
 8013384:	3718      	adds	r7, #24
 8013386:	46bd      	mov	sp, r7
 8013388:	bd80      	pop	{r7, pc}
 801338a:	bf00      	nop
 801338c:	0801a4d4 	.word	0x0801a4d4
 8013390:	08013969 	.word	0x08013969
 8013394:	20003630 	.word	0x20003630
 8013398:	2000350c 	.word	0x2000350c
 801339c:	20000330 	.word	0x20000330
 80133a0:	2000362c 	.word	0x2000362c
 80133a4:	20003618 	.word	0x20003618
 80133a8:	20003610 	.word	0x20003610

080133ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80133ac:	b480      	push	{r7}
 80133ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80133b0:	4b04      	ldr	r3, [pc, #16]	; (80133c4 <vTaskSuspendAll+0x18>)
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	3301      	adds	r3, #1
 80133b6:	4a03      	ldr	r2, [pc, #12]	; (80133c4 <vTaskSuspendAll+0x18>)
 80133b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80133ba:	bf00      	nop
 80133bc:	46bd      	mov	sp, r7
 80133be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c2:	4770      	bx	lr
 80133c4:	20003634 	.word	0x20003634

080133c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b084      	sub	sp, #16
 80133cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80133ce:	2300      	movs	r3, #0
 80133d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80133d2:	2300      	movs	r3, #0
 80133d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80133d6:	4b41      	ldr	r3, [pc, #260]	; (80134dc <xTaskResumeAll+0x114>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d10a      	bne.n	80133f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80133de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133e2:	f383 8811 	msr	BASEPRI, r3
 80133e6:	f3bf 8f6f 	isb	sy
 80133ea:	f3bf 8f4f 	dsb	sy
 80133ee:	603b      	str	r3, [r7, #0]
}
 80133f0:	bf00      	nop
 80133f2:	e7fe      	b.n	80133f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80133f4:	f000 ffee 	bl	80143d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80133f8:	4b38      	ldr	r3, [pc, #224]	; (80134dc <xTaskResumeAll+0x114>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	3b01      	subs	r3, #1
 80133fe:	4a37      	ldr	r2, [pc, #220]	; (80134dc <xTaskResumeAll+0x114>)
 8013400:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013402:	4b36      	ldr	r3, [pc, #216]	; (80134dc <xTaskResumeAll+0x114>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d161      	bne.n	80134ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801340a:	4b35      	ldr	r3, [pc, #212]	; (80134e0 <xTaskResumeAll+0x118>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d05d      	beq.n	80134ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013412:	e02e      	b.n	8013472 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013414:	4b33      	ldr	r3, [pc, #204]	; (80134e4 <xTaskResumeAll+0x11c>)
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	3318      	adds	r3, #24
 8013420:	4618      	mov	r0, r3
 8013422:	f7fe ff56 	bl	80122d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	3304      	adds	r3, #4
 801342a:	4618      	mov	r0, r3
 801342c:	f7fe ff51 	bl	80122d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013434:	2201      	movs	r2, #1
 8013436:	409a      	lsls	r2, r3
 8013438:	4b2b      	ldr	r3, [pc, #172]	; (80134e8 <xTaskResumeAll+0x120>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	4313      	orrs	r3, r2
 801343e:	4a2a      	ldr	r2, [pc, #168]	; (80134e8 <xTaskResumeAll+0x120>)
 8013440:	6013      	str	r3, [r2, #0]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013446:	4613      	mov	r3, r2
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4413      	add	r3, r2
 801344c:	009b      	lsls	r3, r3, #2
 801344e:	4a27      	ldr	r2, [pc, #156]	; (80134ec <xTaskResumeAll+0x124>)
 8013450:	441a      	add	r2, r3
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	3304      	adds	r3, #4
 8013456:	4619      	mov	r1, r3
 8013458:	4610      	mov	r0, r2
 801345a:	f7fe fedd 	bl	8012218 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013462:	4b23      	ldr	r3, [pc, #140]	; (80134f0 <xTaskResumeAll+0x128>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013468:	429a      	cmp	r2, r3
 801346a:	d302      	bcc.n	8013472 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 801346c:	4b21      	ldr	r3, [pc, #132]	; (80134f4 <xTaskResumeAll+0x12c>)
 801346e:	2201      	movs	r2, #1
 8013470:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013472:	4b1c      	ldr	r3, [pc, #112]	; (80134e4 <xTaskResumeAll+0x11c>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d1cc      	bne.n	8013414 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d001      	beq.n	8013484 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013480:	f000 fb2c 	bl	8013adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013484:	4b1c      	ldr	r3, [pc, #112]	; (80134f8 <xTaskResumeAll+0x130>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d010      	beq.n	80134b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013490:	f000 f846 	bl	8013520 <xTaskIncrementTick>
 8013494:	4603      	mov	r3, r0
 8013496:	2b00      	cmp	r3, #0
 8013498:	d002      	beq.n	80134a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801349a:	4b16      	ldr	r3, [pc, #88]	; (80134f4 <xTaskResumeAll+0x12c>)
 801349c:	2201      	movs	r2, #1
 801349e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	3b01      	subs	r3, #1
 80134a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d1f1      	bne.n	8013490 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80134ac:	4b12      	ldr	r3, [pc, #72]	; (80134f8 <xTaskResumeAll+0x130>)
 80134ae:	2200      	movs	r2, #0
 80134b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80134b2:	4b10      	ldr	r3, [pc, #64]	; (80134f4 <xTaskResumeAll+0x12c>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d009      	beq.n	80134ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80134ba:	2301      	movs	r3, #1
 80134bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80134be:	4b0f      	ldr	r3, [pc, #60]	; (80134fc <xTaskResumeAll+0x134>)
 80134c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134c4:	601a      	str	r2, [r3, #0]
 80134c6:	f3bf 8f4f 	dsb	sy
 80134ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80134ce:	f000 ffb1 	bl	8014434 <vPortExitCritical>

	return xAlreadyYielded;
 80134d2:	68bb      	ldr	r3, [r7, #8]
}
 80134d4:	4618      	mov	r0, r3
 80134d6:	3710      	adds	r7, #16
 80134d8:	46bd      	mov	sp, r7
 80134da:	bd80      	pop	{r7, pc}
 80134dc:	20003634 	.word	0x20003634
 80134e0:	2000360c 	.word	0x2000360c
 80134e4:	200035cc 	.word	0x200035cc
 80134e8:	20003614 	.word	0x20003614
 80134ec:	20003510 	.word	0x20003510
 80134f0:	2000350c 	.word	0x2000350c
 80134f4:	20003620 	.word	0x20003620
 80134f8:	2000361c 	.word	0x2000361c
 80134fc:	e000ed04 	.word	0xe000ed04

08013500 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013500:	b480      	push	{r7}
 8013502:	b083      	sub	sp, #12
 8013504:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013506:	4b05      	ldr	r3, [pc, #20]	; (801351c <xTaskGetTickCount+0x1c>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801350c:	687b      	ldr	r3, [r7, #4]
}
 801350e:	4618      	mov	r0, r3
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr
 801351a:	bf00      	nop
 801351c:	20003610 	.word	0x20003610

08013520 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b086      	sub	sp, #24
 8013524:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013526:	2300      	movs	r3, #0
 8013528:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801352a:	4b4e      	ldr	r3, [pc, #312]	; (8013664 <xTaskIncrementTick+0x144>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2b00      	cmp	r3, #0
 8013530:	f040 808e 	bne.w	8013650 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013534:	4b4c      	ldr	r3, [pc, #304]	; (8013668 <xTaskIncrementTick+0x148>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	3301      	adds	r3, #1
 801353a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801353c:	4a4a      	ldr	r2, [pc, #296]	; (8013668 <xTaskIncrementTick+0x148>)
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d120      	bne.n	801358a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013548:	4b48      	ldr	r3, [pc, #288]	; (801366c <xTaskIncrementTick+0x14c>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d00a      	beq.n	8013568 <xTaskIncrementTick+0x48>
	__asm volatile
 8013552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013556:	f383 8811 	msr	BASEPRI, r3
 801355a:	f3bf 8f6f 	isb	sy
 801355e:	f3bf 8f4f 	dsb	sy
 8013562:	603b      	str	r3, [r7, #0]
}
 8013564:	bf00      	nop
 8013566:	e7fe      	b.n	8013566 <xTaskIncrementTick+0x46>
 8013568:	4b40      	ldr	r3, [pc, #256]	; (801366c <xTaskIncrementTick+0x14c>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	60fb      	str	r3, [r7, #12]
 801356e:	4b40      	ldr	r3, [pc, #256]	; (8013670 <xTaskIncrementTick+0x150>)
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	4a3e      	ldr	r2, [pc, #248]	; (801366c <xTaskIncrementTick+0x14c>)
 8013574:	6013      	str	r3, [r2, #0]
 8013576:	4a3e      	ldr	r2, [pc, #248]	; (8013670 <xTaskIncrementTick+0x150>)
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	6013      	str	r3, [r2, #0]
 801357c:	4b3d      	ldr	r3, [pc, #244]	; (8013674 <xTaskIncrementTick+0x154>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	3301      	adds	r3, #1
 8013582:	4a3c      	ldr	r2, [pc, #240]	; (8013674 <xTaskIncrementTick+0x154>)
 8013584:	6013      	str	r3, [r2, #0]
 8013586:	f000 faa9 	bl	8013adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801358a:	4b3b      	ldr	r3, [pc, #236]	; (8013678 <xTaskIncrementTick+0x158>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	693a      	ldr	r2, [r7, #16]
 8013590:	429a      	cmp	r2, r3
 8013592:	d348      	bcc.n	8013626 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013594:	4b35      	ldr	r3, [pc, #212]	; (801366c <xTaskIncrementTick+0x14c>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d104      	bne.n	80135a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801359e:	4b36      	ldr	r3, [pc, #216]	; (8013678 <xTaskIncrementTick+0x158>)
 80135a0:	f04f 32ff 	mov.w	r2, #4294967295
 80135a4:	601a      	str	r2, [r3, #0]
					break;
 80135a6:	e03e      	b.n	8013626 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80135a8:	4b30      	ldr	r3, [pc, #192]	; (801366c <xTaskIncrementTick+0x14c>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	68db      	ldr	r3, [r3, #12]
 80135ae:	68db      	ldr	r3, [r3, #12]
 80135b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	685b      	ldr	r3, [r3, #4]
 80135b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80135b8:	693a      	ldr	r2, [r7, #16]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d203      	bcs.n	80135c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80135c0:	4a2d      	ldr	r2, [pc, #180]	; (8013678 <xTaskIncrementTick+0x158>)
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80135c6:	e02e      	b.n	8013626 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	3304      	adds	r3, #4
 80135cc:	4618      	mov	r0, r3
 80135ce:	f7fe fe80 	bl	80122d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d004      	beq.n	80135e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	3318      	adds	r3, #24
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fe fe77 	bl	80122d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135e8:	2201      	movs	r2, #1
 80135ea:	409a      	lsls	r2, r3
 80135ec:	4b23      	ldr	r3, [pc, #140]	; (801367c <xTaskIncrementTick+0x15c>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	4313      	orrs	r3, r2
 80135f2:	4a22      	ldr	r2, [pc, #136]	; (801367c <xTaskIncrementTick+0x15c>)
 80135f4:	6013      	str	r3, [r2, #0]
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135fa:	4613      	mov	r3, r2
 80135fc:	009b      	lsls	r3, r3, #2
 80135fe:	4413      	add	r3, r2
 8013600:	009b      	lsls	r3, r3, #2
 8013602:	4a1f      	ldr	r2, [pc, #124]	; (8013680 <xTaskIncrementTick+0x160>)
 8013604:	441a      	add	r2, r3
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	3304      	adds	r3, #4
 801360a:	4619      	mov	r1, r3
 801360c:	4610      	mov	r0, r2
 801360e:	f7fe fe03 	bl	8012218 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013616:	4b1b      	ldr	r3, [pc, #108]	; (8013684 <xTaskIncrementTick+0x164>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361c:	429a      	cmp	r2, r3
 801361e:	d3b9      	bcc.n	8013594 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013620:	2301      	movs	r3, #1
 8013622:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013624:	e7b6      	b.n	8013594 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013626:	4b17      	ldr	r3, [pc, #92]	; (8013684 <xTaskIncrementTick+0x164>)
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801362c:	4914      	ldr	r1, [pc, #80]	; (8013680 <xTaskIncrementTick+0x160>)
 801362e:	4613      	mov	r3, r2
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	4413      	add	r3, r2
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	440b      	add	r3, r1
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b01      	cmp	r3, #1
 801363c:	d901      	bls.n	8013642 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801363e:	2301      	movs	r3, #1
 8013640:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013642:	4b11      	ldr	r3, [pc, #68]	; (8013688 <xTaskIncrementTick+0x168>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d007      	beq.n	801365a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801364a:	2301      	movs	r3, #1
 801364c:	617b      	str	r3, [r7, #20]
 801364e:	e004      	b.n	801365a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013650:	4b0e      	ldr	r3, [pc, #56]	; (801368c <xTaskIncrementTick+0x16c>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	3301      	adds	r3, #1
 8013656:	4a0d      	ldr	r2, [pc, #52]	; (801368c <xTaskIncrementTick+0x16c>)
 8013658:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801365a:	697b      	ldr	r3, [r7, #20]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3718      	adds	r7, #24
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	20003634 	.word	0x20003634
 8013668:	20003610 	.word	0x20003610
 801366c:	200035c4 	.word	0x200035c4
 8013670:	200035c8 	.word	0x200035c8
 8013674:	20003624 	.word	0x20003624
 8013678:	2000362c 	.word	0x2000362c
 801367c:	20003614 	.word	0x20003614
 8013680:	20003510 	.word	0x20003510
 8013684:	2000350c 	.word	0x2000350c
 8013688:	20003620 	.word	0x20003620
 801368c:	2000361c 	.word	0x2000361c

08013690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013690:	b480      	push	{r7}
 8013692:	b087      	sub	sp, #28
 8013694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013696:	4b29      	ldr	r3, [pc, #164]	; (801373c <vTaskSwitchContext+0xac>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d003      	beq.n	80136a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801369e:	4b28      	ldr	r3, [pc, #160]	; (8013740 <vTaskSwitchContext+0xb0>)
 80136a0:	2201      	movs	r2, #1
 80136a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80136a4:	e044      	b.n	8013730 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80136a6:	4b26      	ldr	r3, [pc, #152]	; (8013740 <vTaskSwitchContext+0xb0>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136ac:	4b25      	ldr	r3, [pc, #148]	; (8013744 <vTaskSwitchContext+0xb4>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	fab3 f383 	clz	r3, r3
 80136b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80136ba:	7afb      	ldrb	r3, [r7, #11]
 80136bc:	f1c3 031f 	rsb	r3, r3, #31
 80136c0:	617b      	str	r3, [r7, #20]
 80136c2:	4921      	ldr	r1, [pc, #132]	; (8013748 <vTaskSwitchContext+0xb8>)
 80136c4:	697a      	ldr	r2, [r7, #20]
 80136c6:	4613      	mov	r3, r2
 80136c8:	009b      	lsls	r3, r3, #2
 80136ca:	4413      	add	r3, r2
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	440b      	add	r3, r1
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d10a      	bne.n	80136ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80136d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136da:	f383 8811 	msr	BASEPRI, r3
 80136de:	f3bf 8f6f 	isb	sy
 80136e2:	f3bf 8f4f 	dsb	sy
 80136e6:	607b      	str	r3, [r7, #4]
}
 80136e8:	bf00      	nop
 80136ea:	e7fe      	b.n	80136ea <vTaskSwitchContext+0x5a>
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	4613      	mov	r3, r2
 80136f0:	009b      	lsls	r3, r3, #2
 80136f2:	4413      	add	r3, r2
 80136f4:	009b      	lsls	r3, r3, #2
 80136f6:	4a14      	ldr	r2, [pc, #80]	; (8013748 <vTaskSwitchContext+0xb8>)
 80136f8:	4413      	add	r3, r2
 80136fa:	613b      	str	r3, [r7, #16]
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	685a      	ldr	r2, [r3, #4]
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	605a      	str	r2, [r3, #4]
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	685a      	ldr	r2, [r3, #4]
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	3308      	adds	r3, #8
 801370e:	429a      	cmp	r2, r3
 8013710:	d104      	bne.n	801371c <vTaskSwitchContext+0x8c>
 8013712:	693b      	ldr	r3, [r7, #16]
 8013714:	685b      	ldr	r3, [r3, #4]
 8013716:	685a      	ldr	r2, [r3, #4]
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	605a      	str	r2, [r3, #4]
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	4a0a      	ldr	r2, [pc, #40]	; (801374c <vTaskSwitchContext+0xbc>)
 8013724:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013726:	4b09      	ldr	r3, [pc, #36]	; (801374c <vTaskSwitchContext+0xbc>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	334c      	adds	r3, #76	; 0x4c
 801372c:	4a08      	ldr	r2, [pc, #32]	; (8013750 <vTaskSwitchContext+0xc0>)
 801372e:	6013      	str	r3, [r2, #0]
}
 8013730:	bf00      	nop
 8013732:	371c      	adds	r7, #28
 8013734:	46bd      	mov	sp, r7
 8013736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373a:	4770      	bx	lr
 801373c:	20003634 	.word	0x20003634
 8013740:	20003620 	.word	0x20003620
 8013744:	20003614 	.word	0x20003614
 8013748:	20003510 	.word	0x20003510
 801374c:	2000350c 	.word	0x2000350c
 8013750:	20000330 	.word	0x20000330

08013754 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
 801375c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d10a      	bne.n	801377a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013768:	f383 8811 	msr	BASEPRI, r3
 801376c:	f3bf 8f6f 	isb	sy
 8013770:	f3bf 8f4f 	dsb	sy
 8013774:	60fb      	str	r3, [r7, #12]
}
 8013776:	bf00      	nop
 8013778:	e7fe      	b.n	8013778 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801377a:	4b07      	ldr	r3, [pc, #28]	; (8013798 <vTaskPlaceOnEventList+0x44>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	3318      	adds	r3, #24
 8013780:	4619      	mov	r1, r3
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f7fe fd6c 	bl	8012260 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013788:	2101      	movs	r1, #1
 801378a:	6838      	ldr	r0, [r7, #0]
 801378c:	f000 fc8c 	bl	80140a8 <prvAddCurrentTaskToDelayedList>
}
 8013790:	bf00      	nop
 8013792:	3710      	adds	r7, #16
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}
 8013798:	2000350c 	.word	0x2000350c

0801379c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b086      	sub	sp, #24
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	68db      	ldr	r3, [r3, #12]
 80137aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d10a      	bne.n	80137c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80137b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b6:	f383 8811 	msr	BASEPRI, r3
 80137ba:	f3bf 8f6f 	isb	sy
 80137be:	f3bf 8f4f 	dsb	sy
 80137c2:	60fb      	str	r3, [r7, #12]
}
 80137c4:	bf00      	nop
 80137c6:	e7fe      	b.n	80137c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	3318      	adds	r3, #24
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fe fd80 	bl	80122d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80137d2:	4b1d      	ldr	r3, [pc, #116]	; (8013848 <xTaskRemoveFromEventList+0xac>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d11c      	bne.n	8013814 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	3304      	adds	r3, #4
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fe fd77 	bl	80122d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137e8:	2201      	movs	r2, #1
 80137ea:	409a      	lsls	r2, r3
 80137ec:	4b17      	ldr	r3, [pc, #92]	; (801384c <xTaskRemoveFromEventList+0xb0>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4313      	orrs	r3, r2
 80137f2:	4a16      	ldr	r2, [pc, #88]	; (801384c <xTaskRemoveFromEventList+0xb0>)
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137fa:	4613      	mov	r3, r2
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	4413      	add	r3, r2
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4a13      	ldr	r2, [pc, #76]	; (8013850 <xTaskRemoveFromEventList+0xb4>)
 8013804:	441a      	add	r2, r3
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	3304      	adds	r3, #4
 801380a:	4619      	mov	r1, r3
 801380c:	4610      	mov	r0, r2
 801380e:	f7fe fd03 	bl	8012218 <vListInsertEnd>
 8013812:	e005      	b.n	8013820 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	3318      	adds	r3, #24
 8013818:	4619      	mov	r1, r3
 801381a:	480e      	ldr	r0, [pc, #56]	; (8013854 <xTaskRemoveFromEventList+0xb8>)
 801381c:	f7fe fcfc 	bl	8012218 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013820:	693b      	ldr	r3, [r7, #16]
 8013822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013824:	4b0c      	ldr	r3, [pc, #48]	; (8013858 <xTaskRemoveFromEventList+0xbc>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801382a:	429a      	cmp	r2, r3
 801382c:	d905      	bls.n	801383a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801382e:	2301      	movs	r3, #1
 8013830:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013832:	4b0a      	ldr	r3, [pc, #40]	; (801385c <xTaskRemoveFromEventList+0xc0>)
 8013834:	2201      	movs	r2, #1
 8013836:	601a      	str	r2, [r3, #0]
 8013838:	e001      	b.n	801383e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801383a:	2300      	movs	r3, #0
 801383c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801383e:	697b      	ldr	r3, [r7, #20]
}
 8013840:	4618      	mov	r0, r3
 8013842:	3718      	adds	r7, #24
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	20003634 	.word	0x20003634
 801384c:	20003614 	.word	0x20003614
 8013850:	20003510 	.word	0x20003510
 8013854:	200035cc 	.word	0x200035cc
 8013858:	2000350c 	.word	0x2000350c
 801385c:	20003620 	.word	0x20003620

08013860 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013868:	4b06      	ldr	r3, [pc, #24]	; (8013884 <vTaskInternalSetTimeOutState+0x24>)
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013870:	4b05      	ldr	r3, [pc, #20]	; (8013888 <vTaskInternalSetTimeOutState+0x28>)
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	605a      	str	r2, [r3, #4]
}
 8013878:	bf00      	nop
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr
 8013884:	20003624 	.word	0x20003624
 8013888:	20003610 	.word	0x20003610

0801388c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801388c:	b580      	push	{r7, lr}
 801388e:	b088      	sub	sp, #32
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
 8013894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d10a      	bne.n	80138b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a0:	f383 8811 	msr	BASEPRI, r3
 80138a4:	f3bf 8f6f 	isb	sy
 80138a8:	f3bf 8f4f 	dsb	sy
 80138ac:	613b      	str	r3, [r7, #16]
}
 80138ae:	bf00      	nop
 80138b0:	e7fe      	b.n	80138b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d10a      	bne.n	80138ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80138b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138bc:	f383 8811 	msr	BASEPRI, r3
 80138c0:	f3bf 8f6f 	isb	sy
 80138c4:	f3bf 8f4f 	dsb	sy
 80138c8:	60fb      	str	r3, [r7, #12]
}
 80138ca:	bf00      	nop
 80138cc:	e7fe      	b.n	80138cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80138ce:	f000 fd81 	bl	80143d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80138d2:	4b1d      	ldr	r3, [pc, #116]	; (8013948 <xTaskCheckForTimeOut+0xbc>)
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	685b      	ldr	r3, [r3, #4]
 80138dc:	69ba      	ldr	r2, [r7, #24]
 80138de:	1ad3      	subs	r3, r2, r3
 80138e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ea:	d102      	bne.n	80138f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80138ec:	2300      	movs	r3, #0
 80138ee:	61fb      	str	r3, [r7, #28]
 80138f0:	e023      	b.n	801393a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681a      	ldr	r2, [r3, #0]
 80138f6:	4b15      	ldr	r3, [pc, #84]	; (801394c <xTaskCheckForTimeOut+0xc0>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d007      	beq.n	801390e <xTaskCheckForTimeOut+0x82>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	69ba      	ldr	r2, [r7, #24]
 8013904:	429a      	cmp	r2, r3
 8013906:	d302      	bcc.n	801390e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013908:	2301      	movs	r3, #1
 801390a:	61fb      	str	r3, [r7, #28]
 801390c:	e015      	b.n	801393a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	697a      	ldr	r2, [r7, #20]
 8013914:	429a      	cmp	r2, r3
 8013916:	d20b      	bcs.n	8013930 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	681a      	ldr	r2, [r3, #0]
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	1ad2      	subs	r2, r2, r3
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7ff ff9b 	bl	8013860 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801392a:	2300      	movs	r3, #0
 801392c:	61fb      	str	r3, [r7, #28]
 801392e:	e004      	b.n	801393a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	2200      	movs	r2, #0
 8013934:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013936:	2301      	movs	r3, #1
 8013938:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801393a:	f000 fd7b 	bl	8014434 <vPortExitCritical>

	return xReturn;
 801393e:	69fb      	ldr	r3, [r7, #28]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3720      	adds	r7, #32
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	20003610 	.word	0x20003610
 801394c:	20003624 	.word	0x20003624

08013950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013950:	b480      	push	{r7}
 8013952:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013954:	4b03      	ldr	r3, [pc, #12]	; (8013964 <vTaskMissedYield+0x14>)
 8013956:	2201      	movs	r2, #1
 8013958:	601a      	str	r2, [r3, #0]
}
 801395a:	bf00      	nop
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr
 8013964:	20003620 	.word	0x20003620

08013968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013970:	f000 f852 	bl	8013a18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013974:	4b06      	ldr	r3, [pc, #24]	; (8013990 <prvIdleTask+0x28>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2b01      	cmp	r3, #1
 801397a:	d9f9      	bls.n	8013970 <prvIdleTask+0x8>
			{
				taskYIELD();
 801397c:	4b05      	ldr	r3, [pc, #20]	; (8013994 <prvIdleTask+0x2c>)
 801397e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013982:	601a      	str	r2, [r3, #0]
 8013984:	f3bf 8f4f 	dsb	sy
 8013988:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801398c:	e7f0      	b.n	8013970 <prvIdleTask+0x8>
 801398e:	bf00      	nop
 8013990:	20003510 	.word	0x20003510
 8013994:	e000ed04 	.word	0xe000ed04

08013998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b082      	sub	sp, #8
 801399c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801399e:	2300      	movs	r3, #0
 80139a0:	607b      	str	r3, [r7, #4]
 80139a2:	e00c      	b.n	80139be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80139a4:	687a      	ldr	r2, [r7, #4]
 80139a6:	4613      	mov	r3, r2
 80139a8:	009b      	lsls	r3, r3, #2
 80139aa:	4413      	add	r3, r2
 80139ac:	009b      	lsls	r3, r3, #2
 80139ae:	4a12      	ldr	r2, [pc, #72]	; (80139f8 <prvInitialiseTaskLists+0x60>)
 80139b0:	4413      	add	r3, r2
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7fe fc03 	bl	80121be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	3301      	adds	r3, #1
 80139bc:	607b      	str	r3, [r7, #4]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2b06      	cmp	r3, #6
 80139c2:	d9ef      	bls.n	80139a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80139c4:	480d      	ldr	r0, [pc, #52]	; (80139fc <prvInitialiseTaskLists+0x64>)
 80139c6:	f7fe fbfa 	bl	80121be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80139ca:	480d      	ldr	r0, [pc, #52]	; (8013a00 <prvInitialiseTaskLists+0x68>)
 80139cc:	f7fe fbf7 	bl	80121be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80139d0:	480c      	ldr	r0, [pc, #48]	; (8013a04 <prvInitialiseTaskLists+0x6c>)
 80139d2:	f7fe fbf4 	bl	80121be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80139d6:	480c      	ldr	r0, [pc, #48]	; (8013a08 <prvInitialiseTaskLists+0x70>)
 80139d8:	f7fe fbf1 	bl	80121be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80139dc:	480b      	ldr	r0, [pc, #44]	; (8013a0c <prvInitialiseTaskLists+0x74>)
 80139de:	f7fe fbee 	bl	80121be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80139e2:	4b0b      	ldr	r3, [pc, #44]	; (8013a10 <prvInitialiseTaskLists+0x78>)
 80139e4:	4a05      	ldr	r2, [pc, #20]	; (80139fc <prvInitialiseTaskLists+0x64>)
 80139e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80139e8:	4b0a      	ldr	r3, [pc, #40]	; (8013a14 <prvInitialiseTaskLists+0x7c>)
 80139ea:	4a05      	ldr	r2, [pc, #20]	; (8013a00 <prvInitialiseTaskLists+0x68>)
 80139ec:	601a      	str	r2, [r3, #0]
}
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	20003510 	.word	0x20003510
 80139fc:	2000359c 	.word	0x2000359c
 8013a00:	200035b0 	.word	0x200035b0
 8013a04:	200035cc 	.word	0x200035cc
 8013a08:	200035e0 	.word	0x200035e0
 8013a0c:	200035f8 	.word	0x200035f8
 8013a10:	200035c4 	.word	0x200035c4
 8013a14:	200035c8 	.word	0x200035c8

08013a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a1e:	e019      	b.n	8013a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013a20:	f000 fcd8 	bl	80143d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a24:	4b10      	ldr	r3, [pc, #64]	; (8013a68 <prvCheckTasksWaitingTermination+0x50>)
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	3304      	adds	r3, #4
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7fe fc4e 	bl	80122d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013a36:	4b0d      	ldr	r3, [pc, #52]	; (8013a6c <prvCheckTasksWaitingTermination+0x54>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	3b01      	subs	r3, #1
 8013a3c:	4a0b      	ldr	r2, [pc, #44]	; (8013a6c <prvCheckTasksWaitingTermination+0x54>)
 8013a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013a40:	4b0b      	ldr	r3, [pc, #44]	; (8013a70 <prvCheckTasksWaitingTermination+0x58>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	3b01      	subs	r3, #1
 8013a46:	4a0a      	ldr	r2, [pc, #40]	; (8013a70 <prvCheckTasksWaitingTermination+0x58>)
 8013a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013a4a:	f000 fcf3 	bl	8014434 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f000 f810 	bl	8013a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013a54:	4b06      	ldr	r3, [pc, #24]	; (8013a70 <prvCheckTasksWaitingTermination+0x58>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d1e1      	bne.n	8013a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013a5c:	bf00      	nop
 8013a5e:	bf00      	nop
 8013a60:	3708      	adds	r7, #8
 8013a62:	46bd      	mov	sp, r7
 8013a64:	bd80      	pop	{r7, pc}
 8013a66:	bf00      	nop
 8013a68:	200035e0 	.word	0x200035e0
 8013a6c:	2000360c 	.word	0x2000360c
 8013a70:	200035f4 	.word	0x200035f4

08013a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b084      	sub	sp, #16
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	334c      	adds	r3, #76	; 0x4c
 8013a80:	4618      	mov	r0, r3
 8013a82:	f002 fe2d 	bl	80166e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d108      	bne.n	8013aa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a94:	4618      	mov	r0, r3
 8013a96:	f000 fe8b 	bl	80147b0 <vPortFree>
				vPortFree( pxTCB );
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f000 fe88 	bl	80147b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013aa0:	e018      	b.n	8013ad4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d103      	bne.n	8013ab4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f000 fe7f 	bl	80147b0 <vPortFree>
	}
 8013ab2:	e00f      	b.n	8013ad4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8013aba:	2b02      	cmp	r3, #2
 8013abc:	d00a      	beq.n	8013ad4 <prvDeleteTCB+0x60>
	__asm volatile
 8013abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac2:	f383 8811 	msr	BASEPRI, r3
 8013ac6:	f3bf 8f6f 	isb	sy
 8013aca:	f3bf 8f4f 	dsb	sy
 8013ace:	60fb      	str	r3, [r7, #12]
}
 8013ad0:	bf00      	nop
 8013ad2:	e7fe      	b.n	8013ad2 <prvDeleteTCB+0x5e>
	}
 8013ad4:	bf00      	nop
 8013ad6:	3710      	adds	r7, #16
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}

08013adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013adc:	b480      	push	{r7}
 8013ade:	b083      	sub	sp, #12
 8013ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ae2:	4b0c      	ldr	r3, [pc, #48]	; (8013b14 <prvResetNextTaskUnblockTime+0x38>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d104      	bne.n	8013af6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013aec:	4b0a      	ldr	r3, [pc, #40]	; (8013b18 <prvResetNextTaskUnblockTime+0x3c>)
 8013aee:	f04f 32ff 	mov.w	r2, #4294967295
 8013af2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013af4:	e008      	b.n	8013b08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013af6:	4b07      	ldr	r3, [pc, #28]	; (8013b14 <prvResetNextTaskUnblockTime+0x38>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	68db      	ldr	r3, [r3, #12]
 8013afc:	68db      	ldr	r3, [r3, #12]
 8013afe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	4a04      	ldr	r2, [pc, #16]	; (8013b18 <prvResetNextTaskUnblockTime+0x3c>)
 8013b06:	6013      	str	r3, [r2, #0]
}
 8013b08:	bf00      	nop
 8013b0a:	370c      	adds	r7, #12
 8013b0c:	46bd      	mov	sp, r7
 8013b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b12:	4770      	bx	lr
 8013b14:	200035c4 	.word	0x200035c4
 8013b18:	2000362c 	.word	0x2000362c

08013b1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013b1c:	b480      	push	{r7}
 8013b1e:	b083      	sub	sp, #12
 8013b20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013b22:	4b0b      	ldr	r3, [pc, #44]	; (8013b50 <xTaskGetSchedulerState+0x34>)
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d102      	bne.n	8013b30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013b2a:	2301      	movs	r3, #1
 8013b2c:	607b      	str	r3, [r7, #4]
 8013b2e:	e008      	b.n	8013b42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013b30:	4b08      	ldr	r3, [pc, #32]	; (8013b54 <xTaskGetSchedulerState+0x38>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d102      	bne.n	8013b3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013b38:	2302      	movs	r3, #2
 8013b3a:	607b      	str	r3, [r7, #4]
 8013b3c:	e001      	b.n	8013b42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013b42:	687b      	ldr	r3, [r7, #4]
	}
 8013b44:	4618      	mov	r0, r3
 8013b46:	370c      	adds	r7, #12
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr
 8013b50:	20003618 	.word	0x20003618
 8013b54:	20003634 	.word	0x20003634

08013b58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013b64:	2300      	movs	r3, #0
 8013b66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d05e      	beq.n	8013c2c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b72:	4b31      	ldr	r3, [pc, #196]	; (8013c38 <xTaskPriorityInherit+0xe0>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b78:	429a      	cmp	r2, r3
 8013b7a:	d24e      	bcs.n	8013c1a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	699b      	ldr	r3, [r3, #24]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	db06      	blt.n	8013b92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b84:	4b2c      	ldr	r3, [pc, #176]	; (8013c38 <xTaskPriorityInherit+0xe0>)
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b8a:	f1c3 0207 	rsb	r2, r3, #7
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	6959      	ldr	r1, [r3, #20]
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b9a:	4613      	mov	r3, r2
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	4413      	add	r3, r2
 8013ba0:	009b      	lsls	r3, r3, #2
 8013ba2:	4a26      	ldr	r2, [pc, #152]	; (8013c3c <xTaskPriorityInherit+0xe4>)
 8013ba4:	4413      	add	r3, r2
 8013ba6:	4299      	cmp	r1, r3
 8013ba8:	d12f      	bne.n	8013c0a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	3304      	adds	r3, #4
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7fe fb8f 	bl	80122d2 <uxListRemove>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d10a      	bne.n	8013bd0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bc4:	43da      	mvns	r2, r3
 8013bc6:	4b1e      	ldr	r3, [pc, #120]	; (8013c40 <xTaskPriorityInherit+0xe8>)
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4013      	ands	r3, r2
 8013bcc:	4a1c      	ldr	r2, [pc, #112]	; (8013c40 <xTaskPriorityInherit+0xe8>)
 8013bce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013bd0:	4b19      	ldr	r3, [pc, #100]	; (8013c38 <xTaskPriorityInherit+0xe0>)
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013bda:	68bb      	ldr	r3, [r7, #8]
 8013bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bde:	2201      	movs	r2, #1
 8013be0:	409a      	lsls	r2, r3
 8013be2:	4b17      	ldr	r3, [pc, #92]	; (8013c40 <xTaskPriorityInherit+0xe8>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	4313      	orrs	r3, r2
 8013be8:	4a15      	ldr	r2, [pc, #84]	; (8013c40 <xTaskPriorityInherit+0xe8>)
 8013bea:	6013      	str	r3, [r2, #0]
 8013bec:	68bb      	ldr	r3, [r7, #8]
 8013bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	4413      	add	r3, r2
 8013bf6:	009b      	lsls	r3, r3, #2
 8013bf8:	4a10      	ldr	r2, [pc, #64]	; (8013c3c <xTaskPriorityInherit+0xe4>)
 8013bfa:	441a      	add	r2, r3
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	3304      	adds	r3, #4
 8013c00:	4619      	mov	r1, r3
 8013c02:	4610      	mov	r0, r2
 8013c04:	f7fe fb08 	bl	8012218 <vListInsertEnd>
 8013c08:	e004      	b.n	8013c14 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013c0a:	4b0b      	ldr	r3, [pc, #44]	; (8013c38 <xTaskPriorityInherit+0xe0>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013c14:	2301      	movs	r3, #1
 8013c16:	60fb      	str	r3, [r7, #12]
 8013c18:	e008      	b.n	8013c2c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c1e:	4b06      	ldr	r3, [pc, #24]	; (8013c38 <xTaskPriorityInherit+0xe0>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c24:	429a      	cmp	r2, r3
 8013c26:	d201      	bcs.n	8013c2c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013c28:	2301      	movs	r3, #1
 8013c2a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
	}
 8013c2e:	4618      	mov	r0, r3
 8013c30:	3710      	adds	r7, #16
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	2000350c 	.word	0x2000350c
 8013c3c:	20003510 	.word	0x20003510
 8013c40:	20003614 	.word	0x20003614

08013c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b086      	sub	sp, #24
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013c50:	2300      	movs	r3, #0
 8013c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d06e      	beq.n	8013d38 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013c5a:	4b3a      	ldr	r3, [pc, #232]	; (8013d44 <xTaskPriorityDisinherit+0x100>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	693a      	ldr	r2, [r7, #16]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d00a      	beq.n	8013c7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8013c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c68:	f383 8811 	msr	BASEPRI, r3
 8013c6c:	f3bf 8f6f 	isb	sy
 8013c70:	f3bf 8f4f 	dsb	sy
 8013c74:	60fb      	str	r3, [r7, #12]
}
 8013c76:	bf00      	nop
 8013c78:	e7fe      	b.n	8013c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8013c7a:	693b      	ldr	r3, [r7, #16]
 8013c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d10a      	bne.n	8013c98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8013c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c86:	f383 8811 	msr	BASEPRI, r3
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	f3bf 8f4f 	dsb	sy
 8013c92:	60bb      	str	r3, [r7, #8]
}
 8013c94:	bf00      	nop
 8013c96:	e7fe      	b.n	8013c96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c9c:	1e5a      	subs	r2, r3, #1
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d044      	beq.n	8013d38 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013cae:	693b      	ldr	r3, [r7, #16]
 8013cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d140      	bne.n	8013d38 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	3304      	adds	r3, #4
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7fe fb09 	bl	80122d2 <uxListRemove>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d115      	bne.n	8013cf2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cca:	491f      	ldr	r1, [pc, #124]	; (8013d48 <xTaskPriorityDisinherit+0x104>)
 8013ccc:	4613      	mov	r3, r2
 8013cce:	009b      	lsls	r3, r3, #2
 8013cd0:	4413      	add	r3, r2
 8013cd2:	009b      	lsls	r3, r3, #2
 8013cd4:	440b      	add	r3, r1
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10a      	bne.n	8013cf2 <xTaskPriorityDisinherit+0xae>
 8013cdc:	693b      	ldr	r3, [r7, #16]
 8013cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ce0:	2201      	movs	r2, #1
 8013ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8013ce6:	43da      	mvns	r2, r3
 8013ce8:	4b18      	ldr	r3, [pc, #96]	; (8013d4c <xTaskPriorityDisinherit+0x108>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	4013      	ands	r3, r2
 8013cee:	4a17      	ldr	r2, [pc, #92]	; (8013d4c <xTaskPriorityDisinherit+0x108>)
 8013cf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cf6:	693b      	ldr	r3, [r7, #16]
 8013cf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cfe:	f1c3 0207 	rsb	r2, r3, #7
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d0a:	2201      	movs	r2, #1
 8013d0c:	409a      	lsls	r2, r3
 8013d0e:	4b0f      	ldr	r3, [pc, #60]	; (8013d4c <xTaskPriorityDisinherit+0x108>)
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4313      	orrs	r3, r2
 8013d14:	4a0d      	ldr	r2, [pc, #52]	; (8013d4c <xTaskPriorityDisinherit+0x108>)
 8013d16:	6013      	str	r3, [r2, #0]
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d1c:	4613      	mov	r3, r2
 8013d1e:	009b      	lsls	r3, r3, #2
 8013d20:	4413      	add	r3, r2
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	4a08      	ldr	r2, [pc, #32]	; (8013d48 <xTaskPriorityDisinherit+0x104>)
 8013d26:	441a      	add	r2, r3
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	3304      	adds	r3, #4
 8013d2c:	4619      	mov	r1, r3
 8013d2e:	4610      	mov	r0, r2
 8013d30:	f7fe fa72 	bl	8012218 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013d34:	2301      	movs	r3, #1
 8013d36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013d38:	697b      	ldr	r3, [r7, #20]
	}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3718      	adds	r7, #24
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	2000350c 	.word	0x2000350c
 8013d48:	20003510 	.word	0x20003510
 8013d4c:	20003614 	.word	0x20003614

08013d50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b088      	sub	sp, #32
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d077      	beq.n	8013e58 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10a      	bne.n	8013d86 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8013d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	60fb      	str	r3, [r7, #12]
}
 8013d82:	bf00      	nop
 8013d84:	e7fe      	b.n	8013d84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013d86:	69bb      	ldr	r3, [r7, #24]
 8013d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d8a:	683a      	ldr	r2, [r7, #0]
 8013d8c:	429a      	cmp	r2, r3
 8013d8e:	d902      	bls.n	8013d96 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	61fb      	str	r3, [r7, #28]
 8013d94:	e002      	b.n	8013d9c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d9a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013da0:	69fa      	ldr	r2, [r7, #28]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d058      	beq.n	8013e58 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013daa:	697a      	ldr	r2, [r7, #20]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d153      	bne.n	8013e58 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013db0:	4b2b      	ldr	r3, [pc, #172]	; (8013e60 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	69ba      	ldr	r2, [r7, #24]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d10a      	bne.n	8013dd0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbe:	f383 8811 	msr	BASEPRI, r3
 8013dc2:	f3bf 8f6f 	isb	sy
 8013dc6:	f3bf 8f4f 	dsb	sy
 8013dca:	60bb      	str	r3, [r7, #8]
}
 8013dcc:	bf00      	nop
 8013dce:	e7fe      	b.n	8013dce <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dd4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013dd6:	69bb      	ldr	r3, [r7, #24]
 8013dd8:	69fa      	ldr	r2, [r7, #28]
 8013dda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	699b      	ldr	r3, [r3, #24]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	db04      	blt.n	8013dee <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	f1c3 0207 	rsb	r2, r3, #7
 8013dea:	69bb      	ldr	r3, [r7, #24]
 8013dec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	6959      	ldr	r1, [r3, #20]
 8013df2:	693a      	ldr	r2, [r7, #16]
 8013df4:	4613      	mov	r3, r2
 8013df6:	009b      	lsls	r3, r3, #2
 8013df8:	4413      	add	r3, r2
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	4a19      	ldr	r2, [pc, #100]	; (8013e64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013dfe:	4413      	add	r3, r2
 8013e00:	4299      	cmp	r1, r3
 8013e02:	d129      	bne.n	8013e58 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e04:	69bb      	ldr	r3, [r7, #24]
 8013e06:	3304      	adds	r3, #4
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7fe fa62 	bl	80122d2 <uxListRemove>
 8013e0e:	4603      	mov	r3, r0
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d10a      	bne.n	8013e2a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8013e14:	69bb      	ldr	r3, [r7, #24]
 8013e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e18:	2201      	movs	r2, #1
 8013e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8013e1e:	43da      	mvns	r2, r3
 8013e20:	4b11      	ldr	r3, [pc, #68]	; (8013e68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	4013      	ands	r3, r2
 8013e26:	4a10      	ldr	r2, [pc, #64]	; (8013e68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013e28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013e2a:	69bb      	ldr	r3, [r7, #24]
 8013e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e2e:	2201      	movs	r2, #1
 8013e30:	409a      	lsls	r2, r3
 8013e32:	4b0d      	ldr	r3, [pc, #52]	; (8013e68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	4313      	orrs	r3, r2
 8013e38:	4a0b      	ldr	r2, [pc, #44]	; (8013e68 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8013e3a:	6013      	str	r3, [r2, #0]
 8013e3c:	69bb      	ldr	r3, [r7, #24]
 8013e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e40:	4613      	mov	r3, r2
 8013e42:	009b      	lsls	r3, r3, #2
 8013e44:	4413      	add	r3, r2
 8013e46:	009b      	lsls	r3, r3, #2
 8013e48:	4a06      	ldr	r2, [pc, #24]	; (8013e64 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8013e4a:	441a      	add	r2, r3
 8013e4c:	69bb      	ldr	r3, [r7, #24]
 8013e4e:	3304      	adds	r3, #4
 8013e50:	4619      	mov	r1, r3
 8013e52:	4610      	mov	r0, r2
 8013e54:	f7fe f9e0 	bl	8012218 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e58:	bf00      	nop
 8013e5a:	3720      	adds	r7, #32
 8013e5c:	46bd      	mov	sp, r7
 8013e5e:	bd80      	pop	{r7, pc}
 8013e60:	2000350c 	.word	0x2000350c
 8013e64:	20003510 	.word	0x20003510
 8013e68:	20003614 	.word	0x20003614

08013e6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013e6c:	b480      	push	{r7}
 8013e6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013e70:	4b07      	ldr	r3, [pc, #28]	; (8013e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d004      	beq.n	8013e82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013e78:	4b05      	ldr	r3, [pc, #20]	; (8013e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013e7e:	3201      	adds	r2, #1
 8013e80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013e82:	4b03      	ldr	r3, [pc, #12]	; (8013e90 <pvTaskIncrementMutexHeldCount+0x24>)
 8013e84:	681b      	ldr	r3, [r3, #0]
	}
 8013e86:	4618      	mov	r0, r3
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e8e:	4770      	bx	lr
 8013e90:	2000350c 	.word	0x2000350c

08013e94 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8013e9e:	f000 fa99 	bl	80143d4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8013ea2:	4b20      	ldr	r3, [pc, #128]	; (8013f24 <ulTaskNotifyTake+0x90>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d113      	bne.n	8013ed6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013eae:	4b1d      	ldr	r3, [pc, #116]	; (8013f24 <ulTaskNotifyTake+0x90>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00b      	beq.n	8013ed6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013ebe:	2101      	movs	r1, #1
 8013ec0:	6838      	ldr	r0, [r7, #0]
 8013ec2:	f000 f8f1 	bl	80140a8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8013ec6:	4b18      	ldr	r3, [pc, #96]	; (8013f28 <ulTaskNotifyTake+0x94>)
 8013ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ecc:	601a      	str	r2, [r3, #0]
 8013ece:	f3bf 8f4f 	dsb	sy
 8013ed2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013ed6:	f000 faad 	bl	8014434 <vPortExitCritical>

		taskENTER_CRITICAL();
 8013eda:	f000 fa7b 	bl	80143d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8013ede:	4b11      	ldr	r3, [pc, #68]	; (8013f24 <ulTaskNotifyTake+0x90>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013ee6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d00e      	beq.n	8013f0c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d005      	beq.n	8013f00 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8013ef4:	4b0b      	ldr	r3, [pc, #44]	; (8013f24 <ulTaskNotifyTake+0x90>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8013efe:	e005      	b.n	8013f0c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8013f00:	4b08      	ldr	r3, [pc, #32]	; (8013f24 <ulTaskNotifyTake+0x90>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	68fa      	ldr	r2, [r7, #12]
 8013f06:	3a01      	subs	r2, #1
 8013f08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013f0c:	4b05      	ldr	r3, [pc, #20]	; (8013f24 <ulTaskNotifyTake+0x90>)
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2200      	movs	r2, #0
 8013f12:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 8013f16:	f000 fa8d 	bl	8014434 <vPortExitCritical>

		return ulReturn;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3710      	adds	r7, #16
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	2000350c 	.word	0x2000350c
 8013f28:	e000ed04 	.word	0xe000ed04

08013f2c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b08a      	sub	sp, #40	; 0x28
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	60b9      	str	r1, [r7, #8]
 8013f36:	603b      	str	r3, [r7, #0]
 8013f38:	4613      	mov	r3, r2
 8013f3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8013f3c:	2301      	movs	r3, #1
 8013f3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d10a      	bne.n	8013f5c <xTaskGenericNotify+0x30>
	__asm volatile
 8013f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f4a:	f383 8811 	msr	BASEPRI, r3
 8013f4e:	f3bf 8f6f 	isb	sy
 8013f52:	f3bf 8f4f 	dsb	sy
 8013f56:	61bb      	str	r3, [r7, #24]
}
 8013f58:	bf00      	nop
 8013f5a:	e7fe      	b.n	8013f5a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8013f60:	f000 fa38 	bl	80143d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d004      	beq.n	8013f74 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013f6a:	6a3b      	ldr	r3, [r7, #32]
 8013f6c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013f74:	6a3b      	ldr	r3, [r7, #32]
 8013f76:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8013f7a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013f7c:	6a3b      	ldr	r3, [r7, #32]
 8013f7e:	2202      	movs	r2, #2
 8013f80:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

			switch( eAction )
 8013f84:	79fb      	ldrb	r3, [r7, #7]
 8013f86:	2b04      	cmp	r3, #4
 8013f88:	d82d      	bhi.n	8013fe6 <xTaskGenericNotify+0xba>
 8013f8a:	a201      	add	r2, pc, #4	; (adr r2, 8013f90 <xTaskGenericNotify+0x64>)
 8013f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f90:	08014009 	.word	0x08014009
 8013f94:	08013fa5 	.word	0x08013fa5
 8013f98:	08013fb7 	.word	0x08013fb7
 8013f9c:	08013fc7 	.word	0x08013fc7
 8013fa0:	08013fd1 	.word	0x08013fd1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013fa4:	6a3b      	ldr	r3, [r7, #32]
 8013fa6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013faa:	68bb      	ldr	r3, [r7, #8]
 8013fac:	431a      	orrs	r2, r3
 8013fae:	6a3b      	ldr	r3, [r7, #32]
 8013fb0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8013fb4:	e02b      	b.n	801400e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013fbc:	1c5a      	adds	r2, r3, #1
 8013fbe:	6a3b      	ldr	r3, [r7, #32]
 8013fc0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8013fc4:	e023      	b.n	801400e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013fc6:	6a3b      	ldr	r3, [r7, #32]
 8013fc8:	68ba      	ldr	r2, [r7, #8]
 8013fca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					break;
 8013fce:	e01e      	b.n	801400e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8013fd0:	7ffb      	ldrb	r3, [r7, #31]
 8013fd2:	2b02      	cmp	r3, #2
 8013fd4:	d004      	beq.n	8013fe0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013fd6:	6a3b      	ldr	r3, [r7, #32]
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8013fde:	e016      	b.n	801400e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8013fe4:	e013      	b.n	801400e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013fe6:	6a3b      	ldr	r3, [r7, #32]
 8013fe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8013fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ff0:	d00c      	beq.n	801400c <xTaskGenericNotify+0xe0>
	__asm volatile
 8013ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff6:	f383 8811 	msr	BASEPRI, r3
 8013ffa:	f3bf 8f6f 	isb	sy
 8013ffe:	f3bf 8f4f 	dsb	sy
 8014002:	617b      	str	r3, [r7, #20]
}
 8014004:	bf00      	nop
 8014006:	e7fe      	b.n	8014006 <xTaskGenericNotify+0xda>
					break;
 8014008:	bf00      	nop
 801400a:	e000      	b.n	801400e <xTaskGenericNotify+0xe2>

					break;
 801400c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801400e:	7ffb      	ldrb	r3, [r7, #31]
 8014010:	2b01      	cmp	r3, #1
 8014012:	d139      	bne.n	8014088 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014014:	6a3b      	ldr	r3, [r7, #32]
 8014016:	3304      	adds	r3, #4
 8014018:	4618      	mov	r0, r3
 801401a:	f7fe f95a 	bl	80122d2 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801401e:	6a3b      	ldr	r3, [r7, #32]
 8014020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014022:	2201      	movs	r2, #1
 8014024:	409a      	lsls	r2, r3
 8014026:	4b1c      	ldr	r3, [pc, #112]	; (8014098 <xTaskGenericNotify+0x16c>)
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	4313      	orrs	r3, r2
 801402c:	4a1a      	ldr	r2, [pc, #104]	; (8014098 <xTaskGenericNotify+0x16c>)
 801402e:	6013      	str	r3, [r2, #0]
 8014030:	6a3b      	ldr	r3, [r7, #32]
 8014032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014034:	4613      	mov	r3, r2
 8014036:	009b      	lsls	r3, r3, #2
 8014038:	4413      	add	r3, r2
 801403a:	009b      	lsls	r3, r3, #2
 801403c:	4a17      	ldr	r2, [pc, #92]	; (801409c <xTaskGenericNotify+0x170>)
 801403e:	441a      	add	r2, r3
 8014040:	6a3b      	ldr	r3, [r7, #32]
 8014042:	3304      	adds	r3, #4
 8014044:	4619      	mov	r1, r3
 8014046:	4610      	mov	r0, r2
 8014048:	f7fe f8e6 	bl	8012218 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801404c:	6a3b      	ldr	r3, [r7, #32]
 801404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014050:	2b00      	cmp	r3, #0
 8014052:	d00a      	beq.n	801406a <xTaskGenericNotify+0x13e>
	__asm volatile
 8014054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014058:	f383 8811 	msr	BASEPRI, r3
 801405c:	f3bf 8f6f 	isb	sy
 8014060:	f3bf 8f4f 	dsb	sy
 8014064:	613b      	str	r3, [r7, #16]
}
 8014066:	bf00      	nop
 8014068:	e7fe      	b.n	8014068 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801406a:	6a3b      	ldr	r3, [r7, #32]
 801406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801406e:	4b0c      	ldr	r3, [pc, #48]	; (80140a0 <xTaskGenericNotify+0x174>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014074:	429a      	cmp	r2, r3
 8014076:	d907      	bls.n	8014088 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014078:	4b0a      	ldr	r3, [pc, #40]	; (80140a4 <xTaskGenericNotify+0x178>)
 801407a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801407e:	601a      	str	r2, [r3, #0]
 8014080:	f3bf 8f4f 	dsb	sy
 8014084:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014088:	f000 f9d4 	bl	8014434 <vPortExitCritical>

		return xReturn;
 801408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801408e:	4618      	mov	r0, r3
 8014090:	3728      	adds	r7, #40	; 0x28
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
 8014096:	bf00      	nop
 8014098:	20003614 	.word	0x20003614
 801409c:	20003510 	.word	0x20003510
 80140a0:	2000350c 	.word	0x2000350c
 80140a4:	e000ed04 	.word	0xe000ed04

080140a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b084      	sub	sp, #16
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	6078      	str	r0, [r7, #4]
 80140b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80140b2:	4b29      	ldr	r3, [pc, #164]	; (8014158 <prvAddCurrentTaskToDelayedList+0xb0>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80140b8:	4b28      	ldr	r3, [pc, #160]	; (801415c <prvAddCurrentTaskToDelayedList+0xb4>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	3304      	adds	r3, #4
 80140be:	4618      	mov	r0, r3
 80140c0:	f7fe f907 	bl	80122d2 <uxListRemove>
 80140c4:	4603      	mov	r3, r0
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d10b      	bne.n	80140e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80140ca:	4b24      	ldr	r3, [pc, #144]	; (801415c <prvAddCurrentTaskToDelayedList+0xb4>)
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140d0:	2201      	movs	r2, #1
 80140d2:	fa02 f303 	lsl.w	r3, r2, r3
 80140d6:	43da      	mvns	r2, r3
 80140d8:	4b21      	ldr	r3, [pc, #132]	; (8014160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	4013      	ands	r3, r2
 80140de:	4a20      	ldr	r2, [pc, #128]	; (8014160 <prvAddCurrentTaskToDelayedList+0xb8>)
 80140e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140e8:	d10a      	bne.n	8014100 <prvAddCurrentTaskToDelayedList+0x58>
 80140ea:	683b      	ldr	r3, [r7, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d007      	beq.n	8014100 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80140f0:	4b1a      	ldr	r3, [pc, #104]	; (801415c <prvAddCurrentTaskToDelayedList+0xb4>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	3304      	adds	r3, #4
 80140f6:	4619      	mov	r1, r3
 80140f8:	481a      	ldr	r0, [pc, #104]	; (8014164 <prvAddCurrentTaskToDelayedList+0xbc>)
 80140fa:	f7fe f88d 	bl	8012218 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80140fe:	e026      	b.n	801414e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014100:	68fa      	ldr	r2, [r7, #12]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4413      	add	r3, r2
 8014106:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014108:	4b14      	ldr	r3, [pc, #80]	; (801415c <prvAddCurrentTaskToDelayedList+0xb4>)
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	68ba      	ldr	r2, [r7, #8]
 801410e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014110:	68ba      	ldr	r2, [r7, #8]
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	429a      	cmp	r2, r3
 8014116:	d209      	bcs.n	801412c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014118:	4b13      	ldr	r3, [pc, #76]	; (8014168 <prvAddCurrentTaskToDelayedList+0xc0>)
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	4b0f      	ldr	r3, [pc, #60]	; (801415c <prvAddCurrentTaskToDelayedList+0xb4>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	3304      	adds	r3, #4
 8014122:	4619      	mov	r1, r3
 8014124:	4610      	mov	r0, r2
 8014126:	f7fe f89b 	bl	8012260 <vListInsert>
}
 801412a:	e010      	b.n	801414e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801412c:	4b0f      	ldr	r3, [pc, #60]	; (801416c <prvAddCurrentTaskToDelayedList+0xc4>)
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	4b0a      	ldr	r3, [pc, #40]	; (801415c <prvAddCurrentTaskToDelayedList+0xb4>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	3304      	adds	r3, #4
 8014136:	4619      	mov	r1, r3
 8014138:	4610      	mov	r0, r2
 801413a:	f7fe f891 	bl	8012260 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801413e:	4b0c      	ldr	r3, [pc, #48]	; (8014170 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	68ba      	ldr	r2, [r7, #8]
 8014144:	429a      	cmp	r2, r3
 8014146:	d202      	bcs.n	801414e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014148:	4a09      	ldr	r2, [pc, #36]	; (8014170 <prvAddCurrentTaskToDelayedList+0xc8>)
 801414a:	68bb      	ldr	r3, [r7, #8]
 801414c:	6013      	str	r3, [r2, #0]
}
 801414e:	bf00      	nop
 8014150:	3710      	adds	r7, #16
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	20003610 	.word	0x20003610
 801415c:	2000350c 	.word	0x2000350c
 8014160:	20003614 	.word	0x20003614
 8014164:	200035f8 	.word	0x200035f8
 8014168:	200035c8 	.word	0x200035c8
 801416c:	200035c4 	.word	0x200035c4
 8014170:	2000362c 	.word	0x2000362c

08014174 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014174:	b480      	push	{r7}
 8014176:	b085      	sub	sp, #20
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	3b04      	subs	r3, #4
 8014184:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801418c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	3b04      	subs	r3, #4
 8014192:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	f023 0201 	bic.w	r2, r3, #1
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	3b04      	subs	r3, #4
 80141a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80141a4:	4a0c      	ldr	r2, [pc, #48]	; (80141d8 <pxPortInitialiseStack+0x64>)
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	3b14      	subs	r3, #20
 80141ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80141b0:	687a      	ldr	r2, [r7, #4]
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3b04      	subs	r3, #4
 80141ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f06f 0202 	mvn.w	r2, #2
 80141c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	3b20      	subs	r3, #32
 80141c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80141ca:	68fb      	ldr	r3, [r7, #12]
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3714      	adds	r7, #20
 80141d0:	46bd      	mov	sp, r7
 80141d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d6:	4770      	bx	lr
 80141d8:	080141dd 	.word	0x080141dd

080141dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80141dc:	b480      	push	{r7}
 80141de:	b085      	sub	sp, #20
 80141e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80141e2:	2300      	movs	r3, #0
 80141e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80141e6:	4b12      	ldr	r3, [pc, #72]	; (8014230 <prvTaskExitError+0x54>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ee:	d00a      	beq.n	8014206 <prvTaskExitError+0x2a>
	__asm volatile
 80141f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141f4:	f383 8811 	msr	BASEPRI, r3
 80141f8:	f3bf 8f6f 	isb	sy
 80141fc:	f3bf 8f4f 	dsb	sy
 8014200:	60fb      	str	r3, [r7, #12]
}
 8014202:	bf00      	nop
 8014204:	e7fe      	b.n	8014204 <prvTaskExitError+0x28>
	__asm volatile
 8014206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801420a:	f383 8811 	msr	BASEPRI, r3
 801420e:	f3bf 8f6f 	isb	sy
 8014212:	f3bf 8f4f 	dsb	sy
 8014216:	60bb      	str	r3, [r7, #8]
}
 8014218:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801421a:	bf00      	nop
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d0fc      	beq.n	801421c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014222:	bf00      	nop
 8014224:	bf00      	nop
 8014226:	3714      	adds	r7, #20
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr
 8014230:	20000168 	.word	0x20000168
	...

08014240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014240:	4b07      	ldr	r3, [pc, #28]	; (8014260 <pxCurrentTCBConst2>)
 8014242:	6819      	ldr	r1, [r3, #0]
 8014244:	6808      	ldr	r0, [r1, #0]
 8014246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801424a:	f380 8809 	msr	PSP, r0
 801424e:	f3bf 8f6f 	isb	sy
 8014252:	f04f 0000 	mov.w	r0, #0
 8014256:	f380 8811 	msr	BASEPRI, r0
 801425a:	4770      	bx	lr
 801425c:	f3af 8000 	nop.w

08014260 <pxCurrentTCBConst2>:
 8014260:	2000350c 	.word	0x2000350c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014264:	bf00      	nop
 8014266:	bf00      	nop

08014268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014268:	4808      	ldr	r0, [pc, #32]	; (801428c <prvPortStartFirstTask+0x24>)
 801426a:	6800      	ldr	r0, [r0, #0]
 801426c:	6800      	ldr	r0, [r0, #0]
 801426e:	f380 8808 	msr	MSP, r0
 8014272:	f04f 0000 	mov.w	r0, #0
 8014276:	f380 8814 	msr	CONTROL, r0
 801427a:	b662      	cpsie	i
 801427c:	b661      	cpsie	f
 801427e:	f3bf 8f4f 	dsb	sy
 8014282:	f3bf 8f6f 	isb	sy
 8014286:	df00      	svc	0
 8014288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801428a:	bf00      	nop
 801428c:	e000ed08 	.word	0xe000ed08

08014290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b086      	sub	sp, #24
 8014294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014296:	4b46      	ldr	r3, [pc, #280]	; (80143b0 <xPortStartScheduler+0x120>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	4a46      	ldr	r2, [pc, #280]	; (80143b4 <xPortStartScheduler+0x124>)
 801429c:	4293      	cmp	r3, r2
 801429e:	d10a      	bne.n	80142b6 <xPortStartScheduler+0x26>
	__asm volatile
 80142a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a4:	f383 8811 	msr	BASEPRI, r3
 80142a8:	f3bf 8f6f 	isb	sy
 80142ac:	f3bf 8f4f 	dsb	sy
 80142b0:	613b      	str	r3, [r7, #16]
}
 80142b2:	bf00      	nop
 80142b4:	e7fe      	b.n	80142b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80142b6:	4b3e      	ldr	r3, [pc, #248]	; (80143b0 <xPortStartScheduler+0x120>)
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	4a3f      	ldr	r2, [pc, #252]	; (80143b8 <xPortStartScheduler+0x128>)
 80142bc:	4293      	cmp	r3, r2
 80142be:	d10a      	bne.n	80142d6 <xPortStartScheduler+0x46>
	__asm volatile
 80142c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142c4:	f383 8811 	msr	BASEPRI, r3
 80142c8:	f3bf 8f6f 	isb	sy
 80142cc:	f3bf 8f4f 	dsb	sy
 80142d0:	60fb      	str	r3, [r7, #12]
}
 80142d2:	bf00      	nop
 80142d4:	e7fe      	b.n	80142d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80142d6:	4b39      	ldr	r3, [pc, #228]	; (80143bc <xPortStartScheduler+0x12c>)
 80142d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	b2db      	uxtb	r3, r3
 80142e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	22ff      	movs	r2, #255	; 0xff
 80142e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80142e8:	697b      	ldr	r3, [r7, #20]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	b2db      	uxtb	r3, r3
 80142ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80142f0:	78fb      	ldrb	r3, [r7, #3]
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80142f8:	b2da      	uxtb	r2, r3
 80142fa:	4b31      	ldr	r3, [pc, #196]	; (80143c0 <xPortStartScheduler+0x130>)
 80142fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80142fe:	4b31      	ldr	r3, [pc, #196]	; (80143c4 <xPortStartScheduler+0x134>)
 8014300:	2207      	movs	r2, #7
 8014302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014304:	e009      	b.n	801431a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014306:	4b2f      	ldr	r3, [pc, #188]	; (80143c4 <xPortStartScheduler+0x134>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	3b01      	subs	r3, #1
 801430c:	4a2d      	ldr	r2, [pc, #180]	; (80143c4 <xPortStartScheduler+0x134>)
 801430e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014310:	78fb      	ldrb	r3, [r7, #3]
 8014312:	b2db      	uxtb	r3, r3
 8014314:	005b      	lsls	r3, r3, #1
 8014316:	b2db      	uxtb	r3, r3
 8014318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801431a:	78fb      	ldrb	r3, [r7, #3]
 801431c:	b2db      	uxtb	r3, r3
 801431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014322:	2b80      	cmp	r3, #128	; 0x80
 8014324:	d0ef      	beq.n	8014306 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014326:	4b27      	ldr	r3, [pc, #156]	; (80143c4 <xPortStartScheduler+0x134>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	f1c3 0307 	rsb	r3, r3, #7
 801432e:	2b04      	cmp	r3, #4
 8014330:	d00a      	beq.n	8014348 <xPortStartScheduler+0xb8>
	__asm volatile
 8014332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014336:	f383 8811 	msr	BASEPRI, r3
 801433a:	f3bf 8f6f 	isb	sy
 801433e:	f3bf 8f4f 	dsb	sy
 8014342:	60bb      	str	r3, [r7, #8]
}
 8014344:	bf00      	nop
 8014346:	e7fe      	b.n	8014346 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014348:	4b1e      	ldr	r3, [pc, #120]	; (80143c4 <xPortStartScheduler+0x134>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	021b      	lsls	r3, r3, #8
 801434e:	4a1d      	ldr	r2, [pc, #116]	; (80143c4 <xPortStartScheduler+0x134>)
 8014350:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014352:	4b1c      	ldr	r3, [pc, #112]	; (80143c4 <xPortStartScheduler+0x134>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801435a:	4a1a      	ldr	r2, [pc, #104]	; (80143c4 <xPortStartScheduler+0x134>)
 801435c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	b2da      	uxtb	r2, r3
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014366:	4b18      	ldr	r3, [pc, #96]	; (80143c8 <xPortStartScheduler+0x138>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	4a17      	ldr	r2, [pc, #92]	; (80143c8 <xPortStartScheduler+0x138>)
 801436c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014370:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014372:	4b15      	ldr	r3, [pc, #84]	; (80143c8 <xPortStartScheduler+0x138>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	4a14      	ldr	r2, [pc, #80]	; (80143c8 <xPortStartScheduler+0x138>)
 8014378:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801437c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801437e:	f000 f8dd 	bl	801453c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014382:	4b12      	ldr	r3, [pc, #72]	; (80143cc <xPortStartScheduler+0x13c>)
 8014384:	2200      	movs	r2, #0
 8014386:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014388:	f000 f8fc 	bl	8014584 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801438c:	4b10      	ldr	r3, [pc, #64]	; (80143d0 <xPortStartScheduler+0x140>)
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	4a0f      	ldr	r2, [pc, #60]	; (80143d0 <xPortStartScheduler+0x140>)
 8014392:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8014396:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014398:	f7ff ff66 	bl	8014268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801439c:	f7ff f978 	bl	8013690 <vTaskSwitchContext>
	prvTaskExitError();
 80143a0:	f7ff ff1c 	bl	80141dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80143a4:	2300      	movs	r3, #0
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3718      	adds	r7, #24
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	e000ed00 	.word	0xe000ed00
 80143b4:	410fc271 	.word	0x410fc271
 80143b8:	410fc270 	.word	0x410fc270
 80143bc:	e000e400 	.word	0xe000e400
 80143c0:	20003638 	.word	0x20003638
 80143c4:	2000363c 	.word	0x2000363c
 80143c8:	e000ed20 	.word	0xe000ed20
 80143cc:	20000168 	.word	0x20000168
 80143d0:	e000ef34 	.word	0xe000ef34

080143d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
	__asm volatile
 80143da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143de:	f383 8811 	msr	BASEPRI, r3
 80143e2:	f3bf 8f6f 	isb	sy
 80143e6:	f3bf 8f4f 	dsb	sy
 80143ea:	607b      	str	r3, [r7, #4]
}
 80143ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80143ee:	4b0f      	ldr	r3, [pc, #60]	; (801442c <vPortEnterCritical+0x58>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	3301      	adds	r3, #1
 80143f4:	4a0d      	ldr	r2, [pc, #52]	; (801442c <vPortEnterCritical+0x58>)
 80143f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80143f8:	4b0c      	ldr	r3, [pc, #48]	; (801442c <vPortEnterCritical+0x58>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	d10f      	bne.n	8014420 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014400:	4b0b      	ldr	r3, [pc, #44]	; (8014430 <vPortEnterCritical+0x5c>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	b2db      	uxtb	r3, r3
 8014406:	2b00      	cmp	r3, #0
 8014408:	d00a      	beq.n	8014420 <vPortEnterCritical+0x4c>
	__asm volatile
 801440a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801440e:	f383 8811 	msr	BASEPRI, r3
 8014412:	f3bf 8f6f 	isb	sy
 8014416:	f3bf 8f4f 	dsb	sy
 801441a:	603b      	str	r3, [r7, #0]
}
 801441c:	bf00      	nop
 801441e:	e7fe      	b.n	801441e <vPortEnterCritical+0x4a>
	}
}
 8014420:	bf00      	nop
 8014422:	370c      	adds	r7, #12
 8014424:	46bd      	mov	sp, r7
 8014426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442a:	4770      	bx	lr
 801442c:	20000168 	.word	0x20000168
 8014430:	e000ed04 	.word	0xe000ed04

08014434 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014434:	b480      	push	{r7}
 8014436:	b083      	sub	sp, #12
 8014438:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801443a:	4b12      	ldr	r3, [pc, #72]	; (8014484 <vPortExitCritical+0x50>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d10a      	bne.n	8014458 <vPortExitCritical+0x24>
	__asm volatile
 8014442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014446:	f383 8811 	msr	BASEPRI, r3
 801444a:	f3bf 8f6f 	isb	sy
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	607b      	str	r3, [r7, #4]
}
 8014454:	bf00      	nop
 8014456:	e7fe      	b.n	8014456 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014458:	4b0a      	ldr	r3, [pc, #40]	; (8014484 <vPortExitCritical+0x50>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	3b01      	subs	r3, #1
 801445e:	4a09      	ldr	r2, [pc, #36]	; (8014484 <vPortExitCritical+0x50>)
 8014460:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014462:	4b08      	ldr	r3, [pc, #32]	; (8014484 <vPortExitCritical+0x50>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d105      	bne.n	8014476 <vPortExitCritical+0x42>
 801446a:	2300      	movs	r3, #0
 801446c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	f383 8811 	msr	BASEPRI, r3
}
 8014474:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014476:	bf00      	nop
 8014478:	370c      	adds	r7, #12
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr
 8014482:	bf00      	nop
 8014484:	20000168 	.word	0x20000168
	...

08014490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014490:	f3ef 8009 	mrs	r0, PSP
 8014494:	f3bf 8f6f 	isb	sy
 8014498:	4b15      	ldr	r3, [pc, #84]	; (80144f0 <pxCurrentTCBConst>)
 801449a:	681a      	ldr	r2, [r3, #0]
 801449c:	f01e 0f10 	tst.w	lr, #16
 80144a0:	bf08      	it	eq
 80144a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80144a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144aa:	6010      	str	r0, [r2, #0]
 80144ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80144b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80144b4:	f380 8811 	msr	BASEPRI, r0
 80144b8:	f3bf 8f4f 	dsb	sy
 80144bc:	f3bf 8f6f 	isb	sy
 80144c0:	f7ff f8e6 	bl	8013690 <vTaskSwitchContext>
 80144c4:	f04f 0000 	mov.w	r0, #0
 80144c8:	f380 8811 	msr	BASEPRI, r0
 80144cc:	bc09      	pop	{r0, r3}
 80144ce:	6819      	ldr	r1, [r3, #0]
 80144d0:	6808      	ldr	r0, [r1, #0]
 80144d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d6:	f01e 0f10 	tst.w	lr, #16
 80144da:	bf08      	it	eq
 80144dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80144e0:	f380 8809 	msr	PSP, r0
 80144e4:	f3bf 8f6f 	isb	sy
 80144e8:	4770      	bx	lr
 80144ea:	bf00      	nop
 80144ec:	f3af 8000 	nop.w

080144f0 <pxCurrentTCBConst>:
 80144f0:	2000350c 	.word	0x2000350c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80144f4:	bf00      	nop
 80144f6:	bf00      	nop

080144f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b082      	sub	sp, #8
 80144fc:	af00      	add	r7, sp, #0
	__asm volatile
 80144fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014502:	f383 8811 	msr	BASEPRI, r3
 8014506:	f3bf 8f6f 	isb	sy
 801450a:	f3bf 8f4f 	dsb	sy
 801450e:	607b      	str	r3, [r7, #4]
}
 8014510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014512:	f7ff f805 	bl	8013520 <xTaskIncrementTick>
 8014516:	4603      	mov	r3, r0
 8014518:	2b00      	cmp	r3, #0
 801451a:	d003      	beq.n	8014524 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801451c:	4b06      	ldr	r3, [pc, #24]	; (8014538 <SysTick_Handler+0x40>)
 801451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014522:	601a      	str	r2, [r3, #0]
 8014524:	2300      	movs	r3, #0
 8014526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014528:	683b      	ldr	r3, [r7, #0]
 801452a:	f383 8811 	msr	BASEPRI, r3
}
 801452e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014530:	bf00      	nop
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	e000ed04 	.word	0xe000ed04

0801453c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801453c:	b480      	push	{r7}
 801453e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014540:	4b0b      	ldr	r3, [pc, #44]	; (8014570 <vPortSetupTimerInterrupt+0x34>)
 8014542:	2200      	movs	r2, #0
 8014544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014546:	4b0b      	ldr	r3, [pc, #44]	; (8014574 <vPortSetupTimerInterrupt+0x38>)
 8014548:	2200      	movs	r2, #0
 801454a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801454c:	4b0a      	ldr	r3, [pc, #40]	; (8014578 <vPortSetupTimerInterrupt+0x3c>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	4a0a      	ldr	r2, [pc, #40]	; (801457c <vPortSetupTimerInterrupt+0x40>)
 8014552:	fba2 2303 	umull	r2, r3, r2, r3
 8014556:	099b      	lsrs	r3, r3, #6
 8014558:	4a09      	ldr	r2, [pc, #36]	; (8014580 <vPortSetupTimerInterrupt+0x44>)
 801455a:	3b01      	subs	r3, #1
 801455c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801455e:	4b04      	ldr	r3, [pc, #16]	; (8014570 <vPortSetupTimerInterrupt+0x34>)
 8014560:	2207      	movs	r2, #7
 8014562:	601a      	str	r2, [r3, #0]
}
 8014564:	bf00      	nop
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop
 8014570:	e000e010 	.word	0xe000e010
 8014574:	e000e018 	.word	0xe000e018
 8014578:	20000148 	.word	0x20000148
 801457c:	10624dd3 	.word	0x10624dd3
 8014580:	e000e014 	.word	0xe000e014

08014584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014594 <vPortEnableVFP+0x10>
 8014588:	6801      	ldr	r1, [r0, #0]
 801458a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801458e:	6001      	str	r1, [r0, #0]
 8014590:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014592:	bf00      	nop
 8014594:	e000ed88 	.word	0xe000ed88

08014598 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014598:	b480      	push	{r7}
 801459a:	b085      	sub	sp, #20
 801459c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801459e:	f3ef 8305 	mrs	r3, IPSR
 80145a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	2b0f      	cmp	r3, #15
 80145a8:	d914      	bls.n	80145d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80145aa:	4a17      	ldr	r2, [pc, #92]	; (8014608 <vPortValidateInterruptPriority+0x70>)
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	4413      	add	r3, r2
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80145b4:	4b15      	ldr	r3, [pc, #84]	; (801460c <vPortValidateInterruptPriority+0x74>)
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	7afa      	ldrb	r2, [r7, #11]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d20a      	bcs.n	80145d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80145be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c2:	f383 8811 	msr	BASEPRI, r3
 80145c6:	f3bf 8f6f 	isb	sy
 80145ca:	f3bf 8f4f 	dsb	sy
 80145ce:	607b      	str	r3, [r7, #4]
}
 80145d0:	bf00      	nop
 80145d2:	e7fe      	b.n	80145d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80145d4:	4b0e      	ldr	r3, [pc, #56]	; (8014610 <vPortValidateInterruptPriority+0x78>)
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80145dc:	4b0d      	ldr	r3, [pc, #52]	; (8014614 <vPortValidateInterruptPriority+0x7c>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d90a      	bls.n	80145fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80145e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e8:	f383 8811 	msr	BASEPRI, r3
 80145ec:	f3bf 8f6f 	isb	sy
 80145f0:	f3bf 8f4f 	dsb	sy
 80145f4:	603b      	str	r3, [r7, #0]
}
 80145f6:	bf00      	nop
 80145f8:	e7fe      	b.n	80145f8 <vPortValidateInterruptPriority+0x60>
	}
 80145fa:	bf00      	nop
 80145fc:	3714      	adds	r7, #20
 80145fe:	46bd      	mov	sp, r7
 8014600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014604:	4770      	bx	lr
 8014606:	bf00      	nop
 8014608:	e000e3f0 	.word	0xe000e3f0
 801460c:	20003638 	.word	0x20003638
 8014610:	e000ed0c 	.word	0xe000ed0c
 8014614:	2000363c 	.word	0x2000363c

08014618 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b08a      	sub	sp, #40	; 0x28
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014620:	2300      	movs	r3, #0
 8014622:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014624:	f7fe fec2 	bl	80133ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014628:	4b5b      	ldr	r3, [pc, #364]	; (8014798 <pvPortMalloc+0x180>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d101      	bne.n	8014634 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014630:	f000 f920 	bl	8014874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014634:	4b59      	ldr	r3, [pc, #356]	; (801479c <pvPortMalloc+0x184>)
 8014636:	681a      	ldr	r2, [r3, #0]
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	4013      	ands	r3, r2
 801463c:	2b00      	cmp	r3, #0
 801463e:	f040 8093 	bne.w	8014768 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d01d      	beq.n	8014684 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014648:	2208      	movs	r2, #8
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4413      	add	r3, r2
 801464e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f003 0307 	and.w	r3, r3, #7
 8014656:	2b00      	cmp	r3, #0
 8014658:	d014      	beq.n	8014684 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	f023 0307 	bic.w	r3, r3, #7
 8014660:	3308      	adds	r3, #8
 8014662:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f003 0307 	and.w	r3, r3, #7
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00a      	beq.n	8014684 <pvPortMalloc+0x6c>
	__asm volatile
 801466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014672:	f383 8811 	msr	BASEPRI, r3
 8014676:	f3bf 8f6f 	isb	sy
 801467a:	f3bf 8f4f 	dsb	sy
 801467e:	617b      	str	r3, [r7, #20]
}
 8014680:	bf00      	nop
 8014682:	e7fe      	b.n	8014682 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d06e      	beq.n	8014768 <pvPortMalloc+0x150>
 801468a:	4b45      	ldr	r3, [pc, #276]	; (80147a0 <pvPortMalloc+0x188>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	687a      	ldr	r2, [r7, #4]
 8014690:	429a      	cmp	r2, r3
 8014692:	d869      	bhi.n	8014768 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014694:	4b43      	ldr	r3, [pc, #268]	; (80147a4 <pvPortMalloc+0x18c>)
 8014696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8014698:	4b42      	ldr	r3, [pc, #264]	; (80147a4 <pvPortMalloc+0x18c>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801469e:	e004      	b.n	80146aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80146a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80146aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d903      	bls.n	80146bc <pvPortMalloc+0xa4>
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d1f1      	bne.n	80146a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80146bc:	4b36      	ldr	r3, [pc, #216]	; (8014798 <pvPortMalloc+0x180>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d050      	beq.n	8014768 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80146c6:	6a3b      	ldr	r3, [r7, #32]
 80146c8:	681b      	ldr	r3, [r3, #0]
 80146ca:	2208      	movs	r2, #8
 80146cc:	4413      	add	r3, r2
 80146ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	681a      	ldr	r2, [r3, #0]
 80146d4:	6a3b      	ldr	r3, [r7, #32]
 80146d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80146d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146da:	685a      	ldr	r2, [r3, #4]
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	1ad2      	subs	r2, r2, r3
 80146e0:	2308      	movs	r3, #8
 80146e2:	005b      	lsls	r3, r3, #1
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d91f      	bls.n	8014728 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80146e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	4413      	add	r3, r2
 80146ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80146f0:	69bb      	ldr	r3, [r7, #24]
 80146f2:	f003 0307 	and.w	r3, r3, #7
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00a      	beq.n	8014710 <pvPortMalloc+0xf8>
	__asm volatile
 80146fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fe:	f383 8811 	msr	BASEPRI, r3
 8014702:	f3bf 8f6f 	isb	sy
 8014706:	f3bf 8f4f 	dsb	sy
 801470a:	613b      	str	r3, [r7, #16]
}
 801470c:	bf00      	nop
 801470e:	e7fe      	b.n	801470e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	685a      	ldr	r2, [r3, #4]
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	1ad2      	subs	r2, r2, r3
 8014718:	69bb      	ldr	r3, [r7, #24]
 801471a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471e:	687a      	ldr	r2, [r7, #4]
 8014720:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014722:	69b8      	ldr	r0, [r7, #24]
 8014724:	f000 f908 	bl	8014938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014728:	4b1d      	ldr	r3, [pc, #116]	; (80147a0 <pvPortMalloc+0x188>)
 801472a:	681a      	ldr	r2, [r3, #0]
 801472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	1ad3      	subs	r3, r2, r3
 8014732:	4a1b      	ldr	r2, [pc, #108]	; (80147a0 <pvPortMalloc+0x188>)
 8014734:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014736:	4b1a      	ldr	r3, [pc, #104]	; (80147a0 <pvPortMalloc+0x188>)
 8014738:	681a      	ldr	r2, [r3, #0]
 801473a:	4b1b      	ldr	r3, [pc, #108]	; (80147a8 <pvPortMalloc+0x190>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	429a      	cmp	r2, r3
 8014740:	d203      	bcs.n	801474a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014742:	4b17      	ldr	r3, [pc, #92]	; (80147a0 <pvPortMalloc+0x188>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	4a18      	ldr	r2, [pc, #96]	; (80147a8 <pvPortMalloc+0x190>)
 8014748:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474c:	685a      	ldr	r2, [r3, #4]
 801474e:	4b13      	ldr	r3, [pc, #76]	; (801479c <pvPortMalloc+0x184>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	431a      	orrs	r2, r3
 8014754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014756:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475a:	2200      	movs	r2, #0
 801475c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801475e:	4b13      	ldr	r3, [pc, #76]	; (80147ac <pvPortMalloc+0x194>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	3301      	adds	r3, #1
 8014764:	4a11      	ldr	r2, [pc, #68]	; (80147ac <pvPortMalloc+0x194>)
 8014766:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014768:	f7fe fe2e 	bl	80133c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801476c:	69fb      	ldr	r3, [r7, #28]
 801476e:	f003 0307 	and.w	r3, r3, #7
 8014772:	2b00      	cmp	r3, #0
 8014774:	d00a      	beq.n	801478c <pvPortMalloc+0x174>
	__asm volatile
 8014776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801477a:	f383 8811 	msr	BASEPRI, r3
 801477e:	f3bf 8f6f 	isb	sy
 8014782:	f3bf 8f4f 	dsb	sy
 8014786:	60fb      	str	r3, [r7, #12]
}
 8014788:	bf00      	nop
 801478a:	e7fe      	b.n	801478a <pvPortMalloc+0x172>
	return pvReturn;
 801478c:	69fb      	ldr	r3, [r7, #28]
}
 801478e:	4618      	mov	r0, r3
 8014790:	3728      	adds	r7, #40	; 0x28
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
 8014796:	bf00      	nop
 8014798:	20007248 	.word	0x20007248
 801479c:	2000725c 	.word	0x2000725c
 80147a0:	2000724c 	.word	0x2000724c
 80147a4:	20007240 	.word	0x20007240
 80147a8:	20007250 	.word	0x20007250
 80147ac:	20007254 	.word	0x20007254

080147b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b086      	sub	sp, #24
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d04d      	beq.n	801485e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80147c2:	2308      	movs	r3, #8
 80147c4:	425b      	negs	r3, r3
 80147c6:	697a      	ldr	r2, [r7, #20]
 80147c8:	4413      	add	r3, r2
 80147ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	685a      	ldr	r2, [r3, #4]
 80147d4:	4b24      	ldr	r3, [pc, #144]	; (8014868 <vPortFree+0xb8>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	4013      	ands	r3, r2
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d10a      	bne.n	80147f4 <vPortFree+0x44>
	__asm volatile
 80147de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e2:	f383 8811 	msr	BASEPRI, r3
 80147e6:	f3bf 8f6f 	isb	sy
 80147ea:	f3bf 8f4f 	dsb	sy
 80147ee:	60fb      	str	r3, [r7, #12]
}
 80147f0:	bf00      	nop
 80147f2:	e7fe      	b.n	80147f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80147f4:	693b      	ldr	r3, [r7, #16]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00a      	beq.n	8014812 <vPortFree+0x62>
	__asm volatile
 80147fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014800:	f383 8811 	msr	BASEPRI, r3
 8014804:	f3bf 8f6f 	isb	sy
 8014808:	f3bf 8f4f 	dsb	sy
 801480c:	60bb      	str	r3, [r7, #8]
}
 801480e:	bf00      	nop
 8014810:	e7fe      	b.n	8014810 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	4b14      	ldr	r3, [pc, #80]	; (8014868 <vPortFree+0xb8>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	4013      	ands	r3, r2
 801481c:	2b00      	cmp	r3, #0
 801481e:	d01e      	beq.n	801485e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d11a      	bne.n	801485e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	685a      	ldr	r2, [r3, #4]
 801482c:	4b0e      	ldr	r3, [pc, #56]	; (8014868 <vPortFree+0xb8>)
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	43db      	mvns	r3, r3
 8014832:	401a      	ands	r2, r3
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014838:	f7fe fdb8 	bl	80133ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801483c:	693b      	ldr	r3, [r7, #16]
 801483e:	685a      	ldr	r2, [r3, #4]
 8014840:	4b0a      	ldr	r3, [pc, #40]	; (801486c <vPortFree+0xbc>)
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4413      	add	r3, r2
 8014846:	4a09      	ldr	r2, [pc, #36]	; (801486c <vPortFree+0xbc>)
 8014848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801484a:	6938      	ldr	r0, [r7, #16]
 801484c:	f000 f874 	bl	8014938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014850:	4b07      	ldr	r3, [pc, #28]	; (8014870 <vPortFree+0xc0>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	3301      	adds	r3, #1
 8014856:	4a06      	ldr	r2, [pc, #24]	; (8014870 <vPortFree+0xc0>)
 8014858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801485a:	f7fe fdb5 	bl	80133c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801485e:	bf00      	nop
 8014860:	3718      	adds	r7, #24
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	2000725c 	.word	0x2000725c
 801486c:	2000724c 	.word	0x2000724c
 8014870:	20007258 	.word	0x20007258

08014874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014874:	b480      	push	{r7}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801487a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801487e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014880:	4b27      	ldr	r3, [pc, #156]	; (8014920 <prvHeapInit+0xac>)
 8014882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	f003 0307 	and.w	r3, r3, #7
 801488a:	2b00      	cmp	r3, #0
 801488c:	d00c      	beq.n	80148a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	3307      	adds	r3, #7
 8014892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	f023 0307 	bic.w	r3, r3, #7
 801489a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801489c:	68ba      	ldr	r2, [r7, #8]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	4a1f      	ldr	r2, [pc, #124]	; (8014920 <prvHeapInit+0xac>)
 80148a4:	4413      	add	r3, r2
 80148a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80148ac:	4a1d      	ldr	r2, [pc, #116]	; (8014924 <prvHeapInit+0xb0>)
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80148b2:	4b1c      	ldr	r3, [pc, #112]	; (8014924 <prvHeapInit+0xb0>)
 80148b4:	2200      	movs	r2, #0
 80148b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	4413      	add	r3, r2
 80148be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80148c0:	2208      	movs	r2, #8
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	1a9b      	subs	r3, r3, r2
 80148c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	f023 0307 	bic.w	r3, r3, #7
 80148ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	4a15      	ldr	r2, [pc, #84]	; (8014928 <prvHeapInit+0xb4>)
 80148d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80148d6:	4b14      	ldr	r3, [pc, #80]	; (8014928 <prvHeapInit+0xb4>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2200      	movs	r2, #0
 80148dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80148de:	4b12      	ldr	r3, [pc, #72]	; (8014928 <prvHeapInit+0xb4>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	2200      	movs	r2, #0
 80148e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	68fa      	ldr	r2, [r7, #12]
 80148ee:	1ad2      	subs	r2, r2, r3
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80148f4:	4b0c      	ldr	r3, [pc, #48]	; (8014928 <prvHeapInit+0xb4>)
 80148f6:	681a      	ldr	r2, [r3, #0]
 80148f8:	683b      	ldr	r3, [r7, #0]
 80148fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	685b      	ldr	r3, [r3, #4]
 8014900:	4a0a      	ldr	r2, [pc, #40]	; (801492c <prvHeapInit+0xb8>)
 8014902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	685b      	ldr	r3, [r3, #4]
 8014908:	4a09      	ldr	r2, [pc, #36]	; (8014930 <prvHeapInit+0xbc>)
 801490a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801490c:	4b09      	ldr	r3, [pc, #36]	; (8014934 <prvHeapInit+0xc0>)
 801490e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014912:	601a      	str	r2, [r3, #0]
}
 8014914:	bf00      	nop
 8014916:	3714      	adds	r7, #20
 8014918:	46bd      	mov	sp, r7
 801491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491e:	4770      	bx	lr
 8014920:	20003640 	.word	0x20003640
 8014924:	20007240 	.word	0x20007240
 8014928:	20007248 	.word	0x20007248
 801492c:	20007250 	.word	0x20007250
 8014930:	2000724c 	.word	0x2000724c
 8014934:	2000725c 	.word	0x2000725c

08014938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014938:	b480      	push	{r7}
 801493a:	b085      	sub	sp, #20
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014940:	4b28      	ldr	r3, [pc, #160]	; (80149e4 <prvInsertBlockIntoFreeList+0xac>)
 8014942:	60fb      	str	r3, [r7, #12]
 8014944:	e002      	b.n	801494c <prvInsertBlockIntoFreeList+0x14>
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	60fb      	str	r3, [r7, #12]
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	429a      	cmp	r2, r3
 8014954:	d8f7      	bhi.n	8014946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	685b      	ldr	r3, [r3, #4]
 801495e:	68ba      	ldr	r2, [r7, #8]
 8014960:	4413      	add	r3, r2
 8014962:	687a      	ldr	r2, [r7, #4]
 8014964:	429a      	cmp	r2, r3
 8014966:	d108      	bne.n	801497a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	685a      	ldr	r2, [r3, #4]
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	441a      	add	r2, r3
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014976:	68fb      	ldr	r3, [r7, #12]
 8014978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	685b      	ldr	r3, [r3, #4]
 8014982:	68ba      	ldr	r2, [r7, #8]
 8014984:	441a      	add	r2, r3
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	429a      	cmp	r2, r3
 801498c:	d118      	bne.n	80149c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	4b15      	ldr	r3, [pc, #84]	; (80149e8 <prvInsertBlockIntoFreeList+0xb0>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	429a      	cmp	r2, r3
 8014998:	d00d      	beq.n	80149b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	685a      	ldr	r2, [r3, #4]
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	441a      	add	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	601a      	str	r2, [r3, #0]
 80149b4:	e008      	b.n	80149c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80149b6:	4b0c      	ldr	r3, [pc, #48]	; (80149e8 <prvInsertBlockIntoFreeList+0xb0>)
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	601a      	str	r2, [r3, #0]
 80149be:	e003      	b.n	80149c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681a      	ldr	r2, [r3, #0]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80149c8:	68fa      	ldr	r2, [r7, #12]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d002      	beq.n	80149d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149d6:	bf00      	nop
 80149d8:	3714      	adds	r7, #20
 80149da:	46bd      	mov	sp, r7
 80149dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e0:	4770      	bx	lr
 80149e2:	bf00      	nop
 80149e4:	20007240 	.word	0x20007240
 80149e8:	20007248 	.word	0x20007248

080149ec <sulp>:
 80149ec:	b570      	push	{r4, r5, r6, lr}
 80149ee:	4604      	mov	r4, r0
 80149f0:	460d      	mov	r5, r1
 80149f2:	ec45 4b10 	vmov	d0, r4, r5
 80149f6:	4616      	mov	r6, r2
 80149f8:	f003 fda2 	bl	8018540 <__ulp>
 80149fc:	ec51 0b10 	vmov	r0, r1, d0
 8014a00:	b17e      	cbz	r6, 8014a22 <sulp+0x36>
 8014a02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014a06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	dd09      	ble.n	8014a22 <sulp+0x36>
 8014a0e:	051b      	lsls	r3, r3, #20
 8014a10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014a14:	2400      	movs	r4, #0
 8014a16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014a1a:	4622      	mov	r2, r4
 8014a1c:	462b      	mov	r3, r5
 8014a1e:	f7eb fdfb 	bl	8000618 <__aeabi_dmul>
 8014a22:	bd70      	pop	{r4, r5, r6, pc}
 8014a24:	0000      	movs	r0, r0
	...

08014a28 <_strtod_l>:
 8014a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	ed2d 8b02 	vpush	{d8}
 8014a30:	b09b      	sub	sp, #108	; 0x6c
 8014a32:	4604      	mov	r4, r0
 8014a34:	9213      	str	r2, [sp, #76]	; 0x4c
 8014a36:	2200      	movs	r2, #0
 8014a38:	9216      	str	r2, [sp, #88]	; 0x58
 8014a3a:	460d      	mov	r5, r1
 8014a3c:	f04f 0800 	mov.w	r8, #0
 8014a40:	f04f 0900 	mov.w	r9, #0
 8014a44:	460a      	mov	r2, r1
 8014a46:	9215      	str	r2, [sp, #84]	; 0x54
 8014a48:	7811      	ldrb	r1, [r2, #0]
 8014a4a:	292b      	cmp	r1, #43	; 0x2b
 8014a4c:	d04c      	beq.n	8014ae8 <_strtod_l+0xc0>
 8014a4e:	d83a      	bhi.n	8014ac6 <_strtod_l+0x9e>
 8014a50:	290d      	cmp	r1, #13
 8014a52:	d834      	bhi.n	8014abe <_strtod_l+0x96>
 8014a54:	2908      	cmp	r1, #8
 8014a56:	d834      	bhi.n	8014ac2 <_strtod_l+0x9a>
 8014a58:	2900      	cmp	r1, #0
 8014a5a:	d03d      	beq.n	8014ad8 <_strtod_l+0xb0>
 8014a5c:	2200      	movs	r2, #0
 8014a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8014a60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014a62:	7832      	ldrb	r2, [r6, #0]
 8014a64:	2a30      	cmp	r2, #48	; 0x30
 8014a66:	f040 80b4 	bne.w	8014bd2 <_strtod_l+0x1aa>
 8014a6a:	7872      	ldrb	r2, [r6, #1]
 8014a6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014a70:	2a58      	cmp	r2, #88	; 0x58
 8014a72:	d170      	bne.n	8014b56 <_strtod_l+0x12e>
 8014a74:	9302      	str	r3, [sp, #8]
 8014a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a78:	9301      	str	r3, [sp, #4]
 8014a7a:	ab16      	add	r3, sp, #88	; 0x58
 8014a7c:	9300      	str	r3, [sp, #0]
 8014a7e:	4a8e      	ldr	r2, [pc, #568]	; (8014cb8 <_strtod_l+0x290>)
 8014a80:	ab17      	add	r3, sp, #92	; 0x5c
 8014a82:	a915      	add	r1, sp, #84	; 0x54
 8014a84:	4620      	mov	r0, r4
 8014a86:	f002 fe39 	bl	80176fc <__gethex>
 8014a8a:	f010 070f 	ands.w	r7, r0, #15
 8014a8e:	4605      	mov	r5, r0
 8014a90:	d005      	beq.n	8014a9e <_strtod_l+0x76>
 8014a92:	2f06      	cmp	r7, #6
 8014a94:	d12a      	bne.n	8014aec <_strtod_l+0xc4>
 8014a96:	3601      	adds	r6, #1
 8014a98:	2300      	movs	r3, #0
 8014a9a:	9615      	str	r6, [sp, #84]	; 0x54
 8014a9c:	930a      	str	r3, [sp, #40]	; 0x28
 8014a9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	f040 857f 	bne.w	80155a4 <_strtod_l+0xb7c>
 8014aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014aa8:	b1db      	cbz	r3, 8014ae2 <_strtod_l+0xba>
 8014aaa:	4642      	mov	r2, r8
 8014aac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014ab0:	ec43 2b10 	vmov	d0, r2, r3
 8014ab4:	b01b      	add	sp, #108	; 0x6c
 8014ab6:	ecbd 8b02 	vpop	{d8}
 8014aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014abe:	2920      	cmp	r1, #32
 8014ac0:	d1cc      	bne.n	8014a5c <_strtod_l+0x34>
 8014ac2:	3201      	adds	r2, #1
 8014ac4:	e7bf      	b.n	8014a46 <_strtod_l+0x1e>
 8014ac6:	292d      	cmp	r1, #45	; 0x2d
 8014ac8:	d1c8      	bne.n	8014a5c <_strtod_l+0x34>
 8014aca:	2101      	movs	r1, #1
 8014acc:	910a      	str	r1, [sp, #40]	; 0x28
 8014ace:	1c51      	adds	r1, r2, #1
 8014ad0:	9115      	str	r1, [sp, #84]	; 0x54
 8014ad2:	7852      	ldrb	r2, [r2, #1]
 8014ad4:	2a00      	cmp	r2, #0
 8014ad6:	d1c3      	bne.n	8014a60 <_strtod_l+0x38>
 8014ad8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014ada:	9515      	str	r5, [sp, #84]	; 0x54
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f040 855f 	bne.w	80155a0 <_strtod_l+0xb78>
 8014ae2:	4642      	mov	r2, r8
 8014ae4:	464b      	mov	r3, r9
 8014ae6:	e7e3      	b.n	8014ab0 <_strtod_l+0x88>
 8014ae8:	2100      	movs	r1, #0
 8014aea:	e7ef      	b.n	8014acc <_strtod_l+0xa4>
 8014aec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014aee:	b13a      	cbz	r2, 8014b00 <_strtod_l+0xd8>
 8014af0:	2135      	movs	r1, #53	; 0x35
 8014af2:	a818      	add	r0, sp, #96	; 0x60
 8014af4:	f003 fe21 	bl	801873a <__copybits>
 8014af8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014afa:	4620      	mov	r0, r4
 8014afc:	f003 f9f4 	bl	8017ee8 <_Bfree>
 8014b00:	3f01      	subs	r7, #1
 8014b02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014b04:	2f04      	cmp	r7, #4
 8014b06:	d806      	bhi.n	8014b16 <_strtod_l+0xee>
 8014b08:	e8df f007 	tbb	[pc, r7]
 8014b0c:	201d0314 	.word	0x201d0314
 8014b10:	14          	.byte	0x14
 8014b11:	00          	.byte	0x00
 8014b12:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8014b16:	05e9      	lsls	r1, r5, #23
 8014b18:	bf48      	it	mi
 8014b1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8014b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b22:	0d1b      	lsrs	r3, r3, #20
 8014b24:	051b      	lsls	r3, r3, #20
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d1b9      	bne.n	8014a9e <_strtod_l+0x76>
 8014b2a:	f001 fe65 	bl	80167f8 <__errno>
 8014b2e:	2322      	movs	r3, #34	; 0x22
 8014b30:	6003      	str	r3, [r0, #0]
 8014b32:	e7b4      	b.n	8014a9e <_strtod_l+0x76>
 8014b34:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8014b38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014b3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014b40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8014b44:	e7e7      	b.n	8014b16 <_strtod_l+0xee>
 8014b46:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8014cc0 <_strtod_l+0x298>
 8014b4a:	e7e4      	b.n	8014b16 <_strtod_l+0xee>
 8014b4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8014b50:	f04f 38ff 	mov.w	r8, #4294967295
 8014b54:	e7df      	b.n	8014b16 <_strtod_l+0xee>
 8014b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b58:	1c5a      	adds	r2, r3, #1
 8014b5a:	9215      	str	r2, [sp, #84]	; 0x54
 8014b5c:	785b      	ldrb	r3, [r3, #1]
 8014b5e:	2b30      	cmp	r3, #48	; 0x30
 8014b60:	d0f9      	beq.n	8014b56 <_strtod_l+0x12e>
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d09b      	beq.n	8014a9e <_strtod_l+0x76>
 8014b66:	2301      	movs	r3, #1
 8014b68:	f04f 0a00 	mov.w	sl, #0
 8014b6c:	9304      	str	r3, [sp, #16]
 8014b6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b70:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b72:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b76:	46d3      	mov	fp, sl
 8014b78:	220a      	movs	r2, #10
 8014b7a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014b7c:	7806      	ldrb	r6, [r0, #0]
 8014b7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8014b82:	b2d9      	uxtb	r1, r3
 8014b84:	2909      	cmp	r1, #9
 8014b86:	d926      	bls.n	8014bd6 <_strtod_l+0x1ae>
 8014b88:	494c      	ldr	r1, [pc, #304]	; (8014cbc <_strtod_l+0x294>)
 8014b8a:	2201      	movs	r2, #1
 8014b8c:	f001 fd6f 	bl	801666e <strncmp>
 8014b90:	2800      	cmp	r0, #0
 8014b92:	d030      	beq.n	8014bf6 <_strtod_l+0x1ce>
 8014b94:	2000      	movs	r0, #0
 8014b96:	4632      	mov	r2, r6
 8014b98:	9005      	str	r0, [sp, #20]
 8014b9a:	465e      	mov	r6, fp
 8014b9c:	4603      	mov	r3, r0
 8014b9e:	2a65      	cmp	r2, #101	; 0x65
 8014ba0:	d001      	beq.n	8014ba6 <_strtod_l+0x17e>
 8014ba2:	2a45      	cmp	r2, #69	; 0x45
 8014ba4:	d113      	bne.n	8014bce <_strtod_l+0x1a6>
 8014ba6:	b91e      	cbnz	r6, 8014bb0 <_strtod_l+0x188>
 8014ba8:	9a04      	ldr	r2, [sp, #16]
 8014baa:	4302      	orrs	r2, r0
 8014bac:	d094      	beq.n	8014ad8 <_strtod_l+0xb0>
 8014bae:	2600      	movs	r6, #0
 8014bb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014bb2:	1c6a      	adds	r2, r5, #1
 8014bb4:	9215      	str	r2, [sp, #84]	; 0x54
 8014bb6:	786a      	ldrb	r2, [r5, #1]
 8014bb8:	2a2b      	cmp	r2, #43	; 0x2b
 8014bba:	d074      	beq.n	8014ca6 <_strtod_l+0x27e>
 8014bbc:	2a2d      	cmp	r2, #45	; 0x2d
 8014bbe:	d078      	beq.n	8014cb2 <_strtod_l+0x28a>
 8014bc0:	f04f 0c00 	mov.w	ip, #0
 8014bc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8014bc8:	2909      	cmp	r1, #9
 8014bca:	d97f      	bls.n	8014ccc <_strtod_l+0x2a4>
 8014bcc:	9515      	str	r5, [sp, #84]	; 0x54
 8014bce:	2700      	movs	r7, #0
 8014bd0:	e09e      	b.n	8014d10 <_strtod_l+0x2e8>
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	e7c8      	b.n	8014b68 <_strtod_l+0x140>
 8014bd6:	f1bb 0f08 	cmp.w	fp, #8
 8014bda:	bfd8      	it	le
 8014bdc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8014bde:	f100 0001 	add.w	r0, r0, #1
 8014be2:	bfda      	itte	le
 8014be4:	fb02 3301 	mlale	r3, r2, r1, r3
 8014be8:	9309      	strle	r3, [sp, #36]	; 0x24
 8014bea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8014bee:	f10b 0b01 	add.w	fp, fp, #1
 8014bf2:	9015      	str	r0, [sp, #84]	; 0x54
 8014bf4:	e7c1      	b.n	8014b7a <_strtod_l+0x152>
 8014bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014bf8:	1c5a      	adds	r2, r3, #1
 8014bfa:	9215      	str	r2, [sp, #84]	; 0x54
 8014bfc:	785a      	ldrb	r2, [r3, #1]
 8014bfe:	f1bb 0f00 	cmp.w	fp, #0
 8014c02:	d037      	beq.n	8014c74 <_strtod_l+0x24c>
 8014c04:	9005      	str	r0, [sp, #20]
 8014c06:	465e      	mov	r6, fp
 8014c08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8014c0c:	2b09      	cmp	r3, #9
 8014c0e:	d912      	bls.n	8014c36 <_strtod_l+0x20e>
 8014c10:	2301      	movs	r3, #1
 8014c12:	e7c4      	b.n	8014b9e <_strtod_l+0x176>
 8014c14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c16:	1c5a      	adds	r2, r3, #1
 8014c18:	9215      	str	r2, [sp, #84]	; 0x54
 8014c1a:	785a      	ldrb	r2, [r3, #1]
 8014c1c:	3001      	adds	r0, #1
 8014c1e:	2a30      	cmp	r2, #48	; 0x30
 8014c20:	d0f8      	beq.n	8014c14 <_strtod_l+0x1ec>
 8014c22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8014c26:	2b08      	cmp	r3, #8
 8014c28:	f200 84c1 	bhi.w	80155ae <_strtod_l+0xb86>
 8014c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014c2e:	9005      	str	r0, [sp, #20]
 8014c30:	2000      	movs	r0, #0
 8014c32:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c34:	4606      	mov	r6, r0
 8014c36:	3a30      	subs	r2, #48	; 0x30
 8014c38:	f100 0301 	add.w	r3, r0, #1
 8014c3c:	d014      	beq.n	8014c68 <_strtod_l+0x240>
 8014c3e:	9905      	ldr	r1, [sp, #20]
 8014c40:	4419      	add	r1, r3
 8014c42:	9105      	str	r1, [sp, #20]
 8014c44:	4633      	mov	r3, r6
 8014c46:	eb00 0c06 	add.w	ip, r0, r6
 8014c4a:	210a      	movs	r1, #10
 8014c4c:	4563      	cmp	r3, ip
 8014c4e:	d113      	bne.n	8014c78 <_strtod_l+0x250>
 8014c50:	1833      	adds	r3, r6, r0
 8014c52:	2b08      	cmp	r3, #8
 8014c54:	f106 0601 	add.w	r6, r6, #1
 8014c58:	4406      	add	r6, r0
 8014c5a:	dc1a      	bgt.n	8014c92 <_strtod_l+0x26a>
 8014c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c5e:	230a      	movs	r3, #10
 8014c60:	fb03 2301 	mla	r3, r3, r1, r2
 8014c64:	9309      	str	r3, [sp, #36]	; 0x24
 8014c66:	2300      	movs	r3, #0
 8014c68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014c6a:	1c51      	adds	r1, r2, #1
 8014c6c:	9115      	str	r1, [sp, #84]	; 0x54
 8014c6e:	7852      	ldrb	r2, [r2, #1]
 8014c70:	4618      	mov	r0, r3
 8014c72:	e7c9      	b.n	8014c08 <_strtod_l+0x1e0>
 8014c74:	4658      	mov	r0, fp
 8014c76:	e7d2      	b.n	8014c1e <_strtod_l+0x1f6>
 8014c78:	2b08      	cmp	r3, #8
 8014c7a:	f103 0301 	add.w	r3, r3, #1
 8014c7e:	dc03      	bgt.n	8014c88 <_strtod_l+0x260>
 8014c80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014c82:	434f      	muls	r7, r1
 8014c84:	9709      	str	r7, [sp, #36]	; 0x24
 8014c86:	e7e1      	b.n	8014c4c <_strtod_l+0x224>
 8014c88:	2b10      	cmp	r3, #16
 8014c8a:	bfd8      	it	le
 8014c8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8014c90:	e7dc      	b.n	8014c4c <_strtod_l+0x224>
 8014c92:	2e10      	cmp	r6, #16
 8014c94:	bfdc      	itt	le
 8014c96:	230a      	movle	r3, #10
 8014c98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8014c9c:	e7e3      	b.n	8014c66 <_strtod_l+0x23e>
 8014c9e:	2300      	movs	r3, #0
 8014ca0:	9305      	str	r3, [sp, #20]
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	e780      	b.n	8014ba8 <_strtod_l+0x180>
 8014ca6:	f04f 0c00 	mov.w	ip, #0
 8014caa:	1caa      	adds	r2, r5, #2
 8014cac:	9215      	str	r2, [sp, #84]	; 0x54
 8014cae:	78aa      	ldrb	r2, [r5, #2]
 8014cb0:	e788      	b.n	8014bc4 <_strtod_l+0x19c>
 8014cb2:	f04f 0c01 	mov.w	ip, #1
 8014cb6:	e7f8      	b.n	8014caa <_strtod_l+0x282>
 8014cb8:	0801a96c 	.word	0x0801a96c
 8014cbc:	0801a968 	.word	0x0801a968
 8014cc0:	7ff00000 	.word	0x7ff00000
 8014cc4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014cc6:	1c51      	adds	r1, r2, #1
 8014cc8:	9115      	str	r1, [sp, #84]	; 0x54
 8014cca:	7852      	ldrb	r2, [r2, #1]
 8014ccc:	2a30      	cmp	r2, #48	; 0x30
 8014cce:	d0f9      	beq.n	8014cc4 <_strtod_l+0x29c>
 8014cd0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8014cd4:	2908      	cmp	r1, #8
 8014cd6:	f63f af7a 	bhi.w	8014bce <_strtod_l+0x1a6>
 8014cda:	3a30      	subs	r2, #48	; 0x30
 8014cdc:	9208      	str	r2, [sp, #32]
 8014cde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ce0:	920c      	str	r2, [sp, #48]	; 0x30
 8014ce2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014ce4:	1c57      	adds	r7, r2, #1
 8014ce6:	9715      	str	r7, [sp, #84]	; 0x54
 8014ce8:	7852      	ldrb	r2, [r2, #1]
 8014cea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8014cee:	f1be 0f09 	cmp.w	lr, #9
 8014cf2:	d938      	bls.n	8014d66 <_strtod_l+0x33e>
 8014cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cf6:	1a7f      	subs	r7, r7, r1
 8014cf8:	2f08      	cmp	r7, #8
 8014cfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014cfe:	dc03      	bgt.n	8014d08 <_strtod_l+0x2e0>
 8014d00:	9908      	ldr	r1, [sp, #32]
 8014d02:	428f      	cmp	r7, r1
 8014d04:	bfa8      	it	ge
 8014d06:	460f      	movge	r7, r1
 8014d08:	f1bc 0f00 	cmp.w	ip, #0
 8014d0c:	d000      	beq.n	8014d10 <_strtod_l+0x2e8>
 8014d0e:	427f      	negs	r7, r7
 8014d10:	2e00      	cmp	r6, #0
 8014d12:	d14f      	bne.n	8014db4 <_strtod_l+0x38c>
 8014d14:	9904      	ldr	r1, [sp, #16]
 8014d16:	4301      	orrs	r1, r0
 8014d18:	f47f aec1 	bne.w	8014a9e <_strtod_l+0x76>
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f47f aedb 	bne.w	8014ad8 <_strtod_l+0xb0>
 8014d22:	2a69      	cmp	r2, #105	; 0x69
 8014d24:	d029      	beq.n	8014d7a <_strtod_l+0x352>
 8014d26:	dc26      	bgt.n	8014d76 <_strtod_l+0x34e>
 8014d28:	2a49      	cmp	r2, #73	; 0x49
 8014d2a:	d026      	beq.n	8014d7a <_strtod_l+0x352>
 8014d2c:	2a4e      	cmp	r2, #78	; 0x4e
 8014d2e:	f47f aed3 	bne.w	8014ad8 <_strtod_l+0xb0>
 8014d32:	499b      	ldr	r1, [pc, #620]	; (8014fa0 <_strtod_l+0x578>)
 8014d34:	a815      	add	r0, sp, #84	; 0x54
 8014d36:	f002 ff21 	bl	8017b7c <__match>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	f43f aecc 	beq.w	8014ad8 <_strtod_l+0xb0>
 8014d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	2b28      	cmp	r3, #40	; 0x28
 8014d46:	d12f      	bne.n	8014da8 <_strtod_l+0x380>
 8014d48:	4996      	ldr	r1, [pc, #600]	; (8014fa4 <_strtod_l+0x57c>)
 8014d4a:	aa18      	add	r2, sp, #96	; 0x60
 8014d4c:	a815      	add	r0, sp, #84	; 0x54
 8014d4e:	f002 ff29 	bl	8017ba4 <__hexnan>
 8014d52:	2805      	cmp	r0, #5
 8014d54:	d128      	bne.n	8014da8 <_strtod_l+0x380>
 8014d56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014d58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014d5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8014d60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8014d64:	e69b      	b.n	8014a9e <_strtod_l+0x76>
 8014d66:	9f08      	ldr	r7, [sp, #32]
 8014d68:	210a      	movs	r1, #10
 8014d6a:	fb01 2107 	mla	r1, r1, r7, r2
 8014d6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8014d72:	9208      	str	r2, [sp, #32]
 8014d74:	e7b5      	b.n	8014ce2 <_strtod_l+0x2ba>
 8014d76:	2a6e      	cmp	r2, #110	; 0x6e
 8014d78:	e7d9      	b.n	8014d2e <_strtod_l+0x306>
 8014d7a:	498b      	ldr	r1, [pc, #556]	; (8014fa8 <_strtod_l+0x580>)
 8014d7c:	a815      	add	r0, sp, #84	; 0x54
 8014d7e:	f002 fefd 	bl	8017b7c <__match>
 8014d82:	2800      	cmp	r0, #0
 8014d84:	f43f aea8 	beq.w	8014ad8 <_strtod_l+0xb0>
 8014d88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d8a:	4988      	ldr	r1, [pc, #544]	; (8014fac <_strtod_l+0x584>)
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	a815      	add	r0, sp, #84	; 0x54
 8014d90:	9315      	str	r3, [sp, #84]	; 0x54
 8014d92:	f002 fef3 	bl	8017b7c <__match>
 8014d96:	b910      	cbnz	r0, 8014d9e <_strtod_l+0x376>
 8014d98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	9315      	str	r3, [sp, #84]	; 0x54
 8014d9e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8014fbc <_strtod_l+0x594>
 8014da2:	f04f 0800 	mov.w	r8, #0
 8014da6:	e67a      	b.n	8014a9e <_strtod_l+0x76>
 8014da8:	4881      	ldr	r0, [pc, #516]	; (8014fb0 <_strtod_l+0x588>)
 8014daa:	f001 fd69 	bl	8016880 <nan>
 8014dae:	ec59 8b10 	vmov	r8, r9, d0
 8014db2:	e674      	b.n	8014a9e <_strtod_l+0x76>
 8014db4:	9b05      	ldr	r3, [sp, #20]
 8014db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014db8:	1afb      	subs	r3, r7, r3
 8014dba:	f1bb 0f00 	cmp.w	fp, #0
 8014dbe:	bf08      	it	eq
 8014dc0:	46b3      	moveq	fp, r6
 8014dc2:	2e10      	cmp	r6, #16
 8014dc4:	9308      	str	r3, [sp, #32]
 8014dc6:	4635      	mov	r5, r6
 8014dc8:	bfa8      	it	ge
 8014dca:	2510      	movge	r5, #16
 8014dcc:	f7eb fbaa 	bl	8000524 <__aeabi_ui2d>
 8014dd0:	2e09      	cmp	r6, #9
 8014dd2:	4680      	mov	r8, r0
 8014dd4:	4689      	mov	r9, r1
 8014dd6:	dd13      	ble.n	8014e00 <_strtod_l+0x3d8>
 8014dd8:	4b76      	ldr	r3, [pc, #472]	; (8014fb4 <_strtod_l+0x58c>)
 8014dda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014dde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014de2:	f7eb fc19 	bl	8000618 <__aeabi_dmul>
 8014de6:	4680      	mov	r8, r0
 8014de8:	4650      	mov	r0, sl
 8014dea:	4689      	mov	r9, r1
 8014dec:	f7eb fb9a 	bl	8000524 <__aeabi_ui2d>
 8014df0:	4602      	mov	r2, r0
 8014df2:	460b      	mov	r3, r1
 8014df4:	4640      	mov	r0, r8
 8014df6:	4649      	mov	r1, r9
 8014df8:	f7eb fa58 	bl	80002ac <__adddf3>
 8014dfc:	4680      	mov	r8, r0
 8014dfe:	4689      	mov	r9, r1
 8014e00:	2e0f      	cmp	r6, #15
 8014e02:	dc38      	bgt.n	8014e76 <_strtod_l+0x44e>
 8014e04:	9b08      	ldr	r3, [sp, #32]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	f43f ae49 	beq.w	8014a9e <_strtod_l+0x76>
 8014e0c:	dd24      	ble.n	8014e58 <_strtod_l+0x430>
 8014e0e:	2b16      	cmp	r3, #22
 8014e10:	dc0b      	bgt.n	8014e2a <_strtod_l+0x402>
 8014e12:	4968      	ldr	r1, [pc, #416]	; (8014fb4 <_strtod_l+0x58c>)
 8014e14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e1c:	4642      	mov	r2, r8
 8014e1e:	464b      	mov	r3, r9
 8014e20:	f7eb fbfa 	bl	8000618 <__aeabi_dmul>
 8014e24:	4680      	mov	r8, r0
 8014e26:	4689      	mov	r9, r1
 8014e28:	e639      	b.n	8014a9e <_strtod_l+0x76>
 8014e2a:	9a08      	ldr	r2, [sp, #32]
 8014e2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8014e30:	4293      	cmp	r3, r2
 8014e32:	db20      	blt.n	8014e76 <_strtod_l+0x44e>
 8014e34:	4c5f      	ldr	r4, [pc, #380]	; (8014fb4 <_strtod_l+0x58c>)
 8014e36:	f1c6 060f 	rsb	r6, r6, #15
 8014e3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8014e3e:	4642      	mov	r2, r8
 8014e40:	464b      	mov	r3, r9
 8014e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e46:	f7eb fbe7 	bl	8000618 <__aeabi_dmul>
 8014e4a:	9b08      	ldr	r3, [sp, #32]
 8014e4c:	1b9e      	subs	r6, r3, r6
 8014e4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8014e52:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014e56:	e7e3      	b.n	8014e20 <_strtod_l+0x3f8>
 8014e58:	9b08      	ldr	r3, [sp, #32]
 8014e5a:	3316      	adds	r3, #22
 8014e5c:	db0b      	blt.n	8014e76 <_strtod_l+0x44e>
 8014e5e:	9b05      	ldr	r3, [sp, #20]
 8014e60:	1bdf      	subs	r7, r3, r7
 8014e62:	4b54      	ldr	r3, [pc, #336]	; (8014fb4 <_strtod_l+0x58c>)
 8014e64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8014e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e6c:	4640      	mov	r0, r8
 8014e6e:	4649      	mov	r1, r9
 8014e70:	f7eb fcfc 	bl	800086c <__aeabi_ddiv>
 8014e74:	e7d6      	b.n	8014e24 <_strtod_l+0x3fc>
 8014e76:	9b08      	ldr	r3, [sp, #32]
 8014e78:	1b75      	subs	r5, r6, r5
 8014e7a:	441d      	add	r5, r3
 8014e7c:	2d00      	cmp	r5, #0
 8014e7e:	dd70      	ble.n	8014f62 <_strtod_l+0x53a>
 8014e80:	f015 030f 	ands.w	r3, r5, #15
 8014e84:	d00a      	beq.n	8014e9c <_strtod_l+0x474>
 8014e86:	494b      	ldr	r1, [pc, #300]	; (8014fb4 <_strtod_l+0x58c>)
 8014e88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014e8c:	4642      	mov	r2, r8
 8014e8e:	464b      	mov	r3, r9
 8014e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e94:	f7eb fbc0 	bl	8000618 <__aeabi_dmul>
 8014e98:	4680      	mov	r8, r0
 8014e9a:	4689      	mov	r9, r1
 8014e9c:	f035 050f 	bics.w	r5, r5, #15
 8014ea0:	d04d      	beq.n	8014f3e <_strtod_l+0x516>
 8014ea2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8014ea6:	dd22      	ble.n	8014eee <_strtod_l+0x4c6>
 8014ea8:	2500      	movs	r5, #0
 8014eaa:	46ab      	mov	fp, r5
 8014eac:	9509      	str	r5, [sp, #36]	; 0x24
 8014eae:	9505      	str	r5, [sp, #20]
 8014eb0:	2322      	movs	r3, #34	; 0x22
 8014eb2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8014fbc <_strtod_l+0x594>
 8014eb6:	6023      	str	r3, [r4, #0]
 8014eb8:	f04f 0800 	mov.w	r8, #0
 8014ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f43f aded 	beq.w	8014a9e <_strtod_l+0x76>
 8014ec4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014ec6:	4620      	mov	r0, r4
 8014ec8:	f003 f80e 	bl	8017ee8 <_Bfree>
 8014ecc:	9905      	ldr	r1, [sp, #20]
 8014ece:	4620      	mov	r0, r4
 8014ed0:	f003 f80a 	bl	8017ee8 <_Bfree>
 8014ed4:	4659      	mov	r1, fp
 8014ed6:	4620      	mov	r0, r4
 8014ed8:	f003 f806 	bl	8017ee8 <_Bfree>
 8014edc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ede:	4620      	mov	r0, r4
 8014ee0:	f003 f802 	bl	8017ee8 <_Bfree>
 8014ee4:	4629      	mov	r1, r5
 8014ee6:	4620      	mov	r0, r4
 8014ee8:	f002 fffe 	bl	8017ee8 <_Bfree>
 8014eec:	e5d7      	b.n	8014a9e <_strtod_l+0x76>
 8014eee:	4b32      	ldr	r3, [pc, #200]	; (8014fb8 <_strtod_l+0x590>)
 8014ef0:	9304      	str	r3, [sp, #16]
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	112d      	asrs	r5, r5, #4
 8014ef6:	4640      	mov	r0, r8
 8014ef8:	4649      	mov	r1, r9
 8014efa:	469a      	mov	sl, r3
 8014efc:	2d01      	cmp	r5, #1
 8014efe:	dc21      	bgt.n	8014f44 <_strtod_l+0x51c>
 8014f00:	b10b      	cbz	r3, 8014f06 <_strtod_l+0x4de>
 8014f02:	4680      	mov	r8, r0
 8014f04:	4689      	mov	r9, r1
 8014f06:	492c      	ldr	r1, [pc, #176]	; (8014fb8 <_strtod_l+0x590>)
 8014f08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8014f0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014f10:	4642      	mov	r2, r8
 8014f12:	464b      	mov	r3, r9
 8014f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f18:	f7eb fb7e 	bl	8000618 <__aeabi_dmul>
 8014f1c:	4b27      	ldr	r3, [pc, #156]	; (8014fbc <_strtod_l+0x594>)
 8014f1e:	460a      	mov	r2, r1
 8014f20:	400b      	ands	r3, r1
 8014f22:	4927      	ldr	r1, [pc, #156]	; (8014fc0 <_strtod_l+0x598>)
 8014f24:	428b      	cmp	r3, r1
 8014f26:	4680      	mov	r8, r0
 8014f28:	d8be      	bhi.n	8014ea8 <_strtod_l+0x480>
 8014f2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014f2e:	428b      	cmp	r3, r1
 8014f30:	bf86      	itte	hi
 8014f32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8014fc4 <_strtod_l+0x59c>
 8014f36:	f04f 38ff 	movhi.w	r8, #4294967295
 8014f3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8014f3e:	2300      	movs	r3, #0
 8014f40:	9304      	str	r3, [sp, #16]
 8014f42:	e07b      	b.n	801503c <_strtod_l+0x614>
 8014f44:	07ea      	lsls	r2, r5, #31
 8014f46:	d505      	bpl.n	8014f54 <_strtod_l+0x52c>
 8014f48:	9b04      	ldr	r3, [sp, #16]
 8014f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f4e:	f7eb fb63 	bl	8000618 <__aeabi_dmul>
 8014f52:	2301      	movs	r3, #1
 8014f54:	9a04      	ldr	r2, [sp, #16]
 8014f56:	3208      	adds	r2, #8
 8014f58:	f10a 0a01 	add.w	sl, sl, #1
 8014f5c:	106d      	asrs	r5, r5, #1
 8014f5e:	9204      	str	r2, [sp, #16]
 8014f60:	e7cc      	b.n	8014efc <_strtod_l+0x4d4>
 8014f62:	d0ec      	beq.n	8014f3e <_strtod_l+0x516>
 8014f64:	426d      	negs	r5, r5
 8014f66:	f015 020f 	ands.w	r2, r5, #15
 8014f6a:	d00a      	beq.n	8014f82 <_strtod_l+0x55a>
 8014f6c:	4b11      	ldr	r3, [pc, #68]	; (8014fb4 <_strtod_l+0x58c>)
 8014f6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f72:	4640      	mov	r0, r8
 8014f74:	4649      	mov	r1, r9
 8014f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7a:	f7eb fc77 	bl	800086c <__aeabi_ddiv>
 8014f7e:	4680      	mov	r8, r0
 8014f80:	4689      	mov	r9, r1
 8014f82:	112d      	asrs	r5, r5, #4
 8014f84:	d0db      	beq.n	8014f3e <_strtod_l+0x516>
 8014f86:	2d1f      	cmp	r5, #31
 8014f88:	dd1e      	ble.n	8014fc8 <_strtod_l+0x5a0>
 8014f8a:	2500      	movs	r5, #0
 8014f8c:	46ab      	mov	fp, r5
 8014f8e:	9509      	str	r5, [sp, #36]	; 0x24
 8014f90:	9505      	str	r5, [sp, #20]
 8014f92:	2322      	movs	r3, #34	; 0x22
 8014f94:	f04f 0800 	mov.w	r8, #0
 8014f98:	f04f 0900 	mov.w	r9, #0
 8014f9c:	6023      	str	r3, [r4, #0]
 8014f9e:	e78d      	b.n	8014ebc <_strtod_l+0x494>
 8014fa0:	0801a9cd 	.word	0x0801a9cd
 8014fa4:	0801a980 	.word	0x0801a980
 8014fa8:	0801a9c5 	.word	0x0801a9c5
 8014fac:	0801aa02 	.word	0x0801aa02
 8014fb0:	0801adac 	.word	0x0801adac
 8014fb4:	0801ab70 	.word	0x0801ab70
 8014fb8:	0801ab48 	.word	0x0801ab48
 8014fbc:	7ff00000 	.word	0x7ff00000
 8014fc0:	7ca00000 	.word	0x7ca00000
 8014fc4:	7fefffff 	.word	0x7fefffff
 8014fc8:	f015 0310 	ands.w	r3, r5, #16
 8014fcc:	bf18      	it	ne
 8014fce:	236a      	movne	r3, #106	; 0x6a
 8014fd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8015374 <_strtod_l+0x94c>
 8014fd4:	9304      	str	r3, [sp, #16]
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	4649      	mov	r1, r9
 8014fda:	2300      	movs	r3, #0
 8014fdc:	07ea      	lsls	r2, r5, #31
 8014fde:	d504      	bpl.n	8014fea <_strtod_l+0x5c2>
 8014fe0:	e9da 2300 	ldrd	r2, r3, [sl]
 8014fe4:	f7eb fb18 	bl	8000618 <__aeabi_dmul>
 8014fe8:	2301      	movs	r3, #1
 8014fea:	106d      	asrs	r5, r5, #1
 8014fec:	f10a 0a08 	add.w	sl, sl, #8
 8014ff0:	d1f4      	bne.n	8014fdc <_strtod_l+0x5b4>
 8014ff2:	b10b      	cbz	r3, 8014ff8 <_strtod_l+0x5d0>
 8014ff4:	4680      	mov	r8, r0
 8014ff6:	4689      	mov	r9, r1
 8014ff8:	9b04      	ldr	r3, [sp, #16]
 8014ffa:	b1bb      	cbz	r3, 801502c <_strtod_l+0x604>
 8014ffc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015000:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015004:	2b00      	cmp	r3, #0
 8015006:	4649      	mov	r1, r9
 8015008:	dd10      	ble.n	801502c <_strtod_l+0x604>
 801500a:	2b1f      	cmp	r3, #31
 801500c:	f340 811e 	ble.w	801524c <_strtod_l+0x824>
 8015010:	2b34      	cmp	r3, #52	; 0x34
 8015012:	bfde      	ittt	le
 8015014:	f04f 33ff 	movle.w	r3, #4294967295
 8015018:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801501c:	4093      	lslle	r3, r2
 801501e:	f04f 0800 	mov.w	r8, #0
 8015022:	bfcc      	ite	gt
 8015024:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015028:	ea03 0901 	andle.w	r9, r3, r1
 801502c:	2200      	movs	r2, #0
 801502e:	2300      	movs	r3, #0
 8015030:	4640      	mov	r0, r8
 8015032:	4649      	mov	r1, r9
 8015034:	f7eb fd58 	bl	8000ae8 <__aeabi_dcmpeq>
 8015038:	2800      	cmp	r0, #0
 801503a:	d1a6      	bne.n	8014f8a <_strtod_l+0x562>
 801503c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801503e:	9300      	str	r3, [sp, #0]
 8015040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015042:	4633      	mov	r3, r6
 8015044:	465a      	mov	r2, fp
 8015046:	4620      	mov	r0, r4
 8015048:	f002 ffb6 	bl	8017fb8 <__s2b>
 801504c:	9009      	str	r0, [sp, #36]	; 0x24
 801504e:	2800      	cmp	r0, #0
 8015050:	f43f af2a 	beq.w	8014ea8 <_strtod_l+0x480>
 8015054:	9a08      	ldr	r2, [sp, #32]
 8015056:	9b05      	ldr	r3, [sp, #20]
 8015058:	2a00      	cmp	r2, #0
 801505a:	eba3 0307 	sub.w	r3, r3, r7
 801505e:	bfa8      	it	ge
 8015060:	2300      	movge	r3, #0
 8015062:	930c      	str	r3, [sp, #48]	; 0x30
 8015064:	2500      	movs	r5, #0
 8015066:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801506a:	9312      	str	r3, [sp, #72]	; 0x48
 801506c:	46ab      	mov	fp, r5
 801506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015070:	4620      	mov	r0, r4
 8015072:	6859      	ldr	r1, [r3, #4]
 8015074:	f002 fef8 	bl	8017e68 <_Balloc>
 8015078:	9005      	str	r0, [sp, #20]
 801507a:	2800      	cmp	r0, #0
 801507c:	f43f af18 	beq.w	8014eb0 <_strtod_l+0x488>
 8015080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015082:	691a      	ldr	r2, [r3, #16]
 8015084:	3202      	adds	r2, #2
 8015086:	f103 010c 	add.w	r1, r3, #12
 801508a:	0092      	lsls	r2, r2, #2
 801508c:	300c      	adds	r0, #12
 801508e:	f001 fbe8 	bl	8016862 <memcpy>
 8015092:	ec49 8b10 	vmov	d0, r8, r9
 8015096:	aa18      	add	r2, sp, #96	; 0x60
 8015098:	a917      	add	r1, sp, #92	; 0x5c
 801509a:	4620      	mov	r0, r4
 801509c:	f003 fac0 	bl	8018620 <__d2b>
 80150a0:	ec49 8b18 	vmov	d8, r8, r9
 80150a4:	9016      	str	r0, [sp, #88]	; 0x58
 80150a6:	2800      	cmp	r0, #0
 80150a8:	f43f af02 	beq.w	8014eb0 <_strtod_l+0x488>
 80150ac:	2101      	movs	r1, #1
 80150ae:	4620      	mov	r0, r4
 80150b0:	f003 f81a 	bl	80180e8 <__i2b>
 80150b4:	4683      	mov	fp, r0
 80150b6:	2800      	cmp	r0, #0
 80150b8:	f43f aefa 	beq.w	8014eb0 <_strtod_l+0x488>
 80150bc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80150be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80150c0:	2e00      	cmp	r6, #0
 80150c2:	bfab      	itete	ge
 80150c4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80150c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80150c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80150ca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80150ce:	bfac      	ite	ge
 80150d0:	eb06 0a03 	addge.w	sl, r6, r3
 80150d4:	1b9f      	sublt	r7, r3, r6
 80150d6:	9b04      	ldr	r3, [sp, #16]
 80150d8:	1af6      	subs	r6, r6, r3
 80150da:	4416      	add	r6, r2
 80150dc:	4ba0      	ldr	r3, [pc, #640]	; (8015360 <_strtod_l+0x938>)
 80150de:	3e01      	subs	r6, #1
 80150e0:	429e      	cmp	r6, r3
 80150e2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80150e6:	f280 80c4 	bge.w	8015272 <_strtod_l+0x84a>
 80150ea:	1b9b      	subs	r3, r3, r6
 80150ec:	2b1f      	cmp	r3, #31
 80150ee:	eba2 0203 	sub.w	r2, r2, r3
 80150f2:	f04f 0101 	mov.w	r1, #1
 80150f6:	f300 80b0 	bgt.w	801525a <_strtod_l+0x832>
 80150fa:	fa01 f303 	lsl.w	r3, r1, r3
 80150fe:	930e      	str	r3, [sp, #56]	; 0x38
 8015100:	2300      	movs	r3, #0
 8015102:	930d      	str	r3, [sp, #52]	; 0x34
 8015104:	eb0a 0602 	add.w	r6, sl, r2
 8015108:	9b04      	ldr	r3, [sp, #16]
 801510a:	45b2      	cmp	sl, r6
 801510c:	4417      	add	r7, r2
 801510e:	441f      	add	r7, r3
 8015110:	4653      	mov	r3, sl
 8015112:	bfa8      	it	ge
 8015114:	4633      	movge	r3, r6
 8015116:	42bb      	cmp	r3, r7
 8015118:	bfa8      	it	ge
 801511a:	463b      	movge	r3, r7
 801511c:	2b00      	cmp	r3, #0
 801511e:	bfc2      	ittt	gt
 8015120:	1af6      	subgt	r6, r6, r3
 8015122:	1aff      	subgt	r7, r7, r3
 8015124:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015128:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801512a:	2b00      	cmp	r3, #0
 801512c:	dd17      	ble.n	801515e <_strtod_l+0x736>
 801512e:	4659      	mov	r1, fp
 8015130:	461a      	mov	r2, r3
 8015132:	4620      	mov	r0, r4
 8015134:	f003 f898 	bl	8018268 <__pow5mult>
 8015138:	4683      	mov	fp, r0
 801513a:	2800      	cmp	r0, #0
 801513c:	f43f aeb8 	beq.w	8014eb0 <_strtod_l+0x488>
 8015140:	4601      	mov	r1, r0
 8015142:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015144:	4620      	mov	r0, r4
 8015146:	f002 ffe5 	bl	8018114 <__multiply>
 801514a:	900b      	str	r0, [sp, #44]	; 0x2c
 801514c:	2800      	cmp	r0, #0
 801514e:	f43f aeaf 	beq.w	8014eb0 <_strtod_l+0x488>
 8015152:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015154:	4620      	mov	r0, r4
 8015156:	f002 fec7 	bl	8017ee8 <_Bfree>
 801515a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801515c:	9316      	str	r3, [sp, #88]	; 0x58
 801515e:	2e00      	cmp	r6, #0
 8015160:	f300 808c 	bgt.w	801527c <_strtod_l+0x854>
 8015164:	9b08      	ldr	r3, [sp, #32]
 8015166:	2b00      	cmp	r3, #0
 8015168:	dd08      	ble.n	801517c <_strtod_l+0x754>
 801516a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801516c:	9905      	ldr	r1, [sp, #20]
 801516e:	4620      	mov	r0, r4
 8015170:	f003 f87a 	bl	8018268 <__pow5mult>
 8015174:	9005      	str	r0, [sp, #20]
 8015176:	2800      	cmp	r0, #0
 8015178:	f43f ae9a 	beq.w	8014eb0 <_strtod_l+0x488>
 801517c:	2f00      	cmp	r7, #0
 801517e:	dd08      	ble.n	8015192 <_strtod_l+0x76a>
 8015180:	9905      	ldr	r1, [sp, #20]
 8015182:	463a      	mov	r2, r7
 8015184:	4620      	mov	r0, r4
 8015186:	f003 f8c9 	bl	801831c <__lshift>
 801518a:	9005      	str	r0, [sp, #20]
 801518c:	2800      	cmp	r0, #0
 801518e:	f43f ae8f 	beq.w	8014eb0 <_strtod_l+0x488>
 8015192:	f1ba 0f00 	cmp.w	sl, #0
 8015196:	dd08      	ble.n	80151aa <_strtod_l+0x782>
 8015198:	4659      	mov	r1, fp
 801519a:	4652      	mov	r2, sl
 801519c:	4620      	mov	r0, r4
 801519e:	f003 f8bd 	bl	801831c <__lshift>
 80151a2:	4683      	mov	fp, r0
 80151a4:	2800      	cmp	r0, #0
 80151a6:	f43f ae83 	beq.w	8014eb0 <_strtod_l+0x488>
 80151aa:	9a05      	ldr	r2, [sp, #20]
 80151ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80151ae:	4620      	mov	r0, r4
 80151b0:	f003 f93c 	bl	801842c <__mdiff>
 80151b4:	4605      	mov	r5, r0
 80151b6:	2800      	cmp	r0, #0
 80151b8:	f43f ae7a 	beq.w	8014eb0 <_strtod_l+0x488>
 80151bc:	68c3      	ldr	r3, [r0, #12]
 80151be:	930b      	str	r3, [sp, #44]	; 0x2c
 80151c0:	2300      	movs	r3, #0
 80151c2:	60c3      	str	r3, [r0, #12]
 80151c4:	4659      	mov	r1, fp
 80151c6:	f003 f915 	bl	80183f4 <__mcmp>
 80151ca:	2800      	cmp	r0, #0
 80151cc:	da60      	bge.n	8015290 <_strtod_l+0x868>
 80151ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151d0:	ea53 0308 	orrs.w	r3, r3, r8
 80151d4:	f040 8084 	bne.w	80152e0 <_strtod_l+0x8b8>
 80151d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d17f      	bne.n	80152e0 <_strtod_l+0x8b8>
 80151e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80151e4:	0d1b      	lsrs	r3, r3, #20
 80151e6:	051b      	lsls	r3, r3, #20
 80151e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80151ec:	d978      	bls.n	80152e0 <_strtod_l+0x8b8>
 80151ee:	696b      	ldr	r3, [r5, #20]
 80151f0:	b913      	cbnz	r3, 80151f8 <_strtod_l+0x7d0>
 80151f2:	692b      	ldr	r3, [r5, #16]
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	dd73      	ble.n	80152e0 <_strtod_l+0x8b8>
 80151f8:	4629      	mov	r1, r5
 80151fa:	2201      	movs	r2, #1
 80151fc:	4620      	mov	r0, r4
 80151fe:	f003 f88d 	bl	801831c <__lshift>
 8015202:	4659      	mov	r1, fp
 8015204:	4605      	mov	r5, r0
 8015206:	f003 f8f5 	bl	80183f4 <__mcmp>
 801520a:	2800      	cmp	r0, #0
 801520c:	dd68      	ble.n	80152e0 <_strtod_l+0x8b8>
 801520e:	9904      	ldr	r1, [sp, #16]
 8015210:	4a54      	ldr	r2, [pc, #336]	; (8015364 <_strtod_l+0x93c>)
 8015212:	464b      	mov	r3, r9
 8015214:	2900      	cmp	r1, #0
 8015216:	f000 8084 	beq.w	8015322 <_strtod_l+0x8fa>
 801521a:	ea02 0109 	and.w	r1, r2, r9
 801521e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015222:	dc7e      	bgt.n	8015322 <_strtod_l+0x8fa>
 8015224:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015228:	f77f aeb3 	ble.w	8014f92 <_strtod_l+0x56a>
 801522c:	4b4e      	ldr	r3, [pc, #312]	; (8015368 <_strtod_l+0x940>)
 801522e:	4640      	mov	r0, r8
 8015230:	4649      	mov	r1, r9
 8015232:	2200      	movs	r2, #0
 8015234:	f7eb f9f0 	bl	8000618 <__aeabi_dmul>
 8015238:	4b4a      	ldr	r3, [pc, #296]	; (8015364 <_strtod_l+0x93c>)
 801523a:	400b      	ands	r3, r1
 801523c:	4680      	mov	r8, r0
 801523e:	4689      	mov	r9, r1
 8015240:	2b00      	cmp	r3, #0
 8015242:	f47f ae3f 	bne.w	8014ec4 <_strtod_l+0x49c>
 8015246:	2322      	movs	r3, #34	; 0x22
 8015248:	6023      	str	r3, [r4, #0]
 801524a:	e63b      	b.n	8014ec4 <_strtod_l+0x49c>
 801524c:	f04f 32ff 	mov.w	r2, #4294967295
 8015250:	fa02 f303 	lsl.w	r3, r2, r3
 8015254:	ea03 0808 	and.w	r8, r3, r8
 8015258:	e6e8      	b.n	801502c <_strtod_l+0x604>
 801525a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801525e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015262:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015266:	36e2      	adds	r6, #226	; 0xe2
 8015268:	fa01 f306 	lsl.w	r3, r1, r6
 801526c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015270:	e748      	b.n	8015104 <_strtod_l+0x6dc>
 8015272:	2100      	movs	r1, #0
 8015274:	2301      	movs	r3, #1
 8015276:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801527a:	e743      	b.n	8015104 <_strtod_l+0x6dc>
 801527c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801527e:	4632      	mov	r2, r6
 8015280:	4620      	mov	r0, r4
 8015282:	f003 f84b 	bl	801831c <__lshift>
 8015286:	9016      	str	r0, [sp, #88]	; 0x58
 8015288:	2800      	cmp	r0, #0
 801528a:	f47f af6b 	bne.w	8015164 <_strtod_l+0x73c>
 801528e:	e60f      	b.n	8014eb0 <_strtod_l+0x488>
 8015290:	46ca      	mov	sl, r9
 8015292:	d171      	bne.n	8015378 <_strtod_l+0x950>
 8015294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015296:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801529a:	b352      	cbz	r2, 80152f2 <_strtod_l+0x8ca>
 801529c:	4a33      	ldr	r2, [pc, #204]	; (801536c <_strtod_l+0x944>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d12a      	bne.n	80152f8 <_strtod_l+0x8d0>
 80152a2:	9b04      	ldr	r3, [sp, #16]
 80152a4:	4641      	mov	r1, r8
 80152a6:	b1fb      	cbz	r3, 80152e8 <_strtod_l+0x8c0>
 80152a8:	4b2e      	ldr	r3, [pc, #184]	; (8015364 <_strtod_l+0x93c>)
 80152aa:	ea09 0303 	and.w	r3, r9, r3
 80152ae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80152b2:	f04f 32ff 	mov.w	r2, #4294967295
 80152b6:	d81a      	bhi.n	80152ee <_strtod_l+0x8c6>
 80152b8:	0d1b      	lsrs	r3, r3, #20
 80152ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80152be:	fa02 f303 	lsl.w	r3, r2, r3
 80152c2:	4299      	cmp	r1, r3
 80152c4:	d118      	bne.n	80152f8 <_strtod_l+0x8d0>
 80152c6:	4b2a      	ldr	r3, [pc, #168]	; (8015370 <_strtod_l+0x948>)
 80152c8:	459a      	cmp	sl, r3
 80152ca:	d102      	bne.n	80152d2 <_strtod_l+0x8aa>
 80152cc:	3101      	adds	r1, #1
 80152ce:	f43f adef 	beq.w	8014eb0 <_strtod_l+0x488>
 80152d2:	4b24      	ldr	r3, [pc, #144]	; (8015364 <_strtod_l+0x93c>)
 80152d4:	ea0a 0303 	and.w	r3, sl, r3
 80152d8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80152dc:	f04f 0800 	mov.w	r8, #0
 80152e0:	9b04      	ldr	r3, [sp, #16]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d1a2      	bne.n	801522c <_strtod_l+0x804>
 80152e6:	e5ed      	b.n	8014ec4 <_strtod_l+0x49c>
 80152e8:	f04f 33ff 	mov.w	r3, #4294967295
 80152ec:	e7e9      	b.n	80152c2 <_strtod_l+0x89a>
 80152ee:	4613      	mov	r3, r2
 80152f0:	e7e7      	b.n	80152c2 <_strtod_l+0x89a>
 80152f2:	ea53 0308 	orrs.w	r3, r3, r8
 80152f6:	d08a      	beq.n	801520e <_strtod_l+0x7e6>
 80152f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80152fa:	b1e3      	cbz	r3, 8015336 <_strtod_l+0x90e>
 80152fc:	ea13 0f0a 	tst.w	r3, sl
 8015300:	d0ee      	beq.n	80152e0 <_strtod_l+0x8b8>
 8015302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015304:	9a04      	ldr	r2, [sp, #16]
 8015306:	4640      	mov	r0, r8
 8015308:	4649      	mov	r1, r9
 801530a:	b1c3      	cbz	r3, 801533e <_strtod_l+0x916>
 801530c:	f7ff fb6e 	bl	80149ec <sulp>
 8015310:	4602      	mov	r2, r0
 8015312:	460b      	mov	r3, r1
 8015314:	ec51 0b18 	vmov	r0, r1, d8
 8015318:	f7ea ffc8 	bl	80002ac <__adddf3>
 801531c:	4680      	mov	r8, r0
 801531e:	4689      	mov	r9, r1
 8015320:	e7de      	b.n	80152e0 <_strtod_l+0x8b8>
 8015322:	4013      	ands	r3, r2
 8015324:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015328:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801532c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015330:	f04f 38ff 	mov.w	r8, #4294967295
 8015334:	e7d4      	b.n	80152e0 <_strtod_l+0x8b8>
 8015336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015338:	ea13 0f08 	tst.w	r3, r8
 801533c:	e7e0      	b.n	8015300 <_strtod_l+0x8d8>
 801533e:	f7ff fb55 	bl	80149ec <sulp>
 8015342:	4602      	mov	r2, r0
 8015344:	460b      	mov	r3, r1
 8015346:	ec51 0b18 	vmov	r0, r1, d8
 801534a:	f7ea ffad 	bl	80002a8 <__aeabi_dsub>
 801534e:	2200      	movs	r2, #0
 8015350:	2300      	movs	r3, #0
 8015352:	4680      	mov	r8, r0
 8015354:	4689      	mov	r9, r1
 8015356:	f7eb fbc7 	bl	8000ae8 <__aeabi_dcmpeq>
 801535a:	2800      	cmp	r0, #0
 801535c:	d0c0      	beq.n	80152e0 <_strtod_l+0x8b8>
 801535e:	e618      	b.n	8014f92 <_strtod_l+0x56a>
 8015360:	fffffc02 	.word	0xfffffc02
 8015364:	7ff00000 	.word	0x7ff00000
 8015368:	39500000 	.word	0x39500000
 801536c:	000fffff 	.word	0x000fffff
 8015370:	7fefffff 	.word	0x7fefffff
 8015374:	0801a998 	.word	0x0801a998
 8015378:	4659      	mov	r1, fp
 801537a:	4628      	mov	r0, r5
 801537c:	f003 f9aa 	bl	80186d4 <__ratio>
 8015380:	ec57 6b10 	vmov	r6, r7, d0
 8015384:	ee10 0a10 	vmov	r0, s0
 8015388:	2200      	movs	r2, #0
 801538a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801538e:	4639      	mov	r1, r7
 8015390:	f7eb fbbe 	bl	8000b10 <__aeabi_dcmple>
 8015394:	2800      	cmp	r0, #0
 8015396:	d071      	beq.n	801547c <_strtod_l+0xa54>
 8015398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801539a:	2b00      	cmp	r3, #0
 801539c:	d17c      	bne.n	8015498 <_strtod_l+0xa70>
 801539e:	f1b8 0f00 	cmp.w	r8, #0
 80153a2:	d15a      	bne.n	801545a <_strtod_l+0xa32>
 80153a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d15d      	bne.n	8015468 <_strtod_l+0xa40>
 80153ac:	4b90      	ldr	r3, [pc, #576]	; (80155f0 <_strtod_l+0xbc8>)
 80153ae:	2200      	movs	r2, #0
 80153b0:	4630      	mov	r0, r6
 80153b2:	4639      	mov	r1, r7
 80153b4:	f7eb fba2 	bl	8000afc <__aeabi_dcmplt>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d15c      	bne.n	8015476 <_strtod_l+0xa4e>
 80153bc:	4630      	mov	r0, r6
 80153be:	4639      	mov	r1, r7
 80153c0:	4b8c      	ldr	r3, [pc, #560]	; (80155f4 <_strtod_l+0xbcc>)
 80153c2:	2200      	movs	r2, #0
 80153c4:	f7eb f928 	bl	8000618 <__aeabi_dmul>
 80153c8:	4606      	mov	r6, r0
 80153ca:	460f      	mov	r7, r1
 80153cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80153d0:	9606      	str	r6, [sp, #24]
 80153d2:	9307      	str	r3, [sp, #28]
 80153d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80153dc:	4b86      	ldr	r3, [pc, #536]	; (80155f8 <_strtod_l+0xbd0>)
 80153de:	ea0a 0303 	and.w	r3, sl, r3
 80153e2:	930d      	str	r3, [sp, #52]	; 0x34
 80153e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80153e6:	4b85      	ldr	r3, [pc, #532]	; (80155fc <_strtod_l+0xbd4>)
 80153e8:	429a      	cmp	r2, r3
 80153ea:	f040 8090 	bne.w	801550e <_strtod_l+0xae6>
 80153ee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80153f2:	ec49 8b10 	vmov	d0, r8, r9
 80153f6:	f003 f8a3 	bl	8018540 <__ulp>
 80153fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80153fe:	ec51 0b10 	vmov	r0, r1, d0
 8015402:	f7eb f909 	bl	8000618 <__aeabi_dmul>
 8015406:	4642      	mov	r2, r8
 8015408:	464b      	mov	r3, r9
 801540a:	f7ea ff4f 	bl	80002ac <__adddf3>
 801540e:	460b      	mov	r3, r1
 8015410:	4979      	ldr	r1, [pc, #484]	; (80155f8 <_strtod_l+0xbd0>)
 8015412:	4a7b      	ldr	r2, [pc, #492]	; (8015600 <_strtod_l+0xbd8>)
 8015414:	4019      	ands	r1, r3
 8015416:	4291      	cmp	r1, r2
 8015418:	4680      	mov	r8, r0
 801541a:	d944      	bls.n	80154a6 <_strtod_l+0xa7e>
 801541c:	ee18 2a90 	vmov	r2, s17
 8015420:	4b78      	ldr	r3, [pc, #480]	; (8015604 <_strtod_l+0xbdc>)
 8015422:	429a      	cmp	r2, r3
 8015424:	d104      	bne.n	8015430 <_strtod_l+0xa08>
 8015426:	ee18 3a10 	vmov	r3, s16
 801542a:	3301      	adds	r3, #1
 801542c:	f43f ad40 	beq.w	8014eb0 <_strtod_l+0x488>
 8015430:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015604 <_strtod_l+0xbdc>
 8015434:	f04f 38ff 	mov.w	r8, #4294967295
 8015438:	9916      	ldr	r1, [sp, #88]	; 0x58
 801543a:	4620      	mov	r0, r4
 801543c:	f002 fd54 	bl	8017ee8 <_Bfree>
 8015440:	9905      	ldr	r1, [sp, #20]
 8015442:	4620      	mov	r0, r4
 8015444:	f002 fd50 	bl	8017ee8 <_Bfree>
 8015448:	4659      	mov	r1, fp
 801544a:	4620      	mov	r0, r4
 801544c:	f002 fd4c 	bl	8017ee8 <_Bfree>
 8015450:	4629      	mov	r1, r5
 8015452:	4620      	mov	r0, r4
 8015454:	f002 fd48 	bl	8017ee8 <_Bfree>
 8015458:	e609      	b.n	801506e <_strtod_l+0x646>
 801545a:	f1b8 0f01 	cmp.w	r8, #1
 801545e:	d103      	bne.n	8015468 <_strtod_l+0xa40>
 8015460:	f1b9 0f00 	cmp.w	r9, #0
 8015464:	f43f ad95 	beq.w	8014f92 <_strtod_l+0x56a>
 8015468:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80155c0 <_strtod_l+0xb98>
 801546c:	4f60      	ldr	r7, [pc, #384]	; (80155f0 <_strtod_l+0xbc8>)
 801546e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015472:	2600      	movs	r6, #0
 8015474:	e7ae      	b.n	80153d4 <_strtod_l+0x9ac>
 8015476:	4f5f      	ldr	r7, [pc, #380]	; (80155f4 <_strtod_l+0xbcc>)
 8015478:	2600      	movs	r6, #0
 801547a:	e7a7      	b.n	80153cc <_strtod_l+0x9a4>
 801547c:	4b5d      	ldr	r3, [pc, #372]	; (80155f4 <_strtod_l+0xbcc>)
 801547e:	4630      	mov	r0, r6
 8015480:	4639      	mov	r1, r7
 8015482:	2200      	movs	r2, #0
 8015484:	f7eb f8c8 	bl	8000618 <__aeabi_dmul>
 8015488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801548a:	4606      	mov	r6, r0
 801548c:	460f      	mov	r7, r1
 801548e:	2b00      	cmp	r3, #0
 8015490:	d09c      	beq.n	80153cc <_strtod_l+0x9a4>
 8015492:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015496:	e79d      	b.n	80153d4 <_strtod_l+0x9ac>
 8015498:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80155c8 <_strtod_l+0xba0>
 801549c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80154a0:	ec57 6b17 	vmov	r6, r7, d7
 80154a4:	e796      	b.n	80153d4 <_strtod_l+0x9ac>
 80154a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80154aa:	9b04      	ldr	r3, [sp, #16]
 80154ac:	46ca      	mov	sl, r9
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d1c2      	bne.n	8015438 <_strtod_l+0xa10>
 80154b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154b8:	0d1b      	lsrs	r3, r3, #20
 80154ba:	051b      	lsls	r3, r3, #20
 80154bc:	429a      	cmp	r2, r3
 80154be:	d1bb      	bne.n	8015438 <_strtod_l+0xa10>
 80154c0:	4630      	mov	r0, r6
 80154c2:	4639      	mov	r1, r7
 80154c4:	f7eb fc08 	bl	8000cd8 <__aeabi_d2lz>
 80154c8:	f7eb f878 	bl	80005bc <__aeabi_l2d>
 80154cc:	4602      	mov	r2, r0
 80154ce:	460b      	mov	r3, r1
 80154d0:	4630      	mov	r0, r6
 80154d2:	4639      	mov	r1, r7
 80154d4:	f7ea fee8 	bl	80002a8 <__aeabi_dsub>
 80154d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80154da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80154de:	ea43 0308 	orr.w	r3, r3, r8
 80154e2:	4313      	orrs	r3, r2
 80154e4:	4606      	mov	r6, r0
 80154e6:	460f      	mov	r7, r1
 80154e8:	d054      	beq.n	8015594 <_strtod_l+0xb6c>
 80154ea:	a339      	add	r3, pc, #228	; (adr r3, 80155d0 <_strtod_l+0xba8>)
 80154ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f0:	f7eb fb04 	bl	8000afc <__aeabi_dcmplt>
 80154f4:	2800      	cmp	r0, #0
 80154f6:	f47f ace5 	bne.w	8014ec4 <_strtod_l+0x49c>
 80154fa:	a337      	add	r3, pc, #220	; (adr r3, 80155d8 <_strtod_l+0xbb0>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	4630      	mov	r0, r6
 8015502:	4639      	mov	r1, r7
 8015504:	f7eb fb18 	bl	8000b38 <__aeabi_dcmpgt>
 8015508:	2800      	cmp	r0, #0
 801550a:	d095      	beq.n	8015438 <_strtod_l+0xa10>
 801550c:	e4da      	b.n	8014ec4 <_strtod_l+0x49c>
 801550e:	9b04      	ldr	r3, [sp, #16]
 8015510:	b333      	cbz	r3, 8015560 <_strtod_l+0xb38>
 8015512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015514:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015518:	d822      	bhi.n	8015560 <_strtod_l+0xb38>
 801551a:	a331      	add	r3, pc, #196	; (adr r3, 80155e0 <_strtod_l+0xbb8>)
 801551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015520:	4630      	mov	r0, r6
 8015522:	4639      	mov	r1, r7
 8015524:	f7eb faf4 	bl	8000b10 <__aeabi_dcmple>
 8015528:	b1a0      	cbz	r0, 8015554 <_strtod_l+0xb2c>
 801552a:	4639      	mov	r1, r7
 801552c:	4630      	mov	r0, r6
 801552e:	f7eb fb4b 	bl	8000bc8 <__aeabi_d2uiz>
 8015532:	2801      	cmp	r0, #1
 8015534:	bf38      	it	cc
 8015536:	2001      	movcc	r0, #1
 8015538:	f7ea fff4 	bl	8000524 <__aeabi_ui2d>
 801553c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801553e:	4606      	mov	r6, r0
 8015540:	460f      	mov	r7, r1
 8015542:	bb23      	cbnz	r3, 801558e <_strtod_l+0xb66>
 8015544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015548:	9010      	str	r0, [sp, #64]	; 0x40
 801554a:	9311      	str	r3, [sp, #68]	; 0x44
 801554c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015550:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015556:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015558:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801555c:	1a9b      	subs	r3, r3, r2
 801555e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015560:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015564:	eeb0 0a48 	vmov.f32	s0, s16
 8015568:	eef0 0a68 	vmov.f32	s1, s17
 801556c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015570:	f002 ffe6 	bl	8018540 <__ulp>
 8015574:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015578:	ec53 2b10 	vmov	r2, r3, d0
 801557c:	f7eb f84c 	bl	8000618 <__aeabi_dmul>
 8015580:	ec53 2b18 	vmov	r2, r3, d8
 8015584:	f7ea fe92 	bl	80002ac <__adddf3>
 8015588:	4680      	mov	r8, r0
 801558a:	4689      	mov	r9, r1
 801558c:	e78d      	b.n	80154aa <_strtod_l+0xa82>
 801558e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015592:	e7db      	b.n	801554c <_strtod_l+0xb24>
 8015594:	a314      	add	r3, pc, #80	; (adr r3, 80155e8 <_strtod_l+0xbc0>)
 8015596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559a:	f7eb faaf 	bl	8000afc <__aeabi_dcmplt>
 801559e:	e7b3      	b.n	8015508 <_strtod_l+0xae0>
 80155a0:	2300      	movs	r3, #0
 80155a2:	930a      	str	r3, [sp, #40]	; 0x28
 80155a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80155a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155a8:	6013      	str	r3, [r2, #0]
 80155aa:	f7ff ba7c 	b.w	8014aa6 <_strtod_l+0x7e>
 80155ae:	2a65      	cmp	r2, #101	; 0x65
 80155b0:	f43f ab75 	beq.w	8014c9e <_strtod_l+0x276>
 80155b4:	2a45      	cmp	r2, #69	; 0x45
 80155b6:	f43f ab72 	beq.w	8014c9e <_strtod_l+0x276>
 80155ba:	2301      	movs	r3, #1
 80155bc:	f7ff bbaa 	b.w	8014d14 <_strtod_l+0x2ec>
 80155c0:	00000000 	.word	0x00000000
 80155c4:	bff00000 	.word	0xbff00000
 80155c8:	00000000 	.word	0x00000000
 80155cc:	3ff00000 	.word	0x3ff00000
 80155d0:	94a03595 	.word	0x94a03595
 80155d4:	3fdfffff 	.word	0x3fdfffff
 80155d8:	35afe535 	.word	0x35afe535
 80155dc:	3fe00000 	.word	0x3fe00000
 80155e0:	ffc00000 	.word	0xffc00000
 80155e4:	41dfffff 	.word	0x41dfffff
 80155e8:	94a03595 	.word	0x94a03595
 80155ec:	3fcfffff 	.word	0x3fcfffff
 80155f0:	3ff00000 	.word	0x3ff00000
 80155f4:	3fe00000 	.word	0x3fe00000
 80155f8:	7ff00000 	.word	0x7ff00000
 80155fc:	7fe00000 	.word	0x7fe00000
 8015600:	7c9fffff 	.word	0x7c9fffff
 8015604:	7fefffff 	.word	0x7fefffff

08015608 <_strtod_r>:
 8015608:	4b01      	ldr	r3, [pc, #4]	; (8015610 <_strtod_r+0x8>)
 801560a:	f7ff ba0d 	b.w	8014a28 <_strtod_l>
 801560e:	bf00      	nop
 8015610:	20000178 	.word	0x20000178

08015614 <strtod>:
 8015614:	460a      	mov	r2, r1
 8015616:	4601      	mov	r1, r0
 8015618:	4802      	ldr	r0, [pc, #8]	; (8015624 <strtod+0x10>)
 801561a:	4b03      	ldr	r3, [pc, #12]	; (8015628 <strtod+0x14>)
 801561c:	6800      	ldr	r0, [r0, #0]
 801561e:	f7ff ba03 	b.w	8014a28 <_strtod_l>
 8015622:	bf00      	nop
 8015624:	20000330 	.word	0x20000330
 8015628:	20000178 	.word	0x20000178

0801562c <__cvt>:
 801562c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015630:	ec55 4b10 	vmov	r4, r5, d0
 8015634:	2d00      	cmp	r5, #0
 8015636:	460e      	mov	r6, r1
 8015638:	4619      	mov	r1, r3
 801563a:	462b      	mov	r3, r5
 801563c:	bfbb      	ittet	lt
 801563e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015642:	461d      	movlt	r5, r3
 8015644:	2300      	movge	r3, #0
 8015646:	232d      	movlt	r3, #45	; 0x2d
 8015648:	700b      	strb	r3, [r1, #0]
 801564a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801564c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015650:	4691      	mov	r9, r2
 8015652:	f023 0820 	bic.w	r8, r3, #32
 8015656:	bfbc      	itt	lt
 8015658:	4622      	movlt	r2, r4
 801565a:	4614      	movlt	r4, r2
 801565c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015660:	d005      	beq.n	801566e <__cvt+0x42>
 8015662:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8015666:	d100      	bne.n	801566a <__cvt+0x3e>
 8015668:	3601      	adds	r6, #1
 801566a:	2102      	movs	r1, #2
 801566c:	e000      	b.n	8015670 <__cvt+0x44>
 801566e:	2103      	movs	r1, #3
 8015670:	ab03      	add	r3, sp, #12
 8015672:	9301      	str	r3, [sp, #4]
 8015674:	ab02      	add	r3, sp, #8
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	ec45 4b10 	vmov	d0, r4, r5
 801567c:	4653      	mov	r3, sl
 801567e:	4632      	mov	r2, r6
 8015680:	f001 f996 	bl	80169b0 <_dtoa_r>
 8015684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8015688:	4607      	mov	r7, r0
 801568a:	d102      	bne.n	8015692 <__cvt+0x66>
 801568c:	f019 0f01 	tst.w	r9, #1
 8015690:	d022      	beq.n	80156d8 <__cvt+0xac>
 8015692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8015696:	eb07 0906 	add.w	r9, r7, r6
 801569a:	d110      	bne.n	80156be <__cvt+0x92>
 801569c:	783b      	ldrb	r3, [r7, #0]
 801569e:	2b30      	cmp	r3, #48	; 0x30
 80156a0:	d10a      	bne.n	80156b8 <__cvt+0x8c>
 80156a2:	2200      	movs	r2, #0
 80156a4:	2300      	movs	r3, #0
 80156a6:	4620      	mov	r0, r4
 80156a8:	4629      	mov	r1, r5
 80156aa:	f7eb fa1d 	bl	8000ae8 <__aeabi_dcmpeq>
 80156ae:	b918      	cbnz	r0, 80156b8 <__cvt+0x8c>
 80156b0:	f1c6 0601 	rsb	r6, r6, #1
 80156b4:	f8ca 6000 	str.w	r6, [sl]
 80156b8:	f8da 3000 	ldr.w	r3, [sl]
 80156bc:	4499      	add	r9, r3
 80156be:	2200      	movs	r2, #0
 80156c0:	2300      	movs	r3, #0
 80156c2:	4620      	mov	r0, r4
 80156c4:	4629      	mov	r1, r5
 80156c6:	f7eb fa0f 	bl	8000ae8 <__aeabi_dcmpeq>
 80156ca:	b108      	cbz	r0, 80156d0 <__cvt+0xa4>
 80156cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80156d0:	2230      	movs	r2, #48	; 0x30
 80156d2:	9b03      	ldr	r3, [sp, #12]
 80156d4:	454b      	cmp	r3, r9
 80156d6:	d307      	bcc.n	80156e8 <__cvt+0xbc>
 80156d8:	9b03      	ldr	r3, [sp, #12]
 80156da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156dc:	1bdb      	subs	r3, r3, r7
 80156de:	4638      	mov	r0, r7
 80156e0:	6013      	str	r3, [r2, #0]
 80156e2:	b004      	add	sp, #16
 80156e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156e8:	1c59      	adds	r1, r3, #1
 80156ea:	9103      	str	r1, [sp, #12]
 80156ec:	701a      	strb	r2, [r3, #0]
 80156ee:	e7f0      	b.n	80156d2 <__cvt+0xa6>

080156f0 <__exponent>:
 80156f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80156f2:	4603      	mov	r3, r0
 80156f4:	2900      	cmp	r1, #0
 80156f6:	bfb8      	it	lt
 80156f8:	4249      	neglt	r1, r1
 80156fa:	f803 2b02 	strb.w	r2, [r3], #2
 80156fe:	bfb4      	ite	lt
 8015700:	222d      	movlt	r2, #45	; 0x2d
 8015702:	222b      	movge	r2, #43	; 0x2b
 8015704:	2909      	cmp	r1, #9
 8015706:	7042      	strb	r2, [r0, #1]
 8015708:	dd2a      	ble.n	8015760 <__exponent+0x70>
 801570a:	f10d 0207 	add.w	r2, sp, #7
 801570e:	4617      	mov	r7, r2
 8015710:	260a      	movs	r6, #10
 8015712:	4694      	mov	ip, r2
 8015714:	fb91 f5f6 	sdiv	r5, r1, r6
 8015718:	fb06 1415 	mls	r4, r6, r5, r1
 801571c:	3430      	adds	r4, #48	; 0x30
 801571e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8015722:	460c      	mov	r4, r1
 8015724:	2c63      	cmp	r4, #99	; 0x63
 8015726:	f102 32ff 	add.w	r2, r2, #4294967295
 801572a:	4629      	mov	r1, r5
 801572c:	dcf1      	bgt.n	8015712 <__exponent+0x22>
 801572e:	3130      	adds	r1, #48	; 0x30
 8015730:	f1ac 0402 	sub.w	r4, ip, #2
 8015734:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015738:	1c41      	adds	r1, r0, #1
 801573a:	4622      	mov	r2, r4
 801573c:	42ba      	cmp	r2, r7
 801573e:	d30a      	bcc.n	8015756 <__exponent+0x66>
 8015740:	f10d 0209 	add.w	r2, sp, #9
 8015744:	eba2 020c 	sub.w	r2, r2, ip
 8015748:	42bc      	cmp	r4, r7
 801574a:	bf88      	it	hi
 801574c:	2200      	movhi	r2, #0
 801574e:	4413      	add	r3, r2
 8015750:	1a18      	subs	r0, r3, r0
 8015752:	b003      	add	sp, #12
 8015754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015756:	f812 5b01 	ldrb.w	r5, [r2], #1
 801575a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801575e:	e7ed      	b.n	801573c <__exponent+0x4c>
 8015760:	2330      	movs	r3, #48	; 0x30
 8015762:	3130      	adds	r1, #48	; 0x30
 8015764:	7083      	strb	r3, [r0, #2]
 8015766:	70c1      	strb	r1, [r0, #3]
 8015768:	1d03      	adds	r3, r0, #4
 801576a:	e7f1      	b.n	8015750 <__exponent+0x60>

0801576c <_printf_float>:
 801576c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015770:	ed2d 8b02 	vpush	{d8}
 8015774:	b08d      	sub	sp, #52	; 0x34
 8015776:	460c      	mov	r4, r1
 8015778:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801577c:	4616      	mov	r6, r2
 801577e:	461f      	mov	r7, r3
 8015780:	4605      	mov	r5, r0
 8015782:	f000 ff99 	bl	80166b8 <_localeconv_r>
 8015786:	f8d0 a000 	ldr.w	sl, [r0]
 801578a:	4650      	mov	r0, sl
 801578c:	f7ea fd80 	bl	8000290 <strlen>
 8015790:	2300      	movs	r3, #0
 8015792:	930a      	str	r3, [sp, #40]	; 0x28
 8015794:	6823      	ldr	r3, [r4, #0]
 8015796:	9305      	str	r3, [sp, #20]
 8015798:	f8d8 3000 	ldr.w	r3, [r8]
 801579c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80157a0:	3307      	adds	r3, #7
 80157a2:	f023 0307 	bic.w	r3, r3, #7
 80157a6:	f103 0208 	add.w	r2, r3, #8
 80157aa:	f8c8 2000 	str.w	r2, [r8]
 80157ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80157b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80157b6:	9307      	str	r3, [sp, #28]
 80157b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80157bc:	ee08 0a10 	vmov	s16, r0
 80157c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80157c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157c8:	4b9e      	ldr	r3, [pc, #632]	; (8015a44 <_printf_float+0x2d8>)
 80157ca:	f04f 32ff 	mov.w	r2, #4294967295
 80157ce:	f7eb f9bd 	bl	8000b4c <__aeabi_dcmpun>
 80157d2:	bb88      	cbnz	r0, 8015838 <_printf_float+0xcc>
 80157d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157d8:	4b9a      	ldr	r3, [pc, #616]	; (8015a44 <_printf_float+0x2d8>)
 80157da:	f04f 32ff 	mov.w	r2, #4294967295
 80157de:	f7eb f997 	bl	8000b10 <__aeabi_dcmple>
 80157e2:	bb48      	cbnz	r0, 8015838 <_printf_float+0xcc>
 80157e4:	2200      	movs	r2, #0
 80157e6:	2300      	movs	r3, #0
 80157e8:	4640      	mov	r0, r8
 80157ea:	4649      	mov	r1, r9
 80157ec:	f7eb f986 	bl	8000afc <__aeabi_dcmplt>
 80157f0:	b110      	cbz	r0, 80157f8 <_printf_float+0x8c>
 80157f2:	232d      	movs	r3, #45	; 0x2d
 80157f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80157f8:	4a93      	ldr	r2, [pc, #588]	; (8015a48 <_printf_float+0x2dc>)
 80157fa:	4b94      	ldr	r3, [pc, #592]	; (8015a4c <_printf_float+0x2e0>)
 80157fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015800:	bf94      	ite	ls
 8015802:	4690      	movls	r8, r2
 8015804:	4698      	movhi	r8, r3
 8015806:	2303      	movs	r3, #3
 8015808:	6123      	str	r3, [r4, #16]
 801580a:	9b05      	ldr	r3, [sp, #20]
 801580c:	f023 0304 	bic.w	r3, r3, #4
 8015810:	6023      	str	r3, [r4, #0]
 8015812:	f04f 0900 	mov.w	r9, #0
 8015816:	9700      	str	r7, [sp, #0]
 8015818:	4633      	mov	r3, r6
 801581a:	aa0b      	add	r2, sp, #44	; 0x2c
 801581c:	4621      	mov	r1, r4
 801581e:	4628      	mov	r0, r5
 8015820:	f000 f9da 	bl	8015bd8 <_printf_common>
 8015824:	3001      	adds	r0, #1
 8015826:	f040 8090 	bne.w	801594a <_printf_float+0x1de>
 801582a:	f04f 30ff 	mov.w	r0, #4294967295
 801582e:	b00d      	add	sp, #52	; 0x34
 8015830:	ecbd 8b02 	vpop	{d8}
 8015834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015838:	4642      	mov	r2, r8
 801583a:	464b      	mov	r3, r9
 801583c:	4640      	mov	r0, r8
 801583e:	4649      	mov	r1, r9
 8015840:	f7eb f984 	bl	8000b4c <__aeabi_dcmpun>
 8015844:	b140      	cbz	r0, 8015858 <_printf_float+0xec>
 8015846:	464b      	mov	r3, r9
 8015848:	2b00      	cmp	r3, #0
 801584a:	bfbc      	itt	lt
 801584c:	232d      	movlt	r3, #45	; 0x2d
 801584e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015852:	4a7f      	ldr	r2, [pc, #508]	; (8015a50 <_printf_float+0x2e4>)
 8015854:	4b7f      	ldr	r3, [pc, #508]	; (8015a54 <_printf_float+0x2e8>)
 8015856:	e7d1      	b.n	80157fc <_printf_float+0x90>
 8015858:	6863      	ldr	r3, [r4, #4]
 801585a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801585e:	9206      	str	r2, [sp, #24]
 8015860:	1c5a      	adds	r2, r3, #1
 8015862:	d13f      	bne.n	80158e4 <_printf_float+0x178>
 8015864:	2306      	movs	r3, #6
 8015866:	6063      	str	r3, [r4, #4]
 8015868:	9b05      	ldr	r3, [sp, #20]
 801586a:	6861      	ldr	r1, [r4, #4]
 801586c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015870:	2300      	movs	r3, #0
 8015872:	9303      	str	r3, [sp, #12]
 8015874:	ab0a      	add	r3, sp, #40	; 0x28
 8015876:	e9cd b301 	strd	fp, r3, [sp, #4]
 801587a:	ab09      	add	r3, sp, #36	; 0x24
 801587c:	ec49 8b10 	vmov	d0, r8, r9
 8015880:	9300      	str	r3, [sp, #0]
 8015882:	6022      	str	r2, [r4, #0]
 8015884:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015888:	4628      	mov	r0, r5
 801588a:	f7ff fecf 	bl	801562c <__cvt>
 801588e:	9b06      	ldr	r3, [sp, #24]
 8015890:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015892:	2b47      	cmp	r3, #71	; 0x47
 8015894:	4680      	mov	r8, r0
 8015896:	d108      	bne.n	80158aa <_printf_float+0x13e>
 8015898:	1cc8      	adds	r0, r1, #3
 801589a:	db02      	blt.n	80158a2 <_printf_float+0x136>
 801589c:	6863      	ldr	r3, [r4, #4]
 801589e:	4299      	cmp	r1, r3
 80158a0:	dd41      	ble.n	8015926 <_printf_float+0x1ba>
 80158a2:	f1ab 0302 	sub.w	r3, fp, #2
 80158a6:	fa5f fb83 	uxtb.w	fp, r3
 80158aa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80158ae:	d820      	bhi.n	80158f2 <_printf_float+0x186>
 80158b0:	3901      	subs	r1, #1
 80158b2:	465a      	mov	r2, fp
 80158b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80158b8:	9109      	str	r1, [sp, #36]	; 0x24
 80158ba:	f7ff ff19 	bl	80156f0 <__exponent>
 80158be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80158c0:	1813      	adds	r3, r2, r0
 80158c2:	2a01      	cmp	r2, #1
 80158c4:	4681      	mov	r9, r0
 80158c6:	6123      	str	r3, [r4, #16]
 80158c8:	dc02      	bgt.n	80158d0 <_printf_float+0x164>
 80158ca:	6822      	ldr	r2, [r4, #0]
 80158cc:	07d2      	lsls	r2, r2, #31
 80158ce:	d501      	bpl.n	80158d4 <_printf_float+0x168>
 80158d0:	3301      	adds	r3, #1
 80158d2:	6123      	str	r3, [r4, #16]
 80158d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d09c      	beq.n	8015816 <_printf_float+0xaa>
 80158dc:	232d      	movs	r3, #45	; 0x2d
 80158de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158e2:	e798      	b.n	8015816 <_printf_float+0xaa>
 80158e4:	9a06      	ldr	r2, [sp, #24]
 80158e6:	2a47      	cmp	r2, #71	; 0x47
 80158e8:	d1be      	bne.n	8015868 <_printf_float+0xfc>
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d1bc      	bne.n	8015868 <_printf_float+0xfc>
 80158ee:	2301      	movs	r3, #1
 80158f0:	e7b9      	b.n	8015866 <_printf_float+0xfa>
 80158f2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80158f6:	d118      	bne.n	801592a <_printf_float+0x1be>
 80158f8:	2900      	cmp	r1, #0
 80158fa:	6863      	ldr	r3, [r4, #4]
 80158fc:	dd0b      	ble.n	8015916 <_printf_float+0x1aa>
 80158fe:	6121      	str	r1, [r4, #16]
 8015900:	b913      	cbnz	r3, 8015908 <_printf_float+0x19c>
 8015902:	6822      	ldr	r2, [r4, #0]
 8015904:	07d0      	lsls	r0, r2, #31
 8015906:	d502      	bpl.n	801590e <_printf_float+0x1a2>
 8015908:	3301      	adds	r3, #1
 801590a:	440b      	add	r3, r1
 801590c:	6123      	str	r3, [r4, #16]
 801590e:	65a1      	str	r1, [r4, #88]	; 0x58
 8015910:	f04f 0900 	mov.w	r9, #0
 8015914:	e7de      	b.n	80158d4 <_printf_float+0x168>
 8015916:	b913      	cbnz	r3, 801591e <_printf_float+0x1b2>
 8015918:	6822      	ldr	r2, [r4, #0]
 801591a:	07d2      	lsls	r2, r2, #31
 801591c:	d501      	bpl.n	8015922 <_printf_float+0x1b6>
 801591e:	3302      	adds	r3, #2
 8015920:	e7f4      	b.n	801590c <_printf_float+0x1a0>
 8015922:	2301      	movs	r3, #1
 8015924:	e7f2      	b.n	801590c <_printf_float+0x1a0>
 8015926:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801592a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801592c:	4299      	cmp	r1, r3
 801592e:	db05      	blt.n	801593c <_printf_float+0x1d0>
 8015930:	6823      	ldr	r3, [r4, #0]
 8015932:	6121      	str	r1, [r4, #16]
 8015934:	07d8      	lsls	r0, r3, #31
 8015936:	d5ea      	bpl.n	801590e <_printf_float+0x1a2>
 8015938:	1c4b      	adds	r3, r1, #1
 801593a:	e7e7      	b.n	801590c <_printf_float+0x1a0>
 801593c:	2900      	cmp	r1, #0
 801593e:	bfd4      	ite	le
 8015940:	f1c1 0202 	rsble	r2, r1, #2
 8015944:	2201      	movgt	r2, #1
 8015946:	4413      	add	r3, r2
 8015948:	e7e0      	b.n	801590c <_printf_float+0x1a0>
 801594a:	6823      	ldr	r3, [r4, #0]
 801594c:	055a      	lsls	r2, r3, #21
 801594e:	d407      	bmi.n	8015960 <_printf_float+0x1f4>
 8015950:	6923      	ldr	r3, [r4, #16]
 8015952:	4642      	mov	r2, r8
 8015954:	4631      	mov	r1, r6
 8015956:	4628      	mov	r0, r5
 8015958:	47b8      	blx	r7
 801595a:	3001      	adds	r0, #1
 801595c:	d12c      	bne.n	80159b8 <_printf_float+0x24c>
 801595e:	e764      	b.n	801582a <_printf_float+0xbe>
 8015960:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015964:	f240 80e0 	bls.w	8015b28 <_printf_float+0x3bc>
 8015968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801596c:	2200      	movs	r2, #0
 801596e:	2300      	movs	r3, #0
 8015970:	f7eb f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 8015974:	2800      	cmp	r0, #0
 8015976:	d034      	beq.n	80159e2 <_printf_float+0x276>
 8015978:	4a37      	ldr	r2, [pc, #220]	; (8015a58 <_printf_float+0x2ec>)
 801597a:	2301      	movs	r3, #1
 801597c:	4631      	mov	r1, r6
 801597e:	4628      	mov	r0, r5
 8015980:	47b8      	blx	r7
 8015982:	3001      	adds	r0, #1
 8015984:	f43f af51 	beq.w	801582a <_printf_float+0xbe>
 8015988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801598c:	429a      	cmp	r2, r3
 801598e:	db02      	blt.n	8015996 <_printf_float+0x22a>
 8015990:	6823      	ldr	r3, [r4, #0]
 8015992:	07d8      	lsls	r0, r3, #31
 8015994:	d510      	bpl.n	80159b8 <_printf_float+0x24c>
 8015996:	ee18 3a10 	vmov	r3, s16
 801599a:	4652      	mov	r2, sl
 801599c:	4631      	mov	r1, r6
 801599e:	4628      	mov	r0, r5
 80159a0:	47b8      	blx	r7
 80159a2:	3001      	adds	r0, #1
 80159a4:	f43f af41 	beq.w	801582a <_printf_float+0xbe>
 80159a8:	f04f 0800 	mov.w	r8, #0
 80159ac:	f104 091a 	add.w	r9, r4, #26
 80159b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159b2:	3b01      	subs	r3, #1
 80159b4:	4543      	cmp	r3, r8
 80159b6:	dc09      	bgt.n	80159cc <_printf_float+0x260>
 80159b8:	6823      	ldr	r3, [r4, #0]
 80159ba:	079b      	lsls	r3, r3, #30
 80159bc:	f100 8107 	bmi.w	8015bce <_printf_float+0x462>
 80159c0:	68e0      	ldr	r0, [r4, #12]
 80159c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159c4:	4298      	cmp	r0, r3
 80159c6:	bfb8      	it	lt
 80159c8:	4618      	movlt	r0, r3
 80159ca:	e730      	b.n	801582e <_printf_float+0xc2>
 80159cc:	2301      	movs	r3, #1
 80159ce:	464a      	mov	r2, r9
 80159d0:	4631      	mov	r1, r6
 80159d2:	4628      	mov	r0, r5
 80159d4:	47b8      	blx	r7
 80159d6:	3001      	adds	r0, #1
 80159d8:	f43f af27 	beq.w	801582a <_printf_float+0xbe>
 80159dc:	f108 0801 	add.w	r8, r8, #1
 80159e0:	e7e6      	b.n	80159b0 <_printf_float+0x244>
 80159e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	dc39      	bgt.n	8015a5c <_printf_float+0x2f0>
 80159e8:	4a1b      	ldr	r2, [pc, #108]	; (8015a58 <_printf_float+0x2ec>)
 80159ea:	2301      	movs	r3, #1
 80159ec:	4631      	mov	r1, r6
 80159ee:	4628      	mov	r0, r5
 80159f0:	47b8      	blx	r7
 80159f2:	3001      	adds	r0, #1
 80159f4:	f43f af19 	beq.w	801582a <_printf_float+0xbe>
 80159f8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80159fc:	4313      	orrs	r3, r2
 80159fe:	d102      	bne.n	8015a06 <_printf_float+0x29a>
 8015a00:	6823      	ldr	r3, [r4, #0]
 8015a02:	07d9      	lsls	r1, r3, #31
 8015a04:	d5d8      	bpl.n	80159b8 <_printf_float+0x24c>
 8015a06:	ee18 3a10 	vmov	r3, s16
 8015a0a:	4652      	mov	r2, sl
 8015a0c:	4631      	mov	r1, r6
 8015a0e:	4628      	mov	r0, r5
 8015a10:	47b8      	blx	r7
 8015a12:	3001      	adds	r0, #1
 8015a14:	f43f af09 	beq.w	801582a <_printf_float+0xbe>
 8015a18:	f04f 0900 	mov.w	r9, #0
 8015a1c:	f104 0a1a 	add.w	sl, r4, #26
 8015a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a22:	425b      	negs	r3, r3
 8015a24:	454b      	cmp	r3, r9
 8015a26:	dc01      	bgt.n	8015a2c <_printf_float+0x2c0>
 8015a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a2a:	e792      	b.n	8015952 <_printf_float+0x1e6>
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	4652      	mov	r2, sl
 8015a30:	4631      	mov	r1, r6
 8015a32:	4628      	mov	r0, r5
 8015a34:	47b8      	blx	r7
 8015a36:	3001      	adds	r0, #1
 8015a38:	f43f aef7 	beq.w	801582a <_printf_float+0xbe>
 8015a3c:	f109 0901 	add.w	r9, r9, #1
 8015a40:	e7ee      	b.n	8015a20 <_printf_float+0x2b4>
 8015a42:	bf00      	nop
 8015a44:	7fefffff 	.word	0x7fefffff
 8015a48:	0801a9c0 	.word	0x0801a9c0
 8015a4c:	0801a9c4 	.word	0x0801a9c4
 8015a50:	0801a9c8 	.word	0x0801a9c8
 8015a54:	0801a9cc 	.word	0x0801a9cc
 8015a58:	0801ad6c 	.word	0x0801ad6c
 8015a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a60:	429a      	cmp	r2, r3
 8015a62:	bfa8      	it	ge
 8015a64:	461a      	movge	r2, r3
 8015a66:	2a00      	cmp	r2, #0
 8015a68:	4691      	mov	r9, r2
 8015a6a:	dc37      	bgt.n	8015adc <_printf_float+0x370>
 8015a6c:	f04f 0b00 	mov.w	fp, #0
 8015a70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015a74:	f104 021a 	add.w	r2, r4, #26
 8015a78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015a7a:	9305      	str	r3, [sp, #20]
 8015a7c:	eba3 0309 	sub.w	r3, r3, r9
 8015a80:	455b      	cmp	r3, fp
 8015a82:	dc33      	bgt.n	8015aec <_printf_float+0x380>
 8015a84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	db3b      	blt.n	8015b04 <_printf_float+0x398>
 8015a8c:	6823      	ldr	r3, [r4, #0]
 8015a8e:	07da      	lsls	r2, r3, #31
 8015a90:	d438      	bmi.n	8015b04 <_printf_float+0x398>
 8015a92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015a96:	eba2 0903 	sub.w	r9, r2, r3
 8015a9a:	9b05      	ldr	r3, [sp, #20]
 8015a9c:	1ad2      	subs	r2, r2, r3
 8015a9e:	4591      	cmp	r9, r2
 8015aa0:	bfa8      	it	ge
 8015aa2:	4691      	movge	r9, r2
 8015aa4:	f1b9 0f00 	cmp.w	r9, #0
 8015aa8:	dc35      	bgt.n	8015b16 <_printf_float+0x3aa>
 8015aaa:	f04f 0800 	mov.w	r8, #0
 8015aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ab2:	f104 0a1a 	add.w	sl, r4, #26
 8015ab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015aba:	1a9b      	subs	r3, r3, r2
 8015abc:	eba3 0309 	sub.w	r3, r3, r9
 8015ac0:	4543      	cmp	r3, r8
 8015ac2:	f77f af79 	ble.w	80159b8 <_printf_float+0x24c>
 8015ac6:	2301      	movs	r3, #1
 8015ac8:	4652      	mov	r2, sl
 8015aca:	4631      	mov	r1, r6
 8015acc:	4628      	mov	r0, r5
 8015ace:	47b8      	blx	r7
 8015ad0:	3001      	adds	r0, #1
 8015ad2:	f43f aeaa 	beq.w	801582a <_printf_float+0xbe>
 8015ad6:	f108 0801 	add.w	r8, r8, #1
 8015ada:	e7ec      	b.n	8015ab6 <_printf_float+0x34a>
 8015adc:	4613      	mov	r3, r2
 8015ade:	4631      	mov	r1, r6
 8015ae0:	4642      	mov	r2, r8
 8015ae2:	4628      	mov	r0, r5
 8015ae4:	47b8      	blx	r7
 8015ae6:	3001      	adds	r0, #1
 8015ae8:	d1c0      	bne.n	8015a6c <_printf_float+0x300>
 8015aea:	e69e      	b.n	801582a <_printf_float+0xbe>
 8015aec:	2301      	movs	r3, #1
 8015aee:	4631      	mov	r1, r6
 8015af0:	4628      	mov	r0, r5
 8015af2:	9205      	str	r2, [sp, #20]
 8015af4:	47b8      	blx	r7
 8015af6:	3001      	adds	r0, #1
 8015af8:	f43f ae97 	beq.w	801582a <_printf_float+0xbe>
 8015afc:	9a05      	ldr	r2, [sp, #20]
 8015afe:	f10b 0b01 	add.w	fp, fp, #1
 8015b02:	e7b9      	b.n	8015a78 <_printf_float+0x30c>
 8015b04:	ee18 3a10 	vmov	r3, s16
 8015b08:	4652      	mov	r2, sl
 8015b0a:	4631      	mov	r1, r6
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	47b8      	blx	r7
 8015b10:	3001      	adds	r0, #1
 8015b12:	d1be      	bne.n	8015a92 <_printf_float+0x326>
 8015b14:	e689      	b.n	801582a <_printf_float+0xbe>
 8015b16:	9a05      	ldr	r2, [sp, #20]
 8015b18:	464b      	mov	r3, r9
 8015b1a:	4442      	add	r2, r8
 8015b1c:	4631      	mov	r1, r6
 8015b1e:	4628      	mov	r0, r5
 8015b20:	47b8      	blx	r7
 8015b22:	3001      	adds	r0, #1
 8015b24:	d1c1      	bne.n	8015aaa <_printf_float+0x33e>
 8015b26:	e680      	b.n	801582a <_printf_float+0xbe>
 8015b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b2a:	2a01      	cmp	r2, #1
 8015b2c:	dc01      	bgt.n	8015b32 <_printf_float+0x3c6>
 8015b2e:	07db      	lsls	r3, r3, #31
 8015b30:	d53a      	bpl.n	8015ba8 <_printf_float+0x43c>
 8015b32:	2301      	movs	r3, #1
 8015b34:	4642      	mov	r2, r8
 8015b36:	4631      	mov	r1, r6
 8015b38:	4628      	mov	r0, r5
 8015b3a:	47b8      	blx	r7
 8015b3c:	3001      	adds	r0, #1
 8015b3e:	f43f ae74 	beq.w	801582a <_printf_float+0xbe>
 8015b42:	ee18 3a10 	vmov	r3, s16
 8015b46:	4652      	mov	r2, sl
 8015b48:	4631      	mov	r1, r6
 8015b4a:	4628      	mov	r0, r5
 8015b4c:	47b8      	blx	r7
 8015b4e:	3001      	adds	r0, #1
 8015b50:	f43f ae6b 	beq.w	801582a <_printf_float+0xbe>
 8015b54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b58:	2200      	movs	r2, #0
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8015b60:	f7ea ffc2 	bl	8000ae8 <__aeabi_dcmpeq>
 8015b64:	b9d8      	cbnz	r0, 8015b9e <_printf_float+0x432>
 8015b66:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015b6a:	f108 0201 	add.w	r2, r8, #1
 8015b6e:	4631      	mov	r1, r6
 8015b70:	4628      	mov	r0, r5
 8015b72:	47b8      	blx	r7
 8015b74:	3001      	adds	r0, #1
 8015b76:	d10e      	bne.n	8015b96 <_printf_float+0x42a>
 8015b78:	e657      	b.n	801582a <_printf_float+0xbe>
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	4652      	mov	r2, sl
 8015b7e:	4631      	mov	r1, r6
 8015b80:	4628      	mov	r0, r5
 8015b82:	47b8      	blx	r7
 8015b84:	3001      	adds	r0, #1
 8015b86:	f43f ae50 	beq.w	801582a <_printf_float+0xbe>
 8015b8a:	f108 0801 	add.w	r8, r8, #1
 8015b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b90:	3b01      	subs	r3, #1
 8015b92:	4543      	cmp	r3, r8
 8015b94:	dcf1      	bgt.n	8015b7a <_printf_float+0x40e>
 8015b96:	464b      	mov	r3, r9
 8015b98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015b9c:	e6da      	b.n	8015954 <_printf_float+0x1e8>
 8015b9e:	f04f 0800 	mov.w	r8, #0
 8015ba2:	f104 0a1a 	add.w	sl, r4, #26
 8015ba6:	e7f2      	b.n	8015b8e <_printf_float+0x422>
 8015ba8:	2301      	movs	r3, #1
 8015baa:	4642      	mov	r2, r8
 8015bac:	e7df      	b.n	8015b6e <_printf_float+0x402>
 8015bae:	2301      	movs	r3, #1
 8015bb0:	464a      	mov	r2, r9
 8015bb2:	4631      	mov	r1, r6
 8015bb4:	4628      	mov	r0, r5
 8015bb6:	47b8      	blx	r7
 8015bb8:	3001      	adds	r0, #1
 8015bba:	f43f ae36 	beq.w	801582a <_printf_float+0xbe>
 8015bbe:	f108 0801 	add.w	r8, r8, #1
 8015bc2:	68e3      	ldr	r3, [r4, #12]
 8015bc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015bc6:	1a5b      	subs	r3, r3, r1
 8015bc8:	4543      	cmp	r3, r8
 8015bca:	dcf0      	bgt.n	8015bae <_printf_float+0x442>
 8015bcc:	e6f8      	b.n	80159c0 <_printf_float+0x254>
 8015bce:	f04f 0800 	mov.w	r8, #0
 8015bd2:	f104 0919 	add.w	r9, r4, #25
 8015bd6:	e7f4      	b.n	8015bc2 <_printf_float+0x456>

08015bd8 <_printf_common>:
 8015bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bdc:	4616      	mov	r6, r2
 8015bde:	4699      	mov	r9, r3
 8015be0:	688a      	ldr	r2, [r1, #8]
 8015be2:	690b      	ldr	r3, [r1, #16]
 8015be4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015be8:	4293      	cmp	r3, r2
 8015bea:	bfb8      	it	lt
 8015bec:	4613      	movlt	r3, r2
 8015bee:	6033      	str	r3, [r6, #0]
 8015bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015bf4:	4607      	mov	r7, r0
 8015bf6:	460c      	mov	r4, r1
 8015bf8:	b10a      	cbz	r2, 8015bfe <_printf_common+0x26>
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	6033      	str	r3, [r6, #0]
 8015bfe:	6823      	ldr	r3, [r4, #0]
 8015c00:	0699      	lsls	r1, r3, #26
 8015c02:	bf42      	ittt	mi
 8015c04:	6833      	ldrmi	r3, [r6, #0]
 8015c06:	3302      	addmi	r3, #2
 8015c08:	6033      	strmi	r3, [r6, #0]
 8015c0a:	6825      	ldr	r5, [r4, #0]
 8015c0c:	f015 0506 	ands.w	r5, r5, #6
 8015c10:	d106      	bne.n	8015c20 <_printf_common+0x48>
 8015c12:	f104 0a19 	add.w	sl, r4, #25
 8015c16:	68e3      	ldr	r3, [r4, #12]
 8015c18:	6832      	ldr	r2, [r6, #0]
 8015c1a:	1a9b      	subs	r3, r3, r2
 8015c1c:	42ab      	cmp	r3, r5
 8015c1e:	dc26      	bgt.n	8015c6e <_printf_common+0x96>
 8015c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015c24:	1e13      	subs	r3, r2, #0
 8015c26:	6822      	ldr	r2, [r4, #0]
 8015c28:	bf18      	it	ne
 8015c2a:	2301      	movne	r3, #1
 8015c2c:	0692      	lsls	r2, r2, #26
 8015c2e:	d42b      	bmi.n	8015c88 <_printf_common+0xb0>
 8015c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015c34:	4649      	mov	r1, r9
 8015c36:	4638      	mov	r0, r7
 8015c38:	47c0      	blx	r8
 8015c3a:	3001      	adds	r0, #1
 8015c3c:	d01e      	beq.n	8015c7c <_printf_common+0xa4>
 8015c3e:	6823      	ldr	r3, [r4, #0]
 8015c40:	6922      	ldr	r2, [r4, #16]
 8015c42:	f003 0306 	and.w	r3, r3, #6
 8015c46:	2b04      	cmp	r3, #4
 8015c48:	bf02      	ittt	eq
 8015c4a:	68e5      	ldreq	r5, [r4, #12]
 8015c4c:	6833      	ldreq	r3, [r6, #0]
 8015c4e:	1aed      	subeq	r5, r5, r3
 8015c50:	68a3      	ldr	r3, [r4, #8]
 8015c52:	bf0c      	ite	eq
 8015c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c58:	2500      	movne	r5, #0
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	bfc4      	itt	gt
 8015c5e:	1a9b      	subgt	r3, r3, r2
 8015c60:	18ed      	addgt	r5, r5, r3
 8015c62:	2600      	movs	r6, #0
 8015c64:	341a      	adds	r4, #26
 8015c66:	42b5      	cmp	r5, r6
 8015c68:	d11a      	bne.n	8015ca0 <_printf_common+0xc8>
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	e008      	b.n	8015c80 <_printf_common+0xa8>
 8015c6e:	2301      	movs	r3, #1
 8015c70:	4652      	mov	r2, sl
 8015c72:	4649      	mov	r1, r9
 8015c74:	4638      	mov	r0, r7
 8015c76:	47c0      	blx	r8
 8015c78:	3001      	adds	r0, #1
 8015c7a:	d103      	bne.n	8015c84 <_printf_common+0xac>
 8015c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8015c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c84:	3501      	adds	r5, #1
 8015c86:	e7c6      	b.n	8015c16 <_printf_common+0x3e>
 8015c88:	18e1      	adds	r1, r4, r3
 8015c8a:	1c5a      	adds	r2, r3, #1
 8015c8c:	2030      	movs	r0, #48	; 0x30
 8015c8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c92:	4422      	add	r2, r4
 8015c94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c9c:	3302      	adds	r3, #2
 8015c9e:	e7c7      	b.n	8015c30 <_printf_common+0x58>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	4622      	mov	r2, r4
 8015ca4:	4649      	mov	r1, r9
 8015ca6:	4638      	mov	r0, r7
 8015ca8:	47c0      	blx	r8
 8015caa:	3001      	adds	r0, #1
 8015cac:	d0e6      	beq.n	8015c7c <_printf_common+0xa4>
 8015cae:	3601      	adds	r6, #1
 8015cb0:	e7d9      	b.n	8015c66 <_printf_common+0x8e>
	...

08015cb4 <_printf_i>:
 8015cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015cb8:	7e0f      	ldrb	r7, [r1, #24]
 8015cba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015cbc:	2f78      	cmp	r7, #120	; 0x78
 8015cbe:	4691      	mov	r9, r2
 8015cc0:	4680      	mov	r8, r0
 8015cc2:	460c      	mov	r4, r1
 8015cc4:	469a      	mov	sl, r3
 8015cc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015cca:	d807      	bhi.n	8015cdc <_printf_i+0x28>
 8015ccc:	2f62      	cmp	r7, #98	; 0x62
 8015cce:	d80a      	bhi.n	8015ce6 <_printf_i+0x32>
 8015cd0:	2f00      	cmp	r7, #0
 8015cd2:	f000 80d4 	beq.w	8015e7e <_printf_i+0x1ca>
 8015cd6:	2f58      	cmp	r7, #88	; 0x58
 8015cd8:	f000 80c0 	beq.w	8015e5c <_printf_i+0x1a8>
 8015cdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015ce4:	e03a      	b.n	8015d5c <_printf_i+0xa8>
 8015ce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015cea:	2b15      	cmp	r3, #21
 8015cec:	d8f6      	bhi.n	8015cdc <_printf_i+0x28>
 8015cee:	a101      	add	r1, pc, #4	; (adr r1, 8015cf4 <_printf_i+0x40>)
 8015cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015cf4:	08015d4d 	.word	0x08015d4d
 8015cf8:	08015d61 	.word	0x08015d61
 8015cfc:	08015cdd 	.word	0x08015cdd
 8015d00:	08015cdd 	.word	0x08015cdd
 8015d04:	08015cdd 	.word	0x08015cdd
 8015d08:	08015cdd 	.word	0x08015cdd
 8015d0c:	08015d61 	.word	0x08015d61
 8015d10:	08015cdd 	.word	0x08015cdd
 8015d14:	08015cdd 	.word	0x08015cdd
 8015d18:	08015cdd 	.word	0x08015cdd
 8015d1c:	08015cdd 	.word	0x08015cdd
 8015d20:	08015e65 	.word	0x08015e65
 8015d24:	08015d8d 	.word	0x08015d8d
 8015d28:	08015e1f 	.word	0x08015e1f
 8015d2c:	08015cdd 	.word	0x08015cdd
 8015d30:	08015cdd 	.word	0x08015cdd
 8015d34:	08015e87 	.word	0x08015e87
 8015d38:	08015cdd 	.word	0x08015cdd
 8015d3c:	08015d8d 	.word	0x08015d8d
 8015d40:	08015cdd 	.word	0x08015cdd
 8015d44:	08015cdd 	.word	0x08015cdd
 8015d48:	08015e27 	.word	0x08015e27
 8015d4c:	682b      	ldr	r3, [r5, #0]
 8015d4e:	1d1a      	adds	r2, r3, #4
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	602a      	str	r2, [r5, #0]
 8015d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	e09f      	b.n	8015ea0 <_printf_i+0x1ec>
 8015d60:	6820      	ldr	r0, [r4, #0]
 8015d62:	682b      	ldr	r3, [r5, #0]
 8015d64:	0607      	lsls	r7, r0, #24
 8015d66:	f103 0104 	add.w	r1, r3, #4
 8015d6a:	6029      	str	r1, [r5, #0]
 8015d6c:	d501      	bpl.n	8015d72 <_printf_i+0xbe>
 8015d6e:	681e      	ldr	r6, [r3, #0]
 8015d70:	e003      	b.n	8015d7a <_printf_i+0xc6>
 8015d72:	0646      	lsls	r6, r0, #25
 8015d74:	d5fb      	bpl.n	8015d6e <_printf_i+0xba>
 8015d76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015d7a:	2e00      	cmp	r6, #0
 8015d7c:	da03      	bge.n	8015d86 <_printf_i+0xd2>
 8015d7e:	232d      	movs	r3, #45	; 0x2d
 8015d80:	4276      	negs	r6, r6
 8015d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d86:	485a      	ldr	r0, [pc, #360]	; (8015ef0 <_printf_i+0x23c>)
 8015d88:	230a      	movs	r3, #10
 8015d8a:	e012      	b.n	8015db2 <_printf_i+0xfe>
 8015d8c:	682b      	ldr	r3, [r5, #0]
 8015d8e:	6820      	ldr	r0, [r4, #0]
 8015d90:	1d19      	adds	r1, r3, #4
 8015d92:	6029      	str	r1, [r5, #0]
 8015d94:	0605      	lsls	r5, r0, #24
 8015d96:	d501      	bpl.n	8015d9c <_printf_i+0xe8>
 8015d98:	681e      	ldr	r6, [r3, #0]
 8015d9a:	e002      	b.n	8015da2 <_printf_i+0xee>
 8015d9c:	0641      	lsls	r1, r0, #25
 8015d9e:	d5fb      	bpl.n	8015d98 <_printf_i+0xe4>
 8015da0:	881e      	ldrh	r6, [r3, #0]
 8015da2:	4853      	ldr	r0, [pc, #332]	; (8015ef0 <_printf_i+0x23c>)
 8015da4:	2f6f      	cmp	r7, #111	; 0x6f
 8015da6:	bf0c      	ite	eq
 8015da8:	2308      	moveq	r3, #8
 8015daa:	230a      	movne	r3, #10
 8015dac:	2100      	movs	r1, #0
 8015dae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015db2:	6865      	ldr	r5, [r4, #4]
 8015db4:	60a5      	str	r5, [r4, #8]
 8015db6:	2d00      	cmp	r5, #0
 8015db8:	bfa2      	ittt	ge
 8015dba:	6821      	ldrge	r1, [r4, #0]
 8015dbc:	f021 0104 	bicge.w	r1, r1, #4
 8015dc0:	6021      	strge	r1, [r4, #0]
 8015dc2:	b90e      	cbnz	r6, 8015dc8 <_printf_i+0x114>
 8015dc4:	2d00      	cmp	r5, #0
 8015dc6:	d04b      	beq.n	8015e60 <_printf_i+0x1ac>
 8015dc8:	4615      	mov	r5, r2
 8015dca:	fbb6 f1f3 	udiv	r1, r6, r3
 8015dce:	fb03 6711 	mls	r7, r3, r1, r6
 8015dd2:	5dc7      	ldrb	r7, [r0, r7]
 8015dd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015dd8:	4637      	mov	r7, r6
 8015dda:	42bb      	cmp	r3, r7
 8015ddc:	460e      	mov	r6, r1
 8015dde:	d9f4      	bls.n	8015dca <_printf_i+0x116>
 8015de0:	2b08      	cmp	r3, #8
 8015de2:	d10b      	bne.n	8015dfc <_printf_i+0x148>
 8015de4:	6823      	ldr	r3, [r4, #0]
 8015de6:	07de      	lsls	r6, r3, #31
 8015de8:	d508      	bpl.n	8015dfc <_printf_i+0x148>
 8015dea:	6923      	ldr	r3, [r4, #16]
 8015dec:	6861      	ldr	r1, [r4, #4]
 8015dee:	4299      	cmp	r1, r3
 8015df0:	bfde      	ittt	le
 8015df2:	2330      	movle	r3, #48	; 0x30
 8015df4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015df8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015dfc:	1b52      	subs	r2, r2, r5
 8015dfe:	6122      	str	r2, [r4, #16]
 8015e00:	f8cd a000 	str.w	sl, [sp]
 8015e04:	464b      	mov	r3, r9
 8015e06:	aa03      	add	r2, sp, #12
 8015e08:	4621      	mov	r1, r4
 8015e0a:	4640      	mov	r0, r8
 8015e0c:	f7ff fee4 	bl	8015bd8 <_printf_common>
 8015e10:	3001      	adds	r0, #1
 8015e12:	d14a      	bne.n	8015eaa <_printf_i+0x1f6>
 8015e14:	f04f 30ff 	mov.w	r0, #4294967295
 8015e18:	b004      	add	sp, #16
 8015e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e1e:	6823      	ldr	r3, [r4, #0]
 8015e20:	f043 0320 	orr.w	r3, r3, #32
 8015e24:	6023      	str	r3, [r4, #0]
 8015e26:	4833      	ldr	r0, [pc, #204]	; (8015ef4 <_printf_i+0x240>)
 8015e28:	2778      	movs	r7, #120	; 0x78
 8015e2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015e2e:	6823      	ldr	r3, [r4, #0]
 8015e30:	6829      	ldr	r1, [r5, #0]
 8015e32:	061f      	lsls	r7, r3, #24
 8015e34:	f851 6b04 	ldr.w	r6, [r1], #4
 8015e38:	d402      	bmi.n	8015e40 <_printf_i+0x18c>
 8015e3a:	065f      	lsls	r7, r3, #25
 8015e3c:	bf48      	it	mi
 8015e3e:	b2b6      	uxthmi	r6, r6
 8015e40:	07df      	lsls	r7, r3, #31
 8015e42:	bf48      	it	mi
 8015e44:	f043 0320 	orrmi.w	r3, r3, #32
 8015e48:	6029      	str	r1, [r5, #0]
 8015e4a:	bf48      	it	mi
 8015e4c:	6023      	strmi	r3, [r4, #0]
 8015e4e:	b91e      	cbnz	r6, 8015e58 <_printf_i+0x1a4>
 8015e50:	6823      	ldr	r3, [r4, #0]
 8015e52:	f023 0320 	bic.w	r3, r3, #32
 8015e56:	6023      	str	r3, [r4, #0]
 8015e58:	2310      	movs	r3, #16
 8015e5a:	e7a7      	b.n	8015dac <_printf_i+0xf8>
 8015e5c:	4824      	ldr	r0, [pc, #144]	; (8015ef0 <_printf_i+0x23c>)
 8015e5e:	e7e4      	b.n	8015e2a <_printf_i+0x176>
 8015e60:	4615      	mov	r5, r2
 8015e62:	e7bd      	b.n	8015de0 <_printf_i+0x12c>
 8015e64:	682b      	ldr	r3, [r5, #0]
 8015e66:	6826      	ldr	r6, [r4, #0]
 8015e68:	6961      	ldr	r1, [r4, #20]
 8015e6a:	1d18      	adds	r0, r3, #4
 8015e6c:	6028      	str	r0, [r5, #0]
 8015e6e:	0635      	lsls	r5, r6, #24
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	d501      	bpl.n	8015e78 <_printf_i+0x1c4>
 8015e74:	6019      	str	r1, [r3, #0]
 8015e76:	e002      	b.n	8015e7e <_printf_i+0x1ca>
 8015e78:	0670      	lsls	r0, r6, #25
 8015e7a:	d5fb      	bpl.n	8015e74 <_printf_i+0x1c0>
 8015e7c:	8019      	strh	r1, [r3, #0]
 8015e7e:	2300      	movs	r3, #0
 8015e80:	6123      	str	r3, [r4, #16]
 8015e82:	4615      	mov	r5, r2
 8015e84:	e7bc      	b.n	8015e00 <_printf_i+0x14c>
 8015e86:	682b      	ldr	r3, [r5, #0]
 8015e88:	1d1a      	adds	r2, r3, #4
 8015e8a:	602a      	str	r2, [r5, #0]
 8015e8c:	681d      	ldr	r5, [r3, #0]
 8015e8e:	6862      	ldr	r2, [r4, #4]
 8015e90:	2100      	movs	r1, #0
 8015e92:	4628      	mov	r0, r5
 8015e94:	f7ea f9ac 	bl	80001f0 <memchr>
 8015e98:	b108      	cbz	r0, 8015e9e <_printf_i+0x1ea>
 8015e9a:	1b40      	subs	r0, r0, r5
 8015e9c:	6060      	str	r0, [r4, #4]
 8015e9e:	6863      	ldr	r3, [r4, #4]
 8015ea0:	6123      	str	r3, [r4, #16]
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ea8:	e7aa      	b.n	8015e00 <_printf_i+0x14c>
 8015eaa:	6923      	ldr	r3, [r4, #16]
 8015eac:	462a      	mov	r2, r5
 8015eae:	4649      	mov	r1, r9
 8015eb0:	4640      	mov	r0, r8
 8015eb2:	47d0      	blx	sl
 8015eb4:	3001      	adds	r0, #1
 8015eb6:	d0ad      	beq.n	8015e14 <_printf_i+0x160>
 8015eb8:	6823      	ldr	r3, [r4, #0]
 8015eba:	079b      	lsls	r3, r3, #30
 8015ebc:	d413      	bmi.n	8015ee6 <_printf_i+0x232>
 8015ebe:	68e0      	ldr	r0, [r4, #12]
 8015ec0:	9b03      	ldr	r3, [sp, #12]
 8015ec2:	4298      	cmp	r0, r3
 8015ec4:	bfb8      	it	lt
 8015ec6:	4618      	movlt	r0, r3
 8015ec8:	e7a6      	b.n	8015e18 <_printf_i+0x164>
 8015eca:	2301      	movs	r3, #1
 8015ecc:	4632      	mov	r2, r6
 8015ece:	4649      	mov	r1, r9
 8015ed0:	4640      	mov	r0, r8
 8015ed2:	47d0      	blx	sl
 8015ed4:	3001      	adds	r0, #1
 8015ed6:	d09d      	beq.n	8015e14 <_printf_i+0x160>
 8015ed8:	3501      	adds	r5, #1
 8015eda:	68e3      	ldr	r3, [r4, #12]
 8015edc:	9903      	ldr	r1, [sp, #12]
 8015ede:	1a5b      	subs	r3, r3, r1
 8015ee0:	42ab      	cmp	r3, r5
 8015ee2:	dcf2      	bgt.n	8015eca <_printf_i+0x216>
 8015ee4:	e7eb      	b.n	8015ebe <_printf_i+0x20a>
 8015ee6:	2500      	movs	r5, #0
 8015ee8:	f104 0619 	add.w	r6, r4, #25
 8015eec:	e7f5      	b.n	8015eda <_printf_i+0x226>
 8015eee:	bf00      	nop
 8015ef0:	0801a9d0 	.word	0x0801a9d0
 8015ef4:	0801a9e1 	.word	0x0801a9e1

08015ef8 <_scanf_float>:
 8015ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015efc:	b087      	sub	sp, #28
 8015efe:	4617      	mov	r7, r2
 8015f00:	9303      	str	r3, [sp, #12]
 8015f02:	688b      	ldr	r3, [r1, #8]
 8015f04:	1e5a      	subs	r2, r3, #1
 8015f06:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015f0a:	bf83      	ittte	hi
 8015f0c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8015f10:	195b      	addhi	r3, r3, r5
 8015f12:	9302      	strhi	r3, [sp, #8]
 8015f14:	2300      	movls	r3, #0
 8015f16:	bf86      	itte	hi
 8015f18:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015f1c:	608b      	strhi	r3, [r1, #8]
 8015f1e:	9302      	strls	r3, [sp, #8]
 8015f20:	680b      	ldr	r3, [r1, #0]
 8015f22:	468b      	mov	fp, r1
 8015f24:	2500      	movs	r5, #0
 8015f26:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015f2a:	f84b 3b1c 	str.w	r3, [fp], #28
 8015f2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8015f32:	4680      	mov	r8, r0
 8015f34:	460c      	mov	r4, r1
 8015f36:	465e      	mov	r6, fp
 8015f38:	46aa      	mov	sl, r5
 8015f3a:	46a9      	mov	r9, r5
 8015f3c:	9501      	str	r5, [sp, #4]
 8015f3e:	68a2      	ldr	r2, [r4, #8]
 8015f40:	b152      	cbz	r2, 8015f58 <_scanf_float+0x60>
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	2b4e      	cmp	r3, #78	; 0x4e
 8015f48:	d864      	bhi.n	8016014 <_scanf_float+0x11c>
 8015f4a:	2b40      	cmp	r3, #64	; 0x40
 8015f4c:	d83c      	bhi.n	8015fc8 <_scanf_float+0xd0>
 8015f4e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8015f52:	b2c8      	uxtb	r0, r1
 8015f54:	280e      	cmp	r0, #14
 8015f56:	d93a      	bls.n	8015fce <_scanf_float+0xd6>
 8015f58:	f1b9 0f00 	cmp.w	r9, #0
 8015f5c:	d003      	beq.n	8015f66 <_scanf_float+0x6e>
 8015f5e:	6823      	ldr	r3, [r4, #0]
 8015f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015f64:	6023      	str	r3, [r4, #0]
 8015f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f6a:	f1ba 0f01 	cmp.w	sl, #1
 8015f6e:	f200 8113 	bhi.w	8016198 <_scanf_float+0x2a0>
 8015f72:	455e      	cmp	r6, fp
 8015f74:	f200 8105 	bhi.w	8016182 <_scanf_float+0x28a>
 8015f78:	2501      	movs	r5, #1
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	b007      	add	sp, #28
 8015f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f82:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8015f86:	2a0d      	cmp	r2, #13
 8015f88:	d8e6      	bhi.n	8015f58 <_scanf_float+0x60>
 8015f8a:	a101      	add	r1, pc, #4	; (adr r1, 8015f90 <_scanf_float+0x98>)
 8015f8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015f90:	080160cf 	.word	0x080160cf
 8015f94:	08015f59 	.word	0x08015f59
 8015f98:	08015f59 	.word	0x08015f59
 8015f9c:	08015f59 	.word	0x08015f59
 8015fa0:	0801612f 	.word	0x0801612f
 8015fa4:	08016107 	.word	0x08016107
 8015fa8:	08015f59 	.word	0x08015f59
 8015fac:	08015f59 	.word	0x08015f59
 8015fb0:	080160dd 	.word	0x080160dd
 8015fb4:	08015f59 	.word	0x08015f59
 8015fb8:	08015f59 	.word	0x08015f59
 8015fbc:	08015f59 	.word	0x08015f59
 8015fc0:	08015f59 	.word	0x08015f59
 8015fc4:	08016095 	.word	0x08016095
 8015fc8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8015fcc:	e7db      	b.n	8015f86 <_scanf_float+0x8e>
 8015fce:	290e      	cmp	r1, #14
 8015fd0:	d8c2      	bhi.n	8015f58 <_scanf_float+0x60>
 8015fd2:	a001      	add	r0, pc, #4	; (adr r0, 8015fd8 <_scanf_float+0xe0>)
 8015fd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8015fd8:	08016087 	.word	0x08016087
 8015fdc:	08015f59 	.word	0x08015f59
 8015fe0:	08016087 	.word	0x08016087
 8015fe4:	0801611b 	.word	0x0801611b
 8015fe8:	08015f59 	.word	0x08015f59
 8015fec:	08016035 	.word	0x08016035
 8015ff0:	08016071 	.word	0x08016071
 8015ff4:	08016071 	.word	0x08016071
 8015ff8:	08016071 	.word	0x08016071
 8015ffc:	08016071 	.word	0x08016071
 8016000:	08016071 	.word	0x08016071
 8016004:	08016071 	.word	0x08016071
 8016008:	08016071 	.word	0x08016071
 801600c:	08016071 	.word	0x08016071
 8016010:	08016071 	.word	0x08016071
 8016014:	2b6e      	cmp	r3, #110	; 0x6e
 8016016:	d809      	bhi.n	801602c <_scanf_float+0x134>
 8016018:	2b60      	cmp	r3, #96	; 0x60
 801601a:	d8b2      	bhi.n	8015f82 <_scanf_float+0x8a>
 801601c:	2b54      	cmp	r3, #84	; 0x54
 801601e:	d077      	beq.n	8016110 <_scanf_float+0x218>
 8016020:	2b59      	cmp	r3, #89	; 0x59
 8016022:	d199      	bne.n	8015f58 <_scanf_float+0x60>
 8016024:	2d07      	cmp	r5, #7
 8016026:	d197      	bne.n	8015f58 <_scanf_float+0x60>
 8016028:	2508      	movs	r5, #8
 801602a:	e029      	b.n	8016080 <_scanf_float+0x188>
 801602c:	2b74      	cmp	r3, #116	; 0x74
 801602e:	d06f      	beq.n	8016110 <_scanf_float+0x218>
 8016030:	2b79      	cmp	r3, #121	; 0x79
 8016032:	e7f6      	b.n	8016022 <_scanf_float+0x12a>
 8016034:	6821      	ldr	r1, [r4, #0]
 8016036:	05c8      	lsls	r0, r1, #23
 8016038:	d51a      	bpl.n	8016070 <_scanf_float+0x178>
 801603a:	9b02      	ldr	r3, [sp, #8]
 801603c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016040:	6021      	str	r1, [r4, #0]
 8016042:	f109 0901 	add.w	r9, r9, #1
 8016046:	b11b      	cbz	r3, 8016050 <_scanf_float+0x158>
 8016048:	3b01      	subs	r3, #1
 801604a:	3201      	adds	r2, #1
 801604c:	9302      	str	r3, [sp, #8]
 801604e:	60a2      	str	r2, [r4, #8]
 8016050:	68a3      	ldr	r3, [r4, #8]
 8016052:	3b01      	subs	r3, #1
 8016054:	60a3      	str	r3, [r4, #8]
 8016056:	6923      	ldr	r3, [r4, #16]
 8016058:	3301      	adds	r3, #1
 801605a:	6123      	str	r3, [r4, #16]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	3b01      	subs	r3, #1
 8016060:	2b00      	cmp	r3, #0
 8016062:	607b      	str	r3, [r7, #4]
 8016064:	f340 8084 	ble.w	8016170 <_scanf_float+0x278>
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	3301      	adds	r3, #1
 801606c:	603b      	str	r3, [r7, #0]
 801606e:	e766      	b.n	8015f3e <_scanf_float+0x46>
 8016070:	eb1a 0f05 	cmn.w	sl, r5
 8016074:	f47f af70 	bne.w	8015f58 <_scanf_float+0x60>
 8016078:	6822      	ldr	r2, [r4, #0]
 801607a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801607e:	6022      	str	r2, [r4, #0]
 8016080:	f806 3b01 	strb.w	r3, [r6], #1
 8016084:	e7e4      	b.n	8016050 <_scanf_float+0x158>
 8016086:	6822      	ldr	r2, [r4, #0]
 8016088:	0610      	lsls	r0, r2, #24
 801608a:	f57f af65 	bpl.w	8015f58 <_scanf_float+0x60>
 801608e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016092:	e7f4      	b.n	801607e <_scanf_float+0x186>
 8016094:	f1ba 0f00 	cmp.w	sl, #0
 8016098:	d10e      	bne.n	80160b8 <_scanf_float+0x1c0>
 801609a:	f1b9 0f00 	cmp.w	r9, #0
 801609e:	d10e      	bne.n	80160be <_scanf_float+0x1c6>
 80160a0:	6822      	ldr	r2, [r4, #0]
 80160a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80160a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80160aa:	d108      	bne.n	80160be <_scanf_float+0x1c6>
 80160ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160b0:	6022      	str	r2, [r4, #0]
 80160b2:	f04f 0a01 	mov.w	sl, #1
 80160b6:	e7e3      	b.n	8016080 <_scanf_float+0x188>
 80160b8:	f1ba 0f02 	cmp.w	sl, #2
 80160bc:	d055      	beq.n	801616a <_scanf_float+0x272>
 80160be:	2d01      	cmp	r5, #1
 80160c0:	d002      	beq.n	80160c8 <_scanf_float+0x1d0>
 80160c2:	2d04      	cmp	r5, #4
 80160c4:	f47f af48 	bne.w	8015f58 <_scanf_float+0x60>
 80160c8:	3501      	adds	r5, #1
 80160ca:	b2ed      	uxtb	r5, r5
 80160cc:	e7d8      	b.n	8016080 <_scanf_float+0x188>
 80160ce:	f1ba 0f01 	cmp.w	sl, #1
 80160d2:	f47f af41 	bne.w	8015f58 <_scanf_float+0x60>
 80160d6:	f04f 0a02 	mov.w	sl, #2
 80160da:	e7d1      	b.n	8016080 <_scanf_float+0x188>
 80160dc:	b97d      	cbnz	r5, 80160fe <_scanf_float+0x206>
 80160de:	f1b9 0f00 	cmp.w	r9, #0
 80160e2:	f47f af3c 	bne.w	8015f5e <_scanf_float+0x66>
 80160e6:	6822      	ldr	r2, [r4, #0]
 80160e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80160ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80160f0:	f47f af39 	bne.w	8015f66 <_scanf_float+0x6e>
 80160f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80160f8:	6022      	str	r2, [r4, #0]
 80160fa:	2501      	movs	r5, #1
 80160fc:	e7c0      	b.n	8016080 <_scanf_float+0x188>
 80160fe:	2d03      	cmp	r5, #3
 8016100:	d0e2      	beq.n	80160c8 <_scanf_float+0x1d0>
 8016102:	2d05      	cmp	r5, #5
 8016104:	e7de      	b.n	80160c4 <_scanf_float+0x1cc>
 8016106:	2d02      	cmp	r5, #2
 8016108:	f47f af26 	bne.w	8015f58 <_scanf_float+0x60>
 801610c:	2503      	movs	r5, #3
 801610e:	e7b7      	b.n	8016080 <_scanf_float+0x188>
 8016110:	2d06      	cmp	r5, #6
 8016112:	f47f af21 	bne.w	8015f58 <_scanf_float+0x60>
 8016116:	2507      	movs	r5, #7
 8016118:	e7b2      	b.n	8016080 <_scanf_float+0x188>
 801611a:	6822      	ldr	r2, [r4, #0]
 801611c:	0591      	lsls	r1, r2, #22
 801611e:	f57f af1b 	bpl.w	8015f58 <_scanf_float+0x60>
 8016122:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016126:	6022      	str	r2, [r4, #0]
 8016128:	f8cd 9004 	str.w	r9, [sp, #4]
 801612c:	e7a8      	b.n	8016080 <_scanf_float+0x188>
 801612e:	6822      	ldr	r2, [r4, #0]
 8016130:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016134:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016138:	d006      	beq.n	8016148 <_scanf_float+0x250>
 801613a:	0550      	lsls	r0, r2, #21
 801613c:	f57f af0c 	bpl.w	8015f58 <_scanf_float+0x60>
 8016140:	f1b9 0f00 	cmp.w	r9, #0
 8016144:	f43f af0f 	beq.w	8015f66 <_scanf_float+0x6e>
 8016148:	0591      	lsls	r1, r2, #22
 801614a:	bf58      	it	pl
 801614c:	9901      	ldrpl	r1, [sp, #4]
 801614e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016152:	bf58      	it	pl
 8016154:	eba9 0101 	subpl.w	r1, r9, r1
 8016158:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801615c:	bf58      	it	pl
 801615e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016162:	6022      	str	r2, [r4, #0]
 8016164:	f04f 0900 	mov.w	r9, #0
 8016168:	e78a      	b.n	8016080 <_scanf_float+0x188>
 801616a:	f04f 0a03 	mov.w	sl, #3
 801616e:	e787      	b.n	8016080 <_scanf_float+0x188>
 8016170:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016174:	4639      	mov	r1, r7
 8016176:	4640      	mov	r0, r8
 8016178:	4798      	blx	r3
 801617a:	2800      	cmp	r0, #0
 801617c:	f43f aedf 	beq.w	8015f3e <_scanf_float+0x46>
 8016180:	e6ea      	b.n	8015f58 <_scanf_float+0x60>
 8016182:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016186:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801618a:	463a      	mov	r2, r7
 801618c:	4640      	mov	r0, r8
 801618e:	4798      	blx	r3
 8016190:	6923      	ldr	r3, [r4, #16]
 8016192:	3b01      	subs	r3, #1
 8016194:	6123      	str	r3, [r4, #16]
 8016196:	e6ec      	b.n	8015f72 <_scanf_float+0x7a>
 8016198:	1e6b      	subs	r3, r5, #1
 801619a:	2b06      	cmp	r3, #6
 801619c:	d825      	bhi.n	80161ea <_scanf_float+0x2f2>
 801619e:	2d02      	cmp	r5, #2
 80161a0:	d836      	bhi.n	8016210 <_scanf_float+0x318>
 80161a2:	455e      	cmp	r6, fp
 80161a4:	f67f aee8 	bls.w	8015f78 <_scanf_float+0x80>
 80161a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80161b0:	463a      	mov	r2, r7
 80161b2:	4640      	mov	r0, r8
 80161b4:	4798      	blx	r3
 80161b6:	6923      	ldr	r3, [r4, #16]
 80161b8:	3b01      	subs	r3, #1
 80161ba:	6123      	str	r3, [r4, #16]
 80161bc:	e7f1      	b.n	80161a2 <_scanf_float+0x2aa>
 80161be:	9802      	ldr	r0, [sp, #8]
 80161c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80161c8:	9002      	str	r0, [sp, #8]
 80161ca:	463a      	mov	r2, r7
 80161cc:	4640      	mov	r0, r8
 80161ce:	4798      	blx	r3
 80161d0:	6923      	ldr	r3, [r4, #16]
 80161d2:	3b01      	subs	r3, #1
 80161d4:	6123      	str	r3, [r4, #16]
 80161d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161da:	fa5f fa8a 	uxtb.w	sl, sl
 80161de:	f1ba 0f02 	cmp.w	sl, #2
 80161e2:	d1ec      	bne.n	80161be <_scanf_float+0x2c6>
 80161e4:	3d03      	subs	r5, #3
 80161e6:	b2ed      	uxtb	r5, r5
 80161e8:	1b76      	subs	r6, r6, r5
 80161ea:	6823      	ldr	r3, [r4, #0]
 80161ec:	05da      	lsls	r2, r3, #23
 80161ee:	d52f      	bpl.n	8016250 <_scanf_float+0x358>
 80161f0:	055b      	lsls	r3, r3, #21
 80161f2:	d510      	bpl.n	8016216 <_scanf_float+0x31e>
 80161f4:	455e      	cmp	r6, fp
 80161f6:	f67f aebf 	bls.w	8015f78 <_scanf_float+0x80>
 80161fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016202:	463a      	mov	r2, r7
 8016204:	4640      	mov	r0, r8
 8016206:	4798      	blx	r3
 8016208:	6923      	ldr	r3, [r4, #16]
 801620a:	3b01      	subs	r3, #1
 801620c:	6123      	str	r3, [r4, #16]
 801620e:	e7f1      	b.n	80161f4 <_scanf_float+0x2fc>
 8016210:	46aa      	mov	sl, r5
 8016212:	9602      	str	r6, [sp, #8]
 8016214:	e7df      	b.n	80161d6 <_scanf_float+0x2de>
 8016216:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801621a:	6923      	ldr	r3, [r4, #16]
 801621c:	2965      	cmp	r1, #101	; 0x65
 801621e:	f103 33ff 	add.w	r3, r3, #4294967295
 8016222:	f106 35ff 	add.w	r5, r6, #4294967295
 8016226:	6123      	str	r3, [r4, #16]
 8016228:	d00c      	beq.n	8016244 <_scanf_float+0x34c>
 801622a:	2945      	cmp	r1, #69	; 0x45
 801622c:	d00a      	beq.n	8016244 <_scanf_float+0x34c>
 801622e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016232:	463a      	mov	r2, r7
 8016234:	4640      	mov	r0, r8
 8016236:	4798      	blx	r3
 8016238:	6923      	ldr	r3, [r4, #16]
 801623a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801623e:	3b01      	subs	r3, #1
 8016240:	1eb5      	subs	r5, r6, #2
 8016242:	6123      	str	r3, [r4, #16]
 8016244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016248:	463a      	mov	r2, r7
 801624a:	4640      	mov	r0, r8
 801624c:	4798      	blx	r3
 801624e:	462e      	mov	r6, r5
 8016250:	6825      	ldr	r5, [r4, #0]
 8016252:	f015 0510 	ands.w	r5, r5, #16
 8016256:	d158      	bne.n	801630a <_scanf_float+0x412>
 8016258:	7035      	strb	r5, [r6, #0]
 801625a:	6823      	ldr	r3, [r4, #0]
 801625c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016264:	d11c      	bne.n	80162a0 <_scanf_float+0x3a8>
 8016266:	9b01      	ldr	r3, [sp, #4]
 8016268:	454b      	cmp	r3, r9
 801626a:	eba3 0209 	sub.w	r2, r3, r9
 801626e:	d124      	bne.n	80162ba <_scanf_float+0x3c2>
 8016270:	2200      	movs	r2, #0
 8016272:	4659      	mov	r1, fp
 8016274:	4640      	mov	r0, r8
 8016276:	f7ff f9c7 	bl	8015608 <_strtod_r>
 801627a:	9b03      	ldr	r3, [sp, #12]
 801627c:	6821      	ldr	r1, [r4, #0]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	f011 0f02 	tst.w	r1, #2
 8016284:	ec57 6b10 	vmov	r6, r7, d0
 8016288:	f103 0204 	add.w	r2, r3, #4
 801628c:	d020      	beq.n	80162d0 <_scanf_float+0x3d8>
 801628e:	9903      	ldr	r1, [sp, #12]
 8016290:	600a      	str	r2, [r1, #0]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	e9c3 6700 	strd	r6, r7, [r3]
 8016298:	68e3      	ldr	r3, [r4, #12]
 801629a:	3301      	adds	r3, #1
 801629c:	60e3      	str	r3, [r4, #12]
 801629e:	e66c      	b.n	8015f7a <_scanf_float+0x82>
 80162a0:	9b04      	ldr	r3, [sp, #16]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d0e4      	beq.n	8016270 <_scanf_float+0x378>
 80162a6:	9905      	ldr	r1, [sp, #20]
 80162a8:	230a      	movs	r3, #10
 80162aa:	462a      	mov	r2, r5
 80162ac:	3101      	adds	r1, #1
 80162ae:	4640      	mov	r0, r8
 80162b0:	f002 fb0a 	bl	80188c8 <_strtol_r>
 80162b4:	9b04      	ldr	r3, [sp, #16]
 80162b6:	9e05      	ldr	r6, [sp, #20]
 80162b8:	1ac2      	subs	r2, r0, r3
 80162ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80162be:	429e      	cmp	r6, r3
 80162c0:	bf28      	it	cs
 80162c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80162c6:	4912      	ldr	r1, [pc, #72]	; (8016310 <_scanf_float+0x418>)
 80162c8:	4630      	mov	r0, r6
 80162ca:	f000 f91b 	bl	8016504 <siprintf>
 80162ce:	e7cf      	b.n	8016270 <_scanf_float+0x378>
 80162d0:	f011 0f04 	tst.w	r1, #4
 80162d4:	9903      	ldr	r1, [sp, #12]
 80162d6:	600a      	str	r2, [r1, #0]
 80162d8:	d1db      	bne.n	8016292 <_scanf_float+0x39a>
 80162da:	f8d3 8000 	ldr.w	r8, [r3]
 80162de:	ee10 2a10 	vmov	r2, s0
 80162e2:	ee10 0a10 	vmov	r0, s0
 80162e6:	463b      	mov	r3, r7
 80162e8:	4639      	mov	r1, r7
 80162ea:	f7ea fc2f 	bl	8000b4c <__aeabi_dcmpun>
 80162ee:	b128      	cbz	r0, 80162fc <_scanf_float+0x404>
 80162f0:	4808      	ldr	r0, [pc, #32]	; (8016314 <_scanf_float+0x41c>)
 80162f2:	f000 facd 	bl	8016890 <nanf>
 80162f6:	ed88 0a00 	vstr	s0, [r8]
 80162fa:	e7cd      	b.n	8016298 <_scanf_float+0x3a0>
 80162fc:	4630      	mov	r0, r6
 80162fe:	4639      	mov	r1, r7
 8016300:	f7ea fc82 	bl	8000c08 <__aeabi_d2f>
 8016304:	f8c8 0000 	str.w	r0, [r8]
 8016308:	e7c6      	b.n	8016298 <_scanf_float+0x3a0>
 801630a:	2500      	movs	r5, #0
 801630c:	e635      	b.n	8015f7a <_scanf_float+0x82>
 801630e:	bf00      	nop
 8016310:	0801a9f2 	.word	0x0801a9f2
 8016314:	0801adac 	.word	0x0801adac

08016318 <std>:
 8016318:	2300      	movs	r3, #0
 801631a:	b510      	push	{r4, lr}
 801631c:	4604      	mov	r4, r0
 801631e:	e9c0 3300 	strd	r3, r3, [r0]
 8016322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016326:	6083      	str	r3, [r0, #8]
 8016328:	8181      	strh	r1, [r0, #12]
 801632a:	6643      	str	r3, [r0, #100]	; 0x64
 801632c:	81c2      	strh	r2, [r0, #14]
 801632e:	6183      	str	r3, [r0, #24]
 8016330:	4619      	mov	r1, r3
 8016332:	2208      	movs	r2, #8
 8016334:	305c      	adds	r0, #92	; 0x5c
 8016336:	f000 f976 	bl	8016626 <memset>
 801633a:	4b0d      	ldr	r3, [pc, #52]	; (8016370 <std+0x58>)
 801633c:	6263      	str	r3, [r4, #36]	; 0x24
 801633e:	4b0d      	ldr	r3, [pc, #52]	; (8016374 <std+0x5c>)
 8016340:	62a3      	str	r3, [r4, #40]	; 0x28
 8016342:	4b0d      	ldr	r3, [pc, #52]	; (8016378 <std+0x60>)
 8016344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016346:	4b0d      	ldr	r3, [pc, #52]	; (801637c <std+0x64>)
 8016348:	6323      	str	r3, [r4, #48]	; 0x30
 801634a:	4b0d      	ldr	r3, [pc, #52]	; (8016380 <std+0x68>)
 801634c:	6224      	str	r4, [r4, #32]
 801634e:	429c      	cmp	r4, r3
 8016350:	d006      	beq.n	8016360 <std+0x48>
 8016352:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016356:	4294      	cmp	r4, r2
 8016358:	d002      	beq.n	8016360 <std+0x48>
 801635a:	33d0      	adds	r3, #208	; 0xd0
 801635c:	429c      	cmp	r4, r3
 801635e:	d105      	bne.n	801636c <std+0x54>
 8016360:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016368:	f000 ba70 	b.w	801684c <__retarget_lock_init_recursive>
 801636c:	bd10      	pop	{r4, pc}
 801636e:	bf00      	nop
 8016370:	0801659d 	.word	0x0801659d
 8016374:	080165c3 	.word	0x080165c3
 8016378:	080165fb 	.word	0x080165fb
 801637c:	0801661f 	.word	0x0801661f
 8016380:	20007260 	.word	0x20007260

08016384 <stdio_exit_handler>:
 8016384:	4a02      	ldr	r2, [pc, #8]	; (8016390 <stdio_exit_handler+0xc>)
 8016386:	4903      	ldr	r1, [pc, #12]	; (8016394 <stdio_exit_handler+0x10>)
 8016388:	4803      	ldr	r0, [pc, #12]	; (8016398 <stdio_exit_handler+0x14>)
 801638a:	f000 b869 	b.w	8016460 <_fwalk_sglue>
 801638e:	bf00      	nop
 8016390:	2000016c 	.word	0x2000016c
 8016394:	080192e5 	.word	0x080192e5
 8016398:	200002e4 	.word	0x200002e4

0801639c <cleanup_stdio>:
 801639c:	6841      	ldr	r1, [r0, #4]
 801639e:	4b0c      	ldr	r3, [pc, #48]	; (80163d0 <cleanup_stdio+0x34>)
 80163a0:	4299      	cmp	r1, r3
 80163a2:	b510      	push	{r4, lr}
 80163a4:	4604      	mov	r4, r0
 80163a6:	d001      	beq.n	80163ac <cleanup_stdio+0x10>
 80163a8:	f002 ff9c 	bl	80192e4 <_fflush_r>
 80163ac:	68a1      	ldr	r1, [r4, #8]
 80163ae:	4b09      	ldr	r3, [pc, #36]	; (80163d4 <cleanup_stdio+0x38>)
 80163b0:	4299      	cmp	r1, r3
 80163b2:	d002      	beq.n	80163ba <cleanup_stdio+0x1e>
 80163b4:	4620      	mov	r0, r4
 80163b6:	f002 ff95 	bl	80192e4 <_fflush_r>
 80163ba:	68e1      	ldr	r1, [r4, #12]
 80163bc:	4b06      	ldr	r3, [pc, #24]	; (80163d8 <cleanup_stdio+0x3c>)
 80163be:	4299      	cmp	r1, r3
 80163c0:	d004      	beq.n	80163cc <cleanup_stdio+0x30>
 80163c2:	4620      	mov	r0, r4
 80163c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163c8:	f002 bf8c 	b.w	80192e4 <_fflush_r>
 80163cc:	bd10      	pop	{r4, pc}
 80163ce:	bf00      	nop
 80163d0:	20007260 	.word	0x20007260
 80163d4:	200072c8 	.word	0x200072c8
 80163d8:	20007330 	.word	0x20007330

080163dc <global_stdio_init.part.0>:
 80163dc:	b510      	push	{r4, lr}
 80163de:	4b0b      	ldr	r3, [pc, #44]	; (801640c <global_stdio_init.part.0+0x30>)
 80163e0:	4c0b      	ldr	r4, [pc, #44]	; (8016410 <global_stdio_init.part.0+0x34>)
 80163e2:	4a0c      	ldr	r2, [pc, #48]	; (8016414 <global_stdio_init.part.0+0x38>)
 80163e4:	601a      	str	r2, [r3, #0]
 80163e6:	4620      	mov	r0, r4
 80163e8:	2200      	movs	r2, #0
 80163ea:	2104      	movs	r1, #4
 80163ec:	f7ff ff94 	bl	8016318 <std>
 80163f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80163f4:	2201      	movs	r2, #1
 80163f6:	2109      	movs	r1, #9
 80163f8:	f7ff ff8e 	bl	8016318 <std>
 80163fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016400:	2202      	movs	r2, #2
 8016402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016406:	2112      	movs	r1, #18
 8016408:	f7ff bf86 	b.w	8016318 <std>
 801640c:	20007398 	.word	0x20007398
 8016410:	20007260 	.word	0x20007260
 8016414:	08016385 	.word	0x08016385

08016418 <__sfp_lock_acquire>:
 8016418:	4801      	ldr	r0, [pc, #4]	; (8016420 <__sfp_lock_acquire+0x8>)
 801641a:	f000 ba18 	b.w	801684e <__retarget_lock_acquire_recursive>
 801641e:	bf00      	nop
 8016420:	200073a1 	.word	0x200073a1

08016424 <__sfp_lock_release>:
 8016424:	4801      	ldr	r0, [pc, #4]	; (801642c <__sfp_lock_release+0x8>)
 8016426:	f000 ba13 	b.w	8016850 <__retarget_lock_release_recursive>
 801642a:	bf00      	nop
 801642c:	200073a1 	.word	0x200073a1

08016430 <__sinit>:
 8016430:	b510      	push	{r4, lr}
 8016432:	4604      	mov	r4, r0
 8016434:	f7ff fff0 	bl	8016418 <__sfp_lock_acquire>
 8016438:	6a23      	ldr	r3, [r4, #32]
 801643a:	b11b      	cbz	r3, 8016444 <__sinit+0x14>
 801643c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016440:	f7ff bff0 	b.w	8016424 <__sfp_lock_release>
 8016444:	4b04      	ldr	r3, [pc, #16]	; (8016458 <__sinit+0x28>)
 8016446:	6223      	str	r3, [r4, #32]
 8016448:	4b04      	ldr	r3, [pc, #16]	; (801645c <__sinit+0x2c>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d1f5      	bne.n	801643c <__sinit+0xc>
 8016450:	f7ff ffc4 	bl	80163dc <global_stdio_init.part.0>
 8016454:	e7f2      	b.n	801643c <__sinit+0xc>
 8016456:	bf00      	nop
 8016458:	0801639d 	.word	0x0801639d
 801645c:	20007398 	.word	0x20007398

08016460 <_fwalk_sglue>:
 8016460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016464:	4607      	mov	r7, r0
 8016466:	4688      	mov	r8, r1
 8016468:	4614      	mov	r4, r2
 801646a:	2600      	movs	r6, #0
 801646c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016470:	f1b9 0901 	subs.w	r9, r9, #1
 8016474:	d505      	bpl.n	8016482 <_fwalk_sglue+0x22>
 8016476:	6824      	ldr	r4, [r4, #0]
 8016478:	2c00      	cmp	r4, #0
 801647a:	d1f7      	bne.n	801646c <_fwalk_sglue+0xc>
 801647c:	4630      	mov	r0, r6
 801647e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016482:	89ab      	ldrh	r3, [r5, #12]
 8016484:	2b01      	cmp	r3, #1
 8016486:	d907      	bls.n	8016498 <_fwalk_sglue+0x38>
 8016488:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801648c:	3301      	adds	r3, #1
 801648e:	d003      	beq.n	8016498 <_fwalk_sglue+0x38>
 8016490:	4629      	mov	r1, r5
 8016492:	4638      	mov	r0, r7
 8016494:	47c0      	blx	r8
 8016496:	4306      	orrs	r6, r0
 8016498:	3568      	adds	r5, #104	; 0x68
 801649a:	e7e9      	b.n	8016470 <_fwalk_sglue+0x10>

0801649c <sniprintf>:
 801649c:	b40c      	push	{r2, r3}
 801649e:	b530      	push	{r4, r5, lr}
 80164a0:	4b17      	ldr	r3, [pc, #92]	; (8016500 <sniprintf+0x64>)
 80164a2:	1e0c      	subs	r4, r1, #0
 80164a4:	681d      	ldr	r5, [r3, #0]
 80164a6:	b09d      	sub	sp, #116	; 0x74
 80164a8:	da08      	bge.n	80164bc <sniprintf+0x20>
 80164aa:	238b      	movs	r3, #139	; 0x8b
 80164ac:	602b      	str	r3, [r5, #0]
 80164ae:	f04f 30ff 	mov.w	r0, #4294967295
 80164b2:	b01d      	add	sp, #116	; 0x74
 80164b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164b8:	b002      	add	sp, #8
 80164ba:	4770      	bx	lr
 80164bc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80164c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80164c4:	bf14      	ite	ne
 80164c6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80164ca:	4623      	moveq	r3, r4
 80164cc:	9304      	str	r3, [sp, #16]
 80164ce:	9307      	str	r3, [sp, #28]
 80164d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80164d4:	9002      	str	r0, [sp, #8]
 80164d6:	9006      	str	r0, [sp, #24]
 80164d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80164dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80164de:	ab21      	add	r3, sp, #132	; 0x84
 80164e0:	a902      	add	r1, sp, #8
 80164e2:	4628      	mov	r0, r5
 80164e4:	9301      	str	r3, [sp, #4]
 80164e6:	f002 fa59 	bl	801899c <_svfiprintf_r>
 80164ea:	1c43      	adds	r3, r0, #1
 80164ec:	bfbc      	itt	lt
 80164ee:	238b      	movlt	r3, #139	; 0x8b
 80164f0:	602b      	strlt	r3, [r5, #0]
 80164f2:	2c00      	cmp	r4, #0
 80164f4:	d0dd      	beq.n	80164b2 <sniprintf+0x16>
 80164f6:	9b02      	ldr	r3, [sp, #8]
 80164f8:	2200      	movs	r2, #0
 80164fa:	701a      	strb	r2, [r3, #0]
 80164fc:	e7d9      	b.n	80164b2 <sniprintf+0x16>
 80164fe:	bf00      	nop
 8016500:	20000330 	.word	0x20000330

08016504 <siprintf>:
 8016504:	b40e      	push	{r1, r2, r3}
 8016506:	b500      	push	{lr}
 8016508:	b09c      	sub	sp, #112	; 0x70
 801650a:	ab1d      	add	r3, sp, #116	; 0x74
 801650c:	9002      	str	r0, [sp, #8]
 801650e:	9006      	str	r0, [sp, #24]
 8016510:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016514:	4809      	ldr	r0, [pc, #36]	; (801653c <siprintf+0x38>)
 8016516:	9107      	str	r1, [sp, #28]
 8016518:	9104      	str	r1, [sp, #16]
 801651a:	4909      	ldr	r1, [pc, #36]	; (8016540 <siprintf+0x3c>)
 801651c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016520:	9105      	str	r1, [sp, #20]
 8016522:	6800      	ldr	r0, [r0, #0]
 8016524:	9301      	str	r3, [sp, #4]
 8016526:	a902      	add	r1, sp, #8
 8016528:	f002 fa38 	bl	801899c <_svfiprintf_r>
 801652c:	9b02      	ldr	r3, [sp, #8]
 801652e:	2200      	movs	r2, #0
 8016530:	701a      	strb	r2, [r3, #0]
 8016532:	b01c      	add	sp, #112	; 0x70
 8016534:	f85d eb04 	ldr.w	lr, [sp], #4
 8016538:	b003      	add	sp, #12
 801653a:	4770      	bx	lr
 801653c:	20000330 	.word	0x20000330
 8016540:	ffff0208 	.word	0xffff0208

08016544 <siscanf>:
 8016544:	b40e      	push	{r1, r2, r3}
 8016546:	b510      	push	{r4, lr}
 8016548:	b09f      	sub	sp, #124	; 0x7c
 801654a:	ac21      	add	r4, sp, #132	; 0x84
 801654c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016550:	f854 2b04 	ldr.w	r2, [r4], #4
 8016554:	9201      	str	r2, [sp, #4]
 8016556:	f8ad 101c 	strh.w	r1, [sp, #28]
 801655a:	9004      	str	r0, [sp, #16]
 801655c:	9008      	str	r0, [sp, #32]
 801655e:	f7e9 fe97 	bl	8000290 <strlen>
 8016562:	4b0c      	ldr	r3, [pc, #48]	; (8016594 <siscanf+0x50>)
 8016564:	9005      	str	r0, [sp, #20]
 8016566:	9009      	str	r0, [sp, #36]	; 0x24
 8016568:	930d      	str	r3, [sp, #52]	; 0x34
 801656a:	480b      	ldr	r0, [pc, #44]	; (8016598 <siscanf+0x54>)
 801656c:	9a01      	ldr	r2, [sp, #4]
 801656e:	6800      	ldr	r0, [r0, #0]
 8016570:	9403      	str	r4, [sp, #12]
 8016572:	2300      	movs	r3, #0
 8016574:	9311      	str	r3, [sp, #68]	; 0x44
 8016576:	9316      	str	r3, [sp, #88]	; 0x58
 8016578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801657c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016580:	a904      	add	r1, sp, #16
 8016582:	4623      	mov	r3, r4
 8016584:	f002 fb62 	bl	8018c4c <__ssvfiscanf_r>
 8016588:	b01f      	add	sp, #124	; 0x7c
 801658a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801658e:	b003      	add	sp, #12
 8016590:	4770      	bx	lr
 8016592:	bf00      	nop
 8016594:	080165bf 	.word	0x080165bf
 8016598:	20000330 	.word	0x20000330

0801659c <__sread>:
 801659c:	b510      	push	{r4, lr}
 801659e:	460c      	mov	r4, r1
 80165a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165a4:	f000 f904 	bl	80167b0 <_read_r>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	bfab      	itete	ge
 80165ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80165ae:	89a3      	ldrhlt	r3, [r4, #12]
 80165b0:	181b      	addge	r3, r3, r0
 80165b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80165b6:	bfac      	ite	ge
 80165b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80165ba:	81a3      	strhlt	r3, [r4, #12]
 80165bc:	bd10      	pop	{r4, pc}

080165be <__seofread>:
 80165be:	2000      	movs	r0, #0
 80165c0:	4770      	bx	lr

080165c2 <__swrite>:
 80165c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165c6:	461f      	mov	r7, r3
 80165c8:	898b      	ldrh	r3, [r1, #12]
 80165ca:	05db      	lsls	r3, r3, #23
 80165cc:	4605      	mov	r5, r0
 80165ce:	460c      	mov	r4, r1
 80165d0:	4616      	mov	r6, r2
 80165d2:	d505      	bpl.n	80165e0 <__swrite+0x1e>
 80165d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165d8:	2302      	movs	r3, #2
 80165da:	2200      	movs	r2, #0
 80165dc:	f000 f8d6 	bl	801678c <_lseek_r>
 80165e0:	89a3      	ldrh	r3, [r4, #12]
 80165e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80165e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80165ea:	81a3      	strh	r3, [r4, #12]
 80165ec:	4632      	mov	r2, r6
 80165ee:	463b      	mov	r3, r7
 80165f0:	4628      	mov	r0, r5
 80165f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80165f6:	f000 b8ed 	b.w	80167d4 <_write_r>

080165fa <__sseek>:
 80165fa:	b510      	push	{r4, lr}
 80165fc:	460c      	mov	r4, r1
 80165fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016602:	f000 f8c3 	bl	801678c <_lseek_r>
 8016606:	1c43      	adds	r3, r0, #1
 8016608:	89a3      	ldrh	r3, [r4, #12]
 801660a:	bf15      	itete	ne
 801660c:	6560      	strne	r0, [r4, #84]	; 0x54
 801660e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016616:	81a3      	strheq	r3, [r4, #12]
 8016618:	bf18      	it	ne
 801661a:	81a3      	strhne	r3, [r4, #12]
 801661c:	bd10      	pop	{r4, pc}

0801661e <__sclose>:
 801661e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016622:	f000 b84d 	b.w	80166c0 <_close_r>

08016626 <memset>:
 8016626:	4402      	add	r2, r0
 8016628:	4603      	mov	r3, r0
 801662a:	4293      	cmp	r3, r2
 801662c:	d100      	bne.n	8016630 <memset+0xa>
 801662e:	4770      	bx	lr
 8016630:	f803 1b01 	strb.w	r1, [r3], #1
 8016634:	e7f9      	b.n	801662a <memset+0x4>

08016636 <strcat>:
 8016636:	b510      	push	{r4, lr}
 8016638:	4602      	mov	r2, r0
 801663a:	7814      	ldrb	r4, [r2, #0]
 801663c:	4613      	mov	r3, r2
 801663e:	3201      	adds	r2, #1
 8016640:	2c00      	cmp	r4, #0
 8016642:	d1fa      	bne.n	801663a <strcat+0x4>
 8016644:	3b01      	subs	r3, #1
 8016646:	f811 2b01 	ldrb.w	r2, [r1], #1
 801664a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801664e:	2a00      	cmp	r2, #0
 8016650:	d1f9      	bne.n	8016646 <strcat+0x10>
 8016652:	bd10      	pop	{r4, pc}

08016654 <strchr>:
 8016654:	b2c9      	uxtb	r1, r1
 8016656:	4603      	mov	r3, r0
 8016658:	f810 2b01 	ldrb.w	r2, [r0], #1
 801665c:	b11a      	cbz	r2, 8016666 <strchr+0x12>
 801665e:	428a      	cmp	r2, r1
 8016660:	d1f9      	bne.n	8016656 <strchr+0x2>
 8016662:	4618      	mov	r0, r3
 8016664:	4770      	bx	lr
 8016666:	2900      	cmp	r1, #0
 8016668:	bf18      	it	ne
 801666a:	2300      	movne	r3, #0
 801666c:	e7f9      	b.n	8016662 <strchr+0xe>

0801666e <strncmp>:
 801666e:	b510      	push	{r4, lr}
 8016670:	b16a      	cbz	r2, 801668e <strncmp+0x20>
 8016672:	3901      	subs	r1, #1
 8016674:	1884      	adds	r4, r0, r2
 8016676:	f810 2b01 	ldrb.w	r2, [r0], #1
 801667a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801667e:	429a      	cmp	r2, r3
 8016680:	d103      	bne.n	801668a <strncmp+0x1c>
 8016682:	42a0      	cmp	r0, r4
 8016684:	d001      	beq.n	801668a <strncmp+0x1c>
 8016686:	2a00      	cmp	r2, #0
 8016688:	d1f5      	bne.n	8016676 <strncmp+0x8>
 801668a:	1ad0      	subs	r0, r2, r3
 801668c:	bd10      	pop	{r4, pc}
 801668e:	4610      	mov	r0, r2
 8016690:	e7fc      	b.n	801668c <strncmp+0x1e>

08016692 <strncpy>:
 8016692:	b510      	push	{r4, lr}
 8016694:	3901      	subs	r1, #1
 8016696:	4603      	mov	r3, r0
 8016698:	b132      	cbz	r2, 80166a8 <strncpy+0x16>
 801669a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801669e:	f803 4b01 	strb.w	r4, [r3], #1
 80166a2:	3a01      	subs	r2, #1
 80166a4:	2c00      	cmp	r4, #0
 80166a6:	d1f7      	bne.n	8016698 <strncpy+0x6>
 80166a8:	441a      	add	r2, r3
 80166aa:	2100      	movs	r1, #0
 80166ac:	4293      	cmp	r3, r2
 80166ae:	d100      	bne.n	80166b2 <strncpy+0x20>
 80166b0:	bd10      	pop	{r4, pc}
 80166b2:	f803 1b01 	strb.w	r1, [r3], #1
 80166b6:	e7f9      	b.n	80166ac <strncpy+0x1a>

080166b8 <_localeconv_r>:
 80166b8:	4800      	ldr	r0, [pc, #0]	; (80166bc <_localeconv_r+0x4>)
 80166ba:	4770      	bx	lr
 80166bc:	20000268 	.word	0x20000268

080166c0 <_close_r>:
 80166c0:	b538      	push	{r3, r4, r5, lr}
 80166c2:	4d06      	ldr	r5, [pc, #24]	; (80166dc <_close_r+0x1c>)
 80166c4:	2300      	movs	r3, #0
 80166c6:	4604      	mov	r4, r0
 80166c8:	4608      	mov	r0, r1
 80166ca:	602b      	str	r3, [r5, #0]
 80166cc:	f7f1 f95b 	bl	8007986 <_close>
 80166d0:	1c43      	adds	r3, r0, #1
 80166d2:	d102      	bne.n	80166da <_close_r+0x1a>
 80166d4:	682b      	ldr	r3, [r5, #0]
 80166d6:	b103      	cbz	r3, 80166da <_close_r+0x1a>
 80166d8:	6023      	str	r3, [r4, #0]
 80166da:	bd38      	pop	{r3, r4, r5, pc}
 80166dc:	2000739c 	.word	0x2000739c

080166e0 <_reclaim_reent>:
 80166e0:	4b29      	ldr	r3, [pc, #164]	; (8016788 <_reclaim_reent+0xa8>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4283      	cmp	r3, r0
 80166e6:	b570      	push	{r4, r5, r6, lr}
 80166e8:	4604      	mov	r4, r0
 80166ea:	d04b      	beq.n	8016784 <_reclaim_reent+0xa4>
 80166ec:	69c3      	ldr	r3, [r0, #28]
 80166ee:	b143      	cbz	r3, 8016702 <_reclaim_reent+0x22>
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d144      	bne.n	8016780 <_reclaim_reent+0xa0>
 80166f6:	69e3      	ldr	r3, [r4, #28]
 80166f8:	6819      	ldr	r1, [r3, #0]
 80166fa:	b111      	cbz	r1, 8016702 <_reclaim_reent+0x22>
 80166fc:	4620      	mov	r0, r4
 80166fe:	f000 ff49 	bl	8017594 <_free_r>
 8016702:	6961      	ldr	r1, [r4, #20]
 8016704:	b111      	cbz	r1, 801670c <_reclaim_reent+0x2c>
 8016706:	4620      	mov	r0, r4
 8016708:	f000 ff44 	bl	8017594 <_free_r>
 801670c:	69e1      	ldr	r1, [r4, #28]
 801670e:	b111      	cbz	r1, 8016716 <_reclaim_reent+0x36>
 8016710:	4620      	mov	r0, r4
 8016712:	f000 ff3f 	bl	8017594 <_free_r>
 8016716:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016718:	b111      	cbz	r1, 8016720 <_reclaim_reent+0x40>
 801671a:	4620      	mov	r0, r4
 801671c:	f000 ff3a 	bl	8017594 <_free_r>
 8016720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016722:	b111      	cbz	r1, 801672a <_reclaim_reent+0x4a>
 8016724:	4620      	mov	r0, r4
 8016726:	f000 ff35 	bl	8017594 <_free_r>
 801672a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801672c:	b111      	cbz	r1, 8016734 <_reclaim_reent+0x54>
 801672e:	4620      	mov	r0, r4
 8016730:	f000 ff30 	bl	8017594 <_free_r>
 8016734:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016736:	b111      	cbz	r1, 801673e <_reclaim_reent+0x5e>
 8016738:	4620      	mov	r0, r4
 801673a:	f000 ff2b 	bl	8017594 <_free_r>
 801673e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016740:	b111      	cbz	r1, 8016748 <_reclaim_reent+0x68>
 8016742:	4620      	mov	r0, r4
 8016744:	f000 ff26 	bl	8017594 <_free_r>
 8016748:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801674a:	b111      	cbz	r1, 8016752 <_reclaim_reent+0x72>
 801674c:	4620      	mov	r0, r4
 801674e:	f000 ff21 	bl	8017594 <_free_r>
 8016752:	6a23      	ldr	r3, [r4, #32]
 8016754:	b1b3      	cbz	r3, 8016784 <_reclaim_reent+0xa4>
 8016756:	4620      	mov	r0, r4
 8016758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801675c:	4718      	bx	r3
 801675e:	5949      	ldr	r1, [r1, r5]
 8016760:	b941      	cbnz	r1, 8016774 <_reclaim_reent+0x94>
 8016762:	3504      	adds	r5, #4
 8016764:	69e3      	ldr	r3, [r4, #28]
 8016766:	2d80      	cmp	r5, #128	; 0x80
 8016768:	68d9      	ldr	r1, [r3, #12]
 801676a:	d1f8      	bne.n	801675e <_reclaim_reent+0x7e>
 801676c:	4620      	mov	r0, r4
 801676e:	f000 ff11 	bl	8017594 <_free_r>
 8016772:	e7c0      	b.n	80166f6 <_reclaim_reent+0x16>
 8016774:	680e      	ldr	r6, [r1, #0]
 8016776:	4620      	mov	r0, r4
 8016778:	f000 ff0c 	bl	8017594 <_free_r>
 801677c:	4631      	mov	r1, r6
 801677e:	e7ef      	b.n	8016760 <_reclaim_reent+0x80>
 8016780:	2500      	movs	r5, #0
 8016782:	e7ef      	b.n	8016764 <_reclaim_reent+0x84>
 8016784:	bd70      	pop	{r4, r5, r6, pc}
 8016786:	bf00      	nop
 8016788:	20000330 	.word	0x20000330

0801678c <_lseek_r>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	4d07      	ldr	r5, [pc, #28]	; (80167ac <_lseek_r+0x20>)
 8016790:	4604      	mov	r4, r0
 8016792:	4608      	mov	r0, r1
 8016794:	4611      	mov	r1, r2
 8016796:	2200      	movs	r2, #0
 8016798:	602a      	str	r2, [r5, #0]
 801679a:	461a      	mov	r2, r3
 801679c:	f7f1 f91a 	bl	80079d4 <_lseek>
 80167a0:	1c43      	adds	r3, r0, #1
 80167a2:	d102      	bne.n	80167aa <_lseek_r+0x1e>
 80167a4:	682b      	ldr	r3, [r5, #0]
 80167a6:	b103      	cbz	r3, 80167aa <_lseek_r+0x1e>
 80167a8:	6023      	str	r3, [r4, #0]
 80167aa:	bd38      	pop	{r3, r4, r5, pc}
 80167ac:	2000739c 	.word	0x2000739c

080167b0 <_read_r>:
 80167b0:	b538      	push	{r3, r4, r5, lr}
 80167b2:	4d07      	ldr	r5, [pc, #28]	; (80167d0 <_read_r+0x20>)
 80167b4:	4604      	mov	r4, r0
 80167b6:	4608      	mov	r0, r1
 80167b8:	4611      	mov	r1, r2
 80167ba:	2200      	movs	r2, #0
 80167bc:	602a      	str	r2, [r5, #0]
 80167be:	461a      	mov	r2, r3
 80167c0:	f7f1 f8a8 	bl	8007914 <_read>
 80167c4:	1c43      	adds	r3, r0, #1
 80167c6:	d102      	bne.n	80167ce <_read_r+0x1e>
 80167c8:	682b      	ldr	r3, [r5, #0]
 80167ca:	b103      	cbz	r3, 80167ce <_read_r+0x1e>
 80167cc:	6023      	str	r3, [r4, #0]
 80167ce:	bd38      	pop	{r3, r4, r5, pc}
 80167d0:	2000739c 	.word	0x2000739c

080167d4 <_write_r>:
 80167d4:	b538      	push	{r3, r4, r5, lr}
 80167d6:	4d07      	ldr	r5, [pc, #28]	; (80167f4 <_write_r+0x20>)
 80167d8:	4604      	mov	r4, r0
 80167da:	4608      	mov	r0, r1
 80167dc:	4611      	mov	r1, r2
 80167de:	2200      	movs	r2, #0
 80167e0:	602a      	str	r2, [r5, #0]
 80167e2:	461a      	mov	r2, r3
 80167e4:	f7f1 f8b3 	bl	800794e <_write>
 80167e8:	1c43      	adds	r3, r0, #1
 80167ea:	d102      	bne.n	80167f2 <_write_r+0x1e>
 80167ec:	682b      	ldr	r3, [r5, #0]
 80167ee:	b103      	cbz	r3, 80167f2 <_write_r+0x1e>
 80167f0:	6023      	str	r3, [r4, #0]
 80167f2:	bd38      	pop	{r3, r4, r5, pc}
 80167f4:	2000739c 	.word	0x2000739c

080167f8 <__errno>:
 80167f8:	4b01      	ldr	r3, [pc, #4]	; (8016800 <__errno+0x8>)
 80167fa:	6818      	ldr	r0, [r3, #0]
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop
 8016800:	20000330 	.word	0x20000330

08016804 <__libc_init_array>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	4d0d      	ldr	r5, [pc, #52]	; (801683c <__libc_init_array+0x38>)
 8016808:	4c0d      	ldr	r4, [pc, #52]	; (8016840 <__libc_init_array+0x3c>)
 801680a:	1b64      	subs	r4, r4, r5
 801680c:	10a4      	asrs	r4, r4, #2
 801680e:	2600      	movs	r6, #0
 8016810:	42a6      	cmp	r6, r4
 8016812:	d109      	bne.n	8016828 <__libc_init_array+0x24>
 8016814:	4d0b      	ldr	r5, [pc, #44]	; (8016844 <__libc_init_array+0x40>)
 8016816:	4c0c      	ldr	r4, [pc, #48]	; (8016848 <__libc_init_array+0x44>)
 8016818:	f003 f9c4 	bl	8019ba4 <_init>
 801681c:	1b64      	subs	r4, r4, r5
 801681e:	10a4      	asrs	r4, r4, #2
 8016820:	2600      	movs	r6, #0
 8016822:	42a6      	cmp	r6, r4
 8016824:	d105      	bne.n	8016832 <__libc_init_array+0x2e>
 8016826:	bd70      	pop	{r4, r5, r6, pc}
 8016828:	f855 3b04 	ldr.w	r3, [r5], #4
 801682c:	4798      	blx	r3
 801682e:	3601      	adds	r6, #1
 8016830:	e7ee      	b.n	8016810 <__libc_init_array+0xc>
 8016832:	f855 3b04 	ldr.w	r3, [r5], #4
 8016836:	4798      	blx	r3
 8016838:	3601      	adds	r6, #1
 801683a:	e7f2      	b.n	8016822 <__libc_init_array+0x1e>
 801683c:	0801adb8 	.word	0x0801adb8
 8016840:	0801adb8 	.word	0x0801adb8
 8016844:	0801adb8 	.word	0x0801adb8
 8016848:	0801adbc 	.word	0x0801adbc

0801684c <__retarget_lock_init_recursive>:
 801684c:	4770      	bx	lr

0801684e <__retarget_lock_acquire_recursive>:
 801684e:	4770      	bx	lr

08016850 <__retarget_lock_release_recursive>:
 8016850:	4770      	bx	lr

08016852 <strcpy>:
 8016852:	4603      	mov	r3, r0
 8016854:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016858:	f803 2b01 	strb.w	r2, [r3], #1
 801685c:	2a00      	cmp	r2, #0
 801685e:	d1f9      	bne.n	8016854 <strcpy+0x2>
 8016860:	4770      	bx	lr

08016862 <memcpy>:
 8016862:	440a      	add	r2, r1
 8016864:	4291      	cmp	r1, r2
 8016866:	f100 33ff 	add.w	r3, r0, #4294967295
 801686a:	d100      	bne.n	801686e <memcpy+0xc>
 801686c:	4770      	bx	lr
 801686e:	b510      	push	{r4, lr}
 8016870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016878:	4291      	cmp	r1, r2
 801687a:	d1f9      	bne.n	8016870 <memcpy+0xe>
 801687c:	bd10      	pop	{r4, pc}
	...

08016880 <nan>:
 8016880:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016888 <nan+0x8>
 8016884:	4770      	bx	lr
 8016886:	bf00      	nop
 8016888:	00000000 	.word	0x00000000
 801688c:	7ff80000 	.word	0x7ff80000

08016890 <nanf>:
 8016890:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016898 <nanf+0x8>
 8016894:	4770      	bx	lr
 8016896:	bf00      	nop
 8016898:	7fc00000 	.word	0x7fc00000

0801689c <quorem>:
 801689c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a0:	6903      	ldr	r3, [r0, #16]
 80168a2:	690c      	ldr	r4, [r1, #16]
 80168a4:	42a3      	cmp	r3, r4
 80168a6:	4607      	mov	r7, r0
 80168a8:	db7e      	blt.n	80169a8 <quorem+0x10c>
 80168aa:	3c01      	subs	r4, #1
 80168ac:	f101 0814 	add.w	r8, r1, #20
 80168b0:	f100 0514 	add.w	r5, r0, #20
 80168b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80168b8:	9301      	str	r3, [sp, #4]
 80168ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80168be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80168c2:	3301      	adds	r3, #1
 80168c4:	429a      	cmp	r2, r3
 80168c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80168ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80168ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80168d2:	d331      	bcc.n	8016938 <quorem+0x9c>
 80168d4:	f04f 0e00 	mov.w	lr, #0
 80168d8:	4640      	mov	r0, r8
 80168da:	46ac      	mov	ip, r5
 80168dc:	46f2      	mov	sl, lr
 80168de:	f850 2b04 	ldr.w	r2, [r0], #4
 80168e2:	b293      	uxth	r3, r2
 80168e4:	fb06 e303 	mla	r3, r6, r3, lr
 80168e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80168ec:	0c1a      	lsrs	r2, r3, #16
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	ebaa 0303 	sub.w	r3, sl, r3
 80168f4:	f8dc a000 	ldr.w	sl, [ip]
 80168f8:	fa13 f38a 	uxtah	r3, r3, sl
 80168fc:	fb06 220e 	mla	r2, r6, lr, r2
 8016900:	9300      	str	r3, [sp, #0]
 8016902:	9b00      	ldr	r3, [sp, #0]
 8016904:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016908:	b292      	uxth	r2, r2
 801690a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801690e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016912:	f8bd 3000 	ldrh.w	r3, [sp]
 8016916:	4581      	cmp	r9, r0
 8016918:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801691c:	f84c 3b04 	str.w	r3, [ip], #4
 8016920:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016924:	d2db      	bcs.n	80168de <quorem+0x42>
 8016926:	f855 300b 	ldr.w	r3, [r5, fp]
 801692a:	b92b      	cbnz	r3, 8016938 <quorem+0x9c>
 801692c:	9b01      	ldr	r3, [sp, #4]
 801692e:	3b04      	subs	r3, #4
 8016930:	429d      	cmp	r5, r3
 8016932:	461a      	mov	r2, r3
 8016934:	d32c      	bcc.n	8016990 <quorem+0xf4>
 8016936:	613c      	str	r4, [r7, #16]
 8016938:	4638      	mov	r0, r7
 801693a:	f001 fd5b 	bl	80183f4 <__mcmp>
 801693e:	2800      	cmp	r0, #0
 8016940:	db22      	blt.n	8016988 <quorem+0xec>
 8016942:	3601      	adds	r6, #1
 8016944:	4629      	mov	r1, r5
 8016946:	2000      	movs	r0, #0
 8016948:	f858 2b04 	ldr.w	r2, [r8], #4
 801694c:	f8d1 c000 	ldr.w	ip, [r1]
 8016950:	b293      	uxth	r3, r2
 8016952:	1ac3      	subs	r3, r0, r3
 8016954:	0c12      	lsrs	r2, r2, #16
 8016956:	fa13 f38c 	uxtah	r3, r3, ip
 801695a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801695e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016962:	b29b      	uxth	r3, r3
 8016964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016968:	45c1      	cmp	r9, r8
 801696a:	f841 3b04 	str.w	r3, [r1], #4
 801696e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016972:	d2e9      	bcs.n	8016948 <quorem+0xac>
 8016974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801697c:	b922      	cbnz	r2, 8016988 <quorem+0xec>
 801697e:	3b04      	subs	r3, #4
 8016980:	429d      	cmp	r5, r3
 8016982:	461a      	mov	r2, r3
 8016984:	d30a      	bcc.n	801699c <quorem+0x100>
 8016986:	613c      	str	r4, [r7, #16]
 8016988:	4630      	mov	r0, r6
 801698a:	b003      	add	sp, #12
 801698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016990:	6812      	ldr	r2, [r2, #0]
 8016992:	3b04      	subs	r3, #4
 8016994:	2a00      	cmp	r2, #0
 8016996:	d1ce      	bne.n	8016936 <quorem+0x9a>
 8016998:	3c01      	subs	r4, #1
 801699a:	e7c9      	b.n	8016930 <quorem+0x94>
 801699c:	6812      	ldr	r2, [r2, #0]
 801699e:	3b04      	subs	r3, #4
 80169a0:	2a00      	cmp	r2, #0
 80169a2:	d1f0      	bne.n	8016986 <quorem+0xea>
 80169a4:	3c01      	subs	r4, #1
 80169a6:	e7eb      	b.n	8016980 <quorem+0xe4>
 80169a8:	2000      	movs	r0, #0
 80169aa:	e7ee      	b.n	801698a <quorem+0xee>
 80169ac:	0000      	movs	r0, r0
	...

080169b0 <_dtoa_r>:
 80169b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b4:	ed2d 8b04 	vpush	{d8-d9}
 80169b8:	69c5      	ldr	r5, [r0, #28]
 80169ba:	b093      	sub	sp, #76	; 0x4c
 80169bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80169c0:	ec57 6b10 	vmov	r6, r7, d0
 80169c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80169c8:	9107      	str	r1, [sp, #28]
 80169ca:	4604      	mov	r4, r0
 80169cc:	920a      	str	r2, [sp, #40]	; 0x28
 80169ce:	930d      	str	r3, [sp, #52]	; 0x34
 80169d0:	b975      	cbnz	r5, 80169f0 <_dtoa_r+0x40>
 80169d2:	2010      	movs	r0, #16
 80169d4:	f001 f982 	bl	8017cdc <malloc>
 80169d8:	4602      	mov	r2, r0
 80169da:	61e0      	str	r0, [r4, #28]
 80169dc:	b920      	cbnz	r0, 80169e8 <_dtoa_r+0x38>
 80169de:	4bae      	ldr	r3, [pc, #696]	; (8016c98 <_dtoa_r+0x2e8>)
 80169e0:	21ef      	movs	r1, #239	; 0xef
 80169e2:	48ae      	ldr	r0, [pc, #696]	; (8016c9c <_dtoa_r+0x2ec>)
 80169e4:	f002 fd44 	bl	8019470 <__assert_func>
 80169e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80169ec:	6005      	str	r5, [r0, #0]
 80169ee:	60c5      	str	r5, [r0, #12]
 80169f0:	69e3      	ldr	r3, [r4, #28]
 80169f2:	6819      	ldr	r1, [r3, #0]
 80169f4:	b151      	cbz	r1, 8016a0c <_dtoa_r+0x5c>
 80169f6:	685a      	ldr	r2, [r3, #4]
 80169f8:	604a      	str	r2, [r1, #4]
 80169fa:	2301      	movs	r3, #1
 80169fc:	4093      	lsls	r3, r2
 80169fe:	608b      	str	r3, [r1, #8]
 8016a00:	4620      	mov	r0, r4
 8016a02:	f001 fa71 	bl	8017ee8 <_Bfree>
 8016a06:	69e3      	ldr	r3, [r4, #28]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	601a      	str	r2, [r3, #0]
 8016a0c:	1e3b      	subs	r3, r7, #0
 8016a0e:	bfbb      	ittet	lt
 8016a10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016a14:	9303      	strlt	r3, [sp, #12]
 8016a16:	2300      	movge	r3, #0
 8016a18:	2201      	movlt	r2, #1
 8016a1a:	bfac      	ite	ge
 8016a1c:	f8c8 3000 	strge.w	r3, [r8]
 8016a20:	f8c8 2000 	strlt.w	r2, [r8]
 8016a24:	4b9e      	ldr	r3, [pc, #632]	; (8016ca0 <_dtoa_r+0x2f0>)
 8016a26:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016a2a:	ea33 0308 	bics.w	r3, r3, r8
 8016a2e:	d11b      	bne.n	8016a68 <_dtoa_r+0xb8>
 8016a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a32:	f242 730f 	movw	r3, #9999	; 0x270f
 8016a36:	6013      	str	r3, [r2, #0]
 8016a38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016a3c:	4333      	orrs	r3, r6
 8016a3e:	f000 8593 	beq.w	8017568 <_dtoa_r+0xbb8>
 8016a42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a44:	b963      	cbnz	r3, 8016a60 <_dtoa_r+0xb0>
 8016a46:	4b97      	ldr	r3, [pc, #604]	; (8016ca4 <_dtoa_r+0x2f4>)
 8016a48:	e027      	b.n	8016a9a <_dtoa_r+0xea>
 8016a4a:	4b97      	ldr	r3, [pc, #604]	; (8016ca8 <_dtoa_r+0x2f8>)
 8016a4c:	9300      	str	r3, [sp, #0]
 8016a4e:	3308      	adds	r3, #8
 8016a50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a52:	6013      	str	r3, [r2, #0]
 8016a54:	9800      	ldr	r0, [sp, #0]
 8016a56:	b013      	add	sp, #76	; 0x4c
 8016a58:	ecbd 8b04 	vpop	{d8-d9}
 8016a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a60:	4b90      	ldr	r3, [pc, #576]	; (8016ca4 <_dtoa_r+0x2f4>)
 8016a62:	9300      	str	r3, [sp, #0]
 8016a64:	3303      	adds	r3, #3
 8016a66:	e7f3      	b.n	8016a50 <_dtoa_r+0xa0>
 8016a68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	ec51 0b17 	vmov	r0, r1, d7
 8016a72:	eeb0 8a47 	vmov.f32	s16, s14
 8016a76:	eef0 8a67 	vmov.f32	s17, s15
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	f7ea f834 	bl	8000ae8 <__aeabi_dcmpeq>
 8016a80:	4681      	mov	r9, r0
 8016a82:	b160      	cbz	r0, 8016a9e <_dtoa_r+0xee>
 8016a84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a86:	2301      	movs	r3, #1
 8016a88:	6013      	str	r3, [r2, #0]
 8016a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f000 8568 	beq.w	8017562 <_dtoa_r+0xbb2>
 8016a92:	4b86      	ldr	r3, [pc, #536]	; (8016cac <_dtoa_r+0x2fc>)
 8016a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016a96:	6013      	str	r3, [r2, #0]
 8016a98:	3b01      	subs	r3, #1
 8016a9a:	9300      	str	r3, [sp, #0]
 8016a9c:	e7da      	b.n	8016a54 <_dtoa_r+0xa4>
 8016a9e:	aa10      	add	r2, sp, #64	; 0x40
 8016aa0:	a911      	add	r1, sp, #68	; 0x44
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8016aa8:	eef0 0a68 	vmov.f32	s1, s17
 8016aac:	f001 fdb8 	bl	8018620 <__d2b>
 8016ab0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016ab4:	4682      	mov	sl, r0
 8016ab6:	2d00      	cmp	r5, #0
 8016ab8:	d07f      	beq.n	8016bba <_dtoa_r+0x20a>
 8016aba:	ee18 3a90 	vmov	r3, s17
 8016abe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ac2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016ac6:	ec51 0b18 	vmov	r0, r1, d8
 8016aca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016ace:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016ad2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016ad6:	4619      	mov	r1, r3
 8016ad8:	2200      	movs	r2, #0
 8016ada:	4b75      	ldr	r3, [pc, #468]	; (8016cb0 <_dtoa_r+0x300>)
 8016adc:	f7e9 fbe4 	bl	80002a8 <__aeabi_dsub>
 8016ae0:	a367      	add	r3, pc, #412	; (adr r3, 8016c80 <_dtoa_r+0x2d0>)
 8016ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae6:	f7e9 fd97 	bl	8000618 <__aeabi_dmul>
 8016aea:	a367      	add	r3, pc, #412	; (adr r3, 8016c88 <_dtoa_r+0x2d8>)
 8016aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016af0:	f7e9 fbdc 	bl	80002ac <__adddf3>
 8016af4:	4606      	mov	r6, r0
 8016af6:	4628      	mov	r0, r5
 8016af8:	460f      	mov	r7, r1
 8016afa:	f7e9 fd23 	bl	8000544 <__aeabi_i2d>
 8016afe:	a364      	add	r3, pc, #400	; (adr r3, 8016c90 <_dtoa_r+0x2e0>)
 8016b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b04:	f7e9 fd88 	bl	8000618 <__aeabi_dmul>
 8016b08:	4602      	mov	r2, r0
 8016b0a:	460b      	mov	r3, r1
 8016b0c:	4630      	mov	r0, r6
 8016b0e:	4639      	mov	r1, r7
 8016b10:	f7e9 fbcc 	bl	80002ac <__adddf3>
 8016b14:	4606      	mov	r6, r0
 8016b16:	460f      	mov	r7, r1
 8016b18:	f7ea f82e 	bl	8000b78 <__aeabi_d2iz>
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	4683      	mov	fp, r0
 8016b20:	2300      	movs	r3, #0
 8016b22:	4630      	mov	r0, r6
 8016b24:	4639      	mov	r1, r7
 8016b26:	f7e9 ffe9 	bl	8000afc <__aeabi_dcmplt>
 8016b2a:	b148      	cbz	r0, 8016b40 <_dtoa_r+0x190>
 8016b2c:	4658      	mov	r0, fp
 8016b2e:	f7e9 fd09 	bl	8000544 <__aeabi_i2d>
 8016b32:	4632      	mov	r2, r6
 8016b34:	463b      	mov	r3, r7
 8016b36:	f7e9 ffd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8016b3a:	b908      	cbnz	r0, 8016b40 <_dtoa_r+0x190>
 8016b3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016b40:	f1bb 0f16 	cmp.w	fp, #22
 8016b44:	d857      	bhi.n	8016bf6 <_dtoa_r+0x246>
 8016b46:	4b5b      	ldr	r3, [pc, #364]	; (8016cb4 <_dtoa_r+0x304>)
 8016b48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b50:	ec51 0b18 	vmov	r0, r1, d8
 8016b54:	f7e9 ffd2 	bl	8000afc <__aeabi_dcmplt>
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	d04e      	beq.n	8016bfa <_dtoa_r+0x24a>
 8016b5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016b60:	2300      	movs	r3, #0
 8016b62:	930c      	str	r3, [sp, #48]	; 0x30
 8016b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b66:	1b5b      	subs	r3, r3, r5
 8016b68:	1e5a      	subs	r2, r3, #1
 8016b6a:	bf45      	ittet	mi
 8016b6c:	f1c3 0301 	rsbmi	r3, r3, #1
 8016b70:	9305      	strmi	r3, [sp, #20]
 8016b72:	2300      	movpl	r3, #0
 8016b74:	2300      	movmi	r3, #0
 8016b76:	9206      	str	r2, [sp, #24]
 8016b78:	bf54      	ite	pl
 8016b7a:	9305      	strpl	r3, [sp, #20]
 8016b7c:	9306      	strmi	r3, [sp, #24]
 8016b7e:	f1bb 0f00 	cmp.w	fp, #0
 8016b82:	db3c      	blt.n	8016bfe <_dtoa_r+0x24e>
 8016b84:	9b06      	ldr	r3, [sp, #24]
 8016b86:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016b8a:	445b      	add	r3, fp
 8016b8c:	9306      	str	r3, [sp, #24]
 8016b8e:	2300      	movs	r3, #0
 8016b90:	9308      	str	r3, [sp, #32]
 8016b92:	9b07      	ldr	r3, [sp, #28]
 8016b94:	2b09      	cmp	r3, #9
 8016b96:	d868      	bhi.n	8016c6a <_dtoa_r+0x2ba>
 8016b98:	2b05      	cmp	r3, #5
 8016b9a:	bfc4      	itt	gt
 8016b9c:	3b04      	subgt	r3, #4
 8016b9e:	9307      	strgt	r3, [sp, #28]
 8016ba0:	9b07      	ldr	r3, [sp, #28]
 8016ba2:	f1a3 0302 	sub.w	r3, r3, #2
 8016ba6:	bfcc      	ite	gt
 8016ba8:	2500      	movgt	r5, #0
 8016baa:	2501      	movle	r5, #1
 8016bac:	2b03      	cmp	r3, #3
 8016bae:	f200 8085 	bhi.w	8016cbc <_dtoa_r+0x30c>
 8016bb2:	e8df f003 	tbb	[pc, r3]
 8016bb6:	3b2e      	.short	0x3b2e
 8016bb8:	5839      	.short	0x5839
 8016bba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016bbe:	441d      	add	r5, r3
 8016bc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016bc4:	2b20      	cmp	r3, #32
 8016bc6:	bfc1      	itttt	gt
 8016bc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016bcc:	fa08 f803 	lslgt.w	r8, r8, r3
 8016bd0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016bd4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016bd8:	bfd6      	itet	le
 8016bda:	f1c3 0320 	rsble	r3, r3, #32
 8016bde:	ea48 0003 	orrgt.w	r0, r8, r3
 8016be2:	fa06 f003 	lslle.w	r0, r6, r3
 8016be6:	f7e9 fc9d 	bl	8000524 <__aeabi_ui2d>
 8016bea:	2201      	movs	r2, #1
 8016bec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016bf0:	3d01      	subs	r5, #1
 8016bf2:	920e      	str	r2, [sp, #56]	; 0x38
 8016bf4:	e76f      	b.n	8016ad6 <_dtoa_r+0x126>
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e7b3      	b.n	8016b62 <_dtoa_r+0x1b2>
 8016bfa:	900c      	str	r0, [sp, #48]	; 0x30
 8016bfc:	e7b2      	b.n	8016b64 <_dtoa_r+0x1b4>
 8016bfe:	9b05      	ldr	r3, [sp, #20]
 8016c00:	eba3 030b 	sub.w	r3, r3, fp
 8016c04:	9305      	str	r3, [sp, #20]
 8016c06:	f1cb 0300 	rsb	r3, fp, #0
 8016c0a:	9308      	str	r3, [sp, #32]
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c10:	e7bf      	b.n	8016b92 <_dtoa_r+0x1e2>
 8016c12:	2300      	movs	r3, #0
 8016c14:	9309      	str	r3, [sp, #36]	; 0x24
 8016c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	dc52      	bgt.n	8016cc2 <_dtoa_r+0x312>
 8016c1c:	2301      	movs	r3, #1
 8016c1e:	9301      	str	r3, [sp, #4]
 8016c20:	9304      	str	r3, [sp, #16]
 8016c22:	461a      	mov	r2, r3
 8016c24:	920a      	str	r2, [sp, #40]	; 0x28
 8016c26:	e00b      	b.n	8016c40 <_dtoa_r+0x290>
 8016c28:	2301      	movs	r3, #1
 8016c2a:	e7f3      	b.n	8016c14 <_dtoa_r+0x264>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c32:	445b      	add	r3, fp
 8016c34:	9301      	str	r3, [sp, #4]
 8016c36:	3301      	adds	r3, #1
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	9304      	str	r3, [sp, #16]
 8016c3c:	bfb8      	it	lt
 8016c3e:	2301      	movlt	r3, #1
 8016c40:	69e0      	ldr	r0, [r4, #28]
 8016c42:	2100      	movs	r1, #0
 8016c44:	2204      	movs	r2, #4
 8016c46:	f102 0614 	add.w	r6, r2, #20
 8016c4a:	429e      	cmp	r6, r3
 8016c4c:	d93d      	bls.n	8016cca <_dtoa_r+0x31a>
 8016c4e:	6041      	str	r1, [r0, #4]
 8016c50:	4620      	mov	r0, r4
 8016c52:	f001 f909 	bl	8017e68 <_Balloc>
 8016c56:	9000      	str	r0, [sp, #0]
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	d139      	bne.n	8016cd0 <_dtoa_r+0x320>
 8016c5c:	4b16      	ldr	r3, [pc, #88]	; (8016cb8 <_dtoa_r+0x308>)
 8016c5e:	4602      	mov	r2, r0
 8016c60:	f240 11af 	movw	r1, #431	; 0x1af
 8016c64:	e6bd      	b.n	80169e2 <_dtoa_r+0x32>
 8016c66:	2301      	movs	r3, #1
 8016c68:	e7e1      	b.n	8016c2e <_dtoa_r+0x27e>
 8016c6a:	2501      	movs	r5, #1
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	9307      	str	r3, [sp, #28]
 8016c70:	9509      	str	r5, [sp, #36]	; 0x24
 8016c72:	f04f 33ff 	mov.w	r3, #4294967295
 8016c76:	9301      	str	r3, [sp, #4]
 8016c78:	9304      	str	r3, [sp, #16]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	2312      	movs	r3, #18
 8016c7e:	e7d1      	b.n	8016c24 <_dtoa_r+0x274>
 8016c80:	636f4361 	.word	0x636f4361
 8016c84:	3fd287a7 	.word	0x3fd287a7
 8016c88:	8b60c8b3 	.word	0x8b60c8b3
 8016c8c:	3fc68a28 	.word	0x3fc68a28
 8016c90:	509f79fb 	.word	0x509f79fb
 8016c94:	3fd34413 	.word	0x3fd34413
 8016c98:	0801aa0c 	.word	0x0801aa0c
 8016c9c:	0801aa23 	.word	0x0801aa23
 8016ca0:	7ff00000 	.word	0x7ff00000
 8016ca4:	0801aa08 	.word	0x0801aa08
 8016ca8:	0801a9ff 	.word	0x0801a9ff
 8016cac:	0801ad6d 	.word	0x0801ad6d
 8016cb0:	3ff80000 	.word	0x3ff80000
 8016cb4:	0801ab70 	.word	0x0801ab70
 8016cb8:	0801aa7b 	.word	0x0801aa7b
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016cc0:	e7d7      	b.n	8016c72 <_dtoa_r+0x2c2>
 8016cc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cc4:	9301      	str	r3, [sp, #4]
 8016cc6:	9304      	str	r3, [sp, #16]
 8016cc8:	e7ba      	b.n	8016c40 <_dtoa_r+0x290>
 8016cca:	3101      	adds	r1, #1
 8016ccc:	0052      	lsls	r2, r2, #1
 8016cce:	e7ba      	b.n	8016c46 <_dtoa_r+0x296>
 8016cd0:	69e3      	ldr	r3, [r4, #28]
 8016cd2:	9a00      	ldr	r2, [sp, #0]
 8016cd4:	601a      	str	r2, [r3, #0]
 8016cd6:	9b04      	ldr	r3, [sp, #16]
 8016cd8:	2b0e      	cmp	r3, #14
 8016cda:	f200 80a8 	bhi.w	8016e2e <_dtoa_r+0x47e>
 8016cde:	2d00      	cmp	r5, #0
 8016ce0:	f000 80a5 	beq.w	8016e2e <_dtoa_r+0x47e>
 8016ce4:	f1bb 0f00 	cmp.w	fp, #0
 8016ce8:	dd38      	ble.n	8016d5c <_dtoa_r+0x3ac>
 8016cea:	4bc0      	ldr	r3, [pc, #768]	; (8016fec <_dtoa_r+0x63c>)
 8016cec:	f00b 020f 	and.w	r2, fp, #15
 8016cf0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016cf4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8016cf8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8016cfc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8016d00:	d019      	beq.n	8016d36 <_dtoa_r+0x386>
 8016d02:	4bbb      	ldr	r3, [pc, #748]	; (8016ff0 <_dtoa_r+0x640>)
 8016d04:	ec51 0b18 	vmov	r0, r1, d8
 8016d08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016d0c:	f7e9 fdae 	bl	800086c <__aeabi_ddiv>
 8016d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d14:	f008 080f 	and.w	r8, r8, #15
 8016d18:	2503      	movs	r5, #3
 8016d1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8016ff0 <_dtoa_r+0x640>
 8016d1e:	f1b8 0f00 	cmp.w	r8, #0
 8016d22:	d10a      	bne.n	8016d3a <_dtoa_r+0x38a>
 8016d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016d28:	4632      	mov	r2, r6
 8016d2a:	463b      	mov	r3, r7
 8016d2c:	f7e9 fd9e 	bl	800086c <__aeabi_ddiv>
 8016d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d34:	e02b      	b.n	8016d8e <_dtoa_r+0x3de>
 8016d36:	2502      	movs	r5, #2
 8016d38:	e7ef      	b.n	8016d1a <_dtoa_r+0x36a>
 8016d3a:	f018 0f01 	tst.w	r8, #1
 8016d3e:	d008      	beq.n	8016d52 <_dtoa_r+0x3a2>
 8016d40:	4630      	mov	r0, r6
 8016d42:	4639      	mov	r1, r7
 8016d44:	e9d9 2300 	ldrd	r2, r3, [r9]
 8016d48:	f7e9 fc66 	bl	8000618 <__aeabi_dmul>
 8016d4c:	3501      	adds	r5, #1
 8016d4e:	4606      	mov	r6, r0
 8016d50:	460f      	mov	r7, r1
 8016d52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d56:	f109 0908 	add.w	r9, r9, #8
 8016d5a:	e7e0      	b.n	8016d1e <_dtoa_r+0x36e>
 8016d5c:	f000 809f 	beq.w	8016e9e <_dtoa_r+0x4ee>
 8016d60:	f1cb 0600 	rsb	r6, fp, #0
 8016d64:	4ba1      	ldr	r3, [pc, #644]	; (8016fec <_dtoa_r+0x63c>)
 8016d66:	4fa2      	ldr	r7, [pc, #648]	; (8016ff0 <_dtoa_r+0x640>)
 8016d68:	f006 020f 	and.w	r2, r6, #15
 8016d6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d74:	ec51 0b18 	vmov	r0, r1, d8
 8016d78:	f7e9 fc4e 	bl	8000618 <__aeabi_dmul>
 8016d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d80:	1136      	asrs	r6, r6, #4
 8016d82:	2300      	movs	r3, #0
 8016d84:	2502      	movs	r5, #2
 8016d86:	2e00      	cmp	r6, #0
 8016d88:	d17e      	bne.n	8016e88 <_dtoa_r+0x4d8>
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d1d0      	bne.n	8016d30 <_dtoa_r+0x380>
 8016d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	f000 8084 	beq.w	8016ea2 <_dtoa_r+0x4f2>
 8016d9a:	4b96      	ldr	r3, [pc, #600]	; (8016ff4 <_dtoa_r+0x644>)
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	4640      	mov	r0, r8
 8016da0:	4649      	mov	r1, r9
 8016da2:	f7e9 feab 	bl	8000afc <__aeabi_dcmplt>
 8016da6:	2800      	cmp	r0, #0
 8016da8:	d07b      	beq.n	8016ea2 <_dtoa_r+0x4f2>
 8016daa:	9b04      	ldr	r3, [sp, #16]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d078      	beq.n	8016ea2 <_dtoa_r+0x4f2>
 8016db0:	9b01      	ldr	r3, [sp, #4]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	dd39      	ble.n	8016e2a <_dtoa_r+0x47a>
 8016db6:	4b90      	ldr	r3, [pc, #576]	; (8016ff8 <_dtoa_r+0x648>)
 8016db8:	2200      	movs	r2, #0
 8016dba:	4640      	mov	r0, r8
 8016dbc:	4649      	mov	r1, r9
 8016dbe:	f7e9 fc2b 	bl	8000618 <__aeabi_dmul>
 8016dc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016dc6:	9e01      	ldr	r6, [sp, #4]
 8016dc8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8016dcc:	3501      	adds	r5, #1
 8016dce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	f7e9 fbb6 	bl	8000544 <__aeabi_i2d>
 8016dd8:	4642      	mov	r2, r8
 8016dda:	464b      	mov	r3, r9
 8016ddc:	f7e9 fc1c 	bl	8000618 <__aeabi_dmul>
 8016de0:	4b86      	ldr	r3, [pc, #536]	; (8016ffc <_dtoa_r+0x64c>)
 8016de2:	2200      	movs	r2, #0
 8016de4:	f7e9 fa62 	bl	80002ac <__adddf3>
 8016de8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016df0:	9303      	str	r3, [sp, #12]
 8016df2:	2e00      	cmp	r6, #0
 8016df4:	d158      	bne.n	8016ea8 <_dtoa_r+0x4f8>
 8016df6:	4b82      	ldr	r3, [pc, #520]	; (8017000 <_dtoa_r+0x650>)
 8016df8:	2200      	movs	r2, #0
 8016dfa:	4640      	mov	r0, r8
 8016dfc:	4649      	mov	r1, r9
 8016dfe:	f7e9 fa53 	bl	80002a8 <__aeabi_dsub>
 8016e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e06:	4680      	mov	r8, r0
 8016e08:	4689      	mov	r9, r1
 8016e0a:	f7e9 fe95 	bl	8000b38 <__aeabi_dcmpgt>
 8016e0e:	2800      	cmp	r0, #0
 8016e10:	f040 8296 	bne.w	8017340 <_dtoa_r+0x990>
 8016e14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016e18:	4640      	mov	r0, r8
 8016e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e1e:	4649      	mov	r1, r9
 8016e20:	f7e9 fe6c 	bl	8000afc <__aeabi_dcmplt>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	f040 8289 	bne.w	801733c <_dtoa_r+0x98c>
 8016e2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8016e2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	f2c0 814e 	blt.w	80170d2 <_dtoa_r+0x722>
 8016e36:	f1bb 0f0e 	cmp.w	fp, #14
 8016e3a:	f300 814a 	bgt.w	80170d2 <_dtoa_r+0x722>
 8016e3e:	4b6b      	ldr	r3, [pc, #428]	; (8016fec <_dtoa_r+0x63c>)
 8016e40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	f280 80dc 	bge.w	8017008 <_dtoa_r+0x658>
 8016e50:	9b04      	ldr	r3, [sp, #16]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f300 80d8 	bgt.w	8017008 <_dtoa_r+0x658>
 8016e58:	f040 826f 	bne.w	801733a <_dtoa_r+0x98a>
 8016e5c:	4b68      	ldr	r3, [pc, #416]	; (8017000 <_dtoa_r+0x650>)
 8016e5e:	2200      	movs	r2, #0
 8016e60:	4640      	mov	r0, r8
 8016e62:	4649      	mov	r1, r9
 8016e64:	f7e9 fbd8 	bl	8000618 <__aeabi_dmul>
 8016e68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e6c:	f7e9 fe5a 	bl	8000b24 <__aeabi_dcmpge>
 8016e70:	9e04      	ldr	r6, [sp, #16]
 8016e72:	4637      	mov	r7, r6
 8016e74:	2800      	cmp	r0, #0
 8016e76:	f040 8245 	bne.w	8017304 <_dtoa_r+0x954>
 8016e7a:	9d00      	ldr	r5, [sp, #0]
 8016e7c:	2331      	movs	r3, #49	; 0x31
 8016e7e:	f805 3b01 	strb.w	r3, [r5], #1
 8016e82:	f10b 0b01 	add.w	fp, fp, #1
 8016e86:	e241      	b.n	801730c <_dtoa_r+0x95c>
 8016e88:	07f2      	lsls	r2, r6, #31
 8016e8a:	d505      	bpl.n	8016e98 <_dtoa_r+0x4e8>
 8016e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016e90:	f7e9 fbc2 	bl	8000618 <__aeabi_dmul>
 8016e94:	3501      	adds	r5, #1
 8016e96:	2301      	movs	r3, #1
 8016e98:	1076      	asrs	r6, r6, #1
 8016e9a:	3708      	adds	r7, #8
 8016e9c:	e773      	b.n	8016d86 <_dtoa_r+0x3d6>
 8016e9e:	2502      	movs	r5, #2
 8016ea0:	e775      	b.n	8016d8e <_dtoa_r+0x3de>
 8016ea2:	9e04      	ldr	r6, [sp, #16]
 8016ea4:	465f      	mov	r7, fp
 8016ea6:	e792      	b.n	8016dce <_dtoa_r+0x41e>
 8016ea8:	9900      	ldr	r1, [sp, #0]
 8016eaa:	4b50      	ldr	r3, [pc, #320]	; (8016fec <_dtoa_r+0x63c>)
 8016eac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016eb0:	4431      	add	r1, r6
 8016eb2:	9102      	str	r1, [sp, #8]
 8016eb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016eb6:	eeb0 9a47 	vmov.f32	s18, s14
 8016eba:	eef0 9a67 	vmov.f32	s19, s15
 8016ebe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8016ec2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016ec6:	2900      	cmp	r1, #0
 8016ec8:	d044      	beq.n	8016f54 <_dtoa_r+0x5a4>
 8016eca:	494e      	ldr	r1, [pc, #312]	; (8017004 <_dtoa_r+0x654>)
 8016ecc:	2000      	movs	r0, #0
 8016ece:	f7e9 fccd 	bl	800086c <__aeabi_ddiv>
 8016ed2:	ec53 2b19 	vmov	r2, r3, d9
 8016ed6:	f7e9 f9e7 	bl	80002a8 <__aeabi_dsub>
 8016eda:	9d00      	ldr	r5, [sp, #0]
 8016edc:	ec41 0b19 	vmov	d9, r0, r1
 8016ee0:	4649      	mov	r1, r9
 8016ee2:	4640      	mov	r0, r8
 8016ee4:	f7e9 fe48 	bl	8000b78 <__aeabi_d2iz>
 8016ee8:	4606      	mov	r6, r0
 8016eea:	f7e9 fb2b 	bl	8000544 <__aeabi_i2d>
 8016eee:	4602      	mov	r2, r0
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	4640      	mov	r0, r8
 8016ef4:	4649      	mov	r1, r9
 8016ef6:	f7e9 f9d7 	bl	80002a8 <__aeabi_dsub>
 8016efa:	3630      	adds	r6, #48	; 0x30
 8016efc:	f805 6b01 	strb.w	r6, [r5], #1
 8016f00:	ec53 2b19 	vmov	r2, r3, d9
 8016f04:	4680      	mov	r8, r0
 8016f06:	4689      	mov	r9, r1
 8016f08:	f7e9 fdf8 	bl	8000afc <__aeabi_dcmplt>
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d164      	bne.n	8016fda <_dtoa_r+0x62a>
 8016f10:	4642      	mov	r2, r8
 8016f12:	464b      	mov	r3, r9
 8016f14:	4937      	ldr	r1, [pc, #220]	; (8016ff4 <_dtoa_r+0x644>)
 8016f16:	2000      	movs	r0, #0
 8016f18:	f7e9 f9c6 	bl	80002a8 <__aeabi_dsub>
 8016f1c:	ec53 2b19 	vmov	r2, r3, d9
 8016f20:	f7e9 fdec 	bl	8000afc <__aeabi_dcmplt>
 8016f24:	2800      	cmp	r0, #0
 8016f26:	f040 80b6 	bne.w	8017096 <_dtoa_r+0x6e6>
 8016f2a:	9b02      	ldr	r3, [sp, #8]
 8016f2c:	429d      	cmp	r5, r3
 8016f2e:	f43f af7c 	beq.w	8016e2a <_dtoa_r+0x47a>
 8016f32:	4b31      	ldr	r3, [pc, #196]	; (8016ff8 <_dtoa_r+0x648>)
 8016f34:	ec51 0b19 	vmov	r0, r1, d9
 8016f38:	2200      	movs	r2, #0
 8016f3a:	f7e9 fb6d 	bl	8000618 <__aeabi_dmul>
 8016f3e:	4b2e      	ldr	r3, [pc, #184]	; (8016ff8 <_dtoa_r+0x648>)
 8016f40:	ec41 0b19 	vmov	d9, r0, r1
 8016f44:	2200      	movs	r2, #0
 8016f46:	4640      	mov	r0, r8
 8016f48:	4649      	mov	r1, r9
 8016f4a:	f7e9 fb65 	bl	8000618 <__aeabi_dmul>
 8016f4e:	4680      	mov	r8, r0
 8016f50:	4689      	mov	r9, r1
 8016f52:	e7c5      	b.n	8016ee0 <_dtoa_r+0x530>
 8016f54:	ec51 0b17 	vmov	r0, r1, d7
 8016f58:	f7e9 fb5e 	bl	8000618 <__aeabi_dmul>
 8016f5c:	9b02      	ldr	r3, [sp, #8]
 8016f5e:	9d00      	ldr	r5, [sp, #0]
 8016f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f62:	ec41 0b19 	vmov	d9, r0, r1
 8016f66:	4649      	mov	r1, r9
 8016f68:	4640      	mov	r0, r8
 8016f6a:	f7e9 fe05 	bl	8000b78 <__aeabi_d2iz>
 8016f6e:	4606      	mov	r6, r0
 8016f70:	f7e9 fae8 	bl	8000544 <__aeabi_i2d>
 8016f74:	3630      	adds	r6, #48	; 0x30
 8016f76:	4602      	mov	r2, r0
 8016f78:	460b      	mov	r3, r1
 8016f7a:	4640      	mov	r0, r8
 8016f7c:	4649      	mov	r1, r9
 8016f7e:	f7e9 f993 	bl	80002a8 <__aeabi_dsub>
 8016f82:	f805 6b01 	strb.w	r6, [r5], #1
 8016f86:	9b02      	ldr	r3, [sp, #8]
 8016f88:	429d      	cmp	r5, r3
 8016f8a:	4680      	mov	r8, r0
 8016f8c:	4689      	mov	r9, r1
 8016f8e:	f04f 0200 	mov.w	r2, #0
 8016f92:	d124      	bne.n	8016fde <_dtoa_r+0x62e>
 8016f94:	4b1b      	ldr	r3, [pc, #108]	; (8017004 <_dtoa_r+0x654>)
 8016f96:	ec51 0b19 	vmov	r0, r1, d9
 8016f9a:	f7e9 f987 	bl	80002ac <__adddf3>
 8016f9e:	4602      	mov	r2, r0
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	4640      	mov	r0, r8
 8016fa4:	4649      	mov	r1, r9
 8016fa6:	f7e9 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 8016faa:	2800      	cmp	r0, #0
 8016fac:	d173      	bne.n	8017096 <_dtoa_r+0x6e6>
 8016fae:	ec53 2b19 	vmov	r2, r3, d9
 8016fb2:	4914      	ldr	r1, [pc, #80]	; (8017004 <_dtoa_r+0x654>)
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	f7e9 f977 	bl	80002a8 <__aeabi_dsub>
 8016fba:	4602      	mov	r2, r0
 8016fbc:	460b      	mov	r3, r1
 8016fbe:	4640      	mov	r0, r8
 8016fc0:	4649      	mov	r1, r9
 8016fc2:	f7e9 fd9b 	bl	8000afc <__aeabi_dcmplt>
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	f43f af2f 	beq.w	8016e2a <_dtoa_r+0x47a>
 8016fcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016fce:	1e6b      	subs	r3, r5, #1
 8016fd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016fd6:	2b30      	cmp	r3, #48	; 0x30
 8016fd8:	d0f8      	beq.n	8016fcc <_dtoa_r+0x61c>
 8016fda:	46bb      	mov	fp, r7
 8016fdc:	e04a      	b.n	8017074 <_dtoa_r+0x6c4>
 8016fde:	4b06      	ldr	r3, [pc, #24]	; (8016ff8 <_dtoa_r+0x648>)
 8016fe0:	f7e9 fb1a 	bl	8000618 <__aeabi_dmul>
 8016fe4:	4680      	mov	r8, r0
 8016fe6:	4689      	mov	r9, r1
 8016fe8:	e7bd      	b.n	8016f66 <_dtoa_r+0x5b6>
 8016fea:	bf00      	nop
 8016fec:	0801ab70 	.word	0x0801ab70
 8016ff0:	0801ab48 	.word	0x0801ab48
 8016ff4:	3ff00000 	.word	0x3ff00000
 8016ff8:	40240000 	.word	0x40240000
 8016ffc:	401c0000 	.word	0x401c0000
 8017000:	40140000 	.word	0x40140000
 8017004:	3fe00000 	.word	0x3fe00000
 8017008:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801700c:	9d00      	ldr	r5, [sp, #0]
 801700e:	4642      	mov	r2, r8
 8017010:	464b      	mov	r3, r9
 8017012:	4630      	mov	r0, r6
 8017014:	4639      	mov	r1, r7
 8017016:	f7e9 fc29 	bl	800086c <__aeabi_ddiv>
 801701a:	f7e9 fdad 	bl	8000b78 <__aeabi_d2iz>
 801701e:	9001      	str	r0, [sp, #4]
 8017020:	f7e9 fa90 	bl	8000544 <__aeabi_i2d>
 8017024:	4642      	mov	r2, r8
 8017026:	464b      	mov	r3, r9
 8017028:	f7e9 faf6 	bl	8000618 <__aeabi_dmul>
 801702c:	4602      	mov	r2, r0
 801702e:	460b      	mov	r3, r1
 8017030:	4630      	mov	r0, r6
 8017032:	4639      	mov	r1, r7
 8017034:	f7e9 f938 	bl	80002a8 <__aeabi_dsub>
 8017038:	9e01      	ldr	r6, [sp, #4]
 801703a:	9f04      	ldr	r7, [sp, #16]
 801703c:	3630      	adds	r6, #48	; 0x30
 801703e:	f805 6b01 	strb.w	r6, [r5], #1
 8017042:	9e00      	ldr	r6, [sp, #0]
 8017044:	1bae      	subs	r6, r5, r6
 8017046:	42b7      	cmp	r7, r6
 8017048:	4602      	mov	r2, r0
 801704a:	460b      	mov	r3, r1
 801704c:	d134      	bne.n	80170b8 <_dtoa_r+0x708>
 801704e:	f7e9 f92d 	bl	80002ac <__adddf3>
 8017052:	4642      	mov	r2, r8
 8017054:	464b      	mov	r3, r9
 8017056:	4606      	mov	r6, r0
 8017058:	460f      	mov	r7, r1
 801705a:	f7e9 fd6d 	bl	8000b38 <__aeabi_dcmpgt>
 801705e:	b9c8      	cbnz	r0, 8017094 <_dtoa_r+0x6e4>
 8017060:	4642      	mov	r2, r8
 8017062:	464b      	mov	r3, r9
 8017064:	4630      	mov	r0, r6
 8017066:	4639      	mov	r1, r7
 8017068:	f7e9 fd3e 	bl	8000ae8 <__aeabi_dcmpeq>
 801706c:	b110      	cbz	r0, 8017074 <_dtoa_r+0x6c4>
 801706e:	9b01      	ldr	r3, [sp, #4]
 8017070:	07db      	lsls	r3, r3, #31
 8017072:	d40f      	bmi.n	8017094 <_dtoa_r+0x6e4>
 8017074:	4651      	mov	r1, sl
 8017076:	4620      	mov	r0, r4
 8017078:	f000 ff36 	bl	8017ee8 <_Bfree>
 801707c:	2300      	movs	r3, #0
 801707e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017080:	702b      	strb	r3, [r5, #0]
 8017082:	f10b 0301 	add.w	r3, fp, #1
 8017086:	6013      	str	r3, [r2, #0]
 8017088:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801708a:	2b00      	cmp	r3, #0
 801708c:	f43f ace2 	beq.w	8016a54 <_dtoa_r+0xa4>
 8017090:	601d      	str	r5, [r3, #0]
 8017092:	e4df      	b.n	8016a54 <_dtoa_r+0xa4>
 8017094:	465f      	mov	r7, fp
 8017096:	462b      	mov	r3, r5
 8017098:	461d      	mov	r5, r3
 801709a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801709e:	2a39      	cmp	r2, #57	; 0x39
 80170a0:	d106      	bne.n	80170b0 <_dtoa_r+0x700>
 80170a2:	9a00      	ldr	r2, [sp, #0]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d1f7      	bne.n	8017098 <_dtoa_r+0x6e8>
 80170a8:	9900      	ldr	r1, [sp, #0]
 80170aa:	2230      	movs	r2, #48	; 0x30
 80170ac:	3701      	adds	r7, #1
 80170ae:	700a      	strb	r2, [r1, #0]
 80170b0:	781a      	ldrb	r2, [r3, #0]
 80170b2:	3201      	adds	r2, #1
 80170b4:	701a      	strb	r2, [r3, #0]
 80170b6:	e790      	b.n	8016fda <_dtoa_r+0x62a>
 80170b8:	4ba3      	ldr	r3, [pc, #652]	; (8017348 <_dtoa_r+0x998>)
 80170ba:	2200      	movs	r2, #0
 80170bc:	f7e9 faac 	bl	8000618 <__aeabi_dmul>
 80170c0:	2200      	movs	r2, #0
 80170c2:	2300      	movs	r3, #0
 80170c4:	4606      	mov	r6, r0
 80170c6:	460f      	mov	r7, r1
 80170c8:	f7e9 fd0e 	bl	8000ae8 <__aeabi_dcmpeq>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d09e      	beq.n	801700e <_dtoa_r+0x65e>
 80170d0:	e7d0      	b.n	8017074 <_dtoa_r+0x6c4>
 80170d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170d4:	2a00      	cmp	r2, #0
 80170d6:	f000 80ca 	beq.w	801726e <_dtoa_r+0x8be>
 80170da:	9a07      	ldr	r2, [sp, #28]
 80170dc:	2a01      	cmp	r2, #1
 80170de:	f300 80ad 	bgt.w	801723c <_dtoa_r+0x88c>
 80170e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80170e4:	2a00      	cmp	r2, #0
 80170e6:	f000 80a5 	beq.w	8017234 <_dtoa_r+0x884>
 80170ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80170ee:	9e08      	ldr	r6, [sp, #32]
 80170f0:	9d05      	ldr	r5, [sp, #20]
 80170f2:	9a05      	ldr	r2, [sp, #20]
 80170f4:	441a      	add	r2, r3
 80170f6:	9205      	str	r2, [sp, #20]
 80170f8:	9a06      	ldr	r2, [sp, #24]
 80170fa:	2101      	movs	r1, #1
 80170fc:	441a      	add	r2, r3
 80170fe:	4620      	mov	r0, r4
 8017100:	9206      	str	r2, [sp, #24]
 8017102:	f000 fff1 	bl	80180e8 <__i2b>
 8017106:	4607      	mov	r7, r0
 8017108:	b165      	cbz	r5, 8017124 <_dtoa_r+0x774>
 801710a:	9b06      	ldr	r3, [sp, #24]
 801710c:	2b00      	cmp	r3, #0
 801710e:	dd09      	ble.n	8017124 <_dtoa_r+0x774>
 8017110:	42ab      	cmp	r3, r5
 8017112:	9a05      	ldr	r2, [sp, #20]
 8017114:	bfa8      	it	ge
 8017116:	462b      	movge	r3, r5
 8017118:	1ad2      	subs	r2, r2, r3
 801711a:	9205      	str	r2, [sp, #20]
 801711c:	9a06      	ldr	r2, [sp, #24]
 801711e:	1aed      	subs	r5, r5, r3
 8017120:	1ad3      	subs	r3, r2, r3
 8017122:	9306      	str	r3, [sp, #24]
 8017124:	9b08      	ldr	r3, [sp, #32]
 8017126:	b1f3      	cbz	r3, 8017166 <_dtoa_r+0x7b6>
 8017128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801712a:	2b00      	cmp	r3, #0
 801712c:	f000 80a3 	beq.w	8017276 <_dtoa_r+0x8c6>
 8017130:	2e00      	cmp	r6, #0
 8017132:	dd10      	ble.n	8017156 <_dtoa_r+0x7a6>
 8017134:	4639      	mov	r1, r7
 8017136:	4632      	mov	r2, r6
 8017138:	4620      	mov	r0, r4
 801713a:	f001 f895 	bl	8018268 <__pow5mult>
 801713e:	4652      	mov	r2, sl
 8017140:	4601      	mov	r1, r0
 8017142:	4607      	mov	r7, r0
 8017144:	4620      	mov	r0, r4
 8017146:	f000 ffe5 	bl	8018114 <__multiply>
 801714a:	4651      	mov	r1, sl
 801714c:	4680      	mov	r8, r0
 801714e:	4620      	mov	r0, r4
 8017150:	f000 feca 	bl	8017ee8 <_Bfree>
 8017154:	46c2      	mov	sl, r8
 8017156:	9b08      	ldr	r3, [sp, #32]
 8017158:	1b9a      	subs	r2, r3, r6
 801715a:	d004      	beq.n	8017166 <_dtoa_r+0x7b6>
 801715c:	4651      	mov	r1, sl
 801715e:	4620      	mov	r0, r4
 8017160:	f001 f882 	bl	8018268 <__pow5mult>
 8017164:	4682      	mov	sl, r0
 8017166:	2101      	movs	r1, #1
 8017168:	4620      	mov	r0, r4
 801716a:	f000 ffbd 	bl	80180e8 <__i2b>
 801716e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017170:	2b00      	cmp	r3, #0
 8017172:	4606      	mov	r6, r0
 8017174:	f340 8081 	ble.w	801727a <_dtoa_r+0x8ca>
 8017178:	461a      	mov	r2, r3
 801717a:	4601      	mov	r1, r0
 801717c:	4620      	mov	r0, r4
 801717e:	f001 f873 	bl	8018268 <__pow5mult>
 8017182:	9b07      	ldr	r3, [sp, #28]
 8017184:	2b01      	cmp	r3, #1
 8017186:	4606      	mov	r6, r0
 8017188:	dd7a      	ble.n	8017280 <_dtoa_r+0x8d0>
 801718a:	f04f 0800 	mov.w	r8, #0
 801718e:	6933      	ldr	r3, [r6, #16]
 8017190:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017194:	6918      	ldr	r0, [r3, #16]
 8017196:	f000 ff59 	bl	801804c <__hi0bits>
 801719a:	f1c0 0020 	rsb	r0, r0, #32
 801719e:	9b06      	ldr	r3, [sp, #24]
 80171a0:	4418      	add	r0, r3
 80171a2:	f010 001f 	ands.w	r0, r0, #31
 80171a6:	f000 8094 	beq.w	80172d2 <_dtoa_r+0x922>
 80171aa:	f1c0 0320 	rsb	r3, r0, #32
 80171ae:	2b04      	cmp	r3, #4
 80171b0:	f340 8085 	ble.w	80172be <_dtoa_r+0x90e>
 80171b4:	9b05      	ldr	r3, [sp, #20]
 80171b6:	f1c0 001c 	rsb	r0, r0, #28
 80171ba:	4403      	add	r3, r0
 80171bc:	9305      	str	r3, [sp, #20]
 80171be:	9b06      	ldr	r3, [sp, #24]
 80171c0:	4403      	add	r3, r0
 80171c2:	4405      	add	r5, r0
 80171c4:	9306      	str	r3, [sp, #24]
 80171c6:	9b05      	ldr	r3, [sp, #20]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	dd05      	ble.n	80171d8 <_dtoa_r+0x828>
 80171cc:	4651      	mov	r1, sl
 80171ce:	461a      	mov	r2, r3
 80171d0:	4620      	mov	r0, r4
 80171d2:	f001 f8a3 	bl	801831c <__lshift>
 80171d6:	4682      	mov	sl, r0
 80171d8:	9b06      	ldr	r3, [sp, #24]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	dd05      	ble.n	80171ea <_dtoa_r+0x83a>
 80171de:	4631      	mov	r1, r6
 80171e0:	461a      	mov	r2, r3
 80171e2:	4620      	mov	r0, r4
 80171e4:	f001 f89a 	bl	801831c <__lshift>
 80171e8:	4606      	mov	r6, r0
 80171ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ec:	2b00      	cmp	r3, #0
 80171ee:	d072      	beq.n	80172d6 <_dtoa_r+0x926>
 80171f0:	4631      	mov	r1, r6
 80171f2:	4650      	mov	r0, sl
 80171f4:	f001 f8fe 	bl	80183f4 <__mcmp>
 80171f8:	2800      	cmp	r0, #0
 80171fa:	da6c      	bge.n	80172d6 <_dtoa_r+0x926>
 80171fc:	2300      	movs	r3, #0
 80171fe:	4651      	mov	r1, sl
 8017200:	220a      	movs	r2, #10
 8017202:	4620      	mov	r0, r4
 8017204:	f000 fe92 	bl	8017f2c <__multadd>
 8017208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801720a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801720e:	4682      	mov	sl, r0
 8017210:	2b00      	cmp	r3, #0
 8017212:	f000 81b0 	beq.w	8017576 <_dtoa_r+0xbc6>
 8017216:	2300      	movs	r3, #0
 8017218:	4639      	mov	r1, r7
 801721a:	220a      	movs	r2, #10
 801721c:	4620      	mov	r0, r4
 801721e:	f000 fe85 	bl	8017f2c <__multadd>
 8017222:	9b01      	ldr	r3, [sp, #4]
 8017224:	2b00      	cmp	r3, #0
 8017226:	4607      	mov	r7, r0
 8017228:	f300 8096 	bgt.w	8017358 <_dtoa_r+0x9a8>
 801722c:	9b07      	ldr	r3, [sp, #28]
 801722e:	2b02      	cmp	r3, #2
 8017230:	dc59      	bgt.n	80172e6 <_dtoa_r+0x936>
 8017232:	e091      	b.n	8017358 <_dtoa_r+0x9a8>
 8017234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801723a:	e758      	b.n	80170ee <_dtoa_r+0x73e>
 801723c:	9b04      	ldr	r3, [sp, #16]
 801723e:	1e5e      	subs	r6, r3, #1
 8017240:	9b08      	ldr	r3, [sp, #32]
 8017242:	42b3      	cmp	r3, r6
 8017244:	bfbf      	itttt	lt
 8017246:	9b08      	ldrlt	r3, [sp, #32]
 8017248:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801724a:	9608      	strlt	r6, [sp, #32]
 801724c:	1af3      	sublt	r3, r6, r3
 801724e:	bfb4      	ite	lt
 8017250:	18d2      	addlt	r2, r2, r3
 8017252:	1b9e      	subge	r6, r3, r6
 8017254:	9b04      	ldr	r3, [sp, #16]
 8017256:	bfbc      	itt	lt
 8017258:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801725a:	2600      	movlt	r6, #0
 801725c:	2b00      	cmp	r3, #0
 801725e:	bfb7      	itett	lt
 8017260:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8017264:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8017268:	1a9d      	sublt	r5, r3, r2
 801726a:	2300      	movlt	r3, #0
 801726c:	e741      	b.n	80170f2 <_dtoa_r+0x742>
 801726e:	9e08      	ldr	r6, [sp, #32]
 8017270:	9d05      	ldr	r5, [sp, #20]
 8017272:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017274:	e748      	b.n	8017108 <_dtoa_r+0x758>
 8017276:	9a08      	ldr	r2, [sp, #32]
 8017278:	e770      	b.n	801715c <_dtoa_r+0x7ac>
 801727a:	9b07      	ldr	r3, [sp, #28]
 801727c:	2b01      	cmp	r3, #1
 801727e:	dc19      	bgt.n	80172b4 <_dtoa_r+0x904>
 8017280:	9b02      	ldr	r3, [sp, #8]
 8017282:	b9bb      	cbnz	r3, 80172b4 <_dtoa_r+0x904>
 8017284:	9b03      	ldr	r3, [sp, #12]
 8017286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801728a:	b99b      	cbnz	r3, 80172b4 <_dtoa_r+0x904>
 801728c:	9b03      	ldr	r3, [sp, #12]
 801728e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017292:	0d1b      	lsrs	r3, r3, #20
 8017294:	051b      	lsls	r3, r3, #20
 8017296:	b183      	cbz	r3, 80172ba <_dtoa_r+0x90a>
 8017298:	9b05      	ldr	r3, [sp, #20]
 801729a:	3301      	adds	r3, #1
 801729c:	9305      	str	r3, [sp, #20]
 801729e:	9b06      	ldr	r3, [sp, #24]
 80172a0:	3301      	adds	r3, #1
 80172a2:	9306      	str	r3, [sp, #24]
 80172a4:	f04f 0801 	mov.w	r8, #1
 80172a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f47f af6f 	bne.w	801718e <_dtoa_r+0x7de>
 80172b0:	2001      	movs	r0, #1
 80172b2:	e774      	b.n	801719e <_dtoa_r+0x7ee>
 80172b4:	f04f 0800 	mov.w	r8, #0
 80172b8:	e7f6      	b.n	80172a8 <_dtoa_r+0x8f8>
 80172ba:	4698      	mov	r8, r3
 80172bc:	e7f4      	b.n	80172a8 <_dtoa_r+0x8f8>
 80172be:	d082      	beq.n	80171c6 <_dtoa_r+0x816>
 80172c0:	9a05      	ldr	r2, [sp, #20]
 80172c2:	331c      	adds	r3, #28
 80172c4:	441a      	add	r2, r3
 80172c6:	9205      	str	r2, [sp, #20]
 80172c8:	9a06      	ldr	r2, [sp, #24]
 80172ca:	441a      	add	r2, r3
 80172cc:	441d      	add	r5, r3
 80172ce:	9206      	str	r2, [sp, #24]
 80172d0:	e779      	b.n	80171c6 <_dtoa_r+0x816>
 80172d2:	4603      	mov	r3, r0
 80172d4:	e7f4      	b.n	80172c0 <_dtoa_r+0x910>
 80172d6:	9b04      	ldr	r3, [sp, #16]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	dc37      	bgt.n	801734c <_dtoa_r+0x99c>
 80172dc:	9b07      	ldr	r3, [sp, #28]
 80172de:	2b02      	cmp	r3, #2
 80172e0:	dd34      	ble.n	801734c <_dtoa_r+0x99c>
 80172e2:	9b04      	ldr	r3, [sp, #16]
 80172e4:	9301      	str	r3, [sp, #4]
 80172e6:	9b01      	ldr	r3, [sp, #4]
 80172e8:	b963      	cbnz	r3, 8017304 <_dtoa_r+0x954>
 80172ea:	4631      	mov	r1, r6
 80172ec:	2205      	movs	r2, #5
 80172ee:	4620      	mov	r0, r4
 80172f0:	f000 fe1c 	bl	8017f2c <__multadd>
 80172f4:	4601      	mov	r1, r0
 80172f6:	4606      	mov	r6, r0
 80172f8:	4650      	mov	r0, sl
 80172fa:	f001 f87b 	bl	80183f4 <__mcmp>
 80172fe:	2800      	cmp	r0, #0
 8017300:	f73f adbb 	bgt.w	8016e7a <_dtoa_r+0x4ca>
 8017304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017306:	9d00      	ldr	r5, [sp, #0]
 8017308:	ea6f 0b03 	mvn.w	fp, r3
 801730c:	f04f 0800 	mov.w	r8, #0
 8017310:	4631      	mov	r1, r6
 8017312:	4620      	mov	r0, r4
 8017314:	f000 fde8 	bl	8017ee8 <_Bfree>
 8017318:	2f00      	cmp	r7, #0
 801731a:	f43f aeab 	beq.w	8017074 <_dtoa_r+0x6c4>
 801731e:	f1b8 0f00 	cmp.w	r8, #0
 8017322:	d005      	beq.n	8017330 <_dtoa_r+0x980>
 8017324:	45b8      	cmp	r8, r7
 8017326:	d003      	beq.n	8017330 <_dtoa_r+0x980>
 8017328:	4641      	mov	r1, r8
 801732a:	4620      	mov	r0, r4
 801732c:	f000 fddc 	bl	8017ee8 <_Bfree>
 8017330:	4639      	mov	r1, r7
 8017332:	4620      	mov	r0, r4
 8017334:	f000 fdd8 	bl	8017ee8 <_Bfree>
 8017338:	e69c      	b.n	8017074 <_dtoa_r+0x6c4>
 801733a:	2600      	movs	r6, #0
 801733c:	4637      	mov	r7, r6
 801733e:	e7e1      	b.n	8017304 <_dtoa_r+0x954>
 8017340:	46bb      	mov	fp, r7
 8017342:	4637      	mov	r7, r6
 8017344:	e599      	b.n	8016e7a <_dtoa_r+0x4ca>
 8017346:	bf00      	nop
 8017348:	40240000 	.word	0x40240000
 801734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801734e:	2b00      	cmp	r3, #0
 8017350:	f000 80c8 	beq.w	80174e4 <_dtoa_r+0xb34>
 8017354:	9b04      	ldr	r3, [sp, #16]
 8017356:	9301      	str	r3, [sp, #4]
 8017358:	2d00      	cmp	r5, #0
 801735a:	dd05      	ble.n	8017368 <_dtoa_r+0x9b8>
 801735c:	4639      	mov	r1, r7
 801735e:	462a      	mov	r2, r5
 8017360:	4620      	mov	r0, r4
 8017362:	f000 ffdb 	bl	801831c <__lshift>
 8017366:	4607      	mov	r7, r0
 8017368:	f1b8 0f00 	cmp.w	r8, #0
 801736c:	d05b      	beq.n	8017426 <_dtoa_r+0xa76>
 801736e:	6879      	ldr	r1, [r7, #4]
 8017370:	4620      	mov	r0, r4
 8017372:	f000 fd79 	bl	8017e68 <_Balloc>
 8017376:	4605      	mov	r5, r0
 8017378:	b928      	cbnz	r0, 8017386 <_dtoa_r+0x9d6>
 801737a:	4b83      	ldr	r3, [pc, #524]	; (8017588 <_dtoa_r+0xbd8>)
 801737c:	4602      	mov	r2, r0
 801737e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8017382:	f7ff bb2e 	b.w	80169e2 <_dtoa_r+0x32>
 8017386:	693a      	ldr	r2, [r7, #16]
 8017388:	3202      	adds	r2, #2
 801738a:	0092      	lsls	r2, r2, #2
 801738c:	f107 010c 	add.w	r1, r7, #12
 8017390:	300c      	adds	r0, #12
 8017392:	f7ff fa66 	bl	8016862 <memcpy>
 8017396:	2201      	movs	r2, #1
 8017398:	4629      	mov	r1, r5
 801739a:	4620      	mov	r0, r4
 801739c:	f000 ffbe 	bl	801831c <__lshift>
 80173a0:	9b00      	ldr	r3, [sp, #0]
 80173a2:	3301      	adds	r3, #1
 80173a4:	9304      	str	r3, [sp, #16]
 80173a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173aa:	4413      	add	r3, r2
 80173ac:	9308      	str	r3, [sp, #32]
 80173ae:	9b02      	ldr	r3, [sp, #8]
 80173b0:	f003 0301 	and.w	r3, r3, #1
 80173b4:	46b8      	mov	r8, r7
 80173b6:	9306      	str	r3, [sp, #24]
 80173b8:	4607      	mov	r7, r0
 80173ba:	9b04      	ldr	r3, [sp, #16]
 80173bc:	4631      	mov	r1, r6
 80173be:	3b01      	subs	r3, #1
 80173c0:	4650      	mov	r0, sl
 80173c2:	9301      	str	r3, [sp, #4]
 80173c4:	f7ff fa6a 	bl	801689c <quorem>
 80173c8:	4641      	mov	r1, r8
 80173ca:	9002      	str	r0, [sp, #8]
 80173cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80173d0:	4650      	mov	r0, sl
 80173d2:	f001 f80f 	bl	80183f4 <__mcmp>
 80173d6:	463a      	mov	r2, r7
 80173d8:	9005      	str	r0, [sp, #20]
 80173da:	4631      	mov	r1, r6
 80173dc:	4620      	mov	r0, r4
 80173de:	f001 f825 	bl	801842c <__mdiff>
 80173e2:	68c2      	ldr	r2, [r0, #12]
 80173e4:	4605      	mov	r5, r0
 80173e6:	bb02      	cbnz	r2, 801742a <_dtoa_r+0xa7a>
 80173e8:	4601      	mov	r1, r0
 80173ea:	4650      	mov	r0, sl
 80173ec:	f001 f802 	bl	80183f4 <__mcmp>
 80173f0:	4602      	mov	r2, r0
 80173f2:	4629      	mov	r1, r5
 80173f4:	4620      	mov	r0, r4
 80173f6:	9209      	str	r2, [sp, #36]	; 0x24
 80173f8:	f000 fd76 	bl	8017ee8 <_Bfree>
 80173fc:	9b07      	ldr	r3, [sp, #28]
 80173fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017400:	9d04      	ldr	r5, [sp, #16]
 8017402:	ea43 0102 	orr.w	r1, r3, r2
 8017406:	9b06      	ldr	r3, [sp, #24]
 8017408:	4319      	orrs	r1, r3
 801740a:	d110      	bne.n	801742e <_dtoa_r+0xa7e>
 801740c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017410:	d029      	beq.n	8017466 <_dtoa_r+0xab6>
 8017412:	9b05      	ldr	r3, [sp, #20]
 8017414:	2b00      	cmp	r3, #0
 8017416:	dd02      	ble.n	801741e <_dtoa_r+0xa6e>
 8017418:	9b02      	ldr	r3, [sp, #8]
 801741a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801741e:	9b01      	ldr	r3, [sp, #4]
 8017420:	f883 9000 	strb.w	r9, [r3]
 8017424:	e774      	b.n	8017310 <_dtoa_r+0x960>
 8017426:	4638      	mov	r0, r7
 8017428:	e7ba      	b.n	80173a0 <_dtoa_r+0x9f0>
 801742a:	2201      	movs	r2, #1
 801742c:	e7e1      	b.n	80173f2 <_dtoa_r+0xa42>
 801742e:	9b05      	ldr	r3, [sp, #20]
 8017430:	2b00      	cmp	r3, #0
 8017432:	db04      	blt.n	801743e <_dtoa_r+0xa8e>
 8017434:	9907      	ldr	r1, [sp, #28]
 8017436:	430b      	orrs	r3, r1
 8017438:	9906      	ldr	r1, [sp, #24]
 801743a:	430b      	orrs	r3, r1
 801743c:	d120      	bne.n	8017480 <_dtoa_r+0xad0>
 801743e:	2a00      	cmp	r2, #0
 8017440:	dded      	ble.n	801741e <_dtoa_r+0xa6e>
 8017442:	4651      	mov	r1, sl
 8017444:	2201      	movs	r2, #1
 8017446:	4620      	mov	r0, r4
 8017448:	f000 ff68 	bl	801831c <__lshift>
 801744c:	4631      	mov	r1, r6
 801744e:	4682      	mov	sl, r0
 8017450:	f000 ffd0 	bl	80183f4 <__mcmp>
 8017454:	2800      	cmp	r0, #0
 8017456:	dc03      	bgt.n	8017460 <_dtoa_r+0xab0>
 8017458:	d1e1      	bne.n	801741e <_dtoa_r+0xa6e>
 801745a:	f019 0f01 	tst.w	r9, #1
 801745e:	d0de      	beq.n	801741e <_dtoa_r+0xa6e>
 8017460:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017464:	d1d8      	bne.n	8017418 <_dtoa_r+0xa68>
 8017466:	9a01      	ldr	r2, [sp, #4]
 8017468:	2339      	movs	r3, #57	; 0x39
 801746a:	7013      	strb	r3, [r2, #0]
 801746c:	462b      	mov	r3, r5
 801746e:	461d      	mov	r5, r3
 8017470:	3b01      	subs	r3, #1
 8017472:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017476:	2a39      	cmp	r2, #57	; 0x39
 8017478:	d06c      	beq.n	8017554 <_dtoa_r+0xba4>
 801747a:	3201      	adds	r2, #1
 801747c:	701a      	strb	r2, [r3, #0]
 801747e:	e747      	b.n	8017310 <_dtoa_r+0x960>
 8017480:	2a00      	cmp	r2, #0
 8017482:	dd07      	ble.n	8017494 <_dtoa_r+0xae4>
 8017484:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017488:	d0ed      	beq.n	8017466 <_dtoa_r+0xab6>
 801748a:	9a01      	ldr	r2, [sp, #4]
 801748c:	f109 0301 	add.w	r3, r9, #1
 8017490:	7013      	strb	r3, [r2, #0]
 8017492:	e73d      	b.n	8017310 <_dtoa_r+0x960>
 8017494:	9b04      	ldr	r3, [sp, #16]
 8017496:	9a08      	ldr	r2, [sp, #32]
 8017498:	f803 9c01 	strb.w	r9, [r3, #-1]
 801749c:	4293      	cmp	r3, r2
 801749e:	d043      	beq.n	8017528 <_dtoa_r+0xb78>
 80174a0:	4651      	mov	r1, sl
 80174a2:	2300      	movs	r3, #0
 80174a4:	220a      	movs	r2, #10
 80174a6:	4620      	mov	r0, r4
 80174a8:	f000 fd40 	bl	8017f2c <__multadd>
 80174ac:	45b8      	cmp	r8, r7
 80174ae:	4682      	mov	sl, r0
 80174b0:	f04f 0300 	mov.w	r3, #0
 80174b4:	f04f 020a 	mov.w	r2, #10
 80174b8:	4641      	mov	r1, r8
 80174ba:	4620      	mov	r0, r4
 80174bc:	d107      	bne.n	80174ce <_dtoa_r+0xb1e>
 80174be:	f000 fd35 	bl	8017f2c <__multadd>
 80174c2:	4680      	mov	r8, r0
 80174c4:	4607      	mov	r7, r0
 80174c6:	9b04      	ldr	r3, [sp, #16]
 80174c8:	3301      	adds	r3, #1
 80174ca:	9304      	str	r3, [sp, #16]
 80174cc:	e775      	b.n	80173ba <_dtoa_r+0xa0a>
 80174ce:	f000 fd2d 	bl	8017f2c <__multadd>
 80174d2:	4639      	mov	r1, r7
 80174d4:	4680      	mov	r8, r0
 80174d6:	2300      	movs	r3, #0
 80174d8:	220a      	movs	r2, #10
 80174da:	4620      	mov	r0, r4
 80174dc:	f000 fd26 	bl	8017f2c <__multadd>
 80174e0:	4607      	mov	r7, r0
 80174e2:	e7f0      	b.n	80174c6 <_dtoa_r+0xb16>
 80174e4:	9b04      	ldr	r3, [sp, #16]
 80174e6:	9301      	str	r3, [sp, #4]
 80174e8:	9d00      	ldr	r5, [sp, #0]
 80174ea:	4631      	mov	r1, r6
 80174ec:	4650      	mov	r0, sl
 80174ee:	f7ff f9d5 	bl	801689c <quorem>
 80174f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80174f6:	9b00      	ldr	r3, [sp, #0]
 80174f8:	f805 9b01 	strb.w	r9, [r5], #1
 80174fc:	1aea      	subs	r2, r5, r3
 80174fe:	9b01      	ldr	r3, [sp, #4]
 8017500:	4293      	cmp	r3, r2
 8017502:	dd07      	ble.n	8017514 <_dtoa_r+0xb64>
 8017504:	4651      	mov	r1, sl
 8017506:	2300      	movs	r3, #0
 8017508:	220a      	movs	r2, #10
 801750a:	4620      	mov	r0, r4
 801750c:	f000 fd0e 	bl	8017f2c <__multadd>
 8017510:	4682      	mov	sl, r0
 8017512:	e7ea      	b.n	80174ea <_dtoa_r+0xb3a>
 8017514:	9b01      	ldr	r3, [sp, #4]
 8017516:	2b00      	cmp	r3, #0
 8017518:	bfc8      	it	gt
 801751a:	461d      	movgt	r5, r3
 801751c:	9b00      	ldr	r3, [sp, #0]
 801751e:	bfd8      	it	le
 8017520:	2501      	movle	r5, #1
 8017522:	441d      	add	r5, r3
 8017524:	f04f 0800 	mov.w	r8, #0
 8017528:	4651      	mov	r1, sl
 801752a:	2201      	movs	r2, #1
 801752c:	4620      	mov	r0, r4
 801752e:	f000 fef5 	bl	801831c <__lshift>
 8017532:	4631      	mov	r1, r6
 8017534:	4682      	mov	sl, r0
 8017536:	f000 ff5d 	bl	80183f4 <__mcmp>
 801753a:	2800      	cmp	r0, #0
 801753c:	dc96      	bgt.n	801746c <_dtoa_r+0xabc>
 801753e:	d102      	bne.n	8017546 <_dtoa_r+0xb96>
 8017540:	f019 0f01 	tst.w	r9, #1
 8017544:	d192      	bne.n	801746c <_dtoa_r+0xabc>
 8017546:	462b      	mov	r3, r5
 8017548:	461d      	mov	r5, r3
 801754a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801754e:	2a30      	cmp	r2, #48	; 0x30
 8017550:	d0fa      	beq.n	8017548 <_dtoa_r+0xb98>
 8017552:	e6dd      	b.n	8017310 <_dtoa_r+0x960>
 8017554:	9a00      	ldr	r2, [sp, #0]
 8017556:	429a      	cmp	r2, r3
 8017558:	d189      	bne.n	801746e <_dtoa_r+0xabe>
 801755a:	f10b 0b01 	add.w	fp, fp, #1
 801755e:	2331      	movs	r3, #49	; 0x31
 8017560:	e796      	b.n	8017490 <_dtoa_r+0xae0>
 8017562:	4b0a      	ldr	r3, [pc, #40]	; (801758c <_dtoa_r+0xbdc>)
 8017564:	f7ff ba99 	b.w	8016a9a <_dtoa_r+0xea>
 8017568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801756a:	2b00      	cmp	r3, #0
 801756c:	f47f aa6d 	bne.w	8016a4a <_dtoa_r+0x9a>
 8017570:	4b07      	ldr	r3, [pc, #28]	; (8017590 <_dtoa_r+0xbe0>)
 8017572:	f7ff ba92 	b.w	8016a9a <_dtoa_r+0xea>
 8017576:	9b01      	ldr	r3, [sp, #4]
 8017578:	2b00      	cmp	r3, #0
 801757a:	dcb5      	bgt.n	80174e8 <_dtoa_r+0xb38>
 801757c:	9b07      	ldr	r3, [sp, #28]
 801757e:	2b02      	cmp	r3, #2
 8017580:	f73f aeb1 	bgt.w	80172e6 <_dtoa_r+0x936>
 8017584:	e7b0      	b.n	80174e8 <_dtoa_r+0xb38>
 8017586:	bf00      	nop
 8017588:	0801aa7b 	.word	0x0801aa7b
 801758c:	0801ad6c 	.word	0x0801ad6c
 8017590:	0801a9ff 	.word	0x0801a9ff

08017594 <_free_r>:
 8017594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017596:	2900      	cmp	r1, #0
 8017598:	d044      	beq.n	8017624 <_free_r+0x90>
 801759a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801759e:	9001      	str	r0, [sp, #4]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	f1a1 0404 	sub.w	r4, r1, #4
 80175a6:	bfb8      	it	lt
 80175a8:	18e4      	addlt	r4, r4, r3
 80175aa:	f000 fc51 	bl	8017e50 <__malloc_lock>
 80175ae:	4a1e      	ldr	r2, [pc, #120]	; (8017628 <_free_r+0x94>)
 80175b0:	9801      	ldr	r0, [sp, #4]
 80175b2:	6813      	ldr	r3, [r2, #0]
 80175b4:	b933      	cbnz	r3, 80175c4 <_free_r+0x30>
 80175b6:	6063      	str	r3, [r4, #4]
 80175b8:	6014      	str	r4, [r2, #0]
 80175ba:	b003      	add	sp, #12
 80175bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175c0:	f000 bc4c 	b.w	8017e5c <__malloc_unlock>
 80175c4:	42a3      	cmp	r3, r4
 80175c6:	d908      	bls.n	80175da <_free_r+0x46>
 80175c8:	6825      	ldr	r5, [r4, #0]
 80175ca:	1961      	adds	r1, r4, r5
 80175cc:	428b      	cmp	r3, r1
 80175ce:	bf01      	itttt	eq
 80175d0:	6819      	ldreq	r1, [r3, #0]
 80175d2:	685b      	ldreq	r3, [r3, #4]
 80175d4:	1949      	addeq	r1, r1, r5
 80175d6:	6021      	streq	r1, [r4, #0]
 80175d8:	e7ed      	b.n	80175b6 <_free_r+0x22>
 80175da:	461a      	mov	r2, r3
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	b10b      	cbz	r3, 80175e4 <_free_r+0x50>
 80175e0:	42a3      	cmp	r3, r4
 80175e2:	d9fa      	bls.n	80175da <_free_r+0x46>
 80175e4:	6811      	ldr	r1, [r2, #0]
 80175e6:	1855      	adds	r5, r2, r1
 80175e8:	42a5      	cmp	r5, r4
 80175ea:	d10b      	bne.n	8017604 <_free_r+0x70>
 80175ec:	6824      	ldr	r4, [r4, #0]
 80175ee:	4421      	add	r1, r4
 80175f0:	1854      	adds	r4, r2, r1
 80175f2:	42a3      	cmp	r3, r4
 80175f4:	6011      	str	r1, [r2, #0]
 80175f6:	d1e0      	bne.n	80175ba <_free_r+0x26>
 80175f8:	681c      	ldr	r4, [r3, #0]
 80175fa:	685b      	ldr	r3, [r3, #4]
 80175fc:	6053      	str	r3, [r2, #4]
 80175fe:	440c      	add	r4, r1
 8017600:	6014      	str	r4, [r2, #0]
 8017602:	e7da      	b.n	80175ba <_free_r+0x26>
 8017604:	d902      	bls.n	801760c <_free_r+0x78>
 8017606:	230c      	movs	r3, #12
 8017608:	6003      	str	r3, [r0, #0]
 801760a:	e7d6      	b.n	80175ba <_free_r+0x26>
 801760c:	6825      	ldr	r5, [r4, #0]
 801760e:	1961      	adds	r1, r4, r5
 8017610:	428b      	cmp	r3, r1
 8017612:	bf04      	itt	eq
 8017614:	6819      	ldreq	r1, [r3, #0]
 8017616:	685b      	ldreq	r3, [r3, #4]
 8017618:	6063      	str	r3, [r4, #4]
 801761a:	bf04      	itt	eq
 801761c:	1949      	addeq	r1, r1, r5
 801761e:	6021      	streq	r1, [r4, #0]
 8017620:	6054      	str	r4, [r2, #4]
 8017622:	e7ca      	b.n	80175ba <_free_r+0x26>
 8017624:	b003      	add	sp, #12
 8017626:	bd30      	pop	{r4, r5, pc}
 8017628:	200073a4 	.word	0x200073a4

0801762c <rshift>:
 801762c:	6903      	ldr	r3, [r0, #16]
 801762e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017636:	ea4f 1261 	mov.w	r2, r1, asr #5
 801763a:	f100 0414 	add.w	r4, r0, #20
 801763e:	dd45      	ble.n	80176cc <rshift+0xa0>
 8017640:	f011 011f 	ands.w	r1, r1, #31
 8017644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801764c:	d10c      	bne.n	8017668 <rshift+0x3c>
 801764e:	f100 0710 	add.w	r7, r0, #16
 8017652:	4629      	mov	r1, r5
 8017654:	42b1      	cmp	r1, r6
 8017656:	d334      	bcc.n	80176c2 <rshift+0x96>
 8017658:	1a9b      	subs	r3, r3, r2
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	1eea      	subs	r2, r5, #3
 801765e:	4296      	cmp	r6, r2
 8017660:	bf38      	it	cc
 8017662:	2300      	movcc	r3, #0
 8017664:	4423      	add	r3, r4
 8017666:	e015      	b.n	8017694 <rshift+0x68>
 8017668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801766c:	f1c1 0820 	rsb	r8, r1, #32
 8017670:	40cf      	lsrs	r7, r1
 8017672:	f105 0e04 	add.w	lr, r5, #4
 8017676:	46a1      	mov	r9, r4
 8017678:	4576      	cmp	r6, lr
 801767a:	46f4      	mov	ip, lr
 801767c:	d815      	bhi.n	80176aa <rshift+0x7e>
 801767e:	1a9a      	subs	r2, r3, r2
 8017680:	0092      	lsls	r2, r2, #2
 8017682:	3a04      	subs	r2, #4
 8017684:	3501      	adds	r5, #1
 8017686:	42ae      	cmp	r6, r5
 8017688:	bf38      	it	cc
 801768a:	2200      	movcc	r2, #0
 801768c:	18a3      	adds	r3, r4, r2
 801768e:	50a7      	str	r7, [r4, r2]
 8017690:	b107      	cbz	r7, 8017694 <rshift+0x68>
 8017692:	3304      	adds	r3, #4
 8017694:	1b1a      	subs	r2, r3, r4
 8017696:	42a3      	cmp	r3, r4
 8017698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801769c:	bf08      	it	eq
 801769e:	2300      	moveq	r3, #0
 80176a0:	6102      	str	r2, [r0, #16]
 80176a2:	bf08      	it	eq
 80176a4:	6143      	streq	r3, [r0, #20]
 80176a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176aa:	f8dc c000 	ldr.w	ip, [ip]
 80176ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80176b2:	ea4c 0707 	orr.w	r7, ip, r7
 80176b6:	f849 7b04 	str.w	r7, [r9], #4
 80176ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80176be:	40cf      	lsrs	r7, r1
 80176c0:	e7da      	b.n	8017678 <rshift+0x4c>
 80176c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80176c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80176ca:	e7c3      	b.n	8017654 <rshift+0x28>
 80176cc:	4623      	mov	r3, r4
 80176ce:	e7e1      	b.n	8017694 <rshift+0x68>

080176d0 <__hexdig_fun>:
 80176d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80176d4:	2b09      	cmp	r3, #9
 80176d6:	d802      	bhi.n	80176de <__hexdig_fun+0xe>
 80176d8:	3820      	subs	r0, #32
 80176da:	b2c0      	uxtb	r0, r0
 80176dc:	4770      	bx	lr
 80176de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80176e2:	2b05      	cmp	r3, #5
 80176e4:	d801      	bhi.n	80176ea <__hexdig_fun+0x1a>
 80176e6:	3847      	subs	r0, #71	; 0x47
 80176e8:	e7f7      	b.n	80176da <__hexdig_fun+0xa>
 80176ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80176ee:	2b05      	cmp	r3, #5
 80176f0:	d801      	bhi.n	80176f6 <__hexdig_fun+0x26>
 80176f2:	3827      	subs	r0, #39	; 0x27
 80176f4:	e7f1      	b.n	80176da <__hexdig_fun+0xa>
 80176f6:	2000      	movs	r0, #0
 80176f8:	4770      	bx	lr
	...

080176fc <__gethex>:
 80176fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017700:	4617      	mov	r7, r2
 8017702:	680a      	ldr	r2, [r1, #0]
 8017704:	b085      	sub	sp, #20
 8017706:	f102 0b02 	add.w	fp, r2, #2
 801770a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801770e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017712:	4681      	mov	r9, r0
 8017714:	468a      	mov	sl, r1
 8017716:	9302      	str	r3, [sp, #8]
 8017718:	32fe      	adds	r2, #254	; 0xfe
 801771a:	eb02 030b 	add.w	r3, r2, fp
 801771e:	46d8      	mov	r8, fp
 8017720:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8017724:	9301      	str	r3, [sp, #4]
 8017726:	2830      	cmp	r0, #48	; 0x30
 8017728:	d0f7      	beq.n	801771a <__gethex+0x1e>
 801772a:	f7ff ffd1 	bl	80176d0 <__hexdig_fun>
 801772e:	4604      	mov	r4, r0
 8017730:	2800      	cmp	r0, #0
 8017732:	d138      	bne.n	80177a6 <__gethex+0xaa>
 8017734:	49a7      	ldr	r1, [pc, #668]	; (80179d4 <__gethex+0x2d8>)
 8017736:	2201      	movs	r2, #1
 8017738:	4640      	mov	r0, r8
 801773a:	f7fe ff98 	bl	801666e <strncmp>
 801773e:	4606      	mov	r6, r0
 8017740:	2800      	cmp	r0, #0
 8017742:	d169      	bne.n	8017818 <__gethex+0x11c>
 8017744:	f898 0001 	ldrb.w	r0, [r8, #1]
 8017748:	465d      	mov	r5, fp
 801774a:	f7ff ffc1 	bl	80176d0 <__hexdig_fun>
 801774e:	2800      	cmp	r0, #0
 8017750:	d064      	beq.n	801781c <__gethex+0x120>
 8017752:	465a      	mov	r2, fp
 8017754:	7810      	ldrb	r0, [r2, #0]
 8017756:	2830      	cmp	r0, #48	; 0x30
 8017758:	4690      	mov	r8, r2
 801775a:	f102 0201 	add.w	r2, r2, #1
 801775e:	d0f9      	beq.n	8017754 <__gethex+0x58>
 8017760:	f7ff ffb6 	bl	80176d0 <__hexdig_fun>
 8017764:	2301      	movs	r3, #1
 8017766:	fab0 f480 	clz	r4, r0
 801776a:	0964      	lsrs	r4, r4, #5
 801776c:	465e      	mov	r6, fp
 801776e:	9301      	str	r3, [sp, #4]
 8017770:	4642      	mov	r2, r8
 8017772:	4615      	mov	r5, r2
 8017774:	3201      	adds	r2, #1
 8017776:	7828      	ldrb	r0, [r5, #0]
 8017778:	f7ff ffaa 	bl	80176d0 <__hexdig_fun>
 801777c:	2800      	cmp	r0, #0
 801777e:	d1f8      	bne.n	8017772 <__gethex+0x76>
 8017780:	4994      	ldr	r1, [pc, #592]	; (80179d4 <__gethex+0x2d8>)
 8017782:	2201      	movs	r2, #1
 8017784:	4628      	mov	r0, r5
 8017786:	f7fe ff72 	bl	801666e <strncmp>
 801778a:	b978      	cbnz	r0, 80177ac <__gethex+0xb0>
 801778c:	b946      	cbnz	r6, 80177a0 <__gethex+0xa4>
 801778e:	1c6e      	adds	r6, r5, #1
 8017790:	4632      	mov	r2, r6
 8017792:	4615      	mov	r5, r2
 8017794:	3201      	adds	r2, #1
 8017796:	7828      	ldrb	r0, [r5, #0]
 8017798:	f7ff ff9a 	bl	80176d0 <__hexdig_fun>
 801779c:	2800      	cmp	r0, #0
 801779e:	d1f8      	bne.n	8017792 <__gethex+0x96>
 80177a0:	1b73      	subs	r3, r6, r5
 80177a2:	009e      	lsls	r6, r3, #2
 80177a4:	e004      	b.n	80177b0 <__gethex+0xb4>
 80177a6:	2400      	movs	r4, #0
 80177a8:	4626      	mov	r6, r4
 80177aa:	e7e1      	b.n	8017770 <__gethex+0x74>
 80177ac:	2e00      	cmp	r6, #0
 80177ae:	d1f7      	bne.n	80177a0 <__gethex+0xa4>
 80177b0:	782b      	ldrb	r3, [r5, #0]
 80177b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80177b6:	2b50      	cmp	r3, #80	; 0x50
 80177b8:	d13d      	bne.n	8017836 <__gethex+0x13a>
 80177ba:	786b      	ldrb	r3, [r5, #1]
 80177bc:	2b2b      	cmp	r3, #43	; 0x2b
 80177be:	d02f      	beq.n	8017820 <__gethex+0x124>
 80177c0:	2b2d      	cmp	r3, #45	; 0x2d
 80177c2:	d031      	beq.n	8017828 <__gethex+0x12c>
 80177c4:	1c69      	adds	r1, r5, #1
 80177c6:	f04f 0b00 	mov.w	fp, #0
 80177ca:	7808      	ldrb	r0, [r1, #0]
 80177cc:	f7ff ff80 	bl	80176d0 <__hexdig_fun>
 80177d0:	1e42      	subs	r2, r0, #1
 80177d2:	b2d2      	uxtb	r2, r2
 80177d4:	2a18      	cmp	r2, #24
 80177d6:	d82e      	bhi.n	8017836 <__gethex+0x13a>
 80177d8:	f1a0 0210 	sub.w	r2, r0, #16
 80177dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80177e0:	f7ff ff76 	bl	80176d0 <__hexdig_fun>
 80177e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80177e8:	fa5f fc8c 	uxtb.w	ip, ip
 80177ec:	f1bc 0f18 	cmp.w	ip, #24
 80177f0:	d91d      	bls.n	801782e <__gethex+0x132>
 80177f2:	f1bb 0f00 	cmp.w	fp, #0
 80177f6:	d000      	beq.n	80177fa <__gethex+0xfe>
 80177f8:	4252      	negs	r2, r2
 80177fa:	4416      	add	r6, r2
 80177fc:	f8ca 1000 	str.w	r1, [sl]
 8017800:	b1dc      	cbz	r4, 801783a <__gethex+0x13e>
 8017802:	9b01      	ldr	r3, [sp, #4]
 8017804:	2b00      	cmp	r3, #0
 8017806:	bf14      	ite	ne
 8017808:	f04f 0800 	movne.w	r8, #0
 801780c:	f04f 0806 	moveq.w	r8, #6
 8017810:	4640      	mov	r0, r8
 8017812:	b005      	add	sp, #20
 8017814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017818:	4645      	mov	r5, r8
 801781a:	4626      	mov	r6, r4
 801781c:	2401      	movs	r4, #1
 801781e:	e7c7      	b.n	80177b0 <__gethex+0xb4>
 8017820:	f04f 0b00 	mov.w	fp, #0
 8017824:	1ca9      	adds	r1, r5, #2
 8017826:	e7d0      	b.n	80177ca <__gethex+0xce>
 8017828:	f04f 0b01 	mov.w	fp, #1
 801782c:	e7fa      	b.n	8017824 <__gethex+0x128>
 801782e:	230a      	movs	r3, #10
 8017830:	fb03 0002 	mla	r0, r3, r2, r0
 8017834:	e7d0      	b.n	80177d8 <__gethex+0xdc>
 8017836:	4629      	mov	r1, r5
 8017838:	e7e0      	b.n	80177fc <__gethex+0x100>
 801783a:	eba5 0308 	sub.w	r3, r5, r8
 801783e:	3b01      	subs	r3, #1
 8017840:	4621      	mov	r1, r4
 8017842:	2b07      	cmp	r3, #7
 8017844:	dc0a      	bgt.n	801785c <__gethex+0x160>
 8017846:	4648      	mov	r0, r9
 8017848:	f000 fb0e 	bl	8017e68 <_Balloc>
 801784c:	4604      	mov	r4, r0
 801784e:	b940      	cbnz	r0, 8017862 <__gethex+0x166>
 8017850:	4b61      	ldr	r3, [pc, #388]	; (80179d8 <__gethex+0x2dc>)
 8017852:	4602      	mov	r2, r0
 8017854:	21e4      	movs	r1, #228	; 0xe4
 8017856:	4861      	ldr	r0, [pc, #388]	; (80179dc <__gethex+0x2e0>)
 8017858:	f001 fe0a 	bl	8019470 <__assert_func>
 801785c:	3101      	adds	r1, #1
 801785e:	105b      	asrs	r3, r3, #1
 8017860:	e7ef      	b.n	8017842 <__gethex+0x146>
 8017862:	f100 0a14 	add.w	sl, r0, #20
 8017866:	2300      	movs	r3, #0
 8017868:	495a      	ldr	r1, [pc, #360]	; (80179d4 <__gethex+0x2d8>)
 801786a:	f8cd a004 	str.w	sl, [sp, #4]
 801786e:	469b      	mov	fp, r3
 8017870:	45a8      	cmp	r8, r5
 8017872:	d342      	bcc.n	80178fa <__gethex+0x1fe>
 8017874:	9801      	ldr	r0, [sp, #4]
 8017876:	f840 bb04 	str.w	fp, [r0], #4
 801787a:	eba0 000a 	sub.w	r0, r0, sl
 801787e:	1080      	asrs	r0, r0, #2
 8017880:	6120      	str	r0, [r4, #16]
 8017882:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017886:	4658      	mov	r0, fp
 8017888:	f000 fbe0 	bl	801804c <__hi0bits>
 801788c:	683d      	ldr	r5, [r7, #0]
 801788e:	eba8 0000 	sub.w	r0, r8, r0
 8017892:	42a8      	cmp	r0, r5
 8017894:	dd59      	ble.n	801794a <__gethex+0x24e>
 8017896:	eba0 0805 	sub.w	r8, r0, r5
 801789a:	4641      	mov	r1, r8
 801789c:	4620      	mov	r0, r4
 801789e:	f000 ff6f 	bl	8018780 <__any_on>
 80178a2:	4683      	mov	fp, r0
 80178a4:	b1b8      	cbz	r0, 80178d6 <__gethex+0x1da>
 80178a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80178aa:	1159      	asrs	r1, r3, #5
 80178ac:	f003 021f 	and.w	r2, r3, #31
 80178b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80178b4:	f04f 0b01 	mov.w	fp, #1
 80178b8:	fa0b f202 	lsl.w	r2, fp, r2
 80178bc:	420a      	tst	r2, r1
 80178be:	d00a      	beq.n	80178d6 <__gethex+0x1da>
 80178c0:	455b      	cmp	r3, fp
 80178c2:	dd06      	ble.n	80178d2 <__gethex+0x1d6>
 80178c4:	f1a8 0102 	sub.w	r1, r8, #2
 80178c8:	4620      	mov	r0, r4
 80178ca:	f000 ff59 	bl	8018780 <__any_on>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d138      	bne.n	8017944 <__gethex+0x248>
 80178d2:	f04f 0b02 	mov.w	fp, #2
 80178d6:	4641      	mov	r1, r8
 80178d8:	4620      	mov	r0, r4
 80178da:	f7ff fea7 	bl	801762c <rshift>
 80178de:	4446      	add	r6, r8
 80178e0:	68bb      	ldr	r3, [r7, #8]
 80178e2:	42b3      	cmp	r3, r6
 80178e4:	da41      	bge.n	801796a <__gethex+0x26e>
 80178e6:	4621      	mov	r1, r4
 80178e8:	4648      	mov	r0, r9
 80178ea:	f000 fafd 	bl	8017ee8 <_Bfree>
 80178ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178f0:	2300      	movs	r3, #0
 80178f2:	6013      	str	r3, [r2, #0]
 80178f4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80178f8:	e78a      	b.n	8017810 <__gethex+0x114>
 80178fa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80178fe:	2a2e      	cmp	r2, #46	; 0x2e
 8017900:	d014      	beq.n	801792c <__gethex+0x230>
 8017902:	2b20      	cmp	r3, #32
 8017904:	d106      	bne.n	8017914 <__gethex+0x218>
 8017906:	9b01      	ldr	r3, [sp, #4]
 8017908:	f843 bb04 	str.w	fp, [r3], #4
 801790c:	f04f 0b00 	mov.w	fp, #0
 8017910:	9301      	str	r3, [sp, #4]
 8017912:	465b      	mov	r3, fp
 8017914:	7828      	ldrb	r0, [r5, #0]
 8017916:	9303      	str	r3, [sp, #12]
 8017918:	f7ff feda 	bl	80176d0 <__hexdig_fun>
 801791c:	9b03      	ldr	r3, [sp, #12]
 801791e:	f000 000f 	and.w	r0, r0, #15
 8017922:	4098      	lsls	r0, r3
 8017924:	ea4b 0b00 	orr.w	fp, fp, r0
 8017928:	3304      	adds	r3, #4
 801792a:	e7a1      	b.n	8017870 <__gethex+0x174>
 801792c:	45a8      	cmp	r8, r5
 801792e:	d8e8      	bhi.n	8017902 <__gethex+0x206>
 8017930:	2201      	movs	r2, #1
 8017932:	4628      	mov	r0, r5
 8017934:	9303      	str	r3, [sp, #12]
 8017936:	f7fe fe9a 	bl	801666e <strncmp>
 801793a:	4926      	ldr	r1, [pc, #152]	; (80179d4 <__gethex+0x2d8>)
 801793c:	9b03      	ldr	r3, [sp, #12]
 801793e:	2800      	cmp	r0, #0
 8017940:	d1df      	bne.n	8017902 <__gethex+0x206>
 8017942:	e795      	b.n	8017870 <__gethex+0x174>
 8017944:	f04f 0b03 	mov.w	fp, #3
 8017948:	e7c5      	b.n	80178d6 <__gethex+0x1da>
 801794a:	da0b      	bge.n	8017964 <__gethex+0x268>
 801794c:	eba5 0800 	sub.w	r8, r5, r0
 8017950:	4621      	mov	r1, r4
 8017952:	4642      	mov	r2, r8
 8017954:	4648      	mov	r0, r9
 8017956:	f000 fce1 	bl	801831c <__lshift>
 801795a:	eba6 0608 	sub.w	r6, r6, r8
 801795e:	4604      	mov	r4, r0
 8017960:	f100 0a14 	add.w	sl, r0, #20
 8017964:	f04f 0b00 	mov.w	fp, #0
 8017968:	e7ba      	b.n	80178e0 <__gethex+0x1e4>
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	42b3      	cmp	r3, r6
 801796e:	dd73      	ble.n	8017a58 <__gethex+0x35c>
 8017970:	1b9e      	subs	r6, r3, r6
 8017972:	42b5      	cmp	r5, r6
 8017974:	dc34      	bgt.n	80179e0 <__gethex+0x2e4>
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	2b02      	cmp	r3, #2
 801797a:	d023      	beq.n	80179c4 <__gethex+0x2c8>
 801797c:	2b03      	cmp	r3, #3
 801797e:	d025      	beq.n	80179cc <__gethex+0x2d0>
 8017980:	2b01      	cmp	r3, #1
 8017982:	d115      	bne.n	80179b0 <__gethex+0x2b4>
 8017984:	42b5      	cmp	r5, r6
 8017986:	d113      	bne.n	80179b0 <__gethex+0x2b4>
 8017988:	2d01      	cmp	r5, #1
 801798a:	d10b      	bne.n	80179a4 <__gethex+0x2a8>
 801798c:	9a02      	ldr	r2, [sp, #8]
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	6013      	str	r3, [r2, #0]
 8017992:	2301      	movs	r3, #1
 8017994:	6123      	str	r3, [r4, #16]
 8017996:	f8ca 3000 	str.w	r3, [sl]
 801799a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801799c:	f04f 0862 	mov.w	r8, #98	; 0x62
 80179a0:	601c      	str	r4, [r3, #0]
 80179a2:	e735      	b.n	8017810 <__gethex+0x114>
 80179a4:	1e69      	subs	r1, r5, #1
 80179a6:	4620      	mov	r0, r4
 80179a8:	f000 feea 	bl	8018780 <__any_on>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	d1ed      	bne.n	801798c <__gethex+0x290>
 80179b0:	4621      	mov	r1, r4
 80179b2:	4648      	mov	r0, r9
 80179b4:	f000 fa98 	bl	8017ee8 <_Bfree>
 80179b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80179ba:	2300      	movs	r3, #0
 80179bc:	6013      	str	r3, [r2, #0]
 80179be:	f04f 0850 	mov.w	r8, #80	; 0x50
 80179c2:	e725      	b.n	8017810 <__gethex+0x114>
 80179c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d1f2      	bne.n	80179b0 <__gethex+0x2b4>
 80179ca:	e7df      	b.n	801798c <__gethex+0x290>
 80179cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d1dc      	bne.n	801798c <__gethex+0x290>
 80179d2:	e7ed      	b.n	80179b0 <__gethex+0x2b4>
 80179d4:	0801a968 	.word	0x0801a968
 80179d8:	0801aa7b 	.word	0x0801aa7b
 80179dc:	0801aa8c 	.word	0x0801aa8c
 80179e0:	f106 38ff 	add.w	r8, r6, #4294967295
 80179e4:	f1bb 0f00 	cmp.w	fp, #0
 80179e8:	d133      	bne.n	8017a52 <__gethex+0x356>
 80179ea:	f1b8 0f00 	cmp.w	r8, #0
 80179ee:	d004      	beq.n	80179fa <__gethex+0x2fe>
 80179f0:	4641      	mov	r1, r8
 80179f2:	4620      	mov	r0, r4
 80179f4:	f000 fec4 	bl	8018780 <__any_on>
 80179f8:	4683      	mov	fp, r0
 80179fa:	ea4f 1268 	mov.w	r2, r8, asr #5
 80179fe:	2301      	movs	r3, #1
 8017a00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017a04:	f008 081f 	and.w	r8, r8, #31
 8017a08:	fa03 f308 	lsl.w	r3, r3, r8
 8017a0c:	4213      	tst	r3, r2
 8017a0e:	4631      	mov	r1, r6
 8017a10:	4620      	mov	r0, r4
 8017a12:	bf18      	it	ne
 8017a14:	f04b 0b02 	orrne.w	fp, fp, #2
 8017a18:	1bad      	subs	r5, r5, r6
 8017a1a:	f7ff fe07 	bl	801762c <rshift>
 8017a1e:	687e      	ldr	r6, [r7, #4]
 8017a20:	f04f 0802 	mov.w	r8, #2
 8017a24:	f1bb 0f00 	cmp.w	fp, #0
 8017a28:	d04a      	beq.n	8017ac0 <__gethex+0x3c4>
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	2b02      	cmp	r3, #2
 8017a2e:	d016      	beq.n	8017a5e <__gethex+0x362>
 8017a30:	2b03      	cmp	r3, #3
 8017a32:	d018      	beq.n	8017a66 <__gethex+0x36a>
 8017a34:	2b01      	cmp	r3, #1
 8017a36:	d109      	bne.n	8017a4c <__gethex+0x350>
 8017a38:	f01b 0f02 	tst.w	fp, #2
 8017a3c:	d006      	beq.n	8017a4c <__gethex+0x350>
 8017a3e:	f8da 3000 	ldr.w	r3, [sl]
 8017a42:	ea4b 0b03 	orr.w	fp, fp, r3
 8017a46:	f01b 0f01 	tst.w	fp, #1
 8017a4a:	d10f      	bne.n	8017a6c <__gethex+0x370>
 8017a4c:	f048 0810 	orr.w	r8, r8, #16
 8017a50:	e036      	b.n	8017ac0 <__gethex+0x3c4>
 8017a52:	f04f 0b01 	mov.w	fp, #1
 8017a56:	e7d0      	b.n	80179fa <__gethex+0x2fe>
 8017a58:	f04f 0801 	mov.w	r8, #1
 8017a5c:	e7e2      	b.n	8017a24 <__gethex+0x328>
 8017a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a60:	f1c3 0301 	rsb	r3, r3, #1
 8017a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d0ef      	beq.n	8017a4c <__gethex+0x350>
 8017a6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017a70:	f104 0214 	add.w	r2, r4, #20
 8017a74:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8017a78:	9301      	str	r3, [sp, #4]
 8017a7a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017a7e:	2300      	movs	r3, #0
 8017a80:	4694      	mov	ip, r2
 8017a82:	f852 1b04 	ldr.w	r1, [r2], #4
 8017a86:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017a8a:	d01e      	beq.n	8017aca <__gethex+0x3ce>
 8017a8c:	3101      	adds	r1, #1
 8017a8e:	f8cc 1000 	str.w	r1, [ip]
 8017a92:	f1b8 0f02 	cmp.w	r8, #2
 8017a96:	f104 0214 	add.w	r2, r4, #20
 8017a9a:	d13d      	bne.n	8017b18 <__gethex+0x41c>
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	3b01      	subs	r3, #1
 8017aa0:	42ab      	cmp	r3, r5
 8017aa2:	d10b      	bne.n	8017abc <__gethex+0x3c0>
 8017aa4:	1169      	asrs	r1, r5, #5
 8017aa6:	2301      	movs	r3, #1
 8017aa8:	f005 051f 	and.w	r5, r5, #31
 8017aac:	fa03 f505 	lsl.w	r5, r3, r5
 8017ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017ab4:	421d      	tst	r5, r3
 8017ab6:	bf18      	it	ne
 8017ab8:	f04f 0801 	movne.w	r8, #1
 8017abc:	f048 0820 	orr.w	r8, r8, #32
 8017ac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ac2:	601c      	str	r4, [r3, #0]
 8017ac4:	9b02      	ldr	r3, [sp, #8]
 8017ac6:	601e      	str	r6, [r3, #0]
 8017ac8:	e6a2      	b.n	8017810 <__gethex+0x114>
 8017aca:	4290      	cmp	r0, r2
 8017acc:	f842 3c04 	str.w	r3, [r2, #-4]
 8017ad0:	d8d6      	bhi.n	8017a80 <__gethex+0x384>
 8017ad2:	68a2      	ldr	r2, [r4, #8]
 8017ad4:	4593      	cmp	fp, r2
 8017ad6:	db17      	blt.n	8017b08 <__gethex+0x40c>
 8017ad8:	6861      	ldr	r1, [r4, #4]
 8017ada:	4648      	mov	r0, r9
 8017adc:	3101      	adds	r1, #1
 8017ade:	f000 f9c3 	bl	8017e68 <_Balloc>
 8017ae2:	4682      	mov	sl, r0
 8017ae4:	b918      	cbnz	r0, 8017aee <__gethex+0x3f2>
 8017ae6:	4b1b      	ldr	r3, [pc, #108]	; (8017b54 <__gethex+0x458>)
 8017ae8:	4602      	mov	r2, r0
 8017aea:	2184      	movs	r1, #132	; 0x84
 8017aec:	e6b3      	b.n	8017856 <__gethex+0x15a>
 8017aee:	6922      	ldr	r2, [r4, #16]
 8017af0:	3202      	adds	r2, #2
 8017af2:	f104 010c 	add.w	r1, r4, #12
 8017af6:	0092      	lsls	r2, r2, #2
 8017af8:	300c      	adds	r0, #12
 8017afa:	f7fe feb2 	bl	8016862 <memcpy>
 8017afe:	4621      	mov	r1, r4
 8017b00:	4648      	mov	r0, r9
 8017b02:	f000 f9f1 	bl	8017ee8 <_Bfree>
 8017b06:	4654      	mov	r4, sl
 8017b08:	6922      	ldr	r2, [r4, #16]
 8017b0a:	1c51      	adds	r1, r2, #1
 8017b0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017b10:	6121      	str	r1, [r4, #16]
 8017b12:	2101      	movs	r1, #1
 8017b14:	6151      	str	r1, [r2, #20]
 8017b16:	e7bc      	b.n	8017a92 <__gethex+0x396>
 8017b18:	6921      	ldr	r1, [r4, #16]
 8017b1a:	4559      	cmp	r1, fp
 8017b1c:	dd0b      	ble.n	8017b36 <__gethex+0x43a>
 8017b1e:	2101      	movs	r1, #1
 8017b20:	4620      	mov	r0, r4
 8017b22:	f7ff fd83 	bl	801762c <rshift>
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	3601      	adds	r6, #1
 8017b2a:	42b3      	cmp	r3, r6
 8017b2c:	f6ff aedb 	blt.w	80178e6 <__gethex+0x1ea>
 8017b30:	f04f 0801 	mov.w	r8, #1
 8017b34:	e7c2      	b.n	8017abc <__gethex+0x3c0>
 8017b36:	f015 051f 	ands.w	r5, r5, #31
 8017b3a:	d0f9      	beq.n	8017b30 <__gethex+0x434>
 8017b3c:	9b01      	ldr	r3, [sp, #4]
 8017b3e:	441a      	add	r2, r3
 8017b40:	f1c5 0520 	rsb	r5, r5, #32
 8017b44:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8017b48:	f000 fa80 	bl	801804c <__hi0bits>
 8017b4c:	42a8      	cmp	r0, r5
 8017b4e:	dbe6      	blt.n	8017b1e <__gethex+0x422>
 8017b50:	e7ee      	b.n	8017b30 <__gethex+0x434>
 8017b52:	bf00      	nop
 8017b54:	0801aa7b 	.word	0x0801aa7b

08017b58 <L_shift>:
 8017b58:	f1c2 0208 	rsb	r2, r2, #8
 8017b5c:	0092      	lsls	r2, r2, #2
 8017b5e:	b570      	push	{r4, r5, r6, lr}
 8017b60:	f1c2 0620 	rsb	r6, r2, #32
 8017b64:	6843      	ldr	r3, [r0, #4]
 8017b66:	6804      	ldr	r4, [r0, #0]
 8017b68:	fa03 f506 	lsl.w	r5, r3, r6
 8017b6c:	432c      	orrs	r4, r5
 8017b6e:	40d3      	lsrs	r3, r2
 8017b70:	6004      	str	r4, [r0, #0]
 8017b72:	f840 3f04 	str.w	r3, [r0, #4]!
 8017b76:	4288      	cmp	r0, r1
 8017b78:	d3f4      	bcc.n	8017b64 <L_shift+0xc>
 8017b7a:	bd70      	pop	{r4, r5, r6, pc}

08017b7c <__match>:
 8017b7c:	b530      	push	{r4, r5, lr}
 8017b7e:	6803      	ldr	r3, [r0, #0]
 8017b80:	3301      	adds	r3, #1
 8017b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b86:	b914      	cbnz	r4, 8017b8e <__match+0x12>
 8017b88:	6003      	str	r3, [r0, #0]
 8017b8a:	2001      	movs	r0, #1
 8017b8c:	bd30      	pop	{r4, r5, pc}
 8017b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017b96:	2d19      	cmp	r5, #25
 8017b98:	bf98      	it	ls
 8017b9a:	3220      	addls	r2, #32
 8017b9c:	42a2      	cmp	r2, r4
 8017b9e:	d0f0      	beq.n	8017b82 <__match+0x6>
 8017ba0:	2000      	movs	r0, #0
 8017ba2:	e7f3      	b.n	8017b8c <__match+0x10>

08017ba4 <__hexnan>:
 8017ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ba8:	680b      	ldr	r3, [r1, #0]
 8017baa:	6801      	ldr	r1, [r0, #0]
 8017bac:	115e      	asrs	r6, r3, #5
 8017bae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017bb2:	f013 031f 	ands.w	r3, r3, #31
 8017bb6:	b087      	sub	sp, #28
 8017bb8:	bf18      	it	ne
 8017bba:	3604      	addne	r6, #4
 8017bbc:	2500      	movs	r5, #0
 8017bbe:	1f37      	subs	r7, r6, #4
 8017bc0:	4682      	mov	sl, r0
 8017bc2:	4690      	mov	r8, r2
 8017bc4:	9301      	str	r3, [sp, #4]
 8017bc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8017bca:	46b9      	mov	r9, r7
 8017bcc:	463c      	mov	r4, r7
 8017bce:	9502      	str	r5, [sp, #8]
 8017bd0:	46ab      	mov	fp, r5
 8017bd2:	784a      	ldrb	r2, [r1, #1]
 8017bd4:	1c4b      	adds	r3, r1, #1
 8017bd6:	9303      	str	r3, [sp, #12]
 8017bd8:	b342      	cbz	r2, 8017c2c <__hexnan+0x88>
 8017bda:	4610      	mov	r0, r2
 8017bdc:	9105      	str	r1, [sp, #20]
 8017bde:	9204      	str	r2, [sp, #16]
 8017be0:	f7ff fd76 	bl	80176d0 <__hexdig_fun>
 8017be4:	2800      	cmp	r0, #0
 8017be6:	d14f      	bne.n	8017c88 <__hexnan+0xe4>
 8017be8:	9a04      	ldr	r2, [sp, #16]
 8017bea:	9905      	ldr	r1, [sp, #20]
 8017bec:	2a20      	cmp	r2, #32
 8017bee:	d818      	bhi.n	8017c22 <__hexnan+0x7e>
 8017bf0:	9b02      	ldr	r3, [sp, #8]
 8017bf2:	459b      	cmp	fp, r3
 8017bf4:	dd13      	ble.n	8017c1e <__hexnan+0x7a>
 8017bf6:	454c      	cmp	r4, r9
 8017bf8:	d206      	bcs.n	8017c08 <__hexnan+0x64>
 8017bfa:	2d07      	cmp	r5, #7
 8017bfc:	dc04      	bgt.n	8017c08 <__hexnan+0x64>
 8017bfe:	462a      	mov	r2, r5
 8017c00:	4649      	mov	r1, r9
 8017c02:	4620      	mov	r0, r4
 8017c04:	f7ff ffa8 	bl	8017b58 <L_shift>
 8017c08:	4544      	cmp	r4, r8
 8017c0a:	d950      	bls.n	8017cae <__hexnan+0x10a>
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	f1a4 0904 	sub.w	r9, r4, #4
 8017c12:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c16:	f8cd b008 	str.w	fp, [sp, #8]
 8017c1a:	464c      	mov	r4, r9
 8017c1c:	461d      	mov	r5, r3
 8017c1e:	9903      	ldr	r1, [sp, #12]
 8017c20:	e7d7      	b.n	8017bd2 <__hexnan+0x2e>
 8017c22:	2a29      	cmp	r2, #41	; 0x29
 8017c24:	d155      	bne.n	8017cd2 <__hexnan+0x12e>
 8017c26:	3102      	adds	r1, #2
 8017c28:	f8ca 1000 	str.w	r1, [sl]
 8017c2c:	f1bb 0f00 	cmp.w	fp, #0
 8017c30:	d04f      	beq.n	8017cd2 <__hexnan+0x12e>
 8017c32:	454c      	cmp	r4, r9
 8017c34:	d206      	bcs.n	8017c44 <__hexnan+0xa0>
 8017c36:	2d07      	cmp	r5, #7
 8017c38:	dc04      	bgt.n	8017c44 <__hexnan+0xa0>
 8017c3a:	462a      	mov	r2, r5
 8017c3c:	4649      	mov	r1, r9
 8017c3e:	4620      	mov	r0, r4
 8017c40:	f7ff ff8a 	bl	8017b58 <L_shift>
 8017c44:	4544      	cmp	r4, r8
 8017c46:	d934      	bls.n	8017cb2 <__hexnan+0x10e>
 8017c48:	f1a8 0204 	sub.w	r2, r8, #4
 8017c4c:	4623      	mov	r3, r4
 8017c4e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017c52:	f842 1f04 	str.w	r1, [r2, #4]!
 8017c56:	429f      	cmp	r7, r3
 8017c58:	d2f9      	bcs.n	8017c4e <__hexnan+0xaa>
 8017c5a:	1b3b      	subs	r3, r7, r4
 8017c5c:	f023 0303 	bic.w	r3, r3, #3
 8017c60:	3304      	adds	r3, #4
 8017c62:	3e03      	subs	r6, #3
 8017c64:	3401      	adds	r4, #1
 8017c66:	42a6      	cmp	r6, r4
 8017c68:	bf38      	it	cc
 8017c6a:	2304      	movcc	r3, #4
 8017c6c:	4443      	add	r3, r8
 8017c6e:	2200      	movs	r2, #0
 8017c70:	f843 2b04 	str.w	r2, [r3], #4
 8017c74:	429f      	cmp	r7, r3
 8017c76:	d2fb      	bcs.n	8017c70 <__hexnan+0xcc>
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	b91b      	cbnz	r3, 8017c84 <__hexnan+0xe0>
 8017c7c:	4547      	cmp	r7, r8
 8017c7e:	d126      	bne.n	8017cce <__hexnan+0x12a>
 8017c80:	2301      	movs	r3, #1
 8017c82:	603b      	str	r3, [r7, #0]
 8017c84:	2005      	movs	r0, #5
 8017c86:	e025      	b.n	8017cd4 <__hexnan+0x130>
 8017c88:	3501      	adds	r5, #1
 8017c8a:	2d08      	cmp	r5, #8
 8017c8c:	f10b 0b01 	add.w	fp, fp, #1
 8017c90:	dd06      	ble.n	8017ca0 <__hexnan+0xfc>
 8017c92:	4544      	cmp	r4, r8
 8017c94:	d9c3      	bls.n	8017c1e <__hexnan+0x7a>
 8017c96:	2300      	movs	r3, #0
 8017c98:	f844 3c04 	str.w	r3, [r4, #-4]
 8017c9c:	2501      	movs	r5, #1
 8017c9e:	3c04      	subs	r4, #4
 8017ca0:	6822      	ldr	r2, [r4, #0]
 8017ca2:	f000 000f 	and.w	r0, r0, #15
 8017ca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017caa:	6020      	str	r0, [r4, #0]
 8017cac:	e7b7      	b.n	8017c1e <__hexnan+0x7a>
 8017cae:	2508      	movs	r5, #8
 8017cb0:	e7b5      	b.n	8017c1e <__hexnan+0x7a>
 8017cb2:	9b01      	ldr	r3, [sp, #4]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d0df      	beq.n	8017c78 <__hexnan+0xd4>
 8017cb8:	f1c3 0320 	rsb	r3, r3, #32
 8017cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8017cc0:	40da      	lsrs	r2, r3
 8017cc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017cc6:	4013      	ands	r3, r2
 8017cc8:	f846 3c04 	str.w	r3, [r6, #-4]
 8017ccc:	e7d4      	b.n	8017c78 <__hexnan+0xd4>
 8017cce:	3f04      	subs	r7, #4
 8017cd0:	e7d2      	b.n	8017c78 <__hexnan+0xd4>
 8017cd2:	2004      	movs	r0, #4
 8017cd4:	b007      	add	sp, #28
 8017cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017cdc <malloc>:
 8017cdc:	4b02      	ldr	r3, [pc, #8]	; (8017ce8 <malloc+0xc>)
 8017cde:	4601      	mov	r1, r0
 8017ce0:	6818      	ldr	r0, [r3, #0]
 8017ce2:	f000 b823 	b.w	8017d2c <_malloc_r>
 8017ce6:	bf00      	nop
 8017ce8:	20000330 	.word	0x20000330

08017cec <sbrk_aligned>:
 8017cec:	b570      	push	{r4, r5, r6, lr}
 8017cee:	4e0e      	ldr	r6, [pc, #56]	; (8017d28 <sbrk_aligned+0x3c>)
 8017cf0:	460c      	mov	r4, r1
 8017cf2:	6831      	ldr	r1, [r6, #0]
 8017cf4:	4605      	mov	r5, r0
 8017cf6:	b911      	cbnz	r1, 8017cfe <sbrk_aligned+0x12>
 8017cf8:	f001 fbaa 	bl	8019450 <_sbrk_r>
 8017cfc:	6030      	str	r0, [r6, #0]
 8017cfe:	4621      	mov	r1, r4
 8017d00:	4628      	mov	r0, r5
 8017d02:	f001 fba5 	bl	8019450 <_sbrk_r>
 8017d06:	1c43      	adds	r3, r0, #1
 8017d08:	d00a      	beq.n	8017d20 <sbrk_aligned+0x34>
 8017d0a:	1cc4      	adds	r4, r0, #3
 8017d0c:	f024 0403 	bic.w	r4, r4, #3
 8017d10:	42a0      	cmp	r0, r4
 8017d12:	d007      	beq.n	8017d24 <sbrk_aligned+0x38>
 8017d14:	1a21      	subs	r1, r4, r0
 8017d16:	4628      	mov	r0, r5
 8017d18:	f001 fb9a 	bl	8019450 <_sbrk_r>
 8017d1c:	3001      	adds	r0, #1
 8017d1e:	d101      	bne.n	8017d24 <sbrk_aligned+0x38>
 8017d20:	f04f 34ff 	mov.w	r4, #4294967295
 8017d24:	4620      	mov	r0, r4
 8017d26:	bd70      	pop	{r4, r5, r6, pc}
 8017d28:	200073a8 	.word	0x200073a8

08017d2c <_malloc_r>:
 8017d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d30:	1ccd      	adds	r5, r1, #3
 8017d32:	f025 0503 	bic.w	r5, r5, #3
 8017d36:	3508      	adds	r5, #8
 8017d38:	2d0c      	cmp	r5, #12
 8017d3a:	bf38      	it	cc
 8017d3c:	250c      	movcc	r5, #12
 8017d3e:	2d00      	cmp	r5, #0
 8017d40:	4607      	mov	r7, r0
 8017d42:	db01      	blt.n	8017d48 <_malloc_r+0x1c>
 8017d44:	42a9      	cmp	r1, r5
 8017d46:	d905      	bls.n	8017d54 <_malloc_r+0x28>
 8017d48:	230c      	movs	r3, #12
 8017d4a:	603b      	str	r3, [r7, #0]
 8017d4c:	2600      	movs	r6, #0
 8017d4e:	4630      	mov	r0, r6
 8017d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d54:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017e28 <_malloc_r+0xfc>
 8017d58:	f000 f87a 	bl	8017e50 <__malloc_lock>
 8017d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8017d60:	461c      	mov	r4, r3
 8017d62:	bb5c      	cbnz	r4, 8017dbc <_malloc_r+0x90>
 8017d64:	4629      	mov	r1, r5
 8017d66:	4638      	mov	r0, r7
 8017d68:	f7ff ffc0 	bl	8017cec <sbrk_aligned>
 8017d6c:	1c43      	adds	r3, r0, #1
 8017d6e:	4604      	mov	r4, r0
 8017d70:	d155      	bne.n	8017e1e <_malloc_r+0xf2>
 8017d72:	f8d8 4000 	ldr.w	r4, [r8]
 8017d76:	4626      	mov	r6, r4
 8017d78:	2e00      	cmp	r6, #0
 8017d7a:	d145      	bne.n	8017e08 <_malloc_r+0xdc>
 8017d7c:	2c00      	cmp	r4, #0
 8017d7e:	d048      	beq.n	8017e12 <_malloc_r+0xe6>
 8017d80:	6823      	ldr	r3, [r4, #0]
 8017d82:	4631      	mov	r1, r6
 8017d84:	4638      	mov	r0, r7
 8017d86:	eb04 0903 	add.w	r9, r4, r3
 8017d8a:	f001 fb61 	bl	8019450 <_sbrk_r>
 8017d8e:	4581      	cmp	r9, r0
 8017d90:	d13f      	bne.n	8017e12 <_malloc_r+0xe6>
 8017d92:	6821      	ldr	r1, [r4, #0]
 8017d94:	1a6d      	subs	r5, r5, r1
 8017d96:	4629      	mov	r1, r5
 8017d98:	4638      	mov	r0, r7
 8017d9a:	f7ff ffa7 	bl	8017cec <sbrk_aligned>
 8017d9e:	3001      	adds	r0, #1
 8017da0:	d037      	beq.n	8017e12 <_malloc_r+0xe6>
 8017da2:	6823      	ldr	r3, [r4, #0]
 8017da4:	442b      	add	r3, r5
 8017da6:	6023      	str	r3, [r4, #0]
 8017da8:	f8d8 3000 	ldr.w	r3, [r8]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d038      	beq.n	8017e22 <_malloc_r+0xf6>
 8017db0:	685a      	ldr	r2, [r3, #4]
 8017db2:	42a2      	cmp	r2, r4
 8017db4:	d12b      	bne.n	8017e0e <_malloc_r+0xe2>
 8017db6:	2200      	movs	r2, #0
 8017db8:	605a      	str	r2, [r3, #4]
 8017dba:	e00f      	b.n	8017ddc <_malloc_r+0xb0>
 8017dbc:	6822      	ldr	r2, [r4, #0]
 8017dbe:	1b52      	subs	r2, r2, r5
 8017dc0:	d41f      	bmi.n	8017e02 <_malloc_r+0xd6>
 8017dc2:	2a0b      	cmp	r2, #11
 8017dc4:	d917      	bls.n	8017df6 <_malloc_r+0xca>
 8017dc6:	1961      	adds	r1, r4, r5
 8017dc8:	42a3      	cmp	r3, r4
 8017dca:	6025      	str	r5, [r4, #0]
 8017dcc:	bf18      	it	ne
 8017dce:	6059      	strne	r1, [r3, #4]
 8017dd0:	6863      	ldr	r3, [r4, #4]
 8017dd2:	bf08      	it	eq
 8017dd4:	f8c8 1000 	streq.w	r1, [r8]
 8017dd8:	5162      	str	r2, [r4, r5]
 8017dda:	604b      	str	r3, [r1, #4]
 8017ddc:	4638      	mov	r0, r7
 8017dde:	f104 060b 	add.w	r6, r4, #11
 8017de2:	f000 f83b 	bl	8017e5c <__malloc_unlock>
 8017de6:	f026 0607 	bic.w	r6, r6, #7
 8017dea:	1d23      	adds	r3, r4, #4
 8017dec:	1af2      	subs	r2, r6, r3
 8017dee:	d0ae      	beq.n	8017d4e <_malloc_r+0x22>
 8017df0:	1b9b      	subs	r3, r3, r6
 8017df2:	50a3      	str	r3, [r4, r2]
 8017df4:	e7ab      	b.n	8017d4e <_malloc_r+0x22>
 8017df6:	42a3      	cmp	r3, r4
 8017df8:	6862      	ldr	r2, [r4, #4]
 8017dfa:	d1dd      	bne.n	8017db8 <_malloc_r+0x8c>
 8017dfc:	f8c8 2000 	str.w	r2, [r8]
 8017e00:	e7ec      	b.n	8017ddc <_malloc_r+0xb0>
 8017e02:	4623      	mov	r3, r4
 8017e04:	6864      	ldr	r4, [r4, #4]
 8017e06:	e7ac      	b.n	8017d62 <_malloc_r+0x36>
 8017e08:	4634      	mov	r4, r6
 8017e0a:	6876      	ldr	r6, [r6, #4]
 8017e0c:	e7b4      	b.n	8017d78 <_malloc_r+0x4c>
 8017e0e:	4613      	mov	r3, r2
 8017e10:	e7cc      	b.n	8017dac <_malloc_r+0x80>
 8017e12:	230c      	movs	r3, #12
 8017e14:	603b      	str	r3, [r7, #0]
 8017e16:	4638      	mov	r0, r7
 8017e18:	f000 f820 	bl	8017e5c <__malloc_unlock>
 8017e1c:	e797      	b.n	8017d4e <_malloc_r+0x22>
 8017e1e:	6025      	str	r5, [r4, #0]
 8017e20:	e7dc      	b.n	8017ddc <_malloc_r+0xb0>
 8017e22:	605b      	str	r3, [r3, #4]
 8017e24:	deff      	udf	#255	; 0xff
 8017e26:	bf00      	nop
 8017e28:	200073a4 	.word	0x200073a4

08017e2c <__ascii_mbtowc>:
 8017e2c:	b082      	sub	sp, #8
 8017e2e:	b901      	cbnz	r1, 8017e32 <__ascii_mbtowc+0x6>
 8017e30:	a901      	add	r1, sp, #4
 8017e32:	b142      	cbz	r2, 8017e46 <__ascii_mbtowc+0x1a>
 8017e34:	b14b      	cbz	r3, 8017e4a <__ascii_mbtowc+0x1e>
 8017e36:	7813      	ldrb	r3, [r2, #0]
 8017e38:	600b      	str	r3, [r1, #0]
 8017e3a:	7812      	ldrb	r2, [r2, #0]
 8017e3c:	1e10      	subs	r0, r2, #0
 8017e3e:	bf18      	it	ne
 8017e40:	2001      	movne	r0, #1
 8017e42:	b002      	add	sp, #8
 8017e44:	4770      	bx	lr
 8017e46:	4610      	mov	r0, r2
 8017e48:	e7fb      	b.n	8017e42 <__ascii_mbtowc+0x16>
 8017e4a:	f06f 0001 	mvn.w	r0, #1
 8017e4e:	e7f8      	b.n	8017e42 <__ascii_mbtowc+0x16>

08017e50 <__malloc_lock>:
 8017e50:	4801      	ldr	r0, [pc, #4]	; (8017e58 <__malloc_lock+0x8>)
 8017e52:	f7fe bcfc 	b.w	801684e <__retarget_lock_acquire_recursive>
 8017e56:	bf00      	nop
 8017e58:	200073a0 	.word	0x200073a0

08017e5c <__malloc_unlock>:
 8017e5c:	4801      	ldr	r0, [pc, #4]	; (8017e64 <__malloc_unlock+0x8>)
 8017e5e:	f7fe bcf7 	b.w	8016850 <__retarget_lock_release_recursive>
 8017e62:	bf00      	nop
 8017e64:	200073a0 	.word	0x200073a0

08017e68 <_Balloc>:
 8017e68:	b570      	push	{r4, r5, r6, lr}
 8017e6a:	69c6      	ldr	r6, [r0, #28]
 8017e6c:	4604      	mov	r4, r0
 8017e6e:	460d      	mov	r5, r1
 8017e70:	b976      	cbnz	r6, 8017e90 <_Balloc+0x28>
 8017e72:	2010      	movs	r0, #16
 8017e74:	f7ff ff32 	bl	8017cdc <malloc>
 8017e78:	4602      	mov	r2, r0
 8017e7a:	61e0      	str	r0, [r4, #28]
 8017e7c:	b920      	cbnz	r0, 8017e88 <_Balloc+0x20>
 8017e7e:	4b18      	ldr	r3, [pc, #96]	; (8017ee0 <_Balloc+0x78>)
 8017e80:	4818      	ldr	r0, [pc, #96]	; (8017ee4 <_Balloc+0x7c>)
 8017e82:	216b      	movs	r1, #107	; 0x6b
 8017e84:	f001 faf4 	bl	8019470 <__assert_func>
 8017e88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017e8c:	6006      	str	r6, [r0, #0]
 8017e8e:	60c6      	str	r6, [r0, #12]
 8017e90:	69e6      	ldr	r6, [r4, #28]
 8017e92:	68f3      	ldr	r3, [r6, #12]
 8017e94:	b183      	cbz	r3, 8017eb8 <_Balloc+0x50>
 8017e96:	69e3      	ldr	r3, [r4, #28]
 8017e98:	68db      	ldr	r3, [r3, #12]
 8017e9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017e9e:	b9b8      	cbnz	r0, 8017ed0 <_Balloc+0x68>
 8017ea0:	2101      	movs	r1, #1
 8017ea2:	fa01 f605 	lsl.w	r6, r1, r5
 8017ea6:	1d72      	adds	r2, r6, #5
 8017ea8:	0092      	lsls	r2, r2, #2
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f001 fafe 	bl	80194ac <_calloc_r>
 8017eb0:	b160      	cbz	r0, 8017ecc <_Balloc+0x64>
 8017eb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017eb6:	e00e      	b.n	8017ed6 <_Balloc+0x6e>
 8017eb8:	2221      	movs	r2, #33	; 0x21
 8017eba:	2104      	movs	r1, #4
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	f001 faf5 	bl	80194ac <_calloc_r>
 8017ec2:	69e3      	ldr	r3, [r4, #28]
 8017ec4:	60f0      	str	r0, [r6, #12]
 8017ec6:	68db      	ldr	r3, [r3, #12]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d1e4      	bne.n	8017e96 <_Balloc+0x2e>
 8017ecc:	2000      	movs	r0, #0
 8017ece:	bd70      	pop	{r4, r5, r6, pc}
 8017ed0:	6802      	ldr	r2, [r0, #0]
 8017ed2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017edc:	e7f7      	b.n	8017ece <_Balloc+0x66>
 8017ede:	bf00      	nop
 8017ee0:	0801aa0c 	.word	0x0801aa0c
 8017ee4:	0801aaec 	.word	0x0801aaec

08017ee8 <_Bfree>:
 8017ee8:	b570      	push	{r4, r5, r6, lr}
 8017eea:	69c6      	ldr	r6, [r0, #28]
 8017eec:	4605      	mov	r5, r0
 8017eee:	460c      	mov	r4, r1
 8017ef0:	b976      	cbnz	r6, 8017f10 <_Bfree+0x28>
 8017ef2:	2010      	movs	r0, #16
 8017ef4:	f7ff fef2 	bl	8017cdc <malloc>
 8017ef8:	4602      	mov	r2, r0
 8017efa:	61e8      	str	r0, [r5, #28]
 8017efc:	b920      	cbnz	r0, 8017f08 <_Bfree+0x20>
 8017efe:	4b09      	ldr	r3, [pc, #36]	; (8017f24 <_Bfree+0x3c>)
 8017f00:	4809      	ldr	r0, [pc, #36]	; (8017f28 <_Bfree+0x40>)
 8017f02:	218f      	movs	r1, #143	; 0x8f
 8017f04:	f001 fab4 	bl	8019470 <__assert_func>
 8017f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017f0c:	6006      	str	r6, [r0, #0]
 8017f0e:	60c6      	str	r6, [r0, #12]
 8017f10:	b13c      	cbz	r4, 8017f22 <_Bfree+0x3a>
 8017f12:	69eb      	ldr	r3, [r5, #28]
 8017f14:	6862      	ldr	r2, [r4, #4]
 8017f16:	68db      	ldr	r3, [r3, #12]
 8017f18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017f1c:	6021      	str	r1, [r4, #0]
 8017f1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017f22:	bd70      	pop	{r4, r5, r6, pc}
 8017f24:	0801aa0c 	.word	0x0801aa0c
 8017f28:	0801aaec 	.word	0x0801aaec

08017f2c <__multadd>:
 8017f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f30:	690d      	ldr	r5, [r1, #16]
 8017f32:	4607      	mov	r7, r0
 8017f34:	460c      	mov	r4, r1
 8017f36:	461e      	mov	r6, r3
 8017f38:	f101 0c14 	add.w	ip, r1, #20
 8017f3c:	2000      	movs	r0, #0
 8017f3e:	f8dc 3000 	ldr.w	r3, [ip]
 8017f42:	b299      	uxth	r1, r3
 8017f44:	fb02 6101 	mla	r1, r2, r1, r6
 8017f48:	0c1e      	lsrs	r6, r3, #16
 8017f4a:	0c0b      	lsrs	r3, r1, #16
 8017f4c:	fb02 3306 	mla	r3, r2, r6, r3
 8017f50:	b289      	uxth	r1, r1
 8017f52:	3001      	adds	r0, #1
 8017f54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017f58:	4285      	cmp	r5, r0
 8017f5a:	f84c 1b04 	str.w	r1, [ip], #4
 8017f5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017f62:	dcec      	bgt.n	8017f3e <__multadd+0x12>
 8017f64:	b30e      	cbz	r6, 8017faa <__multadd+0x7e>
 8017f66:	68a3      	ldr	r3, [r4, #8]
 8017f68:	42ab      	cmp	r3, r5
 8017f6a:	dc19      	bgt.n	8017fa0 <__multadd+0x74>
 8017f6c:	6861      	ldr	r1, [r4, #4]
 8017f6e:	4638      	mov	r0, r7
 8017f70:	3101      	adds	r1, #1
 8017f72:	f7ff ff79 	bl	8017e68 <_Balloc>
 8017f76:	4680      	mov	r8, r0
 8017f78:	b928      	cbnz	r0, 8017f86 <__multadd+0x5a>
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	4b0c      	ldr	r3, [pc, #48]	; (8017fb0 <__multadd+0x84>)
 8017f7e:	480d      	ldr	r0, [pc, #52]	; (8017fb4 <__multadd+0x88>)
 8017f80:	21ba      	movs	r1, #186	; 0xba
 8017f82:	f001 fa75 	bl	8019470 <__assert_func>
 8017f86:	6922      	ldr	r2, [r4, #16]
 8017f88:	3202      	adds	r2, #2
 8017f8a:	f104 010c 	add.w	r1, r4, #12
 8017f8e:	0092      	lsls	r2, r2, #2
 8017f90:	300c      	adds	r0, #12
 8017f92:	f7fe fc66 	bl	8016862 <memcpy>
 8017f96:	4621      	mov	r1, r4
 8017f98:	4638      	mov	r0, r7
 8017f9a:	f7ff ffa5 	bl	8017ee8 <_Bfree>
 8017f9e:	4644      	mov	r4, r8
 8017fa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017fa4:	3501      	adds	r5, #1
 8017fa6:	615e      	str	r6, [r3, #20]
 8017fa8:	6125      	str	r5, [r4, #16]
 8017faa:	4620      	mov	r0, r4
 8017fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb0:	0801aa7b 	.word	0x0801aa7b
 8017fb4:	0801aaec 	.word	0x0801aaec

08017fb8 <__s2b>:
 8017fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fbc:	460c      	mov	r4, r1
 8017fbe:	4615      	mov	r5, r2
 8017fc0:	461f      	mov	r7, r3
 8017fc2:	2209      	movs	r2, #9
 8017fc4:	3308      	adds	r3, #8
 8017fc6:	4606      	mov	r6, r0
 8017fc8:	fb93 f3f2 	sdiv	r3, r3, r2
 8017fcc:	2100      	movs	r1, #0
 8017fce:	2201      	movs	r2, #1
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	db09      	blt.n	8017fe8 <__s2b+0x30>
 8017fd4:	4630      	mov	r0, r6
 8017fd6:	f7ff ff47 	bl	8017e68 <_Balloc>
 8017fda:	b940      	cbnz	r0, 8017fee <__s2b+0x36>
 8017fdc:	4602      	mov	r2, r0
 8017fde:	4b19      	ldr	r3, [pc, #100]	; (8018044 <__s2b+0x8c>)
 8017fe0:	4819      	ldr	r0, [pc, #100]	; (8018048 <__s2b+0x90>)
 8017fe2:	21d3      	movs	r1, #211	; 0xd3
 8017fe4:	f001 fa44 	bl	8019470 <__assert_func>
 8017fe8:	0052      	lsls	r2, r2, #1
 8017fea:	3101      	adds	r1, #1
 8017fec:	e7f0      	b.n	8017fd0 <__s2b+0x18>
 8017fee:	9b08      	ldr	r3, [sp, #32]
 8017ff0:	6143      	str	r3, [r0, #20]
 8017ff2:	2d09      	cmp	r5, #9
 8017ff4:	f04f 0301 	mov.w	r3, #1
 8017ff8:	6103      	str	r3, [r0, #16]
 8017ffa:	dd16      	ble.n	801802a <__s2b+0x72>
 8017ffc:	f104 0909 	add.w	r9, r4, #9
 8018000:	46c8      	mov	r8, r9
 8018002:	442c      	add	r4, r5
 8018004:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018008:	4601      	mov	r1, r0
 801800a:	3b30      	subs	r3, #48	; 0x30
 801800c:	220a      	movs	r2, #10
 801800e:	4630      	mov	r0, r6
 8018010:	f7ff ff8c 	bl	8017f2c <__multadd>
 8018014:	45a0      	cmp	r8, r4
 8018016:	d1f5      	bne.n	8018004 <__s2b+0x4c>
 8018018:	f1a5 0408 	sub.w	r4, r5, #8
 801801c:	444c      	add	r4, r9
 801801e:	1b2d      	subs	r5, r5, r4
 8018020:	1963      	adds	r3, r4, r5
 8018022:	42bb      	cmp	r3, r7
 8018024:	db04      	blt.n	8018030 <__s2b+0x78>
 8018026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801802a:	340a      	adds	r4, #10
 801802c:	2509      	movs	r5, #9
 801802e:	e7f6      	b.n	801801e <__s2b+0x66>
 8018030:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018034:	4601      	mov	r1, r0
 8018036:	3b30      	subs	r3, #48	; 0x30
 8018038:	220a      	movs	r2, #10
 801803a:	4630      	mov	r0, r6
 801803c:	f7ff ff76 	bl	8017f2c <__multadd>
 8018040:	e7ee      	b.n	8018020 <__s2b+0x68>
 8018042:	bf00      	nop
 8018044:	0801aa7b 	.word	0x0801aa7b
 8018048:	0801aaec 	.word	0x0801aaec

0801804c <__hi0bits>:
 801804c:	0c03      	lsrs	r3, r0, #16
 801804e:	041b      	lsls	r3, r3, #16
 8018050:	b9d3      	cbnz	r3, 8018088 <__hi0bits+0x3c>
 8018052:	0400      	lsls	r0, r0, #16
 8018054:	2310      	movs	r3, #16
 8018056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801805a:	bf04      	itt	eq
 801805c:	0200      	lsleq	r0, r0, #8
 801805e:	3308      	addeq	r3, #8
 8018060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018064:	bf04      	itt	eq
 8018066:	0100      	lsleq	r0, r0, #4
 8018068:	3304      	addeq	r3, #4
 801806a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801806e:	bf04      	itt	eq
 8018070:	0080      	lsleq	r0, r0, #2
 8018072:	3302      	addeq	r3, #2
 8018074:	2800      	cmp	r0, #0
 8018076:	db05      	blt.n	8018084 <__hi0bits+0x38>
 8018078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801807c:	f103 0301 	add.w	r3, r3, #1
 8018080:	bf08      	it	eq
 8018082:	2320      	moveq	r3, #32
 8018084:	4618      	mov	r0, r3
 8018086:	4770      	bx	lr
 8018088:	2300      	movs	r3, #0
 801808a:	e7e4      	b.n	8018056 <__hi0bits+0xa>

0801808c <__lo0bits>:
 801808c:	6803      	ldr	r3, [r0, #0]
 801808e:	f013 0207 	ands.w	r2, r3, #7
 8018092:	d00c      	beq.n	80180ae <__lo0bits+0x22>
 8018094:	07d9      	lsls	r1, r3, #31
 8018096:	d422      	bmi.n	80180de <__lo0bits+0x52>
 8018098:	079a      	lsls	r2, r3, #30
 801809a:	bf49      	itett	mi
 801809c:	085b      	lsrmi	r3, r3, #1
 801809e:	089b      	lsrpl	r3, r3, #2
 80180a0:	6003      	strmi	r3, [r0, #0]
 80180a2:	2201      	movmi	r2, #1
 80180a4:	bf5c      	itt	pl
 80180a6:	6003      	strpl	r3, [r0, #0]
 80180a8:	2202      	movpl	r2, #2
 80180aa:	4610      	mov	r0, r2
 80180ac:	4770      	bx	lr
 80180ae:	b299      	uxth	r1, r3
 80180b0:	b909      	cbnz	r1, 80180b6 <__lo0bits+0x2a>
 80180b2:	0c1b      	lsrs	r3, r3, #16
 80180b4:	2210      	movs	r2, #16
 80180b6:	b2d9      	uxtb	r1, r3
 80180b8:	b909      	cbnz	r1, 80180be <__lo0bits+0x32>
 80180ba:	3208      	adds	r2, #8
 80180bc:	0a1b      	lsrs	r3, r3, #8
 80180be:	0719      	lsls	r1, r3, #28
 80180c0:	bf04      	itt	eq
 80180c2:	091b      	lsreq	r3, r3, #4
 80180c4:	3204      	addeq	r2, #4
 80180c6:	0799      	lsls	r1, r3, #30
 80180c8:	bf04      	itt	eq
 80180ca:	089b      	lsreq	r3, r3, #2
 80180cc:	3202      	addeq	r2, #2
 80180ce:	07d9      	lsls	r1, r3, #31
 80180d0:	d403      	bmi.n	80180da <__lo0bits+0x4e>
 80180d2:	085b      	lsrs	r3, r3, #1
 80180d4:	f102 0201 	add.w	r2, r2, #1
 80180d8:	d003      	beq.n	80180e2 <__lo0bits+0x56>
 80180da:	6003      	str	r3, [r0, #0]
 80180dc:	e7e5      	b.n	80180aa <__lo0bits+0x1e>
 80180de:	2200      	movs	r2, #0
 80180e0:	e7e3      	b.n	80180aa <__lo0bits+0x1e>
 80180e2:	2220      	movs	r2, #32
 80180e4:	e7e1      	b.n	80180aa <__lo0bits+0x1e>
	...

080180e8 <__i2b>:
 80180e8:	b510      	push	{r4, lr}
 80180ea:	460c      	mov	r4, r1
 80180ec:	2101      	movs	r1, #1
 80180ee:	f7ff febb 	bl	8017e68 <_Balloc>
 80180f2:	4602      	mov	r2, r0
 80180f4:	b928      	cbnz	r0, 8018102 <__i2b+0x1a>
 80180f6:	4b05      	ldr	r3, [pc, #20]	; (801810c <__i2b+0x24>)
 80180f8:	4805      	ldr	r0, [pc, #20]	; (8018110 <__i2b+0x28>)
 80180fa:	f240 1145 	movw	r1, #325	; 0x145
 80180fe:	f001 f9b7 	bl	8019470 <__assert_func>
 8018102:	2301      	movs	r3, #1
 8018104:	6144      	str	r4, [r0, #20]
 8018106:	6103      	str	r3, [r0, #16]
 8018108:	bd10      	pop	{r4, pc}
 801810a:	bf00      	nop
 801810c:	0801aa7b 	.word	0x0801aa7b
 8018110:	0801aaec 	.word	0x0801aaec

08018114 <__multiply>:
 8018114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018118:	4691      	mov	r9, r2
 801811a:	690a      	ldr	r2, [r1, #16]
 801811c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018120:	429a      	cmp	r2, r3
 8018122:	bfb8      	it	lt
 8018124:	460b      	movlt	r3, r1
 8018126:	460c      	mov	r4, r1
 8018128:	bfbc      	itt	lt
 801812a:	464c      	movlt	r4, r9
 801812c:	4699      	movlt	r9, r3
 801812e:	6927      	ldr	r7, [r4, #16]
 8018130:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018134:	68a3      	ldr	r3, [r4, #8]
 8018136:	6861      	ldr	r1, [r4, #4]
 8018138:	eb07 060a 	add.w	r6, r7, sl
 801813c:	42b3      	cmp	r3, r6
 801813e:	b085      	sub	sp, #20
 8018140:	bfb8      	it	lt
 8018142:	3101      	addlt	r1, #1
 8018144:	f7ff fe90 	bl	8017e68 <_Balloc>
 8018148:	b930      	cbnz	r0, 8018158 <__multiply+0x44>
 801814a:	4602      	mov	r2, r0
 801814c:	4b44      	ldr	r3, [pc, #272]	; (8018260 <__multiply+0x14c>)
 801814e:	4845      	ldr	r0, [pc, #276]	; (8018264 <__multiply+0x150>)
 8018150:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8018154:	f001 f98c 	bl	8019470 <__assert_func>
 8018158:	f100 0514 	add.w	r5, r0, #20
 801815c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018160:	462b      	mov	r3, r5
 8018162:	2200      	movs	r2, #0
 8018164:	4543      	cmp	r3, r8
 8018166:	d321      	bcc.n	80181ac <__multiply+0x98>
 8018168:	f104 0314 	add.w	r3, r4, #20
 801816c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018170:	f109 0314 	add.w	r3, r9, #20
 8018174:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8018178:	9202      	str	r2, [sp, #8]
 801817a:	1b3a      	subs	r2, r7, r4
 801817c:	3a15      	subs	r2, #21
 801817e:	f022 0203 	bic.w	r2, r2, #3
 8018182:	3204      	adds	r2, #4
 8018184:	f104 0115 	add.w	r1, r4, #21
 8018188:	428f      	cmp	r7, r1
 801818a:	bf38      	it	cc
 801818c:	2204      	movcc	r2, #4
 801818e:	9201      	str	r2, [sp, #4]
 8018190:	9a02      	ldr	r2, [sp, #8]
 8018192:	9303      	str	r3, [sp, #12]
 8018194:	429a      	cmp	r2, r3
 8018196:	d80c      	bhi.n	80181b2 <__multiply+0x9e>
 8018198:	2e00      	cmp	r6, #0
 801819a:	dd03      	ble.n	80181a4 <__multiply+0x90>
 801819c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d05b      	beq.n	801825c <__multiply+0x148>
 80181a4:	6106      	str	r6, [r0, #16]
 80181a6:	b005      	add	sp, #20
 80181a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181ac:	f843 2b04 	str.w	r2, [r3], #4
 80181b0:	e7d8      	b.n	8018164 <__multiply+0x50>
 80181b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80181b6:	f1ba 0f00 	cmp.w	sl, #0
 80181ba:	d024      	beq.n	8018206 <__multiply+0xf2>
 80181bc:	f104 0e14 	add.w	lr, r4, #20
 80181c0:	46a9      	mov	r9, r5
 80181c2:	f04f 0c00 	mov.w	ip, #0
 80181c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80181ca:	f8d9 1000 	ldr.w	r1, [r9]
 80181ce:	fa1f fb82 	uxth.w	fp, r2
 80181d2:	b289      	uxth	r1, r1
 80181d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80181d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80181dc:	f8d9 2000 	ldr.w	r2, [r9]
 80181e0:	4461      	add	r1, ip
 80181e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80181e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80181ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80181ee:	b289      	uxth	r1, r1
 80181f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80181f4:	4577      	cmp	r7, lr
 80181f6:	f849 1b04 	str.w	r1, [r9], #4
 80181fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80181fe:	d8e2      	bhi.n	80181c6 <__multiply+0xb2>
 8018200:	9a01      	ldr	r2, [sp, #4]
 8018202:	f845 c002 	str.w	ip, [r5, r2]
 8018206:	9a03      	ldr	r2, [sp, #12]
 8018208:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801820c:	3304      	adds	r3, #4
 801820e:	f1b9 0f00 	cmp.w	r9, #0
 8018212:	d021      	beq.n	8018258 <__multiply+0x144>
 8018214:	6829      	ldr	r1, [r5, #0]
 8018216:	f104 0c14 	add.w	ip, r4, #20
 801821a:	46ae      	mov	lr, r5
 801821c:	f04f 0a00 	mov.w	sl, #0
 8018220:	f8bc b000 	ldrh.w	fp, [ip]
 8018224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8018228:	fb09 220b 	mla	r2, r9, fp, r2
 801822c:	4452      	add	r2, sl
 801822e:	b289      	uxth	r1, r1
 8018230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8018234:	f84e 1b04 	str.w	r1, [lr], #4
 8018238:	f85c 1b04 	ldr.w	r1, [ip], #4
 801823c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018240:	f8be 1000 	ldrh.w	r1, [lr]
 8018244:	fb09 110a 	mla	r1, r9, sl, r1
 8018248:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801824c:	4567      	cmp	r7, ip
 801824e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8018252:	d8e5      	bhi.n	8018220 <__multiply+0x10c>
 8018254:	9a01      	ldr	r2, [sp, #4]
 8018256:	50a9      	str	r1, [r5, r2]
 8018258:	3504      	adds	r5, #4
 801825a:	e799      	b.n	8018190 <__multiply+0x7c>
 801825c:	3e01      	subs	r6, #1
 801825e:	e79b      	b.n	8018198 <__multiply+0x84>
 8018260:	0801aa7b 	.word	0x0801aa7b
 8018264:	0801aaec 	.word	0x0801aaec

08018268 <__pow5mult>:
 8018268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801826c:	4615      	mov	r5, r2
 801826e:	f012 0203 	ands.w	r2, r2, #3
 8018272:	4606      	mov	r6, r0
 8018274:	460f      	mov	r7, r1
 8018276:	d007      	beq.n	8018288 <__pow5mult+0x20>
 8018278:	4c25      	ldr	r4, [pc, #148]	; (8018310 <__pow5mult+0xa8>)
 801827a:	3a01      	subs	r2, #1
 801827c:	2300      	movs	r3, #0
 801827e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018282:	f7ff fe53 	bl	8017f2c <__multadd>
 8018286:	4607      	mov	r7, r0
 8018288:	10ad      	asrs	r5, r5, #2
 801828a:	d03d      	beq.n	8018308 <__pow5mult+0xa0>
 801828c:	69f4      	ldr	r4, [r6, #28]
 801828e:	b97c      	cbnz	r4, 80182b0 <__pow5mult+0x48>
 8018290:	2010      	movs	r0, #16
 8018292:	f7ff fd23 	bl	8017cdc <malloc>
 8018296:	4602      	mov	r2, r0
 8018298:	61f0      	str	r0, [r6, #28]
 801829a:	b928      	cbnz	r0, 80182a8 <__pow5mult+0x40>
 801829c:	4b1d      	ldr	r3, [pc, #116]	; (8018314 <__pow5mult+0xac>)
 801829e:	481e      	ldr	r0, [pc, #120]	; (8018318 <__pow5mult+0xb0>)
 80182a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80182a4:	f001 f8e4 	bl	8019470 <__assert_func>
 80182a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80182ac:	6004      	str	r4, [r0, #0]
 80182ae:	60c4      	str	r4, [r0, #12]
 80182b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80182b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80182b8:	b94c      	cbnz	r4, 80182ce <__pow5mult+0x66>
 80182ba:	f240 2171 	movw	r1, #625	; 0x271
 80182be:	4630      	mov	r0, r6
 80182c0:	f7ff ff12 	bl	80180e8 <__i2b>
 80182c4:	2300      	movs	r3, #0
 80182c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80182ca:	4604      	mov	r4, r0
 80182cc:	6003      	str	r3, [r0, #0]
 80182ce:	f04f 0900 	mov.w	r9, #0
 80182d2:	07eb      	lsls	r3, r5, #31
 80182d4:	d50a      	bpl.n	80182ec <__pow5mult+0x84>
 80182d6:	4639      	mov	r1, r7
 80182d8:	4622      	mov	r2, r4
 80182da:	4630      	mov	r0, r6
 80182dc:	f7ff ff1a 	bl	8018114 <__multiply>
 80182e0:	4639      	mov	r1, r7
 80182e2:	4680      	mov	r8, r0
 80182e4:	4630      	mov	r0, r6
 80182e6:	f7ff fdff 	bl	8017ee8 <_Bfree>
 80182ea:	4647      	mov	r7, r8
 80182ec:	106d      	asrs	r5, r5, #1
 80182ee:	d00b      	beq.n	8018308 <__pow5mult+0xa0>
 80182f0:	6820      	ldr	r0, [r4, #0]
 80182f2:	b938      	cbnz	r0, 8018304 <__pow5mult+0x9c>
 80182f4:	4622      	mov	r2, r4
 80182f6:	4621      	mov	r1, r4
 80182f8:	4630      	mov	r0, r6
 80182fa:	f7ff ff0b 	bl	8018114 <__multiply>
 80182fe:	6020      	str	r0, [r4, #0]
 8018300:	f8c0 9000 	str.w	r9, [r0]
 8018304:	4604      	mov	r4, r0
 8018306:	e7e4      	b.n	80182d2 <__pow5mult+0x6a>
 8018308:	4638      	mov	r0, r7
 801830a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801830e:	bf00      	nop
 8018310:	0801ac38 	.word	0x0801ac38
 8018314:	0801aa0c 	.word	0x0801aa0c
 8018318:	0801aaec 	.word	0x0801aaec

0801831c <__lshift>:
 801831c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018320:	460c      	mov	r4, r1
 8018322:	6849      	ldr	r1, [r1, #4]
 8018324:	6923      	ldr	r3, [r4, #16]
 8018326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801832a:	68a3      	ldr	r3, [r4, #8]
 801832c:	4607      	mov	r7, r0
 801832e:	4691      	mov	r9, r2
 8018330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018334:	f108 0601 	add.w	r6, r8, #1
 8018338:	42b3      	cmp	r3, r6
 801833a:	db0b      	blt.n	8018354 <__lshift+0x38>
 801833c:	4638      	mov	r0, r7
 801833e:	f7ff fd93 	bl	8017e68 <_Balloc>
 8018342:	4605      	mov	r5, r0
 8018344:	b948      	cbnz	r0, 801835a <__lshift+0x3e>
 8018346:	4602      	mov	r2, r0
 8018348:	4b28      	ldr	r3, [pc, #160]	; (80183ec <__lshift+0xd0>)
 801834a:	4829      	ldr	r0, [pc, #164]	; (80183f0 <__lshift+0xd4>)
 801834c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8018350:	f001 f88e 	bl	8019470 <__assert_func>
 8018354:	3101      	adds	r1, #1
 8018356:	005b      	lsls	r3, r3, #1
 8018358:	e7ee      	b.n	8018338 <__lshift+0x1c>
 801835a:	2300      	movs	r3, #0
 801835c:	f100 0114 	add.w	r1, r0, #20
 8018360:	f100 0210 	add.w	r2, r0, #16
 8018364:	4618      	mov	r0, r3
 8018366:	4553      	cmp	r3, sl
 8018368:	db33      	blt.n	80183d2 <__lshift+0xb6>
 801836a:	6920      	ldr	r0, [r4, #16]
 801836c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018370:	f104 0314 	add.w	r3, r4, #20
 8018374:	f019 091f 	ands.w	r9, r9, #31
 8018378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801837c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018380:	d02b      	beq.n	80183da <__lshift+0xbe>
 8018382:	f1c9 0e20 	rsb	lr, r9, #32
 8018386:	468a      	mov	sl, r1
 8018388:	2200      	movs	r2, #0
 801838a:	6818      	ldr	r0, [r3, #0]
 801838c:	fa00 f009 	lsl.w	r0, r0, r9
 8018390:	4310      	orrs	r0, r2
 8018392:	f84a 0b04 	str.w	r0, [sl], #4
 8018396:	f853 2b04 	ldr.w	r2, [r3], #4
 801839a:	459c      	cmp	ip, r3
 801839c:	fa22 f20e 	lsr.w	r2, r2, lr
 80183a0:	d8f3      	bhi.n	801838a <__lshift+0x6e>
 80183a2:	ebac 0304 	sub.w	r3, ip, r4
 80183a6:	3b15      	subs	r3, #21
 80183a8:	f023 0303 	bic.w	r3, r3, #3
 80183ac:	3304      	adds	r3, #4
 80183ae:	f104 0015 	add.w	r0, r4, #21
 80183b2:	4584      	cmp	ip, r0
 80183b4:	bf38      	it	cc
 80183b6:	2304      	movcc	r3, #4
 80183b8:	50ca      	str	r2, [r1, r3]
 80183ba:	b10a      	cbz	r2, 80183c0 <__lshift+0xa4>
 80183bc:	f108 0602 	add.w	r6, r8, #2
 80183c0:	3e01      	subs	r6, #1
 80183c2:	4638      	mov	r0, r7
 80183c4:	612e      	str	r6, [r5, #16]
 80183c6:	4621      	mov	r1, r4
 80183c8:	f7ff fd8e 	bl	8017ee8 <_Bfree>
 80183cc:	4628      	mov	r0, r5
 80183ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80183d6:	3301      	adds	r3, #1
 80183d8:	e7c5      	b.n	8018366 <__lshift+0x4a>
 80183da:	3904      	subs	r1, #4
 80183dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80183e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80183e4:	459c      	cmp	ip, r3
 80183e6:	d8f9      	bhi.n	80183dc <__lshift+0xc0>
 80183e8:	e7ea      	b.n	80183c0 <__lshift+0xa4>
 80183ea:	bf00      	nop
 80183ec:	0801aa7b 	.word	0x0801aa7b
 80183f0:	0801aaec 	.word	0x0801aaec

080183f4 <__mcmp>:
 80183f4:	b530      	push	{r4, r5, lr}
 80183f6:	6902      	ldr	r2, [r0, #16]
 80183f8:	690c      	ldr	r4, [r1, #16]
 80183fa:	1b12      	subs	r2, r2, r4
 80183fc:	d10e      	bne.n	801841c <__mcmp+0x28>
 80183fe:	f100 0314 	add.w	r3, r0, #20
 8018402:	3114      	adds	r1, #20
 8018404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801840c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018414:	42a5      	cmp	r5, r4
 8018416:	d003      	beq.n	8018420 <__mcmp+0x2c>
 8018418:	d305      	bcc.n	8018426 <__mcmp+0x32>
 801841a:	2201      	movs	r2, #1
 801841c:	4610      	mov	r0, r2
 801841e:	bd30      	pop	{r4, r5, pc}
 8018420:	4283      	cmp	r3, r0
 8018422:	d3f3      	bcc.n	801840c <__mcmp+0x18>
 8018424:	e7fa      	b.n	801841c <__mcmp+0x28>
 8018426:	f04f 32ff 	mov.w	r2, #4294967295
 801842a:	e7f7      	b.n	801841c <__mcmp+0x28>

0801842c <__mdiff>:
 801842c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018430:	460c      	mov	r4, r1
 8018432:	4606      	mov	r6, r0
 8018434:	4611      	mov	r1, r2
 8018436:	4620      	mov	r0, r4
 8018438:	4690      	mov	r8, r2
 801843a:	f7ff ffdb 	bl	80183f4 <__mcmp>
 801843e:	1e05      	subs	r5, r0, #0
 8018440:	d110      	bne.n	8018464 <__mdiff+0x38>
 8018442:	4629      	mov	r1, r5
 8018444:	4630      	mov	r0, r6
 8018446:	f7ff fd0f 	bl	8017e68 <_Balloc>
 801844a:	b930      	cbnz	r0, 801845a <__mdiff+0x2e>
 801844c:	4b3a      	ldr	r3, [pc, #232]	; (8018538 <__mdiff+0x10c>)
 801844e:	4602      	mov	r2, r0
 8018450:	f240 2137 	movw	r1, #567	; 0x237
 8018454:	4839      	ldr	r0, [pc, #228]	; (801853c <__mdiff+0x110>)
 8018456:	f001 f80b 	bl	8019470 <__assert_func>
 801845a:	2301      	movs	r3, #1
 801845c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018464:	bfa4      	itt	ge
 8018466:	4643      	movge	r3, r8
 8018468:	46a0      	movge	r8, r4
 801846a:	4630      	mov	r0, r6
 801846c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018470:	bfa6      	itte	ge
 8018472:	461c      	movge	r4, r3
 8018474:	2500      	movge	r5, #0
 8018476:	2501      	movlt	r5, #1
 8018478:	f7ff fcf6 	bl	8017e68 <_Balloc>
 801847c:	b920      	cbnz	r0, 8018488 <__mdiff+0x5c>
 801847e:	4b2e      	ldr	r3, [pc, #184]	; (8018538 <__mdiff+0x10c>)
 8018480:	4602      	mov	r2, r0
 8018482:	f240 2145 	movw	r1, #581	; 0x245
 8018486:	e7e5      	b.n	8018454 <__mdiff+0x28>
 8018488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801848c:	6926      	ldr	r6, [r4, #16]
 801848e:	60c5      	str	r5, [r0, #12]
 8018490:	f104 0914 	add.w	r9, r4, #20
 8018494:	f108 0514 	add.w	r5, r8, #20
 8018498:	f100 0e14 	add.w	lr, r0, #20
 801849c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80184a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80184a4:	f108 0210 	add.w	r2, r8, #16
 80184a8:	46f2      	mov	sl, lr
 80184aa:	2100      	movs	r1, #0
 80184ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80184b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80184b4:	fa11 f88b 	uxtah	r8, r1, fp
 80184b8:	b299      	uxth	r1, r3
 80184ba:	0c1b      	lsrs	r3, r3, #16
 80184bc:	eba8 0801 	sub.w	r8, r8, r1
 80184c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80184c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80184c8:	fa1f f888 	uxth.w	r8, r8
 80184cc:	1419      	asrs	r1, r3, #16
 80184ce:	454e      	cmp	r6, r9
 80184d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80184d4:	f84a 3b04 	str.w	r3, [sl], #4
 80184d8:	d8e8      	bhi.n	80184ac <__mdiff+0x80>
 80184da:	1b33      	subs	r3, r6, r4
 80184dc:	3b15      	subs	r3, #21
 80184de:	f023 0303 	bic.w	r3, r3, #3
 80184e2:	3304      	adds	r3, #4
 80184e4:	3415      	adds	r4, #21
 80184e6:	42a6      	cmp	r6, r4
 80184e8:	bf38      	it	cc
 80184ea:	2304      	movcc	r3, #4
 80184ec:	441d      	add	r5, r3
 80184ee:	4473      	add	r3, lr
 80184f0:	469e      	mov	lr, r3
 80184f2:	462e      	mov	r6, r5
 80184f4:	4566      	cmp	r6, ip
 80184f6:	d30e      	bcc.n	8018516 <__mdiff+0xea>
 80184f8:	f10c 0203 	add.w	r2, ip, #3
 80184fc:	1b52      	subs	r2, r2, r5
 80184fe:	f022 0203 	bic.w	r2, r2, #3
 8018502:	3d03      	subs	r5, #3
 8018504:	45ac      	cmp	ip, r5
 8018506:	bf38      	it	cc
 8018508:	2200      	movcc	r2, #0
 801850a:	4413      	add	r3, r2
 801850c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018510:	b17a      	cbz	r2, 8018532 <__mdiff+0x106>
 8018512:	6107      	str	r7, [r0, #16]
 8018514:	e7a4      	b.n	8018460 <__mdiff+0x34>
 8018516:	f856 8b04 	ldr.w	r8, [r6], #4
 801851a:	fa11 f288 	uxtah	r2, r1, r8
 801851e:	1414      	asrs	r4, r2, #16
 8018520:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018524:	b292      	uxth	r2, r2
 8018526:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801852a:	f84e 2b04 	str.w	r2, [lr], #4
 801852e:	1421      	asrs	r1, r4, #16
 8018530:	e7e0      	b.n	80184f4 <__mdiff+0xc8>
 8018532:	3f01      	subs	r7, #1
 8018534:	e7ea      	b.n	801850c <__mdiff+0xe0>
 8018536:	bf00      	nop
 8018538:	0801aa7b 	.word	0x0801aa7b
 801853c:	0801aaec 	.word	0x0801aaec

08018540 <__ulp>:
 8018540:	b082      	sub	sp, #8
 8018542:	ed8d 0b00 	vstr	d0, [sp]
 8018546:	9a01      	ldr	r2, [sp, #4]
 8018548:	4b0f      	ldr	r3, [pc, #60]	; (8018588 <__ulp+0x48>)
 801854a:	4013      	ands	r3, r2
 801854c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8018550:	2b00      	cmp	r3, #0
 8018552:	dc08      	bgt.n	8018566 <__ulp+0x26>
 8018554:	425b      	negs	r3, r3
 8018556:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801855a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801855e:	da04      	bge.n	801856a <__ulp+0x2a>
 8018560:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018564:	4113      	asrs	r3, r2
 8018566:	2200      	movs	r2, #0
 8018568:	e008      	b.n	801857c <__ulp+0x3c>
 801856a:	f1a2 0314 	sub.w	r3, r2, #20
 801856e:	2b1e      	cmp	r3, #30
 8018570:	bfda      	itte	le
 8018572:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8018576:	40da      	lsrle	r2, r3
 8018578:	2201      	movgt	r2, #1
 801857a:	2300      	movs	r3, #0
 801857c:	4619      	mov	r1, r3
 801857e:	4610      	mov	r0, r2
 8018580:	ec41 0b10 	vmov	d0, r0, r1
 8018584:	b002      	add	sp, #8
 8018586:	4770      	bx	lr
 8018588:	7ff00000 	.word	0x7ff00000

0801858c <__b2d>:
 801858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018590:	6906      	ldr	r6, [r0, #16]
 8018592:	f100 0814 	add.w	r8, r0, #20
 8018596:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801859a:	1f37      	subs	r7, r6, #4
 801859c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80185a0:	4610      	mov	r0, r2
 80185a2:	f7ff fd53 	bl	801804c <__hi0bits>
 80185a6:	f1c0 0320 	rsb	r3, r0, #32
 80185aa:	280a      	cmp	r0, #10
 80185ac:	600b      	str	r3, [r1, #0]
 80185ae:	491b      	ldr	r1, [pc, #108]	; (801861c <__b2d+0x90>)
 80185b0:	dc15      	bgt.n	80185de <__b2d+0x52>
 80185b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80185b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80185ba:	45b8      	cmp	r8, r7
 80185bc:	ea43 0501 	orr.w	r5, r3, r1
 80185c0:	bf34      	ite	cc
 80185c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80185c6:	2300      	movcs	r3, #0
 80185c8:	3015      	adds	r0, #21
 80185ca:	fa02 f000 	lsl.w	r0, r2, r0
 80185ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80185d2:	4303      	orrs	r3, r0
 80185d4:	461c      	mov	r4, r3
 80185d6:	ec45 4b10 	vmov	d0, r4, r5
 80185da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185de:	45b8      	cmp	r8, r7
 80185e0:	bf3a      	itte	cc
 80185e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80185e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80185ea:	2300      	movcs	r3, #0
 80185ec:	380b      	subs	r0, #11
 80185ee:	d012      	beq.n	8018616 <__b2d+0x8a>
 80185f0:	f1c0 0120 	rsb	r1, r0, #32
 80185f4:	fa23 f401 	lsr.w	r4, r3, r1
 80185f8:	4082      	lsls	r2, r0
 80185fa:	4322      	orrs	r2, r4
 80185fc:	4547      	cmp	r7, r8
 80185fe:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8018602:	bf8c      	ite	hi
 8018604:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018608:	2200      	movls	r2, #0
 801860a:	4083      	lsls	r3, r0
 801860c:	40ca      	lsrs	r2, r1
 801860e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018612:	4313      	orrs	r3, r2
 8018614:	e7de      	b.n	80185d4 <__b2d+0x48>
 8018616:	ea42 0501 	orr.w	r5, r2, r1
 801861a:	e7db      	b.n	80185d4 <__b2d+0x48>
 801861c:	3ff00000 	.word	0x3ff00000

08018620 <__d2b>:
 8018620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018624:	460f      	mov	r7, r1
 8018626:	2101      	movs	r1, #1
 8018628:	ec59 8b10 	vmov	r8, r9, d0
 801862c:	4616      	mov	r6, r2
 801862e:	f7ff fc1b 	bl	8017e68 <_Balloc>
 8018632:	4604      	mov	r4, r0
 8018634:	b930      	cbnz	r0, 8018644 <__d2b+0x24>
 8018636:	4602      	mov	r2, r0
 8018638:	4b24      	ldr	r3, [pc, #144]	; (80186cc <__d2b+0xac>)
 801863a:	4825      	ldr	r0, [pc, #148]	; (80186d0 <__d2b+0xb0>)
 801863c:	f240 310f 	movw	r1, #783	; 0x30f
 8018640:	f000 ff16 	bl	8019470 <__assert_func>
 8018644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801864c:	bb2d      	cbnz	r5, 801869a <__d2b+0x7a>
 801864e:	9301      	str	r3, [sp, #4]
 8018650:	f1b8 0300 	subs.w	r3, r8, #0
 8018654:	d026      	beq.n	80186a4 <__d2b+0x84>
 8018656:	4668      	mov	r0, sp
 8018658:	9300      	str	r3, [sp, #0]
 801865a:	f7ff fd17 	bl	801808c <__lo0bits>
 801865e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018662:	b1e8      	cbz	r0, 80186a0 <__d2b+0x80>
 8018664:	f1c0 0320 	rsb	r3, r0, #32
 8018668:	fa02 f303 	lsl.w	r3, r2, r3
 801866c:	430b      	orrs	r3, r1
 801866e:	40c2      	lsrs	r2, r0
 8018670:	6163      	str	r3, [r4, #20]
 8018672:	9201      	str	r2, [sp, #4]
 8018674:	9b01      	ldr	r3, [sp, #4]
 8018676:	61a3      	str	r3, [r4, #24]
 8018678:	2b00      	cmp	r3, #0
 801867a:	bf14      	ite	ne
 801867c:	2202      	movne	r2, #2
 801867e:	2201      	moveq	r2, #1
 8018680:	6122      	str	r2, [r4, #16]
 8018682:	b1bd      	cbz	r5, 80186b4 <__d2b+0x94>
 8018684:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8018688:	4405      	add	r5, r0
 801868a:	603d      	str	r5, [r7, #0]
 801868c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018690:	6030      	str	r0, [r6, #0]
 8018692:	4620      	mov	r0, r4
 8018694:	b003      	add	sp, #12
 8018696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801869a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801869e:	e7d6      	b.n	801864e <__d2b+0x2e>
 80186a0:	6161      	str	r1, [r4, #20]
 80186a2:	e7e7      	b.n	8018674 <__d2b+0x54>
 80186a4:	a801      	add	r0, sp, #4
 80186a6:	f7ff fcf1 	bl	801808c <__lo0bits>
 80186aa:	9b01      	ldr	r3, [sp, #4]
 80186ac:	6163      	str	r3, [r4, #20]
 80186ae:	3020      	adds	r0, #32
 80186b0:	2201      	movs	r2, #1
 80186b2:	e7e5      	b.n	8018680 <__d2b+0x60>
 80186b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80186b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80186bc:	6038      	str	r0, [r7, #0]
 80186be:	6918      	ldr	r0, [r3, #16]
 80186c0:	f7ff fcc4 	bl	801804c <__hi0bits>
 80186c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80186c8:	e7e2      	b.n	8018690 <__d2b+0x70>
 80186ca:	bf00      	nop
 80186cc:	0801aa7b 	.word	0x0801aa7b
 80186d0:	0801aaec 	.word	0x0801aaec

080186d4 <__ratio>:
 80186d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d8:	4688      	mov	r8, r1
 80186da:	4669      	mov	r1, sp
 80186dc:	4681      	mov	r9, r0
 80186de:	f7ff ff55 	bl	801858c <__b2d>
 80186e2:	a901      	add	r1, sp, #4
 80186e4:	4640      	mov	r0, r8
 80186e6:	ec55 4b10 	vmov	r4, r5, d0
 80186ea:	f7ff ff4f 	bl	801858c <__b2d>
 80186ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80186f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80186f6:	eba3 0c02 	sub.w	ip, r3, r2
 80186fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80186fe:	1a9b      	subs	r3, r3, r2
 8018700:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018704:	ec51 0b10 	vmov	r0, r1, d0
 8018708:	2b00      	cmp	r3, #0
 801870a:	bfd6      	itet	le
 801870c:	460a      	movle	r2, r1
 801870e:	462a      	movgt	r2, r5
 8018710:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018714:	468b      	mov	fp, r1
 8018716:	462f      	mov	r7, r5
 8018718:	bfd4      	ite	le
 801871a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801871e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018722:	4620      	mov	r0, r4
 8018724:	ee10 2a10 	vmov	r2, s0
 8018728:	465b      	mov	r3, fp
 801872a:	4639      	mov	r1, r7
 801872c:	f7e8 f89e 	bl	800086c <__aeabi_ddiv>
 8018730:	ec41 0b10 	vmov	d0, r0, r1
 8018734:	b003      	add	sp, #12
 8018736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801873a <__copybits>:
 801873a:	3901      	subs	r1, #1
 801873c:	b570      	push	{r4, r5, r6, lr}
 801873e:	1149      	asrs	r1, r1, #5
 8018740:	6914      	ldr	r4, [r2, #16]
 8018742:	3101      	adds	r1, #1
 8018744:	f102 0314 	add.w	r3, r2, #20
 8018748:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801874c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018750:	1f05      	subs	r5, r0, #4
 8018752:	42a3      	cmp	r3, r4
 8018754:	d30c      	bcc.n	8018770 <__copybits+0x36>
 8018756:	1aa3      	subs	r3, r4, r2
 8018758:	3b11      	subs	r3, #17
 801875a:	f023 0303 	bic.w	r3, r3, #3
 801875e:	3211      	adds	r2, #17
 8018760:	42a2      	cmp	r2, r4
 8018762:	bf88      	it	hi
 8018764:	2300      	movhi	r3, #0
 8018766:	4418      	add	r0, r3
 8018768:	2300      	movs	r3, #0
 801876a:	4288      	cmp	r0, r1
 801876c:	d305      	bcc.n	801877a <__copybits+0x40>
 801876e:	bd70      	pop	{r4, r5, r6, pc}
 8018770:	f853 6b04 	ldr.w	r6, [r3], #4
 8018774:	f845 6f04 	str.w	r6, [r5, #4]!
 8018778:	e7eb      	b.n	8018752 <__copybits+0x18>
 801877a:	f840 3b04 	str.w	r3, [r0], #4
 801877e:	e7f4      	b.n	801876a <__copybits+0x30>

08018780 <__any_on>:
 8018780:	f100 0214 	add.w	r2, r0, #20
 8018784:	6900      	ldr	r0, [r0, #16]
 8018786:	114b      	asrs	r3, r1, #5
 8018788:	4298      	cmp	r0, r3
 801878a:	b510      	push	{r4, lr}
 801878c:	db11      	blt.n	80187b2 <__any_on+0x32>
 801878e:	dd0a      	ble.n	80187a6 <__any_on+0x26>
 8018790:	f011 011f 	ands.w	r1, r1, #31
 8018794:	d007      	beq.n	80187a6 <__any_on+0x26>
 8018796:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801879a:	fa24 f001 	lsr.w	r0, r4, r1
 801879e:	fa00 f101 	lsl.w	r1, r0, r1
 80187a2:	428c      	cmp	r4, r1
 80187a4:	d10b      	bne.n	80187be <__any_on+0x3e>
 80187a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80187aa:	4293      	cmp	r3, r2
 80187ac:	d803      	bhi.n	80187b6 <__any_on+0x36>
 80187ae:	2000      	movs	r0, #0
 80187b0:	bd10      	pop	{r4, pc}
 80187b2:	4603      	mov	r3, r0
 80187b4:	e7f7      	b.n	80187a6 <__any_on+0x26>
 80187b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80187ba:	2900      	cmp	r1, #0
 80187bc:	d0f5      	beq.n	80187aa <__any_on+0x2a>
 80187be:	2001      	movs	r0, #1
 80187c0:	e7f6      	b.n	80187b0 <__any_on+0x30>
	...

080187c4 <_strtol_l.constprop.0>:
 80187c4:	2b01      	cmp	r3, #1
 80187c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187ca:	d001      	beq.n	80187d0 <_strtol_l.constprop.0+0xc>
 80187cc:	2b24      	cmp	r3, #36	; 0x24
 80187ce:	d906      	bls.n	80187de <_strtol_l.constprop.0+0x1a>
 80187d0:	f7fe f812 	bl	80167f8 <__errno>
 80187d4:	2316      	movs	r3, #22
 80187d6:	6003      	str	r3, [r0, #0]
 80187d8:	2000      	movs	r0, #0
 80187da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80188c4 <_strtol_l.constprop.0+0x100>
 80187e2:	460d      	mov	r5, r1
 80187e4:	462e      	mov	r6, r5
 80187e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187ea:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80187ee:	f017 0708 	ands.w	r7, r7, #8
 80187f2:	d1f7      	bne.n	80187e4 <_strtol_l.constprop.0+0x20>
 80187f4:	2c2d      	cmp	r4, #45	; 0x2d
 80187f6:	d132      	bne.n	801885e <_strtol_l.constprop.0+0x9a>
 80187f8:	782c      	ldrb	r4, [r5, #0]
 80187fa:	2701      	movs	r7, #1
 80187fc:	1cb5      	adds	r5, r6, #2
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d05b      	beq.n	80188ba <_strtol_l.constprop.0+0xf6>
 8018802:	2b10      	cmp	r3, #16
 8018804:	d109      	bne.n	801881a <_strtol_l.constprop.0+0x56>
 8018806:	2c30      	cmp	r4, #48	; 0x30
 8018808:	d107      	bne.n	801881a <_strtol_l.constprop.0+0x56>
 801880a:	782c      	ldrb	r4, [r5, #0]
 801880c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018810:	2c58      	cmp	r4, #88	; 0x58
 8018812:	d14d      	bne.n	80188b0 <_strtol_l.constprop.0+0xec>
 8018814:	786c      	ldrb	r4, [r5, #1]
 8018816:	2310      	movs	r3, #16
 8018818:	3502      	adds	r5, #2
 801881a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801881e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018822:	f04f 0e00 	mov.w	lr, #0
 8018826:	fbb8 f9f3 	udiv	r9, r8, r3
 801882a:	4676      	mov	r6, lr
 801882c:	fb03 8a19 	mls	sl, r3, r9, r8
 8018830:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018834:	f1bc 0f09 	cmp.w	ip, #9
 8018838:	d816      	bhi.n	8018868 <_strtol_l.constprop.0+0xa4>
 801883a:	4664      	mov	r4, ip
 801883c:	42a3      	cmp	r3, r4
 801883e:	dd24      	ble.n	801888a <_strtol_l.constprop.0+0xc6>
 8018840:	f1be 3fff 	cmp.w	lr, #4294967295
 8018844:	d008      	beq.n	8018858 <_strtol_l.constprop.0+0x94>
 8018846:	45b1      	cmp	r9, r6
 8018848:	d31c      	bcc.n	8018884 <_strtol_l.constprop.0+0xc0>
 801884a:	d101      	bne.n	8018850 <_strtol_l.constprop.0+0x8c>
 801884c:	45a2      	cmp	sl, r4
 801884e:	db19      	blt.n	8018884 <_strtol_l.constprop.0+0xc0>
 8018850:	fb06 4603 	mla	r6, r6, r3, r4
 8018854:	f04f 0e01 	mov.w	lr, #1
 8018858:	f815 4b01 	ldrb.w	r4, [r5], #1
 801885c:	e7e8      	b.n	8018830 <_strtol_l.constprop.0+0x6c>
 801885e:	2c2b      	cmp	r4, #43	; 0x2b
 8018860:	bf04      	itt	eq
 8018862:	782c      	ldrbeq	r4, [r5, #0]
 8018864:	1cb5      	addeq	r5, r6, #2
 8018866:	e7ca      	b.n	80187fe <_strtol_l.constprop.0+0x3a>
 8018868:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801886c:	f1bc 0f19 	cmp.w	ip, #25
 8018870:	d801      	bhi.n	8018876 <_strtol_l.constprop.0+0xb2>
 8018872:	3c37      	subs	r4, #55	; 0x37
 8018874:	e7e2      	b.n	801883c <_strtol_l.constprop.0+0x78>
 8018876:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801887a:	f1bc 0f19 	cmp.w	ip, #25
 801887e:	d804      	bhi.n	801888a <_strtol_l.constprop.0+0xc6>
 8018880:	3c57      	subs	r4, #87	; 0x57
 8018882:	e7db      	b.n	801883c <_strtol_l.constprop.0+0x78>
 8018884:	f04f 3eff 	mov.w	lr, #4294967295
 8018888:	e7e6      	b.n	8018858 <_strtol_l.constprop.0+0x94>
 801888a:	f1be 3fff 	cmp.w	lr, #4294967295
 801888e:	d105      	bne.n	801889c <_strtol_l.constprop.0+0xd8>
 8018890:	2322      	movs	r3, #34	; 0x22
 8018892:	6003      	str	r3, [r0, #0]
 8018894:	4646      	mov	r6, r8
 8018896:	b942      	cbnz	r2, 80188aa <_strtol_l.constprop.0+0xe6>
 8018898:	4630      	mov	r0, r6
 801889a:	e79e      	b.n	80187da <_strtol_l.constprop.0+0x16>
 801889c:	b107      	cbz	r7, 80188a0 <_strtol_l.constprop.0+0xdc>
 801889e:	4276      	negs	r6, r6
 80188a0:	2a00      	cmp	r2, #0
 80188a2:	d0f9      	beq.n	8018898 <_strtol_l.constprop.0+0xd4>
 80188a4:	f1be 0f00 	cmp.w	lr, #0
 80188a8:	d000      	beq.n	80188ac <_strtol_l.constprop.0+0xe8>
 80188aa:	1e69      	subs	r1, r5, #1
 80188ac:	6011      	str	r1, [r2, #0]
 80188ae:	e7f3      	b.n	8018898 <_strtol_l.constprop.0+0xd4>
 80188b0:	2430      	movs	r4, #48	; 0x30
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d1b1      	bne.n	801881a <_strtol_l.constprop.0+0x56>
 80188b6:	2308      	movs	r3, #8
 80188b8:	e7af      	b.n	801881a <_strtol_l.constprop.0+0x56>
 80188ba:	2c30      	cmp	r4, #48	; 0x30
 80188bc:	d0a5      	beq.n	801880a <_strtol_l.constprop.0+0x46>
 80188be:	230a      	movs	r3, #10
 80188c0:	e7ab      	b.n	801881a <_strtol_l.constprop.0+0x56>
 80188c2:	bf00      	nop
 80188c4:	0801ac45 	.word	0x0801ac45

080188c8 <_strtol_r>:
 80188c8:	f7ff bf7c 	b.w	80187c4 <_strtol_l.constprop.0>

080188cc <__ascii_wctomb>:
 80188cc:	b149      	cbz	r1, 80188e2 <__ascii_wctomb+0x16>
 80188ce:	2aff      	cmp	r2, #255	; 0xff
 80188d0:	bf85      	ittet	hi
 80188d2:	238a      	movhi	r3, #138	; 0x8a
 80188d4:	6003      	strhi	r3, [r0, #0]
 80188d6:	700a      	strbls	r2, [r1, #0]
 80188d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80188dc:	bf98      	it	ls
 80188de:	2001      	movls	r0, #1
 80188e0:	4770      	bx	lr
 80188e2:	4608      	mov	r0, r1
 80188e4:	4770      	bx	lr

080188e6 <__ssputs_r>:
 80188e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80188ea:	688e      	ldr	r6, [r1, #8]
 80188ec:	461f      	mov	r7, r3
 80188ee:	42be      	cmp	r6, r7
 80188f0:	680b      	ldr	r3, [r1, #0]
 80188f2:	4682      	mov	sl, r0
 80188f4:	460c      	mov	r4, r1
 80188f6:	4690      	mov	r8, r2
 80188f8:	d82c      	bhi.n	8018954 <__ssputs_r+0x6e>
 80188fa:	898a      	ldrh	r2, [r1, #12]
 80188fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018900:	d026      	beq.n	8018950 <__ssputs_r+0x6a>
 8018902:	6965      	ldr	r5, [r4, #20]
 8018904:	6909      	ldr	r1, [r1, #16]
 8018906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801890a:	eba3 0901 	sub.w	r9, r3, r1
 801890e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018912:	1c7b      	adds	r3, r7, #1
 8018914:	444b      	add	r3, r9
 8018916:	106d      	asrs	r5, r5, #1
 8018918:	429d      	cmp	r5, r3
 801891a:	bf38      	it	cc
 801891c:	461d      	movcc	r5, r3
 801891e:	0553      	lsls	r3, r2, #21
 8018920:	d527      	bpl.n	8018972 <__ssputs_r+0x8c>
 8018922:	4629      	mov	r1, r5
 8018924:	f7ff fa02 	bl	8017d2c <_malloc_r>
 8018928:	4606      	mov	r6, r0
 801892a:	b360      	cbz	r0, 8018986 <__ssputs_r+0xa0>
 801892c:	6921      	ldr	r1, [r4, #16]
 801892e:	464a      	mov	r2, r9
 8018930:	f7fd ff97 	bl	8016862 <memcpy>
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801893a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801893e:	81a3      	strh	r3, [r4, #12]
 8018940:	6126      	str	r6, [r4, #16]
 8018942:	6165      	str	r5, [r4, #20]
 8018944:	444e      	add	r6, r9
 8018946:	eba5 0509 	sub.w	r5, r5, r9
 801894a:	6026      	str	r6, [r4, #0]
 801894c:	60a5      	str	r5, [r4, #8]
 801894e:	463e      	mov	r6, r7
 8018950:	42be      	cmp	r6, r7
 8018952:	d900      	bls.n	8018956 <__ssputs_r+0x70>
 8018954:	463e      	mov	r6, r7
 8018956:	6820      	ldr	r0, [r4, #0]
 8018958:	4632      	mov	r2, r6
 801895a:	4641      	mov	r1, r8
 801895c:	f000 fd5d 	bl	801941a <memmove>
 8018960:	68a3      	ldr	r3, [r4, #8]
 8018962:	1b9b      	subs	r3, r3, r6
 8018964:	60a3      	str	r3, [r4, #8]
 8018966:	6823      	ldr	r3, [r4, #0]
 8018968:	4433      	add	r3, r6
 801896a:	6023      	str	r3, [r4, #0]
 801896c:	2000      	movs	r0, #0
 801896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018972:	462a      	mov	r2, r5
 8018974:	f000 fdb0 	bl	80194d8 <_realloc_r>
 8018978:	4606      	mov	r6, r0
 801897a:	2800      	cmp	r0, #0
 801897c:	d1e0      	bne.n	8018940 <__ssputs_r+0x5a>
 801897e:	6921      	ldr	r1, [r4, #16]
 8018980:	4650      	mov	r0, sl
 8018982:	f7fe fe07 	bl	8017594 <_free_r>
 8018986:	230c      	movs	r3, #12
 8018988:	f8ca 3000 	str.w	r3, [sl]
 801898c:	89a3      	ldrh	r3, [r4, #12]
 801898e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018992:	81a3      	strh	r3, [r4, #12]
 8018994:	f04f 30ff 	mov.w	r0, #4294967295
 8018998:	e7e9      	b.n	801896e <__ssputs_r+0x88>
	...

0801899c <_svfiprintf_r>:
 801899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189a0:	4698      	mov	r8, r3
 80189a2:	898b      	ldrh	r3, [r1, #12]
 80189a4:	061b      	lsls	r3, r3, #24
 80189a6:	b09d      	sub	sp, #116	; 0x74
 80189a8:	4607      	mov	r7, r0
 80189aa:	460d      	mov	r5, r1
 80189ac:	4614      	mov	r4, r2
 80189ae:	d50e      	bpl.n	80189ce <_svfiprintf_r+0x32>
 80189b0:	690b      	ldr	r3, [r1, #16]
 80189b2:	b963      	cbnz	r3, 80189ce <_svfiprintf_r+0x32>
 80189b4:	2140      	movs	r1, #64	; 0x40
 80189b6:	f7ff f9b9 	bl	8017d2c <_malloc_r>
 80189ba:	6028      	str	r0, [r5, #0]
 80189bc:	6128      	str	r0, [r5, #16]
 80189be:	b920      	cbnz	r0, 80189ca <_svfiprintf_r+0x2e>
 80189c0:	230c      	movs	r3, #12
 80189c2:	603b      	str	r3, [r7, #0]
 80189c4:	f04f 30ff 	mov.w	r0, #4294967295
 80189c8:	e0d0      	b.n	8018b6c <_svfiprintf_r+0x1d0>
 80189ca:	2340      	movs	r3, #64	; 0x40
 80189cc:	616b      	str	r3, [r5, #20]
 80189ce:	2300      	movs	r3, #0
 80189d0:	9309      	str	r3, [sp, #36]	; 0x24
 80189d2:	2320      	movs	r3, #32
 80189d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80189d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80189dc:	2330      	movs	r3, #48	; 0x30
 80189de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8018b84 <_svfiprintf_r+0x1e8>
 80189e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80189e6:	f04f 0901 	mov.w	r9, #1
 80189ea:	4623      	mov	r3, r4
 80189ec:	469a      	mov	sl, r3
 80189ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80189f2:	b10a      	cbz	r2, 80189f8 <_svfiprintf_r+0x5c>
 80189f4:	2a25      	cmp	r2, #37	; 0x25
 80189f6:	d1f9      	bne.n	80189ec <_svfiprintf_r+0x50>
 80189f8:	ebba 0b04 	subs.w	fp, sl, r4
 80189fc:	d00b      	beq.n	8018a16 <_svfiprintf_r+0x7a>
 80189fe:	465b      	mov	r3, fp
 8018a00:	4622      	mov	r2, r4
 8018a02:	4629      	mov	r1, r5
 8018a04:	4638      	mov	r0, r7
 8018a06:	f7ff ff6e 	bl	80188e6 <__ssputs_r>
 8018a0a:	3001      	adds	r0, #1
 8018a0c:	f000 80a9 	beq.w	8018b62 <_svfiprintf_r+0x1c6>
 8018a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a12:	445a      	add	r2, fp
 8018a14:	9209      	str	r2, [sp, #36]	; 0x24
 8018a16:	f89a 3000 	ldrb.w	r3, [sl]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	f000 80a1 	beq.w	8018b62 <_svfiprintf_r+0x1c6>
 8018a20:	2300      	movs	r3, #0
 8018a22:	f04f 32ff 	mov.w	r2, #4294967295
 8018a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a2a:	f10a 0a01 	add.w	sl, sl, #1
 8018a2e:	9304      	str	r3, [sp, #16]
 8018a30:	9307      	str	r3, [sp, #28]
 8018a32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018a36:	931a      	str	r3, [sp, #104]	; 0x68
 8018a38:	4654      	mov	r4, sl
 8018a3a:	2205      	movs	r2, #5
 8018a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a40:	4850      	ldr	r0, [pc, #320]	; (8018b84 <_svfiprintf_r+0x1e8>)
 8018a42:	f7e7 fbd5 	bl	80001f0 <memchr>
 8018a46:	9a04      	ldr	r2, [sp, #16]
 8018a48:	b9d8      	cbnz	r0, 8018a82 <_svfiprintf_r+0xe6>
 8018a4a:	06d0      	lsls	r0, r2, #27
 8018a4c:	bf44      	itt	mi
 8018a4e:	2320      	movmi	r3, #32
 8018a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a54:	0711      	lsls	r1, r2, #28
 8018a56:	bf44      	itt	mi
 8018a58:	232b      	movmi	r3, #43	; 0x2b
 8018a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8018a62:	2b2a      	cmp	r3, #42	; 0x2a
 8018a64:	d015      	beq.n	8018a92 <_svfiprintf_r+0xf6>
 8018a66:	9a07      	ldr	r2, [sp, #28]
 8018a68:	4654      	mov	r4, sl
 8018a6a:	2000      	movs	r0, #0
 8018a6c:	f04f 0c0a 	mov.w	ip, #10
 8018a70:	4621      	mov	r1, r4
 8018a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018a76:	3b30      	subs	r3, #48	; 0x30
 8018a78:	2b09      	cmp	r3, #9
 8018a7a:	d94d      	bls.n	8018b18 <_svfiprintf_r+0x17c>
 8018a7c:	b1b0      	cbz	r0, 8018aac <_svfiprintf_r+0x110>
 8018a7e:	9207      	str	r2, [sp, #28]
 8018a80:	e014      	b.n	8018aac <_svfiprintf_r+0x110>
 8018a82:	eba0 0308 	sub.w	r3, r0, r8
 8018a86:	fa09 f303 	lsl.w	r3, r9, r3
 8018a8a:	4313      	orrs	r3, r2
 8018a8c:	9304      	str	r3, [sp, #16]
 8018a8e:	46a2      	mov	sl, r4
 8018a90:	e7d2      	b.n	8018a38 <_svfiprintf_r+0x9c>
 8018a92:	9b03      	ldr	r3, [sp, #12]
 8018a94:	1d19      	adds	r1, r3, #4
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	9103      	str	r1, [sp, #12]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	bfbb      	ittet	lt
 8018a9e:	425b      	neglt	r3, r3
 8018aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8018aa4:	9307      	strge	r3, [sp, #28]
 8018aa6:	9307      	strlt	r3, [sp, #28]
 8018aa8:	bfb8      	it	lt
 8018aaa:	9204      	strlt	r2, [sp, #16]
 8018aac:	7823      	ldrb	r3, [r4, #0]
 8018aae:	2b2e      	cmp	r3, #46	; 0x2e
 8018ab0:	d10c      	bne.n	8018acc <_svfiprintf_r+0x130>
 8018ab2:	7863      	ldrb	r3, [r4, #1]
 8018ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8018ab6:	d134      	bne.n	8018b22 <_svfiprintf_r+0x186>
 8018ab8:	9b03      	ldr	r3, [sp, #12]
 8018aba:	1d1a      	adds	r2, r3, #4
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	9203      	str	r2, [sp, #12]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	bfb8      	it	lt
 8018ac4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018ac8:	3402      	adds	r4, #2
 8018aca:	9305      	str	r3, [sp, #20]
 8018acc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8018b94 <_svfiprintf_r+0x1f8>
 8018ad0:	7821      	ldrb	r1, [r4, #0]
 8018ad2:	2203      	movs	r2, #3
 8018ad4:	4650      	mov	r0, sl
 8018ad6:	f7e7 fb8b 	bl	80001f0 <memchr>
 8018ada:	b138      	cbz	r0, 8018aec <_svfiprintf_r+0x150>
 8018adc:	9b04      	ldr	r3, [sp, #16]
 8018ade:	eba0 000a 	sub.w	r0, r0, sl
 8018ae2:	2240      	movs	r2, #64	; 0x40
 8018ae4:	4082      	lsls	r2, r0
 8018ae6:	4313      	orrs	r3, r2
 8018ae8:	3401      	adds	r4, #1
 8018aea:	9304      	str	r3, [sp, #16]
 8018aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018af0:	4825      	ldr	r0, [pc, #148]	; (8018b88 <_svfiprintf_r+0x1ec>)
 8018af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018af6:	2206      	movs	r2, #6
 8018af8:	f7e7 fb7a 	bl	80001f0 <memchr>
 8018afc:	2800      	cmp	r0, #0
 8018afe:	d038      	beq.n	8018b72 <_svfiprintf_r+0x1d6>
 8018b00:	4b22      	ldr	r3, [pc, #136]	; (8018b8c <_svfiprintf_r+0x1f0>)
 8018b02:	bb1b      	cbnz	r3, 8018b4c <_svfiprintf_r+0x1b0>
 8018b04:	9b03      	ldr	r3, [sp, #12]
 8018b06:	3307      	adds	r3, #7
 8018b08:	f023 0307 	bic.w	r3, r3, #7
 8018b0c:	3308      	adds	r3, #8
 8018b0e:	9303      	str	r3, [sp, #12]
 8018b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b12:	4433      	add	r3, r6
 8018b14:	9309      	str	r3, [sp, #36]	; 0x24
 8018b16:	e768      	b.n	80189ea <_svfiprintf_r+0x4e>
 8018b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b1c:	460c      	mov	r4, r1
 8018b1e:	2001      	movs	r0, #1
 8018b20:	e7a6      	b.n	8018a70 <_svfiprintf_r+0xd4>
 8018b22:	2300      	movs	r3, #0
 8018b24:	3401      	adds	r4, #1
 8018b26:	9305      	str	r3, [sp, #20]
 8018b28:	4619      	mov	r1, r3
 8018b2a:	f04f 0c0a 	mov.w	ip, #10
 8018b2e:	4620      	mov	r0, r4
 8018b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b34:	3a30      	subs	r2, #48	; 0x30
 8018b36:	2a09      	cmp	r2, #9
 8018b38:	d903      	bls.n	8018b42 <_svfiprintf_r+0x1a6>
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d0c6      	beq.n	8018acc <_svfiprintf_r+0x130>
 8018b3e:	9105      	str	r1, [sp, #20]
 8018b40:	e7c4      	b.n	8018acc <_svfiprintf_r+0x130>
 8018b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8018b46:	4604      	mov	r4, r0
 8018b48:	2301      	movs	r3, #1
 8018b4a:	e7f0      	b.n	8018b2e <_svfiprintf_r+0x192>
 8018b4c:	ab03      	add	r3, sp, #12
 8018b4e:	9300      	str	r3, [sp, #0]
 8018b50:	462a      	mov	r2, r5
 8018b52:	4b0f      	ldr	r3, [pc, #60]	; (8018b90 <_svfiprintf_r+0x1f4>)
 8018b54:	a904      	add	r1, sp, #16
 8018b56:	4638      	mov	r0, r7
 8018b58:	f7fc fe08 	bl	801576c <_printf_float>
 8018b5c:	1c42      	adds	r2, r0, #1
 8018b5e:	4606      	mov	r6, r0
 8018b60:	d1d6      	bne.n	8018b10 <_svfiprintf_r+0x174>
 8018b62:	89ab      	ldrh	r3, [r5, #12]
 8018b64:	065b      	lsls	r3, r3, #25
 8018b66:	f53f af2d 	bmi.w	80189c4 <_svfiprintf_r+0x28>
 8018b6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b6c:	b01d      	add	sp, #116	; 0x74
 8018b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b72:	ab03      	add	r3, sp, #12
 8018b74:	9300      	str	r3, [sp, #0]
 8018b76:	462a      	mov	r2, r5
 8018b78:	4b05      	ldr	r3, [pc, #20]	; (8018b90 <_svfiprintf_r+0x1f4>)
 8018b7a:	a904      	add	r1, sp, #16
 8018b7c:	4638      	mov	r0, r7
 8018b7e:	f7fd f899 	bl	8015cb4 <_printf_i>
 8018b82:	e7eb      	b.n	8018b5c <_svfiprintf_r+0x1c0>
 8018b84:	0801ad45 	.word	0x0801ad45
 8018b88:	0801ad4f 	.word	0x0801ad4f
 8018b8c:	0801576d 	.word	0x0801576d
 8018b90:	080188e7 	.word	0x080188e7
 8018b94:	0801ad4b 	.word	0x0801ad4b

08018b98 <_sungetc_r>:
 8018b98:	b538      	push	{r3, r4, r5, lr}
 8018b9a:	1c4b      	adds	r3, r1, #1
 8018b9c:	4614      	mov	r4, r2
 8018b9e:	d103      	bne.n	8018ba8 <_sungetc_r+0x10>
 8018ba0:	f04f 35ff 	mov.w	r5, #4294967295
 8018ba4:	4628      	mov	r0, r5
 8018ba6:	bd38      	pop	{r3, r4, r5, pc}
 8018ba8:	8993      	ldrh	r3, [r2, #12]
 8018baa:	f023 0320 	bic.w	r3, r3, #32
 8018bae:	8193      	strh	r3, [r2, #12]
 8018bb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018bb2:	6852      	ldr	r2, [r2, #4]
 8018bb4:	b2cd      	uxtb	r5, r1
 8018bb6:	b18b      	cbz	r3, 8018bdc <_sungetc_r+0x44>
 8018bb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018bba:	4293      	cmp	r3, r2
 8018bbc:	dd08      	ble.n	8018bd0 <_sungetc_r+0x38>
 8018bbe:	6823      	ldr	r3, [r4, #0]
 8018bc0:	1e5a      	subs	r2, r3, #1
 8018bc2:	6022      	str	r2, [r4, #0]
 8018bc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018bc8:	6863      	ldr	r3, [r4, #4]
 8018bca:	3301      	adds	r3, #1
 8018bcc:	6063      	str	r3, [r4, #4]
 8018bce:	e7e9      	b.n	8018ba4 <_sungetc_r+0xc>
 8018bd0:	4621      	mov	r1, r4
 8018bd2:	f000 fbe8 	bl	80193a6 <__submore>
 8018bd6:	2800      	cmp	r0, #0
 8018bd8:	d0f1      	beq.n	8018bbe <_sungetc_r+0x26>
 8018bda:	e7e1      	b.n	8018ba0 <_sungetc_r+0x8>
 8018bdc:	6921      	ldr	r1, [r4, #16]
 8018bde:	6823      	ldr	r3, [r4, #0]
 8018be0:	b151      	cbz	r1, 8018bf8 <_sungetc_r+0x60>
 8018be2:	4299      	cmp	r1, r3
 8018be4:	d208      	bcs.n	8018bf8 <_sungetc_r+0x60>
 8018be6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018bea:	42a9      	cmp	r1, r5
 8018bec:	d104      	bne.n	8018bf8 <_sungetc_r+0x60>
 8018bee:	3b01      	subs	r3, #1
 8018bf0:	3201      	adds	r2, #1
 8018bf2:	6023      	str	r3, [r4, #0]
 8018bf4:	6062      	str	r2, [r4, #4]
 8018bf6:	e7d5      	b.n	8018ba4 <_sungetc_r+0xc>
 8018bf8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c00:	6363      	str	r3, [r4, #52]	; 0x34
 8018c02:	2303      	movs	r3, #3
 8018c04:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c06:	4623      	mov	r3, r4
 8018c08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018c0c:	6023      	str	r3, [r4, #0]
 8018c0e:	2301      	movs	r3, #1
 8018c10:	e7dc      	b.n	8018bcc <_sungetc_r+0x34>

08018c12 <__ssrefill_r>:
 8018c12:	b510      	push	{r4, lr}
 8018c14:	460c      	mov	r4, r1
 8018c16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018c18:	b169      	cbz	r1, 8018c36 <__ssrefill_r+0x24>
 8018c1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c1e:	4299      	cmp	r1, r3
 8018c20:	d001      	beq.n	8018c26 <__ssrefill_r+0x14>
 8018c22:	f7fe fcb7 	bl	8017594 <_free_r>
 8018c26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c28:	6063      	str	r3, [r4, #4]
 8018c2a:	2000      	movs	r0, #0
 8018c2c:	6360      	str	r0, [r4, #52]	; 0x34
 8018c2e:	b113      	cbz	r3, 8018c36 <__ssrefill_r+0x24>
 8018c30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018c32:	6023      	str	r3, [r4, #0]
 8018c34:	bd10      	pop	{r4, pc}
 8018c36:	6923      	ldr	r3, [r4, #16]
 8018c38:	6023      	str	r3, [r4, #0]
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	6063      	str	r3, [r4, #4]
 8018c3e:	89a3      	ldrh	r3, [r4, #12]
 8018c40:	f043 0320 	orr.w	r3, r3, #32
 8018c44:	81a3      	strh	r3, [r4, #12]
 8018c46:	f04f 30ff 	mov.w	r0, #4294967295
 8018c4a:	e7f3      	b.n	8018c34 <__ssrefill_r+0x22>

08018c4c <__ssvfiscanf_r>:
 8018c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c50:	460c      	mov	r4, r1
 8018c52:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8018c56:	2100      	movs	r1, #0
 8018c58:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018c5c:	49a6      	ldr	r1, [pc, #664]	; (8018ef8 <__ssvfiscanf_r+0x2ac>)
 8018c5e:	91a0      	str	r1, [sp, #640]	; 0x280
 8018c60:	f10d 0804 	add.w	r8, sp, #4
 8018c64:	49a5      	ldr	r1, [pc, #660]	; (8018efc <__ssvfiscanf_r+0x2b0>)
 8018c66:	4fa6      	ldr	r7, [pc, #664]	; (8018f00 <__ssvfiscanf_r+0x2b4>)
 8018c68:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018f04 <__ssvfiscanf_r+0x2b8>
 8018c6c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018c70:	4606      	mov	r6, r0
 8018c72:	91a1      	str	r1, [sp, #644]	; 0x284
 8018c74:	9300      	str	r3, [sp, #0]
 8018c76:	7813      	ldrb	r3, [r2, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	f000 815a 	beq.w	8018f32 <__ssvfiscanf_r+0x2e6>
 8018c7e:	5cf9      	ldrb	r1, [r7, r3]
 8018c80:	f011 0108 	ands.w	r1, r1, #8
 8018c84:	f102 0501 	add.w	r5, r2, #1
 8018c88:	d019      	beq.n	8018cbe <__ssvfiscanf_r+0x72>
 8018c8a:	6863      	ldr	r3, [r4, #4]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	dd0f      	ble.n	8018cb0 <__ssvfiscanf_r+0x64>
 8018c90:	6823      	ldr	r3, [r4, #0]
 8018c92:	781a      	ldrb	r2, [r3, #0]
 8018c94:	5cba      	ldrb	r2, [r7, r2]
 8018c96:	0712      	lsls	r2, r2, #28
 8018c98:	d401      	bmi.n	8018c9e <__ssvfiscanf_r+0x52>
 8018c9a:	462a      	mov	r2, r5
 8018c9c:	e7eb      	b.n	8018c76 <__ssvfiscanf_r+0x2a>
 8018c9e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018ca0:	3201      	adds	r2, #1
 8018ca2:	9245      	str	r2, [sp, #276]	; 0x114
 8018ca4:	6862      	ldr	r2, [r4, #4]
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	3a01      	subs	r2, #1
 8018caa:	6062      	str	r2, [r4, #4]
 8018cac:	6023      	str	r3, [r4, #0]
 8018cae:	e7ec      	b.n	8018c8a <__ssvfiscanf_r+0x3e>
 8018cb0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018cb2:	4621      	mov	r1, r4
 8018cb4:	4630      	mov	r0, r6
 8018cb6:	4798      	blx	r3
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	d0e9      	beq.n	8018c90 <__ssvfiscanf_r+0x44>
 8018cbc:	e7ed      	b.n	8018c9a <__ssvfiscanf_r+0x4e>
 8018cbe:	2b25      	cmp	r3, #37	; 0x25
 8018cc0:	d012      	beq.n	8018ce8 <__ssvfiscanf_r+0x9c>
 8018cc2:	469a      	mov	sl, r3
 8018cc4:	6863      	ldr	r3, [r4, #4]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	f340 8091 	ble.w	8018dee <__ssvfiscanf_r+0x1a2>
 8018ccc:	6822      	ldr	r2, [r4, #0]
 8018cce:	7813      	ldrb	r3, [r2, #0]
 8018cd0:	4553      	cmp	r3, sl
 8018cd2:	f040 812e 	bne.w	8018f32 <__ssvfiscanf_r+0x2e6>
 8018cd6:	6863      	ldr	r3, [r4, #4]
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	6063      	str	r3, [r4, #4]
 8018cdc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018cde:	3201      	adds	r2, #1
 8018ce0:	3301      	adds	r3, #1
 8018ce2:	6022      	str	r2, [r4, #0]
 8018ce4:	9345      	str	r3, [sp, #276]	; 0x114
 8018ce6:	e7d8      	b.n	8018c9a <__ssvfiscanf_r+0x4e>
 8018ce8:	9141      	str	r1, [sp, #260]	; 0x104
 8018cea:	9143      	str	r1, [sp, #268]	; 0x10c
 8018cec:	7853      	ldrb	r3, [r2, #1]
 8018cee:	2b2a      	cmp	r3, #42	; 0x2a
 8018cf0:	bf02      	ittt	eq
 8018cf2:	2310      	moveq	r3, #16
 8018cf4:	1c95      	addeq	r5, r2, #2
 8018cf6:	9341      	streq	r3, [sp, #260]	; 0x104
 8018cf8:	220a      	movs	r2, #10
 8018cfa:	46aa      	mov	sl, r5
 8018cfc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8018d00:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8018d04:	2b09      	cmp	r3, #9
 8018d06:	d91c      	bls.n	8018d42 <__ssvfiscanf_r+0xf6>
 8018d08:	487e      	ldr	r0, [pc, #504]	; (8018f04 <__ssvfiscanf_r+0x2b8>)
 8018d0a:	2203      	movs	r2, #3
 8018d0c:	f7e7 fa70 	bl	80001f0 <memchr>
 8018d10:	b138      	cbz	r0, 8018d22 <__ssvfiscanf_r+0xd6>
 8018d12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018d14:	eba0 0009 	sub.w	r0, r0, r9
 8018d18:	2301      	movs	r3, #1
 8018d1a:	4083      	lsls	r3, r0
 8018d1c:	4313      	orrs	r3, r2
 8018d1e:	9341      	str	r3, [sp, #260]	; 0x104
 8018d20:	4655      	mov	r5, sl
 8018d22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018d26:	2b78      	cmp	r3, #120	; 0x78
 8018d28:	d806      	bhi.n	8018d38 <__ssvfiscanf_r+0xec>
 8018d2a:	2b57      	cmp	r3, #87	; 0x57
 8018d2c:	d810      	bhi.n	8018d50 <__ssvfiscanf_r+0x104>
 8018d2e:	2b25      	cmp	r3, #37	; 0x25
 8018d30:	d0c7      	beq.n	8018cc2 <__ssvfiscanf_r+0x76>
 8018d32:	d857      	bhi.n	8018de4 <__ssvfiscanf_r+0x198>
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d065      	beq.n	8018e04 <__ssvfiscanf_r+0x1b8>
 8018d38:	2303      	movs	r3, #3
 8018d3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8018d3c:	230a      	movs	r3, #10
 8018d3e:	9342      	str	r3, [sp, #264]	; 0x108
 8018d40:	e076      	b.n	8018e30 <__ssvfiscanf_r+0x1e4>
 8018d42:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018d44:	fb02 1103 	mla	r1, r2, r3, r1
 8018d48:	3930      	subs	r1, #48	; 0x30
 8018d4a:	9143      	str	r1, [sp, #268]	; 0x10c
 8018d4c:	4655      	mov	r5, sl
 8018d4e:	e7d4      	b.n	8018cfa <__ssvfiscanf_r+0xae>
 8018d50:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018d54:	2a20      	cmp	r2, #32
 8018d56:	d8ef      	bhi.n	8018d38 <__ssvfiscanf_r+0xec>
 8018d58:	a101      	add	r1, pc, #4	; (adr r1, 8018d60 <__ssvfiscanf_r+0x114>)
 8018d5a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018d5e:	bf00      	nop
 8018d60:	08018e13 	.word	0x08018e13
 8018d64:	08018d39 	.word	0x08018d39
 8018d68:	08018d39 	.word	0x08018d39
 8018d6c:	08018e71 	.word	0x08018e71
 8018d70:	08018d39 	.word	0x08018d39
 8018d74:	08018d39 	.word	0x08018d39
 8018d78:	08018d39 	.word	0x08018d39
 8018d7c:	08018d39 	.word	0x08018d39
 8018d80:	08018d39 	.word	0x08018d39
 8018d84:	08018d39 	.word	0x08018d39
 8018d88:	08018d39 	.word	0x08018d39
 8018d8c:	08018e87 	.word	0x08018e87
 8018d90:	08018e6d 	.word	0x08018e6d
 8018d94:	08018deb 	.word	0x08018deb
 8018d98:	08018deb 	.word	0x08018deb
 8018d9c:	08018deb 	.word	0x08018deb
 8018da0:	08018d39 	.word	0x08018d39
 8018da4:	08018e29 	.word	0x08018e29
 8018da8:	08018d39 	.word	0x08018d39
 8018dac:	08018d39 	.word	0x08018d39
 8018db0:	08018d39 	.word	0x08018d39
 8018db4:	08018d39 	.word	0x08018d39
 8018db8:	08018e97 	.word	0x08018e97
 8018dbc:	08018e65 	.word	0x08018e65
 8018dc0:	08018e0b 	.word	0x08018e0b
 8018dc4:	08018d39 	.word	0x08018d39
 8018dc8:	08018d39 	.word	0x08018d39
 8018dcc:	08018e93 	.word	0x08018e93
 8018dd0:	08018d39 	.word	0x08018d39
 8018dd4:	08018e6d 	.word	0x08018e6d
 8018dd8:	08018d39 	.word	0x08018d39
 8018ddc:	08018d39 	.word	0x08018d39
 8018de0:	08018e13 	.word	0x08018e13
 8018de4:	3b45      	subs	r3, #69	; 0x45
 8018de6:	2b02      	cmp	r3, #2
 8018de8:	d8a6      	bhi.n	8018d38 <__ssvfiscanf_r+0xec>
 8018dea:	2305      	movs	r3, #5
 8018dec:	e01f      	b.n	8018e2e <__ssvfiscanf_r+0x1e2>
 8018dee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018df0:	4621      	mov	r1, r4
 8018df2:	4630      	mov	r0, r6
 8018df4:	4798      	blx	r3
 8018df6:	2800      	cmp	r0, #0
 8018df8:	f43f af68 	beq.w	8018ccc <__ssvfiscanf_r+0x80>
 8018dfc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018dfe:	2800      	cmp	r0, #0
 8018e00:	f040 808d 	bne.w	8018f1e <__ssvfiscanf_r+0x2d2>
 8018e04:	f04f 30ff 	mov.w	r0, #4294967295
 8018e08:	e08f      	b.n	8018f2a <__ssvfiscanf_r+0x2de>
 8018e0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e0c:	f042 0220 	orr.w	r2, r2, #32
 8018e10:	9241      	str	r2, [sp, #260]	; 0x104
 8018e12:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e18:	9241      	str	r2, [sp, #260]	; 0x104
 8018e1a:	2210      	movs	r2, #16
 8018e1c:	2b6f      	cmp	r3, #111	; 0x6f
 8018e1e:	9242      	str	r2, [sp, #264]	; 0x108
 8018e20:	bf34      	ite	cc
 8018e22:	2303      	movcc	r3, #3
 8018e24:	2304      	movcs	r3, #4
 8018e26:	e002      	b.n	8018e2e <__ssvfiscanf_r+0x1e2>
 8018e28:	2300      	movs	r3, #0
 8018e2a:	9342      	str	r3, [sp, #264]	; 0x108
 8018e2c:	2303      	movs	r3, #3
 8018e2e:	9347      	str	r3, [sp, #284]	; 0x11c
 8018e30:	6863      	ldr	r3, [r4, #4]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	dd3d      	ble.n	8018eb2 <__ssvfiscanf_r+0x266>
 8018e36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e38:	0659      	lsls	r1, r3, #25
 8018e3a:	d404      	bmi.n	8018e46 <__ssvfiscanf_r+0x1fa>
 8018e3c:	6823      	ldr	r3, [r4, #0]
 8018e3e:	781a      	ldrb	r2, [r3, #0]
 8018e40:	5cba      	ldrb	r2, [r7, r2]
 8018e42:	0712      	lsls	r2, r2, #28
 8018e44:	d43c      	bmi.n	8018ec0 <__ssvfiscanf_r+0x274>
 8018e46:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018e48:	2b02      	cmp	r3, #2
 8018e4a:	dc4b      	bgt.n	8018ee4 <__ssvfiscanf_r+0x298>
 8018e4c:	466b      	mov	r3, sp
 8018e4e:	4622      	mov	r2, r4
 8018e50:	a941      	add	r1, sp, #260	; 0x104
 8018e52:	4630      	mov	r0, r6
 8018e54:	f000 f872 	bl	8018f3c <_scanf_chars>
 8018e58:	2801      	cmp	r0, #1
 8018e5a:	d06a      	beq.n	8018f32 <__ssvfiscanf_r+0x2e6>
 8018e5c:	2802      	cmp	r0, #2
 8018e5e:	f47f af1c 	bne.w	8018c9a <__ssvfiscanf_r+0x4e>
 8018e62:	e7cb      	b.n	8018dfc <__ssvfiscanf_r+0x1b0>
 8018e64:	2308      	movs	r3, #8
 8018e66:	9342      	str	r3, [sp, #264]	; 0x108
 8018e68:	2304      	movs	r3, #4
 8018e6a:	e7e0      	b.n	8018e2e <__ssvfiscanf_r+0x1e2>
 8018e6c:	220a      	movs	r2, #10
 8018e6e:	e7d5      	b.n	8018e1c <__ssvfiscanf_r+0x1d0>
 8018e70:	4629      	mov	r1, r5
 8018e72:	4640      	mov	r0, r8
 8018e74:	f000 fa5e 	bl	8019334 <__sccl>
 8018e78:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e7e:	9341      	str	r3, [sp, #260]	; 0x104
 8018e80:	4605      	mov	r5, r0
 8018e82:	2301      	movs	r3, #1
 8018e84:	e7d3      	b.n	8018e2e <__ssvfiscanf_r+0x1e2>
 8018e86:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e8c:	9341      	str	r3, [sp, #260]	; 0x104
 8018e8e:	2300      	movs	r3, #0
 8018e90:	e7cd      	b.n	8018e2e <__ssvfiscanf_r+0x1e2>
 8018e92:	2302      	movs	r3, #2
 8018e94:	e7cb      	b.n	8018e2e <__ssvfiscanf_r+0x1e2>
 8018e96:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018e98:	06c3      	lsls	r3, r0, #27
 8018e9a:	f53f aefe 	bmi.w	8018c9a <__ssvfiscanf_r+0x4e>
 8018e9e:	9b00      	ldr	r3, [sp, #0]
 8018ea0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018ea2:	1d19      	adds	r1, r3, #4
 8018ea4:	9100      	str	r1, [sp, #0]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	07c0      	lsls	r0, r0, #31
 8018eaa:	bf4c      	ite	mi
 8018eac:	801a      	strhmi	r2, [r3, #0]
 8018eae:	601a      	strpl	r2, [r3, #0]
 8018eb0:	e6f3      	b.n	8018c9a <__ssvfiscanf_r+0x4e>
 8018eb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018eb4:	4621      	mov	r1, r4
 8018eb6:	4630      	mov	r0, r6
 8018eb8:	4798      	blx	r3
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d0bb      	beq.n	8018e36 <__ssvfiscanf_r+0x1ea>
 8018ebe:	e79d      	b.n	8018dfc <__ssvfiscanf_r+0x1b0>
 8018ec0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018ec2:	3201      	adds	r2, #1
 8018ec4:	9245      	str	r2, [sp, #276]	; 0x114
 8018ec6:	6862      	ldr	r2, [r4, #4]
 8018ec8:	3a01      	subs	r2, #1
 8018eca:	2a00      	cmp	r2, #0
 8018ecc:	6062      	str	r2, [r4, #4]
 8018ece:	dd02      	ble.n	8018ed6 <__ssvfiscanf_r+0x28a>
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	6023      	str	r3, [r4, #0]
 8018ed4:	e7b2      	b.n	8018e3c <__ssvfiscanf_r+0x1f0>
 8018ed6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ed8:	4621      	mov	r1, r4
 8018eda:	4630      	mov	r0, r6
 8018edc:	4798      	blx	r3
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d0ac      	beq.n	8018e3c <__ssvfiscanf_r+0x1f0>
 8018ee2:	e78b      	b.n	8018dfc <__ssvfiscanf_r+0x1b0>
 8018ee4:	2b04      	cmp	r3, #4
 8018ee6:	dc0f      	bgt.n	8018f08 <__ssvfiscanf_r+0x2bc>
 8018ee8:	466b      	mov	r3, sp
 8018eea:	4622      	mov	r2, r4
 8018eec:	a941      	add	r1, sp, #260	; 0x104
 8018eee:	4630      	mov	r0, r6
 8018ef0:	f000 f87e 	bl	8018ff0 <_scanf_i>
 8018ef4:	e7b0      	b.n	8018e58 <__ssvfiscanf_r+0x20c>
 8018ef6:	bf00      	nop
 8018ef8:	08018b99 	.word	0x08018b99
 8018efc:	08018c13 	.word	0x08018c13
 8018f00:	0801ac45 	.word	0x0801ac45
 8018f04:	0801ad4b 	.word	0x0801ad4b
 8018f08:	4b0b      	ldr	r3, [pc, #44]	; (8018f38 <__ssvfiscanf_r+0x2ec>)
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	f43f aec5 	beq.w	8018c9a <__ssvfiscanf_r+0x4e>
 8018f10:	466b      	mov	r3, sp
 8018f12:	4622      	mov	r2, r4
 8018f14:	a941      	add	r1, sp, #260	; 0x104
 8018f16:	4630      	mov	r0, r6
 8018f18:	f7fc ffee 	bl	8015ef8 <_scanf_float>
 8018f1c:	e79c      	b.n	8018e58 <__ssvfiscanf_r+0x20c>
 8018f1e:	89a3      	ldrh	r3, [r4, #12]
 8018f20:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018f24:	bf18      	it	ne
 8018f26:	f04f 30ff 	movne.w	r0, #4294967295
 8018f2a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8018f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f32:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018f34:	e7f9      	b.n	8018f2a <__ssvfiscanf_r+0x2de>
 8018f36:	bf00      	nop
 8018f38:	08015ef9 	.word	0x08015ef9

08018f3c <_scanf_chars>:
 8018f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f40:	4615      	mov	r5, r2
 8018f42:	688a      	ldr	r2, [r1, #8]
 8018f44:	4680      	mov	r8, r0
 8018f46:	460c      	mov	r4, r1
 8018f48:	b932      	cbnz	r2, 8018f58 <_scanf_chars+0x1c>
 8018f4a:	698a      	ldr	r2, [r1, #24]
 8018f4c:	2a00      	cmp	r2, #0
 8018f4e:	bf0c      	ite	eq
 8018f50:	2201      	moveq	r2, #1
 8018f52:	f04f 32ff 	movne.w	r2, #4294967295
 8018f56:	608a      	str	r2, [r1, #8]
 8018f58:	6822      	ldr	r2, [r4, #0]
 8018f5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018fec <_scanf_chars+0xb0>
 8018f5e:	06d1      	lsls	r1, r2, #27
 8018f60:	bf5f      	itttt	pl
 8018f62:	681a      	ldrpl	r2, [r3, #0]
 8018f64:	1d11      	addpl	r1, r2, #4
 8018f66:	6019      	strpl	r1, [r3, #0]
 8018f68:	6816      	ldrpl	r6, [r2, #0]
 8018f6a:	2700      	movs	r7, #0
 8018f6c:	69a0      	ldr	r0, [r4, #24]
 8018f6e:	b188      	cbz	r0, 8018f94 <_scanf_chars+0x58>
 8018f70:	2801      	cmp	r0, #1
 8018f72:	d107      	bne.n	8018f84 <_scanf_chars+0x48>
 8018f74:	682a      	ldr	r2, [r5, #0]
 8018f76:	7811      	ldrb	r1, [r2, #0]
 8018f78:	6962      	ldr	r2, [r4, #20]
 8018f7a:	5c52      	ldrb	r2, [r2, r1]
 8018f7c:	b952      	cbnz	r2, 8018f94 <_scanf_chars+0x58>
 8018f7e:	2f00      	cmp	r7, #0
 8018f80:	d031      	beq.n	8018fe6 <_scanf_chars+0xaa>
 8018f82:	e022      	b.n	8018fca <_scanf_chars+0x8e>
 8018f84:	2802      	cmp	r0, #2
 8018f86:	d120      	bne.n	8018fca <_scanf_chars+0x8e>
 8018f88:	682b      	ldr	r3, [r5, #0]
 8018f8a:	781b      	ldrb	r3, [r3, #0]
 8018f8c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018f90:	071b      	lsls	r3, r3, #28
 8018f92:	d41a      	bmi.n	8018fca <_scanf_chars+0x8e>
 8018f94:	6823      	ldr	r3, [r4, #0]
 8018f96:	06da      	lsls	r2, r3, #27
 8018f98:	bf5e      	ittt	pl
 8018f9a:	682b      	ldrpl	r3, [r5, #0]
 8018f9c:	781b      	ldrbpl	r3, [r3, #0]
 8018f9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018fa2:	682a      	ldr	r2, [r5, #0]
 8018fa4:	686b      	ldr	r3, [r5, #4]
 8018fa6:	3201      	adds	r2, #1
 8018fa8:	602a      	str	r2, [r5, #0]
 8018faa:	68a2      	ldr	r2, [r4, #8]
 8018fac:	3b01      	subs	r3, #1
 8018fae:	3a01      	subs	r2, #1
 8018fb0:	606b      	str	r3, [r5, #4]
 8018fb2:	3701      	adds	r7, #1
 8018fb4:	60a2      	str	r2, [r4, #8]
 8018fb6:	b142      	cbz	r2, 8018fca <_scanf_chars+0x8e>
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	dcd7      	bgt.n	8018f6c <_scanf_chars+0x30>
 8018fbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018fc0:	4629      	mov	r1, r5
 8018fc2:	4640      	mov	r0, r8
 8018fc4:	4798      	blx	r3
 8018fc6:	2800      	cmp	r0, #0
 8018fc8:	d0d0      	beq.n	8018f6c <_scanf_chars+0x30>
 8018fca:	6823      	ldr	r3, [r4, #0]
 8018fcc:	f013 0310 	ands.w	r3, r3, #16
 8018fd0:	d105      	bne.n	8018fde <_scanf_chars+0xa2>
 8018fd2:	68e2      	ldr	r2, [r4, #12]
 8018fd4:	3201      	adds	r2, #1
 8018fd6:	60e2      	str	r2, [r4, #12]
 8018fd8:	69a2      	ldr	r2, [r4, #24]
 8018fda:	b102      	cbz	r2, 8018fde <_scanf_chars+0xa2>
 8018fdc:	7033      	strb	r3, [r6, #0]
 8018fde:	6923      	ldr	r3, [r4, #16]
 8018fe0:	443b      	add	r3, r7
 8018fe2:	6123      	str	r3, [r4, #16]
 8018fe4:	2000      	movs	r0, #0
 8018fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fea:	bf00      	nop
 8018fec:	0801ac45 	.word	0x0801ac45

08018ff0 <_scanf_i>:
 8018ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff4:	4698      	mov	r8, r3
 8018ff6:	4b74      	ldr	r3, [pc, #464]	; (80191c8 <_scanf_i+0x1d8>)
 8018ff8:	460c      	mov	r4, r1
 8018ffa:	4682      	mov	sl, r0
 8018ffc:	4616      	mov	r6, r2
 8018ffe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019002:	b087      	sub	sp, #28
 8019004:	ab03      	add	r3, sp, #12
 8019006:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801900a:	4b70      	ldr	r3, [pc, #448]	; (80191cc <_scanf_i+0x1dc>)
 801900c:	69a1      	ldr	r1, [r4, #24]
 801900e:	4a70      	ldr	r2, [pc, #448]	; (80191d0 <_scanf_i+0x1e0>)
 8019010:	2903      	cmp	r1, #3
 8019012:	bf18      	it	ne
 8019014:	461a      	movne	r2, r3
 8019016:	68a3      	ldr	r3, [r4, #8]
 8019018:	9201      	str	r2, [sp, #4]
 801901a:	1e5a      	subs	r2, r3, #1
 801901c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019020:	bf88      	it	hi
 8019022:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019026:	4627      	mov	r7, r4
 8019028:	bf82      	ittt	hi
 801902a:	eb03 0905 	addhi.w	r9, r3, r5
 801902e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019032:	60a3      	strhi	r3, [r4, #8]
 8019034:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019038:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801903c:	bf98      	it	ls
 801903e:	f04f 0900 	movls.w	r9, #0
 8019042:	6023      	str	r3, [r4, #0]
 8019044:	463d      	mov	r5, r7
 8019046:	f04f 0b00 	mov.w	fp, #0
 801904a:	6831      	ldr	r1, [r6, #0]
 801904c:	ab03      	add	r3, sp, #12
 801904e:	7809      	ldrb	r1, [r1, #0]
 8019050:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019054:	2202      	movs	r2, #2
 8019056:	f7e7 f8cb 	bl	80001f0 <memchr>
 801905a:	b328      	cbz	r0, 80190a8 <_scanf_i+0xb8>
 801905c:	f1bb 0f01 	cmp.w	fp, #1
 8019060:	d159      	bne.n	8019116 <_scanf_i+0x126>
 8019062:	6862      	ldr	r2, [r4, #4]
 8019064:	b92a      	cbnz	r2, 8019072 <_scanf_i+0x82>
 8019066:	6822      	ldr	r2, [r4, #0]
 8019068:	2308      	movs	r3, #8
 801906a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801906e:	6063      	str	r3, [r4, #4]
 8019070:	6022      	str	r2, [r4, #0]
 8019072:	6822      	ldr	r2, [r4, #0]
 8019074:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019078:	6022      	str	r2, [r4, #0]
 801907a:	68a2      	ldr	r2, [r4, #8]
 801907c:	1e51      	subs	r1, r2, #1
 801907e:	60a1      	str	r1, [r4, #8]
 8019080:	b192      	cbz	r2, 80190a8 <_scanf_i+0xb8>
 8019082:	6832      	ldr	r2, [r6, #0]
 8019084:	1c51      	adds	r1, r2, #1
 8019086:	6031      	str	r1, [r6, #0]
 8019088:	7812      	ldrb	r2, [r2, #0]
 801908a:	f805 2b01 	strb.w	r2, [r5], #1
 801908e:	6872      	ldr	r2, [r6, #4]
 8019090:	3a01      	subs	r2, #1
 8019092:	2a00      	cmp	r2, #0
 8019094:	6072      	str	r2, [r6, #4]
 8019096:	dc07      	bgt.n	80190a8 <_scanf_i+0xb8>
 8019098:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801909c:	4631      	mov	r1, r6
 801909e:	4650      	mov	r0, sl
 80190a0:	4790      	blx	r2
 80190a2:	2800      	cmp	r0, #0
 80190a4:	f040 8085 	bne.w	80191b2 <_scanf_i+0x1c2>
 80190a8:	f10b 0b01 	add.w	fp, fp, #1
 80190ac:	f1bb 0f03 	cmp.w	fp, #3
 80190b0:	d1cb      	bne.n	801904a <_scanf_i+0x5a>
 80190b2:	6863      	ldr	r3, [r4, #4]
 80190b4:	b90b      	cbnz	r3, 80190ba <_scanf_i+0xca>
 80190b6:	230a      	movs	r3, #10
 80190b8:	6063      	str	r3, [r4, #4]
 80190ba:	6863      	ldr	r3, [r4, #4]
 80190bc:	4945      	ldr	r1, [pc, #276]	; (80191d4 <_scanf_i+0x1e4>)
 80190be:	6960      	ldr	r0, [r4, #20]
 80190c0:	1ac9      	subs	r1, r1, r3
 80190c2:	f000 f937 	bl	8019334 <__sccl>
 80190c6:	f04f 0b00 	mov.w	fp, #0
 80190ca:	68a3      	ldr	r3, [r4, #8]
 80190cc:	6822      	ldr	r2, [r4, #0]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d03d      	beq.n	801914e <_scanf_i+0x15e>
 80190d2:	6831      	ldr	r1, [r6, #0]
 80190d4:	6960      	ldr	r0, [r4, #20]
 80190d6:	f891 c000 	ldrb.w	ip, [r1]
 80190da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80190de:	2800      	cmp	r0, #0
 80190e0:	d035      	beq.n	801914e <_scanf_i+0x15e>
 80190e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80190e6:	d124      	bne.n	8019132 <_scanf_i+0x142>
 80190e8:	0510      	lsls	r0, r2, #20
 80190ea:	d522      	bpl.n	8019132 <_scanf_i+0x142>
 80190ec:	f10b 0b01 	add.w	fp, fp, #1
 80190f0:	f1b9 0f00 	cmp.w	r9, #0
 80190f4:	d003      	beq.n	80190fe <_scanf_i+0x10e>
 80190f6:	3301      	adds	r3, #1
 80190f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80190fc:	60a3      	str	r3, [r4, #8]
 80190fe:	6873      	ldr	r3, [r6, #4]
 8019100:	3b01      	subs	r3, #1
 8019102:	2b00      	cmp	r3, #0
 8019104:	6073      	str	r3, [r6, #4]
 8019106:	dd1b      	ble.n	8019140 <_scanf_i+0x150>
 8019108:	6833      	ldr	r3, [r6, #0]
 801910a:	3301      	adds	r3, #1
 801910c:	6033      	str	r3, [r6, #0]
 801910e:	68a3      	ldr	r3, [r4, #8]
 8019110:	3b01      	subs	r3, #1
 8019112:	60a3      	str	r3, [r4, #8]
 8019114:	e7d9      	b.n	80190ca <_scanf_i+0xda>
 8019116:	f1bb 0f02 	cmp.w	fp, #2
 801911a:	d1ae      	bne.n	801907a <_scanf_i+0x8a>
 801911c:	6822      	ldr	r2, [r4, #0]
 801911e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019122:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019126:	d1bf      	bne.n	80190a8 <_scanf_i+0xb8>
 8019128:	2310      	movs	r3, #16
 801912a:	6063      	str	r3, [r4, #4]
 801912c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019130:	e7a2      	b.n	8019078 <_scanf_i+0x88>
 8019132:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019136:	6022      	str	r2, [r4, #0]
 8019138:	780b      	ldrb	r3, [r1, #0]
 801913a:	f805 3b01 	strb.w	r3, [r5], #1
 801913e:	e7de      	b.n	80190fe <_scanf_i+0x10e>
 8019140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019144:	4631      	mov	r1, r6
 8019146:	4650      	mov	r0, sl
 8019148:	4798      	blx	r3
 801914a:	2800      	cmp	r0, #0
 801914c:	d0df      	beq.n	801910e <_scanf_i+0x11e>
 801914e:	6823      	ldr	r3, [r4, #0]
 8019150:	05d9      	lsls	r1, r3, #23
 8019152:	d50d      	bpl.n	8019170 <_scanf_i+0x180>
 8019154:	42bd      	cmp	r5, r7
 8019156:	d909      	bls.n	801916c <_scanf_i+0x17c>
 8019158:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801915c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019160:	4632      	mov	r2, r6
 8019162:	4650      	mov	r0, sl
 8019164:	4798      	blx	r3
 8019166:	f105 39ff 	add.w	r9, r5, #4294967295
 801916a:	464d      	mov	r5, r9
 801916c:	42bd      	cmp	r5, r7
 801916e:	d028      	beq.n	80191c2 <_scanf_i+0x1d2>
 8019170:	6822      	ldr	r2, [r4, #0]
 8019172:	f012 0210 	ands.w	r2, r2, #16
 8019176:	d113      	bne.n	80191a0 <_scanf_i+0x1b0>
 8019178:	702a      	strb	r2, [r5, #0]
 801917a:	6863      	ldr	r3, [r4, #4]
 801917c:	9e01      	ldr	r6, [sp, #4]
 801917e:	4639      	mov	r1, r7
 8019180:	4650      	mov	r0, sl
 8019182:	47b0      	blx	r6
 8019184:	f8d8 3000 	ldr.w	r3, [r8]
 8019188:	6821      	ldr	r1, [r4, #0]
 801918a:	1d1a      	adds	r2, r3, #4
 801918c:	f8c8 2000 	str.w	r2, [r8]
 8019190:	f011 0f20 	tst.w	r1, #32
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	d00f      	beq.n	80191b8 <_scanf_i+0x1c8>
 8019198:	6018      	str	r0, [r3, #0]
 801919a:	68e3      	ldr	r3, [r4, #12]
 801919c:	3301      	adds	r3, #1
 801919e:	60e3      	str	r3, [r4, #12]
 80191a0:	6923      	ldr	r3, [r4, #16]
 80191a2:	1bed      	subs	r5, r5, r7
 80191a4:	445d      	add	r5, fp
 80191a6:	442b      	add	r3, r5
 80191a8:	6123      	str	r3, [r4, #16]
 80191aa:	2000      	movs	r0, #0
 80191ac:	b007      	add	sp, #28
 80191ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191b2:	f04f 0b00 	mov.w	fp, #0
 80191b6:	e7ca      	b.n	801914e <_scanf_i+0x15e>
 80191b8:	07ca      	lsls	r2, r1, #31
 80191ba:	bf4c      	ite	mi
 80191bc:	8018      	strhmi	r0, [r3, #0]
 80191be:	6018      	strpl	r0, [r3, #0]
 80191c0:	e7eb      	b.n	801919a <_scanf_i+0x1aa>
 80191c2:	2001      	movs	r0, #1
 80191c4:	e7f2      	b.n	80191ac <_scanf_i+0x1bc>
 80191c6:	bf00      	nop
 80191c8:	0801a4dc 	.word	0x0801a4dc
 80191cc:	0801961d 	.word	0x0801961d
 80191d0:	080188c9 	.word	0x080188c9
 80191d4:	0801ad66 	.word	0x0801ad66

080191d8 <__sflush_r>:
 80191d8:	898a      	ldrh	r2, [r1, #12]
 80191da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191de:	4605      	mov	r5, r0
 80191e0:	0710      	lsls	r0, r2, #28
 80191e2:	460c      	mov	r4, r1
 80191e4:	d458      	bmi.n	8019298 <__sflush_r+0xc0>
 80191e6:	684b      	ldr	r3, [r1, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	dc05      	bgt.n	80191f8 <__sflush_r+0x20>
 80191ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	dc02      	bgt.n	80191f8 <__sflush_r+0x20>
 80191f2:	2000      	movs	r0, #0
 80191f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191fa:	2e00      	cmp	r6, #0
 80191fc:	d0f9      	beq.n	80191f2 <__sflush_r+0x1a>
 80191fe:	2300      	movs	r3, #0
 8019200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019204:	682f      	ldr	r7, [r5, #0]
 8019206:	6a21      	ldr	r1, [r4, #32]
 8019208:	602b      	str	r3, [r5, #0]
 801920a:	d032      	beq.n	8019272 <__sflush_r+0x9a>
 801920c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801920e:	89a3      	ldrh	r3, [r4, #12]
 8019210:	075a      	lsls	r2, r3, #29
 8019212:	d505      	bpl.n	8019220 <__sflush_r+0x48>
 8019214:	6863      	ldr	r3, [r4, #4]
 8019216:	1ac0      	subs	r0, r0, r3
 8019218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801921a:	b10b      	cbz	r3, 8019220 <__sflush_r+0x48>
 801921c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801921e:	1ac0      	subs	r0, r0, r3
 8019220:	2300      	movs	r3, #0
 8019222:	4602      	mov	r2, r0
 8019224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019226:	6a21      	ldr	r1, [r4, #32]
 8019228:	4628      	mov	r0, r5
 801922a:	47b0      	blx	r6
 801922c:	1c43      	adds	r3, r0, #1
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	d106      	bne.n	8019240 <__sflush_r+0x68>
 8019232:	6829      	ldr	r1, [r5, #0]
 8019234:	291d      	cmp	r1, #29
 8019236:	d82b      	bhi.n	8019290 <__sflush_r+0xb8>
 8019238:	4a29      	ldr	r2, [pc, #164]	; (80192e0 <__sflush_r+0x108>)
 801923a:	410a      	asrs	r2, r1
 801923c:	07d6      	lsls	r6, r2, #31
 801923e:	d427      	bmi.n	8019290 <__sflush_r+0xb8>
 8019240:	2200      	movs	r2, #0
 8019242:	6062      	str	r2, [r4, #4]
 8019244:	04d9      	lsls	r1, r3, #19
 8019246:	6922      	ldr	r2, [r4, #16]
 8019248:	6022      	str	r2, [r4, #0]
 801924a:	d504      	bpl.n	8019256 <__sflush_r+0x7e>
 801924c:	1c42      	adds	r2, r0, #1
 801924e:	d101      	bne.n	8019254 <__sflush_r+0x7c>
 8019250:	682b      	ldr	r3, [r5, #0]
 8019252:	b903      	cbnz	r3, 8019256 <__sflush_r+0x7e>
 8019254:	6560      	str	r0, [r4, #84]	; 0x54
 8019256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019258:	602f      	str	r7, [r5, #0]
 801925a:	2900      	cmp	r1, #0
 801925c:	d0c9      	beq.n	80191f2 <__sflush_r+0x1a>
 801925e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019262:	4299      	cmp	r1, r3
 8019264:	d002      	beq.n	801926c <__sflush_r+0x94>
 8019266:	4628      	mov	r0, r5
 8019268:	f7fe f994 	bl	8017594 <_free_r>
 801926c:	2000      	movs	r0, #0
 801926e:	6360      	str	r0, [r4, #52]	; 0x34
 8019270:	e7c0      	b.n	80191f4 <__sflush_r+0x1c>
 8019272:	2301      	movs	r3, #1
 8019274:	4628      	mov	r0, r5
 8019276:	47b0      	blx	r6
 8019278:	1c41      	adds	r1, r0, #1
 801927a:	d1c8      	bne.n	801920e <__sflush_r+0x36>
 801927c:	682b      	ldr	r3, [r5, #0]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d0c5      	beq.n	801920e <__sflush_r+0x36>
 8019282:	2b1d      	cmp	r3, #29
 8019284:	d001      	beq.n	801928a <__sflush_r+0xb2>
 8019286:	2b16      	cmp	r3, #22
 8019288:	d101      	bne.n	801928e <__sflush_r+0xb6>
 801928a:	602f      	str	r7, [r5, #0]
 801928c:	e7b1      	b.n	80191f2 <__sflush_r+0x1a>
 801928e:	89a3      	ldrh	r3, [r4, #12]
 8019290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019294:	81a3      	strh	r3, [r4, #12]
 8019296:	e7ad      	b.n	80191f4 <__sflush_r+0x1c>
 8019298:	690f      	ldr	r7, [r1, #16]
 801929a:	2f00      	cmp	r7, #0
 801929c:	d0a9      	beq.n	80191f2 <__sflush_r+0x1a>
 801929e:	0793      	lsls	r3, r2, #30
 80192a0:	680e      	ldr	r6, [r1, #0]
 80192a2:	bf08      	it	eq
 80192a4:	694b      	ldreq	r3, [r1, #20]
 80192a6:	600f      	str	r7, [r1, #0]
 80192a8:	bf18      	it	ne
 80192aa:	2300      	movne	r3, #0
 80192ac:	eba6 0807 	sub.w	r8, r6, r7
 80192b0:	608b      	str	r3, [r1, #8]
 80192b2:	f1b8 0f00 	cmp.w	r8, #0
 80192b6:	dd9c      	ble.n	80191f2 <__sflush_r+0x1a>
 80192b8:	6a21      	ldr	r1, [r4, #32]
 80192ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192bc:	4643      	mov	r3, r8
 80192be:	463a      	mov	r2, r7
 80192c0:	4628      	mov	r0, r5
 80192c2:	47b0      	blx	r6
 80192c4:	2800      	cmp	r0, #0
 80192c6:	dc06      	bgt.n	80192d6 <__sflush_r+0xfe>
 80192c8:	89a3      	ldrh	r3, [r4, #12]
 80192ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192ce:	81a3      	strh	r3, [r4, #12]
 80192d0:	f04f 30ff 	mov.w	r0, #4294967295
 80192d4:	e78e      	b.n	80191f4 <__sflush_r+0x1c>
 80192d6:	4407      	add	r7, r0
 80192d8:	eba8 0800 	sub.w	r8, r8, r0
 80192dc:	e7e9      	b.n	80192b2 <__sflush_r+0xda>
 80192de:	bf00      	nop
 80192e0:	dfbffffe 	.word	0xdfbffffe

080192e4 <_fflush_r>:
 80192e4:	b538      	push	{r3, r4, r5, lr}
 80192e6:	690b      	ldr	r3, [r1, #16]
 80192e8:	4605      	mov	r5, r0
 80192ea:	460c      	mov	r4, r1
 80192ec:	b913      	cbnz	r3, 80192f4 <_fflush_r+0x10>
 80192ee:	2500      	movs	r5, #0
 80192f0:	4628      	mov	r0, r5
 80192f2:	bd38      	pop	{r3, r4, r5, pc}
 80192f4:	b118      	cbz	r0, 80192fe <_fflush_r+0x1a>
 80192f6:	6a03      	ldr	r3, [r0, #32]
 80192f8:	b90b      	cbnz	r3, 80192fe <_fflush_r+0x1a>
 80192fa:	f7fd f899 	bl	8016430 <__sinit>
 80192fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019302:	2b00      	cmp	r3, #0
 8019304:	d0f3      	beq.n	80192ee <_fflush_r+0xa>
 8019306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019308:	07d0      	lsls	r0, r2, #31
 801930a:	d404      	bmi.n	8019316 <_fflush_r+0x32>
 801930c:	0599      	lsls	r1, r3, #22
 801930e:	d402      	bmi.n	8019316 <_fflush_r+0x32>
 8019310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019312:	f7fd fa9c 	bl	801684e <__retarget_lock_acquire_recursive>
 8019316:	4628      	mov	r0, r5
 8019318:	4621      	mov	r1, r4
 801931a:	f7ff ff5d 	bl	80191d8 <__sflush_r>
 801931e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019320:	07da      	lsls	r2, r3, #31
 8019322:	4605      	mov	r5, r0
 8019324:	d4e4      	bmi.n	80192f0 <_fflush_r+0xc>
 8019326:	89a3      	ldrh	r3, [r4, #12]
 8019328:	059b      	lsls	r3, r3, #22
 801932a:	d4e1      	bmi.n	80192f0 <_fflush_r+0xc>
 801932c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801932e:	f7fd fa8f 	bl	8016850 <__retarget_lock_release_recursive>
 8019332:	e7dd      	b.n	80192f0 <_fflush_r+0xc>

08019334 <__sccl>:
 8019334:	b570      	push	{r4, r5, r6, lr}
 8019336:	780b      	ldrb	r3, [r1, #0]
 8019338:	4604      	mov	r4, r0
 801933a:	2b5e      	cmp	r3, #94	; 0x5e
 801933c:	bf0b      	itete	eq
 801933e:	784b      	ldrbeq	r3, [r1, #1]
 8019340:	1c4a      	addne	r2, r1, #1
 8019342:	1c8a      	addeq	r2, r1, #2
 8019344:	2100      	movne	r1, #0
 8019346:	bf08      	it	eq
 8019348:	2101      	moveq	r1, #1
 801934a:	3801      	subs	r0, #1
 801934c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019350:	f800 1f01 	strb.w	r1, [r0, #1]!
 8019354:	42a8      	cmp	r0, r5
 8019356:	d1fb      	bne.n	8019350 <__sccl+0x1c>
 8019358:	b90b      	cbnz	r3, 801935e <__sccl+0x2a>
 801935a:	1e50      	subs	r0, r2, #1
 801935c:	bd70      	pop	{r4, r5, r6, pc}
 801935e:	f081 0101 	eor.w	r1, r1, #1
 8019362:	54e1      	strb	r1, [r4, r3]
 8019364:	4610      	mov	r0, r2
 8019366:	4602      	mov	r2, r0
 8019368:	f812 5b01 	ldrb.w	r5, [r2], #1
 801936c:	2d2d      	cmp	r5, #45	; 0x2d
 801936e:	d005      	beq.n	801937c <__sccl+0x48>
 8019370:	2d5d      	cmp	r5, #93	; 0x5d
 8019372:	d016      	beq.n	80193a2 <__sccl+0x6e>
 8019374:	2d00      	cmp	r5, #0
 8019376:	d0f1      	beq.n	801935c <__sccl+0x28>
 8019378:	462b      	mov	r3, r5
 801937a:	e7f2      	b.n	8019362 <__sccl+0x2e>
 801937c:	7846      	ldrb	r6, [r0, #1]
 801937e:	2e5d      	cmp	r6, #93	; 0x5d
 8019380:	d0fa      	beq.n	8019378 <__sccl+0x44>
 8019382:	42b3      	cmp	r3, r6
 8019384:	dcf8      	bgt.n	8019378 <__sccl+0x44>
 8019386:	3002      	adds	r0, #2
 8019388:	461a      	mov	r2, r3
 801938a:	3201      	adds	r2, #1
 801938c:	4296      	cmp	r6, r2
 801938e:	54a1      	strb	r1, [r4, r2]
 8019390:	dcfb      	bgt.n	801938a <__sccl+0x56>
 8019392:	1af2      	subs	r2, r6, r3
 8019394:	3a01      	subs	r2, #1
 8019396:	1c5d      	adds	r5, r3, #1
 8019398:	42b3      	cmp	r3, r6
 801939a:	bfa8      	it	ge
 801939c:	2200      	movge	r2, #0
 801939e:	18ab      	adds	r3, r5, r2
 80193a0:	e7e1      	b.n	8019366 <__sccl+0x32>
 80193a2:	4610      	mov	r0, r2
 80193a4:	e7da      	b.n	801935c <__sccl+0x28>

080193a6 <__submore>:
 80193a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193aa:	460c      	mov	r4, r1
 80193ac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80193ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193b2:	4299      	cmp	r1, r3
 80193b4:	d11d      	bne.n	80193f2 <__submore+0x4c>
 80193b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80193ba:	f7fe fcb7 	bl	8017d2c <_malloc_r>
 80193be:	b918      	cbnz	r0, 80193c8 <__submore+0x22>
 80193c0:	f04f 30ff 	mov.w	r0, #4294967295
 80193c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80193ce:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80193d2:	6360      	str	r0, [r4, #52]	; 0x34
 80193d4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80193d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80193dc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80193e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80193e4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80193e8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80193ec:	6020      	str	r0, [r4, #0]
 80193ee:	2000      	movs	r0, #0
 80193f0:	e7e8      	b.n	80193c4 <__submore+0x1e>
 80193f2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80193f4:	0077      	lsls	r7, r6, #1
 80193f6:	463a      	mov	r2, r7
 80193f8:	f000 f86e 	bl	80194d8 <_realloc_r>
 80193fc:	4605      	mov	r5, r0
 80193fe:	2800      	cmp	r0, #0
 8019400:	d0de      	beq.n	80193c0 <__submore+0x1a>
 8019402:	eb00 0806 	add.w	r8, r0, r6
 8019406:	4601      	mov	r1, r0
 8019408:	4632      	mov	r2, r6
 801940a:	4640      	mov	r0, r8
 801940c:	f7fd fa29 	bl	8016862 <memcpy>
 8019410:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019414:	f8c4 8000 	str.w	r8, [r4]
 8019418:	e7e9      	b.n	80193ee <__submore+0x48>

0801941a <memmove>:
 801941a:	4288      	cmp	r0, r1
 801941c:	b510      	push	{r4, lr}
 801941e:	eb01 0402 	add.w	r4, r1, r2
 8019422:	d902      	bls.n	801942a <memmove+0x10>
 8019424:	4284      	cmp	r4, r0
 8019426:	4623      	mov	r3, r4
 8019428:	d807      	bhi.n	801943a <memmove+0x20>
 801942a:	1e43      	subs	r3, r0, #1
 801942c:	42a1      	cmp	r1, r4
 801942e:	d008      	beq.n	8019442 <memmove+0x28>
 8019430:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019434:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019438:	e7f8      	b.n	801942c <memmove+0x12>
 801943a:	4402      	add	r2, r0
 801943c:	4601      	mov	r1, r0
 801943e:	428a      	cmp	r2, r1
 8019440:	d100      	bne.n	8019444 <memmove+0x2a>
 8019442:	bd10      	pop	{r4, pc}
 8019444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019448:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801944c:	e7f7      	b.n	801943e <memmove+0x24>
	...

08019450 <_sbrk_r>:
 8019450:	b538      	push	{r3, r4, r5, lr}
 8019452:	4d06      	ldr	r5, [pc, #24]	; (801946c <_sbrk_r+0x1c>)
 8019454:	2300      	movs	r3, #0
 8019456:	4604      	mov	r4, r0
 8019458:	4608      	mov	r0, r1
 801945a:	602b      	str	r3, [r5, #0]
 801945c:	f7ee fac8 	bl	80079f0 <_sbrk>
 8019460:	1c43      	adds	r3, r0, #1
 8019462:	d102      	bne.n	801946a <_sbrk_r+0x1a>
 8019464:	682b      	ldr	r3, [r5, #0]
 8019466:	b103      	cbz	r3, 801946a <_sbrk_r+0x1a>
 8019468:	6023      	str	r3, [r4, #0]
 801946a:	bd38      	pop	{r3, r4, r5, pc}
 801946c:	2000739c 	.word	0x2000739c

08019470 <__assert_func>:
 8019470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019472:	4614      	mov	r4, r2
 8019474:	461a      	mov	r2, r3
 8019476:	4b09      	ldr	r3, [pc, #36]	; (801949c <__assert_func+0x2c>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4605      	mov	r5, r0
 801947c:	68d8      	ldr	r0, [r3, #12]
 801947e:	b14c      	cbz	r4, 8019494 <__assert_func+0x24>
 8019480:	4b07      	ldr	r3, [pc, #28]	; (80194a0 <__assert_func+0x30>)
 8019482:	9100      	str	r1, [sp, #0]
 8019484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019488:	4906      	ldr	r1, [pc, #24]	; (80194a4 <__assert_func+0x34>)
 801948a:	462b      	mov	r3, r5
 801948c:	f000 f8c8 	bl	8019620 <fiprintf>
 8019490:	f000 f8d8 	bl	8019644 <abort>
 8019494:	4b04      	ldr	r3, [pc, #16]	; (80194a8 <__assert_func+0x38>)
 8019496:	461c      	mov	r4, r3
 8019498:	e7f3      	b.n	8019482 <__assert_func+0x12>
 801949a:	bf00      	nop
 801949c:	20000330 	.word	0x20000330
 80194a0:	0801ad71 	.word	0x0801ad71
 80194a4:	0801ad7e 	.word	0x0801ad7e
 80194a8:	0801adac 	.word	0x0801adac

080194ac <_calloc_r>:
 80194ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80194ae:	fba1 2402 	umull	r2, r4, r1, r2
 80194b2:	b94c      	cbnz	r4, 80194c8 <_calloc_r+0x1c>
 80194b4:	4611      	mov	r1, r2
 80194b6:	9201      	str	r2, [sp, #4]
 80194b8:	f7fe fc38 	bl	8017d2c <_malloc_r>
 80194bc:	9a01      	ldr	r2, [sp, #4]
 80194be:	4605      	mov	r5, r0
 80194c0:	b930      	cbnz	r0, 80194d0 <_calloc_r+0x24>
 80194c2:	4628      	mov	r0, r5
 80194c4:	b003      	add	sp, #12
 80194c6:	bd30      	pop	{r4, r5, pc}
 80194c8:	220c      	movs	r2, #12
 80194ca:	6002      	str	r2, [r0, #0]
 80194cc:	2500      	movs	r5, #0
 80194ce:	e7f8      	b.n	80194c2 <_calloc_r+0x16>
 80194d0:	4621      	mov	r1, r4
 80194d2:	f7fd f8a8 	bl	8016626 <memset>
 80194d6:	e7f4      	b.n	80194c2 <_calloc_r+0x16>

080194d8 <_realloc_r>:
 80194d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194dc:	4680      	mov	r8, r0
 80194de:	4614      	mov	r4, r2
 80194e0:	460e      	mov	r6, r1
 80194e2:	b921      	cbnz	r1, 80194ee <_realloc_r+0x16>
 80194e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194e8:	4611      	mov	r1, r2
 80194ea:	f7fe bc1f 	b.w	8017d2c <_malloc_r>
 80194ee:	b92a      	cbnz	r2, 80194fc <_realloc_r+0x24>
 80194f0:	f7fe f850 	bl	8017594 <_free_r>
 80194f4:	4625      	mov	r5, r4
 80194f6:	4628      	mov	r0, r5
 80194f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194fc:	f000 f8a9 	bl	8019652 <_malloc_usable_size_r>
 8019500:	4284      	cmp	r4, r0
 8019502:	4607      	mov	r7, r0
 8019504:	d802      	bhi.n	801950c <_realloc_r+0x34>
 8019506:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801950a:	d812      	bhi.n	8019532 <_realloc_r+0x5a>
 801950c:	4621      	mov	r1, r4
 801950e:	4640      	mov	r0, r8
 8019510:	f7fe fc0c 	bl	8017d2c <_malloc_r>
 8019514:	4605      	mov	r5, r0
 8019516:	2800      	cmp	r0, #0
 8019518:	d0ed      	beq.n	80194f6 <_realloc_r+0x1e>
 801951a:	42bc      	cmp	r4, r7
 801951c:	4622      	mov	r2, r4
 801951e:	4631      	mov	r1, r6
 8019520:	bf28      	it	cs
 8019522:	463a      	movcs	r2, r7
 8019524:	f7fd f99d 	bl	8016862 <memcpy>
 8019528:	4631      	mov	r1, r6
 801952a:	4640      	mov	r0, r8
 801952c:	f7fe f832 	bl	8017594 <_free_r>
 8019530:	e7e1      	b.n	80194f6 <_realloc_r+0x1e>
 8019532:	4635      	mov	r5, r6
 8019534:	e7df      	b.n	80194f6 <_realloc_r+0x1e>
	...

08019538 <_strtoul_l.constprop.0>:
 8019538:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801953c:	4f36      	ldr	r7, [pc, #216]	; (8019618 <_strtoul_l.constprop.0+0xe0>)
 801953e:	4686      	mov	lr, r0
 8019540:	460d      	mov	r5, r1
 8019542:	4628      	mov	r0, r5
 8019544:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019548:	5d3e      	ldrb	r6, [r7, r4]
 801954a:	f016 0608 	ands.w	r6, r6, #8
 801954e:	d1f8      	bne.n	8019542 <_strtoul_l.constprop.0+0xa>
 8019550:	2c2d      	cmp	r4, #45	; 0x2d
 8019552:	d130      	bne.n	80195b6 <_strtoul_l.constprop.0+0x7e>
 8019554:	782c      	ldrb	r4, [r5, #0]
 8019556:	2601      	movs	r6, #1
 8019558:	1c85      	adds	r5, r0, #2
 801955a:	2b00      	cmp	r3, #0
 801955c:	d057      	beq.n	801960e <_strtoul_l.constprop.0+0xd6>
 801955e:	2b10      	cmp	r3, #16
 8019560:	d109      	bne.n	8019576 <_strtoul_l.constprop.0+0x3e>
 8019562:	2c30      	cmp	r4, #48	; 0x30
 8019564:	d107      	bne.n	8019576 <_strtoul_l.constprop.0+0x3e>
 8019566:	7828      	ldrb	r0, [r5, #0]
 8019568:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801956c:	2858      	cmp	r0, #88	; 0x58
 801956e:	d149      	bne.n	8019604 <_strtoul_l.constprop.0+0xcc>
 8019570:	786c      	ldrb	r4, [r5, #1]
 8019572:	2310      	movs	r3, #16
 8019574:	3502      	adds	r5, #2
 8019576:	f04f 38ff 	mov.w	r8, #4294967295
 801957a:	2700      	movs	r7, #0
 801957c:	fbb8 f8f3 	udiv	r8, r8, r3
 8019580:	fb03 f908 	mul.w	r9, r3, r8
 8019584:	ea6f 0909 	mvn.w	r9, r9
 8019588:	4638      	mov	r0, r7
 801958a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801958e:	f1bc 0f09 	cmp.w	ip, #9
 8019592:	d815      	bhi.n	80195c0 <_strtoul_l.constprop.0+0x88>
 8019594:	4664      	mov	r4, ip
 8019596:	42a3      	cmp	r3, r4
 8019598:	dd23      	ble.n	80195e2 <_strtoul_l.constprop.0+0xaa>
 801959a:	f1b7 3fff 	cmp.w	r7, #4294967295
 801959e:	d007      	beq.n	80195b0 <_strtoul_l.constprop.0+0x78>
 80195a0:	4580      	cmp	r8, r0
 80195a2:	d31b      	bcc.n	80195dc <_strtoul_l.constprop.0+0xa4>
 80195a4:	d101      	bne.n	80195aa <_strtoul_l.constprop.0+0x72>
 80195a6:	45a1      	cmp	r9, r4
 80195a8:	db18      	blt.n	80195dc <_strtoul_l.constprop.0+0xa4>
 80195aa:	fb00 4003 	mla	r0, r0, r3, r4
 80195ae:	2701      	movs	r7, #1
 80195b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80195b4:	e7e9      	b.n	801958a <_strtoul_l.constprop.0+0x52>
 80195b6:	2c2b      	cmp	r4, #43	; 0x2b
 80195b8:	bf04      	itt	eq
 80195ba:	782c      	ldrbeq	r4, [r5, #0]
 80195bc:	1c85      	addeq	r5, r0, #2
 80195be:	e7cc      	b.n	801955a <_strtoul_l.constprop.0+0x22>
 80195c0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80195c4:	f1bc 0f19 	cmp.w	ip, #25
 80195c8:	d801      	bhi.n	80195ce <_strtoul_l.constprop.0+0x96>
 80195ca:	3c37      	subs	r4, #55	; 0x37
 80195cc:	e7e3      	b.n	8019596 <_strtoul_l.constprop.0+0x5e>
 80195ce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80195d2:	f1bc 0f19 	cmp.w	ip, #25
 80195d6:	d804      	bhi.n	80195e2 <_strtoul_l.constprop.0+0xaa>
 80195d8:	3c57      	subs	r4, #87	; 0x57
 80195da:	e7dc      	b.n	8019596 <_strtoul_l.constprop.0+0x5e>
 80195dc:	f04f 37ff 	mov.w	r7, #4294967295
 80195e0:	e7e6      	b.n	80195b0 <_strtoul_l.constprop.0+0x78>
 80195e2:	1c7b      	adds	r3, r7, #1
 80195e4:	d106      	bne.n	80195f4 <_strtoul_l.constprop.0+0xbc>
 80195e6:	2322      	movs	r3, #34	; 0x22
 80195e8:	f8ce 3000 	str.w	r3, [lr]
 80195ec:	4638      	mov	r0, r7
 80195ee:	b932      	cbnz	r2, 80195fe <_strtoul_l.constprop.0+0xc6>
 80195f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195f4:	b106      	cbz	r6, 80195f8 <_strtoul_l.constprop.0+0xc0>
 80195f6:	4240      	negs	r0, r0
 80195f8:	2a00      	cmp	r2, #0
 80195fa:	d0f9      	beq.n	80195f0 <_strtoul_l.constprop.0+0xb8>
 80195fc:	b107      	cbz	r7, 8019600 <_strtoul_l.constprop.0+0xc8>
 80195fe:	1e69      	subs	r1, r5, #1
 8019600:	6011      	str	r1, [r2, #0]
 8019602:	e7f5      	b.n	80195f0 <_strtoul_l.constprop.0+0xb8>
 8019604:	2430      	movs	r4, #48	; 0x30
 8019606:	2b00      	cmp	r3, #0
 8019608:	d1b5      	bne.n	8019576 <_strtoul_l.constprop.0+0x3e>
 801960a:	2308      	movs	r3, #8
 801960c:	e7b3      	b.n	8019576 <_strtoul_l.constprop.0+0x3e>
 801960e:	2c30      	cmp	r4, #48	; 0x30
 8019610:	d0a9      	beq.n	8019566 <_strtoul_l.constprop.0+0x2e>
 8019612:	230a      	movs	r3, #10
 8019614:	e7af      	b.n	8019576 <_strtoul_l.constprop.0+0x3e>
 8019616:	bf00      	nop
 8019618:	0801ac45 	.word	0x0801ac45

0801961c <_strtoul_r>:
 801961c:	f7ff bf8c 	b.w	8019538 <_strtoul_l.constprop.0>

08019620 <fiprintf>:
 8019620:	b40e      	push	{r1, r2, r3}
 8019622:	b503      	push	{r0, r1, lr}
 8019624:	4601      	mov	r1, r0
 8019626:	ab03      	add	r3, sp, #12
 8019628:	4805      	ldr	r0, [pc, #20]	; (8019640 <fiprintf+0x20>)
 801962a:	f853 2b04 	ldr.w	r2, [r3], #4
 801962e:	6800      	ldr	r0, [r0, #0]
 8019630:	9301      	str	r3, [sp, #4]
 8019632:	f000 f83f 	bl	80196b4 <_vfiprintf_r>
 8019636:	b002      	add	sp, #8
 8019638:	f85d eb04 	ldr.w	lr, [sp], #4
 801963c:	b003      	add	sp, #12
 801963e:	4770      	bx	lr
 8019640:	20000330 	.word	0x20000330

08019644 <abort>:
 8019644:	b508      	push	{r3, lr}
 8019646:	2006      	movs	r0, #6
 8019648:	f000 fa0c 	bl	8019a64 <raise>
 801964c:	2001      	movs	r0, #1
 801964e:	f7ee f957 	bl	8007900 <_exit>

08019652 <_malloc_usable_size_r>:
 8019652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019656:	1f18      	subs	r0, r3, #4
 8019658:	2b00      	cmp	r3, #0
 801965a:	bfbc      	itt	lt
 801965c:	580b      	ldrlt	r3, [r1, r0]
 801965e:	18c0      	addlt	r0, r0, r3
 8019660:	4770      	bx	lr

08019662 <__sfputc_r>:
 8019662:	6893      	ldr	r3, [r2, #8]
 8019664:	3b01      	subs	r3, #1
 8019666:	2b00      	cmp	r3, #0
 8019668:	b410      	push	{r4}
 801966a:	6093      	str	r3, [r2, #8]
 801966c:	da08      	bge.n	8019680 <__sfputc_r+0x1e>
 801966e:	6994      	ldr	r4, [r2, #24]
 8019670:	42a3      	cmp	r3, r4
 8019672:	db01      	blt.n	8019678 <__sfputc_r+0x16>
 8019674:	290a      	cmp	r1, #10
 8019676:	d103      	bne.n	8019680 <__sfputc_r+0x1e>
 8019678:	f85d 4b04 	ldr.w	r4, [sp], #4
 801967c:	f000 b934 	b.w	80198e8 <__swbuf_r>
 8019680:	6813      	ldr	r3, [r2, #0]
 8019682:	1c58      	adds	r0, r3, #1
 8019684:	6010      	str	r0, [r2, #0]
 8019686:	7019      	strb	r1, [r3, #0]
 8019688:	4608      	mov	r0, r1
 801968a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801968e:	4770      	bx	lr

08019690 <__sfputs_r>:
 8019690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019692:	4606      	mov	r6, r0
 8019694:	460f      	mov	r7, r1
 8019696:	4614      	mov	r4, r2
 8019698:	18d5      	adds	r5, r2, r3
 801969a:	42ac      	cmp	r4, r5
 801969c:	d101      	bne.n	80196a2 <__sfputs_r+0x12>
 801969e:	2000      	movs	r0, #0
 80196a0:	e007      	b.n	80196b2 <__sfputs_r+0x22>
 80196a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80196a6:	463a      	mov	r2, r7
 80196a8:	4630      	mov	r0, r6
 80196aa:	f7ff ffda 	bl	8019662 <__sfputc_r>
 80196ae:	1c43      	adds	r3, r0, #1
 80196b0:	d1f3      	bne.n	801969a <__sfputs_r+0xa>
 80196b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080196b4 <_vfiprintf_r>:
 80196b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b8:	460d      	mov	r5, r1
 80196ba:	b09d      	sub	sp, #116	; 0x74
 80196bc:	4614      	mov	r4, r2
 80196be:	4698      	mov	r8, r3
 80196c0:	4606      	mov	r6, r0
 80196c2:	b118      	cbz	r0, 80196cc <_vfiprintf_r+0x18>
 80196c4:	6a03      	ldr	r3, [r0, #32]
 80196c6:	b90b      	cbnz	r3, 80196cc <_vfiprintf_r+0x18>
 80196c8:	f7fc feb2 	bl	8016430 <__sinit>
 80196cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196ce:	07d9      	lsls	r1, r3, #31
 80196d0:	d405      	bmi.n	80196de <_vfiprintf_r+0x2a>
 80196d2:	89ab      	ldrh	r3, [r5, #12]
 80196d4:	059a      	lsls	r2, r3, #22
 80196d6:	d402      	bmi.n	80196de <_vfiprintf_r+0x2a>
 80196d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196da:	f7fd f8b8 	bl	801684e <__retarget_lock_acquire_recursive>
 80196de:	89ab      	ldrh	r3, [r5, #12]
 80196e0:	071b      	lsls	r3, r3, #28
 80196e2:	d501      	bpl.n	80196e8 <_vfiprintf_r+0x34>
 80196e4:	692b      	ldr	r3, [r5, #16]
 80196e6:	b99b      	cbnz	r3, 8019710 <_vfiprintf_r+0x5c>
 80196e8:	4629      	mov	r1, r5
 80196ea:	4630      	mov	r0, r6
 80196ec:	f000 f93a 	bl	8019964 <__swsetup_r>
 80196f0:	b170      	cbz	r0, 8019710 <_vfiprintf_r+0x5c>
 80196f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196f4:	07dc      	lsls	r4, r3, #31
 80196f6:	d504      	bpl.n	8019702 <_vfiprintf_r+0x4e>
 80196f8:	f04f 30ff 	mov.w	r0, #4294967295
 80196fc:	b01d      	add	sp, #116	; 0x74
 80196fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019702:	89ab      	ldrh	r3, [r5, #12]
 8019704:	0598      	lsls	r0, r3, #22
 8019706:	d4f7      	bmi.n	80196f8 <_vfiprintf_r+0x44>
 8019708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801970a:	f7fd f8a1 	bl	8016850 <__retarget_lock_release_recursive>
 801970e:	e7f3      	b.n	80196f8 <_vfiprintf_r+0x44>
 8019710:	2300      	movs	r3, #0
 8019712:	9309      	str	r3, [sp, #36]	; 0x24
 8019714:	2320      	movs	r3, #32
 8019716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801971a:	f8cd 800c 	str.w	r8, [sp, #12]
 801971e:	2330      	movs	r3, #48	; 0x30
 8019720:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80198d4 <_vfiprintf_r+0x220>
 8019724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019728:	f04f 0901 	mov.w	r9, #1
 801972c:	4623      	mov	r3, r4
 801972e:	469a      	mov	sl, r3
 8019730:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019734:	b10a      	cbz	r2, 801973a <_vfiprintf_r+0x86>
 8019736:	2a25      	cmp	r2, #37	; 0x25
 8019738:	d1f9      	bne.n	801972e <_vfiprintf_r+0x7a>
 801973a:	ebba 0b04 	subs.w	fp, sl, r4
 801973e:	d00b      	beq.n	8019758 <_vfiprintf_r+0xa4>
 8019740:	465b      	mov	r3, fp
 8019742:	4622      	mov	r2, r4
 8019744:	4629      	mov	r1, r5
 8019746:	4630      	mov	r0, r6
 8019748:	f7ff ffa2 	bl	8019690 <__sfputs_r>
 801974c:	3001      	adds	r0, #1
 801974e:	f000 80a9 	beq.w	80198a4 <_vfiprintf_r+0x1f0>
 8019752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019754:	445a      	add	r2, fp
 8019756:	9209      	str	r2, [sp, #36]	; 0x24
 8019758:	f89a 3000 	ldrb.w	r3, [sl]
 801975c:	2b00      	cmp	r3, #0
 801975e:	f000 80a1 	beq.w	80198a4 <_vfiprintf_r+0x1f0>
 8019762:	2300      	movs	r3, #0
 8019764:	f04f 32ff 	mov.w	r2, #4294967295
 8019768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801976c:	f10a 0a01 	add.w	sl, sl, #1
 8019770:	9304      	str	r3, [sp, #16]
 8019772:	9307      	str	r3, [sp, #28]
 8019774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019778:	931a      	str	r3, [sp, #104]	; 0x68
 801977a:	4654      	mov	r4, sl
 801977c:	2205      	movs	r2, #5
 801977e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019782:	4854      	ldr	r0, [pc, #336]	; (80198d4 <_vfiprintf_r+0x220>)
 8019784:	f7e6 fd34 	bl	80001f0 <memchr>
 8019788:	9a04      	ldr	r2, [sp, #16]
 801978a:	b9d8      	cbnz	r0, 80197c4 <_vfiprintf_r+0x110>
 801978c:	06d1      	lsls	r1, r2, #27
 801978e:	bf44      	itt	mi
 8019790:	2320      	movmi	r3, #32
 8019792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019796:	0713      	lsls	r3, r2, #28
 8019798:	bf44      	itt	mi
 801979a:	232b      	movmi	r3, #43	; 0x2b
 801979c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80197a0:	f89a 3000 	ldrb.w	r3, [sl]
 80197a4:	2b2a      	cmp	r3, #42	; 0x2a
 80197a6:	d015      	beq.n	80197d4 <_vfiprintf_r+0x120>
 80197a8:	9a07      	ldr	r2, [sp, #28]
 80197aa:	4654      	mov	r4, sl
 80197ac:	2000      	movs	r0, #0
 80197ae:	f04f 0c0a 	mov.w	ip, #10
 80197b2:	4621      	mov	r1, r4
 80197b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80197b8:	3b30      	subs	r3, #48	; 0x30
 80197ba:	2b09      	cmp	r3, #9
 80197bc:	d94d      	bls.n	801985a <_vfiprintf_r+0x1a6>
 80197be:	b1b0      	cbz	r0, 80197ee <_vfiprintf_r+0x13a>
 80197c0:	9207      	str	r2, [sp, #28]
 80197c2:	e014      	b.n	80197ee <_vfiprintf_r+0x13a>
 80197c4:	eba0 0308 	sub.w	r3, r0, r8
 80197c8:	fa09 f303 	lsl.w	r3, r9, r3
 80197cc:	4313      	orrs	r3, r2
 80197ce:	9304      	str	r3, [sp, #16]
 80197d0:	46a2      	mov	sl, r4
 80197d2:	e7d2      	b.n	801977a <_vfiprintf_r+0xc6>
 80197d4:	9b03      	ldr	r3, [sp, #12]
 80197d6:	1d19      	adds	r1, r3, #4
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	9103      	str	r1, [sp, #12]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	bfbb      	ittet	lt
 80197e0:	425b      	neglt	r3, r3
 80197e2:	f042 0202 	orrlt.w	r2, r2, #2
 80197e6:	9307      	strge	r3, [sp, #28]
 80197e8:	9307      	strlt	r3, [sp, #28]
 80197ea:	bfb8      	it	lt
 80197ec:	9204      	strlt	r2, [sp, #16]
 80197ee:	7823      	ldrb	r3, [r4, #0]
 80197f0:	2b2e      	cmp	r3, #46	; 0x2e
 80197f2:	d10c      	bne.n	801980e <_vfiprintf_r+0x15a>
 80197f4:	7863      	ldrb	r3, [r4, #1]
 80197f6:	2b2a      	cmp	r3, #42	; 0x2a
 80197f8:	d134      	bne.n	8019864 <_vfiprintf_r+0x1b0>
 80197fa:	9b03      	ldr	r3, [sp, #12]
 80197fc:	1d1a      	adds	r2, r3, #4
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	9203      	str	r2, [sp, #12]
 8019802:	2b00      	cmp	r3, #0
 8019804:	bfb8      	it	lt
 8019806:	f04f 33ff 	movlt.w	r3, #4294967295
 801980a:	3402      	adds	r4, #2
 801980c:	9305      	str	r3, [sp, #20]
 801980e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80198e4 <_vfiprintf_r+0x230>
 8019812:	7821      	ldrb	r1, [r4, #0]
 8019814:	2203      	movs	r2, #3
 8019816:	4650      	mov	r0, sl
 8019818:	f7e6 fcea 	bl	80001f0 <memchr>
 801981c:	b138      	cbz	r0, 801982e <_vfiprintf_r+0x17a>
 801981e:	9b04      	ldr	r3, [sp, #16]
 8019820:	eba0 000a 	sub.w	r0, r0, sl
 8019824:	2240      	movs	r2, #64	; 0x40
 8019826:	4082      	lsls	r2, r0
 8019828:	4313      	orrs	r3, r2
 801982a:	3401      	adds	r4, #1
 801982c:	9304      	str	r3, [sp, #16]
 801982e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019832:	4829      	ldr	r0, [pc, #164]	; (80198d8 <_vfiprintf_r+0x224>)
 8019834:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019838:	2206      	movs	r2, #6
 801983a:	f7e6 fcd9 	bl	80001f0 <memchr>
 801983e:	2800      	cmp	r0, #0
 8019840:	d03f      	beq.n	80198c2 <_vfiprintf_r+0x20e>
 8019842:	4b26      	ldr	r3, [pc, #152]	; (80198dc <_vfiprintf_r+0x228>)
 8019844:	bb1b      	cbnz	r3, 801988e <_vfiprintf_r+0x1da>
 8019846:	9b03      	ldr	r3, [sp, #12]
 8019848:	3307      	adds	r3, #7
 801984a:	f023 0307 	bic.w	r3, r3, #7
 801984e:	3308      	adds	r3, #8
 8019850:	9303      	str	r3, [sp, #12]
 8019852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019854:	443b      	add	r3, r7
 8019856:	9309      	str	r3, [sp, #36]	; 0x24
 8019858:	e768      	b.n	801972c <_vfiprintf_r+0x78>
 801985a:	fb0c 3202 	mla	r2, ip, r2, r3
 801985e:	460c      	mov	r4, r1
 8019860:	2001      	movs	r0, #1
 8019862:	e7a6      	b.n	80197b2 <_vfiprintf_r+0xfe>
 8019864:	2300      	movs	r3, #0
 8019866:	3401      	adds	r4, #1
 8019868:	9305      	str	r3, [sp, #20]
 801986a:	4619      	mov	r1, r3
 801986c:	f04f 0c0a 	mov.w	ip, #10
 8019870:	4620      	mov	r0, r4
 8019872:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019876:	3a30      	subs	r2, #48	; 0x30
 8019878:	2a09      	cmp	r2, #9
 801987a:	d903      	bls.n	8019884 <_vfiprintf_r+0x1d0>
 801987c:	2b00      	cmp	r3, #0
 801987e:	d0c6      	beq.n	801980e <_vfiprintf_r+0x15a>
 8019880:	9105      	str	r1, [sp, #20]
 8019882:	e7c4      	b.n	801980e <_vfiprintf_r+0x15a>
 8019884:	fb0c 2101 	mla	r1, ip, r1, r2
 8019888:	4604      	mov	r4, r0
 801988a:	2301      	movs	r3, #1
 801988c:	e7f0      	b.n	8019870 <_vfiprintf_r+0x1bc>
 801988e:	ab03      	add	r3, sp, #12
 8019890:	9300      	str	r3, [sp, #0]
 8019892:	462a      	mov	r2, r5
 8019894:	4b12      	ldr	r3, [pc, #72]	; (80198e0 <_vfiprintf_r+0x22c>)
 8019896:	a904      	add	r1, sp, #16
 8019898:	4630      	mov	r0, r6
 801989a:	f7fb ff67 	bl	801576c <_printf_float>
 801989e:	4607      	mov	r7, r0
 80198a0:	1c78      	adds	r0, r7, #1
 80198a2:	d1d6      	bne.n	8019852 <_vfiprintf_r+0x19e>
 80198a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80198a6:	07d9      	lsls	r1, r3, #31
 80198a8:	d405      	bmi.n	80198b6 <_vfiprintf_r+0x202>
 80198aa:	89ab      	ldrh	r3, [r5, #12]
 80198ac:	059a      	lsls	r2, r3, #22
 80198ae:	d402      	bmi.n	80198b6 <_vfiprintf_r+0x202>
 80198b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80198b2:	f7fc ffcd 	bl	8016850 <__retarget_lock_release_recursive>
 80198b6:	89ab      	ldrh	r3, [r5, #12]
 80198b8:	065b      	lsls	r3, r3, #25
 80198ba:	f53f af1d 	bmi.w	80196f8 <_vfiprintf_r+0x44>
 80198be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80198c0:	e71c      	b.n	80196fc <_vfiprintf_r+0x48>
 80198c2:	ab03      	add	r3, sp, #12
 80198c4:	9300      	str	r3, [sp, #0]
 80198c6:	462a      	mov	r2, r5
 80198c8:	4b05      	ldr	r3, [pc, #20]	; (80198e0 <_vfiprintf_r+0x22c>)
 80198ca:	a904      	add	r1, sp, #16
 80198cc:	4630      	mov	r0, r6
 80198ce:	f7fc f9f1 	bl	8015cb4 <_printf_i>
 80198d2:	e7e4      	b.n	801989e <_vfiprintf_r+0x1ea>
 80198d4:	0801ad45 	.word	0x0801ad45
 80198d8:	0801ad4f 	.word	0x0801ad4f
 80198dc:	0801576d 	.word	0x0801576d
 80198e0:	08019691 	.word	0x08019691
 80198e4:	0801ad4b 	.word	0x0801ad4b

080198e8 <__swbuf_r>:
 80198e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198ea:	460e      	mov	r6, r1
 80198ec:	4614      	mov	r4, r2
 80198ee:	4605      	mov	r5, r0
 80198f0:	b118      	cbz	r0, 80198fa <__swbuf_r+0x12>
 80198f2:	6a03      	ldr	r3, [r0, #32]
 80198f4:	b90b      	cbnz	r3, 80198fa <__swbuf_r+0x12>
 80198f6:	f7fc fd9b 	bl	8016430 <__sinit>
 80198fa:	69a3      	ldr	r3, [r4, #24]
 80198fc:	60a3      	str	r3, [r4, #8]
 80198fe:	89a3      	ldrh	r3, [r4, #12]
 8019900:	071a      	lsls	r2, r3, #28
 8019902:	d525      	bpl.n	8019950 <__swbuf_r+0x68>
 8019904:	6923      	ldr	r3, [r4, #16]
 8019906:	b31b      	cbz	r3, 8019950 <__swbuf_r+0x68>
 8019908:	6823      	ldr	r3, [r4, #0]
 801990a:	6922      	ldr	r2, [r4, #16]
 801990c:	1a98      	subs	r0, r3, r2
 801990e:	6963      	ldr	r3, [r4, #20]
 8019910:	b2f6      	uxtb	r6, r6
 8019912:	4283      	cmp	r3, r0
 8019914:	4637      	mov	r7, r6
 8019916:	dc04      	bgt.n	8019922 <__swbuf_r+0x3a>
 8019918:	4621      	mov	r1, r4
 801991a:	4628      	mov	r0, r5
 801991c:	f7ff fce2 	bl	80192e4 <_fflush_r>
 8019920:	b9e0      	cbnz	r0, 801995c <__swbuf_r+0x74>
 8019922:	68a3      	ldr	r3, [r4, #8]
 8019924:	3b01      	subs	r3, #1
 8019926:	60a3      	str	r3, [r4, #8]
 8019928:	6823      	ldr	r3, [r4, #0]
 801992a:	1c5a      	adds	r2, r3, #1
 801992c:	6022      	str	r2, [r4, #0]
 801992e:	701e      	strb	r6, [r3, #0]
 8019930:	6962      	ldr	r2, [r4, #20]
 8019932:	1c43      	adds	r3, r0, #1
 8019934:	429a      	cmp	r2, r3
 8019936:	d004      	beq.n	8019942 <__swbuf_r+0x5a>
 8019938:	89a3      	ldrh	r3, [r4, #12]
 801993a:	07db      	lsls	r3, r3, #31
 801993c:	d506      	bpl.n	801994c <__swbuf_r+0x64>
 801993e:	2e0a      	cmp	r6, #10
 8019940:	d104      	bne.n	801994c <__swbuf_r+0x64>
 8019942:	4621      	mov	r1, r4
 8019944:	4628      	mov	r0, r5
 8019946:	f7ff fccd 	bl	80192e4 <_fflush_r>
 801994a:	b938      	cbnz	r0, 801995c <__swbuf_r+0x74>
 801994c:	4638      	mov	r0, r7
 801994e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019950:	4621      	mov	r1, r4
 8019952:	4628      	mov	r0, r5
 8019954:	f000 f806 	bl	8019964 <__swsetup_r>
 8019958:	2800      	cmp	r0, #0
 801995a:	d0d5      	beq.n	8019908 <__swbuf_r+0x20>
 801995c:	f04f 37ff 	mov.w	r7, #4294967295
 8019960:	e7f4      	b.n	801994c <__swbuf_r+0x64>
	...

08019964 <__swsetup_r>:
 8019964:	b538      	push	{r3, r4, r5, lr}
 8019966:	4b2a      	ldr	r3, [pc, #168]	; (8019a10 <__swsetup_r+0xac>)
 8019968:	4605      	mov	r5, r0
 801996a:	6818      	ldr	r0, [r3, #0]
 801996c:	460c      	mov	r4, r1
 801996e:	b118      	cbz	r0, 8019978 <__swsetup_r+0x14>
 8019970:	6a03      	ldr	r3, [r0, #32]
 8019972:	b90b      	cbnz	r3, 8019978 <__swsetup_r+0x14>
 8019974:	f7fc fd5c 	bl	8016430 <__sinit>
 8019978:	89a3      	ldrh	r3, [r4, #12]
 801997a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801997e:	0718      	lsls	r0, r3, #28
 8019980:	d422      	bmi.n	80199c8 <__swsetup_r+0x64>
 8019982:	06d9      	lsls	r1, r3, #27
 8019984:	d407      	bmi.n	8019996 <__swsetup_r+0x32>
 8019986:	2309      	movs	r3, #9
 8019988:	602b      	str	r3, [r5, #0]
 801998a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801998e:	81a3      	strh	r3, [r4, #12]
 8019990:	f04f 30ff 	mov.w	r0, #4294967295
 8019994:	e034      	b.n	8019a00 <__swsetup_r+0x9c>
 8019996:	0758      	lsls	r0, r3, #29
 8019998:	d512      	bpl.n	80199c0 <__swsetup_r+0x5c>
 801999a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801999c:	b141      	cbz	r1, 80199b0 <__swsetup_r+0x4c>
 801999e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199a2:	4299      	cmp	r1, r3
 80199a4:	d002      	beq.n	80199ac <__swsetup_r+0x48>
 80199a6:	4628      	mov	r0, r5
 80199a8:	f7fd fdf4 	bl	8017594 <_free_r>
 80199ac:	2300      	movs	r3, #0
 80199ae:	6363      	str	r3, [r4, #52]	; 0x34
 80199b0:	89a3      	ldrh	r3, [r4, #12]
 80199b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80199b6:	81a3      	strh	r3, [r4, #12]
 80199b8:	2300      	movs	r3, #0
 80199ba:	6063      	str	r3, [r4, #4]
 80199bc:	6923      	ldr	r3, [r4, #16]
 80199be:	6023      	str	r3, [r4, #0]
 80199c0:	89a3      	ldrh	r3, [r4, #12]
 80199c2:	f043 0308 	orr.w	r3, r3, #8
 80199c6:	81a3      	strh	r3, [r4, #12]
 80199c8:	6923      	ldr	r3, [r4, #16]
 80199ca:	b94b      	cbnz	r3, 80199e0 <__swsetup_r+0x7c>
 80199cc:	89a3      	ldrh	r3, [r4, #12]
 80199ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80199d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80199d6:	d003      	beq.n	80199e0 <__swsetup_r+0x7c>
 80199d8:	4621      	mov	r1, r4
 80199da:	4628      	mov	r0, r5
 80199dc:	f000 f884 	bl	8019ae8 <__smakebuf_r>
 80199e0:	89a0      	ldrh	r0, [r4, #12]
 80199e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80199e6:	f010 0301 	ands.w	r3, r0, #1
 80199ea:	d00a      	beq.n	8019a02 <__swsetup_r+0x9e>
 80199ec:	2300      	movs	r3, #0
 80199ee:	60a3      	str	r3, [r4, #8]
 80199f0:	6963      	ldr	r3, [r4, #20]
 80199f2:	425b      	negs	r3, r3
 80199f4:	61a3      	str	r3, [r4, #24]
 80199f6:	6923      	ldr	r3, [r4, #16]
 80199f8:	b943      	cbnz	r3, 8019a0c <__swsetup_r+0xa8>
 80199fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80199fe:	d1c4      	bne.n	801998a <__swsetup_r+0x26>
 8019a00:	bd38      	pop	{r3, r4, r5, pc}
 8019a02:	0781      	lsls	r1, r0, #30
 8019a04:	bf58      	it	pl
 8019a06:	6963      	ldrpl	r3, [r4, #20]
 8019a08:	60a3      	str	r3, [r4, #8]
 8019a0a:	e7f4      	b.n	80199f6 <__swsetup_r+0x92>
 8019a0c:	2000      	movs	r0, #0
 8019a0e:	e7f7      	b.n	8019a00 <__swsetup_r+0x9c>
 8019a10:	20000330 	.word	0x20000330

08019a14 <_raise_r>:
 8019a14:	291f      	cmp	r1, #31
 8019a16:	b538      	push	{r3, r4, r5, lr}
 8019a18:	4604      	mov	r4, r0
 8019a1a:	460d      	mov	r5, r1
 8019a1c:	d904      	bls.n	8019a28 <_raise_r+0x14>
 8019a1e:	2316      	movs	r3, #22
 8019a20:	6003      	str	r3, [r0, #0]
 8019a22:	f04f 30ff 	mov.w	r0, #4294967295
 8019a26:	bd38      	pop	{r3, r4, r5, pc}
 8019a28:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019a2a:	b112      	cbz	r2, 8019a32 <_raise_r+0x1e>
 8019a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a30:	b94b      	cbnz	r3, 8019a46 <_raise_r+0x32>
 8019a32:	4620      	mov	r0, r4
 8019a34:	f000 f830 	bl	8019a98 <_getpid_r>
 8019a38:	462a      	mov	r2, r5
 8019a3a:	4601      	mov	r1, r0
 8019a3c:	4620      	mov	r0, r4
 8019a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a42:	f000 b817 	b.w	8019a74 <_kill_r>
 8019a46:	2b01      	cmp	r3, #1
 8019a48:	d00a      	beq.n	8019a60 <_raise_r+0x4c>
 8019a4a:	1c59      	adds	r1, r3, #1
 8019a4c:	d103      	bne.n	8019a56 <_raise_r+0x42>
 8019a4e:	2316      	movs	r3, #22
 8019a50:	6003      	str	r3, [r0, #0]
 8019a52:	2001      	movs	r0, #1
 8019a54:	e7e7      	b.n	8019a26 <_raise_r+0x12>
 8019a56:	2400      	movs	r4, #0
 8019a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019a5c:	4628      	mov	r0, r5
 8019a5e:	4798      	blx	r3
 8019a60:	2000      	movs	r0, #0
 8019a62:	e7e0      	b.n	8019a26 <_raise_r+0x12>

08019a64 <raise>:
 8019a64:	4b02      	ldr	r3, [pc, #8]	; (8019a70 <raise+0xc>)
 8019a66:	4601      	mov	r1, r0
 8019a68:	6818      	ldr	r0, [r3, #0]
 8019a6a:	f7ff bfd3 	b.w	8019a14 <_raise_r>
 8019a6e:	bf00      	nop
 8019a70:	20000330 	.word	0x20000330

08019a74 <_kill_r>:
 8019a74:	b538      	push	{r3, r4, r5, lr}
 8019a76:	4d07      	ldr	r5, [pc, #28]	; (8019a94 <_kill_r+0x20>)
 8019a78:	2300      	movs	r3, #0
 8019a7a:	4604      	mov	r4, r0
 8019a7c:	4608      	mov	r0, r1
 8019a7e:	4611      	mov	r1, r2
 8019a80:	602b      	str	r3, [r5, #0]
 8019a82:	f7ed ff2d 	bl	80078e0 <_kill>
 8019a86:	1c43      	adds	r3, r0, #1
 8019a88:	d102      	bne.n	8019a90 <_kill_r+0x1c>
 8019a8a:	682b      	ldr	r3, [r5, #0]
 8019a8c:	b103      	cbz	r3, 8019a90 <_kill_r+0x1c>
 8019a8e:	6023      	str	r3, [r4, #0]
 8019a90:	bd38      	pop	{r3, r4, r5, pc}
 8019a92:	bf00      	nop
 8019a94:	2000739c 	.word	0x2000739c

08019a98 <_getpid_r>:
 8019a98:	f7ed bf1a 	b.w	80078d0 <_getpid>

08019a9c <__swhatbuf_r>:
 8019a9c:	b570      	push	{r4, r5, r6, lr}
 8019a9e:	460c      	mov	r4, r1
 8019aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019aa4:	2900      	cmp	r1, #0
 8019aa6:	b096      	sub	sp, #88	; 0x58
 8019aa8:	4615      	mov	r5, r2
 8019aaa:	461e      	mov	r6, r3
 8019aac:	da0d      	bge.n	8019aca <__swhatbuf_r+0x2e>
 8019aae:	89a3      	ldrh	r3, [r4, #12]
 8019ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019ab4:	f04f 0100 	mov.w	r1, #0
 8019ab8:	bf0c      	ite	eq
 8019aba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019abe:	2340      	movne	r3, #64	; 0x40
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	6031      	str	r1, [r6, #0]
 8019ac4:	602b      	str	r3, [r5, #0]
 8019ac6:	b016      	add	sp, #88	; 0x58
 8019ac8:	bd70      	pop	{r4, r5, r6, pc}
 8019aca:	466a      	mov	r2, sp
 8019acc:	f000 f848 	bl	8019b60 <_fstat_r>
 8019ad0:	2800      	cmp	r0, #0
 8019ad2:	dbec      	blt.n	8019aae <__swhatbuf_r+0x12>
 8019ad4:	9901      	ldr	r1, [sp, #4]
 8019ad6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019ada:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019ade:	4259      	negs	r1, r3
 8019ae0:	4159      	adcs	r1, r3
 8019ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ae6:	e7eb      	b.n	8019ac0 <__swhatbuf_r+0x24>

08019ae8 <__smakebuf_r>:
 8019ae8:	898b      	ldrh	r3, [r1, #12]
 8019aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019aec:	079d      	lsls	r5, r3, #30
 8019aee:	4606      	mov	r6, r0
 8019af0:	460c      	mov	r4, r1
 8019af2:	d507      	bpl.n	8019b04 <__smakebuf_r+0x1c>
 8019af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019af8:	6023      	str	r3, [r4, #0]
 8019afa:	6123      	str	r3, [r4, #16]
 8019afc:	2301      	movs	r3, #1
 8019afe:	6163      	str	r3, [r4, #20]
 8019b00:	b002      	add	sp, #8
 8019b02:	bd70      	pop	{r4, r5, r6, pc}
 8019b04:	ab01      	add	r3, sp, #4
 8019b06:	466a      	mov	r2, sp
 8019b08:	f7ff ffc8 	bl	8019a9c <__swhatbuf_r>
 8019b0c:	9900      	ldr	r1, [sp, #0]
 8019b0e:	4605      	mov	r5, r0
 8019b10:	4630      	mov	r0, r6
 8019b12:	f7fe f90b 	bl	8017d2c <_malloc_r>
 8019b16:	b948      	cbnz	r0, 8019b2c <__smakebuf_r+0x44>
 8019b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b1c:	059a      	lsls	r2, r3, #22
 8019b1e:	d4ef      	bmi.n	8019b00 <__smakebuf_r+0x18>
 8019b20:	f023 0303 	bic.w	r3, r3, #3
 8019b24:	f043 0302 	orr.w	r3, r3, #2
 8019b28:	81a3      	strh	r3, [r4, #12]
 8019b2a:	e7e3      	b.n	8019af4 <__smakebuf_r+0xc>
 8019b2c:	89a3      	ldrh	r3, [r4, #12]
 8019b2e:	6020      	str	r0, [r4, #0]
 8019b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b34:	81a3      	strh	r3, [r4, #12]
 8019b36:	9b00      	ldr	r3, [sp, #0]
 8019b38:	6163      	str	r3, [r4, #20]
 8019b3a:	9b01      	ldr	r3, [sp, #4]
 8019b3c:	6120      	str	r0, [r4, #16]
 8019b3e:	b15b      	cbz	r3, 8019b58 <__smakebuf_r+0x70>
 8019b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019b44:	4630      	mov	r0, r6
 8019b46:	f000 f81d 	bl	8019b84 <_isatty_r>
 8019b4a:	b128      	cbz	r0, 8019b58 <__smakebuf_r+0x70>
 8019b4c:	89a3      	ldrh	r3, [r4, #12]
 8019b4e:	f023 0303 	bic.w	r3, r3, #3
 8019b52:	f043 0301 	orr.w	r3, r3, #1
 8019b56:	81a3      	strh	r3, [r4, #12]
 8019b58:	89a3      	ldrh	r3, [r4, #12]
 8019b5a:	431d      	orrs	r5, r3
 8019b5c:	81a5      	strh	r5, [r4, #12]
 8019b5e:	e7cf      	b.n	8019b00 <__smakebuf_r+0x18>

08019b60 <_fstat_r>:
 8019b60:	b538      	push	{r3, r4, r5, lr}
 8019b62:	4d07      	ldr	r5, [pc, #28]	; (8019b80 <_fstat_r+0x20>)
 8019b64:	2300      	movs	r3, #0
 8019b66:	4604      	mov	r4, r0
 8019b68:	4608      	mov	r0, r1
 8019b6a:	4611      	mov	r1, r2
 8019b6c:	602b      	str	r3, [r5, #0]
 8019b6e:	f7ed ff16 	bl	800799e <_fstat>
 8019b72:	1c43      	adds	r3, r0, #1
 8019b74:	d102      	bne.n	8019b7c <_fstat_r+0x1c>
 8019b76:	682b      	ldr	r3, [r5, #0]
 8019b78:	b103      	cbz	r3, 8019b7c <_fstat_r+0x1c>
 8019b7a:	6023      	str	r3, [r4, #0]
 8019b7c:	bd38      	pop	{r3, r4, r5, pc}
 8019b7e:	bf00      	nop
 8019b80:	2000739c 	.word	0x2000739c

08019b84 <_isatty_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4d06      	ldr	r5, [pc, #24]	; (8019ba0 <_isatty_r+0x1c>)
 8019b88:	2300      	movs	r3, #0
 8019b8a:	4604      	mov	r4, r0
 8019b8c:	4608      	mov	r0, r1
 8019b8e:	602b      	str	r3, [r5, #0]
 8019b90:	f7ed ff15 	bl	80079be <_isatty>
 8019b94:	1c43      	adds	r3, r0, #1
 8019b96:	d102      	bne.n	8019b9e <_isatty_r+0x1a>
 8019b98:	682b      	ldr	r3, [r5, #0]
 8019b9a:	b103      	cbz	r3, 8019b9e <_isatty_r+0x1a>
 8019b9c:	6023      	str	r3, [r4, #0]
 8019b9e:	bd38      	pop	{r3, r4, r5, pc}
 8019ba0:	2000739c 	.word	0x2000739c

08019ba4 <_init>:
 8019ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba6:	bf00      	nop
 8019ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019baa:	bc08      	pop	{r3}
 8019bac:	469e      	mov	lr, r3
 8019bae:	4770      	bx	lr

08019bb0 <_fini>:
 8019bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bb2:	bf00      	nop
 8019bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bb6:	bc08      	pop	{r3}
 8019bb8:	469e      	mov	lr, r3
 8019bba:	4770      	bx	lr

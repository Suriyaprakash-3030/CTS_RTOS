
STM32F407VGT6_CTS_A5_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000168d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011bc  08016a68  08016a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c24  08017c24  00019330  2**0
                  CONTENTS
  4 .ARM          00000008  08017c24  08017c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017c2c  08017c2c  00019330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c2c  08017c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017c30  08017c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000330  20000000  08017c34  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00019330  2**0
                  CONTENTS
 10 .bss          000031f4  20000330  20000330  00019330  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20003524  20003524  00019330  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00019330  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002342b  00000000  00000000  00019360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006631  00000000  00000000  0003c78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e30  00000000  00000000  00042dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000170e  00000000  00000000  00044bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e9f0  00000000  00000000  000462fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033db0  00000000  00000000  00074cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e365f  00000000  00000000  000a8a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018c0fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000906c  00000000  00000000  0018c140  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  001951ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016a50 	.word	0x08016a50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	08016a50 	.word	0x08016a50

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <analogRead>:

long map(long x, long in_min, long in_max, long out_min, long out_max);

/* Read ADC value based on the provided label */
uint32_t analogRead(ADC_Label label)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	60da      	str	r2, [r3, #12]
    uint32_t adc_value = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]

    switch (label)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b04      	cmp	r3, #4
 8001024:	f200 809a 	bhi.w	800115c <analogRead+0x158>
 8001028:	a201      	add	r2, pc, #4	@ (adr r2, 8001030 <analogRead+0x2c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001045 	.word	0x08001045
 8001034:	0800107d 	.word	0x0800107d
 8001038:	080010b5 	.word	0x080010b5
 800103c:	080010ed 	.word	0x080010ed
 8001040:	08001125 	.word	0x08001125
    {
        case Curr_Sensor_ServoDC_M1:
            // Configure ADC3 for Curr_Sensor_ServoDC (GPIOC_PIN_2)
            sConfig.Channel = ADC_CHANNEL_12;
 8001044:	230c      	movs	r3, #12
 8001046:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	4845      	ldr	r0, [pc, #276]	@ (800116c <analogRead+0x168>)
 8001058:	f007 fd54 	bl	8008b04 <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 800105c:	4843      	ldr	r0, [pc, #268]	@ (800116c <analogRead+0x168>)
 800105e:	f007 fbb3 	bl	80087c8 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8001062:	f04f 31ff 	mov.w	r1, #4294967295
 8001066:	4841      	ldr	r0, [pc, #260]	@ (800116c <analogRead+0x168>)
 8001068:	f007 fcb3 	bl	80089d2 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 800106c:	483f      	ldr	r0, [pc, #252]	@ (800116c <analogRead+0x168>)
 800106e:	f007 fd3b 	bl	8008ae8 <HAL_ADC_GetValue>
 8001072:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 8001074:	483d      	ldr	r0, [pc, #244]	@ (800116c <analogRead+0x168>)
 8001076:	f007 fc79 	bl	800896c <HAL_ADC_Stop>
            break;
 800107a:	e071      	b.n	8001160 <analogRead+0x15c>

        case Curr_Sensor_Clamp_M2:
            // Configure ADC3 for Curr_Sensor_Clamp (GPIOC_PIN_3)
            sConfig.Channel = ADC_CHANNEL_13;
 800107c:	230d      	movs	r3, #13
 800107e:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	4837      	ldr	r0, [pc, #220]	@ (800116c <analogRead+0x168>)
 8001090:	f007 fd38 	bl	8008b04 <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 8001094:	4835      	ldr	r0, [pc, #212]	@ (800116c <analogRead+0x168>)
 8001096:	f007 fb97 	bl	80087c8 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800109a:	f04f 31ff 	mov.w	r1, #4294967295
 800109e:	4833      	ldr	r0, [pc, #204]	@ (800116c <analogRead+0x168>)
 80010a0:	f007 fc97 	bl	80089d2 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 80010a4:	4831      	ldr	r0, [pc, #196]	@ (800116c <analogRead+0x168>)
 80010a6:	f007 fd1f 	bl	8008ae8 <HAL_ADC_GetValue>
 80010aa:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 80010ac:	482f      	ldr	r0, [pc, #188]	@ (800116c <analogRead+0x168>)
 80010ae:	f007 fc5d 	bl	800896c <HAL_ADC_Stop>
            break;
 80010b2:	e055      	b.n	8001160 <analogRead+0x15c>

        case Curr_Sensor_Spindle_M3:
            // Configure ADC3 for Curr_Sensor_Spindle (GPIOA_PIN_0)
            sConfig.Channel = ADC_CHANNEL_0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4619      	mov	r1, r3
 80010c6:	4829      	ldr	r0, [pc, #164]	@ (800116c <analogRead+0x168>)
 80010c8:	f007 fd1c 	bl	8008b04 <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc3);
 80010cc:	4827      	ldr	r0, [pc, #156]	@ (800116c <analogRead+0x168>)
 80010ce:	f007 fb7b 	bl	80087c8 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80010d2:	f04f 31ff 	mov.w	r1, #4294967295
 80010d6:	4825      	ldr	r0, [pc, #148]	@ (800116c <analogRead+0x168>)
 80010d8:	f007 fc7b 	bl	80089d2 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc3);
 80010dc:	4823      	ldr	r0, [pc, #140]	@ (800116c <analogRead+0x168>)
 80010de:	f007 fd03 	bl	8008ae8 <HAL_ADC_GetValue>
 80010e2:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc3);
 80010e4:	4821      	ldr	r0, [pc, #132]	@ (800116c <analogRead+0x168>)
 80010e6:	f007 fc41 	bl	800896c <HAL_ADC_Stop>
            break;
 80010ea:	e039      	b.n	8001160 <analogRead+0x15c>

        case V12:
            // Configure ADC2 for V12 (GPIOA_PIN_1)
            sConfig.Channel = ADC_CHANNEL_1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	481c      	ldr	r0, [pc, #112]	@ (8001170 <analogRead+0x16c>)
 8001100:	f007 fd00 	bl	8008b04 <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc2);
 8001104:	481a      	ldr	r0, [pc, #104]	@ (8001170 <analogRead+0x16c>)
 8001106:	f007 fb5f 	bl	80087c8 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800110a:	f04f 31ff 	mov.w	r1, #4294967295
 800110e:	4818      	ldr	r0, [pc, #96]	@ (8001170 <analogRead+0x16c>)
 8001110:	f007 fc5f 	bl	80089d2 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc2);
 8001114:	4816      	ldr	r0, [pc, #88]	@ (8001170 <analogRead+0x16c>)
 8001116:	f007 fce7 	bl	8008ae8 <HAL_ADC_GetValue>
 800111a:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc2);
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <analogRead+0x16c>)
 800111e:	f007 fc25 	bl	800896c <HAL_ADC_Stop>
            break;
 8001122:	e01d      	b.n	8001160 <analogRead+0x15c>

        case Sensor_Pressure:
            // Configure ADC1 for Sensor_Pressure (GPIOC_PIN_4)
            sConfig.Channel = ADC_CHANNEL_14;
 8001124:	230e      	movs	r3, #14
 8001126:	60fb      	str	r3, [r7, #12]
            sConfig.Rank = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
            sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
            HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	4619      	mov	r1, r3
 8001136:	480f      	ldr	r0, [pc, #60]	@ (8001174 <analogRead+0x170>)
 8001138:	f007 fce4 	bl	8008b04 <HAL_ADC_ConfigChannel>
            HAL_ADC_Start(&hadc1);
 800113c:	480d      	ldr	r0, [pc, #52]	@ (8001174 <analogRead+0x170>)
 800113e:	f007 fb43 	bl	80087c8 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001142:	f04f 31ff 	mov.w	r1, #4294967295
 8001146:	480b      	ldr	r0, [pc, #44]	@ (8001174 <analogRead+0x170>)
 8001148:	f007 fc43 	bl	80089d2 <HAL_ADC_PollForConversion>
            adc_value = HAL_ADC_GetValue(&hadc1);
 800114c:	4809      	ldr	r0, [pc, #36]	@ (8001174 <analogRead+0x170>)
 800114e:	f007 fccb 	bl	8008ae8 <HAL_ADC_GetValue>
 8001152:	61f8      	str	r0, [r7, #28]
            HAL_ADC_Stop(&hadc1);
 8001154:	4807      	ldr	r0, [pc, #28]	@ (8001174 <analogRead+0x170>)
 8001156:	f007 fc09 	bl	800896c <HAL_ADC_Stop>
            break;
 800115a:	e001      	b.n	8001160 <analogRead+0x15c>

        default:
            // Handle invalid label case
            return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <analogRead+0x15e>
    }
    return adc_value;
 8001160:	69fb      	ldr	r3, [r7, #28]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3720      	adds	r7, #32
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20002888 	.word	0x20002888
 8001170:	20002840 	.word	0x20002840
 8001174:	200027f8 	.word	0x200027f8

08001178 <pressureSensorReading>:

/* map Function to the sensor voltage to pressure */
float pressureSensorReading(void){
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8

  uint32_t PressureRead  =  analogRead(Sensor_Pressure);
 800117e:	2004      	movs	r0, #4
 8001180:	f7ff ff40 	bl	8001004 <analogRead>
 8001184:	6078      	str	r0, [r7, #4]
   pressurechange	 =  map(PressureRead,314,3030,0,5300); //5300 -5 bar  4300 -4  //3300 -3 bar //2200 -2bar // 1120 - 1bar
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f241 43b4 	movw	r3, #5300	@ 0x14b4
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	f640 32d6 	movw	r2, #3030	@ 0xbd6
 8001194:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8001198:	f000 f812 	bl	80011c0 <map>
 800119c:	ee07 0a90 	vmov	s15, r0
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <pressureSensorReading+0x44>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
  return pressurechange;
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <pressureSensorReading+0x44>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	ee07 3a90 	vmov	s15, r3

}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200003b4 	.word	0x200003b4

080011c0 <map>:

/* map Function  */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
      return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	69b9      	ldr	r1, [r7, #24]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	fb03 f202 	mul.w	r2, r3, r2
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1acb      	subs	r3, r1, r3
 80011e4:	fb92 f2f3 	sdiv	r2, r2, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4413      	add	r3, r2
    }
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <Convert_ADC_To_Current>:

// Function to convert ADC value to current in milliAmperes
int Convert_ADC_To_Current(uint16_t adc_value) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
	int16_t current =   map(adc_value,0,4095,-10000,10000);
 8001202:	88f8      	ldrh	r0, [r7, #6]
 8001204:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <Convert_ADC_To_Current+0x40>)
 800120c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001210:	2100      	movs	r1, #0
 8001212:	f7ff ffd5 	bl	80011c0 <map>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
	 if(current < 0)
 800121a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da03      	bge.n	800122a <Convert_ADC_To_Current+0x32>
	 {
		 current = current *(-1);
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	425b      	negs	r3, r3
 8001226:	b29b      	uxth	r3, r3
 8001228:	81fb      	strh	r3, [r7, #14]
	 }
    return (int)current * 2;  // Return the calculated current in amperes
 800122a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800122e:	005b      	lsls	r3, r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	ffffd8f0 	.word	0xffffd8f0

0800123c <CustomerFrontEnd>:
static void CustomerAppSub(void);
static void autoOperation(void);
static void manualOperation(void);
static void servoCleaning(void);

void CustomerFrontEnd(void) {
 800123c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001240:	af00      	add	r7, sp, #0
	LCDRGBControl(WHITE);    //Turn on LCD back-light and set it to color
 8001242:	2064      	movs	r0, #100	@ 0x64
 8001244:	f003 fd58 	bl	8004cf8 <LCDRGBControl>
	TareAll();
 8001248:	f003 fde2 	bl	8004e10 <TareAll>
	while (TRUE) {
		LoadingFunc(BLINK, LOADING);
 800124c:	2101      	movs	r1, #1
 800124e:	2002      	movs	r0, #2
 8001250:	f003 f8ac 	bl	80043ac <LoadingFunc>
		LCD_Init();
 8001254:	f003 fafa 	bl	800484c <LCD_Init>
		LCD_Clear();
 8001258:	f003 fbe2 	bl	8004a20 <LCD_Clear>
		do {
			InitializeMachine();
 800125c:	f002 fd0e 	bl	8003c7c <InitializeMachine>
			LoadingFunc(ON, NOT_LOADING);
 8001260:	2100      	movs	r1, #0
 8001262:	2001      	movs	r0, #1
 8001264:	f003 f8a2 	bl	80043ac <LoadingFunc>
			HAL_Delay(10);
 8001268:	200a      	movs	r0, #10
 800126a:	f007 fa45 	bl	80086f8 <HAL_Delay>
			LCD_Clear();
 800126e:	f003 fbd7 	bl	8004a20 <LCD_Clear>
			printLCD(0, "Can on ", ENTER_SYMBOL);
 8001272:	2201      	movs	r2, #1
 8001274:	494c      	ldr	r1, [pc, #304]	@ (80013a8 <CustomerFrontEnd+0x16c>)
 8001276:	2000      	movs	r0, #0
 8001278:	f003 fcd2 	bl	8004c20 <printLCD>
			//static int TARE_STRIKE = 0;
			while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 800127c:	e04b      	b.n	8001316 <CustomerFrontEnd+0xda>
				HAL_Delay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f007 fa3a 	bl	80086f8 <HAL_Delay>
				DeveloperMenu();
 8001284:	f004 fcbc 	bl	8005c00 <DeveloperMenu>
				 if (HAL_GetTick() - StoringTime >= 1000) {  // Check if 2 seconds passed
 8001288:	f007 fa2a 	bl	80086e0 <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
 800128e:	2200      	movs	r2, #0
 8001290:	4698      	mov	r8, r3
 8001292:	4691      	mov	r9, r2
 8001294:	4b45      	ldr	r3, [pc, #276]	@ (80013ac <CustomerFrontEnd+0x170>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	ebb8 0402 	subs.w	r4, r8, r2
 800129e:	eb69 0503 	sbc.w	r5, r9, r3
 80012a2:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 80012a6:	f175 0300 	sbcs.w	r3, r5, #0
 80012aa:	d30c      	bcc.n	80012c6 <CustomerFrontEnd+0x8a>
					 StoringTime = HAL_GetTick();  // Update the last tick time
 80012ac:	f007 fa18 	bl	80086e0 <HAL_GetTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2200      	movs	r2, #0
 80012b4:	469a      	mov	sl, r3
 80012b6:	4693      	mov	fp, r2
 80012b8:	4b3c      	ldr	r3, [pc, #240]	@ (80013ac <CustomerFrontEnd+0x170>)
 80012ba:	e9c3 ab00 	strd	sl, fp, [r3]
					 tareSend = Tareweight;  // Update the variable
 80012be:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <CustomerFrontEnd+0x174>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a3c      	ldr	r2, [pc, #240]	@ (80013b4 <CustomerFrontEnd+0x178>)
 80012c4:	6013      	str	r3, [r2, #0]
				  }

				if (readKeypadNonBlock(ALL) == PLAYSTOPKEY) {
 80012c6:	2000      	movs	r0, #0
 80012c8:	f002 fe90 	bl	8003fec <readKeypadNonBlock>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b0d      	cmp	r3, #13
 80012d0:	d111      	bne.n	80012f6 <CustomerFrontEnd+0xba>
					printLCD(0, "TARE", NO_SYMBOL);
 80012d2:	2200      	movs	r2, #0
 80012d4:	4938      	ldr	r1, [pc, #224]	@ (80013b8 <CustomerFrontEnd+0x17c>)
 80012d6:	2000      	movs	r0, #0
 80012d8:	f003 fca2 	bl	8004c20 <printLCD>
					SubInit();
 80012dc:	f002 fde6 	bl	8003eac <SubInit>
					TareAll();
 80012e0:	f003 fd96 	bl	8004e10 <TareAll>
					HAL_Delay(500);
 80012e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012e8:	f007 fa06 	bl	80086f8 <HAL_Delay>
					printLCD(0, "Can on ", ENTER_SYMBOL);
 80012ec:	2201      	movs	r2, #1
 80012ee:	492e      	ldr	r1, [pc, #184]	@ (80013a8 <CustomerFrontEnd+0x16c>)
 80012f0:	2000      	movs	r0, #0
 80012f2:	f003 fc95 	bl	8004c20 <printLCD>
				}
				/** THIS IS FOR DEVELOPER AND TESTER ONLY **/
				printLCDInt(2, "Curr.Weigh ", Tareweight,0);
 80012f6:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <CustomerFrontEnd+0x174>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	492f      	ldr	r1, [pc, #188]	@ (80013bc <CustomerFrontEnd+0x180>)
 80012fe:	2002      	movs	r0, #2
 8001300:	f003 fc0a 	bl	8004b18 <printLCDInt>
				/******************************************/
				UpdateTimeToSDCard( hours,  minutes,  seconds);
 8001304:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <CustomerFrontEnd+0x184>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a2e      	ldr	r2, [pc, #184]	@ (80013c4 <CustomerFrontEnd+0x188>)
 800130a:	6811      	ldr	r1, [r2, #0]
 800130c:	4a2e      	ldr	r2, [pc, #184]	@ (80013c8 <CustomerFrontEnd+0x18c>)
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f003 ff61 	bl	80051d8 <UpdateTimeToSDCard>
			while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 8001316:	200d      	movs	r0, #13
 8001318:	f001 fd28 	bl	8002d6c <digitalRead>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d0ad      	beq.n	800127e <CustomerFrontEnd+0x42>
			}
			Unclamped_Weight = Total_Weight;
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <CustomerFrontEnd+0x190>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a2a      	ldr	r2, [pc, #168]	@ (80013d0 <CustomerFrontEnd+0x194>)
 8001328:	6013      	str	r3, [r2, #0]
			LoadingFunc(BLINK, LOADING);
 800132a:	2101      	movs	r1, #1
 800132c:	2002      	movs	r0, #2
 800132e:	f003 f83d 	bl	80043ac <LoadingFunc>
			moveMotorClampToLocBlock(M1POS2VAL);
 8001332:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8001336:	f001 fd8d 	bl	8002e54 <moveMotorClampToLocBlock>
			//LoadingFunc(ON, NOT_LOADING);
			LoadingFunc(BLINK, LOADING);
 800133a:	2101      	movs	r1, #1
 800133c:	2002      	movs	r0, #2
 800133e:	f003 f835 	bl	80043ac <LoadingFunc>
			HAL_Delay(1000);
 8001342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001346:	f007 f9d7 	bl	80086f8 <HAL_Delay>
			if (Total_Weight <= NO_BOTTLE_WEIGHT) {
 800134a:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <CustomerFrontEnd+0x190>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b64      	cmp	r3, #100	@ 0x64
 8001350:	dc1b      	bgt.n	800138a <CustomerFrontEnd+0x14e>
				LoadingFunc(BLINK, NOT_LOADING);
 8001352:	2100      	movs	r1, #0
 8001354:	2002      	movs	r0, #2
 8001356:	f003 f829 	bl	80043ac <LoadingFunc>
				LCD_Clear();
 800135a:	f003 fb61 	bl	8004a20 <LCD_Clear>
				printLCD(0, "no can ", NO_SYMBOL);
 800135e:	2200      	movs	r2, #0
 8001360:	491c      	ldr	r1, [pc, #112]	@ (80013d4 <CustomerFrontEnd+0x198>)
 8001362:	2000      	movs	r0, #0
 8001364:	f003 fc5c 	bl	8004c20 <printLCD>
				HAL_Delay(5000);
 8001368:	f241 3088 	movw	r0, #5000	@ 0x1388
 800136c:	f007 f9c4 	bl	80086f8 <HAL_Delay>
				LoadingFunc(BLINK, NOT_LOADING);
 8001370:	2100      	movs	r1, #0
 8001372:	2002      	movs	r0, #2
 8001374:	f003 f81a 	bl	80043ac <LoadingFunc>
				moveMotorSpindleToLocBlock(M2POS1VAL);
 8001378:	2000      	movs	r0, #0
 800137a:	f001 fd3f 	bl	8002dfc <moveMotorSpindleToLocBlock>
				HAL_Delay(500);
 800137e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001382:	f007 f9b9 	bl	80086f8 <HAL_Delay>
				UnlockCannister();
 8001386:	f000 fe5f 	bl	8002048 <UnlockCannister>

			}
		}
		while (Total_Weight <= NO_BOTTLE_WEIGHT);
 800138a:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <CustomerFrontEnd+0x190>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b64      	cmp	r3, #100	@ 0x64
 8001390:	f77f af64 	ble.w	800125c <CustomerFrontEnd+0x20>
		Servo_SetPercent(90);  //Normally ValveOpen //40 //Servo Opening after clamping
 8001394:	205a      	movs	r0, #90	@ 0x5a
 8001396:	f004 f8b5 	bl	8005504 <Servo_SetPercent>
  /****** Reaching here means there is a CAN detected and clamped, it may or may not be empty ******/
		isAutoOperation = TRUE;
 800139a:	4b0f      	ldr	r3, [pc, #60]	@ (80013d8 <CustomerFrontEnd+0x19c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
		CustomerApp();
 80013a0:	f000 f81c 	bl	80013dc <CustomerApp>
		LoadingFunc(BLINK, LOADING);
 80013a4:	e752      	b.n	800124c <CustomerFrontEnd+0x10>
 80013a6:	bf00      	nop
 80013a8:	08016a68 	.word	0x08016a68
 80013ac:	20000350 	.word	0x20000350
 80013b0:	20000364 	.word	0x20000364
 80013b4:	20000394 	.word	0x20000394
 80013b8:	08016a70 	.word	0x08016a70
 80013bc:	08016a78 	.word	0x08016a78
 80013c0:	200003ac 	.word	0x200003ac
 80013c4:	200003a8 	.word	0x200003a8
 80013c8:	200003a4 	.word	0x200003a4
 80013cc:	2000035c 	.word	0x2000035c
 80013d0:	2000037c 	.word	0x2000037c
 80013d4:	08016a84 	.word	0x08016a84
 80013d8:	2000010f 	.word	0x2000010f

080013dc <CustomerApp>:
	}
	UpdateTimeToSDCard( hours,  minutes,  seconds);
}

void CustomerApp(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	LCD_Clear();
 80013e0:	f003 fb1e 	bl	8004a20 <LCD_Clear>
	ReadKeypadVar(ALL);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f002 fdb5 	bl	8003f54 <ReadKeypadVar>
	LoadingFunc(ON, NOT_LOADING);
 80013ea:	2100      	movs	r1, #0
 80013ec:	2001      	movs	r0, #1
 80013ee:	f002 ffdd 	bl	80043ac <LoadingFunc>
	if(Total_Weight > EMPTY_BOTTLE_WEIGHT)
 80013f2:	4b35      	ldr	r3, [pc, #212]	@ (80014c8 <CustomerApp+0xec>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b4b      	cmp	r3, #75	@ 0x4b
 80013f8:	dd35      	ble.n	8001466 <CustomerApp+0x8a>
	{
		while (ReadKeypadVar(CONTROL) != ENTERKEY && cleanLongPressed == FALSE)
 80013fa:	e028      	b.n	800144e <CustomerApp+0x72>
		{
			if (isAutoOperation == FALSE)
 80013fc:	4b33      	ldr	r3, [pc, #204]	@ (80014cc <CustomerApp+0xf0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d105      	bne.n	8001410 <CustomerApp+0x34>
			{
				printLCD(0, "complete ", ENTER_SYMBOL);
 8001404:	2201      	movs	r2, #1
 8001406:	4932      	ldr	r1, [pc, #200]	@ (80014d0 <CustomerApp+0xf4>)
 8001408:	2000      	movs	r0, #0
 800140a:	f003 fc09 	bl	8004c20 <printLCD>
 800140e:	e004      	b.n	800141a <CustomerApp+0x3e>
			}
			else
			{
				printLCD(0, "automatic ", ENTER_SYMBOL);
 8001410:	2201      	movs	r2, #1
 8001412:	4930      	ldr	r1, [pc, #192]	@ (80014d4 <CustomerApp+0xf8>)
 8001414:	2000      	movs	r0, #0
 8001416:	f003 fc03 	bl	8004c20 <printLCD>
			}
			printLCD(3, "Clean ", NO_SYMBOL);
 800141a:	2200      	movs	r2, #0
 800141c:	492e      	ldr	r1, [pc, #184]	@ (80014d8 <CustomerApp+0xfc>)
 800141e:	2003      	movs	r0, #3
 8001420:	f003 fbfe 	bl	8004c20 <printLCD>
			if(readKeypadNonBlock(CONTROL) == DELKEY)
 8001424:	2002      	movs	r0, #2
 8001426:	f002 fde1 	bl	8003fec <readKeypadNonBlock>
 800142a:	4603      	mov	r3, r0
 800142c:	2b0e      	cmp	r3, #14
 800142e:	d10a      	bne.n	8001446 <CustomerApp+0x6a>
			{
				moveMotorClampToLocBlock(M1POS1VAL);
 8001430:	2000      	movs	r0, #0
 8001432:	f001 fd0f 	bl	8002e54 <moveMotorClampToLocBlock>
				CustomerFrontEnd();
 8001436:	f7ff ff01 	bl	800123c <CustomerFrontEnd>
				cleanLongPressed = 255;
 800143a:	4b28      	ldr	r3, [pc, #160]	@ (80014dc <CustomerApp+0x100>)
 800143c:	22ff      	movs	r2, #255	@ 0xff
 800143e:	701a      	strb	r2, [r3, #0]
				CleaningExitCounter = 0;
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <CustomerApp+0x104>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
			}
			if(cleanLongPressed == TRUE)
 8001446:	4b25      	ldr	r3, [pc, #148]	@ (80014dc <CustomerApp+0x100>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d00a      	beq.n	8001464 <CustomerApp+0x88>
		while (ReadKeypadVar(CONTROL) != ENTERKEY && cleanLongPressed == FALSE)
 800144e:	2002      	movs	r0, #2
 8001450:	f002 fd80 	bl	8003f54 <ReadKeypadVar>
 8001454:	4603      	mov	r3, r0
 8001456:	2b0b      	cmp	r3, #11
 8001458:	d005      	beq.n	8001466 <CustomerApp+0x8a>
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <CustomerApp+0x100>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0cc      	beq.n	80013fc <CustomerApp+0x20>
 8001462:	e000      	b.n	8001466 <CustomerApp+0x8a>
			{
				break;
 8001464:	bf00      	nop
				isAutoOperation = TRUE;
				break;
			}
		}*/
	}
		printLCD(3, " ", NO_SYMBOL);
 8001466:	2200      	movs	r2, #0
 8001468:	491e      	ldr	r1, [pc, #120]	@ (80014e4 <CustomerApp+0x108>)
 800146a:	2003      	movs	r0, #3
 800146c:	f003 fbd8 	bl	8004c20 <printLCD>
		if (cleanLongPressed == TRUE) {
 8001470:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <CustomerApp+0x100>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10a      	bne.n	800148e <CustomerApp+0xb2>
#if DEBUG == 1
			SerialPrint("CLEANING PROCESS STARTED\n"); //If cleaning is selected
 8001478:	481b      	ldr	r0, [pc, #108]	@ (80014e8 <CustomerApp+0x10c>)
 800147a:	f003 ff8f 	bl	800539c <SerialPrint>
#endif
			LCD_ClearStringBuffer();
 800147e:	f003 fb31 	bl	8004ae4 <LCD_ClearStringBuffer>
			cleanOperation();
 8001482:	f000 fd0b 	bl	8001e9c <cleanOperation>
			cleanLongPressed = FALSE;
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <CustomerApp+0x100>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	e010      	b.n	80014b0 <CustomerApp+0xd4>
		}
		else if (isAutoOperation == FALSE) {
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <CustomerApp+0xf0>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <CustomerApp+0xc8>
			LCD_ClearStringBuffer();
 8001496:	f003 fb25 	bl	8004ae4 <LCD_ClearStringBuffer>
			manualOperation();                         //Manual Operation Is Selected
 800149a:	f000 f847 	bl	800152c <manualOperation>
			LCD_ClearStringBuffer();
 800149e:	f003 fb21 	bl	8004ae4 <LCD_ClearStringBuffer>
 80014a2:	e005      	b.n	80014b0 <CustomerApp+0xd4>
		}
		else {
			LCD_ClearStringBuffer();
 80014a4:	f003 fb1e 	bl	8004ae4 <LCD_ClearStringBuffer>
			autoOperation();                          //Automatic Operation is Selected
 80014a8:	f000 f8e2 	bl	8001670 <autoOperation>
			LCD_ClearStringBuffer();
 80014ac:	f003 fb1a 	bl	8004ae4 <LCD_ClearStringBuffer>
		}
	UpdateTimeToSDCard( hours,  minutes,  seconds);
 80014b0:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <CustomerApp+0x110>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0e      	ldr	r2, [pc, #56]	@ (80014f0 <CustomerApp+0x114>)
 80014b6:	6811      	ldr	r1, [r2, #0]
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <CustomerApp+0x118>)
 80014ba:	6812      	ldr	r2, [r2, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f003 fe8b 	bl	80051d8 <UpdateTimeToSDCard>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000035c 	.word	0x2000035c
 80014cc:	2000010f 	.word	0x2000010f
 80014d0:	08016a8c 	.word	0x08016a8c
 80014d4:	08016a98 	.word	0x08016a98
 80014d8:	08016aa4 	.word	0x08016aa4
 80014dc:	200003f5 	.word	0x200003f5
 80014e0:	2000038d 	.word	0x2000038d
 80014e4:	08016aac 	.word	0x08016aac
 80014e8:	08016ab0 	.word	0x08016ab0
 80014ec:	200003ac 	.word	0x200003ac
 80014f0:	200003a8 	.word	0x200003a8
 80014f4:	200003a4 	.word	0x200003a4

080014f8 <operationCancelled>:

static int operationCancelled()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	if(CleaningCancelFlag || adc_pressure > 100 ){
 80014fc:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <operationCancelled+0x28>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d103      	bne.n	800150c <operationCancelled+0x14>
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <operationCancelled+0x2c>)
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	2b64      	cmp	r3, #100	@ 0x64
 800150a:	d906      	bls.n	800151a <operationCancelled+0x22>
			printLCD(3, "Stop", NO_SYMBOL);
 800150c:	2200      	movs	r2, #0
 800150e:	4906      	ldr	r1, [pc, #24]	@ (8001528 <operationCancelled+0x30>)
 8001510:	2003      	movs	r0, #3
 8001512:	f003 fb85 	bl	8004c20 <printLCD>
		   return 0;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <operationCancelled+0x24>
		}
	return 1;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	200000f1 	.word	0x200000f1
 8001524:	200003b8 	.word	0x200003b8
 8001528:	08016acc 	.word	0x08016acc

0800152c <manualOperation>:

static void manualOperation(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8001532:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001536:	f007 f8df 	bl	80086f8 <HAL_Delay>
	LCD_Clear();
 800153a:	f003 fa71 	bl	8004a20 <LCD_Clear>
	CleaningCancelFlag = FALSE;
 800153e:	4b42      	ldr	r3, [pc, #264]	@ (8001648 <manualOperation+0x11c>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]

	LoadingFunc(BLINK, LOADING);
 8001544:	2101      	movs	r1, #1
 8001546:	2002      	movs	r0, #2
 8001548:	f002 ff30 	bl	80043ac <LoadingFunc>
	moveMotorClampToLocBlock(M1POS2VAL);
 800154c:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8001550:	f001 fc80 	bl	8002e54 <moveMotorClampToLocBlock>
	Servo_SetPercent(ValveOpen);
 8001554:	2064      	movs	r0, #100	@ 0x64
 8001556:	f003 ffd5 	bl	8005504 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS9VAL);
 800155a:	f641 3062 	movw	r0, #7010	@ 0x1b62
 800155e:	f001 fc4d 	bl	8002dfc <moveMotorSpindleToLocBlock>
	HAL_Delay(500);
 8001562:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001566:	f007 f8c7 	bl	80086f8 <HAL_Delay>
	LCD_Clear();
 800156a:	f003 fa59 	bl	8004a20 <LCD_Clear>
	int Total_Weight_Old = Total_Weight;
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <manualOperation+0x120>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	607b      	str	r3, [r7, #4]
	HAL_Delay(2500);
 8001574:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001578:	f007 f8be 	bl	80086f8 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > 25) {
 800157c:	e006      	b.n	800158c <manualOperation+0x60>
		Total_Weight_Old = Total_Weight;
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <manualOperation+0x120>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	607b      	str	r3, [r7, #4]
		HAL_Delay(1000);
 8001584:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001588:	f007 f8b6 	bl	80086f8 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > 25) {
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <manualOperation+0x120>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b19      	cmp	r3, #25
 8001596:	dcf2      	bgt.n	800157e <manualOperation+0x52>
	}
	//moveMotor(VALVEMOTOR, ON, INT_INF); 			//Valve ON switching it on before so that the fresh water starts before the spindle moves down
	//moveMotorSpindleToLocBlock(M2POS2VAL); 			// Requirement from customer to stay position 2
	ManualOperation = TRUE;
 8001598:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <manualOperation+0x124>)
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
	CleaningOperationFlag = TRUE;
 800159e:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <manualOperation+0x128>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
	cleaningCycleProcess();
 80015a4:	f000 fd86 	bl	80020b4 <cleaningCycleProcess>
	uint32_t lastTime = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
	moveMotor(VALVEMOTOR, OFF, INT_INF); 			//Valve OFF // switching it off before so that water is not not present after cleaning
 80015ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001658 <manualOperation+0x12c>)
 80015ae:	2100      	movs	r1, #0
 80015b0:	2003      	movs	r0, #3
 80015b2:	f001 fd93 	bl	80030dc <moveMotor>
	moveMotorSpindleToLocBlock(M2POS1VAL);  		//M2 to P2
 80015b6:	2000      	movs	r0, #0
 80015b8:	f001 fc20 	bl	8002dfc <moveMotorSpindleToLocBlock>
	lastTime = HAL_GetTick();
 80015bc:	f007 f890 	bl	80086e0 <HAL_GetTick>
 80015c0:	6038      	str	r0, [r7, #0]
	while(HAL_GetTick() - lastTime < 2000) {}		//  non-blocking like serial print.}; //M2 to P4 - 1st time;
 80015c2:	bf00      	nop
 80015c4:	f007 f88c 	bl	80086e0 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015d2:	d3f7      	bcc.n	80015c4 <manualOperation+0x98>
	servoCleaning();
 80015d4:	f000 fed2 	bl	800237c <servoCleaning>
	lastTime = HAL_GetTick();
 80015d8:	f007 f882 	bl	80086e0 <HAL_GetTick>
 80015dc:	6038      	str	r0, [r7, #0]
	while(HAL_GetTick() - lastTime < 2000) {}		//  non-blocking like serial print.}; //M2 to P4 - 1st time;
 80015de:	bf00      	nop
 80015e0:	f007 f87e 	bl	80086e0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015ee:	d3f7      	bcc.n	80015e0 <manualOperation+0xb4>
	UserCleaningCycleNumber = 1;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <manualOperation+0x130>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
	CleaningCancelFlag = TRUE;
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <manualOperation+0x11c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
	monitorEnterKey = FALSE;  						//Stop monitoring enter key presses in background
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <manualOperation+0x134>)
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	monitorCleanKey = FALSE;  						//Stop monitoring clean key presses in background
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <manualOperation+0x138>)
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
	EnterPressed = FALSE;     						//Clean any presses of enter key in memory
 8001608:	4b17      	ldr	r3, [pc, #92]	@ (8001668 <manualOperation+0x13c>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	//Excel 44 - 52
	//capCleaning();  NO cap cleaning as requested by customer on 17.01.2025
	LoadingFunc(ON, NOT_LOADING); 					//Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 800160e:	2100      	movs	r1, #0
 8001610:	2001      	movs	r0, #1
 8001612:	f002 fecb 	bl	80043ac <LoadingFunc>
	Servo_SetPercent(90);
 8001616:	205a      	movs	r0, #90	@ 0x5a
 8001618:	f003 ff74 	bl	8005504 <Servo_SetPercent>
	CleaningFlag = FALSE;
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <manualOperation+0x140>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
	UnlockCannister();
 8001622:	f000 fd11 	bl	8002048 <UnlockCannister>
	HAL_Delay(100);
 8001626:	2064      	movs	r0, #100	@ 0x64
 8001628:	f007 f866 	bl	80086f8 <HAL_Delay>
	SubInit();
 800162c:	f002 fc3e 	bl	8003eac <SubInit>
	if(readKeypadNonBlock(CONTROL) == DELKEY)
 8001630:	2002      	movs	r0, #2
 8001632:	f002 fcdb 	bl	8003fec <readKeypadNonBlock>
 8001636:	4603      	mov	r3, r0
 8001638:	2b0e      	cmp	r3, #14
 800163a:	d102      	bne.n	8001642 <manualOperation+0x116>
	{
		LCD_Clear();
 800163c:	f003 f9f0 	bl	8004a20 <LCD_Clear>
		return;
 8001640:	bf00      	nop
	}
}
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000f1 	.word	0x200000f1
 800164c:	2000035c 	.word	0x2000035c
 8001650:	200003a0 	.word	0x200003a0
 8001654:	2000038b 	.word	0x2000038b
 8001658:	0098967f 	.word	0x0098967f
 800165c:	200000f2 	.word	0x200000f2
 8001660:	200003f2 	.word	0x200003f2
 8001664:	200003f4 	.word	0x200003f4
 8001668:	200003f3 	.word	0x200003f3
 800166c:	2000038a 	.word	0x2000038a

08001670 <autoOperation>:

//Excel 57 - 88
static void autoOperation(void)
{
 8001670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001674:	b094      	sub	sp, #80	@ 0x50
 8001676:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001678:	f003 f9d2 	bl	8004a20 <LCD_Clear>
	Servo_SetPercent(90);
 800167c:	205a      	movs	r0, #90	@ 0x5a
 800167e:	f003 ff41 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(2000);
 8001682:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001686:	f007 f837 	bl	80086f8 <HAL_Delay>
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 800168a:	2101      	movs	r1, #1
 800168c:	2002      	movs	r0, #2
 800168e:	f002 fe8d 	bl	80043ac <LoadingFunc>
	Servo_SetPercent(90); // Open valve at automatic (Servo before Cap Opening).
 8001692:	205a      	movs	r0, #90	@ 0x5a
 8001694:	f003 ff36 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(2000);
 8001698:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800169c:	f007 f82c 	bl	80086f8 <HAL_Delay>
	printLCD(0, " ", NO_SYMBOL);  //Clean 1st line
 80016a0:	2200      	movs	r2, #0
 80016a2:	49a1      	ldr	r1, [pc, #644]	@ (8001928 <autoOperation+0x2b8>)
 80016a4:	2000      	movs	r0, #0
 80016a6:	f003 fabb 	bl	8004c20 <printLCD>
	printLCD(3, " ", NO_SYMBOL);  //Clean 4th line
 80016aa:	2200      	movs	r2, #0
 80016ac:	499e      	ldr	r1, [pc, #632]	@ (8001928 <autoOperation+0x2b8>)
 80016ae:	2003      	movs	r0, #3
 80016b0:	f003 fab6 	bl	8004c20 <printLCD>
	LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 80016b4:	2100      	movs	r1, #0
 80016b6:	2001      	movs	r0, #1
 80016b8:	f002 fe78 	bl	80043ac <LoadingFunc>
	Grams_Required = 0;
 80016bc:	4b9b      	ldr	r3, [pc, #620]	@ (800192c <autoOperation+0x2bc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
	while (Grams_Required <= DEAD_WEIGHT || Grams_Required > 100000) {
 80016c2:	e03b      	b.n	800173c <autoOperation+0xcc>
		Take2RowEntries("Liters: ", "kg/Liters: "); //Saves entries in LitersVar and DensityVar.
 80016c4:	499a      	ldr	r1, [pc, #616]	@ (8001930 <autoOperation+0x2c0>)
 80016c6:	489b      	ldr	r0, [pc, #620]	@ (8001934 <autoOperation+0x2c4>)
 80016c8:	f002 feae 	bl	8004428 <Take2RowEntries>
		Grams_Required = LitersVar * DensityVar * 1000.0; //Required weight is liters * density
 80016cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001938 <autoOperation+0x2c8>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	4b9a      	ldr	r3, [pc, #616]	@ (800193c <autoOperation+0x2cc>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016dc:	ee17 0a90 	vmov	r0, s15
 80016e0:	f7fe ff42 	bl	8000568 <__aeabi_f2d>
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	4b95      	ldr	r3, [pc, #596]	@ (8001940 <autoOperation+0x2d0>)
 80016ea:	f7fe ff95 	bl	8000618 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa3f 	bl	8000b78 <__aeabi_d2iz>
 80016fa:	4603      	mov	r3, r0
 80016fc:	4a8b      	ldr	r2, [pc, #556]	@ (800192c <autoOperation+0x2bc>)
 80016fe:	6013      	str	r3, [r2, #0]
		if(Grams_Required <= DEAD_WEIGHT ) {
 8001700:	4b8a      	ldr	r3, [pc, #552]	@ (800192c <autoOperation+0x2bc>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b82      	cmp	r3, #130	@ 0x82
 8001706:	dc0a      	bgt.n	800171e <autoOperation+0xae>
			printLCD(0, " ", NO_SYMBOL);
 8001708:	2200      	movs	r2, #0
 800170a:	4987      	ldr	r1, [pc, #540]	@ (8001928 <autoOperation+0x2b8>)
 800170c:	2000      	movs	r0, #0
 800170e:	f003 fa87 	bl	8004c20 <printLCD>
			printLCD(0, "Too Low Value", NO_SYMBOL);
 8001712:	2200      	movs	r2, #0
 8001714:	498b      	ldr	r1, [pc, #556]	@ (8001944 <autoOperation+0x2d4>)
 8001716:	2000      	movs	r0, #0
 8001718:	f003 fa82 	bl	8004c20 <printLCD>
 800171c:	e00e      	b.n	800173c <autoOperation+0xcc>
		}else if(Grams_Required > 100000 ) {
 800171e:	4b83      	ldr	r3, [pc, #524]	@ (800192c <autoOperation+0x2bc>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a89      	ldr	r2, [pc, #548]	@ (8001948 <autoOperation+0x2d8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	dd09      	ble.n	800173c <autoOperation+0xcc>
			printLCD(0, " ", NO_SYMBOL);
 8001728:	2200      	movs	r2, #0
 800172a:	497f      	ldr	r1, [pc, #508]	@ (8001928 <autoOperation+0x2b8>)
 800172c:	2000      	movs	r0, #0
 800172e:	f003 fa77 	bl	8004c20 <printLCD>
			printLCD(0, "Too High Value", NO_SYMBOL);
 8001732:	2200      	movs	r2, #0
 8001734:	4985      	ldr	r1, [pc, #532]	@ (800194c <autoOperation+0x2dc>)
 8001736:	2000      	movs	r0, #0
 8001738:	f003 fa72 	bl	8004c20 <printLCD>
	while (Grams_Required <= DEAD_WEIGHT || Grams_Required > 100000) {
 800173c:	4b7b      	ldr	r3, [pc, #492]	@ (800192c <autoOperation+0x2bc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b82      	cmp	r3, #130	@ 0x82
 8001742:	ddbf      	ble.n	80016c4 <autoOperation+0x54>
 8001744:	4b79      	ldr	r3, [pc, #484]	@ (800192c <autoOperation+0x2bc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7f      	ldr	r2, [pc, #508]	@ (8001948 <autoOperation+0x2d8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	dcba      	bgt.n	80016c4 <autoOperation+0x54>
		}
	}
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f002 fe2b 	bl	80043ac <LoadingFunc>
	/*Valve Opne close for one second  currently only on A5 T2 */
	uint32_t ventileclean = HAL_GetTick();
 8001756:	f006 ffc3 	bl	80086e0 <HAL_GetTick>
 800175a:	6338      	str	r0, [r7, #48]	@ 0x30
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 800175c:	4a7c      	ldr	r2, [pc, #496]	@ (8001950 <autoOperation+0x2e0>)
 800175e:	2100      	movs	r1, #0
 8001760:	2003      	movs	r0, #3
 8001762:	f001 fcbb 	bl	80030dc <moveMotor>
	while(HAL_GetTick() - ventileclean <= 500);
 8001766:	bf00      	nop
 8001768:	f006 ffba 	bl	80086e0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001776:	d9f7      	bls.n	8001768 <autoOperation+0xf8>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8001778:	4a75      	ldr	r2, [pc, #468]	@ (8001950 <autoOperation+0x2e0>)
 800177a:	2101      	movs	r1, #1
 800177c:	2003      	movs	r0, #3
 800177e:	f001 fcad 	bl	80030dc <moveMotor>
	ventileclean =  HAL_GetTick();
 8001782:	f006 ffad 	bl	80086e0 <HAL_GetTick>
 8001786:	6338      	str	r0, [r7, #48]	@ 0x30
	while(HAL_GetTick() - ventileclean <= 500);
 8001788:	bf00      	nop
 800178a:	f006 ffa9 	bl	80086e0 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001798:	d9f7      	bls.n	800178a <autoOperation+0x11a>
	ventileclean =  HAL_GetTick();
 800179a:	f006 ffa1 	bl	80086e0 <HAL_GetTick>
 800179e:	6338      	str	r0, [r7, #48]	@ 0x30
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80017a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001950 <autoOperation+0x2e0>)
 80017a2:	2100      	movs	r1, #0
 80017a4:	2003      	movs	r0, #3
 80017a6:	f001 fc99 	bl	80030dc <moveMotor>
	HAL_Delay(2000); // waiting here as it needs more more for the pressure to release after freshwater
 80017aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017ae:	f006 ffa3 	bl	80086f8 <HAL_Delay>
	float error = 0;
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	printLCD(2, " ", NO_SYMBOL);
 80017b8:	2200      	movs	r2, #0
 80017ba:	495b      	ldr	r1, [pc, #364]	@ (8001928 <autoOperation+0x2b8>)
 80017bc:	2002      	movs	r0, #2
 80017be:	f003 fa2f 	bl	8004c20 <printLCD>
	printLCD(1, " ", NO_SYMBOL);
 80017c2:	2200      	movs	r2, #0
 80017c4:	4958      	ldr	r1, [pc, #352]	@ (8001928 <autoOperation+0x2b8>)
 80017c6:	2001      	movs	r0, #1
 80017c8:	f003 fa2a 	bl	8004c20 <printLCD>




	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING
 80017cc:	2101      	movs	r1, #1
 80017ce:	2002      	movs	r0, #2
 80017d0:	f002 fdec 	bl	80043ac <LoadingFunc>
	Servo_SetPercent(5);
 80017d4:	2005      	movs	r0, #5
 80017d6:	f003 fe95 	bl	8005504 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS2VAL); //Spindle/CAP Motor to Capping Position
 80017da:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 80017de:	f001 fb0d 	bl	8002dfc <moveMotorSpindleToLocBlock>
	HAL_Delay(6000);
 80017e2:	f241 7070 	movw	r0, #6000	@ 0x1770
 80017e6:	f006 ff87 	bl	80086f8 <HAL_Delay>

	/* Added Stabilizing code such that the initial weight taken for measurement is constant*/
	HAL_Delay(500);
 80017ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017ee:	f006 ff83 	bl	80086f8 <HAL_Delay>
	Weight_Initial = Total_Weight;
 80017f2:	4b58      	ldr	r3, [pc, #352]	@ (8001954 <autoOperation+0x2e4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <autoOperation+0x2e8>)
 80017f8:	6013      	str	r3, [r2, #0]
	//Weight_Initial = Unclamped_Weight;   //Normally Weight_Initial = Total_Weight
	long GramsToDispense = Grams_Required - DEAD_WEIGHT; //DEAD_WEIGHT is the dead weight in the system //Point # 11 for 20 grams bracket
 80017fa:	4b4c      	ldr	r3, [pc, #304]	@ (800192c <autoOperation+0x2bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b82      	subs	r3, #130	@ 0x82
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
	Target_Weight = Weight_Initial - GramsToDispense;
 8001802:	4b55      	ldr	r3, [pc, #340]	@ (8001958 <autoOperation+0x2e8>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	4a54      	ldr	r2, [pc, #336]	@ (800195c <autoOperation+0x2ec>)
 800180c:	6013      	str	r3, [r2, #0]

#if DEBUG == 1
	SerialPrint("Liters Entered: ");
 800180e:	4854      	ldr	r0, [pc, #336]	@ (8001960 <autoOperation+0x2f0>)
 8001810:	f003 fdc4 	bl	800539c <SerialPrint>
	SerialPrintlnINT(LitersVar);
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <autoOperation+0x2c8>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f003 fdf1 	bl	8005408 <SerialPrintlnINT>
	SerialPrint("Density Entered: ");
 8001826:	484f      	ldr	r0, [pc, #316]	@ (8001964 <autoOperation+0x2f4>)
 8001828:	f003 fdb8 	bl	800539c <SerialPrint>
	SerialPrintlnINT(DensityVar);
 800182c:	4b43      	ldr	r3, [pc, #268]	@ (800193c <autoOperation+0x2cc>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001836:	ee17 0a90 	vmov	r0, s15
 800183a:	f003 fde5 	bl	8005408 <SerialPrintlnINT>
	SerialPrint("Grams Calculated: ");
 800183e:	484a      	ldr	r0, [pc, #296]	@ (8001968 <autoOperation+0x2f8>)
 8001840:	f003 fdac 	bl	800539c <SerialPrint>
	SerialPrintlnINT(Grams_Required);
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <autoOperation+0x2bc>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f003 fddd 	bl	8005408 <SerialPrintlnINT>
	SerialPrint("Initial weight: ");
 800184e:	4847      	ldr	r0, [pc, #284]	@ (800196c <autoOperation+0x2fc>)
 8001850:	f003 fda4 	bl	800539c <SerialPrint>
	SerialPrintlnINT(Weight_Initial);
 8001854:	4b40      	ldr	r3, [pc, #256]	@ (8001958 <autoOperation+0x2e8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f003 fdd5 	bl	8005408 <SerialPrintlnINT>
	SerialPrint("Grams to dispense: ");
 800185e:	4844      	ldr	r0, [pc, #272]	@ (8001970 <autoOperation+0x300>)
 8001860:	f003 fd9c 	bl	800539c <SerialPrint>
	SerialPrintlnINT(GramsToDispense);
 8001864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001866:	f003 fdcf 	bl	8005408 <SerialPrintlnINT>
	SerialPrint("UnClamped Weight: ");
 800186a:	4842      	ldr	r0, [pc, #264]	@ (8001974 <autoOperation+0x304>)
 800186c:	f003 fd96 	bl	800539c <SerialPrint>
	SerialPrintlnINT(Unclamped_Weight);
 8001870:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <autoOperation+0x308>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fdc7 	bl	8005408 <SerialPrintlnINT>
	SerialPrint("Target Weight: ");
 800187a:	4840      	ldr	r0, [pc, #256]	@ (800197c <autoOperation+0x30c>)
 800187c:	f003 fd8e 	bl	800539c <SerialPrint>
	SerialPrintlnINT(Target_Weight);
 8001880:	4b36      	ldr	r3, [pc, #216]	@ (800195c <autoOperation+0x2ec>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f003 fdbf 	bl	8005408 <SerialPrintlnINT>
#endif
	if (Target_Weight < 0)
 800188a:	4b34      	ldr	r3, [pc, #208]	@ (800195c <autoOperation+0x2ec>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	da0d      	bge.n	80018ae <autoOperation+0x23e>
		Target_Weight = (Target_Weight * (-1) + Weight_Initial);
 8001892:	4b31      	ldr	r3, [pc, #196]	@ (8001958 <autoOperation+0x2e8>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b31      	ldr	r3, [pc, #196]	@ (800195c <autoOperation+0x2ec>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	4a2f      	ldr	r2, [pc, #188]	@ (800195c <autoOperation+0x2ec>)
 800189e:	6013      	str	r3, [r2, #0]

	while(Total_Weight < Target_Weight)
 80018a0:	e005      	b.n	80018ae <autoOperation+0x23e>
	{
		CustomerAppSub();
 80018a2:	f000 fa6d 	bl	8001d80 <CustomerAppSub>
		HAL_Delay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80018aa:	f006 ff25 	bl	80086f8 <HAL_Delay>
	while(Total_Weight < Target_Weight)
 80018ae:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <autoOperation+0x2e4>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <autoOperation+0x2ec>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dbf3      	blt.n	80018a2 <autoOperation+0x232>
	}

	while (Total_Weight < Target_Weight + 10) {
 80018ba:	e00a      	b.n	80018d2 <autoOperation+0x262>
			HAL_Delay(10);
 80018bc:	200a      	movs	r0, #10
 80018be:	f006 ff1b 	bl	80086f8 <HAL_Delay>
			SerialPrint("Negative Weight: ");
 80018c2:	482f      	ldr	r0, [pc, #188]	@ (8001980 <autoOperation+0x310>)
 80018c4:	f003 fd6a 	bl	800539c <SerialPrint>
			SerialPrintlnINT(Total_Weight);
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <autoOperation+0x2e4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 fd9b 	bl	8005408 <SerialPrintlnINT>
	while (Total_Weight < Target_Weight + 10) {
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <autoOperation+0x2ec>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f103 0209 	add.w	r2, r3, #9
 80018da:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <autoOperation+0x2e4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	daec      	bge.n	80018bc <autoOperation+0x24c>
	}
	uint32_t tickstart = HAL_GetTick();
 80018e2:	f006 fefd 	bl	80086e0 <HAL_GetTick>
 80018e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
	long Weight_Initial1 = Total_Weight;
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <autoOperation+0x2e4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	64bb      	str	r3, [r7, #72]	@ 0x48
	 int is_in_range = FALSE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	647b      	str	r3, [r7, #68]	@ 0x44
		int cnt = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	643b      	str	r3, [r7, #64]	@ 0x40
 //Reduced the Stablizing to 3seconds from 8 seconds
		while (!is_in_range)
 80018f6:	e052      	b.n	800199e <autoOperation+0x32e>
		{
			while((HAL_GetTick() - tickstart) < 200);
 80018f8:	bf00      	nop
 80018fa:	f006 fef1 	bl	80086e0 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2bc7      	cmp	r3, #199	@ 0xc7
 8001906:	d9f8      	bls.n	80018fa <autoOperation+0x28a>

			if((Total_Weight <= Weight_Initial1 + 4) && (Total_Weight >= Weight_Initial1 - 4))
 8001908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800190a:	1d1a      	adds	r2, r3, #4
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <autoOperation+0x2e4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	db37      	blt.n	8001984 <autoOperation+0x314>
 8001914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001916:	1f1a      	subs	r2, r3, #4
 8001918:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <autoOperation+0x2e4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	dc31      	bgt.n	8001984 <autoOperation+0x314>
			{
				cnt++;
 8001920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001922:	3301      	adds	r3, #1
 8001924:	643b      	str	r3, [r7, #64]	@ 0x40
 8001926:	e02f      	b.n	8001988 <autoOperation+0x318>
 8001928:	08016aac 	.word	0x08016aac
 800192c:	20000378 	.word	0x20000378
 8001930:	08016ad4 	.word	0x08016ad4
 8001934:	08016ae0 	.word	0x08016ae0
 8001938:	2000036c 	.word	0x2000036c
 800193c:	20000370 	.word	0x20000370
 8001940:	408f4000 	.word	0x408f4000
 8001944:	08016aec 	.word	0x08016aec
 8001948:	000186a0 	.word	0x000186a0
 800194c:	08016afc 	.word	0x08016afc
 8001950:	0098967f 	.word	0x0098967f
 8001954:	2000035c 	.word	0x2000035c
 8001958:	20000360 	.word	0x20000360
 800195c:	20000368 	.word	0x20000368
 8001960:	08016b0c 	.word	0x08016b0c
 8001964:	08016b20 	.word	0x08016b20
 8001968:	08016b34 	.word	0x08016b34
 800196c:	08016b48 	.word	0x08016b48
 8001970:	08016b5c 	.word	0x08016b5c
 8001974:	08016b70 	.word	0x08016b70
 8001978:	2000037c 	.word	0x2000037c
 800197c:	08016b84 	.word	0x08016b84
 8001980:	08016b94 	.word	0x08016b94
			}
			else
			{
				cnt = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
			}

			if (cnt >= 15)
 8001988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198a:	2b0e      	cmp	r3, #14
 800198c:	dd01      	ble.n	8001992 <autoOperation+0x322>
			{
				is_in_range = TRUE;
 800198e:	2301      	movs	r3, #1
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
			}
			Weight_Initial1 = Total_Weight;
 8001992:	4bbb      	ldr	r3, [pc, #748]	@ (8001c80 <autoOperation+0x610>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	64bb      	str	r3, [r7, #72]	@ 0x48
			tickstart = HAL_GetTick();
 8001998:	f006 fea2 	bl	80086e0 <HAL_GetTick>
 800199c:	64f8      	str	r0, [r7, #76]	@ 0x4c
		while (!is_in_range)
 800199e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0a9      	beq.n	80018f8 <autoOperation+0x288>
		}

	HAL_Delay(1000);
 80019a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a8:	f006 fea6 	bl	80086f8 <HAL_Delay>
	//printLCD(1, "Dispensing....", NO_SYMBOL); // Clean 2nd line
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING
 80019ac:	2101      	movs	r1, #1
 80019ae:	2002      	movs	r0, #2
 80019b0:	f002 fcfc 	bl	80043ac <LoadingFunc>
	Kp = -1337;
 80019b4:	4bb3      	ldr	r3, [pc, #716]	@ (8001c84 <autoOperation+0x614>)
 80019b6:	4ab4      	ldr	r2, [pc, #720]	@ (8001c88 <autoOperation+0x618>)
 80019b8:	601a      	str	r2, [r3, #0]
	uint64_t get_timeTick = HAL_GetTick();
 80019ba:	f006 fe91 	bl	80086e0 <HAL_GetTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	2200      	movs	r2, #0
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	60fa      	str	r2, [r7, #12]
 80019c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	uint16_t WhileWeight = Total_Weight;
 80019ce:	4bac      	ldr	r3, [pc, #688]	@ (8001c80 <autoOperation+0x610>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint8_t Kp_Counter = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	//uint8_t Kp_Counter_2 = 0;
	float minServoPosition = 12.0; // Minimum servo position for slow flow
 80019da:	4bac      	ldr	r3, [pc, #688]	@ (8001c8c <autoOperation+0x61c>)
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
	float maxServoPosition = 50.0; // Maximum servo position for high flow
 80019de:	4bac      	ldr	r3, [pc, #688]	@ (8001c90 <autoOperation+0x620>)
 80019e0:	623b      	str	r3, [r7, #32]
	uint8_t Flag =0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	uint8_t max_opening =0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	77fb      	strb	r3, [r7, #31]
	while (Total_Weight > Target_Weight) {
 80019ec:	e0f2      	b.n	8001bd4 <autoOperation+0x564>
		   int keyread = readKeypadNonBlock(CONTROL);
 80019ee:	2002      	movs	r0, #2
 80019f0:	f002 fafc 	bl	8003fec <readKeypadNonBlock>
 80019f4:	61b8      	str	r0, [r7, #24]
		   if(keyread == ENTERKEY)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b0b      	cmp	r3, #11
 80019fa:	d108      	bne.n	8001a0e <autoOperation+0x39e>
		   {
			   SerialPrint("User Cancelled the Dispensing");
 80019fc:	48a5      	ldr	r0, [pc, #660]	@ (8001c94 <autoOperation+0x624>)
 80019fe:	f003 fccd 	bl	800539c <SerialPrint>
			   printLCD(0, "Stop", NO_SYMBOL);
 8001a02:	2200      	movs	r2, #0
 8001a04:	49a4      	ldr	r1, [pc, #656]	@ (8001c98 <autoOperation+0x628>)
 8001a06:	2000      	movs	r0, #0
 8001a08:	f003 f90a 	bl	8004c20 <printLCD>
			   break;
 8001a0c:	e0e9      	b.n	8001be2 <autoOperation+0x572>
		   }
		   else
		   {
				if(HAL_GetTick() - get_timeTick > 50)
 8001a0e:	f006 fe67 	bl	80086e0 <HAL_GetTick>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2200      	movs	r2, #0
 8001a16:	4698      	mov	r8, r3
 8001a18:	4691      	mov	r9, r2
 8001a1a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a1e:	ebb8 0402 	subs.w	r4, r8, r2
 8001a22:	eb69 0503 	sbc.w	r5, r9, r3
 8001a26:	2c33      	cmp	r4, #51	@ 0x33
 8001a28:	f175 0300 	sbcs.w	r3, r5, #0
 8001a2c:	f0c0 80d2 	bcc.w	8001bd4 <autoOperation+0x564>
				{
				  /* Automatically adjusting PID valves  for dispensing */
					 if(fabs(Total_Weight - Weight_Initial) > 30 && !Flag)
 8001a30:	4b93      	ldr	r3, [pc, #588]	@ (8001c80 <autoOperation+0x610>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b99      	ldr	r3, [pc, #612]	@ (8001c9c <autoOperation+0x62c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd82 	bl	8000544 <__aeabi_i2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4692      	mov	sl, r2
 8001a46:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b94      	ldr	r3, [pc, #592]	@ (8001ca0 <autoOperation+0x630>)
 8001a50:	4650      	mov	r0, sl
 8001a52:	4659      	mov	r1, fp
 8001a54:	f7ff f870 	bl	8000b38 <__aeabi_dcmpgt>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d017      	beq.n	8001a8e <autoOperation+0x41e>
 8001a5e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d113      	bne.n	8001a8e <autoOperation+0x41e>
					{
						max_opening = output;
 8001a66:	4b8f      	ldr	r3, [pc, #572]	@ (8001ca4 <autoOperation+0x634>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a70:	edc7 7a02 	vstr	s15, [r7, #8]
 8001a74:	7a3b      	ldrb	r3, [r7, #8]
 8001a76:	77fb      	strb	r3, [r7, #31]
						minServoPosition = max_opening - 17;
 8001a78:	7ffb      	ldrb	r3, [r7, #31]
 8001a7a:	3b11      	subs	r3, #17
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						Flag = 1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
					}
					error = Total_Weight - Target_Weight;
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c80 <autoOperation+0x610>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b85      	ldr	r3, [pc, #532]	@ (8001ca8 <autoOperation+0x638>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
					if (Kp < 0)
 8001aa4:	4b77      	ldr	r3, [pc, #476]	@ (8001c84 <autoOperation+0x614>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab2:	d508      	bpl.n	8001ac6 <autoOperation+0x456>
					{
						Kp = 20/error;
 8001ab4:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001ab8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac0:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <autoOperation+0x614>)
 8001ac2:	edc3 7a00 	vstr	s15, [r3]
					}
					// P control with adjustment for small errors
					if (fabs(Total_Weight - WhileWeight) <= 10) {
 8001ac6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c80 <autoOperation+0x610>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd38 	bl	8000544 <__aeabi_i2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	613a      	str	r2, [r7, #16]
 8001ada:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b71      	ldr	r3, [pc, #452]	@ (8001cac <autoOperation+0x63c>)
 8001ae6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aea:	f7ff f811 	bl	8000b10 <__aeabi_dcmple>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d022      	beq.n	8001b3a <autoOperation+0x4ca>
						Kp_Counter++;
 8001af4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001af8:	3301      	adds	r3, #1
 8001afa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						if (Kp_Counter >= 10) {
 8001afe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001b02:	2b09      	cmp	r3, #9
 8001b04:	d919      	bls.n	8001b3a <autoOperation+0x4ca>
							if(error >= 1)
 8001b06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b16:	db0d      	blt.n	8001b34 <autoOperation+0x4c4>
							{
								Kp= Kp + (1/error);
 8001b18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b24:	4b57      	ldr	r3, [pc, #348]	@ (8001c84 <autoOperation+0x614>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	4b55      	ldr	r3, [pc, #340]	@ (8001c84 <autoOperation+0x614>)
 8001b30:	edc3 7a00 	vstr	s15, [r3]
							}
							Kp_Counter= 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
						}
					}
					if (error < 100)
 8001b3a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b3e:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001cb0 <autoOperation+0x640>
 8001b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4a:	d516      	bpl.n	8001b7a <autoOperation+0x50a>
					{
						 SerialPrint("Error is less for Dispensing");
 8001b4c:	4859      	ldr	r0, [pc, #356]	@ (8001cb4 <autoOperation+0x644>)
 8001b4e:	f003 fc25 	bl	800539c <SerialPrint>
						 Kp = Kp + 0.001;  // need to test
 8001b52:	4b4c      	ldr	r3, [pc, #304]	@ (8001c84 <autoOperation+0x614>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd06 	bl	8000568 <__aeabi_f2d>
 8001b5c:	a346      	add	r3, pc, #280	@ (adr r3, 8001c78 <autoOperation+0x608>)
 8001b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b62:	f7fe fba3 	bl	80002ac <__adddf3>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f84b 	bl	8000c08 <__aeabi_d2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a43      	ldr	r2, [pc, #268]	@ (8001c84 <autoOperation+0x614>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e009      	b.n	8001b8e <autoOperation+0x51e>
						//write logic for small dispense
					}
					else
					{
						output = (Kp * error);
 8001b7a:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <autoOperation+0x614>)
 8001b7c:	ed93 7a00 	vldr	s14, [r3]
 8001b80:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b88:	4b46      	ldr	r3, [pc, #280]	@ (8001ca4 <autoOperation+0x634>)
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
					}
					if (output > maxServoPosition) {
 8001b8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ca4 <autoOperation+0x634>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d502      	bpl.n	8001ba8 <autoOperation+0x538>
							output = maxServoPosition;
 8001ba2:	4a40      	ldr	r2, [pc, #256]	@ (8001ca4 <autoOperation+0x634>)
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	6013      	str	r3, [r2, #0]
						}
					else if (output < minServoPosition) {
						}
				Servo_SetPercent(output);
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ca4 <autoOperation+0x634>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb2:	ee17 0a90 	vmov	r0, s15
 8001bb6:	f003 fca5 	bl	8005504 <Servo_SetPercent>
				get_timeTick = HAL_GetTick();
 8001bba:	f006 fd91 	bl	80086e0 <HAL_GetTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
				WhileWeight = Total_Weight;   // Update WhileWeight
 8001bce:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <autoOperation+0x610>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	while (Total_Weight > Target_Weight) {
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <autoOperation+0x610>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b33      	ldr	r3, [pc, #204]	@ (8001ca8 <autoOperation+0x638>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f73f af06 	bgt.w	80019ee <autoOperation+0x37e>
			}

		  }
	}
	//Reaching here means the Total_Weight (current measured weight by load cells) is not more than what it should be after extraction
	Servo_SetPercent(ValveClose);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f003 fc8e 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(1000);
 8001be8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bec:	f006 fd84 	bl	80086f8 <HAL_Delay>
	output =0;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <autoOperation+0x634>)
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
	LCD_Clear();
 8001bf8:	f002 ff12 	bl	8004a20 <LCD_Clear>
	LoadingFunc(BLINK, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f002 fbd4 	bl	80043ac <LoadingFunc>
	HAL_Delay(500);
 8001c04:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c08:	f006 fd76 	bl	80086f8 <HAL_Delay>
	printLCD(0, " Complete", NO_SYMBOL);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	492a      	ldr	r1, [pc, #168]	@ (8001cb8 <autoOperation+0x648>)
 8001c10:	2000      	movs	r0, #0
 8001c12:	f003 f805 	bl	8004c20 <printLCD>
	Target_Weight = 0;
 8001c16:	4b24      	ldr	r3, [pc, #144]	@ (8001ca8 <autoOperation+0x638>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
	moveMotorSpindleToLocBlock(M2POS1VAL); //Spindle/CAP to close/uncap position
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f001 f8ed 	bl	8002dfc <moveMotorSpindleToLocBlock>
	HAL_Delay(500);
 8001c22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c26:	f006 fd67 	bl	80086f8 <HAL_Delay>
	Servo_SetPercent(ValveOpen);
 8001c2a:	2064      	movs	r0, #100	@ 0x64
 8001c2c:	f003 fc6a 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(3000);   //Wait for 3 seconds
 8001c30:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001c34:	f006 fd60 	bl	80086f8 <HAL_Delay>

	if (Total_Weight > NO_BOTTLE_WEIGHT) {
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <autoOperation+0x610>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b64      	cmp	r3, #100	@ 0x64
 8001c3e:	dc6a      	bgt.n	8001d16 <autoOperation+0x6a6>
		//Bottle + Remaining Chemical
	}
	else {
		ReadKeypadVar(ALL); //Point # 2
 8001c40:	2000      	movs	r0, #0
 8001c42:	f002 f987 	bl	8003f54 <ReadKeypadVar>
		LCD_Clear();
 8001c46:	f002 feeb 	bl	8004a20 <LCD_Clear>
		printLCD(0, "Press DEL-Skip,for", 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	491b      	ldr	r1, [pc, #108]	@ (8001cbc <autoOperation+0x64c>)
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f002 ffe6 	bl	8004c20 <printLCD>
		printLCD(1, "Cleaning", 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	491a      	ldr	r1, [pc, #104]	@ (8001cc0 <autoOperation+0x650>)
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f002 ffe1 	bl	8004c20 <printLCD>
		printLCD(2, "Press Enter Key", 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4918      	ldr	r1, [pc, #96]	@ (8001cc4 <autoOperation+0x654>)
 8001c62:	2002      	movs	r0, #2
 8001c64:	f002 ffdc 	bl	8004c20 <printLCD>
		printLCD(3, "To Continue", 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4917      	ldr	r1, [pc, #92]	@ (8001cc8 <autoOperation+0x658>)
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f002 ffd7 	bl	8004c20 <printLCD>

		while ((lastKeyPressed == 255 || lastKeyPressed == DELKEY)){ //&& (delLongPressed == FALSE)) {
 8001c72:	e031      	b.n	8001cd8 <autoOperation+0x668>
 8001c74:	f3af 8000 	nop.w
 8001c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c7c:	3f50624d 	.word	0x3f50624d
 8001c80:	2000035c 	.word	0x2000035c
 8001c84:	200000f4 	.word	0x200000f4
 8001c88:	c4a72000 	.word	0xc4a72000
 8001c8c:	41400000 	.word	0x41400000
 8001c90:	42480000 	.word	0x42480000
 8001c94:	08016ba8 	.word	0x08016ba8
 8001c98:	08016acc 	.word	0x08016acc
 8001c9c:	20000360 	.word	0x20000360
 8001ca0:	403e0000 	.word	0x403e0000
 8001ca4:	20000390 	.word	0x20000390
 8001ca8:	20000368 	.word	0x20000368
 8001cac:	40240000 	.word	0x40240000
 8001cb0:	42c80000 	.word	0x42c80000
 8001cb4:	08016bc8 	.word	0x08016bc8
 8001cb8:	08016be8 	.word	0x08016be8
 8001cbc:	08016bf4 	.word	0x08016bf4
 8001cc0:	08016c08 	.word	0x08016c08
 8001cc4:	08016c14 	.word	0x08016c14
 8001cc8:	08016c24 	.word	0x08016c24
			ReadKeypadVar(ALL);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f002 f941 	bl	8003f54 <ReadKeypadVar>
			HAL_Delay(1);
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f006 fd10 	bl	80086f8 <HAL_Delay>
		while ((lastKeyPressed == 255 || lastKeyPressed == DELKEY)){ //&& (delLongPressed == FALSE)) {
 8001cd8:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <autoOperation+0x700>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2bff      	cmp	r3, #255	@ 0xff
 8001cde:	d0f5      	beq.n	8001ccc <autoOperation+0x65c>
 8001ce0:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <autoOperation+0x700>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b0e      	cmp	r3, #14
 8001ce6:	d0f1      	beq.n	8001ccc <autoOperation+0x65c>
		}
		if (cleanLongPressed == TRUE) {
 8001ce8:	4b22      	ldr	r3, [pc, #136]	@ (8001d74 <autoOperation+0x704>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d102      	bne.n	8001cf6 <autoOperation+0x686>
			cleanOperation();
 8001cf0:	f000 f8d4 	bl	8001e9c <cleanOperation>
 8001cf4:	e00f      	b.n	8001d16 <autoOperation+0x6a6>
		}
		else if(lastKeyPressed == DELKEY)
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <autoOperation+0x700>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b0e      	cmp	r3, #14
 8001cfc:	d108      	bne.n	8001d10 <autoOperation+0x6a0>
		{
			CleaningExitCounter = 0;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <autoOperation+0x708>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
			CustomerFrontEnd();
 8001d04:	f7ff fa9a 	bl	800123c <CustomerFrontEnd>
			lastKeyPressed =255;
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <autoOperation+0x700>)
 8001d0a:	22ff      	movs	r2, #255	@ 0xff
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e002      	b.n	8001d16 <autoOperation+0x6a6>
		}
		else{
			delLongPressed = FALSE;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <autoOperation+0x70c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
		}
	}
	capCleaning_Servo();
 8001d16:	f000 fbaf 	bl	8002478 <capCleaning_Servo>
	LoadingFunc(BLINK, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f002 fb45 	bl	80043ac <LoadingFunc>
/**** Servo Open and close for removing the extra water in the pipe ****/
	Servo_SetPercent(90);
 8001d22:	205a      	movs	r0, #90	@ 0x5a
 8001d24:	f003 fbee 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(2000);
 8001d28:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d2c:	f006 fce4 	bl	80086f8 <HAL_Delay>
	Servo_SetPercent(ValveClose);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f003 fbe7 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(1000);
 8001d36:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d3a:	f006 fcdd 	bl	80086f8 <HAL_Delay>
	Servo_SetPercent(90);
 8001d3e:	205a      	movs	r0, #90	@ 0x5a
 8001d40:	f003 fbe0 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(2000);
 8001d44:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d48:	f006 fcd6 	bl	80086f8 <HAL_Delay>
	Servo_SetPercent(ValveClose);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f003 fbd9 	bl	8005504 <Servo_SetPercent>
	HAL_Delay(1000);
 8001d52:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d56:	f006 fccf 	bl	80086f8 <HAL_Delay>
/**** Servo Open and close for removing the extra water in the pipe end ****/
	Servo_SetPercent(90);
 8001d5a:	205a      	movs	r0, #90	@ 0x5a
 8001d5c:	f003 fbd2 	bl	8005504 <Servo_SetPercent>
	UnlockCannister();
 8001d60:	f000 f972 	bl	8002048 <UnlockCannister>
}
 8001d64:	bf00      	nop
 8001d66:	3750      	adds	r7, #80	@ 0x50
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000110 	.word	0x20000110
 8001d74:	200003f5 	.word	0x200003f5
 8001d78:	2000038d 	.word	0x2000038d
 8001d7c:	200003f6 	.word	0x200003f6

08001d80 <CustomerAppSub>:

static void CustomerAppSub(void)
{	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	2101      	movs	r1, #1
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f002 fb0f 	bl	80043ac <LoadingFunc>
	int Total_Weight_Old = Weight_Initial;
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e88 <CustomerAppSub+0x108>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
	int tempWeight = Weight_Initial;
 8001d94:	4b3c      	ldr	r3, [pc, #240]	@ (8001e88 <CustomerAppSub+0x108>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60bb      	str	r3, [r7, #8]
	int Target_Weight1 = Target_Weight ;
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <CustomerAppSub+0x10c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	607b      	str	r3, [r7, #4]
	moveMotorClampToLocBlock(M1POS2VAL);
 8001da0:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8001da4:	f001 f856 	bl	8002e54 <moveMotorClampToLocBlock>
	Servo_SetPercent(ValveOpen);
 8001da8:	2064      	movs	r0, #100	@ 0x64
 8001daa:	f003 fbab 	bl	8005504 <Servo_SetPercent>
	moveMotorSpindleToLocBlock(M2POS2VAL);
 8001dae:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8001db2:	f001 f823 	bl	8002dfc <moveMotorSpindleToLocBlock>
	HAL_Delay(7000);
 8001db6:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001dba:	f006 fc9d 	bl	80086f8 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > (EMPTY_BOTTLE_WEIGHT) || (Total_Weight <= Total_Weight_Old))
 8001dbe:	e006      	b.n	8001dce <CustomerAppSub+0x4e>
	{
		Total_Weight_Old = Total_Weight;
 8001dc0:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <CustomerAppSub+0x110>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
		HAL_Delay(3000);
 8001dc6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001dca:	f006 fc95 	bl	80086f8 <HAL_Delay>
	while (Total_Weight_Old - Total_Weight > (EMPTY_BOTTLE_WEIGHT) || (Total_Weight <= Total_Weight_Old))
 8001dce:	4b30      	ldr	r3, [pc, #192]	@ (8001e90 <CustomerAppSub+0x110>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b4b      	cmp	r3, #75	@ 0x4b
 8001dd8:	dcf2      	bgt.n	8001dc0 <CustomerAppSub+0x40>
 8001dda:	4b2d      	ldr	r3, [pc, #180]	@ (8001e90 <CustomerAppSub+0x110>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	daed      	bge.n	8001dc0 <CustomerAppSub+0x40>
	}
	//Target_Weight = Target_Weight - tempWeight + DEAD_WEIGHT;
	Target_Weight = Target_Weight - tempWeight + DEAD_WEIGHT;
 8001de4:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <CustomerAppSub+0x10c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	3382      	adds	r3, #130	@ 0x82
 8001dee:	4a27      	ldr	r2, [pc, #156]	@ (8001e8c <CustomerAppSub+0x10c>)
 8001df0:	6013      	str	r3, [r2, #0]
	HAL_Delay(1000);
 8001df2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001df6:	f006 fc7f 	bl	80086f8 <HAL_Delay>
	printLCDInt(1, "Wt!", tempWeight,Target_Weight1);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	4925      	ldr	r1, [pc, #148]	@ (8001e94 <CustomerAppSub+0x114>)
 8001e00:	2001      	movs	r0, #1
 8001e02:	f002 fe89 	bl	8004b18 <printLCDInt>
	printLCD(0, "Next Can",ENTER_SYMBOL);
 8001e06:	2201      	movs	r2, #1
 8001e08:	4923      	ldr	r1, [pc, #140]	@ (8001e98 <CustomerAppSub+0x118>)
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f002 ff08 	bl	8004c20 <printLCD>
	UnlockCannister();
 8001e10:	f000 f91a 	bl	8002048 <UnlockCannister>
	LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001e14:	2100      	movs	r1, #0
 8001e16:	2001      	movs	r0, #1
 8001e18:	f002 fac8 	bl	80043ac <LoadingFunc>
	moveMotorSpindleToLocBlock(M2POS1VAL);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 ffed 	bl	8002dfc <moveMotorSpindleToLocBlock>
	moveMotorClampToLocBlock(M1POS1VAL);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f001 f816 	bl	8002e54 <moveMotorClampToLocBlock>
	while ((digitalRead(Button_Enter_Input_PullUp) == HIGH) && (Total_Weight < NO_BOTTLE_WEIGHT))
 8001e28:	bf00      	nop
 8001e2a:	200d      	movs	r0, #13
 8001e2c:	f000 ff9e 	bl	8002d6c <digitalRead>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d103      	bne.n	8001e3e <CustomerAppSub+0xbe>
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <CustomerAppSub+0x110>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b63      	cmp	r3, #99	@ 0x63
 8001e3c:	ddf5      	ble.n	8001e2a <CustomerAppSub+0xaa>
	{
	}
	moveMotorClampToLocBlock(M1POS2VAL);
 8001e3e:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8001e42:	f001 f807 	bl	8002e54 <moveMotorClampToLocBlock>
	HAL_Delay(5000);
 8001e46:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e4a:	f006 fc55 	bl	80086f8 <HAL_Delay>
	int tempWeight2 = Total_Weight;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <CustomerAppSub+0x110>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	603b      	str	r3, [r7, #0]
	//Target_Weight = tempWeight2 - (Target_Weight  - EMPTY_BOTTLE_WEIGHT);
	Target_Weight = tempWeight2 - Target_Weight;
 8001e54:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <CustomerAppSub+0x10c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <CustomerAppSub+0x10c>)
 8001e5e:	6013      	str	r3, [r2, #0]
	HAL_Delay(2000);
 8001e60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e64:	f006 fc48 	bl	80086f8 <HAL_Delay>
	moveMotorSpindleToLocBlock(M2POS2VAL);
 8001e68:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8001e6c:	f000 ffc6 	bl	8002dfc <moveMotorSpindleToLocBlock>
	HAL_Delay(3000);
 8001e70:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e74:	f006 fc40 	bl	80086f8 <HAL_Delay>
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2002      	movs	r0, #2
 8001e7c:	f002 fa96 	bl	80043ac <LoadingFunc>
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	20000360 	.word	0x20000360
 8001e8c:	20000368 	.word	0x20000368
 8001e90:	2000035c 	.word	0x2000035c
 8001e94:	08016c30 	.word	0x08016c30
 8001e98:	08016c34 	.word	0x08016c34

08001e9c <cleanOperation>:


//Excel 90 - 104
static void cleanOperation(void) {
 8001e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
	LCD_Clear();
 8001ea4:	f002 fdbc 	bl	8004a20 <LCD_Clear>
	CleaningCancelFlag = FALSE;
 8001ea8:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <cleanOperation+0x174>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
	int AverageValveforPressure = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]
	while(AverageValveforPressure < 50 ){
 8001eb2:	e007      	b.n	8001ec4 <cleanOperation+0x28>
		pressureSensorReading();
 8001eb4:	f7ff f960 	bl	8001178 <pressureSensorReading>
		AverageValveforPressure++;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	60fb      	str	r3, [r7, #12]
		HAL_Delay(10);
 8001ebe:	200a      	movs	r0, #10
 8001ec0:	f006 fc1a 	bl	80086f8 <HAL_Delay>
	while(AverageValveforPressure < 50 ){
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b31      	cmp	r3, #49	@ 0x31
 8001ec8:	ddf4      	ble.n	8001eb4 <cleanOperation+0x18>
	}
#if DEBUG == 1
	 SerialPrint("Pressure Valve ");
 8001eca:	4852      	ldr	r0, [pc, #328]	@ (8002014 <cleanOperation+0x178>)
 8001ecc:	f003 fa66 	bl	800539c <SerialPrint>
#endif
	 SerialPrintlnINT(pressurechange);
 8001ed0:	4b51      	ldr	r3, [pc, #324]	@ (8002018 <cleanOperation+0x17c>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eda:	ee17 0a90 	vmov	r0, s15
 8001ede:	f003 fa93 	bl	8005408 <SerialPrintlnINT>
	if(pressurechange > 100)
 8001ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <cleanOperation+0x17c>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800201c <cleanOperation+0x180>
 8001eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef4:	dd1f      	ble.n	8001f36 <cleanOperation+0x9a>
	 {
		 moveMotor(VALVEMOTOR, OFF, INT_INF); //Servo?
 8001ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8002020 <cleanOperation+0x184>)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2003      	movs	r0, #3
 8001efc:	f001 f8ee 	bl	80030dc <moveMotor>
#if DEBUG == 1
		 SerialPrint("Pressure Valve ");
 8001f00:	4844      	ldr	r0, [pc, #272]	@ (8002014 <cleanOperation+0x178>)
 8001f02:	f003 fa4b 	bl	800539c <SerialPrint>
		 SerialPrintlnINT(pressurechange);
 8001f06:	4b44      	ldr	r3, [pc, #272]	@ (8002018 <cleanOperation+0x17c>)
 8001f08:	edd3 7a00 	vldr	s15, [r3]
 8001f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f003 fa78 	bl	8005408 <SerialPrintlnINT>
#endif
		 printLCD(3, "Very High Pres.", NO_SYMBOL);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4942      	ldr	r1, [pc, #264]	@ (8002024 <cleanOperation+0x188>)
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f002 fe7f 	bl	8004c20 <printLCD>
		 printLCD(2, "Fehler F1.", NO_SYMBOL);
 8001f22:	2200      	movs	r2, #0
 8001f24:	4940      	ldr	r1, [pc, #256]	@ (8002028 <cleanOperation+0x18c>)
 8001f26:	2002      	movs	r0, #2
 8001f28:	f002 fe7a 	bl	8004c20 <printLCD>
		 HAL_Delay(5000);
 8001f2c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001f30:	f006 fbe2 	bl	80086f8 <HAL_Delay>
		 return;
 8001f34:	e068      	b.n	8002008 <cleanOperation+0x16c>
	 }
	else
	{
		LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8001f36:	2101      	movs	r1, #1
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f002 fa37 	bl	80043ac <LoadingFunc>
		while (Total_Weight < EMPTY_BOTTLE_WEIGHT) { //Point # 12
 8001f3e:	bf00      	nop
 8001f40:	4b3a      	ldr	r3, [pc, #232]	@ (800202c <cleanOperation+0x190>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b4a      	cmp	r3, #74	@ 0x4a
 8001f46:	dc2a      	bgt.n	8001f9e <cleanOperation+0x102>
			ReadKeypadVar(CONTROL);
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f002 f803 	bl	8003f54 <ReadKeypadVar>
			printLCD(1, "No Cannister", 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4937      	ldr	r1, [pc, #220]	@ (8002030 <cleanOperation+0x194>)
 8001f52:	2001      	movs	r0, #1
 8001f54:	f002 fe64 	bl	8004c20 <printLCD>
			printLCD(2, "Press Enter", 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4936      	ldr	r1, [pc, #216]	@ (8002034 <cleanOperation+0x198>)
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f002 fe5f 	bl	8004c20 <printLCD>
			Servo_SetPercent(ValveOpen);			//Open Servo
 8001f62:	2064      	movs	r0, #100	@ 0x64
 8001f64:	f003 face 	bl	8005504 <Servo_SetPercent>
			moveMotorSpindleToLocBlock(M2POS1VAL); 	//UnCap
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f000 ff47 	bl	8002dfc <moveMotorSpindleToLocBlock>
			moveMotorClampToLocBlock(M1POS1VAL);	//UnClamp
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 ff70 	bl	8002e54 <moveMotorClampToLocBlock>
			LoadingFunc(ON, NOT_LOADING);
 8001f74:	2100      	movs	r1, #0
 8001f76:	2001      	movs	r0, #1
 8001f78:	f002 fa18 	bl	80043ac <LoadingFunc>
			HAL_Delay(500);
 8001f7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f80:	f006 fbba 	bl	80086f8 <HAL_Delay>
			while (lastKeyPressed != ENTERKEY) {
 8001f84:	e006      	b.n	8001f94 <cleanOperation+0xf8>
				ReadKeypadVar(CONTROL);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f001 ffe4 	bl	8003f54 <ReadKeypadVar>
				HAL_Delay(500);
 8001f8c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f90:	f006 fbb2 	bl	80086f8 <HAL_Delay>
			while (lastKeyPressed != ENTERKEY) {
 8001f94:	4b28      	ldr	r3, [pc, #160]	@ (8002038 <cleanOperation+0x19c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b0b      	cmp	r3, #11
 8001f9a:	d1f4      	bne.n	8001f86 <cleanOperation+0xea>
			}
			return;
 8001f9c:	e034      	b.n	8002008 <cleanOperation+0x16c>
		}
		  ManualOperation = TRUE;
 8001f9e:	4b27      	ldr	r3, [pc, #156]	@ (800203c <cleanOperation+0x1a0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
		 if(Total_Weight < MIN_LIQUID_CHECK_FOR_CLEANING)
 8001fa4:	4b21      	ldr	r3, [pc, #132]	@ (800202c <cleanOperation+0x190>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001fac:	da29      	bge.n	8002002 <cleanOperation+0x166>
		 {
			SerialPrint("less weight so existing\n ");
 8001fae:	4824      	ldr	r0, [pc, #144]	@ (8002040 <cleanOperation+0x1a4>)
 8001fb0:	f003 f9f4 	bl	800539c <SerialPrint>
			CleaningOperationFlag = TRUE;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <cleanOperation+0x1a8>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
			cleaningCycleProcess();
 8001fba:	f000 f87b 	bl	80020b4 <cleaningCycleProcess>
			uint64_t lastTime = HAL_GetTick();
 8001fbe:	f006 fb8f 	bl	80086e0 <HAL_GetTick>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	469a      	mov	sl, r3
 8001fc8:	4693      	mov	fp, r2
 8001fca:	e9c7 ab00 	strd	sl, fp, [r7]
			while(HAL_GetTick() - lastTime < 1000) {}//  non-blocking like serial print.}
 8001fce:	bf00      	nop
 8001fd0:	f006 fb86 	bl	80086e0 <HAL_GetTick>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4698      	mov	r8, r3
 8001fda:	4691      	mov	r9, r2
 8001fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fe0:	ebb8 0402 	subs.w	r4, r8, r2
 8001fe4:	eb69 0503 	sbc.w	r5, r9, r3
 8001fe8:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8001fec:	f175 0300 	sbcs.w	r3, r5, #0
 8001ff0:	d3ee      	bcc.n	8001fd0 <cleanOperation+0x134>
			moveMotorSpindleToLocBlock(M2POS1VAL);  //M2 to P2
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 ff02 	bl	8002dfc <moveMotorSpindleToLocBlock>
			servoCleaning();
 8001ff8:	f000 f9c0 	bl	800237c <servoCleaning>
			UnlockCannister();
 8001ffc:	f000 f824 	bl	8002048 <UnlockCannister>
 8002000:	e002      	b.n	8002008 <cleanOperation+0x16c>
			isCleaning = FALSE;
			CleaningOperationFlag = FALSE;*/
		 }
		 else
		 {
			 CleaningOperationFlag = FALSE;
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <cleanOperation+0x1a8>)
 8002004:	2200      	movs	r2, #0
 8002006:	701a      	strb	r2, [r3, #0]
			 //return;
		 }
	}
}
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002010:	200000f1 	.word	0x200000f1
 8002014:	08016c40 	.word	0x08016c40
 8002018:	200003b4 	.word	0x200003b4
 800201c:	42c80000 	.word	0x42c80000
 8002020:	0098967f 	.word	0x0098967f
 8002024:	08016c50 	.word	0x08016c50
 8002028:	08016c60 	.word	0x08016c60
 800202c:	2000035c 	.word	0x2000035c
 8002030:	08016c6c 	.word	0x08016c6c
 8002034:	08016c7c 	.word	0x08016c7c
 8002038:	20000110 	.word	0x20000110
 800203c:	200003a0 	.word	0x200003a0
 8002040:	08016c88 	.word	0x08016c88
 8002044:	2000038b 	.word	0x2000038b

08002048 <UnlockCannister>:


static void UnlockCannister(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	LCD_Clear();
 800204c:	f002 fce8 	bl	8004a20 <LCD_Clear>
	HAL_Delay(500);
 8002050:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002054:	f006 fb50 	bl	80086f8 <HAL_Delay>
	LoadingFunc(ON, NOT_LOADING);
 8002058:	2100      	movs	r1, #0
 800205a:	2001      	movs	r0, #1
 800205c:	f002 f9a6 	bl	80043ac <LoadingFunc>
	printLCD(0, "Unlock ", ENTER_SYMBOL);
 8002060:	2201      	movs	r2, #1
 8002062:	4911      	ldr	r1, [pc, #68]	@ (80020a8 <UnlockCannister+0x60>)
 8002064:	2000      	movs	r0, #0
 8002066:	f002 fddb 	bl	8004c20 <printLCD>
	HAL_Delay(1000);
 800206a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800206e:	f006 fb43 	bl	80086f8 <HAL_Delay>
	while(TRUE){
		ReadKeypadVar(CONTROL);
 8002072:	2002      	movs	r0, #2
 8002074:	f001 ff6e 	bl	8003f54 <ReadKeypadVar>
		if(lastKeyPressed == ENTERKEY){
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <UnlockCannister+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b0b      	cmp	r3, #11
 800207e:	d1f8      	bne.n	8002072 <UnlockCannister+0x2a>
			moveMotorSpindleToLocBlock(M2POS1VAL);
 8002080:	2000      	movs	r0, #0
 8002082:	f000 febb 	bl	8002dfc <moveMotorSpindleToLocBlock>
			moveMotorClampToLocBlock(M1POS1VAL);
 8002086:	2000      	movs	r0, #0
 8002088:	f000 fee4 	bl	8002e54 <moveMotorClampToLocBlock>
			LCD_Clear();
 800208c:	f002 fcc8 	bl	8004a20 <LCD_Clear>
			HAL_Delay(200);
 8002090:	20c8      	movs	r0, #200	@ 0xc8
 8002092:	f006 fb31 	bl	80086f8 <HAL_Delay>
			CleaningExitCounter = 0;
 8002096:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <UnlockCannister+0x68>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
			LoadingFunc(BLINK, LOADING);
 800209c:	2101      	movs	r1, #1
 800209e:	2002      	movs	r0, #2
 80020a0:	f002 f984 	bl	80043ac <LoadingFunc>
			return;
 80020a4:	bf00      	nop
			CleaningExitCounter = 0;
			return;
		}*/
	}
	UpdateTimeToSDCard( hours,  minutes,  seconds);
}
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	08016ca4 	.word	0x08016ca4
 80020ac:	20000110 	.word	0x20000110
 80020b0:	2000038d 	.word	0x2000038d

080020b4 <cleaningCycleProcess>:

static void cleaningCycleProcess(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
	 CleaningCancelFlag = FALSE;
 80020ba:	4ba6      	ldr	r3, [pc, #664]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
	 moveMotorClampToLocBlock(M1POS2VAL);      //(M1POS4VAL, NONE);  //M1 to P4
 80020c0:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80020c4:	f000 fec6 	bl	8002e54 <moveMotorClampToLocBlock>
	 Servo_SetPercent(ValveOpen);
 80020c8:	2064      	movs	r0, #100	@ 0x64
 80020ca:	f003 fa1b 	bl	8005504 <Servo_SetPercent>
	 moveMotor(VALVEMOTOR, ON, INT_INF);
 80020ce:	4aa2      	ldr	r2, [pc, #648]	@ (8002358 <cleaningCycleProcess+0x2a4>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2003      	movs	r0, #3
 80020d4:	f001 f802 	bl	80030dc <moveMotor>
	 LoadingFunc(BLINK, LOADING);
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f002 f966 	bl	80043ac <LoadingFunc>
     LCD_Clear();
 80020e0:	f002 fc9e 	bl	8004a20 <LCD_Clear>
	 HAL_Delay(500);
 80020e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020e8:	f006 fb06 	bl	80086f8 <HAL_Delay>
	 uint32_t tickstart = HAL_GetTick();
 80020ec:	f006 faf8 	bl	80086e0 <HAL_GetTick>
 80020f0:	6078      	str	r0, [r7, #4]
	printLCDInt(3,"Cycle No: ",1, UserCleaningCycleNumber);
 80020f2:	4b9a      	ldr	r3, [pc, #616]	@ (800235c <cleaningCycleProcess+0x2a8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2201      	movs	r2, #1
 80020fa:	4999      	ldr	r1, [pc, #612]	@ (8002360 <cleaningCycleProcess+0x2ac>)
 80020fc:	2003      	movs	r0, #3
 80020fe:	f002 fd0b 	bl	8004b18 <printLCDInt>
	tickstart = HAL_GetTick();
 8002102:	f006 faed 	bl	80086e0 <HAL_GetTick>
 8002106:	6078      	str	r0, [r7, #4]
	completedCycles = 0;
 8002108:	4b96      	ldr	r3, [pc, #600]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
	 while (completedCycles < UserCleaningCycleNumber)
 800210e:	e0f7      	b.n	8002300 <cleaningCycleProcess+0x24c>
	 {
		for(int j = 0; j < 4; j++)
 8002110:	2300      	movs	r3, #0
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	e0a7      	b.n	8002266 <cleaningCycleProcess+0x1b2>
		{
			if(operationCancelled() == 0){ break;}
 8002116:	f7ff f9ef 	bl	80014f8 <operationCancelled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80a7 	beq.w	8002270 <cleaningCycleProcess+0x1bc>
			while((HAL_GetTick() - tickstart) <= 1000 );
 8002122:	bf00      	nop
 8002124:	f006 fadc 	bl	80086e0 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002132:	d9f7      	bls.n	8002124 <cleaningCycleProcess+0x70>
			tickstart = HAL_GetTick();
 8002134:	f006 fad4 	bl	80086e0 <HAL_GetTick>
 8002138:	6078      	str	r0, [r7, #4]
			printLCDInt(3,"Cycle No: ",completedCycles + 1, UserCleaningCycleNumber);
 800213a:	4b8a      	ldr	r3, [pc, #552]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	4b86      	ldr	r3, [pc, #536]	@ (800235c <cleaningCycleProcess+0x2a8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4985      	ldr	r1, [pc, #532]	@ (8002360 <cleaningCycleProcess+0x2ac>)
 800214a:	2003      	movs	r0, #3
 800214c:	f002 fce4 	bl	8004b18 <printLCDInt>
			moveMotorSpindleToLocBlock(M2POS7VAL);
 8002150:	f241 7004 	movw	r0, #5892	@ 0x1704
 8002154:	f000 fe52 	bl	8002dfc <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 8002158:	bf00      	nop
 800215a:	f006 fac1 	bl	80086e0 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002168:	d9f7      	bls.n	800215a <cleaningCycleProcess+0xa6>
			tickstart = HAL_GetTick();
 800216a:	f006 fab9 	bl	80086e0 <HAL_GetTick>
 800216e:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 8002170:	4b78      	ldr	r3, [pc, #480]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d103      	bne.n	8002180 <cleaningCycleProcess+0xcc>
 8002178:	4b7b      	ldr	r3, [pc, #492]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	2b64      	cmp	r3, #100	@ 0x64
 800217e:	d905      	bls.n	800218c <cleaningCycleProcess+0xd8>
				printLCD(3, "Stop", NO_SYMBOL);
 8002180:	2200      	movs	r2, #0
 8002182:	497a      	ldr	r1, [pc, #488]	@ (800236c <cleaningCycleProcess+0x2b8>)
 8002184:	2003      	movs	r0, #3
 8002186:	f002 fd4b 	bl	8004c20 <printLCD>
				break;
 800218a:	e072      	b.n	8002272 <cleaningCycleProcess+0x1be>
			}
			moveMotorSpindleToLocBlock(M2POS8VAL);
 800218c:	f641 009c 	movw	r0, #6300	@ 0x189c
 8002190:	f000 fe34 	bl	8002dfc <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 8002194:	bf00      	nop
 8002196:	f006 faa3 	bl	80086e0 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021a4:	d9f7      	bls.n	8002196 <cleaningCycleProcess+0xe2>
			tickstart = HAL_GetTick();
 80021a6:	f006 fa9b 	bl	80086e0 <HAL_GetTick>
 80021aa:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 80021ac:	4b69      	ldr	r3, [pc, #420]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d103      	bne.n	80021bc <cleaningCycleProcess+0x108>
 80021b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	2b64      	cmp	r3, #100	@ 0x64
 80021ba:	d905      	bls.n	80021c8 <cleaningCycleProcess+0x114>
				printLCD(3, "Stop", NO_SYMBOL);
 80021bc:	2200      	movs	r2, #0
 80021be:	496b      	ldr	r1, [pc, #428]	@ (800236c <cleaningCycleProcess+0x2b8>)
 80021c0:	2003      	movs	r0, #3
 80021c2:	f002 fd2d 	bl	8004c20 <printLCD>
				break;
 80021c6:	e054      	b.n	8002272 <cleaningCycleProcess+0x1be>
			}
			moveMotorSpindleToLocBlock(M2POS9VAL);
 80021c8:	f641 3062 	movw	r0, #7010	@ 0x1b62
 80021cc:	f000 fe16 	bl	8002dfc <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 80021d0:	bf00      	nop
 80021d2:	f006 fa85 	bl	80086e0 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021e0:	d9f7      	bls.n	80021d2 <cleaningCycleProcess+0x11e>
			tickstart = HAL_GetTick();
 80021e2:	f006 fa7d 	bl	80086e0 <HAL_GetTick>
 80021e6:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 80021e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d103      	bne.n	80021f8 <cleaningCycleProcess+0x144>
 80021f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	2b64      	cmp	r3, #100	@ 0x64
 80021f6:	d905      	bls.n	8002204 <cleaningCycleProcess+0x150>
				printLCD(3, "Stop", NO_SYMBOL);
 80021f8:	2200      	movs	r2, #0
 80021fa:	495c      	ldr	r1, [pc, #368]	@ (800236c <cleaningCycleProcess+0x2b8>)
 80021fc:	2003      	movs	r0, #3
 80021fe:	f002 fd0f 	bl	8004c20 <printLCD>
				break;
 8002202:	e036      	b.n	8002272 <cleaningCycleProcess+0x1be>
			}
			moveMotorSpindleToLocBlock(M2POS8VAL);
 8002204:	f641 009c 	movw	r0, #6300	@ 0x189c
 8002208:	f000 fdf8 	bl	8002dfc <moveMotorSpindleToLocBlock>
			while((HAL_GetTick() - tickstart) <= 1000 );
 800220c:	bf00      	nop
 800220e:	f006 fa67 	bl	80086e0 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800221c:	d9f7      	bls.n	800220e <cleaningCycleProcess+0x15a>
			tickstart = HAL_GetTick();
 800221e:	f006 fa5f 	bl	80086e0 <HAL_GetTick>
 8002222:	6078      	str	r0, [r7, #4]
			if(CleaningCancelFlag || adc_pressure > 100 ){
 8002224:	4b4b      	ldr	r3, [pc, #300]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d103      	bne.n	8002234 <cleaningCycleProcess+0x180>
 800222c:	4b4e      	ldr	r3, [pc, #312]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	2b64      	cmp	r3, #100	@ 0x64
 8002232:	d905      	bls.n	8002240 <cleaningCycleProcess+0x18c>
				printLCD(3, "Stop", NO_SYMBOL);
 8002234:	2200      	movs	r2, #0
 8002236:	494d      	ldr	r1, [pc, #308]	@ (800236c <cleaningCycleProcess+0x2b8>)
 8002238:	2003      	movs	r0, #3
 800223a:	f002 fcf1 	bl	8004c20 <printLCD>
				break;
 800223e:	e018      	b.n	8002272 <cleaningCycleProcess+0x1be>
			}

			printLCDInt(3,"Cycle No: ",completedCycles + 1, UserCleaningCycleNumber);
 8002240:	4b48      	ldr	r3, [pc, #288]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	4b44      	ldr	r3, [pc, #272]	@ (800235c <cleaningCycleProcess+0x2a8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4944      	ldr	r1, [pc, #272]	@ (8002360 <cleaningCycleProcess+0x2ac>)
 8002250:	2003      	movs	r0, #3
 8002252:	f002 fc61 	bl	8004b18 <printLCDInt>
			moveMotor(VALVEMOTOR, ON, INT_INF); //Valve ON
 8002256:	4a40      	ldr	r2, [pc, #256]	@ (8002358 <cleaningCycleProcess+0x2a4>)
 8002258:	2101      	movs	r1, #1
 800225a:	2003      	movs	r0, #3
 800225c:	f000 ff3e 	bl	80030dc <moveMotor>
		for(int j = 0; j < 4; j++)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	3301      	adds	r3, #1
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b03      	cmp	r3, #3
 800226a:	f77f af54 	ble.w	8002116 <cleaningCycleProcess+0x62>
 800226e:	e000      	b.n	8002272 <cleaningCycleProcess+0x1be>
			if(operationCancelled() == 0){ break;}
 8002270:	bf00      	nop
	}

// Check for updates to UserCleaningCycleNumber
		if (completedCycles >= UserCleaningCycleNumber) {
 8002272:	4b3c      	ldr	r3, [pc, #240]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b38      	ldr	r3, [pc, #224]	@ (800235c <cleaningCycleProcess+0x2a8>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	429a      	cmp	r2, r3
 8002280:	d248      	bcs.n	8002314 <cleaningCycleProcess+0x260>
			break; // Stop if cycles are reduced below the current index
		}

		completedCycles++; // Increment completed cycles
 8002282:	4b38      	ldr	r3, [pc, #224]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b35      	ldr	r3, [pc, #212]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 800228e:	701a      	strb	r2, [r3, #0]
		if(CleaningCancelFlag|| adc_pressure > 100){break;}
 8002290:	4b30      	ldr	r3, [pc, #192]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d13e      	bne.n	8002316 <cleaningCycleProcess+0x262>
 8002298:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	2b64      	cmp	r3, #100	@ 0x64
 800229e:	d83a      	bhi.n	8002316 <cleaningCycleProcess+0x262>
		moveMotorSpindleToLocBlock(M2POS9VAL);
 80022a0:	f641 3062 	movw	r0, #7010	@ 0x1b62
 80022a4:	f000 fdaa 	bl	8002dfc <moveMotorSpindleToLocBlock>
		while((HAL_GetTick() - tickstart) <= 1000 );
 80022a8:	bf00      	nop
 80022aa:	f006 fa19 	bl	80086e0 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022b8:	d9f7      	bls.n	80022aa <cleaningCycleProcess+0x1f6>
		tickstart = HAL_GetTick();
 80022ba:	f006 fa11 	bl	80086e0 <HAL_GetTick>
 80022be:	6078      	str	r0, [r7, #4]
		if(CleaningCancelFlag|| adc_pressure > 100){break;}
 80022c0:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d126      	bne.n	8002316 <cleaningCycleProcess+0x262>
 80022c8:	4b27      	ldr	r3, [pc, #156]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	2b64      	cmp	r3, #100	@ 0x64
 80022ce:	d822      	bhi.n	8002316 <cleaningCycleProcess+0x262>
		moveMotorSpindleToLocBlock(M2POS7VAL);
 80022d0:	f241 7004 	movw	r0, #5892	@ 0x1704
 80022d4:	f000 fd92 	bl	8002dfc <moveMotorSpindleToLocBlock>
		while((HAL_GetTick() - tickstart) <= 1000 );
 80022d8:	bf00      	nop
 80022da:	f006 fa01 	bl	80086e0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022e8:	d9f7      	bls.n	80022da <cleaningCycleProcess+0x226>
		tickstart = HAL_GetTick();
 80022ea:	f006 f9f9 	bl	80086e0 <HAL_GetTick>
 80022ee:	6078      	str	r0, [r7, #4]
		if(CleaningCancelFlag|| adc_pressure > 100){break;}
 80022f0:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10e      	bne.n	8002316 <cleaningCycleProcess+0x262>
 80022f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <cleaningCycleProcess+0x2b4>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b64      	cmp	r3, #100	@ 0x64
 80022fe:	d80a      	bhi.n	8002316 <cleaningCycleProcess+0x262>
	 while (completedCycles < UserCleaningCycleNumber)
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <cleaningCycleProcess+0x2b0>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b15      	ldr	r3, [pc, #84]	@ (800235c <cleaningCycleProcess+0x2a8>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	429a      	cmp	r2, r3
 800230e:	f4ff aeff 	bcc.w	8002110 <cleaningCycleProcess+0x5c>
 8002312:	e000      	b.n	8002316 <cleaningCycleProcess+0x262>
			break; // Stop if cycles are reduced below the current index
 8002314:	bf00      	nop

	}

	while((HAL_GetTick() - tickstart) <= 1000 );
 8002316:	bf00      	nop
 8002318:	f006 f9e2 	bl	80086e0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002326:	d9f7      	bls.n	8002318 <cleaningCycleProcess+0x264>
	tickstart = HAL_GetTick();
 8002328:	f006 f9da 	bl	80086e0 <HAL_GetTick>
 800232c:	6078      	str	r0, [r7, #4]
	CleaningCancelFlag = TRUE;
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <cleaningCycleProcess+0x2a0>)
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
	cleanLongPressed = FALSE;
 8002334:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <cleaningCycleProcess+0x2bc>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
	delLongPressed = FALSE;
 800233a:	4b0e      	ldr	r3, [pc, #56]	@ (8002374 <cleaningCycleProcess+0x2c0>)
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
	UserCleaningCycleNumber = 1;
 8002340:	4b06      	ldr	r3, [pc, #24]	@ (800235c <cleaningCycleProcess+0x2a8>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
	CleaningOperationFlag = FALSE;
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <cleaningCycleProcess+0x2c4>)
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	200000f1 	.word	0x200000f1
 8002358:	0098967f 	.word	0x0098967f
 800235c:	200000f2 	.word	0x200000f2
 8002360:	08016cac 	.word	0x08016cac
 8002364:	200003a1 	.word	0x200003a1
 8002368:	200003b8 	.word	0x200003b8
 800236c:	08016acc 	.word	0x08016acc
 8002370:	200003f5 	.word	0x200003f5
 8002374:	200003f6 	.word	0x200003f6
 8002378:	2000038b 	.word	0x2000038b

0800237c <servoCleaning>:

static void servoCleaning(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
	uint32_t get_timeTick = HAL_GetTick();
 8002382:	f006 f9ad 	bl	80086e0 <HAL_GetTick>
 8002386:	6078      	str	r0, [r7, #4]
	moveMotor(VALVEMOTOR, ON, INT_INF); //Valve ON
 8002388:	4a39      	ldr	r2, [pc, #228]	@ (8002470 <servoCleaning+0xf4>)
 800238a:	2101      	movs	r1, #1
 800238c:	2003      	movs	r0, #3
 800238e:	f000 fea5 	bl	80030dc <moveMotor>
	Servo_SetPercent(90);
 8002392:	205a      	movs	r0, #90	@ 0x5a
 8002394:	f003 f8b6 	bl	8005504 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 8002398:	f006 f9a2 	bl	80086e0 <HAL_GetTick>
 800239c:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 2000);
 800239e:	bf00      	nop
 80023a0:	f006 f99e 	bl	80086e0 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023ae:	d9f7      	bls.n	80023a0 <servoCleaning+0x24>
	Servo_SetPercent(40);
 80023b0:	2028      	movs	r0, #40	@ 0x28
 80023b2:	f003 f8a7 	bl	8005504 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 80023b6:	f006 f993 	bl	80086e0 <HAL_GetTick>
 80023ba:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 1000);
 80023bc:	bf00      	nop
 80023be:	f006 f98f 	bl	80086e0 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023cc:	d9f7      	bls.n	80023be <servoCleaning+0x42>

	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80023ce:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <servoCleaning+0xf4>)
 80023d0:	2100      	movs	r1, #0
 80023d2:	2003      	movs	r0, #3
 80023d4:	f000 fe82 	bl	80030dc <moveMotor>
	Servo_SetPercent(90);
 80023d8:	205a      	movs	r0, #90	@ 0x5a
 80023da:	f003 f893 	bl	8005504 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 80023de:	f006 f97f 	bl	80086e0 <HAL_GetTick>
 80023e2:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 2000);
 80023e4:	bf00      	nop
 80023e6:	f006 f97b 	bl	80086e0 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80023f4:	d9f7      	bls.n	80023e6 <servoCleaning+0x6a>

	Servo_SetPercent(40);
 80023f6:	2028      	movs	r0, #40	@ 0x28
 80023f8:	f003 f884 	bl	8005504 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 80023fc:	f006 f970 	bl	80086e0 <HAL_GetTick>
 8002400:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 1000);
 8002402:	bf00      	nop
 8002404:	f006 f96c 	bl	80086e0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002412:	d9f7      	bls.n	8002404 <servoCleaning+0x88>

	get_timeTick =  HAL_GetTick();
 8002414:	f006 f964 	bl	80086e0 <HAL_GetTick>
 8002418:	6078      	str	r0, [r7, #4]
	Servo_SetPercent(90);
 800241a:	205a      	movs	r0, #90	@ 0x5a
 800241c:	f003 f872 	bl	8005504 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 2000);
 8002420:	bf00      	nop
 8002422:	f006 f95d 	bl	80086e0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002430:	d9f7      	bls.n	8002422 <servoCleaning+0xa6>

	Servo_SetPercent(40);
 8002432:	2028      	movs	r0, #40	@ 0x28
 8002434:	f003 f866 	bl	8005504 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 8002438:	f006 f952 	bl	80086e0 <HAL_GetTick>
 800243c:	6078      	str	r0, [r7, #4]
	while(HAL_GetTick() - get_timeTick <= 1000);
 800243e:	bf00      	nop
 8002440:	f006 f94e 	bl	80086e0 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800244e:	d9f7      	bls.n	8002440 <servoCleaning+0xc4>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002450:	4a07      	ldr	r2, [pc, #28]	@ (8002470 <servoCleaning+0xf4>)
 8002452:	2100      	movs	r1, #0
 8002454:	2003      	movs	r0, #3
 8002456:	f000 fe41 	bl	80030dc <moveMotor>
	Servo_SetPercent(90);
 800245a:	205a      	movs	r0, #90	@ 0x5a
 800245c:	f003 f852 	bl	8005504 <Servo_SetPercent>
	ManualOperation = FALSE;
 8002460:	4b04      	ldr	r3, [pc, #16]	@ (8002474 <servoCleaning+0xf8>)
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]

}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	0098967f 	.word	0x0098967f
 8002474:	200003a0 	.word	0x200003a0

08002478 <capCleaning_Servo>:


static void capCleaning_Servo(void)
{
 8002478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800247c:	b0ca      	sub	sp, #296	@ 0x128
 800247e:	af00      	add	r7, sp, #0
	LoadingFunc(BLINK, LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8002480:	2101      	movs	r1, #1
 8002482:	2002      	movs	r0, #2
 8002484:	f001 ff92 	bl	80043ac <LoadingFunc>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Valve OFF
 8002488:	4ad9      	ldr	r2, [pc, #868]	@ (80027f0 <capCleaning_Servo+0x378>)
 800248a:	2101      	movs	r1, #1
 800248c:	2003      	movs	r0, #3
 800248e:	f000 fe25 	bl	80030dc <moveMotor>
	HAL_Delay(100);
 8002492:	2064      	movs	r0, #100	@ 0x64
 8002494:	f006 f930 	bl	80086f8 <HAL_Delay>
	moveMotorSpindleToLocBlock(M2POS1VAL);
 8002498:	2000      	movs	r0, #0
 800249a:	f000 fcaf 	bl	8002dfc <moveMotorSpindleToLocBlock>
	uint64_t get_timeTick =  HAL_GetTick();
 800249e:	f006 f91f 	bl	80086e0 <HAL_GetTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2200      	movs	r2, #0
 80024a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80024a8:	667a      	str	r2, [r7, #100]	@ 0x64
 80024aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024ae:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 1000);
 80024b2:	bf00      	nop
 80024b4:	f006 f914 	bl	80086e0 <HAL_GetTick>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2200      	movs	r2, #0
 80024bc:	469a      	mov	sl, r3
 80024be:	4693      	mov	fp, r2
 80024c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80024c4:	ebba 0402 	subs.w	r4, sl, r2
 80024c8:	eb6b 0503 	sbc.w	r5, fp, r3
 80024cc:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80024d0:	429c      	cmp	r4, r3
 80024d2:	f175 0300 	sbcs.w	r3, r5, #0
 80024d6:	d3ed      	bcc.n	80024b4 <capCleaning_Servo+0x3c>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80024d8:	4ac5      	ldr	r2, [pc, #788]	@ (80027f0 <capCleaning_Servo+0x378>)
 80024da:	2100      	movs	r1, #0
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 fdfd 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 80024e2:	f006 f8fd 	bl	80086e0 <HAL_GetTick>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2200      	movs	r2, #0
 80024ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024ec:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024ee:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80024f2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 3000);
 80024f6:	bf00      	nop
 80024f8:	f006 f8f2 	bl	80086e0 <HAL_GetTick>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002504:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8002508:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800250c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8002510:	4621      	mov	r1, r4
 8002512:	ebb1 0802 	subs.w	r8, r1, r2
 8002516:	4629      	mov	r1, r5
 8002518:	eb61 0903 	sbc.w	r9, r1, r3
 800251c:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 8002520:	4598      	cmp	r8, r3
 8002522:	f179 0300 	sbcs.w	r3, r9, #0
 8002526:	d3e7      	bcc.n	80024f8 <capCleaning_Servo+0x80>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8002528:	4ab1      	ldr	r2, [pc, #708]	@ (80027f0 <capCleaning_Servo+0x378>)
 800252a:	2101      	movs	r1, #1
 800252c:	2003      	movs	r0, #3
 800252e:	f000 fdd5 	bl	80030dc <moveMotor>
	Servo_SetPercent(90);
 8002532:	205a      	movs	r0, #90	@ 0x5a
 8002534:	f002 ffe6 	bl	8005504 <Servo_SetPercent>
	get_timeTick =  HAL_GetTick();
 8002538:	f006 f8d2 	bl	80086e0 <HAL_GetTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2200      	movs	r2, #0
 8002540:	653b      	str	r3, [r7, #80]	@ 0x50
 8002542:	657a      	str	r2, [r7, #84]	@ 0x54
 8002544:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8002548:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 200);
 800254c:	bf00      	nop
 800254e:	f006 f8c7 	bl	80086e0 <HAL_GetTick>
 8002552:	4603      	mov	r3, r0
 8002554:	2200      	movs	r2, #0
 8002556:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800255a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800255e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002562:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8002566:	4621      	mov	r1, r4
 8002568:	1a89      	subs	r1, r1, r2
 800256a:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 800256e:	4629      	mov	r1, r5
 8002570:	eb61 0303 	sbc.w	r3, r1, r3
 8002574:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002578:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800257c:	460b      	mov	r3, r1
 800257e:	2bc9      	cmp	r3, #201	@ 0xc9
 8002580:	4613      	mov	r3, r2
 8002582:	f173 0300 	sbcs.w	r3, r3, #0
 8002586:	d3e2      	bcc.n	800254e <capCleaning_Servo+0xd6>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 8002588:	4a99      	ldr	r2, [pc, #612]	@ (80027f0 <capCleaning_Servo+0x378>)
 800258a:	2100      	movs	r1, #0
 800258c:	2003      	movs	r0, #3
 800258e:	f000 fda5 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002592:	f006 f8a5 	bl	80086e0 <HAL_GetTick>
 8002596:	4603      	mov	r3, r0
 8002598:	2200      	movs	r2, #0
 800259a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800259c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800259e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80025a2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 80025a6:	bf00      	nop
 80025a8:	f006 f89a 	bl	80086e0 <HAL_GetTick>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80025b4:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80025b8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80025bc:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80025c0:	4621      	mov	r1, r4
 80025c2:	1a89      	subs	r1, r1, r2
 80025c4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80025c8:	4629      	mov	r1, r5
 80025ca:	eb61 0303 	sbc.w	r3, r1, r3
 80025ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80025d2:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80025d6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 80025da:	4602      	mov	r2, r0
 80025dc:	429a      	cmp	r2, r3
 80025de:	460b      	mov	r3, r1
 80025e0:	f173 0300 	sbcs.w	r3, r3, #0
 80025e4:	d3e0      	bcc.n	80025a8 <capCleaning_Servo+0x130>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 80025e6:	4a82      	ldr	r2, [pc, #520]	@ (80027f0 <capCleaning_Servo+0x378>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2003      	movs	r0, #3
 80025ec:	f000 fd76 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 80025f0:	f006 f876 	bl	80086e0 <HAL_GetTick>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2200      	movs	r2, #0
 80025f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80025fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80025fc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002600:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	Servo_SetPercent(40);
 8002604:	2028      	movs	r0, #40	@ 0x28
 8002606:	f002 ff7d 	bl	8005504 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 1000);
 800260a:	bf00      	nop
 800260c:	f006 f868 	bl	80086e0 <HAL_GetTick>
 8002610:	4603      	mov	r3, r0
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002618:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800261c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002620:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002624:	4621      	mov	r1, r4
 8002626:	1a89      	subs	r1, r1, r2
 8002628:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 800262c:	4629      	mov	r1, r5
 800262e:	eb61 0303 	sbc.w	r3, r1, r3
 8002632:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002636:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 800263a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 800263e:	4602      	mov	r2, r0
 8002640:	429a      	cmp	r2, r3
 8002642:	460b      	mov	r3, r1
 8002644:	f173 0300 	sbcs.w	r3, r3, #0
 8002648:	d3e0      	bcc.n	800260c <capCleaning_Servo+0x194>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 800264a:	4a69      	ldr	r2, [pc, #420]	@ (80027f0 <capCleaning_Servo+0x378>)
 800264c:	2100      	movs	r1, #0
 800264e:	2003      	movs	r0, #3
 8002650:	f000 fd44 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002654:	f006 f844 	bl	80086e0 <HAL_GetTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2200      	movs	r2, #0
 800265c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800265e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002660:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002664:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 8002668:	bf00      	nop
 800266a:	f006 f839 	bl	80086e0 <HAL_GetTick>
 800266e:	4603      	mov	r3, r0
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002676:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800267a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800267e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002682:	4621      	mov	r1, r4
 8002684:	1a89      	subs	r1, r1, r2
 8002686:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800268a:	4629      	mov	r1, r5
 800268c:	eb61 0303 	sbc.w	r3, r1, r3
 8002690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002694:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002698:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 800269c:	4602      	mov	r2, r0
 800269e:	429a      	cmp	r2, r3
 80026a0:	460b      	mov	r3, r1
 80026a2:	f173 0300 	sbcs.w	r3, r3, #0
 80026a6:	d3e0      	bcc.n	800266a <capCleaning_Servo+0x1f2>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 80026a8:	4a51      	ldr	r2, [pc, #324]	@ (80027f0 <capCleaning_Servo+0x378>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2003      	movs	r0, #3
 80026ae:	f000 fd15 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 80026b2:	f006 f815 	bl	80086e0 <HAL_GetTick>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2200      	movs	r2, #0
 80026ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80026bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80026be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80026c2:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	Servo_SetPercent(90);
 80026c6:	205a      	movs	r0, #90	@ 0x5a
 80026c8:	f002 ff1c 	bl	8005504 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 1000);
 80026cc:	bf00      	nop
 80026ce:	f006 f807 	bl	80086e0 <HAL_GetTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026da:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026de:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80026e2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80026e6:	4621      	mov	r1, r4
 80026e8:	1a89      	subs	r1, r1, r2
 80026ea:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80026ee:	4629      	mov	r1, r5
 80026f0:	eb61 0303 	sbc.w	r3, r1, r3
 80026f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80026f8:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80026fc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002700:	4602      	mov	r2, r0
 8002702:	429a      	cmp	r2, r3
 8002704:	460b      	mov	r3, r1
 8002706:	f173 0300 	sbcs.w	r3, r3, #0
 800270a:	d3e0      	bcc.n	80026ce <capCleaning_Servo+0x256>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 800270c:	4a38      	ldr	r2, [pc, #224]	@ (80027f0 <capCleaning_Servo+0x378>)
 800270e:	2100      	movs	r1, #0
 8002710:	2003      	movs	r0, #3
 8002712:	f000 fce3 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002716:	f005 ffe3 	bl	80086e0 <HAL_GetTick>
 800271a:	4603      	mov	r3, r0
 800271c:	2200      	movs	r2, #0
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002722:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002726:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 800272a:	bf00      	nop
 800272c:	f005 ffd8 	bl	80086e0 <HAL_GetTick>
 8002730:	4603      	mov	r3, r0
 8002732:	2200      	movs	r2, #0
 8002734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002738:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800273c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002740:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8002744:	4621      	mov	r1, r4
 8002746:	1a89      	subs	r1, r1, r2
 8002748:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800274c:	4629      	mov	r1, r5
 800274e:	eb61 0303 	sbc.w	r3, r1, r3
 8002752:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002756:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800275a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800275e:	4602      	mov	r2, r0
 8002760:	429a      	cmp	r2, r3
 8002762:	460b      	mov	r3, r1
 8002764:	f173 0300 	sbcs.w	r3, r3, #0
 8002768:	d3e0      	bcc.n	800272c <capCleaning_Servo+0x2b4>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 800276a:	4a21      	ldr	r2, [pc, #132]	@ (80027f0 <capCleaning_Servo+0x378>)
 800276c:	2101      	movs	r1, #1
 800276e:	2003      	movs	r0, #3
 8002770:	f000 fcb4 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002774:	f005 ffb4 	bl	80086e0 <HAL_GetTick>
 8002778:	4603      	mov	r3, r0
 800277a:	2200      	movs	r2, #0
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002780:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002784:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	Servo_SetPercent(40);
 8002788:	2028      	movs	r0, #40	@ 0x28
 800278a:	f002 febb 	bl	8005504 <Servo_SetPercent>
	while(HAL_GetTick() - get_timeTick <= 1000);
 800278e:	bf00      	nop
 8002790:	f005 ffa6 	bl	80086e0 <HAL_GetTick>
 8002794:	4603      	mov	r3, r0
 8002796:	2200      	movs	r2, #0
 8002798:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800279c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80027a0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80027a4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80027a8:	4621      	mov	r1, r4
 80027aa:	1a89      	subs	r1, r1, r2
 80027ac:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80027b0:	4629      	mov	r1, r5
 80027b2:	eb61 0303 	sbc.w	r3, r1, r3
 80027b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80027ba:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80027be:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 80027c2:	4602      	mov	r2, r0
 80027c4:	429a      	cmp	r2, r3
 80027c6:	460b      	mov	r3, r1
 80027c8:	f173 0300 	sbcs.w	r3, r3, #0
 80027cc:	d3e0      	bcc.n	8002790 <capCleaning_Servo+0x318>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 80027ce:	4a08      	ldr	r2, [pc, #32]	@ (80027f0 <capCleaning_Servo+0x378>)
 80027d0:	2100      	movs	r1, #0
 80027d2:	2003      	movs	r0, #3
 80027d4:	f000 fc82 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 80027d8:	f005 ff82 	bl	80086e0 <HAL_GetTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	2200      	movs	r2, #0
 80027e0:	61bb      	str	r3, [r7, #24]
 80027e2:	61fa      	str	r2, [r7, #28]
 80027e4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80027e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 500);
 80027ec:	bf00      	nop
 80027ee:	e001      	b.n	80027f4 <capCleaning_Servo+0x37c>
 80027f0:	0098967f 	.word	0x0098967f
 80027f4:	f005 ff74 	bl	80086e0 <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002800:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002804:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002808:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800280c:	4621      	mov	r1, r4
 800280e:	1a89      	subs	r1, r1, r2
 8002810:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8002814:	4629      	mov	r1, r5
 8002816:	eb61 0303 	sbc.w	r3, r1, r3
 800281a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800281e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002822:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002826:	4602      	mov	r2, r0
 8002828:	429a      	cmp	r2, r3
 800282a:	460b      	mov	r3, r1
 800282c:	f173 0300 	sbcs.w	r3, r3, #0
 8002830:	d3e0      	bcc.n	80027f4 <capCleaning_Servo+0x37c>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 8002832:	4a49      	ldr	r2, [pc, #292]	@ (8002958 <capCleaning_Servo+0x4e0>)
 8002834:	2101      	movs	r1, #1
 8002836:	2003      	movs	r0, #3
 8002838:	f000 fc50 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 800283c:	f005 ff50 	bl	80086e0 <HAL_GetTick>
 8002840:	4603      	mov	r3, r0
 8002842:	2200      	movs	r2, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	617a      	str	r2, [r7, #20]
 8002848:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800284c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 100);
 8002850:	bf00      	nop
 8002852:	f005 ff45 	bl	80086e0 <HAL_GetTick>
 8002856:	4603      	mov	r3, r0
 8002858:	2200      	movs	r2, #0
 800285a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800285e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002862:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800286a:	4621      	mov	r1, r4
 800286c:	1a89      	subs	r1, r1, r2
 800286e:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002872:	4629      	mov	r1, r5
 8002874:	eb61 0303 	sbc.w	r3, r1, r3
 8002878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800287c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002880:	460b      	mov	r3, r1
 8002882:	2b65      	cmp	r3, #101	@ 0x65
 8002884:	4613      	mov	r3, r2
 8002886:	f173 0300 	sbcs.w	r3, r3, #0
 800288a:	d3e2      	bcc.n	8002852 <capCleaning_Servo+0x3da>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve ON
 800288c:	4a32      	ldr	r2, [pc, #200]	@ (8002958 <capCleaning_Servo+0x4e0>)
 800288e:	2100      	movs	r1, #0
 8002890:	2003      	movs	r0, #3
 8002892:	f000 fc23 	bl	80030dc <moveMotor>
	get_timeTick =  HAL_GetTick();
 8002896:	f005 ff23 	bl	80086e0 <HAL_GetTick>
 800289a:	4603      	mov	r3, r0
 800289c:	2200      	movs	r2, #0
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	60fa      	str	r2, [r7, #12]
 80028a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80028a6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 3000);
 80028aa:	bf00      	nop
 80028ac:	f005 ff18 	bl	80086e0 <HAL_GetTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028b8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80028bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80028c0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80028c4:	4621      	mov	r1, r4
 80028c6:	1a89      	subs	r1, r1, r2
 80028c8:	67b9      	str	r1, [r7, #120]	@ 0x78
 80028ca:	4629      	mov	r1, r5
 80028cc:	eb61 0303 	sbc.w	r3, r1, r3
 80028d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028d2:	f640 33b9 	movw	r3, #3001	@ 0xbb9
 80028d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80028da:	4602      	mov	r2, r0
 80028dc:	429a      	cmp	r2, r3
 80028de:	460b      	mov	r3, r1
 80028e0:	f173 0300 	sbcs.w	r3, r3, #0
 80028e4:	d3e2      	bcc.n	80028ac <capCleaning_Servo+0x434>
	moveMotor(VALVEMOTOR, ON, INT_INF); //Servo?
 80028e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002958 <capCleaning_Servo+0x4e0>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	2003      	movs	r0, #3
 80028ec:	f000 fbf6 	bl	80030dc <moveMotor>
	moveMotorSpindleToLocBlock(M2POS1VAL);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f000 fa83 	bl	8002dfc <moveMotorSpindleToLocBlock>
	get_timeTick =  HAL_GetTick();
 80028f6:	f005 fef3 	bl	80086e0 <HAL_GetTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2200      	movs	r2, #0
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002906:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	while(HAL_GetTick() - get_timeTick <= 1000);
 800290a:	bf00      	nop
 800290c:	f005 fee8 	bl	80086e0 <HAL_GetTick>
 8002910:	4603      	mov	r3, r0
 8002912:	2200      	movs	r2, #0
 8002914:	673b      	str	r3, [r7, #112]	@ 0x70
 8002916:	677a      	str	r2, [r7, #116]	@ 0x74
 8002918:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800291c:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002920:	4621      	mov	r1, r4
 8002922:	1a89      	subs	r1, r1, r2
 8002924:	66b9      	str	r1, [r7, #104]	@ 0x68
 8002926:	4629      	mov	r1, r5
 8002928:	eb61 0303 	sbc.w	r3, r1, r3
 800292c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800292e:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 8002932:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002936:	4602      	mov	r2, r0
 8002938:	429a      	cmp	r2, r3
 800293a:	460b      	mov	r3, r1
 800293c:	f173 0300 	sbcs.w	r3, r3, #0
 8002940:	d3e4      	bcc.n	800290c <capCleaning_Servo+0x494>
	moveMotor(VALVEMOTOR, OFF, INT_INF); //Servo?
 8002942:	4a05      	ldr	r2, [pc, #20]	@ (8002958 <capCleaning_Servo+0x4e0>)
 8002944:	2100      	movs	r1, #0
 8002946:	2003      	movs	r0, #3
 8002948:	f000 fbc8 	bl	80030dc <moveMotor>
}
 800294c:	bf00      	nop
 800294e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8002952:	46bd      	mov	sp, r7
 8002954:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002958:	0098967f 	.word	0x0098967f
 800295c:	00000000 	.word	0x00000000

08002960 <DemoApp>:
 */

#include <main.h>
#include <DemoApp.h>

void DemoApp() {
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
	isPowerLEDBlinking = TRUE;
 8002966:	4b84      	ldr	r3, [pc, #528]	@ (8002b78 <DemoApp+0x218>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
	SerialPrintln("DEMO");
 800296c:	4883      	ldr	r0, [pc, #524]	@ (8002b7c <DemoApp+0x21c>)
 800296e:	f002 fd2b 	bl	80053c8 <SerialPrintln>
	LCDRGBControl(WHITE);
 8002972:	2064      	movs	r0, #100	@ 0x64
 8002974:	f002 f9c0 	bl	8004cf8 <LCDRGBControl>
	LCD_Clear();
 8002978:	f002 f852 	bl	8004a20 <LCD_Clear>
	LoadingFunc(BLINK, LOADING);
 800297c:	2101      	movs	r1, #1
 800297e:	2002      	movs	r0, #2
 8002980:	f001 fd14 	bl	80043ac <LoadingFunc>
	InitializeMachine();
 8002984:	f001 f97a 	bl	8003c7c <InitializeMachine>
	LoadingFunc(ON, NOT_LOADING);
 8002988:	2100      	movs	r1, #0
 800298a:	2001      	movs	r0, #1
 800298c:	f001 fd0e 	bl	80043ac <LoadingFunc>
	printLCD(0, "Put Cannister On ", ENTER_SYMBOL);
 8002990:	2201      	movs	r2, #1
 8002992:	497b      	ldr	r1, [pc, #492]	@ (8002b80 <DemoApp+0x220>)
 8002994:	2000      	movs	r0, #0
 8002996:	f002 f943 	bl	8004c20 <printLCD>
	printLCD(1, " ", NO_SYMBOL);
 800299a:	2200      	movs	r2, #0
 800299c:	4979      	ldr	r1, [pc, #484]	@ (8002b84 <DemoApp+0x224>)
 800299e:	2001      	movs	r0, #1
 80029a0:	f002 f93e 	bl	8004c20 <printLCD>
	printLCD(2, " ", NO_SYMBOL);
 80029a4:	2200      	movs	r2, #0
 80029a6:	4977      	ldr	r1, [pc, #476]	@ (8002b84 <DemoApp+0x224>)
 80029a8:	2002      	movs	r0, #2
 80029aa:	f002 f939 	bl	8004c20 <printLCD>
	printLCD(3, "DEMO", NO_SYMBOL);
 80029ae:	2200      	movs	r2, #0
 80029b0:	4972      	ldr	r1, [pc, #456]	@ (8002b7c <DemoApp+0x21c>)
 80029b2:	2003      	movs	r0, #3
 80029b4:	f002 f934 	bl	8004c20 <printLCD>
	//While enter key is not pressed. Here we did not use read key func as we want to enter dev menu
	//Dev menu reads keys, and as read key func is a blocking one, it will cause issues
	while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 80029b8:	e004      	b.n	80029c4 <DemoApp+0x64>
		//What is inside this loop is just for testing and developer use, not by customer app
		HAL_Delay(1);
 80029ba:	2001      	movs	r0, #1
 80029bc:	f005 fe9c 	bl	80086f8 <HAL_Delay>
		DeveloperMenu();
 80029c0:	f003 f91e 	bl	8005c00 <DeveloperMenu>
	while (digitalRead(Button_Enter_Input_PullUp) == HIGH) {
 80029c4:	200d      	movs	r0, #13
 80029c6:	f000 f9d1 	bl	8002d6c <digitalRead>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d0f4      	beq.n	80029ba <DemoApp+0x5a>
	}
	printLCD(3, " ", NO_SYMBOL);
 80029d0:	2200      	movs	r2, #0
 80029d2:	496c      	ldr	r1, [pc, #432]	@ (8002b84 <DemoApp+0x224>)
 80029d4:	2003      	movs	r0, #3
 80029d6:	f002 f923 	bl	8004c20 <printLCD>

	for (int k = 0; k < 5; k++) {
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
 80029de:	e19a      	b.n	8002d16 <DemoApp+0x3b6>
		LCD_Clear();                //Make sure nothing is written on LCD screen
 80029e0:	f002 f81e 	bl	8004a20 <LCD_Clear>
		printLCD(0, "DEMO APP active", NO_SYMBOL);
 80029e4:	2200      	movs	r2, #0
 80029e6:	4968      	ldr	r1, [pc, #416]	@ (8002b88 <DemoApp+0x228>)
 80029e8:	2000      	movs	r0, #0
 80029ea:	f002 f919 	bl	8004c20 <printLCD>
		moveMotorClampToLocBlock(M1POS2VAL);
 80029ee:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 80029f2:	f000 fa2f 	bl	8002e54 <moveMotorClampToLocBlock>
		LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 80029f6:	2100      	movs	r1, #0
 80029f8:	2001      	movs	r0, #1
 80029fa:	f001 fcd7 	bl	80043ac <LoadingFunc>
		printLCD(1, "Liters: ", CURSOR_DEMO_SYMBOL);
 80029fe:	2204      	movs	r2, #4
 8002a00:	4962      	ldr	r1, [pc, #392]	@ (8002b8c <DemoApp+0x22c>)
 8002a02:	2001      	movs	r0, #1
 8002a04:	f002 f90c 	bl	8004c20 <printLCD>
		printLCD(2, "Kg/Liters: ", NO_SYMBOL);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4961      	ldr	r1, [pc, #388]	@ (8002b90 <DemoApp+0x230>)
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f002 f907 	bl	8004c20 <printLCD>
		HAL_Delay(1500);
 8002a12:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8002a16:	f005 fe6f 	bl	80086f8 <HAL_Delay>
		printLCD(1, "Liters: 2", CURSOR_DEMO_SYMBOL);
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	495d      	ldr	r1, [pc, #372]	@ (8002b94 <DemoApp+0x234>)
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f002 f8fe 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a24:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a28:	f005 fe66 	bl	80086f8 <HAL_Delay>
		printLCD(1, "Liters: 2.", CURSOR_DEMO_SYMBOL);
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	495a      	ldr	r1, [pc, #360]	@ (8002b98 <DemoApp+0x238>)
 8002a30:	2001      	movs	r0, #1
 8002a32:	f002 f8f5 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a36:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a3a:	f005 fe5d 	bl	80086f8 <HAL_Delay>
		printLCD(1, "Liters: 2.5", CURSOR_DEMO_SYMBOL);
 8002a3e:	2204      	movs	r2, #4
 8002a40:	4956      	ldr	r1, [pc, #344]	@ (8002b9c <DemoApp+0x23c>)
 8002a42:	2001      	movs	r0, #1
 8002a44:	f002 f8ec 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a48:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a4c:	f005 fe54 	bl	80086f8 <HAL_Delay>
		printLCD(1, "Liters: 2.5", NO_SYMBOL);
 8002a50:	2200      	movs	r2, #0
 8002a52:	4952      	ldr	r1, [pc, #328]	@ (8002b9c <DemoApp+0x23c>)
 8002a54:	2001      	movs	r0, #1
 8002a56:	f002 f8e3 	bl	8004c20 <printLCD>
		printLCD(2, "Kg/Liters: ", CURSOR_DEMO_SYMBOL);
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	494c      	ldr	r1, [pc, #304]	@ (8002b90 <DemoApp+0x230>)
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f002 f8de 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a64:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a68:	f005 fe46 	bl	80086f8 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1", CURSOR_DEMO_SYMBOL);
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	494c      	ldr	r1, [pc, #304]	@ (8002ba0 <DemoApp+0x240>)
 8002a70:	2002      	movs	r0, #2
 8002a72:	f002 f8d5 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a76:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a7a:	f005 fe3d 	bl	80086f8 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1.", CURSOR_DEMO_SYMBOL);
 8002a7e:	2204      	movs	r2, #4
 8002a80:	4948      	ldr	r1, [pc, #288]	@ (8002ba4 <DemoApp+0x244>)
 8002a82:	2002      	movs	r0, #2
 8002a84:	f002 f8cc 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a88:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a8c:	f005 fe34 	bl	80086f8 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1.1", CURSOR_DEMO_SYMBOL);
 8002a90:	2204      	movs	r2, #4
 8002a92:	4945      	ldr	r1, [pc, #276]	@ (8002ba8 <DemoApp+0x248>)
 8002a94:	2002      	movs	r0, #2
 8002a96:	f002 f8c3 	bl	8004c20 <printLCD>
		HAL_Delay(400);
 8002a9a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a9e:	f005 fe2b 	bl	80086f8 <HAL_Delay>
		printLCD(2, "Kg/Liters: 1.1", NO_SYMBOL);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4940      	ldr	r1, [pc, #256]	@ (8002ba8 <DemoApp+0x248>)
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	f002 f8ba 	bl	8004c20 <printLCD>
		LoadingFunc(BLINK, NOT_LOADING);
 8002aac:	2100      	movs	r1, #0
 8002aae:	2002      	movs	r0, #2
 8002ab0:	f001 fc7c 	bl	80043ac <LoadingFunc>
		printLCD(0, "0.00 / 2.5L", NO_SYMBOL);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	493d      	ldr	r1, [pc, #244]	@ (8002bac <DemoApp+0x24c>)
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f002 f8b1 	bl	8004c20 <printLCD>
		float i = 0.0;
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
		char LitersOf[20]; // Ensure the array is large enough for your string
		strcpy(LitersOf, "0.00 / 2.5L"); // Initialize the array with your string
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	4a39      	ldr	r2, [pc, #228]	@ (8002bac <DemoApp+0x24c>)
 8002ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		unsigned long temptmr = HAL_GetTick(); //millis();
 8002ace:	f005 fe07 	bl	80086e0 <HAL_GetTick>
 8002ad2:	6178      	str	r0, [r7, #20]
		//Once spindle motor (Cap) penetrates the CAN, then liquid starts flowing
		//While spindle is moving up inside the CAN, the liquid is still flawing
		//We need to show dispensed amount on the LCD, while the spindle is still moving!

		//Move M1 to clamp position POS2
		moveMotorClampToLocBlock(M1POS2VAL);
 8002ad4:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8002ad8:	f000 f9bc 	bl	8002e54 <moveMotorClampToLocBlock>
		if (Clamp_M2_EncA_Pulses >= M1POS2VAL) {
 8002adc:	4b34      	ldr	r3, [pc, #208]	@ (8002bb0 <DemoApp+0x250>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f5b3 7f39 	cmp.w	r3, #740	@ 0x2e4
 8002ae4:	f2c0 8098 	blt.w	8002c18 <DemoApp+0x2b8>
			//Move spindle to POS3
			moveMotorSpindleToLocBlock(M2POS3VAL);
 8002ae8:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002aec:	f000 f986 	bl	8002dfc <moveMotorSpindleToLocBlock>
			if (Spindle_M3_EncA_Pulses >= M2POS3VAL) {
 8002af0:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <DemoApp+0x254>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f241 1293 	movw	r2, #4499	@ 0x1193
 8002af8:	4293      	cmp	r3, r2
 8002afa:	f340 808a 	ble.w	8002c12 <DemoApp+0x2b2>
				//Open valve servo by 100%
				Servo_SetPercent(ValveOpen);
 8002afe:	2064      	movs	r0, #100	@ 0x64
 8002b00:	f002 fd00 	bl	8005504 <Servo_SetPercent>
				//Update LCD with dispensed amount until 2.0 L (quick update) -- liquid rush
				if (HAL_GetTick() > temptmr + 2 && i <= 2.0) { //Update screen only if M1 reaches open position, once every 100mS, and if dosing < needed 2.5L
 8002b04:	f005 fdec 	bl	80086e0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d92a      	bls.n	8002b68 <DemoApp+0x208>
 8002b12:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b16:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	d821      	bhi.n	8002b68 <DemoApp+0x208>
					temptmr = HAL_GetTick(); //millis();
 8002b24:	f005 fddc 	bl	80086e0 <HAL_GetTick>
 8002b28:	6178      	str	r0, [r7, #20]
					sprintf(LitersOf, "%.2f / 2.0L", i); // Formats 'i' as a floating-point and stores in LitersOf
 8002b2a:	69b8      	ldr	r0, [r7, #24]
 8002b2c:	f7fd fd1c 	bl	8000568 <__aeabi_f2d>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4638      	mov	r0, r7
 8002b36:	4920      	ldr	r1, [pc, #128]	@ (8002bb8 <DemoApp+0x258>)
 8002b38:	f010 fcf6 	bl	8013528 <siprintf>
					printLCD(0, LitersOf, NO_SYMBOL);
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4619      	mov	r1, r3
 8002b42:	2000      	movs	r0, #0
 8002b44:	f002 f86c 	bl	8004c20 <printLCD>
					i = i + 0.1;
 8002b48:	69b8      	ldr	r0, [r7, #24]
 8002b4a:	f7fd fd0d 	bl	8000568 <__aeabi_f2d>
 8002b4e:	a308      	add	r3, pc, #32	@ (adr r3, 8002b70 <DemoApp+0x210>)
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f7fd fbaa 	bl	80002ac <__adddf3>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fe f852 	bl	8000c08 <__aeabi_d2f>
 8002b64:	4603      	mov	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]
				}
				Servo_SetPercent(15);
 8002b68:	200f      	movs	r0, #15
 8002b6a:	f002 fccb 	bl	8005504 <Servo_SetPercent>
				//update LCD with dispensed amount until 2.5 L (slower update) -- precise measurement
				while (i < 2.5) { //Complete dosing
 8002b6e:	e047      	b.n	8002c00 <DemoApp+0x2a0>
 8002b70:	9999999a 	.word	0x9999999a
 8002b74:	3fb99999 	.word	0x3fb99999
 8002b78:	2000049c 	.word	0x2000049c
 8002b7c:	08016cb8 	.word	0x08016cb8
 8002b80:	08016cc0 	.word	0x08016cc0
 8002b84:	08016cd4 	.word	0x08016cd4
 8002b88:	08016cd8 	.word	0x08016cd8
 8002b8c:	08016ce8 	.word	0x08016ce8
 8002b90:	08016cf4 	.word	0x08016cf4
 8002b94:	08016d00 	.word	0x08016d00
 8002b98:	08016d0c 	.word	0x08016d0c
 8002b9c:	08016d18 	.word	0x08016d18
 8002ba0:	08016d24 	.word	0x08016d24
 8002ba4:	08016d34 	.word	0x08016d34
 8002ba8:	08016d44 	.word	0x08016d44
 8002bac:	08016d54 	.word	0x08016d54
 8002bb0:	200000fc 	.word	0x200000fc
 8002bb4:	20000104 	.word	0x20000104
 8002bb8:	08016d60 	.word	0x08016d60
					sprintf(LitersOf, "%.2f / 2.5L", i);
 8002bbc:	69b8      	ldr	r0, [r7, #24]
 8002bbe:	f7fd fcd3 	bl	8000568 <__aeabi_f2d>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4638      	mov	r0, r7
 8002bc8:	4959      	ldr	r1, [pc, #356]	@ (8002d30 <DemoApp+0x3d0>)
 8002bca:	f010 fcad 	bl	8013528 <siprintf>
					printLCD(0, LitersOf, NO_SYMBOL);
 8002bce:	463b      	mov	r3, r7
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	f002 f823 	bl	8004c20 <printLCD>
					HAL_Delay(100);
 8002bda:	2064      	movs	r0, #100	@ 0x64
 8002bdc:	f005 fd8c 	bl	80086f8 <HAL_Delay>
					i = i + 0.1;
 8002be0:	69b8      	ldr	r0, [r7, #24]
 8002be2:	f7fd fcc1 	bl	8000568 <__aeabi_f2d>
 8002be6:	a350      	add	r3, pc, #320	@ (adr r3, 8002d28 <DemoApp+0x3c8>)
 8002be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bec:	f7fd fb5e 	bl	80002ac <__adddf3>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f7fe f806 	bl	8000c08 <__aeabi_d2f>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	61bb      	str	r3, [r7, #24]
				while (i < 2.5) { //Complete dosing
 8002c00:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c04:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8002c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d4d4      	bmi.n	8002bbc <DemoApp+0x25c>
				}
			}
			//close valve servo to 0%
			Servo_SetPercent(ValveClose);
 8002c12:	2000      	movs	r0, #0
 8002c14:	f002 fc76 	bl	8005504 <Servo_SetPercent>
		}
		LoadingFunc(ON, NOT_LOADING); //Power LED (off, on, blink), loading screen (LOADING, NOT_LOADING)
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f001 fbc6 	bl	80043ac <LoadingFunc>
		printLCD(0, "Transfer Complete", NO_SYMBOL);
 8002c20:	2200      	movs	r2, #0
 8002c22:	4944      	ldr	r1, [pc, #272]	@ (8002d34 <DemoApp+0x3d4>)
 8002c24:	2000      	movs	r0, #0
 8002c26:	f001 fffb 	bl	8004c20 <printLCD>
		moveMotorClampToLocBlock(M1POS2VAL);
 8002c2a:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8002c2e:	f000 f911 	bl	8002e54 <moveMotorClampToLocBlock>
		HAL_Delay(1000);
 8002c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c36:	f005 fd5f 	bl	80086f8 <HAL_Delay>
		isDemoCleaning = TRUE;
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <DemoApp+0x3d8>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
		printLCD(3, "CLEANING", NO_SYMBOL);
 8002c40:	2200      	movs	r2, #0
 8002c42:	493e      	ldr	r1, [pc, #248]	@ (8002d3c <DemoApp+0x3dc>)
 8002c44:	2003      	movs	r0, #3
 8002c46:	f001 ffeb 	bl	8004c20 <printLCD>
		SerialPrintln("X0");
 8002c4a:	483d      	ldr	r0, [pc, #244]	@ (8002d40 <DemoApp+0x3e0>)
 8002c4c:	f002 fbbc 	bl	80053c8 <SerialPrintln>
		LoadingFunc(BLINK, LOADING);
 8002c50:	2101      	movs	r1, #1
 8002c52:	2002      	movs	r0, #2
 8002c54:	f001 fbaa 	bl	80043ac <LoadingFunc>
		SerialPrintln("X1");
 8002c58:	483a      	ldr	r0, [pc, #232]	@ (8002d44 <DemoApp+0x3e4>)
 8002c5a:	f002 fbb5 	bl	80053c8 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS2VAL);
 8002c5e:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8002c62:	f000 f8cb 	bl	8002dfc <moveMotorSpindleToLocBlock>
		SerialPrintln("X2");
 8002c66:	4838      	ldr	r0, [pc, #224]	@ (8002d48 <DemoApp+0x3e8>)
 8002c68:	f002 fbae 	bl	80053c8 <SerialPrintln>
		moveMotor(VALVEMOTOR, ON, INT_INF); //Relay On
 8002c6c:	4a37      	ldr	r2, [pc, #220]	@ (8002d4c <DemoApp+0x3ec>)
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2003      	movs	r0, #3
 8002c72:	f000 fa33 	bl	80030dc <moveMotor>
		SerialPrintln("X3");
 8002c76:	4836      	ldr	r0, [pc, #216]	@ (8002d50 <DemoApp+0x3f0>)
 8002c78:	f002 fba6 	bl	80053c8 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS4VAL);
 8002c7c:	f641 30bc 	movw	r0, #7100	@ 0x1bbc
 8002c80:	f000 f8bc 	bl	8002dfc <moveMotorSpindleToLocBlock>
		SerialPrintln("X4");
 8002c84:	4833      	ldr	r0, [pc, #204]	@ (8002d54 <DemoApp+0x3f4>)
 8002c86:	f002 fb9f 	bl	80053c8 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS3VAL);
 8002c8a:	f241 1094 	movw	r0, #4500	@ 0x1194
 8002c8e:	f000 f8b5 	bl	8002dfc <moveMotorSpindleToLocBlock>
		SerialPrintln("X5");
 8002c92:	4831      	ldr	r0, [pc, #196]	@ (8002d58 <DemoApp+0x3f8>)
 8002c94:	f002 fb98 	bl	80053c8 <SerialPrintln>
		moveMotorSpindleToLocBlock(M2POS4VAL);
 8002c98:	f641 30bc 	movw	r0, #7100	@ 0x1bbc
 8002c9c:	f000 f8ae 	bl	8002dfc <moveMotorSpindleToLocBlock>
		moveMotor(VALVEMOTOR, OFF, INT_INF); //Relay Off
 8002ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <DemoApp+0x3ec>)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2003      	movs	r0, #3
 8002ca6:	f000 fa19 	bl	80030dc <moveMotor>
		moveMotorSpindleToLocBlock(M2POS1VAL);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f000 f8a6 	bl	8002dfc <moveMotorSpindleToLocBlock>
		moveMotor(VALVEMOTOR, ON, INT_INF); //Relay On
 8002cb0:	4a26      	ldr	r2, [pc, #152]	@ (8002d4c <DemoApp+0x3ec>)
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f000 fa11 	bl	80030dc <moveMotor>
		HAL_Delay(3000);
 8002cba:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cbe:	f005 fd1b 	bl	80086f8 <HAL_Delay>
		moveMotor(VALVEMOTOR, OFF, INT_INF); //Relay Off
 8002cc2:	4a22      	ldr	r2, [pc, #136]	@ (8002d4c <DemoApp+0x3ec>)
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2003      	movs	r0, #3
 8002cc8:	f000 fa08 	bl	80030dc <moveMotor>
		isDemoCleaning = FALSE;
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <DemoApp+0x3d8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
		printLCD(3, " ", NO_SYMBOL);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4921      	ldr	r1, [pc, #132]	@ (8002d5c <DemoApp+0x3fc>)
 8002cd6:	2003      	movs	r0, #3
 8002cd8:	f001 ffa2 	bl	8004c20 <printLCD>
		moveMotorClampToLocBlock(M1POS1VAL);
 8002cdc:	2000      	movs	r0, #0
 8002cde:	f000 f8b9 	bl	8002e54 <moveMotorClampToLocBlock>
		;
		LoadingFunc(ON, NOT_LOADING);
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f001 fb61 	bl	80043ac <LoadingFunc>
		printLCD(0, "Cannister Unlocked", NO_SYMBOL);
 8002cea:	2200      	movs	r2, #0
 8002cec:	491c      	ldr	r1, [pc, #112]	@ (8002d60 <DemoApp+0x400>)
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f001 ff96 	bl	8004c20 <printLCD>
		printLCD(1, "Next Cannister Please", NO_SYMBOL);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	491b      	ldr	r1, [pc, #108]	@ (8002d64 <DemoApp+0x404>)
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f001 ff91 	bl	8004c20 <printLCD>
		printLCD(2, "Put Cannister On ", ENTER_SYMBOL);
 8002cfe:	2201      	movs	r2, #1
 8002d00:	4919      	ldr	r1, [pc, #100]	@ (8002d68 <DemoApp+0x408>)
 8002d02:	2002      	movs	r0, #2
 8002d04:	f001 ff8c 	bl	8004c20 <printLCD>
		HAL_Delay(3000);
 8002d08:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002d0c:	f005 fcf4 	bl	80086f8 <HAL_Delay>
	for (int k = 0; k < 5; k++) {
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3301      	adds	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	f77f ae61 	ble.w	80029e0 <DemoApp+0x80>
	}

}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	9999999a 	.word	0x9999999a
 8002d2c:	3fb99999 	.word	0x3fb99999
 8002d30:	08016d6c 	.word	0x08016d6c
 8002d34:	08016d78 	.word	0x08016d78
 8002d38:	200003f7 	.word	0x200003f7
 8002d3c:	08016d8c 	.word	0x08016d8c
 8002d40:	08016d98 	.word	0x08016d98
 8002d44:	08016d9c 	.word	0x08016d9c
 8002d48:	08016da0 	.word	0x08016da0
 8002d4c:	0098967f 	.word	0x0098967f
 8002d50:	08016da4 	.word	0x08016da4
 8002d54:	08016da8 	.word	0x08016da8
 8002d58:	08016dac 	.word	0x08016dac
 8002d5c:	08016cd4 	.word	0x08016cd4
 8002d60:	08016db0 	.word	0x08016db0
 8002d64:	08016dc4 	.word	0x08016dc4
 8002d68:	08016cc0 	.word	0x08016cc0

08002d6c <digitalRead>:
    {Button_Enter_Input_PullUp_GPIO_Port, Button_Enter_Input_PullUp_Pin}, 		// BUTTON_ENTER_Input_Pullup
    {Button_Comma_Input_PullUp_GPIO_Port, Button_Comma_Input_PullUp_Pin}  		// BUTTON_COMMA_Input_Pullup
};


GPIO_PinState digitalRead(UserLabel label) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
    if (label >= sizeof(gpioMap) / sizeof(GPIO_Map)) {
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	2b0e      	cmp	r3, #14
 8002d7a:	d901      	bls.n	8002d80 <digitalRead+0x14>
        // Handle invalid label
        return GPIO_PIN_RESET;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e010      	b.n	8002da2 <digitalRead+0x36>
    }

    GPIO_Map map = gpioMap[label];
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	490a      	ldr	r1, [pc, #40]	@ (8002dac <digitalRead+0x40>)
 8002d84:	f107 0208 	add.w	r2, r7, #8
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002d90:	e882 0003 	stmia.w	r2, {r0, r1}
    return HAL_GPIO_ReadPin(map.port, map.pin);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	89ba      	ldrh	r2, [r7, #12]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f007 f918 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000000 	.word	0x20000000

08002db0 <digitalWrite>:
	{EN_DCDC_5V_Output_GPIO_Port, EN_DCDC_5V_Output_Pin},				// EN_DCDC_5V_Output
	{EN_DCDC_8V_Output_GPIO_Port, EN_DCDC_8V_Output_Pin},				// EN_DCDC_8V_Output
};

void digitalWrite(OutputLabel label, int state)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
    if (label >= sizeof(outputMap) / sizeof(GPIO_OutputMap))
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	2b0e      	cmp	r3, #14
 8002dc0:	d815      	bhi.n	8002dee <digitalWrite+0x3e>
    {
        // Handle invalid label
        return;
    }

    GPIO_OutputMap map = outputMap[label];
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	490c      	ldr	r1, [pc, #48]	@ (8002df8 <digitalWrite+0x48>)
 8002dc6:	f107 0208 	add.w	r2, r7, #8
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002dd2:	e882 0003 	stmia.w	r2, {r0, r1}
    HAL_GPIO_WritePin(map.port, map.pin, (state != 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002dd6:	68b8      	ldr	r0, [r7, #8]
 8002dd8:	89b9      	ldrh	r1, [r7, #12]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	f007 f90a 	bl	800a000 <HAL_GPIO_WritePin>
 8002dec:	e000      	b.n	8002df0 <digitalWrite+0x40>
        return;
 8002dee:	bf00      	nop
}
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000078 	.word	0x20000078

08002dfc <moveMotorSpindleToLocBlock>:

extern ADC_HandleTypeDef hadc1;
extern ADC_HandleTypeDef hadc2;
extern ADC_HandleTypeDef hadc3;

void moveMotorSpindleToLocBlock(long posM2) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	int DelayRequired = FALSE;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]
	while (!moveMotorSpindleToLocNoneBlock(posM2)) {
 8002e08:	e001      	b.n	8002e0e <moveMotorSpindleToLocBlock+0x12>
		DelayRequired = TRUE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
	while (!moveMotorSpindleToLocNoneBlock(posM2)) {
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f84c 	bl	8002eac <moveMotorSpindleToLocNoneBlock>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f7      	beq.n	8002e0a <moveMotorSpindleToLocBlock+0xe>
	}
	if (DelayRequired == TRUE) {
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d115      	bne.n	8002e4c <moveMotorSpindleToLocBlock+0x50>
		for(uint16_t j = 0; j < 1000; j++){
 8002e20:	2300      	movs	r3, #0
 8002e22:	817b      	strh	r3, [r7, #10]
 8002e24:	e00e      	b.n	8002e44 <moveMotorSpindleToLocBlock+0x48>
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8002e26:	2300      	movs	r3, #0
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	e003      	b.n	8002e34 <moveMotorSpindleToLocBlock+0x38>
				__NOP();
 8002e2c:	bf00      	nop
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8002e2e:	893b      	ldrh	r3, [r7, #8]
 8002e30:	3301      	adds	r3, #1
 8002e32:	813b      	strh	r3, [r7, #8]
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	f243 62af 	movw	r2, #13999	@ 0x36af
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d9f6      	bls.n	8002e2c <moveMotorSpindleToLocBlock+0x30>
		for(uint16_t j = 0; j < 1000; j++){
 8002e3e:	897b      	ldrh	r3, [r7, #10]
 8002e40:	3301      	adds	r3, #1
 8002e42:	817b      	strh	r3, [r7, #10]
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e4a:	d3ec      	bcc.n	8002e26 <moveMotorSpindleToLocBlock+0x2a>
			}
		}
	}

}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <moveMotorClampToLocBlock>:

void moveMotorClampToLocBlock(long posM1) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	int DelayRequired = FALSE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
	while (!moveMotorClampToLocNoneBlock(posM1)) {
 8002e60:	e001      	b.n	8002e66 <moveMotorClampToLocBlock+0x12>
		DelayRequired = TRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
	while (!moveMotorClampToLocNoneBlock(posM1)) {
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8a6 	bl	8002fb8 <moveMotorClampToLocNoneBlock>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f7      	beq.n	8002e62 <moveMotorClampToLocBlock+0xe>
	}
	if (DelayRequired == TRUE) {
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d115      	bne.n	8002ea4 <moveMotorClampToLocBlock+0x50>
		for(uint16_t j = 0; j < 1000; j++){
 8002e78:	2300      	movs	r3, #0
 8002e7a:	817b      	strh	r3, [r7, #10]
 8002e7c:	e00e      	b.n	8002e9c <moveMotorClampToLocBlock+0x48>
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8002e7e:	2300      	movs	r3, #0
 8002e80:	813b      	strh	r3, [r7, #8]
 8002e82:	e003      	b.n	8002e8c <moveMotorClampToLocBlock+0x38>
				__NOP();
 8002e84:	bf00      	nop
			for (uint16_t i = 0; i < 14000; i++){ //14000 is supposed to be 1mS
 8002e86:	893b      	ldrh	r3, [r7, #8]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	813b      	strh	r3, [r7, #8]
 8002e8c:	893b      	ldrh	r3, [r7, #8]
 8002e8e:	f243 62af 	movw	r2, #13999	@ 0x36af
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d9f6      	bls.n	8002e84 <moveMotorClampToLocBlock+0x30>
		for(uint16_t j = 0; j < 1000; j++){
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	817b      	strh	r3, [r7, #10]
 8002e9c:	897b      	ldrh	r3, [r7, #10]
 8002e9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ea2:	d3ec      	bcc.n	8002e7e <moveMotorClampToLocBlock+0x2a>
			}
		}
	}
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <moveMotorSpindleToLocNoneBlock>:

uint8_t moveMotorSpindleToLocNoneBlock(long posM2) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

	int M2Dir;
	uint8_t isSuccess = FALSE; // 0 for false, 1 for true
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	72fb      	strb	r3, [r7, #11]

	if (posM2 == M2POS1VAL && Spindle_M3_EncA_Pulses > M2POS1VAL) { //Going back home
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <moveMotorSpindleToLocNoneBlock+0x20>
 8002ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	dd02      	ble.n	8002ecc <moveMotorSpindleToLocNoneBlock+0x20>
		M2Dir = CCW;
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	e028      	b.n	8002f1e <moveMotorSpindleToLocNoneBlock+0x72>
	}
	else if (abs(Spindle_M3_EncA_Pulses - posM2) <= M2ACCEPTEDERROR || posM2 == NONE) {
 8002ecc:	4b38      	ldr	r3, [pc, #224]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002ed8:	db05      	blt.n	8002ee6 <moveMotorSpindleToLocNoneBlock+0x3a>
 8002eda:	4b35      	ldr	r3, [pc, #212]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	@ 0x64
 8002ee4:	dd03      	ble.n	8002eee <moveMotorSpindleToLocNoneBlock+0x42>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d10d      	bne.n	8002f0a <moveMotorSpindleToLocNoneBlock+0x5e>
		M2Dir = OFF;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
		posM2 = Spindle_M3_EncA_Pulses;
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	607b      	str	r3, [r7, #4]
		moveMotor(CAPMOTOR, OFF, INT_INF);
 8002ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb4 <moveMotorSpindleToLocNoneBlock+0x108>)
 8002efa:	2100      	movs	r1, #0
 8002efc:	2002      	movs	r0, #2
 8002efe:	f000 f8ed 	bl	80030dc <moveMotor>
		isSuccess = TRUE;
 8002f02:	2301      	movs	r3, #1
 8002f04:	72fb      	strb	r3, [r7, #11]
		return isSuccess;
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	e04d      	b.n	8002fa6 <moveMotorSpindleToLocNoneBlock+0xfa>
	}
	else if (Spindle_M3_EncA_Pulses < posM2) {
 8002f0a:	4b29      	ldr	r3, [pc, #164]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dd02      	ble.n	8002f1a <moveMotorSpindleToLocNoneBlock+0x6e>
		M2Dir = CW; //before CW changed while testing
 8002f14:	2301      	movs	r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e001      	b.n	8002f1e <moveMotorSpindleToLocNoneBlock+0x72>
	}
	else {
		M2Dir = CCW; //before CCw
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	60fb      	str	r3, [r7, #12]
	}

	if (Spindle_M3_EncA_Pulses != posM2) {
 8002f1e:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d036      	beq.n	8002f96 <moveMotorSpindleToLocNoneBlock+0xea>

		// Motor 2 Movement Logic
		if (M2Dir == CW) {
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d113      	bne.n	8002f56 <moveMotorSpindleToLocNoneBlock+0xaa>
			if (Spindle_M3_EncA_Pulses < posM2) {
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	dd05      	ble.n	8002f44 <moveMotorSpindleToLocNoneBlock+0x98>
				moveMotor(CAPMOTOR, CW, posM2);
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f000 f8cd 	bl	80030dc <moveMotor>
 8002f42:	e02f      	b.n	8002fa4 <moveMotorSpindleToLocNoneBlock+0xf8>
			} else {
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8002f44:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb4 <moveMotorSpindleToLocNoneBlock+0x108>)
 8002f46:	2100      	movs	r1, #0
 8002f48:	2002      	movs	r0, #2
 8002f4a:	f000 f8c7 	bl	80030dc <moveMotor>
				posM2 = Spindle_M3_EncA_Pulses;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	607b      	str	r3, [r7, #4]
 8002f54:	e026      	b.n	8002fa4 <moveMotorSpindleToLocNoneBlock+0xf8>
			}
		} else if (M2Dir == CCW) {
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d113      	bne.n	8002f84 <moveMotorSpindleToLocNoneBlock+0xd8>
			if (Spindle_M3_EncA_Pulses > posM2) {
 8002f5c:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	da05      	bge.n	8002f72 <moveMotorSpindleToLocNoneBlock+0xc6>
				moveMotor(CAPMOTOR, CCW, posM2);
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	2102      	movs	r1, #2
 8002f6a:	2002      	movs	r0, #2
 8002f6c:	f000 f8b6 	bl	80030dc <moveMotor>
 8002f70:	e018      	b.n	8002fa4 <moveMotorSpindleToLocNoneBlock+0xf8>
			} else {
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8002f72:	4a10      	ldr	r2, [pc, #64]	@ (8002fb4 <moveMotorSpindleToLocNoneBlock+0x108>)
 8002f74:	2100      	movs	r1, #0
 8002f76:	2002      	movs	r0, #2
 8002f78:	f000 f8b0 	bl	80030dc <moveMotor>
				posM2 = Spindle_M3_EncA_Pulses;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	e00f      	b.n	8002fa4 <moveMotorSpindleToLocNoneBlock+0xf8>
			}
		} else {
			moveMotor(CAPMOTOR, OFF, INT_INF);
 8002f84:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb4 <moveMotorSpindleToLocNoneBlock+0x108>)
 8002f86:	2100      	movs	r1, #0
 8002f88:	2002      	movs	r0, #2
 8002f8a:	f000 f8a7 	bl	80030dc <moveMotor>
			posM2 = Spindle_M3_EncA_Pulses;
 8002f8e:	4b08      	ldr	r3, [pc, #32]	@ (8002fb0 <moveMotorSpindleToLocNoneBlock+0x104>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	e006      	b.n	8002fa4 <moveMotorSpindleToLocNoneBlock+0xf8>
		}
	} else {
		moveMotor(CAPMOTOR, OFF, INT_INF);
 8002f96:	4a07      	ldr	r2, [pc, #28]	@ (8002fb4 <moveMotorSpindleToLocNoneBlock+0x108>)
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	f000 f89e 	bl	80030dc <moveMotor>
		isSuccess = TRUE;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	72fb      	strb	r3, [r7, #11]
	}
	return isSuccess;
 8002fa4:	7afb      	ldrb	r3, [r7, #11]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000104 	.word	0x20000104
 8002fb4:	0098967f 	.word	0x0098967f

08002fb8 <moveMotorClampToLocNoneBlock>:

uint8_t moveMotorClampToLocNoneBlock(long posM1) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	int M1Dir;

	uint8_t isSuccess = FALSE; // 0 for false, 1 for true
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	72fb      	strb	r3, [r7, #11]

	if (posM1 == M1POS1VAL && Clamp_M2_EncA_Pulses > M1POS1VAL) { //Going back home
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <moveMotorClampToLocNoneBlock+0x20>
 8002fca:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dd02      	ble.n	8002fd8 <moveMotorClampToLocNoneBlock+0x20>
		M1Dir = CW;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e02b      	b.n	8003030 <moveMotorClampToLocNoneBlock+0x78>
	} else if (abs(Clamp_M2_EncA_Pulses - posM1) <= M1ACCEPTEDERROR || posM1 == NONE) {
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002fe4:	db05      	blt.n	8002ff2 <moveMotorClampToLocNoneBlock+0x3a>
 8002fe6:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	dd03      	ble.n	8002ffa <moveMotorClampToLocNoneBlock+0x42>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d110      	bne.n	800301c <moveMotorClampToLocNoneBlock+0x64>
		M1Dir = OFF;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
		posM1 = Clamp_M2_EncA_Pulses;
 8002ffe:	4b33      	ldr	r3, [pc, #204]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	607b      	str	r3, [r7, #4]
		moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003004:	4a32      	ldr	r2, [pc, #200]	@ (80030d0 <moveMotorClampToLocNoneBlock+0x118>)
 8003006:	2100      	movs	r1, #0
 8003008:	2001      	movs	r0, #1
 800300a:	f000 f867 	bl	80030dc <moveMotor>
		isSuccess = TRUE;
 800300e:	2301      	movs	r3, #1
 8003010:	72fb      	strb	r3, [r7, #11]
		SerialPrintln("SUCCESS CLAMP");
 8003012:	4830      	ldr	r0, [pc, #192]	@ (80030d4 <moveMotorClampToLocNoneBlock+0x11c>)
 8003014:	f002 f9d8 	bl	80053c8 <SerialPrintln>
		return isSuccess;
 8003018:	7afb      	ldrb	r3, [r7, #11]
 800301a:	e052      	b.n	80030c2 <moveMotorClampToLocNoneBlock+0x10a>
	} else if (Clamp_M2_EncA_Pulses < posM1) {
 800301c:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	429a      	cmp	r2, r3
 8003024:	dd02      	ble.n	800302c <moveMotorClampToLocNoneBlock+0x74>
		M1Dir = CCW;
 8003026:	2302      	movs	r3, #2
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	e001      	b.n	8003030 <moveMotorClampToLocNoneBlock+0x78>
	} else {
		M1Dir = CW;
 800302c:	2301      	movs	r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
	}

	if (Clamp_M2_EncA_Pulses != posM1) {
 8003030:	4b26      	ldr	r3, [pc, #152]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d038      	beq.n	80030ac <moveMotorClampToLocNoneBlock+0xf4>

		// Motor 1 Movement Logic
		if (M1Dir == CCW) {
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d113      	bne.n	8003068 <moveMotorClampToLocNoneBlock+0xb0>
			if (Clamp_M2_EncA_Pulses < posM1) {
 8003040:	4b22      	ldr	r3, [pc, #136]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	429a      	cmp	r2, r3
 8003048:	dd05      	ble.n	8003056 <moveMotorClampToLocNoneBlock+0x9e>
				moveMotor(CLAMPMOTOR, CCW, posM1);
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	2102      	movs	r1, #2
 800304e:	2001      	movs	r0, #1
 8003050:	f000 f844 	bl	80030dc <moveMotor>
 8003054:	e027      	b.n	80030a6 <moveMotorClampToLocNoneBlock+0xee>
			} else {
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003056:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <moveMotorClampToLocNoneBlock+0x118>)
 8003058:	2100      	movs	r1, #0
 800305a:	2001      	movs	r0, #1
 800305c:	f000 f83e 	bl	80030dc <moveMotor>
				posM1 = Clamp_M2_EncA_Pulses;
 8003060:	4b1a      	ldr	r3, [pc, #104]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	e01e      	b.n	80030a6 <moveMotorClampToLocNoneBlock+0xee>
			}
		} else if (M1Dir == CW) {
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d113      	bne.n	8003096 <moveMotorClampToLocNoneBlock+0xde>
			if (Clamp_M2_EncA_Pulses > posM1) {
 800306e:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	da05      	bge.n	8003084 <moveMotorClampToLocNoneBlock+0xcc>
				moveMotor(CLAMPMOTOR, CW, posM1);
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	2101      	movs	r1, #1
 800307c:	2001      	movs	r0, #1
 800307e:	f000 f82d 	bl	80030dc <moveMotor>
 8003082:	e010      	b.n	80030a6 <moveMotorClampToLocNoneBlock+0xee>
			} else {
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003084:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <moveMotorClampToLocNoneBlock+0x118>)
 8003086:	2100      	movs	r1, #0
 8003088:	2001      	movs	r0, #1
 800308a:	f000 f827 	bl	80030dc <moveMotor>
				posM1 = Clamp_M2_EncA_Pulses;
 800308e:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	607b      	str	r3, [r7, #4]
 8003094:	e007      	b.n	80030a6 <moveMotorClampToLocNoneBlock+0xee>
			}
		} else {
			moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8003096:	4a0e      	ldr	r2, [pc, #56]	@ (80030d0 <moveMotorClampToLocNoneBlock+0x118>)
 8003098:	2100      	movs	r1, #0
 800309a:	2001      	movs	r0, #1
 800309c:	f000 f81e 	bl	80030dc <moveMotor>
			posM1 = Clamp_M2_EncA_Pulses;
 80030a0:	4b0a      	ldr	r3, [pc, #40]	@ (80030cc <moveMotorClampToLocNoneBlock+0x114>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	607b      	str	r3, [r7, #4]
		}

		isSuccess = FALSE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	72fb      	strb	r3, [r7, #11]
 80030aa:	e009      	b.n	80030c0 <moveMotorClampToLocNoneBlock+0x108>
	} else {
		SerialPrintln("POSITION REACHED");
 80030ac:	480a      	ldr	r0, [pc, #40]	@ (80030d8 <moveMotorClampToLocNoneBlock+0x120>)
 80030ae:	f002 f98b 	bl	80053c8 <SerialPrintln>
		moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80030b2:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <moveMotorClampToLocNoneBlock+0x118>)
 80030b4:	2100      	movs	r1, #0
 80030b6:	2001      	movs	r0, #1
 80030b8:	f000 f810 	bl	80030dc <moveMotor>
		isSuccess = TRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	72fb      	strb	r3, [r7, #11]
	}
	return isSuccess;
 80030c0:	7afb      	ldrb	r3, [r7, #11]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200000fc 	.word	0x200000fc
 80030d0:	0098967f 	.word	0x0098967f
 80030d4:	08016ddc 	.word	0x08016ddc
 80030d8:	08016dec 	.word	0x08016dec

080030dc <moveMotor>:

void moveMotor(int motorNum, int Dir, int targetPoint) {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
	if (motorNum == CLAMPMOTOR) {
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d147      	bne.n	800317e <moveMotor+0xa2>
		if (Dir == CW) {
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <moveMotor+0x28>
			ClampMotorState = CW;
 80030f4:	4b60      	ldr	r3, [pc, #384]	@ (8003278 <moveMotor+0x19c>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]
			digitalWrite(Clamp_M2_Dir_Output, LOW);
 80030fa:	2100      	movs	r1, #0
 80030fc:	2005      	movs	r0, #5
 80030fe:	f7ff fe57 	bl	8002db0 <digitalWrite>
 8003102:	e00f      	b.n	8003124 <moveMotor+0x48>
		} else if (Dir == CCW) {
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d107      	bne.n	800311a <moveMotor+0x3e>
			ClampMotorState = CCW;
 800310a:	4b5b      	ldr	r3, [pc, #364]	@ (8003278 <moveMotor+0x19c>)
 800310c:	2202      	movs	r2, #2
 800310e:	601a      	str	r2, [r3, #0]
			digitalWrite(Clamp_M2_Dir_Output, HIGH);
 8003110:	2101      	movs	r1, #1
 8003112:	2005      	movs	r0, #5
 8003114:	f7ff fe4c 	bl	8002db0 <digitalWrite>
 8003118:	e004      	b.n	8003124 <moveMotor+0x48>
		} else {
			pwm(Clamp_M2_PWM, OFF);
 800311a:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 800327c <moveMotor+0x1a0>
 800311e:	2001      	movs	r0, #1
 8003120:	f004 f852 	bl	80071c8 <pwm>
		}

		if (Dir != OFF) {
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80a2 	beq.w	8003270 <moveMotor+0x194>
			checkFaultsMotors(CLAMPMOTOR);
 800312c:	2001      	movs	r0, #1
 800312e:	f000 f8bd 	bl	80032ac <checkFaultsMotors>
			if (abs(Clamp_M2_EncA_Pulses - targetPoint) < MOVEM1SLOWPULSES) { //If we are close to our target, move slowly
 8003132:	4b53      	ldr	r3, [pc, #332]	@ (8003280 <moveMotor+0x1a4>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f513 7ffa 	cmn.w	r3, #500	@ 0x1f4
 800313e:	dd12      	ble.n	8003166 <moveMotor+0x8a>
 8003140:	4b4f      	ldr	r3, [pc, #316]	@ (8003280 <moveMotor+0x1a4>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800314c:	da0b      	bge.n	8003166 <moveMotor+0x8a>
				pwm(Clamp_M2_PWM, PWM_SLOW);
 800314e:	4b4d      	ldr	r3, [pc, #308]	@ (8003284 <moveMotor+0x1a8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315a:	eeb0 0a67 	vmov.f32	s0, s15
 800315e:	2001      	movs	r0, #1
 8003160:	f004 f832 	bl	80071c8 <pwm>
 8003164:	e084      	b.n	8003270 <moveMotor+0x194>
			} else { //Else go with high speed
				pwm(Clamp_M2_PWM, PWM_FAST);
 8003166:	4b48      	ldr	r3, [pc, #288]	@ (8003288 <moveMotor+0x1ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003172:	eeb0 0a67 	vmov.f32	s0, s15
 8003176:	2001      	movs	r0, #1
 8003178:	f004 f826 	bl	80071c8 <pwm>
			FreshValveStatus = 0;

		}
	}

}
 800317c:	e078      	b.n	8003270 <moveMotor+0x194>
	} else if (motorNum == CAPMOTOR) {
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d153      	bne.n	800322c <moveMotor+0x150>
		if (Dir == CW) {
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d107      	bne.n	800319a <moveMotor+0xbe>
			SpindleMotorState = CW;
 800318a:	4b40      	ldr	r3, [pc, #256]	@ (800328c <moveMotor+0x1b0>)
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
			digitalWrite(Spindle_M3_Dir_Output, LOW);
 8003190:	2100      	movs	r1, #0
 8003192:	2004      	movs	r0, #4
 8003194:	f7ff fe0c 	bl	8002db0 <digitalWrite>
 8003198:	e00f      	b.n	80031ba <moveMotor+0xde>
		} else if (Dir == CCW) {
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d107      	bne.n	80031b0 <moveMotor+0xd4>
			SpindleMotorState = CCW;
 80031a0:	4b3a      	ldr	r3, [pc, #232]	@ (800328c <moveMotor+0x1b0>)
 80031a2:	2202      	movs	r2, #2
 80031a4:	601a      	str	r2, [r3, #0]
			digitalWrite(Spindle_M3_Dir_Output, HIGH);
 80031a6:	2101      	movs	r1, #1
 80031a8:	2004      	movs	r0, #4
 80031aa:	f7ff fe01 	bl	8002db0 <digitalWrite>
 80031ae:	e004      	b.n	80031ba <moveMotor+0xde>
			pwm(Spindle_M3_PWM, OFF);
 80031b0:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800327c <moveMotor+0x1a0>
 80031b4:	2002      	movs	r0, #2
 80031b6:	f004 f807 	bl	80071c8 <pwm>
		if (Dir != OFF) {
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d057      	beq.n	8003270 <moveMotor+0x194>
			if (abs(Spindle_M3_EncA_Pulses - targetPoint) < MOVEM2SLOWPULSES) { //If we are close to our target, move slowly
 80031c0:	4b33      	ldr	r3, [pc, #204]	@ (8003290 <moveMotor+0x1b4>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80031cc:	dd12      	ble.n	80031f4 <moveMotor+0x118>
 80031ce:	4b30      	ldr	r3, [pc, #192]	@ (8003290 <moveMotor+0x1b4>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031da:	da0b      	bge.n	80031f4 <moveMotor+0x118>
				pwm(Spindle_M3_PWM, PWM_SLOW);
 80031dc:	4b29      	ldr	r3, [pc, #164]	@ (8003284 <moveMotor+0x1a8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	ee07 3a90 	vmov	s15, r3
 80031e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e8:	eeb0 0a67 	vmov.f32	s0, s15
 80031ec:	2002      	movs	r0, #2
 80031ee:	f003 ffeb 	bl	80071c8 <pwm>
 80031f2:	e03d      	b.n	8003270 <moveMotor+0x194>
			} else if(CleaningFlag == TRUE){ //Else go with high speed
 80031f4:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <moveMotor+0x1b8>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d10b      	bne.n	8003214 <moveMotor+0x138>
				pwm(Spindle_M3_PWM, PWM_CLEANING);
 80031fc:	4b26      	ldr	r3, [pc, #152]	@ (8003298 <moveMotor+0x1bc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003208:	eeb0 0a67 	vmov.f32	s0, s15
 800320c:	2002      	movs	r0, #2
 800320e:	f003 ffdb 	bl	80071c8 <pwm>
}
 8003212:	e02d      	b.n	8003270 <moveMotor+0x194>
				pwm(Spindle_M3_PWM, PWM_FAST);
 8003214:	4b1c      	ldr	r3, [pc, #112]	@ (8003288 <moveMotor+0x1ac>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	ee07 3a90 	vmov	s15, r3
 800321c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003220:	eeb0 0a67 	vmov.f32	s0, s15
 8003224:	2002      	movs	r0, #2
 8003226:	f003 ffcf 	bl	80071c8 <pwm>
}
 800322a:	e021      	b.n	8003270 <moveMotor+0x194>
	} else if (motorNum == VALVEMOTOR) {
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b03      	cmp	r3, #3
 8003230:	d11e      	bne.n	8003270 <moveMotor+0x194>
		if (Dir == ON) {
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d10d      	bne.n	8003254 <moveMotor+0x178>
			digitalWrite(Relay_Output, HIGH);
 8003238:	2101      	movs	r1, #1
 800323a:	2003      	movs	r0, #3
 800323c:	f7ff fdb8 	bl	8002db0 <digitalWrite>
			strcpy(ValveStatus, "Open");
 8003240:	4b16      	ldr	r3, [pc, #88]	@ (800329c <moveMotor+0x1c0>)
 8003242:	4a17      	ldr	r2, [pc, #92]	@ (80032a0 <moveMotor+0x1c4>)
 8003244:	6810      	ldr	r0, [r2, #0]
 8003246:	6018      	str	r0, [r3, #0]
 8003248:	7912      	ldrb	r2, [r2, #4]
 800324a:	711a      	strb	r2, [r3, #4]
			FreshValveStatus = 1;
 800324c:	4b15      	ldr	r3, [pc, #84]	@ (80032a4 <moveMotor+0x1c8>)
 800324e:	2201      	movs	r2, #1
 8003250:	701a      	strb	r2, [r3, #0]
}
 8003252:	e00d      	b.n	8003270 <moveMotor+0x194>
			digitalWrite(Relay_Output, LOW);
 8003254:	2100      	movs	r1, #0
 8003256:	2003      	movs	r0, #3
 8003258:	f7ff fdaa 	bl	8002db0 <digitalWrite>
			strcpy(ValveStatus, "Close");
 800325c:	4b0f      	ldr	r3, [pc, #60]	@ (800329c <moveMotor+0x1c0>)
 800325e:	4a12      	ldr	r2, [pc, #72]	@ (80032a8 <moveMotor+0x1cc>)
 8003260:	6810      	ldr	r0, [r2, #0]
 8003262:	6018      	str	r0, [r3, #0]
 8003264:	8892      	ldrh	r2, [r2, #4]
 8003266:	809a      	strh	r2, [r3, #4]
			FreshValveStatus = 0;
 8003268:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <moveMotor+0x1c8>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
}
 800326e:	e7ff      	b.n	8003270 <moveMotor+0x194>
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200003c4 	.word	0x200003c4
 800327c:	00000000 	.word	0x00000000
 8003280:	200000fc 	.word	0x200000fc
 8003284:	20000140 	.word	0x20000140
 8003288:	2000013c 	.word	0x2000013c
 800328c:	200003c8 	.word	0x200003c8
 8003290:	20000104 	.word	0x20000104
 8003294:	2000038a 	.word	0x2000038a
 8003298:	20000144 	.word	0x20000144
 800329c:	20000380 	.word	0x20000380
 80032a0:	08016e00 	.word	0x08016e00
 80032a4:	2000038e 	.word	0x2000038e
 80032a8:	08016e08 	.word	0x08016e08

080032ac <checkFaultsMotors>:


void checkFaultsMotors(uint8_t x) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]

	GetADC();
 80032b6:	f000 f851 	bl	800335c <GetADC>
	// Used to check pause status
	ReadKeypadVar(CONTROL);
 80032ba:	2002      	movs	r0, #2
 80032bc:	f000 fe4a 	bl	8003f54 <ReadKeypadVar>
	if (isPausedOperation == TRUE) {
 80032c0:	4b1e      	ldr	r3, [pc, #120]	@ (800333c <checkFaultsMotors+0x90>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d135      	bne.n	8003334 <checkFaultsMotors+0x88>
		printLCD(3, "PAUSE", NO_SYMBOL);
 80032c8:	2200      	movs	r2, #0
 80032ca:	491d      	ldr	r1, [pc, #116]	@ (8003340 <checkFaultsMotors+0x94>)
 80032cc:	2003      	movs	r0, #3
 80032ce:	f001 fca7 	bl	8004c20 <printLCD>
		int isvalveopenOld = isValveOpen; // Store last valve state
 80032d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003344 <checkFaultsMotors+0x98>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]

		while (isPausedOperation == TRUE) {
 80032d8:	e014      	b.n	8003304 <checkFaultsMotors+0x58>
			SerialPrintln("STUCK IN PAUSE");
 80032da:	481b      	ldr	r0, [pc, #108]	@ (8003348 <checkFaultsMotors+0x9c>)
 80032dc:	f002 f874 	bl	80053c8 <SerialPrintln>
			ReadKeypadVar(CONTROL);
 80032e0:	2002      	movs	r0, #2
 80032e2:	f000 fe37 	bl	8003f54 <ReadKeypadVar>
			moveMotor(CAPMOTOR, OFF, INT_INF);
 80032e6:	4a19      	ldr	r2, [pc, #100]	@ (800334c <checkFaultsMotors+0xa0>)
 80032e8:	2100      	movs	r1, #0
 80032ea:	2002      	movs	r0, #2
 80032ec:	f7ff fef6 	bl	80030dc <moveMotor>
			moveMotor(CLAMPMOTOR, OFF, INT_INF);
 80032f0:	4a16      	ldr	r2, [pc, #88]	@ (800334c <checkFaultsMotors+0xa0>)
 80032f2:	2100      	movs	r1, #0
 80032f4:	2001      	movs	r0, #1
 80032f6:	f7ff fef1 	bl	80030dc <moveMotor>
			moveMotor(VALVEMOTOR, OFF, INT_INF);
 80032fa:	4a14      	ldr	r2, [pc, #80]	@ (800334c <checkFaultsMotors+0xa0>)
 80032fc:	2100      	movs	r1, #0
 80032fe:	2003      	movs	r0, #3
 8003300:	f7ff feec 	bl	80030dc <moveMotor>
		while (isPausedOperation == TRUE) {
 8003304:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <checkFaultsMotors+0x90>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d0e6      	beq.n	80032da <checkFaultsMotors+0x2e>
		}

		// Display relevant information on LCD based on the operation mode
		if (isDemoCleaning == TRUE) {
 800330c:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <checkFaultsMotors+0xa4>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <checkFaultsMotors+0x74>
			printLCD(3, "CLEANING", NO_SYMBOL);
 8003314:	2200      	movs	r2, #0
 8003316:	490f      	ldr	r1, [pc, #60]	@ (8003354 <checkFaultsMotors+0xa8>)
 8003318:	2003      	movs	r0, #3
 800331a:	f001 fc81 	bl	8004c20 <printLCD>
 800331e:	e004      	b.n	800332a <checkFaultsMotors+0x7e>
		} else {
			printLCD(3, " ", NO_SYMBOL);
 8003320:	2200      	movs	r2, #0
 8003322:	490d      	ldr	r1, [pc, #52]	@ (8003358 <checkFaultsMotors+0xac>)
 8003324:	2003      	movs	r0, #3
 8003326:	f001 fc7b 	bl	8004c20 <printLCD>
		}

		// Resume operation after pause
		moveMotor(VALVEMOTOR, isvalveopenOld, INT_INF); // Revert valve to its previous state
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <checkFaultsMotors+0xa0>)
 800332c:	68f9      	ldr	r1, [r7, #12]
 800332e:	2003      	movs	r0, #3
 8003330:	f7ff fed4 	bl	80030dc <moveMotor>
	}
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	200003f1 	.word	0x200003f1
 8003340:	08016e10 	.word	0x08016e10
 8003344:	20000374 	.word	0x20000374
 8003348:	08016e18 	.word	0x08016e18
 800334c:	0098967f 	.word	0x0098967f
 8003350:	200003f7 	.word	0x200003f7
 8003354:	08016e28 	.word	0x08016e28
 8003358:	08016e34 	.word	0x08016e34

0800335c <GetADC>:

void GetADC()
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0

}
 8003360:	bf00      	nop
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003370:	f3bf 8f4f 	dsb	sy
}
 8003374:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003376:	4b06      	ldr	r3, [pc, #24]	@ (8003390 <__NVIC_SystemReset+0x24>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800337e:	4904      	ldr	r1, [pc, #16]	@ (8003390 <__NVIC_SystemReset+0x24>)
 8003380:	4b04      	ldr	r3, [pc, #16]	@ (8003394 <__NVIC_SystemReset+0x28>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003386:	f3bf 8f4f 	dsb	sy
}
 800338a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <__NVIC_SystemReset+0x20>
 8003390:	e000ed00 	.word	0xe000ed00
 8003394:	05fa0004 	.word	0x05fa0004

08003398 <HAL_GPIO_EXTI_Callback>:
 * @brief  GPIO Interrupt Check Callback Function when Triggered for using interrupts.
 * @param  GPIO_Pin :Pin number for the interrupt
 * @retval None
*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) /* @fn Callback Function*/
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
// Check which pin triggered the interrupt and Callbacks Power Button Interrupts for turning on and turning off the machine
	// Check button state
	if (GPIO_Pin == Button_Power_Interrupt_PullUp_Pin) {
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d11b      	bne.n	80033e0 <HAL_GPIO_EXTI_Callback+0x48>
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear interrupt flag
 80033a8:	4a9d      	ldr	r2, [pc, #628]	@ (8003620 <HAL_GPIO_EXTI_Callback+0x288>)
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	6153      	str	r3, [r2, #20]

		if (HAL_GPIO_ReadPin(Button_Power_Interrupt_PullUp_GPIO_Port, Button_Power_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) {
 80033ae:	2110      	movs	r1, #16
 80033b0:	489c      	ldr	r0, [pc, #624]	@ (8003624 <HAL_GPIO_EXTI_Callback+0x28c>)
 80033b2:	f006 fe0d 	bl	8009fd0 <HAL_GPIO_ReadPin>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_GPIO_EXTI_Callback+0x3c>
			// Button pressed: Record press time and reset action flag
			PowerButtonPressTime = HAL_GetTick();
 80033bc:	f005 f990 	bl	80086e0 <HAL_GetTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4a99      	ldr	r2, [pc, #612]	@ (8003628 <HAL_GPIO_EXTI_Callback+0x290>)
 80033c4:	6013      	str	r3, [r2, #0]
			actionTaken = 0;
 80033c6:	4b99      	ldr	r3, [pc, #612]	@ (800362c <HAL_GPIO_EXTI_Callback+0x294>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
			SerialPrintln("Power Button Pressed");
 80033cc:	4898      	ldr	r0, [pc, #608]	@ (8003630 <HAL_GPIO_EXTI_Callback+0x298>)
 80033ce:	f001 fffb 	bl	80053c8 <SerialPrintln>
 80033d2:	e005      	b.n	80033e0 <HAL_GPIO_EXTI_Callback+0x48>
		} else {
			// Button released: Reset press time
			PowerButtonPressTime = 0;
 80033d4:	4b94      	ldr	r3, [pc, #592]	@ (8003628 <HAL_GPIO_EXTI_Callback+0x290>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
			SerialPrintln("Power Button Released");
 80033da:	4896      	ldr	r0, [pc, #600]	@ (8003634 <HAL_GPIO_EXTI_Callback+0x29c>)
 80033dc:	f001 fff4 	bl	80053c8 <SerialPrintln>
		}
	}
	/*** CLEAN BUTTON  ACTIONS ***/
	if (GPIO_Pin == Button_Clean_Interrupt_PullUp_Pin) {
 80033e0:	88fb      	ldrh	r3, [r7, #6]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	f040 80a6 	bne.w	8003534 <HAL_GPIO_EXTI_Callback+0x19c>
	        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // Clear the interrupt flag
 80033e8:	4a8d      	ldr	r2, [pc, #564]	@ (8003620 <HAL_GPIO_EXTI_Callback+0x288>)
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	6153      	str	r3, [r2, #20]
	        static uint32_t buttonPressStartTime = 0; // Track when the button was pressed
	        static uint8_t buttonState = 0;          // 0: Released, 1: Pressed
	        static uint8_t buttonPressCount = 0;     // Tracks button presses during cleaning
	    	uint32_t InitialpressDuration = HAL_GetTick() - buttonPressStartTime; // Calculate press duration
 80033ee:	f005 f977 	bl	80086e0 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	4b90      	ldr	r3, [pc, #576]	@ (8003638 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	60fb      	str	r3, [r7, #12]
	    	buttonPressStartTime = HAL_GetTick(); // Record press start time
 80033fc:	f005 f970 	bl	80086e0 <HAL_GetTick>
 8003400:	4603      	mov	r3, r0
 8003402:	4a8d      	ldr	r2, [pc, #564]	@ (8003638 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003404:	6013      	str	r3, [r2, #0]
	        if (HAL_GPIO_ReadPin(Button_Clean_Interrupt_PullUp_GPIO_Port, Button_Clean_Interrupt_PullUp_Pin) == GPIO_PIN_SET) {  //GPIO_PIN_RESET
 8003406:	2104      	movs	r1, #4
 8003408:	4886      	ldr	r0, [pc, #536]	@ (8003624 <HAL_GPIO_EXTI_Callback+0x28c>)
 800340a:	f006 fde1 	bl	8009fd0 <HAL_GPIO_ReadPin>
 800340e:	4603      	mov	r3, r0
 8003410:	2b01      	cmp	r3, #1
 8003412:	f040 81f0 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	            // Button pressed
				if ((buttonState == 0) && (InitialpressDuration >= 2000 )) { // Detect initial press
 8003416:	4b89      	ldr	r3, [pc, #548]	@ (800363c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_GPIO_EXTI_Callback+0xa0>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003424:	d308      	bcc.n	8003438 <HAL_GPIO_EXTI_Callback+0xa0>
					buttonPressStartTime = HAL_GetTick(); // Record press start time
 8003426:	f005 f95b 	bl	80086e0 <HAL_GetTick>
 800342a:	4603      	mov	r3, r0
 800342c:	4a82      	ldr	r2, [pc, #520]	@ (8003638 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800342e:	6013      	str	r3, [r2, #0]
					buttonState = 1;
 8003430:	4b82      	ldr	r3, [pc, #520]	@ (800363c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8003432:	2201      	movs	r2, #1
 8003434:	701a      	strb	r2, [r3, #0]
					ServoDC_M1_EncB_Pulses--;
				}
			}
		}

}
 8003436:	e1de      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
					if (buttonState == 1)
 8003438:	4b80      	ldr	r3, [pc, #512]	@ (800363c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	f040 81da 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
						uint32_t pressDuration = HAL_GetTick() - buttonPressStartTime; // Calculate press duration
 8003442:	f005 f94d 	bl	80086e0 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	4b7b      	ldr	r3, [pc, #492]	@ (8003638 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	60bb      	str	r3, [r7, #8]
							if (CleaningOperationFlag == FALSE && pressDuration >= BUTTON_HOLD_TIME_ON )
 8003450:	4b7b      	ldr	r3, [pc, #492]	@ (8003640 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <HAL_GPIO_EXTI_Callback+0xe2>
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800345e:	d30c      	bcc.n	800347a <HAL_GPIO_EXTI_Callback+0xe2>
								cleanLongPressed = TRUE;
 8003460:	4b78      	ldr	r3, [pc, #480]	@ (8003644 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
								UserCleaningCycleNumber = 1;  // Initialize cleaning cycle count
 8003466:	4b78      	ldr	r3, [pc, #480]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
								buttonPressCount = 0;         // Reset button press count
 800346c:	4b77      	ldr	r3, [pc, #476]	@ (800364c <HAL_GPIO_EXTI_Callback+0x2b4>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
								SerialPrintln("Cleaning Started\n");
 8003472:	4877      	ldr	r0, [pc, #476]	@ (8003650 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8003474:	f001 ffa8 	bl	80053c8 <SerialPrintln>
 8003478:	e009      	b.n	800348e <HAL_GPIO_EXTI_Callback+0xf6>
							else if(pressDuration <= BUTTON_HOLD_TIME_OFF)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003480:	d805      	bhi.n	800348e <HAL_GPIO_EXTI_Callback+0xf6>
								cleanLongPressed = FALSE;
 8003482:	4b70      	ldr	r3, [pc, #448]	@ (8003644 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
								UserCleaningCycleNumber = 1;  // Initialize cleaning cycle count
 8003488:	4b6f      	ldr	r3, [pc, #444]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
							if ((CleaningOperationFlag == TRUE) && (pressDuration > 500))
 800348e:	4b6c      	ldr	r3, [pc, #432]	@ (8003640 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b01      	cmp	r3, #1
 8003494:	f040 81af 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800349e:	f240 81aa 	bls.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
								 buttonPressCount++;
 80034a2:	4b6a      	ldr	r3, [pc, #424]	@ (800364c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4b68      	ldr	r3, [pc, #416]	@ (800364c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80034ac:	701a      	strb	r2, [r3, #0]
								 SerialPrintln("Button Count Cycle");
 80034ae:	4869      	ldr	r0, [pc, #420]	@ (8003654 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80034b0:	f001 ff8a 	bl	80053c8 <SerialPrintln>
								 SerialPrintlnINT(buttonPressCount);
 80034b4:	4b65      	ldr	r3, [pc, #404]	@ (800364c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 ffa5 	bl	8005408 <SerialPrintlnINT>
								if (UserCleaningCycleNumber < MAXCLEANCYCLESALLOWED)
 80034be:	4b62      	ldr	r3, [pc, #392]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d810      	bhi.n	80034ea <HAL_GPIO_EXTI_Callback+0x152>
									UserCleaningCycleNumber++;
 80034c8:	4b5f      	ldr	r3, [pc, #380]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80034d4:	701a      	strb	r2, [r3, #0]
									SerialPrint("Increased Cleaning Cycle :");
 80034d6:	4860      	ldr	r0, [pc, #384]	@ (8003658 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80034d8:	f001 ff60 	bl	800539c <SerialPrint>
									SerialPrintlnINT(UserCleaningCycleNumber);
 80034dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 ff90 	bl	8005408 <SerialPrintlnINT>
 80034e8:	e018      	b.n	800351c <HAL_GPIO_EXTI_Callback+0x184>
									if (buttonPressCount > 3) {
 80034ea:	4b58      	ldr	r3, [pc, #352]	@ (800364c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d902      	bls.n	80034f8 <HAL_GPIO_EXTI_Callback+0x160>
										buttonPressCount = 0;
 80034f2:	4b56      	ldr	r3, [pc, #344]	@ (800364c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	701a      	strb	r2, [r3, #0]
									if(UserCleaningCycleNumber >= 3)
 80034f8:	4b53      	ldr	r3, [pc, #332]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d903      	bls.n	800350a <HAL_GPIO_EXTI_Callback+0x172>
										UserCleaningCycleNumber = 1;
 8003502:	4b51      	ldr	r3, [pc, #324]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e008      	b.n	800351c <HAL_GPIO_EXTI_Callback+0x184>
										SerialPrintln("Reduced Cleaning Cycle");
 800350a:	4854      	ldr	r0, [pc, #336]	@ (800365c <HAL_GPIO_EXTI_Callback+0x2c4>)
 800350c:	f001 ff5c 	bl	80053c8 <SerialPrintln>
										SerialPrintlnINT(UserCleaningCycleNumber);
 8003510:	4b4d      	ldr	r3, [pc, #308]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	f001 ff76 	bl	8005408 <SerialPrintlnINT>
								printLCDInt(3,"Cycle No: ",completedCycles, UserCleaningCycleNumber);  // need to test the code
 800351c:	4b50      	ldr	r3, [pc, #320]	@ (8003660 <HAL_GPIO_EXTI_Callback+0x2c8>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	4b48      	ldr	r3, [pc, #288]	@ (8003648 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	494e      	ldr	r1, [pc, #312]	@ (8003664 <HAL_GPIO_EXTI_Callback+0x2cc>)
 800352c:	2003      	movs	r0, #3
 800352e:	f001 faf3 	bl	8004b18 <printLCDInt>
}
 8003532:	e160      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == Clamp_M2_Prox_Interrupt_Pin)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d128      	bne.n	800358c <HAL_GPIO_EXTI_Callback+0x1f4>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800353a:	4a39      	ldr	r2, [pc, #228]	@ (8003620 <HAL_GPIO_EXTI_Callback+0x288>)
 800353c:	88fb      	ldrh	r3, [r7, #6]
 800353e:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) == 1) {
 8003540:	2101      	movs	r1, #1
 8003542:	4849      	ldr	r0, [pc, #292]	@ (8003668 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003544:	f006 fd44 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d111      	bne.n	8003572 <HAL_GPIO_EXTI_Callback+0x1da>
			Clamp_M2_EncA_Pulses = 0;
 800354e:	4b47      	ldr	r3, [pc, #284]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
			Clamp_M2_EncB_Pulses = 0;
 8003554:	4b46      	ldr	r3, [pc, #280]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
			pwm(Clamp_M2_PWM, 0);
 800355a:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8003674 <HAL_GPIO_EXTI_Callback+0x2dc>
 800355e:	2001      	movs	r0, #1
 8003560:	f003 fe32 	bl	80071c8 <pwm>
			isClampLimitSwitchReached = TRUE;
 8003564:	4b44      	ldr	r3, [pc, #272]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
			SerialPrint("Clamp Interrupt M2 Limit rising\n");
 800356a:	4844      	ldr	r0, [pc, #272]	@ (800367c <HAL_GPIO_EXTI_Callback+0x2e4>)
 800356c:	f001 ff16 	bl	800539c <SerialPrint>
}
 8003570:	e141      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			Clamp_M2_EncA_Pulses = 1;
 8003572:	4b3e      	ldr	r3, [pc, #248]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
			Clamp_M2_EncB_Pulses = 1;
 8003578:	4b3d      	ldr	r3, [pc, #244]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
			isClampLimitSwitchReached = FALSE;
 800357e:	4b3e      	ldr	r3, [pc, #248]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x2e0>)
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
			SerialPrint("Clamp Interrupt M2 Limit falling\n");
 8003584:	483e      	ldr	r0, [pc, #248]	@ (8003680 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8003586:	f001 ff09 	bl	800539c <SerialPrint>
}
 800358a:	e134      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == Clamp_M2_EncA_Interrupt_Pin)
 800358c:	88fb      	ldrh	r3, [r7, #6]
 800358e:	2b20      	cmp	r3, #32
 8003590:	d121      	bne.n	80035d6 <HAL_GPIO_EXTI_Callback+0x23e>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003592:	4a23      	ldr	r2, [pc, #140]	@ (8003620 <HAL_GPIO_EXTI_Callback+0x288>)
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	6153      	str	r3, [r2, #20]
		if(!isClampLimitSwitchReached){
 8003598:	4b37      	ldr	r3, [pc, #220]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x2e0>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 812a 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			if(ClampMotorState == CCW){
 80035a2:	4b38      	ldr	r3, [pc, #224]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d105      	bne.n	80035b6 <HAL_GPIO_EXTI_Callback+0x21e>
				Clamp_M2_EncA_Pulses++;
 80035aa:	4b30      	ldr	r3, [pc, #192]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a2e      	ldr	r2, [pc, #184]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80035b2:	6013      	str	r3, [r2, #0]
}
 80035b4:	e11f      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			else if(ClampMotorState == CW && Clamp_M2_EncA_Pulses > 1){
 80035b6:	4b33      	ldr	r3, [pc, #204]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	f040 811b 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 80035c0:	4b2a      	ldr	r3, [pc, #168]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f340 8116 	ble.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				Clamp_M2_EncA_Pulses--;
 80035ca:	4b28      	ldr	r3, [pc, #160]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	4a26      	ldr	r2, [pc, #152]	@ (800366c <HAL_GPIO_EXTI_Callback+0x2d4>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	e10f      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == Clamp_M2_EncB__Interrupt_Pin)
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d155      	bne.n	8003688 <HAL_GPIO_EXTI_Callback+0x2f0>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035dc:	4a10      	ldr	r2, [pc, #64]	@ (8003620 <HAL_GPIO_EXTI_Callback+0x288>)
 80035de:	88fb      	ldrh	r3, [r7, #6]
 80035e0:	6153      	str	r3, [r2, #20]
			if(!isClampLimitSwitchReached){
 80035e2:	4b25      	ldr	r3, [pc, #148]	@ (8003678 <HAL_GPIO_EXTI_Callback+0x2e0>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 8105 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				if(ClampMotorState == CCW){
 80035ec:	4b25      	ldr	r3, [pc, #148]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x2ec>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d105      	bne.n	8003600 <HAL_GPIO_EXTI_Callback+0x268>
					Clamp_M2_EncB_Pulses++;
 80035f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	e0fa      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				else if(ClampMotorState == CW && Clamp_M2_EncB_Pulses > 1){
 8003600:	4b20      	ldr	r3, [pc, #128]	@ (8003684 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 80f6 	bne.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 800360a:	4b19      	ldr	r3, [pc, #100]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b01      	cmp	r3, #1
 8003610:	f340 80f1 	ble.w	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
					Clamp_M2_EncB_Pulses--;
 8003614:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3b01      	subs	r3, #1
 800361a:	4a15      	ldr	r2, [pc, #84]	@ (8003670 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800361c:	6013      	str	r3, [r2, #0]
}
 800361e:	e0ea      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 8003620:	40013c00 	.word	0x40013c00
 8003624:	40020000 	.word	0x40020000
 8003628:	200003ec 	.word	0x200003ec
 800362c:	200003c0 	.word	0x200003c0
 8003630:	08016e38 	.word	0x08016e38
 8003634:	08016e50 	.word	0x08016e50
 8003638:	200003e0 	.word	0x200003e0
 800363c:	200003e4 	.word	0x200003e4
 8003640:	2000038b 	.word	0x2000038b
 8003644:	200003f5 	.word	0x200003f5
 8003648:	200000f2 	.word	0x200000f2
 800364c:	200003e5 	.word	0x200003e5
 8003650:	08016e68 	.word	0x08016e68
 8003654:	08016e7c 	.word	0x08016e7c
 8003658:	08016e90 	.word	0x08016e90
 800365c:	08016eac 	.word	0x08016eac
 8003660:	200003a1 	.word	0x200003a1
 8003664:	08016ec4 	.word	0x08016ec4
 8003668:	40020800 	.word	0x40020800
 800366c:	200000fc 	.word	0x200000fc
 8003670:	20000100 	.word	0x20000100
 8003674:	00000000 	.word	0x00000000
 8003678:	2000010c 	.word	0x2000010c
 800367c:	08016ed0 	.word	0x08016ed0
 8003680:	08016ef4 	.word	0x08016ef4
 8003684:	200003c4 	.word	0x200003c4
	else if (GPIO_Pin == Spindle_M3_Prox_Interrupt_Pin)
 8003688:	88fb      	ldrh	r3, [r7, #6]
 800368a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368e:	d129      	bne.n	80036e4 <HAL_GPIO_EXTI_Callback+0x34c>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003690:	4a5b      	ldr	r2, [pc, #364]	@ (8003800 <HAL_GPIO_EXTI_Callback+0x468>)
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) == 1) {
 8003696:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800369a:	485a      	ldr	r0, [pc, #360]	@ (8003804 <HAL_GPIO_EXTI_Callback+0x46c>)
 800369c:	f006 fc98 	bl	8009fd0 <HAL_GPIO_ReadPin>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d111      	bne.n	80036ca <HAL_GPIO_EXTI_Callback+0x332>
			Spindle_M3_EncA_Pulses=0;
 80036a6:	4b58      	ldr	r3, [pc, #352]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]
			Spindle_M3_EncB_Pulses=0;
 80036ac:	4b57      	ldr	r3, [pc, #348]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
			pwm(Spindle_M3_PWM, 0);
 80036b2:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8003810 <HAL_GPIO_EXTI_Callback+0x478>
 80036b6:	2002      	movs	r0, #2
 80036b8:	f003 fd86 	bl	80071c8 <pwm>
			isSpindleLimitSwitchReached = TRUE;
 80036bc:	4b55      	ldr	r3, [pc, #340]	@ (8003814 <HAL_GPIO_EXTI_Callback+0x47c>)
 80036be:	2201      	movs	r2, #1
 80036c0:	701a      	strb	r2, [r3, #0]
			SerialPrint("Spindle Interrupt M3 Limit rising\n");
 80036c2:	4855      	ldr	r0, [pc, #340]	@ (8003818 <HAL_GPIO_EXTI_Callback+0x480>)
 80036c4:	f001 fe6a 	bl	800539c <SerialPrint>
}
 80036c8:	e095      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			Spindle_M3_EncA_Pulses = 1;
 80036ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
			Spindle_M3_EncB_Pulses = 1;
 80036d0:	4b4e      	ldr	r3, [pc, #312]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	601a      	str	r2, [r3, #0]
			isSpindleLimitSwitchReached = FALSE;
 80036d6:	4b4f      	ldr	r3, [pc, #316]	@ (8003814 <HAL_GPIO_EXTI_Callback+0x47c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
			SerialPrint("Spindle Interrupt M3 Limit falling\n");
 80036dc:	484f      	ldr	r0, [pc, #316]	@ (800381c <HAL_GPIO_EXTI_Callback+0x484>)
 80036de:	f001 fe5d 	bl	800539c <SerialPrint>
}
 80036e2:	e088      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == Spindle_M3_EncA_Interrupt_Pin)
 80036e4:	88fb      	ldrh	r3, [r7, #6]
 80036e6:	2b40      	cmp	r3, #64	@ 0x40
 80036e8:	d11e      	bne.n	8003728 <HAL_GPIO_EXTI_Callback+0x390>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ea:	4a45      	ldr	r2, [pc, #276]	@ (8003800 <HAL_GPIO_EXTI_Callback+0x468>)
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	6153      	str	r3, [r2, #20]
		if(!isSpindleLimitSwitchReached){
 80036f0:	4b48      	ldr	r3, [pc, #288]	@ (8003814 <HAL_GPIO_EXTI_Callback+0x47c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d17e      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			if(SpindleMotorState == CW){
 80036f8:	4b49      	ldr	r3, [pc, #292]	@ (8003820 <HAL_GPIO_EXTI_Callback+0x488>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_GPIO_EXTI_Callback+0x374>
				Spindle_M3_EncA_Pulses++;
 8003700:	4b41      	ldr	r3, [pc, #260]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	4a40      	ldr	r2, [pc, #256]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 8003708:	6013      	str	r3, [r2, #0]
}
 800370a:	e074      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			else if(SpindleMotorState == CCW && Spindle_M3_EncA_Pulses > 1){
 800370c:	4b44      	ldr	r3, [pc, #272]	@ (8003820 <HAL_GPIO_EXTI_Callback+0x488>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d170      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 8003714:	4b3c      	ldr	r3, [pc, #240]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	dd6c      	ble.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				Spindle_M3_EncA_Pulses--;
 800371c:	4b3a      	ldr	r3, [pc, #232]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	4a39      	ldr	r2, [pc, #228]	@ (8003808 <HAL_GPIO_EXTI_Callback+0x470>)
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	e066      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == Spindle_M3_EncB_Interrupt_Pin)
 8003728:	88fb      	ldrh	r3, [r7, #6]
 800372a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372e:	d11e      	bne.n	800376e <HAL_GPIO_EXTI_Callback+0x3d6>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003730:	4a33      	ldr	r2, [pc, #204]	@ (8003800 <HAL_GPIO_EXTI_Callback+0x468>)
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	6153      	str	r3, [r2, #20]
		if(!isSpindleLimitSwitchReached){
 8003736:	4b37      	ldr	r3, [pc, #220]	@ (8003814 <HAL_GPIO_EXTI_Callback+0x47c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d15b      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			if(SpindleMotorState == CW){
 800373e:	4b38      	ldr	r3, [pc, #224]	@ (8003820 <HAL_GPIO_EXTI_Callback+0x488>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <HAL_GPIO_EXTI_Callback+0x3ba>
				Spindle_M3_EncB_Pulses++;
 8003746:	4b31      	ldr	r3, [pc, #196]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3301      	adds	r3, #1
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	e051      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			else if(SpindleMotorState == CCW && Spindle_M3_EncB_Pulses > 1){
 8003752:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_GPIO_EXTI_Callback+0x488>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d14d      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 800375a:	4b2c      	ldr	r3, [pc, #176]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b01      	cmp	r3, #1
 8003760:	dd49      	ble.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				Spindle_M3_EncB_Pulses--;
 8003762:	4b2a      	ldr	r3, [pc, #168]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3b01      	subs	r3, #1
 8003768:	4a28      	ldr	r2, [pc, #160]	@ (800380c <HAL_GPIO_EXTI_Callback+0x474>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	e043      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == ServoDC_M1_Prox_Interrupt_Pin)
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003774:	d11d      	bne.n	80037b2 <HAL_GPIO_EXTI_Callback+0x41a>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003776:	4a22      	ldr	r2, [pc, #136]	@ (8003800 <HAL_GPIO_EXTI_Callback+0x468>)
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	6153      	str	r3, [r2, #20]
		if (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) == 1) {
 800377c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003780:	4820      	ldr	r0, [pc, #128]	@ (8003804 <HAL_GPIO_EXTI_Callback+0x46c>)
 8003782:	f006 fc25 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003786:	4603      	mov	r3, r0
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10b      	bne.n	80037a4 <HAL_GPIO_EXTI_Callback+0x40c>
			isServoLimitSwitchReached = TRUE;
 800378c:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <HAL_GPIO_EXTI_Callback+0x48c>)
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
			SerialPrint("Interrupt Servo/DC Limit rising\n");
 8003792:	4825      	ldr	r0, [pc, #148]	@ (8003828 <HAL_GPIO_EXTI_Callback+0x490>)
 8003794:	f001 fe02 	bl	800539c <SerialPrint>
			pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt,0);
 8003798:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8003810 <HAL_GPIO_EXTI_Callback+0x478>
 800379c:	2005      	movs	r0, #5
 800379e:	f003 fd13 	bl	80071c8 <pwm>
}
 80037a2:	e028      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			isServoLimitSwitchReached = FALSE;
 80037a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003824 <HAL_GPIO_EXTI_Callback+0x48c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
			SerialPrint("Interrupt Servo/DC Limit falling\n");
 80037aa:	4820      	ldr	r0, [pc, #128]	@ (800382c <HAL_GPIO_EXTI_Callback+0x494>)
 80037ac:	f001 fdf6 	bl	800539c <SerialPrint>
}
 80037b0:	e021      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
	else if (GPIO_Pin == ServoDC_M1_EncB_Interrupt_Pin)
 80037b2:	88fb      	ldrh	r3, [r7, #6]
 80037b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037b8:	d11d      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037ba:	4a11      	ldr	r2, [pc, #68]	@ (8003800 <HAL_GPIO_EXTI_Callback+0x468>)
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	6153      	str	r3, [r2, #20]
			if(!isServoLimitSwitchReached){
 80037c0:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <HAL_GPIO_EXTI_Callback+0x48c>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				if(ServoDCMotorState == CW){
 80037c8:	4b19      	ldr	r3, [pc, #100]	@ (8003830 <HAL_GPIO_EXTI_Callback+0x498>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <HAL_GPIO_EXTI_Callback+0x444>
					ServoDC_M1_EncB_Pulses++;
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_GPIO_EXTI_Callback+0x49c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a17      	ldr	r2, [pc, #92]	@ (8003834 <HAL_GPIO_EXTI_Callback+0x49c>)
 80037d8:	6013      	str	r3, [r2, #0]
}
 80037da:	e00c      	b.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
				else if(ServoDCMotorState == CCW && ServoDC_M1_EncB_Pulses > 1){
 80037dc:	4b14      	ldr	r3, [pc, #80]	@ (8003830 <HAL_GPIO_EXTI_Callback+0x498>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d108      	bne.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
 80037e4:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <HAL_GPIO_EXTI_Callback+0x49c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	dd04      	ble.n	80037f6 <HAL_GPIO_EXTI_Callback+0x45e>
					ServoDC_M1_EncB_Pulses--;
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_GPIO_EXTI_Callback+0x49c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	4a10      	ldr	r2, [pc, #64]	@ (8003834 <HAL_GPIO_EXTI_Callback+0x49c>)
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40013c00 	.word	0x40013c00
 8003804:	40020000 	.word	0x40020000
 8003808:	20000104 	.word	0x20000104
 800380c:	20000108 	.word	0x20000108
 8003810:	00000000 	.word	0x00000000
 8003814:	2000010d 	.word	0x2000010d
 8003818:	08016f18 	.word	0x08016f18
 800381c:	08016f3c 	.word	0x08016f3c
 8003820:	200003c8 	.word	0x200003c8
 8003824:	2000010e 	.word	0x2000010e
 8003828:	08016f60 	.word	0x08016f60
 800382c:	08016f84 	.word	0x08016f84
 8003830:	200003cc 	.word	0x200003cc
 8003834:	200000f8 	.word	0x200000f8

08003838 <Blink>:
/**
 * @brief  PowerButton Interrupt Check Callback Function when Triggered for using interrupts.
 * @param  None
 * @retval None
*/
void Blink() { // If the power button is not held, we can check for loadcell reading!
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Button_Power_Interrupt_PullUp_GPIO_Port, Button_Power_Interrupt_PullUp_Pin) == GPIO_PIN_RESET) {
 800383e:	2110      	movs	r1, #16
 8003840:	484c      	ldr	r0, [pc, #304]	@ (8003974 <Blink+0x13c>)
 8003842:	f006 fbc5 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d12d      	bne.n	80038a8 <Blink+0x70>
	        // Button is being held
	        uint32_t holdTime = HAL_GetTick() - PowerButtonPressTime;
 800384c:	f004 ff48 	bl	80086e0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	4b49      	ldr	r3, [pc, #292]	@ (8003978 <Blink+0x140>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	607b      	str	r3, [r7, #4]

	        if (!actionTaken) {
 800385a:	4b48      	ldr	r3, [pc, #288]	@ (800397c <Blink+0x144>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d121      	bne.n	80038a8 <Blink+0x70>
	            if (!isMachineOn && holdTime >= BUTTON_HOLD_TIME_ON) {
 8003864:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <Blink+0x148>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10d      	bne.n	8003888 <Blink+0x50>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003872:	d309      	bcc.n	8003888 <Blink+0x50>
	                // Turn ON the system if held for 2 seconds
	            	isMachineOn = 1; // Set system state to ON
 8003874:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <Blink+0x148>)
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
	            	SerialPrintln("MACHINE ON");
 800387a:	4842      	ldr	r0, [pc, #264]	@ (8003984 <Blink+0x14c>)
 800387c:	f001 fda4 	bl	80053c8 <SerialPrintln>
	                actionTaken = 1; // Prevent repeated toggling
 8003880:	4b3e      	ldr	r3, [pc, #248]	@ (800397c <Blink+0x144>)
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e00f      	b.n	80038a8 <Blink+0x70>
	            } else if (isMachineOn && holdTime >= BUTTON_HOLD_TIME_OFF) {
 8003888:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <Blink+0x148>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00b      	beq.n	80038a8 <Blink+0x70>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003896:	d307      	bcc.n	80038a8 <Blink+0x70>
	                // Turn OFF the system if held for 500 ms
	            	isMachineOn = 0; // Set system state to ON
 8003898:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <Blink+0x148>)
 800389a:	2200      	movs	r2, #0
 800389c:	701a      	strb	r2, [r3, #0]
	            	SerialPrintln("MACHINE OFF");
 800389e:	483a      	ldr	r0, [pc, #232]	@ (8003988 <Blink+0x150>)
 80038a0:	f001 fd92 	bl	80053c8 <SerialPrintln>
	            	NVIC_SystemReset();  /// Reset the STM32 when turning off
 80038a4:	f7ff fd62 	bl	800336c <__NVIC_SystemReset>
	                actionTaken = 1; // Prevent repeated toggling
	            }
	        }
	    }

	if (isPowerLEDBlinking == TRUE) { /// If LED supposed to blink
 80038a8:	4b38      	ldr	r3, [pc, #224]	@ (800398c <Blink+0x154>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d109      	bne.n	80038c4 <Blink+0x8c>
		powerLEDControl(!isPowerLEDOn);
 80038b0:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <Blink+0x158>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 fa3c 	bl	8004d3c <powerLEDControl>
	}
	if (isScreenLoading == TRUE) {
 80038c4:	4b33      	ldr	r3, [pc, #204]	@ (8003994 <Blink+0x15c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d11f      	bne.n	800390c <Blink+0xd4>
		size_t len = strlen(DotString);
 80038cc:	4832      	ldr	r0, [pc, #200]	@ (8003998 <Blink+0x160>)
 80038ce:	f7fc fcdf 	bl	8000290 <strlen>
 80038d2:	6038      	str	r0, [r7, #0]
		if (len < LCD_COLUMN_COUNT) {
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b13      	cmp	r3, #19
 80038d8:	d80a      	bhi.n	80038f0 <Blink+0xb8>
			DotString[len] = '.';
 80038da:	4a2f      	ldr	r2, [pc, #188]	@ (8003998 <Blink+0x160>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4413      	add	r3, r2
 80038e0:	222e      	movs	r2, #46	@ 0x2e
 80038e2:	701a      	strb	r2, [r3, #0]
			DotString[len + 1] = '\0'; // Ensure string is null-terminated
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	3301      	adds	r3, #1
 80038e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003998 <Blink+0x160>)
 80038ea:	2100      	movs	r1, #0
 80038ec:	54d1      	strb	r1, [r2, r3]
 80038ee:	e008      	b.n	8003902 <Blink+0xca>
		} else {
			memset(DotString, 0, strlen(DotString));
 80038f0:	4829      	ldr	r0, [pc, #164]	@ (8003998 <Blink+0x160>)
 80038f2:	f7fc fccd 	bl	8000290 <strlen>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	2100      	movs	r1, #0
 80038fc:	4826      	ldr	r0, [pc, #152]	@ (8003998 <Blink+0x160>)
 80038fe:	f00f fea2 	bl	8013646 <memset>
		}
		printLCD(0, DotString, NO_SYMBOL);
 8003902:	2200      	movs	r2, #0
 8003904:	4924      	ldr	r1, [pc, #144]	@ (8003998 <Blink+0x160>)
 8003906:	2000      	movs	r0, #0
 8003908:	f001 f98a 	bl	8004c20 <printLCD>
	}
	static uint8_t skipRead = FALSE;
	static long delTimer = 0;
	static uint8_t dellaststate = FALSE;
	if (skipRead == TRUE) {
 800390c:	4b23      	ldr	r3, [pc, #140]	@ (800399c <Blink+0x164>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d103      	bne.n	800391c <Blink+0xe4>
		skipRead = FALSE;
 8003914:	4b21      	ldr	r3, [pc, #132]	@ (800399c <Blink+0x164>)
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
	}
	else{
		dellaststate = FALSE;
	}

}
 800391a:	e027      	b.n	800396c <Blink+0x134>
	else if(digitalRead(Button_DelBack_Input_PullUp) == LOW){
 800391c:	2002      	movs	r0, #2
 800391e:	f7ff fa25 	bl	8002d6c <digitalRead>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11e      	bne.n	8003966 <Blink+0x12e>
		if(dellaststate == FALSE){
 8003928:	4b1d      	ldr	r3, [pc, #116]	@ (80039a0 <Blink+0x168>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <Blink+0x10c>
			dellaststate = TRUE;
 8003930:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <Blink+0x168>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
			delTimer = HAL_GetTick();
 8003936:	f004 fed3 	bl	80086e0 <HAL_GetTick>
 800393a:	4603      	mov	r3, r0
 800393c:	461a      	mov	r2, r3
 800393e:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <Blink+0x16c>)
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	e013      	b.n	800396c <Blink+0x134>
		else if(HAL_GetTick() > delTimer + 900){
 8003944:	f004 fecc 	bl	80086e0 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <Blink+0x16c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8003952:	429a      	cmp	r2, r3
 8003954:	d90a      	bls.n	800396c <Blink+0x134>
			if(delLongPressed == FALSE){
 8003956:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <Blink+0x170>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <Blink+0x134>
				delLongPressed = TRUE;
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <Blink+0x170>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
}
 8003964:	e002      	b.n	800396c <Blink+0x134>
		dellaststate = FALSE;
 8003966:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <Blink+0x168>)
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40020000 	.word	0x40020000
 8003978:	200003ec 	.word	0x200003ec
 800397c:	200003c0 	.word	0x200003c0
 8003980:	20000358 	.word	0x20000358
 8003984:	08016fa8 	.word	0x08016fa8
 8003988:	08016fb4 	.word	0x08016fb4
 800398c:	2000049c 	.word	0x2000049c
 8003990:	2000049d 	.word	0x2000049d
 8003994:	2000049e 	.word	0x2000049e
 8003998:	200004a0 	.word	0x200004a0
 800399c:	200003e6 	.word	0x200003e6
 80039a0:	200003e7 	.word	0x200003e7
 80039a4:	200003e8 	.word	0x200003e8
 80039a8:	200003f6 	.word	0x200003f6

080039ac <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  Timer Callback Function when Triggered for using interrupts.
 * @param  TIM_HandleTypeDef: Timer handler type.
 * @retval None
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ /// Timer 2 Interrupt, called every 500mS
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039bc:	d101      	bne.n	80039c2 <HAL_TIM_PeriodElapsedCallback+0x16>
	 Blink();
 80039be:	f7ff ff3b 	bl	8003838 <Blink>
			SerialPrint("CLEANING PROCESS STARTED\n");
			CleaningButtonStillHeld = FALSE; // Prevent repeated toggling while held
		}
*/
	}
	if (htim->Instance == TIM6) {		        // Increment time counters
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a8f      	ldr	r2, [pc, #572]	@ (8003c04 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d11f      	bne.n	8003a0c <HAL_TIM_PeriodElapsedCallback+0x60>
		seconds++;
 80039cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003c08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	4a8d      	ldr	r2, [pc, #564]	@ (8003c08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80039d4:	6013      	str	r3, [r2, #0]
		if (seconds >= 30) {
 80039d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003c08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b1d      	cmp	r3, #29
 80039dc:	d913      	bls.n	8003a06 <HAL_TIM_PeriodElapsedCallback+0x5a>
			seconds = 0;
 80039de:	4b8a      	ldr	r3, [pc, #552]	@ (8003c08 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
			minutes++;
 80039e4:	4b89      	ldr	r3, [pc, #548]	@ (8003c0c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3301      	adds	r3, #1
 80039ea:	4a88      	ldr	r2, [pc, #544]	@ (8003c0c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80039ec:	6013      	str	r3, [r2, #0]
			// Update the time to the SD card
			//UpdateTimeToSDCard(hours, minutes, seconds);
			if (minutes >= 60) {
 80039ee:	4b87      	ldr	r3, [pc, #540]	@ (8003c0c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b3b      	cmp	r3, #59	@ 0x3b
 80039f4:	d907      	bls.n	8003a06 <HAL_TIM_PeriodElapsedCallback+0x5a>
				minutes = 0;
 80039f6:	4b85      	ldr	r3, [pc, #532]	@ (8003c0c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
				hours++;
 80039fc:	4b84      	ldr	r3, [pc, #528]	@ (8003c10 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a83      	ldr	r2, [pc, #524]	@ (8003c10 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003a04:	6013      	str	r3, [r2, #0]
				/*if (hours >= 24) {
					hours = 0; // Reset after 24 hours
				}*/
			}
		}
		log_to_sd_flag = 1;
 8003a06:	4b83      	ldr	r3, [pc, #524]	@ (8003c14 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
 }
	if (htim->Instance == TIM7){/// Timer 7 Interrupt, called every 100mS
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a81      	ldr	r2, [pc, #516]	@ (8003c18 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	f040 8088 	bne.w	8003b28 <HAL_TIM_PeriodElapsedCallback+0x17c>
		// Your code to execute every 100 ms
		Tareweight = Total_Weight;
 8003a18:	4b80      	ldr	r3, [pc, #512]	@ (8003c1c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a80      	ldr	r2, [pc, #512]	@ (8003c20 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003a1e:	6013      	str	r3, [r2, #0]
		if (CleaningOperationFlag == TRUE) {
 8003a20:	4b80      	ldr	r3, [pc, #512]	@ (8003c24 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d11e      	bne.n	8003a66 <HAL_TIM_PeriodElapsedCallback+0xba>
			//Cleaning exit logic
			if (readKeypadNonBlock(ALL) == ENTERKEY) {
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f000 fadf 	bl	8003fec <readKeypadNonBlock>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b0b      	cmp	r3, #11
 8003a32:	d118      	bne.n	8003a66 <HAL_TIM_PeriodElapsedCallback+0xba>
				CleaningExitCounter = CleaningExitCounter + 1;
 8003a34:	4b7c      	ldr	r3, [pc, #496]	@ (8003c28 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	4b7a      	ldr	r3, [pc, #488]	@ (8003c28 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003a3e:	701a      	strb	r2, [r3, #0]
				if (CleaningExitCounter > 10) //3 Seconds Read button
 8003a40:	4b79      	ldr	r3, [pc, #484]	@ (8003c28 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d90e      	bls.n	8003a66 <HAL_TIM_PeriodElapsedCallback+0xba>
				{
					CleaningExit = TRUE;
 8003a48:	4b78      	ldr	r3, [pc, #480]	@ (8003c2c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
					CleaningCancelFlag = TRUE;
 8003a4e:	4b78      	ldr	r3, [pc, #480]	@ (8003c30 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
                    SerialPrintln("reached 10 times");
 8003a54:	4877      	ldr	r0, [pc, #476]	@ (8003c34 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8003a56:	f001 fcb7 	bl	80053c8 <SerialPrintln>
#endif
					CleaningExitCounter = 0;
 8003a5a:	4b73      	ldr	r3, [pc, #460]	@ (8003c28 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
					CleaningExit = FALSE;
 8003a60:	4b72      	ldr	r3, [pc, #456]	@ (8003c2c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
			  {
				   UserCleaningCycleNumber = cleancyclepressed;
			  }
			  */
		}
		if(adc_pressure > 100)
 8003a66:	4b74      	ldr	r3, [pc, #464]	@ (8003c38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d904      	bls.n	8003a78 <HAL_TIM_PeriodElapsedCallback+0xcc>
		{
			moveMotor(VALVEMOTOR, OFF, INT_INF); //Valve OFF
 8003a6e:	4a73      	ldr	r2, [pc, #460]	@ (8003c3c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003a70:	2100      	movs	r1, #0
 8003a72:	2003      	movs	r0, #3
 8003a74:	f7ff fb32 	bl	80030dc <moveMotor>
		}


#if DEBUG == 1
		 SerialPrintINT(Total_Weight);
 8003a78:	4b68      	ldr	r3, [pc, #416]	@ (8003c1c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fcd9 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003a82:	486f      	ldr	r0, [pc, #444]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a84:	f001 fc8a 	bl	800539c <SerialPrint>
		 SerialPrintINT(Clamp_M2_EncA_Pulses);
 8003a88:	4b6e      	ldr	r3, [pc, #440]	@ (8003c44 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f001 fcd1 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003a92:	486b      	ldr	r0, [pc, #428]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a94:	f001 fc82 	bl	800539c <SerialPrint>
		 SerialPrintINT(Spindle_M3_EncA_Pulses);
 8003a98:	4b6b      	ldr	r3, [pc, #428]	@ (8003c48 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fcc9 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003aa2:	4867      	ldr	r0, [pc, #412]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003aa4:	f001 fc7a 	bl	800539c <SerialPrint>
		 SerialPrintINT(percent);
 8003aa8:	4b68      	ldr	r3, [pc, #416]	@ (8003c4c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 fcc1 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003ab2:	4863      	ldr	r0, [pc, #396]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003ab4:	f001 fc72 	bl	800539c <SerialPrint>
		 SerialPrintINT(adc_pressure);
 8003ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8003c38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fcb9 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003ac2:	485f      	ldr	r0, [pc, #380]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003ac4:	f001 fc6a 	bl	800539c <SerialPrint>
		 SerialPrintINT(adc_CurrentSpindle);
 8003ac8:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 fcb0 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003ad4:	485a      	ldr	r0, [pc, #360]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003ad6:	f001 fc61 	bl	800539c <SerialPrint>
		 SerialPrintINT(adc_CurrentServo);
 8003ada:	4b5e      	ldr	r3, [pc, #376]	@ (8003c54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 fca7 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003ae6:	4856      	ldr	r0, [pc, #344]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003ae8:	f001 fc58 	bl	800539c <SerialPrint>
		 SerialPrintINT(adc_CurrentClamp);
 8003aec:	4b5a      	ldr	r3, [pc, #360]	@ (8003c58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f001 fc9e 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003af8:	4851      	ldr	r0, [pc, #324]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003afa:	f001 fc4f 	bl	800539c <SerialPrint>
		 SerialPrintINT(Weight_Initial);
 8003afe:	4b57      	ldr	r3, [pc, #348]	@ (8003c5c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fc96 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003b08:	484d      	ldr	r0, [pc, #308]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003b0a:	f001 fc47 	bl	800539c <SerialPrint>
		 SerialPrintINT(Target_Weight);
 8003b0e:	4b54      	ldr	r3, [pc, #336]	@ (8003c60 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 fc8e 	bl	8005434 <SerialPrintINT>
		 SerialPrint(",");
 8003b18:	4849      	ldr	r0, [pc, #292]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003b1a:	f001 fc3f 	bl	800539c <SerialPrint>
		 SerialPrintlnINT(FreshValveStatus);
 8003b1e:	4b51      	ldr	r3, [pc, #324]	@ (8003c64 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f001 fc70 	bl	8005408 <SerialPrintlnINT>


#endif
	 }

	if(htim->Instance == TIM10){ /// Timer 10 Interrupt, called every 1000mS - 1 Second
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8003c68 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d164      	bne.n	8003bfc <HAL_TIM_PeriodElapsedCallback+0x250>
		 count1++;
 8003b32:	4b4e      	ldr	r3, [pc, #312]	@ (8003c6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3301      	adds	r3, #1
 8003b38:	4a4c      	ldr	r2, [pc, #304]	@ (8003c6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003b3a:	6013      	str	r3, [r2, #0]
		 adc_pressure  = pressureSensorReading();
 8003b3c:	f7fd fb1c 	bl	8001178 <pressureSensorReading>
 8003b40:	eef0 7a40 	vmov.f32	s15, s0
 8003b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b48:	ee17 3a90 	vmov	r3, s15
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003b50:	801a      	strh	r2, [r3, #0]
		 int temp_c1 =  analogRead(Curr_Sensor_Spindle_M3);
 8003b52:	2002      	movs	r0, #2
 8003b54:	f7fd fa56 	bl	8001004 <analogRead>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	617b      	str	r3, [r7, #20]
		 if(temp_c1 > temp_c11)
 8003b5c:	4b44      	ldr	r3, [pc, #272]	@ (8003c70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	dd02      	ble.n	8003b6c <HAL_TIM_PeriodElapsedCallback+0x1c0>
		 {
			 temp_c11 = temp_c1;
 8003b66:	4a42      	ldr	r2, [pc, #264]	@ (8003c70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6013      	str	r3, [r2, #0]
		 }

		 int  temp_c2 =  analogRead(Curr_Sensor_ServoDC_M1);
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f7fd fa49 	bl	8001004 <analogRead>
 8003b72:	4603      	mov	r3, r0
 8003b74:	613b      	str	r3, [r7, #16]
		 if(temp_c2 > temp_c22)
 8003b76:	4b3f      	ldr	r3, [pc, #252]	@ (8003c74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	dd02      	ble.n	8003b86 <HAL_TIM_PeriodElapsedCallback+0x1da>
		 {
			 temp_c22 = temp_c2;
 8003b80:	4a3c      	ldr	r2, [pc, #240]	@ (8003c74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	6013      	str	r3, [r2, #0]
		 }
		 int temp_c3 =  analogRead(Curr_Sensor_Clamp_M2);
 8003b86:	2001      	movs	r0, #1
 8003b88:	f7fd fa3c 	bl	8001004 <analogRead>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]
		 if(temp_c3 > temp_c33)
 8003b90:	4b39      	ldr	r3, [pc, #228]	@ (8003c78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	dd02      	ble.n	8003ba0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
		 {
			 temp_c33 = temp_c3;
 8003b9a:	4a37      	ldr	r2, [pc, #220]	@ (8003c78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6013      	str	r3, [r2, #0]
		 }
		if(count1 == 10){
 8003ba0:	4b32      	ldr	r3, [pc, #200]	@ (8003c6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b0a      	cmp	r3, #10
 8003ba6:	d129      	bne.n	8003bfc <HAL_TIM_PeriodElapsedCallback+0x250>
			 adc_CurrentSpindle = Convert_ADC_To_Current(temp_c11);
 8003ba8:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fd fb22 	bl	80011f8 <Convert_ADC_To_Current>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	b21a      	sxth	r2, r3
 8003bb8:	4b25      	ldr	r3, [pc, #148]	@ (8003c50 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003bba:	801a      	strh	r2, [r3, #0]
			 adc_CurrentClamp =  Convert_ADC_To_Current(temp_c33);
 8003bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003c78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd fb18 	bl	80011f8 <Convert_ADC_To_Current>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	b21a      	sxth	r2, r3
 8003bcc:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003bce:	801a      	strh	r2, [r3, #0]
			 adc_CurrentServo =  Convert_ADC_To_Current(temp_c22);
 8003bd0:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fb0e 	bl	80011f8 <Convert_ADC_To_Current>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003be2:	801a      	strh	r2, [r3, #0]
			 temp_c11 = temp_c1 , temp_c22 =temp_c2, temp_c33 = temp_c3;
 8003be4:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4a22      	ldr	r2, [pc, #136]	@ (8003c74 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4a21      	ldr	r2, [pc, #132]	@ (8003c78 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6013      	str	r3, [r2, #0]
			 count1 = 0;
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
		  }
	}
}
 8003bfc:	bf00      	nop
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40001000 	.word	0x40001000
 8003c08:	200003a4 	.word	0x200003a4
 8003c0c:	200003a8 	.word	0x200003a8
 8003c10:	200003ac 	.word	0x200003ac
 8003c14:	200003a2 	.word	0x200003a2
 8003c18:	40001400 	.word	0x40001400
 8003c1c:	2000035c 	.word	0x2000035c
 8003c20:	20000364 	.word	0x20000364
 8003c24:	2000038b 	.word	0x2000038b
 8003c28:	2000038d 	.word	0x2000038d
 8003c2c:	2000038c 	.word	0x2000038c
 8003c30:	200000f1 	.word	0x200000f1
 8003c34:	08016fc0 	.word	0x08016fc0
 8003c38:	200003b8 	.word	0x200003b8
 8003c3c:	0098967f 	.word	0x0098967f
 8003c40:	08016fd4 	.word	0x08016fd4
 8003c44:	200000fc 	.word	0x200000fc
 8003c48:	20000104 	.word	0x20000104
 8003c4c:	200027e0 	.word	0x200027e0
 8003c50:	200003ba 	.word	0x200003ba
 8003c54:	200003bc 	.word	0x200003bc
 8003c58:	200003be 	.word	0x200003be
 8003c5c:	20000360 	.word	0x20000360
 8003c60:	20000368 	.word	0x20000368
 8003c64:	2000038e 	.word	0x2000038e
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	200003d0 	.word	0x200003d0
 8003c70:	200003d4 	.word	0x200003d4
 8003c74:	200003d8 	.word	0x200003d8
 8003c78:	200003dc 	.word	0x200003dc

08003c7c <InitializeMachine>:
#include <Initialize.h>

extern const char valuetosend;
void InitializeMachine2(void);

void InitializeMachine() {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
	InitComp = FALSE;
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <InitializeMachine+0x34>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
	LCD_Init();
 8003c86:	f000 fde1 	bl	800484c <LCD_Init>
		do{
			//UpdateTimeToSDCard( hours,  minutes,  seconds);
			InitializeMachine2();
 8003c8a:	f000 f85d 	bl	8003d48 <InitializeMachine2>
			HAL_Delay(1000);
 8003c8e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c92:	f004 fd31 	bl	80086f8 <HAL_Delay>
		}while(isClampLimitSwitchReached == FALSE || isSpindleLimitSwitchReached == FALSE);
 8003c96:	4b07      	ldr	r3, [pc, #28]	@ (8003cb4 <InitializeMachine+0x38>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f5      	beq.n	8003c8a <InitializeMachine+0xe>
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <InitializeMachine+0x3c>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f1      	beq.n	8003c8a <InitializeMachine+0xe>

		InitComp = TRUE;
 8003ca6:	4b02      	ldr	r3, [pc, #8]	@ (8003cb0 <InitializeMachine+0x34>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200003b0 	.word	0x200003b0
 8003cb4:	2000010c 	.word	0x2000010c
 8003cb8:	2000010d 	.word	0x2000010d

08003cbc <CTS_Home_position>:


void CTS_Home_position(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
	 while(HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) != 1)
 8003cc0:	e008      	b.n	8003cd4 <CTS_Home_position+0x18>
	  {
		   digitalWrite(Spindle_M3_Dir_Output, HIGH); //LOW
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	2004      	movs	r0, #4
 8003cc6:	f7ff f873 	bl	8002db0 <digitalWrite>
		   pwm(Spindle_M3_PWM, 90);
 8003cca:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8003d34 <CTS_Home_position+0x78>
 8003cce:	2002      	movs	r0, #2
 8003cd0:	f003 fa7a 	bl	80071c8 <pwm>
	 while(HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) != 1)
 8003cd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003cd8:	4817      	ldr	r0, [pc, #92]	@ (8003d38 <CTS_Home_position+0x7c>)
 8003cda:	f006 f979 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d1ee      	bne.n	8003cc2 <CTS_Home_position+0x6>
	  }
	 digitalWrite(Spindle_M3_Dir_Output, LOW); //HIGH
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2004      	movs	r0, #4
 8003ce8:	f7ff f862 	bl	8002db0 <digitalWrite>
	 pwm(Spindle_M3_PWM, 0);
 8003cec:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003d3c <CTS_Home_position+0x80>
 8003cf0:	2002      	movs	r0, #2
 8003cf2:	f003 fa69 	bl	80071c8 <pwm>
		while(HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) != 1)
 8003cf6:	e008      	b.n	8003d0a <CTS_Home_position+0x4e>
		{
		   digitalWrite(Clamp_M2_Dir_Output, LOW);
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	2005      	movs	r0, #5
 8003cfc:	f7ff f858 	bl	8002db0 <digitalWrite>
		   pwm(Clamp_M2_PWM,50);
 8003d00:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8003d40 <CTS_Home_position+0x84>
 8003d04:	2001      	movs	r0, #1
 8003d06:	f003 fa5f 	bl	80071c8 <pwm>
		while(HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) != 1)
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	480d      	ldr	r0, [pc, #52]	@ (8003d44 <CTS_Home_position+0x88>)
 8003d0e:	f006 f95f 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d1ef      	bne.n	8003cf8 <CTS_Home_position+0x3c>
		}
		digitalWrite(Clamp_M2_Dir_Output, HIGH);
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2005      	movs	r0, #5
 8003d1c:	f7ff f848 	bl	8002db0 <digitalWrite>
		pwm(Clamp_M2_PWM, 0);
 8003d20:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8003d3c <CTS_Home_position+0x80>
 8003d24:	2001      	movs	r0, #1
 8003d26:	f003 fa4f 	bl	80071c8 <pwm>

		Servo_Home_Position();
 8003d2a:	f001 fc5f 	bl	80055ec <Servo_Home_Position>
		//HAL_Delay(2000);// this is delaying the system
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	42b40000 	.word	0x42b40000
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	00000000 	.word	0x00000000
 8003d40:	42480000 	.word	0x42480000
 8003d44:	40020800 	.word	0x40020800

08003d48 <InitializeMachine2>:

void InitializeMachine2(void) {//Close valves, Drive down the Probe, Open clamps, tare load cells
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
    // Print beginning initialization message
#if DEBUG == 1
    SerialPrintln("Begin Initialize");
 8003d4c:	4843      	ldr	r0, [pc, #268]	@ (8003e5c <InitializeMachine2+0x114>)
 8003d4e:	f001 fb3b 	bl	80053c8 <SerialPrintln>
#endif
    HAL_Delay(500);
 8003d52:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d56:	f004 fccf 	bl	80086f8 <HAL_Delay>
    Clamp_M2_EncA_Pulses = 1;
 8003d5a:	4b41      	ldr	r3, [pc, #260]	@ (8003e60 <InitializeMachine2+0x118>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    Clamp_M2_EncB_Pulses = 1;
 8003d60:	4b40      	ldr	r3, [pc, #256]	@ (8003e64 <InitializeMachine2+0x11c>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	601a      	str	r2, [r3, #0]
    Spindle_M3_EncA_Pulses = 1;
 8003d66:	4b40      	ldr	r3, [pc, #256]	@ (8003e68 <InitializeMachine2+0x120>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
    Spindle_M3_EncB_Pulses = 1;
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e6c <InitializeMachine2+0x124>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    // Make sure valve is closed
    moveMotor(VALVEMOTOR, OFF, INT_INF); // Assuming 0 is a valid target point for VALVEMOTOR
 8003d72:	4a3f      	ldr	r2, [pc, #252]	@ (8003e70 <InitializeMachine2+0x128>)
 8003d74:	2100      	movs	r1, #0
 8003d76:	2003      	movs	r0, #3
 8003d78:	f7ff f9b0 	bl	80030dc <moveMotor>

    moveMotor(VALVEMOTOR, OFF, INT_INF);
 8003d7c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e70 <InitializeMachine2+0x128>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	2003      	movs	r0, #3
 8003d82:	f7ff f9ab 	bl	80030dc <moveMotor>
#if DEBUG == 1
    SerialPrintln("Read limits");
 8003d86:	483b      	ldr	r0, [pc, #236]	@ (8003e74 <InitializeMachine2+0x12c>)
 8003d88:	f001 fb1e 	bl	80053c8 <SerialPrintln>
#endif
    if (HAL_GPIO_ReadPin(Clamp_M2_Prox_Interrupt_GPIO_Port, Clamp_M2_Prox_Interrupt_Pin) == 1) {
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	483a      	ldr	r0, [pc, #232]	@ (8003e78 <InitializeMachine2+0x130>)
 8003d90:	f006 f91e 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d111      	bne.n	8003dbe <InitializeMachine2+0x76>
		Clamp_M2_EncA_Pulses = 0;
 8003d9a:	4b31      	ldr	r3, [pc, #196]	@ (8003e60 <InitializeMachine2+0x118>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	601a      	str	r2, [r3, #0]
		Clamp_M2_EncB_Pulses = 0;
 8003da0:	4b30      	ldr	r3, [pc, #192]	@ (8003e64 <InitializeMachine2+0x11c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
		pwm(Clamp_M2_PWM, 0);
 8003da6:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8003e7c <InitializeMachine2+0x134>
 8003daa:	2001      	movs	r0, #1
 8003dac:	f003 fa0c 	bl	80071c8 <pwm>
		isClampLimitSwitchReached = TRUE;
 8003db0:	4b33      	ldr	r3, [pc, #204]	@ (8003e80 <InitializeMachine2+0x138>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M2 Limit HIGH\n");
 8003db6:	4833      	ldr	r0, [pc, #204]	@ (8003e84 <InitializeMachine2+0x13c>)
 8003db8:	f001 faf0 	bl	800539c <SerialPrint>
 8003dbc:	e005      	b.n	8003dca <InitializeMachine2+0x82>
#endif
    } else {
    	isClampLimitSwitchReached = FALSE;
 8003dbe:	4b30      	ldr	r3, [pc, #192]	@ (8003e80 <InitializeMachine2+0x138>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M2 Limit LOW\n");
 8003dc4:	4830      	ldr	r0, [pc, #192]	@ (8003e88 <InitializeMachine2+0x140>)
 8003dc6:	f001 fae9 	bl	800539c <SerialPrint>
#endif
    }

    if (HAL_GPIO_ReadPin(Spindle_M3_Prox_Interrupt_GPIO_Port, Spindle_M3_Prox_Interrupt_Pin) == 1) {
 8003dca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003dce:	482f      	ldr	r0, [pc, #188]	@ (8003e8c <InitializeMachine2+0x144>)
 8003dd0:	f006 f8fe 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d111      	bne.n	8003dfe <InitializeMachine2+0xb6>
		Spindle_M3_EncA_Pulses=0;
 8003dda:	4b23      	ldr	r3, [pc, #140]	@ (8003e68 <InitializeMachine2+0x120>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
		Spindle_M3_EncB_Pulses=0;
 8003de0:	4b22      	ldr	r3, [pc, #136]	@ (8003e6c <InitializeMachine2+0x124>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
		pwm(Spindle_M3_PWM, 0);
 8003de6:	ed9f 0a25 	vldr	s0, [pc, #148]	@ 8003e7c <InitializeMachine2+0x134>
 8003dea:	2002      	movs	r0, #2
 8003dec:	f003 f9ec 	bl	80071c8 <pwm>
		isSpindleLimitSwitchReached = TRUE;
 8003df0:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <InitializeMachine2+0x148>)
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M3 Limit HIGH\n");
 8003df6:	4827      	ldr	r0, [pc, #156]	@ (8003e94 <InitializeMachine2+0x14c>)
 8003df8:	f001 fad0 	bl	800539c <SerialPrint>
 8003dfc:	e00b      	b.n	8003e16 <InitializeMachine2+0xce>
#endif
    } else {
    	isSpindleLimitSwitchReached = FALSE;
 8003dfe:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <InitializeMachine2+0x148>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
    	SerialPrint("M3 Limit LOW\n");
 8003e04:	4824      	ldr	r0, [pc, #144]	@ (8003e98 <InitializeMachine2+0x150>)
 8003e06:	f001 fac9 	bl	800539c <SerialPrint>
    	SerialPrintln("Servo Close");
 8003e0a:	4824      	ldr	r0, [pc, #144]	@ (8003e9c <InitializeMachine2+0x154>)
 8003e0c:	f001 fadc 	bl	80053c8 <SerialPrintln>
#endif
    	Servo_SetPercent(90); //Normally set to ValveClose
 8003e10:	205a      	movs	r0, #90	@ 0x5a
 8003e12:	f001 fb77 	bl	8005504 <Servo_SetPercent>
    }
#if DEBUG == 1
    SerialPrintln("Check M3 position");
 8003e16:	4822      	ldr	r0, [pc, #136]	@ (8003ea0 <InitializeMachine2+0x158>)
 8003e18:	f001 fad6 	bl	80053c8 <SerialPrintln>
#endif
    // Read the state of Motor2 limit switch and reset its position
    if (isSpindleLimitSwitchReached == FALSE) {
 8003e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003e90 <InitializeMachine2+0x148>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <InitializeMachine2+0xe2>
    	moveMotorSpindleToLocBlock(M2POS1VAL);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fe ffe9 	bl	8002dfc <moveMotorSpindleToLocBlock>
    }
#if DEBUG == 1
    SerialPrintln("Check M1 position");
 8003e2a:	481e      	ldr	r0, [pc, #120]	@ (8003ea4 <InitializeMachine2+0x15c>)
 8003e2c:	f001 facc 	bl	80053c8 <SerialPrintln>
#endif
    // Read the state of Motor1 limit switch and reset its position
    if (isClampLimitSwitchReached == FALSE) {
 8003e30:	4b13      	ldr	r3, [pc, #76]	@ (8003e80 <InitializeMachine2+0x138>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <InitializeMachine2+0xf6>
        moveMotorClampToLocBlock(M1POS1VAL);
 8003e38:	2000      	movs	r0, #0
 8003e3a:	f7ff f80b 	bl	8002e54 <moveMotorClampToLocBlock>
    }
#if DEBUG == 1
    SerialPrintln("Servo Close");
 8003e3e:	4817      	ldr	r0, [pc, #92]	@ (8003e9c <InitializeMachine2+0x154>)
 8003e40:	f001 fac2 	bl	80053c8 <SerialPrintln>
#endif
    Servo_SetPercent(90);  //Normally set to ValveClose
 8003e44:	205a      	movs	r0, #90	@ 0x5a
 8003e46:	f001 fb5d 	bl	8005504 <Servo_SetPercent>

    // Delay to give time for load cell values to stabilize after motor movement ends
    HAL_Delay(1); // Use HAL_Delay for STM32
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f004 fc54 	bl	80086f8 <HAL_Delay>
    //SerialPrintln("Zero load cells");
#if DEBUG == 1
    // Print finishing initialization message
    SerialPrintln("Finish Initialize");
 8003e50:	4815      	ldr	r0, [pc, #84]	@ (8003ea8 <InitializeMachine2+0x160>)
 8003e52:	f001 fab9 	bl	80053c8 <SerialPrintln>
#endif
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08016fd8 	.word	0x08016fd8
 8003e60:	200000fc 	.word	0x200000fc
 8003e64:	20000100 	.word	0x20000100
 8003e68:	20000104 	.word	0x20000104
 8003e6c:	20000108 	.word	0x20000108
 8003e70:	0098967f 	.word	0x0098967f
 8003e74:	08016fec 	.word	0x08016fec
 8003e78:	40020800 	.word	0x40020800
 8003e7c:	00000000 	.word	0x00000000
 8003e80:	2000010c 	.word	0x2000010c
 8003e84:	08016ff8 	.word	0x08016ff8
 8003e88:	08017008 	.word	0x08017008
 8003e8c:	40020000 	.word	0x40020000
 8003e90:	2000010d 	.word	0x2000010d
 8003e94:	08017018 	.word	0x08017018
 8003e98:	08017028 	.word	0x08017028
 8003e9c:	08017038 	.word	0x08017038
 8003ea0:	08017044 	.word	0x08017044
 8003ea4:	08017058 	.word	0x08017058
 8003ea8:	0801706c 	.word	0x0801706c

08003eac <SubInit>:

void SubInit(){								//Initialize LCD
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8003eb0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003eb4:	f004 fc20 	bl	80086f8 <HAL_Delay>
	LCD_Clear();								//Clear LCD
 8003eb8:	f000 fdb2 	bl	8004a20 <LCD_Clear>
	HAL_Delay(500);
 8003ebc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ec0:	f004 fc1a 	bl	80086f8 <HAL_Delay>
	HAL_Delay(1000);     // Wait for a second after initializing
 8003ec4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ec8:	f004 fc16 	bl	80086f8 <HAL_Delay>
	return;
 8003ecc:	bf00      	nop
}
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <goToSleep>:

void goToSleep() { //Function goToSleep is only called by setup as it is a blocking function
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
    // Turn OFF LCD RGB
    LCDRGBControl(OFF);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f000 ff0f 	bl	8004cf8 <LCDRGBControl>
    pwm(LCD_LED_PWM,0);
 8003eda:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8003f44 <goToSleep+0x74>
 8003ede:	2004      	movs	r0, #4
 8003ee0:	f003 f972 	bl	80071c8 <pwm>
    pwm(LCD_Contrast_PWM,0);
 8003ee4:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8003f44 <goToSleep+0x74>
 8003ee8:	2003      	movs	r0, #3
 8003eea:	f003 f96d 	bl	80071c8 <pwm>
    // Turn off power LED and stop loading screen
    LoadingFunc(OFF, NOT_LOADING);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	f000 fa5b 	bl	80043ac <LoadingFunc>
    // Initialize the machine (the same initialization is used for shutdown and startup)
    InitializeMachine();
 8003ef6:	f7ff fec1 	bl	8003c7c <InitializeMachine>
    // Print message to Serial
#if DEBUG == 1
    SerialPrintln("Sleeping..");
 8003efa:	4813      	ldr	r0, [pc, #76]	@ (8003f48 <goToSleep+0x78>)
 8003efc:	f001 fa64 	bl	80053c8 <SerialPrintln>
#endif
    HAL_Delay(500);   // Delay for a short period
 8003f00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f04:	f004 fbf8 	bl	80086f8 <HAL_Delay>
    //UpdateTimeToSDCard( hours,  minutes,  seconds);
    // Wait while the machine is off
    while(isMachineOn == FALSE) {
 8003f08:	e002      	b.n	8003f10 <goToSleep+0x40>
        HAL_Delay(100); // Use HAL_Delay instead of delay
 8003f0a:	2064      	movs	r0, #100	@ 0x64
 8003f0c:	f004 fbf4 	bl	80086f8 <HAL_Delay>
    while(isMachineOn == FALSE) {
 8003f10:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <goToSleep+0x7c>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f8      	beq.n	8003f0a <goToSleep+0x3a>
    }
    LoadingFunc(BLINK, LOADING);
 8003f18:	2101      	movs	r1, #1
 8003f1a:	2002      	movs	r0, #2
 8003f1c:	f000 fa46 	bl	80043ac <LoadingFunc>
    // On waking up, print message to Serial
#if DEBUG == 1
    SerialPrintln("Waking up..");
 8003f20:	480b      	ldr	r0, [pc, #44]	@ (8003f50 <goToSleep+0x80>)
 8003f22:	f001 fa51 	bl	80053c8 <SerialPrintln>
#endif
	 MX_TIM8_Init();
 8003f26:	f003 fe65 	bl	8007bf4 <MX_TIM8_Init>
	 LCD_Init();
 8003f2a:	f000 fc8f 	bl	800484c <LCD_Init>
	 LCDRGBControl(WHITE);
 8003f2e:	2064      	movs	r0, #100	@ 0x64
 8003f30:	f000 fee2 	bl	8004cf8 <LCDRGBControl>
	 controlLCDContrast(100);
 8003f34:	2064      	movs	r0, #100	@ 0x64
 8003f36:	f000 ff21 	bl	8004d7c <controlLCDContrast>
    InitializeMachine();
 8003f3a:	f7ff fe9f 	bl	8003c7c <InitializeMachine>
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	00000000 	.word	0x00000000
 8003f48:	08017080 	.word	0x08017080
 8003f4c:	20000358 	.word	0x20000358
 8003f50:	0801708c 	.word	0x0801708c

08003f54 <ReadKeypadVar>:
uint8_t cleanLongPressed = FALSE; // State of long press of clean key
uint8_t delLongPressed = FALSE;
uint8_t isDemoCleaning = FALSE; // Demo cleaning state


int ReadKeypadVar(int group) {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    lastKeyPressed = readKeypad(group);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f8db 	bl	8004118 <readKeypad>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <ReadKeypadVar+0x88>)
 8003f66:	6013      	str	r3, [r2, #0]
    if (lastKeyPressed == MANAUTOKEY) {
 8003f68:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <ReadKeypadVar+0x88>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d10a      	bne.n	8003f86 <ReadKeypadVar+0x32>
        isAutoOperation = !isAutoOperation;
 8003f70:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <ReadKeypadVar+0x8c>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	4b17      	ldr	r3, [pc, #92]	@ (8003fe0 <ReadKeypadVar+0x8c>)
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e01c      	b.n	8003fc0 <ReadKeypadVar+0x6c>
    } else if (lastKeyPressed == CLEANKEY) {
 8003f86:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <ReadKeypadVar+0x88>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d10a      	bne.n	8003fa4 <ReadKeypadVar+0x50>
        isCleaningOperation = !isCleaningOperation;
 8003f8e:	4b15      	ldr	r3, [pc, #84]	@ (8003fe4 <ReadKeypadVar+0x90>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf0c      	ite	eq
 8003f96:	2301      	moveq	r3, #1
 8003f98:	2300      	movne	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b11      	ldr	r3, [pc, #68]	@ (8003fe4 <ReadKeypadVar+0x90>)
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e00d      	b.n	8003fc0 <ReadKeypadVar+0x6c>
    } else if (lastKeyPressed == PLAYSTOPKEY) {
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <ReadKeypadVar+0x88>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b0d      	cmp	r3, #13
 8003faa:	d109      	bne.n	8003fc0 <ReadKeypadVar+0x6c>
        isPausedOperation = !isPausedOperation;
 8003fac:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe8 <ReadKeypadVar+0x94>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <ReadKeypadVar+0x94>)
 8003fbe:	701a      	strb	r2, [r3, #0]
    }
    if (lastKeyPressed != 255) {
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <ReadKeypadVar+0x88>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2bff      	cmp	r3, #255	@ 0xff
 8003fc6:	d002      	beq.n	8003fce <ReadKeypadVar+0x7a>
        HAL_Delay(5); // Delay for debounce, using HAL_Delay for STM32
 8003fc8:	2005      	movs	r0, #5
 8003fca:	f004 fb95 	bl	80086f8 <HAL_Delay>
    }
    return lastKeyPressed;
 8003fce:	4b03      	ldr	r3, [pc, #12]	@ (8003fdc <ReadKeypadVar+0x88>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000110 	.word	0x20000110
 8003fe0:	2000010f 	.word	0x2000010f
 8003fe4:	200003f0 	.word	0x200003f0
 8003fe8:	200003f1 	.word	0x200003f1

08003fec <readKeypadNonBlock>:

int readKeypadNonBlock(int group)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
	//group=ALL;
  if (group == NUMPAD || group == ALL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d002      	beq.n	8004000 <readKeypadNonBlock+0x14>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d15f      	bne.n	80040c0 <readKeypadNonBlock+0xd4>
  {
    if (digitalRead(Button_1_Input_PullUp) == LOW) {
 8004000:	2003      	movs	r0, #3
 8004002:	f7fe feb3 	bl	8002d6c <digitalRead>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <readKeypadNonBlock+0x24>

      return 1;
 800400c:	2301      	movs	r3, #1
 800400e:	e07e      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_2_Input_PullUp) == LOW) {
 8004010:	2004      	movs	r0, #4
 8004012:	f7fe feab 	bl	8002d6c <digitalRead>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <readKeypadNonBlock+0x34>

      return 2;
 800401c:	2302      	movs	r3, #2
 800401e:	e076      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_3_Input_PullUp) == LOW) {
 8004020:	2005      	movs	r0, #5
 8004022:	f7fe fea3 	bl	8002d6c <digitalRead>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <readKeypadNonBlock+0x44>

      return 3;
 800402c:	2303      	movs	r3, #3
 800402e:	e06e      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_4_Input_PullUp) == LOW) {
 8004030:	2006      	movs	r0, #6
 8004032:	f7fe fe9b 	bl	8002d6c <digitalRead>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <readKeypadNonBlock+0x54>

      return 4;
 800403c:	2304      	movs	r3, #4
 800403e:	e066      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_5_Input_PullUp) == LOW) {
 8004040:	2007      	movs	r0, #7
 8004042:	f7fe fe93 	bl	8002d6c <digitalRead>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <readKeypadNonBlock+0x64>

      return 5;
 800404c:	2305      	movs	r3, #5
 800404e:	e05e      	b.n	800410e <readKeypadNonBlock+0x122>
    }else if (digitalRead(Button_6_Input_PullUp) == LOW) {
 8004050:	2008      	movs	r0, #8
 8004052:	f7fe fe8b 	bl	8002d6c <digitalRead>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <readKeypadNonBlock+0x74>

      return 6;
 800405c:	2306      	movs	r3, #6
 800405e:	e056      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_7_Input_PullUp) == LOW) {
 8004060:	2009      	movs	r0, #9
 8004062:	f7fe fe83 	bl	8002d6c <digitalRead>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <readKeypadNonBlock+0x84>

      return 7;
 800406c:	2307      	movs	r3, #7
 800406e:	e04e      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_8_Input_PullUp) == LOW) {
 8004070:	200a      	movs	r0, #10
 8004072:	f7fe fe7b 	bl	8002d6c <digitalRead>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <readKeypadNonBlock+0x94>

      return 8;
 800407c:	2308      	movs	r3, #8
 800407e:	e046      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_9_Input_PullUp) == LOW) {
 8004080:	200b      	movs	r0, #11
 8004082:	f7fe fe73 	bl	8002d6c <digitalRead>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <readKeypadNonBlock+0xa4>

      return 9;
 800408c:	2309      	movs	r3, #9
 800408e:	e03e      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_0_Input_PullUp) == LOW) {
 8004090:	200c      	movs	r0, #12
 8004092:	f7fe fe6b 	bl	8002d6c <digitalRead>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <readKeypadNonBlock+0xb4>

      return 0;
 800409c:	2300      	movs	r3, #0
 800409e:	e036      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 80040a0:	200e      	movs	r0, #14
 80040a2:	f7fe fe63 	bl	8002d6c <digitalRead>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <readKeypadNonBlock+0xc4>

      return COMMAKEY;
 80040ac:	230a      	movs	r3, #10
 80040ae:	e02e      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80040b0:	200d      	movs	r0, #13
 80040b2:	f7fe fe5b 	bl	8002d6c <digitalRead>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <readKeypadNonBlock+0xd4>

      return ENTERKEY;
 80040bc:	230b      	movs	r3, #11
 80040be:	e026      	b.n	800410e <readKeypadNonBlock+0x122>
    }
  }
  if (group == CONTROL || group == ALL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d002      	beq.n	80040cc <readKeypadNonBlock+0xe0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d11f      	bne.n	800410c <readKeypadNonBlock+0x120>
  {
    if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80040cc:	200d      	movs	r0, #13
 80040ce:	f7fe fe4d 	bl	8002d6c <digitalRead>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <readKeypadNonBlock+0xf0>

      return ENTERKEY;
 80040d8:	230b      	movs	r3, #11
 80040da:	e018      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 80040dc:	2000      	movs	r0, #0
 80040de:	f7fe fe45 	bl	8002d6c <digitalRead>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <readKeypadNonBlock+0x100>

      return MANAUTOKEY;
 80040e8:	230c      	movs	r3, #12
 80040ea:	e010      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 80040ec:	2001      	movs	r0, #1
 80040ee:	f7fe fe3d 	bl	8002d6c <digitalRead>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <readKeypadNonBlock+0x110>

      return PLAYSTOPKEY;
 80040f8:	230d      	movs	r3, #13
 80040fa:	e008      	b.n	800410e <readKeypadNonBlock+0x122>
    } else if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fe fe35 	bl	8002d6c <digitalRead>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <readKeypadNonBlock+0x120>

      return DELKEY;
 8004108:	230e      	movs	r3, #14
 800410a:	e000      	b.n	800410e <readKeypadNonBlock+0x122>
    }
  }
  return 255;
 800410c:	23ff      	movs	r3, #255	@ 0xff
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <readKeypad>:

int readKeypad(int group)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	//group = ALL;
  if (group == NUMPAD || group == ALL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d003      	beq.n	800412e <readKeypad+0x16>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 80d8 	bne.w	80042de <readKeypad+0x1c6>
  {
    if (digitalRead(Button_1_Input_PullUp) == LOW){
 800412e:	2003      	movs	r0, #3
 8004130:	f7fe fe1c 	bl	8002d6c <digitalRead>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10b      	bne.n	8004152 <readKeypad+0x3a>
      while (digitalRead(Button_1_Input_PullUp) == LOW) {
 800413a:	e002      	b.n	8004142 <readKeypad+0x2a>
        HAL_Delay(1);
 800413c:	2001      	movs	r0, #1
 800413e:	f004 fadb 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_1_Input_PullUp) == LOW) {
 8004142:	2003      	movs	r0, #3
 8004144:	f7fe fe12 	bl	8002d6c <digitalRead>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f6      	beq.n	800413c <readKeypad+0x24>
      }
      return 1;
 800414e:	2301      	movs	r3, #1
 8004150:	e126      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_2_Input_PullUp) == LOW){
 8004152:	2004      	movs	r0, #4
 8004154:	f7fe fe0a 	bl	8002d6c <digitalRead>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10b      	bne.n	8004176 <readKeypad+0x5e>
      while (digitalRead(Button_2_Input_PullUp) == LOW){
 800415e:	e002      	b.n	8004166 <readKeypad+0x4e>
    	  HAL_Delay(1);
 8004160:	2001      	movs	r0, #1
 8004162:	f004 fac9 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_2_Input_PullUp) == LOW){
 8004166:	2004      	movs	r0, #4
 8004168:	f7fe fe00 	bl	8002d6c <digitalRead>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f6      	beq.n	8004160 <readKeypad+0x48>
      }
      return 2;
 8004172:	2302      	movs	r3, #2
 8004174:	e114      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_3_Input_PullUp) == LOW) {
 8004176:	2005      	movs	r0, #5
 8004178:	f7fe fdf8 	bl	8002d6c <digitalRead>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <readKeypad+0x82>
    	while (digitalRead(Button_3_Input_PullUp) == LOW) {
 8004182:	e002      	b.n	800418a <readKeypad+0x72>
      HAL_Delay(1);
 8004184:	2001      	movs	r0, #1
 8004186:	f004 fab7 	bl	80086f8 <HAL_Delay>
    	while (digitalRead(Button_3_Input_PullUp) == LOW) {
 800418a:	2005      	movs	r0, #5
 800418c:	f7fe fdee 	bl	8002d6c <digitalRead>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f6      	beq.n	8004184 <readKeypad+0x6c>
      }
      return 3;
 8004196:	2303      	movs	r3, #3
 8004198:	e102      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_4_Input_PullUp) == LOW) {
 800419a:	2006      	movs	r0, #6
 800419c:	f7fe fde6 	bl	8002d6c <digitalRead>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <readKeypad+0xa6>
      while (digitalRead(Button_4_Input_PullUp) == LOW) {
 80041a6:	e002      	b.n	80041ae <readKeypad+0x96>
    	  HAL_Delay(1);
 80041a8:	2001      	movs	r0, #1
 80041aa:	f004 faa5 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_4_Input_PullUp) == LOW) {
 80041ae:	2006      	movs	r0, #6
 80041b0:	f7fe fddc 	bl	8002d6c <digitalRead>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f6      	beq.n	80041a8 <readKeypad+0x90>
      }
      return 4;
 80041ba:	2304      	movs	r3, #4
 80041bc:	e0f0      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_5_Input_PullUp) == LOW) {
 80041be:	2007      	movs	r0, #7
 80041c0:	f7fe fdd4 	bl	8002d6c <digitalRead>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10b      	bne.n	80041e2 <readKeypad+0xca>
      while (digitalRead(Button_5_Input_PullUp) == LOW) {
 80041ca:	e002      	b.n	80041d2 <readKeypad+0xba>
    	  HAL_Delay(1);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f004 fa93 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_5_Input_PullUp) == LOW) {
 80041d2:	2007      	movs	r0, #7
 80041d4:	f7fe fdca 	bl	8002d6c <digitalRead>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f6      	beq.n	80041cc <readKeypad+0xb4>
      }
      return 5;
 80041de:	2305      	movs	r3, #5
 80041e0:	e0de      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_6_Input_PullUp) == LOW) {
 80041e2:	2008      	movs	r0, #8
 80041e4:	f7fe fdc2 	bl	8002d6c <digitalRead>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10b      	bne.n	8004206 <readKeypad+0xee>
      while (digitalRead(Button_6_Input_PullUp) == LOW) {
 80041ee:	e002      	b.n	80041f6 <readKeypad+0xde>
    	  HAL_Delay(1);
 80041f0:	2001      	movs	r0, #1
 80041f2:	f004 fa81 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_6_Input_PullUp) == LOW) {
 80041f6:	2008      	movs	r0, #8
 80041f8:	f7fe fdb8 	bl	8002d6c <digitalRead>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f6      	beq.n	80041f0 <readKeypad+0xd8>
      }
      return 6;
 8004202:	2306      	movs	r3, #6
 8004204:	e0cc      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_7_Input_PullUp) == LOW) {
 8004206:	2009      	movs	r0, #9
 8004208:	f7fe fdb0 	bl	8002d6c <digitalRead>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10b      	bne.n	800422a <readKeypad+0x112>
      while (digitalRead(Button_7_Input_PullUp) == LOW) {
 8004212:	e002      	b.n	800421a <readKeypad+0x102>
    	  HAL_Delay(1);
 8004214:	2001      	movs	r0, #1
 8004216:	f004 fa6f 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_7_Input_PullUp) == LOW) {
 800421a:	2009      	movs	r0, #9
 800421c:	f7fe fda6 	bl	8002d6c <digitalRead>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d0f6      	beq.n	8004214 <readKeypad+0xfc>
      }
      return 7;
 8004226:	2307      	movs	r3, #7
 8004228:	e0ba      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_8_Input_PullUp) == LOW) {
 800422a:	200a      	movs	r0, #10
 800422c:	f7fe fd9e 	bl	8002d6c <digitalRead>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10b      	bne.n	800424e <readKeypad+0x136>
      while (digitalRead(Button_8_Input_PullUp) == LOW) {
 8004236:	e002      	b.n	800423e <readKeypad+0x126>
    	  HAL_Delay(1);
 8004238:	2001      	movs	r0, #1
 800423a:	f004 fa5d 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_8_Input_PullUp) == LOW) {
 800423e:	200a      	movs	r0, #10
 8004240:	f7fe fd94 	bl	8002d6c <digitalRead>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f6      	beq.n	8004238 <readKeypad+0x120>
      }
      return 8;
 800424a:	2308      	movs	r3, #8
 800424c:	e0a8      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_9_Input_PullUp) == LOW) {
 800424e:	200b      	movs	r0, #11
 8004250:	f7fe fd8c 	bl	8002d6c <digitalRead>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <readKeypad+0x15a>
      while (digitalRead(Button_9_Input_PullUp) == LOW) {
 800425a:	e002      	b.n	8004262 <readKeypad+0x14a>
    	  HAL_Delay(1);
 800425c:	2001      	movs	r0, #1
 800425e:	f004 fa4b 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_9_Input_PullUp) == LOW) {
 8004262:	200b      	movs	r0, #11
 8004264:	f7fe fd82 	bl	8002d6c <digitalRead>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f6      	beq.n	800425c <readKeypad+0x144>
      }
      return 9;
 800426e:	2309      	movs	r3, #9
 8004270:	e096      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_0_Input_PullUp) == LOW) {
 8004272:	200c      	movs	r0, #12
 8004274:	f7fe fd7a 	bl	8002d6c <digitalRead>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <readKeypad+0x17e>
      while (digitalRead(Button_0_Input_PullUp) == LOW) {
 800427e:	e002      	b.n	8004286 <readKeypad+0x16e>
    	  HAL_Delay(1);
 8004280:	2001      	movs	r0, #1
 8004282:	f004 fa39 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_0_Input_PullUp) == LOW) {
 8004286:	200c      	movs	r0, #12
 8004288:	f7fe fd70 	bl	8002d6c <digitalRead>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0f6      	beq.n	8004280 <readKeypad+0x168>
      }

      return 0;
 8004292:	2300      	movs	r3, #0
 8004294:	e084      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 8004296:	200e      	movs	r0, #14
 8004298:	f7fe fd68 	bl	8002d6c <digitalRead>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <readKeypad+0x1a2>
      while (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 80042a2:	e002      	b.n	80042aa <readKeypad+0x192>
    	  HAL_Delay(1);
 80042a4:	2001      	movs	r0, #1
 80042a6:	f004 fa27 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 80042aa:	200e      	movs	r0, #14
 80042ac:	f7fe fd5e 	bl	8002d6c <digitalRead>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f6      	beq.n	80042a4 <readKeypad+0x18c>
      }

      return COMMAKEY;
 80042b6:	230a      	movs	r3, #10
 80042b8:	e072      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80042ba:	200d      	movs	r0, #13
 80042bc:	f7fe fd56 	bl	8002d6c <digitalRead>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10b      	bne.n	80042de <readKeypad+0x1c6>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80042c6:	e002      	b.n	80042ce <readKeypad+0x1b6>
    	  HAL_Delay(1);
 80042c8:	2001      	movs	r0, #1
 80042ca:	f004 fa15 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80042ce:	200d      	movs	r0, #13
 80042d0:	f7fe fd4c 	bl	8002d6c <digitalRead>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f6      	beq.n	80042c8 <readKeypad+0x1b0>
      }

      return ENTERKEY;
 80042da:	230b      	movs	r3, #11
 80042dc:	e060      	b.n	80043a0 <readKeypad+0x288>
    }
  }
  if (group == CONTROL || group == ALL) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d002      	beq.n	80042ea <readKeypad+0x1d2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d159      	bne.n	800439e <readKeypad+0x286>
    if (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80042ea:	200d      	movs	r0, #13
 80042ec:	f7fe fd3e 	bl	8002d6c <digitalRead>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <readKeypad+0x1f6>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80042f6:	e002      	b.n	80042fe <readKeypad+0x1e6>
    	  HAL_Delay(1);
 80042f8:	2001      	movs	r0, #1
 80042fa:	f004 f9fd 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_Enter_Input_PullUp) == LOW) {
 80042fe:	200d      	movs	r0, #13
 8004300:	f7fe fd34 	bl	8002d6c <digitalRead>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f6      	beq.n	80042f8 <readKeypad+0x1e0>
      }

      return ENTERKEY;
 800430a:	230b      	movs	r3, #11
 800430c:	e048      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 800430e:	2000      	movs	r0, #0
 8004310:	f7fe fd2c 	bl	8002d6c <digitalRead>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <readKeypad+0x21a>
      while (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 800431a:	e002      	b.n	8004322 <readKeypad+0x20a>
    	  HAL_Delay(1);
 800431c:	2001      	movs	r0, #1
 800431e:	f004 f9eb 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_ManAuto_Input_PullUp) == LOW) {
 8004322:	2000      	movs	r0, #0
 8004324:	f7fe fd22 	bl	8002d6c <digitalRead>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f6      	beq.n	800431c <readKeypad+0x204>
      }

      return MANAUTOKEY;
 800432e:	230c      	movs	r3, #12
 8004330:	e036      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 8004332:	2001      	movs	r0, #1
 8004334:	f7fe fd1a 	bl	8002d6c <digitalRead>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <readKeypad+0x23e>
      while (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 800433e:	e002      	b.n	8004346 <readKeypad+0x22e>
    	  HAL_Delay(1);
 8004340:	2001      	movs	r0, #1
 8004342:	f004 f9d9 	bl	80086f8 <HAL_Delay>
      while (digitalRead(Button_PlayStop_Input_PullUp) == LOW) {
 8004346:	2001      	movs	r0, #1
 8004348:	f7fe fd10 	bl	8002d6c <digitalRead>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f6      	beq.n	8004340 <readKeypad+0x228>
      }

      return PLAYSTOPKEY;
 8004352:	230d      	movs	r3, #13
 8004354:	e024      	b.n	80043a0 <readKeypad+0x288>
    } else if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8004356:	2002      	movs	r0, #2
 8004358:	f7fe fd08 	bl	8002d6c <digitalRead>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d11d      	bne.n	800439e <readKeypad+0x286>
    	unsigned long localDelTimer = HAL_GetTick();
 8004362:	f004 f9bd 	bl	80086e0 <HAL_GetTick>
 8004366:	60f8      	str	r0, [r7, #12]
    	delLongPressed = FALSE;
 8004368:	4b0f      	ldr	r3, [pc, #60]	@ (80043a8 <readKeypad+0x290>)
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
    	while (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 800436e:	e00e      	b.n	800438e <readKeypad+0x276>
    		HAL_Delay(1);
 8004370:	2001      	movs	r0, #1
 8004372:	f004 f9c1 	bl	80086f8 <HAL_Delay>
    		if (HAL_GetTick() - localDelTimer >= 2000) {
 8004376:	f004 f9b3 	bl	80086e0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004384:	d303      	bcc.n	800438e <readKeypad+0x276>
    			delLongPressed = TRUE;
 8004386:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <readKeypad+0x290>)
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
    			break;
 800438c:	e005      	b.n	800439a <readKeypad+0x282>
    	while (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 800438e:	2002      	movs	r0, #2
 8004390:	f7fe fcec 	bl	8002d6c <digitalRead>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ea      	beq.n	8004370 <readKeypad+0x258>
    		}
    	}

    	return DELKEY;
 800439a:	230e      	movs	r3, #14
 800439c:	e000      	b.n	80043a0 <readKeypad+0x288>
    }
  }
  return 255;
 800439e:	23ff      	movs	r3, #255	@ 0xff
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200003f6 	.word	0x200003f6

080043ac <LoadingFunc>:


void LoadingFunc(int blinkLED, uint8_t ScreenLoad) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
    if (blinkLED == OFF) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <LoadingFunc+0x20>
        powerLEDControl(OFF);
 80043be:	2000      	movs	r0, #0
 80043c0:	f000 fcbc 	bl	8004d3c <powerLEDControl>
        isPowerLEDBlinking = FALSE;
 80043c4:	4b14      	ldr	r3, [pc, #80]	@ (8004418 <LoadingFunc+0x6c>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e00f      	b.n	80043ec <LoadingFunc+0x40>
    } else if (blinkLED == ON) {
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d106      	bne.n	80043e0 <LoadingFunc+0x34>
       powerLEDControl(ON);
 80043d2:	2001      	movs	r0, #1
 80043d4:	f000 fcb2 	bl	8004d3c <powerLEDControl>
        isPowerLEDBlinking = FALSE;
 80043d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004418 <LoadingFunc+0x6c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e005      	b.n	80043ec <LoadingFunc+0x40>
    } else if (blinkLED == BLINK) {
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d102      	bne.n	80043ec <LoadingFunc+0x40>
        isPowerLEDBlinking = TRUE;
 80043e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <LoadingFunc+0x6c>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
    }

    if (ScreenLoad==TRUE) {
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d10b      	bne.n	800440a <LoadingFunc+0x5e>
        strcpy(DotString, ""); // Clear the DotString
 80043f2:	4b0a      	ldr	r3, [pc, #40]	@ (800441c <LoadingFunc+0x70>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	701a      	strb	r2, [r3, #0]
        isScreenLoading = TRUE;
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <LoadingFunc+0x74>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
        printLCD(0, " ", NO_SYMBOL);
 80043fe:	2200      	movs	r2, #0
 8004400:	4908      	ldr	r1, [pc, #32]	@ (8004424 <LoadingFunc+0x78>)
 8004402:	2000      	movs	r0, #0
 8004404:	f000 fc0c 	bl	8004c20 <printLCD>
    } else {
        isScreenLoading = FALSE;
    }
}
 8004408:	e002      	b.n	8004410 <LoadingFunc+0x64>
        isScreenLoading = FALSE;
 800440a:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <LoadingFunc+0x74>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	2000049c 	.word	0x2000049c
 800441c:	200004a0 	.word	0x200004a0
 8004420:	2000049e 	.word	0x2000049e
 8004424:	08017098 	.word	0x08017098

08004428 <Take2RowEntries>:

void Take2RowEntries(char *Row1StaticString, char *Row2StaticString) {
 8004428:	b580      	push	{r7, lr}
 800442a:	b0ae      	sub	sp, #184	@ 0xb8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]

	uint8_t row2done = 0;  // false represented as 0
 8004432:	2300      	movs	r3, #0
 8004434:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
	char row1entryS[LCD_COLUMN_COUNT + 1]; // Assuming a max size of 50 for the string +1 is for null terminator
	row1entryS[0] = '\0';
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
	char row2entryS[50];   // Adjust the size as needed
	row2entryS[0] = '\0';
 800443e:	2300      	movs	r3, #0
 8004440:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	float row1entryF = 0.0;
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float row2entryF = 0.0;
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	// Convert lastKeyPressed to a string
	char lastKeyPressedStr[3]; //For storing lastKeyPressed as a character array/string
	char SerialBuffer[32];		//For storing rowXentryF as a character array/string

	char CombStr1[LCD_COLUMN_COUNT + 1]; 	//For storing the combined strings of row 1
	CombStr1[0] = '\0';
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	char CombStr2[LCD_COLUMN_COUNT + 1];   //For storing the combined strings of row 2
	CombStr2[0] = '\0';
 800445a:	2300      	movs	r3, #0
 800445c:	733b      	strb	r3, [r7, #12]

	strcpy(CombStr1, Row1StaticString);
 800445e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4618      	mov	r0, r3
 8004466:	f00f f9ae 	bl	80137c6 <strcpy>
	strcat(CombStr1, row1entryS);
 800446a:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800446e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004472:	4611      	mov	r1, r2
 8004474:	4618      	mov	r0, r3
 8004476:	f00f f8ee 	bl	8013656 <strcat>

	strcpy(CombStr2, Row2StaticString);
 800447a:	f107 030c 	add.w	r3, r7, #12
 800447e:	6839      	ldr	r1, [r7, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f00f f9a0 	bl	80137c6 <strcpy>
	strcat(CombStr2, row2entryS);
 8004486:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f00f f8e0 	bl	8013656 <strcat>

	printLCD(2, CombStr2, NO_SYMBOL);
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	2200      	movs	r2, #0
 800449c:	4619      	mov	r1, r3
 800449e:	2002      	movs	r0, #2
 80044a0:	f000 fbbe 	bl	8004c20 <printLCD>
	printLCD(1, CombStr1, CURSOR_SYMBOL);
 80044a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a8:	2203      	movs	r2, #3
 80044aa:	4619      	mov	r1, r3
 80044ac:	2001      	movs	r0, #1
 80044ae:	f000 fbb7 	bl	8004c20 <printLCD>

	while (row2done == FALSE) {
 80044b2:	e1b1      	b.n	8004818 <Take2RowEntries+0x3f0>
		printLCD(2, CombStr2, NO_SYMBOL); //Remove any symbol from 2nd row. Useful when we hit delete on 2nd row and go to 1st row
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	2200      	movs	r2, #0
 80044ba:	4619      	mov	r1, r3
 80044bc:	2002      	movs	r0, #2
 80044be:	f000 fbaf 	bl	8004c20 <printLCD>
		//Take 1st row entry
		while (ReadKeypadVar(ALL) != ENTERKEY || row1entryF == 0.0) {
 80044c2:	e0a4      	b.n	800460e <Take2RowEntries+0x1e6>
			  if (lastKeyPressed == MANAUTOKEY)
 80044c4:	4ba8      	ldr	r3, [pc, #672]	@ (8004768 <Take2RowEntries+0x340>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	d101      	bne.n	80044d0 <Take2RowEntries+0xa8>
				{
				  CustomerApp();
 80044cc:	f7fc ff86 	bl	80013dc <CustomerApp>
				}
			if (lastKeyPressed >= 0 && lastKeyPressed <= 9) { //If last key pressed is a number
 80044d0:	4ba5      	ldr	r3, [pc, #660]	@ (8004768 <Take2RowEntries+0x340>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	db2d      	blt.n	8004534 <Take2RowEntries+0x10c>
 80044d8:	4ba3      	ldr	r3, [pc, #652]	@ (8004768 <Take2RowEntries+0x340>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b09      	cmp	r3, #9
 80044de:	dc29      	bgt.n	8004534 <Take2RowEntries+0x10c>
				//int temp;
				//temp = atoi(row1entryS);  // Convert string to integer
				if (lastKeyPressed == 0 && strcmp(row1entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 80044e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004768 <Take2RowEntries+0x340>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <Take2RowEntries+0xd2>
 80044e8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80044ec:	499f      	ldr	r1, [pc, #636]	@ (800476c <Take2RowEntries+0x344>)
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fb fe6e 	bl	80001d0 <strcmp>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01b      	beq.n	8004532 <Take2RowEntries+0x10a>
					//Do nothing
				} else if (strlen(row1entryS) >= MAX_ENTRY_KEYS) {
 80044fa:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fb fec6 	bl	8000290 <strlen>
 8004504:	4603      	mov	r3, r0
 8004506:	2b06      	cmp	r3, #6
 8004508:	d85c      	bhi.n	80045c4 <Take2RowEntries+0x19c>
					//Do nothing
				} else {
					lastKeyPressedStr[0] = '\0';
 800450a:	2300      	movs	r3, #0
 800450c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
					sprintf(lastKeyPressedStr, "%d", lastKeyPressed);
 8004510:	4b95      	ldr	r3, [pc, #596]	@ (8004768 <Take2RowEntries+0x340>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004518:	4995      	ldr	r1, [pc, #596]	@ (8004770 <Take2RowEntries+0x348>)
 800451a:	4618      	mov	r0, r3
 800451c:	f00f f804 	bl	8013528 <siprintf>
					strcat(row1entryS, lastKeyPressedStr);
 8004520:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8004524:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f00f f893 	bl	8013656 <strcat>
				if (lastKeyPressed == 0 && strcmp(row1entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 8004530:	e048      	b.n	80045c4 <Take2RowEntries+0x19c>
 8004532:	e047      	b.n	80045c4 <Take2RowEntries+0x19c>
				}
			} else if (lastKeyPressed == DELKEY && (strlen(row1entryS)) > 0) {
 8004534:	4b8c      	ldr	r3, [pc, #560]	@ (8004768 <Take2RowEntries+0x340>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b0e      	cmp	r3, #14
 800453a:	d111      	bne.n	8004560 <Take2RowEntries+0x138>
 800453c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <Take2RowEntries+0x138>
				row1entryS[(strlen(row1entryS)) - 1] = '\0'; //Delete last entry
 8004546:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800454a:	4618      	mov	r0, r3
 800454c:	f7fb fea0 	bl	8000290 <strlen>
 8004550:	4603      	mov	r3, r0
 8004552:	3b01      	subs	r3, #1
 8004554:	33b8      	adds	r3, #184	@ 0xb8
 8004556:	443b      	add	r3, r7
 8004558:	2200      	movs	r2, #0
 800455a:	f803 2c24 	strb.w	r2, [r3, #-36]
 800455e:	e032      	b.n	80045c6 <Take2RowEntries+0x19e>

			} else if (lastKeyPressed == COMMAKEY) {
 8004560:	4b81      	ldr	r3, [pc, #516]	@ (8004768 <Take2RowEntries+0x340>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b0a      	cmp	r3, #10
 8004566:	d12e      	bne.n	80045c6 <Take2RowEntries+0x19e>
				if ((strlen(row1entryS)) == 0) { //If the user presses comma 1st thing in string, add a leading 0
 8004568:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10f      	bne.n	8004592 <Take2RowEntries+0x16a>
					strcat(row1entryS, "0.");
 8004572:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004576:	4618      	mov	r0, r3
 8004578:	f7fb fe8a 	bl	8000290 <strlen>
 800457c:	4603      	mov	r3, r0
 800457e:	461a      	mov	r2, r3
 8004580:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004584:	4413      	add	r3, r2
 8004586:	4a7b      	ldr	r2, [pc, #492]	@ (8004774 <Take2RowEntries+0x34c>)
 8004588:	8811      	ldrh	r1, [r2, #0]
 800458a:	7892      	ldrb	r2, [r2, #2]
 800458c:	8019      	strh	r1, [r3, #0]
 800458e:	709a      	strb	r2, [r3, #2]
 8004590:	e019      	b.n	80045c6 <Take2RowEntries+0x19e>
				} else if (strchr(row1entryS, '.') == NULL) { //If there is no comma in string, add one
 8004592:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004596:	212e      	movs	r1, #46	@ 0x2e
 8004598:	4618      	mov	r0, r3
 800459a:	f00f f86b 	bl	8013674 <strchr>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d110      	bne.n	80045c6 <Take2RowEntries+0x19e>
					strcat(row1entryS, ".");
 80045a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fb fe71 	bl	8000290 <strlen>
 80045ae:	4603      	mov	r3, r0
 80045b0:	461a      	mov	r2, r3
 80045b2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80045b6:	4413      	add	r3, r2
 80045b8:	496f      	ldr	r1, [pc, #444]	@ (8004778 <Take2RowEntries+0x350>)
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	881b      	ldrh	r3, [r3, #0]
 80045c0:	8013      	strh	r3, [r2, #0]
 80045c2:	e000      	b.n	80045c6 <Take2RowEntries+0x19e>
				if (lastKeyPressed == 0 && strcmp(row1entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 80045c4:	bf00      	nop
				}
			}
			strcpy(CombStr1, Row1StaticString);
 80045c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f00f f8fa 	bl	80137c6 <strcpy>
			strcat(CombStr1, row1entryS);
 80045d2:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80045d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f00f f83a 	bl	8013656 <strcat>
			printLCD(1, CombStr1, CURSOR_SYMBOL);
 80045e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e6:	2203      	movs	r2, #3
 80045e8:	4619      	mov	r1, r3
 80045ea:	2001      	movs	r0, #1
 80045ec:	f000 fb18 	bl	8004c20 <printLCD>
			row1entryF = strtod(row1entryS, NULL);
 80045f0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80045f4:	2100      	movs	r1, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f00e f828 	bl	801264c <strtod>
 80045fc:	ec53 2b10 	vmov	r2, r3, d0
 8004600:	4610      	mov	r0, r2
 8004602:	4619      	mov	r1, r3
 8004604:	f7fc fb00 	bl	8000c08 <__aeabi_d2f>
 8004608:	4603      	mov	r3, r0
 800460a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		while (ReadKeypadVar(ALL) != ENTERKEY || row1entryF == 0.0) {
 800460e:	2000      	movs	r0, #0
 8004610:	f7ff fca0 	bl	8003f54 <ReadKeypadVar>
 8004614:	4603      	mov	r3, r0
 8004616:	2b0b      	cmp	r3, #11
 8004618:	f47f af54 	bne.w	80044c4 <Take2RowEntries+0x9c>
 800461c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004620:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	f43f af4c 	beq.w	80044c4 <Take2RowEntries+0x9c>
		}

		SerialBuffer[0] = '\0';
 800462c:	2300      	movs	r3, #0
 800462e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		sprintf(SerialBuffer, "%.2f", row1entryF);
 8004632:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004636:	f7fb ff97 	bl	8000568 <__aeabi_f2d>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8004642:	494e      	ldr	r1, [pc, #312]	@ (800477c <Take2RowEntries+0x354>)
 8004644:	f00e ff70 	bl	8013528 <siprintf>
		SerialPrint("Row1: ");
 8004648:	484d      	ldr	r0, [pc, #308]	@ (8004780 <Take2RowEntries+0x358>)
 800464a:	f000 fea7 	bl	800539c <SerialPrint>
		SerialPrintln(SerialBuffer);
 800464e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004652:	4618      	mov	r0, r3
 8004654:	f000 feb8 	bl	80053c8 <SerialPrintln>

		//printLCD(1, CombStr1, NO_SYMBOL); //Used to remove cursor symbol when entry is done
		row2done = TRUE;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

		//Take 2nd row entry
		while (ReadKeypadVar(ALL) != ENTERKEY || row2entryF == 0.0) {
 800465e:	e0b6      	b.n	80047ce <Take2RowEntries+0x3a6>
      if (lastKeyPressed == MANAUTOKEY)
 8004660:	4b41      	ldr	r3, [pc, #260]	@ (8004768 <Take2RowEntries+0x340>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d101      	bne.n	800466c <Take2RowEntries+0x244>
			{
    	  	  CustomerApp();
 8004668:	f7fc feb8 	bl	80013dc <CustomerApp>
			}
			if (lastKeyPressed >= 0 && lastKeyPressed <= 9) { //If last key pressed is a number
 800466c:	4b3e      	ldr	r3, [pc, #248]	@ (8004768 <Take2RowEntries+0x340>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db2d      	blt.n	80046d0 <Take2RowEntries+0x2a8>
 8004674:	4b3c      	ldr	r3, [pc, #240]	@ (8004768 <Take2RowEntries+0x340>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b09      	cmp	r3, #9
 800467a:	dc29      	bgt.n	80046d0 <Take2RowEntries+0x2a8>
				//int temp;
				//temp = atoi(row2entryS);  // Convert string to integer
				if (lastKeyPressed == 0 && strcmp(row2entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 800467c:	4b3a      	ldr	r3, [pc, #232]	@ (8004768 <Take2RowEntries+0x340>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <Take2RowEntries+0x26e>
 8004684:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004688:	4938      	ldr	r1, [pc, #224]	@ (800476c <Take2RowEntries+0x344>)
 800468a:	4618      	mov	r0, r3
 800468c:	f7fb fda0 	bl	80001d0 <strcmp>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01b      	beq.n	80046ce <Take2RowEntries+0x2a6>
				//Do nothing
				} else if (strlen(row2entryS) >= MAX_ENTRY_KEYS) {
 8004696:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800469a:	4618      	mov	r0, r3
 800469c:	f7fb fdf8 	bl	8000290 <strlen>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d86e      	bhi.n	8004784 <Take2RowEntries+0x35c>
					//Do nothing
				} else {
					lastKeyPressedStr[0] = '\0';
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
					sprintf(lastKeyPressedStr, "%d", lastKeyPressed);
 80046ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004768 <Take2RowEntries+0x340>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80046b4:	492e      	ldr	r1, [pc, #184]	@ (8004770 <Take2RowEntries+0x348>)
 80046b6:	4618      	mov	r0, r3
 80046b8:	f00e ff36 	bl	8013528 <siprintf>
					strcat(row2entryS, lastKeyPressedStr);
 80046bc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80046c0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f00e ffc5 	bl	8013656 <strcat>
				if (lastKeyPressed == 0 && strcmp(row2entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 80046cc:	e05a      	b.n	8004784 <Take2RowEntries+0x35c>
 80046ce:	e059      	b.n	8004784 <Take2RowEntries+0x35c>
				}
			} else if (lastKeyPressed == DELKEY) {
 80046d0:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <Take2RowEntries+0x340>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b0e      	cmp	r3, #14
 80046d6:	d115      	bne.n	8004704 <Take2RowEntries+0x2dc>
				if (strlen(row2entryS) > 0) {
 80046d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00c      	beq.n	80046fc <Take2RowEntries+0x2d4>
					row2entryS[(strlen(row2entryS)) - 1] = '\0'; //Delete last entry
 80046e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fb fdd2 	bl	8000290 <strlen>
 80046ec:	4603      	mov	r3, r0
 80046ee:	3b01      	subs	r3, #1
 80046f0:	33b8      	adds	r3, #184	@ 0xb8
 80046f2:	443b      	add	r3, r7
 80046f4:	2200      	movs	r2, #0
 80046f6:	f803 2c58 	strb.w	r2, [r3, #-88]
 80046fa:	e044      	b.n	8004786 <Take2RowEntries+0x35e>
				} else { //Reaching here means del key is pressed in 2nd row, and that row is empty. go back to prev row!
					row2done = FALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
					break; //Exit the while loop. This should lead back to the 1st while loop
 8004702:	e073      	b.n	80047ec <Take2RowEntries+0x3c4>
				}
			}  else if (lastKeyPressed == COMMAKEY) {
 8004704:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <Take2RowEntries+0x340>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b0a      	cmp	r3, #10
 800470a:	d13c      	bne.n	8004786 <Take2RowEntries+0x35e>
				if ((strlen(row2entryS)) == 0) { //If the user presses comma 1st thing in string, add a leading 0
 800470c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <Take2RowEntries+0x30e>
					strcat(row2entryS, "0.");
 8004716:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800471a:	4618      	mov	r0, r3
 800471c:	f7fb fdb8 	bl	8000290 <strlen>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004728:	4413      	add	r3, r2
 800472a:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <Take2RowEntries+0x34c>)
 800472c:	8811      	ldrh	r1, [r2, #0]
 800472e:	7892      	ldrb	r2, [r2, #2]
 8004730:	8019      	strh	r1, [r3, #0]
 8004732:	709a      	strb	r2, [r3, #2]
 8004734:	e027      	b.n	8004786 <Take2RowEntries+0x35e>
				} else if (strchr(row2entryS, '.') == NULL) { //If there is no comma in string, add one
 8004736:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800473a:	212e      	movs	r1, #46	@ 0x2e
 800473c:	4618      	mov	r0, r3
 800473e:	f00e ff99 	bl	8013674 <strchr>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d11e      	bne.n	8004786 <Take2RowEntries+0x35e>
					strcat(row2entryS, ".");
 8004748:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800474c:	4618      	mov	r0, r3
 800474e:	f7fb fd9f 	bl	8000290 <strlen>
 8004752:	4603      	mov	r3, r0
 8004754:	461a      	mov	r2, r3
 8004756:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800475a:	4413      	add	r3, r2
 800475c:	4906      	ldr	r1, [pc, #24]	@ (8004778 <Take2RowEntries+0x350>)
 800475e:	461a      	mov	r2, r3
 8004760:	460b      	mov	r3, r1
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	8013      	strh	r3, [r2, #0]
 8004766:	e00e      	b.n	8004786 <Take2RowEntries+0x35e>
 8004768:	20000110 	.word	0x20000110
 800476c:	0801709c 	.word	0x0801709c
 8004770:	080170a0 	.word	0x080170a0
 8004774:	080170a4 	.word	0x080170a4
 8004778:	080170a8 	.word	0x080170a8
 800477c:	080170ac 	.word	0x080170ac
 8004780:	080170b4 	.word	0x080170b4
				if (lastKeyPressed == 0 && strcmp(row2entryS,"0")==0/*temp == 0*/) { //If there is a leading 0 and user presses another 0, do not add it
 8004784:	bf00      	nop
				}
			}
			strcpy(CombStr2, Row2StaticString);
 8004786:	f107 030c 	add.w	r3, r7, #12
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f00f f81a 	bl	80137c6 <strcpy>
			strcat(CombStr2, row2entryS);
 8004792:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8004796:	f107 030c 	add.w	r3, r7, #12
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f00e ff5a 	bl	8013656 <strcat>
			printLCD(2, CombStr2, CURSOR_SYMBOL);
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	2203      	movs	r2, #3
 80047a8:	4619      	mov	r1, r3
 80047aa:	2002      	movs	r0, #2
 80047ac:	f000 fa38 	bl	8004c20 <printLCD>
			row2entryF = strtod(row2entryS, NULL);
 80047b0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f00d ff48 	bl	801264c <strtod>
 80047bc:	ec53 2b10 	vmov	r2, r3, d0
 80047c0:	4610      	mov	r0, r2
 80047c2:	4619      	mov	r1, r3
 80047c4:	f7fc fa20 	bl	8000c08 <__aeabi_d2f>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		while (ReadKeypadVar(ALL) != ENTERKEY || row2entryF == 0.0) {
 80047ce:	2000      	movs	r0, #0
 80047d0:	f7ff fbc0 	bl	8003f54 <ReadKeypadVar>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b0b      	cmp	r3, #11
 80047d8:	f47f af42 	bne.w	8004660 <Take2RowEntries+0x238>
 80047dc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80047e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e8:	f43f af3a 	beq.w	8004660 <Take2RowEntries+0x238>
		}
		SerialBuffer[0] = '\0';
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		sprintf(SerialBuffer, "%.2f", row2entryF);
 80047f2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80047f6:	f7fb feb7 	bl	8000568 <__aeabi_f2d>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8004802:	490e      	ldr	r1, [pc, #56]	@ (800483c <Take2RowEntries+0x414>)
 8004804:	f00e fe90 	bl	8013528 <siprintf>
		SerialPrint("Row2: ");
 8004808:	480d      	ldr	r0, [pc, #52]	@ (8004840 <Take2RowEntries+0x418>)
 800480a:	f000 fdc7 	bl	800539c <SerialPrint>
		SerialPrintln(SerialBuffer);
 800480e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fdd8 	bl	80053c8 <SerialPrintln>
	while (row2done == FALSE) {
 8004818:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800481c:	2b00      	cmp	r3, #0
 800481e:	f43f ae49 	beq.w	80044b4 <Take2RowEntries+0x8c>
	}
	// Update global variables
	LitersVar = row1entryF;
 8004822:	4a08      	ldr	r2, [pc, #32]	@ (8004844 <Take2RowEntries+0x41c>)
 8004824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004828:	6013      	str	r3, [r2, #0]
	DensityVar = row2entryF;
 800482a:	4a07      	ldr	r2, [pc, #28]	@ (8004848 <Take2RowEntries+0x420>)
 800482c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004830:	6013      	str	r3, [r2, #0]
}
 8004832:	bf00      	nop
 8004834:	37b8      	adds	r7, #184	@ 0xb8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	080170ac 	.word	0x080170ac
 8004840:	080170bc 	.word	0x080170bc
 8004844:	2000036c 	.word	0x2000036c
 8004848:	20000370 	.word	0x20000370

0800484c <LCD_Init>:
  0B01010
};


//Functions for LCD System
void LCD_Init() {
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
	// Assuming GPIO has been initialized

	HAL_Delay(15); // Wait for more than 15ms after Vcc rises to 4.5V
 8004850:	200f      	movs	r0, #15
 8004852:	f003 ff51 	bl	80086f8 <HAL_Delay>

	// Function set: 8-bit mode
	LCD_SendHalfByte(0x03);
 8004856:	2003      	movs	r0, #3
 8004858:	f000 f8ee 	bl	8004a38 <LCD_SendHalfByte>
	HAL_Delay(5); // Wait for more than 4.1ms
 800485c:	2005      	movs	r0, #5
 800485e:	f003 ff4b 	bl	80086f8 <HAL_Delay>
	LCD_SendHalfByte(0x03);
 8004862:	2003      	movs	r0, #3
 8004864:	f000 f8e8 	bl	8004a38 <LCD_SendHalfByte>
	HAL_Delay(1); // Wait for more than 100us
 8004868:	2001      	movs	r0, #1
 800486a:	f003 ff45 	bl	80086f8 <HAL_Delay>
	LCD_SendHalfByte(0x03);
 800486e:	2003      	movs	r0, #3
 8004870:	f000 f8e2 	bl	8004a38 <LCD_SendHalfByte>

	// Function set: Switch to 4-bit mode
	LCD_SendHalfByte(0x02);
 8004874:	2002      	movs	r0, #2
 8004876:	f000 f8df 	bl	8004a38 <LCD_SendHalfByte>

	// Complete function set: 4-bit mode, 2-line display, 5x8 font
	LCD_SendCommand(0x28);
 800487a:	2028      	movs	r0, #40	@ 0x28
 800487c:	f000 f838 	bl	80048f0 <LCD_SendCommand>

	// Display ON, cursor OFF, blink OFF
	LCD_SendCommand(0x0C);
 8004880:	200c      	movs	r0, #12
 8004882:	f000 f835 	bl	80048f0 <LCD_SendCommand>

	// Entry mode set: Increment cursor, no shift
	LCD_SendCommand(0x06);
 8004886:	2006      	movs	r0, #6
 8004888:	f000 f832 	bl	80048f0 <LCD_SendCommand>

	// Clear display
	LCD_SendCommand(0x01);
 800488c:	2001      	movs	r0, #1
 800488e:	f000 f82f 	bl	80048f0 <LCD_SendCommand>
	HAL_Delay(2); // Clearing the display takes 1.52ms
 8004892:	2002      	movs	r0, #2
 8004894:	f003 ff30 	bl	80086f8 <HAL_Delay>

	LCD_CreateCustomChar(0, Custom_Blank_Symbol);
 8004898:	490f      	ldr	r1, [pc, #60]	@ (80048d8 <LCD_Init+0x8c>)
 800489a:	2000      	movs	r0, #0
 800489c:	f000 f864 	bl	8004968 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(1, Custom_Enter_Symbol);
 80048a0:	490e      	ldr	r1, [pc, #56]	@ (80048dc <LCD_Init+0x90>)
 80048a2:	2001      	movs	r0, #1
 80048a4:	f000 f860 	bl	8004968 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(2, Custom_Reclean_Symbol);
 80048a8:	490d      	ldr	r1, [pc, #52]	@ (80048e0 <LCD_Init+0x94>)
 80048aa:	2002      	movs	r0, #2
 80048ac:	f000 f85c 	bl	8004968 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(3, Custom_Cursor_Symbol);
 80048b0:	490c      	ldr	r1, [pc, #48]	@ (80048e4 <LCD_Init+0x98>)
 80048b2:	2003      	movs	r0, #3
 80048b4:	f000 f858 	bl	8004968 <LCD_CreateCustomChar>
	LCD_CreateCustomChar(4, Custom_demo_cursor_Symbol);
 80048b8:	490b      	ldr	r1, [pc, #44]	@ (80048e8 <LCD_Init+0x9c>)
 80048ba:	2004      	movs	r0, #4
 80048bc:	f000 f854 	bl	8004968 <LCD_CreateCustomChar>

	pwm(LCD_LED_PWM,50);
 80048c0:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80048ec <LCD_Init+0xa0>
 80048c4:	2004      	movs	r0, #4
 80048c6:	f002 fc7f 	bl	80071c8 <pwm>
	pwm(LCD_Contrast_PWM,10);
 80048ca:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80048ce:	2003      	movs	r0, #3
 80048d0:	f002 fc7a 	bl	80071c8 <pwm>
}
 80048d4:	bf00      	nop
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200004d0 	.word	0x200004d0
 80048dc:	20000114 	.word	0x20000114
 80048e0:	2000011c 	.word	0x2000011c
 80048e4:	20000124 	.word	0x20000124
 80048e8:	2000012c 	.word	0x2000012c
 80048ec:	42480000 	.word	0x42480000

080048f0 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LCD_RS_Output_GPIO_Port, LCD_RS_Output_Pin,
 80048fa:	2200      	movs	r2, #0
 80048fc:	2102      	movs	r1, #2
 80048fe:	480a      	ldr	r0, [pc, #40]	@ (8004928 <LCD_SendCommand+0x38>)
 8004900:	f005 fb7e 	bl	800a000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET); // RS = 0 for command
	//HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET); // RW = 0 for write
	LCD_SendHalfByte(cmd >> 4); // Send higher nibble
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4618      	mov	r0, r3
 800490c:	f000 f894 	bl	8004a38 <LCD_SendHalfByte>
	LCD_SendHalfByte(cmd & 0x0F); // Send lower nibble
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f88d 	bl	8004a38 <LCD_SendHalfByte>
}
 800491e:	bf00      	nop
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40020c00 	.word	0x40020c00

0800492c <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_Output_GPIO_Port, LCD_RS_Output_Pin, GPIO_PIN_SET); // RS = 1 for data
 8004936:	2201      	movs	r2, #1
 8004938:	2102      	movs	r1, #2
 800493a:	480a      	ldr	r0, [pc, #40]	@ (8004964 <LCD_SendData+0x38>)
 800493c:	f005 fb60 	bl	800a000 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET); // RW = 0 for write

	LCD_SendHalfByte(data >> 4); // Send higher nibble
 8004940:	79fb      	ldrb	r3, [r7, #7]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	f000 f876 	bl	8004a38 <LCD_SendHalfByte>
	LCD_SendHalfByte(data & 0x0F); // Send lower nibble
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	b2db      	uxtb	r3, r3
 8004954:	4618      	mov	r0, r3
 8004956:	f000 f86f 	bl	8004a38 <LCD_SendHalfByte>
}
 800495a:	bf00      	nop
 800495c:	3708      	adds	r7, #8
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40020c00 	.word	0x40020c00

08004968 <LCD_CreateCustomChar>:

void LCD_CreateCustomChar(uint8_t location, uint8_t charmap[]) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	4603      	mov	r3, r0
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	71fb      	strb	r3, [r7, #7]
	location &= 0x07; // Only 8 locations (0-7)
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	71fb      	strb	r3, [r7, #7]
	LCD_SendCommand(0x40 | (location << 3)); // Set CGRAM address
 800497c:	79fb      	ldrb	r3, [r7, #7]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	b25b      	sxtb	r3, r3
 8004982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004986:	b25b      	sxtb	r3, r3
 8004988:	b2db      	uxtb	r3, r3
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff ffb0 	bl	80048f0 <LCD_SendCommand>
	for (int i = 0; i < 8; i++) {
 8004990:	2300      	movs	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e009      	b.n	80049aa <LCD_CreateCustomChar+0x42>
		LCD_SendData(charmap[i]);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	4413      	add	r3, r2
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff ffc4 	bl	800492c <LCD_SendData>
	for (int i = 0; i < 8; i++) {
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b07      	cmp	r3, #7
 80049ae:	ddf2      	ble.n	8004996 <LCD_CreateCustomChar+0x2e>
	}
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	460a      	mov	r2, r1
 80049c6:	71fb      	strb	r3, [r7, #7]
 80049c8:	4613      	mov	r3, r2
 80049ca:	71bb      	strb	r3, [r7, #6]
	uint8_t address;
	// Each row has different starting addresses
	switch (row) {
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d819      	bhi.n	8004a06 <LCD_SetCursor+0x4a>
 80049d2:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <LCD_SetCursor+0x1c>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049ef 	.word	0x080049ef
 80049e0:	080049f7 	.word	0x080049f7
 80049e4:	080049ff 	.word	0x080049ff
	case 0:
		address = 0x00 + col;
 80049e8:	79bb      	ldrb	r3, [r7, #6]
 80049ea:	73fb      	strb	r3, [r7, #15]
		break; // 1st row starting from 0x00
 80049ec:	e00d      	b.n	8004a0a <LCD_SetCursor+0x4e>
	case 1:
		address = 0x40 + col;
 80049ee:	79bb      	ldrb	r3, [r7, #6]
 80049f0:	3340      	adds	r3, #64	@ 0x40
 80049f2:	73fb      	strb	r3, [r7, #15]
		break; // 2nd row starting from 0x40
 80049f4:	e009      	b.n	8004a0a <LCD_SetCursor+0x4e>
	case 2:
		address = 0x14 + col;
 80049f6:	79bb      	ldrb	r3, [r7, #6]
 80049f8:	3314      	adds	r3, #20
 80049fa:	73fb      	strb	r3, [r7, #15]
		break; // 3rd row starting from 0x14
 80049fc:	e005      	b.n	8004a0a <LCD_SetCursor+0x4e>
	case 3:
		address = 0x54 + col;
 80049fe:	79bb      	ldrb	r3, [r7, #6]
 8004a00:	3354      	adds	r3, #84	@ 0x54
 8004a02:	73fb      	strb	r3, [r7, #15]
		break; // 4th row starting from 0x54
 8004a04:	e001      	b.n	8004a0a <LCD_SetCursor+0x4e>
	default:
		address = 0x00; // Default to first row if invalid row number
 8004a06:	2300      	movs	r3, #0
 8004a08:	73fb      	strb	r3, [r7, #15]
	}
	// Send command to set DDRAM address
	LCD_SendCommand(0x80 | address);
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ff6c 	bl	80048f0 <LCD_SendCommand>
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <LCD_Clear>:

void LCD_Clear(void) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
	LCD_ClearStringBuffer();
 8004a24:	f000 f85e 	bl	8004ae4 <LCD_ClearStringBuffer>
	LCD_SendCommand(0x01); // Clear display command
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f7ff ff61 	bl	80048f0 <LCD_SendCommand>
	HAL_Delay(2); // Wait for the command to be processed (clearing takes time)
 8004a2e:	2002      	movs	r0, #2
 8004a30:	f003 fe62 	bl	80086f8 <HAL_Delay>
}
 8004a34:	bf00      	nop
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <LCD_SendHalfByte>:
void LCD_SendHalfByte(uint8_t data) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D4_Output_GPIO_Port, LCD_D4_Output_Pin,
			(data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_Output_GPIO_Port, LCD_D4_Output_Pin,
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2108      	movs	r1, #8
 8004a4e:	4824      	ldr	r0, [pc, #144]	@ (8004ae0 <LCD_SendHalfByte+0xa8>)
 8004a50:	f005 fad6 	bl	800a000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_Output_GPIO_Port, LCD_D5_Output_Pin,
			(data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	105b      	asrs	r3, r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_Output_GPIO_Port, LCD_D5_Output_Pin,
 8004a60:	461a      	mov	r2, r3
 8004a62:	2110      	movs	r1, #16
 8004a64:	481e      	ldr	r0, [pc, #120]	@ (8004ae0 <LCD_SendHalfByte+0xa8>)
 8004a66:	f005 facb 	bl	800a000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_Output_GPIO_Port, LCD_D6_Output_Pin,
			(data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	109b      	asrs	r3, r3, #2
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_Output_GPIO_Port, LCD_D6_Output_Pin,
 8004a76:	461a      	mov	r2, r3
 8004a78:	2140      	movs	r1, #64	@ 0x40
 8004a7a:	4819      	ldr	r0, [pc, #100]	@ (8004ae0 <LCD_SendHalfByte+0xa8>)
 8004a7c:	f005 fac0 	bl	800a000 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_Output_GPIO_Port, LCD_D7_Output_Pin,
			(data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	10db      	asrs	r3, r3, #3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_Output_GPIO_Port, LCD_D7_Output_Pin,
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2180      	movs	r1, #128	@ 0x80
 8004a90:	4813      	ldr	r0, [pc, #76]	@ (8004ae0 <LCD_SendHalfByte+0xa8>)
 8004a92:	f005 fab5 	bl	800a000 <HAL_GPIO_WritePin>
	// Pulse the Enable pin
	HAL_GPIO_WritePin(LCD_EN_Output_GPIO_Port, LCD_EN_Output_Pin, GPIO_PIN_SET);
 8004a96:	2201      	movs	r2, #1
 8004a98:	2104      	movs	r1, #4
 8004a9a:	4811      	ldr	r0, [pc, #68]	@ (8004ae0 <LCD_SendHalfByte+0xa8>)
 8004a9c:	f005 fab0 	bl	800a000 <HAL_GPIO_WritePin>
	//HAL_Delay(1); // Delay for enable pulse width
	for (uint16_t i = 0; i < 400; i++){ //140 is supposed to be 10uS
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	81fb      	strh	r3, [r7, #14]
 8004aa4:	e003      	b.n	8004aae <LCD_SendHalfByte+0x76>
		__NOP();
 8004aa6:	bf00      	nop
	for (uint16_t i = 0; i < 400; i++){ //140 is supposed to be 10uS
 8004aa8:	89fb      	ldrh	r3, [r7, #14]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	81fb      	strh	r3, [r7, #14]
 8004aae:	89fb      	ldrh	r3, [r7, #14]
 8004ab0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004ab4:	d3f7      	bcc.n	8004aa6 <LCD_SendHalfByte+0x6e>
	}
	HAL_GPIO_WritePin(LCD_EN_Output_GPIO_Port, LCD_EN_Output_Pin,
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	2104      	movs	r1, #4
 8004aba:	4809      	ldr	r0, [pc, #36]	@ (8004ae0 <LCD_SendHalfByte+0xa8>)
 8004abc:	f005 faa0 	bl	800a000 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
	//HAL_Delay(1);
	for (uint16_t i = 0; i < 400; i++){
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	81bb      	strh	r3, [r7, #12]
 8004ac4:	e003      	b.n	8004ace <LCD_SendHalfByte+0x96>
		__NOP();
 8004ac6:	bf00      	nop
	for (uint16_t i = 0; i < 400; i++){
 8004ac8:	89bb      	ldrh	r3, [r7, #12]
 8004aca:	3301      	adds	r3, #1
 8004acc:	81bb      	strh	r3, [r7, #12]
 8004ace:	89bb      	ldrh	r3, [r7, #12]
 8004ad0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004ad4:	d3f7      	bcc.n	8004ac6 <LCD_SendHalfByte+0x8e>
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40020c00 	.word	0x40020c00

08004ae4 <LCD_ClearStringBuffer>:

void LCD_ClearStringBuffer(void) {
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(stringBuffer); i++) {
 8004aea:	2300      	movs	r3, #0
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e007      	b.n	8004b00 <LCD_ClearStringBuffer+0x1c>
		stringBuffer[i] = '\0';
 8004af0:	4a08      	ldr	r2, [pc, #32]	@ (8004b14 <LCD_ClearStringBuffer+0x30>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(stringBuffer); i++) {
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3301      	adds	r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b14      	cmp	r3, #20
 8004b04:	d9f4      	bls.n	8004af0 <LCD_ClearStringBuffer+0xc>
	}

//	memset(stringBuffer, 0, 21);
}
 8004b06:	bf00      	nop
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	200004b8 	.word	0x200004b8

08004b18 <printLCDInt>:
		}

	}
}

void printLCDInt(int row, char *data, int number,int totalCycle) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08e      	sub	sp, #56	@ 0x38
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
    int localcounter = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    char numberStr[22];
    if (row < 0 || row >= LCD_ROW_COUNT) {
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	db6c      	blt.n	8004c0a <printLCDInt+0xf2>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	dc69      	bgt.n	8004c0a <printLCDInt+0xf2>
        return;
    }
    strncpy(lastLCDData[row], data, MAX_STRING_LENGTH - 1);
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	4413      	add	r3, r2
 8004b3e:	00da      	lsls	r2, r3, #3
 8004b40:	1ad2      	subs	r2, r2, r3
 8004b42:	4b34      	ldr	r3, [pc, #208]	@ (8004c14 <printLCDInt+0xfc>)
 8004b44:	4413      	add	r3, r2
 8004b46:	2214      	movs	r2, #20
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00e fdb1 	bl	80136b2 <strncpy>
    lastLCDData[row][MAX_STRING_LENGTH - 1] = '\0';
 8004b50:	4930      	ldr	r1, [pc, #192]	@ (8004c14 <printLCDInt+0xfc>)
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	00da      	lsls	r2, r3, #3
 8004b5c:	1ad2      	subs	r2, r2, r3
 8004b5e:	188b      	adds	r3, r1, r2
 8004b60:	3314      	adds	r3, #20
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
    if(totalCycle > 0)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	dd09      	ble.n	8004b80 <printLCDInt+0x68>
    	snprintf(numberStr, sizeof(numberStr), "%d/%d", number,totalCycle);
 8004b6c:	f107 0010 	add.w	r0, r7, #16
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a28      	ldr	r2, [pc, #160]	@ (8004c18 <printLCDInt+0x100>)
 8004b78:	2116      	movs	r1, #22
 8004b7a:	f00e fca1 	bl	80134c0 <sniprintf>
 8004b7e:	e006      	b.n	8004b8e <printLCDInt+0x76>
    else
       	snprintf(numberStr, sizeof(numberStr), "%d", number);
 8004b80:	f107 0010 	add.w	r0, r7, #16
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a25      	ldr	r2, [pc, #148]	@ (8004c1c <printLCDInt+0x104>)
 8004b88:	2116      	movs	r1, #22
 8004b8a:	f00e fc99 	bl	80134c0 <sniprintf>
    LCD_SetCursor(row, 0);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff11 	bl	80049bc <LCD_SetCursor>
    	// Print the data
    	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004b9a:	e009      	b.n	8004bb0 <printLCDInt+0x98>
    		LCD_SendData(*data++);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	60ba      	str	r2, [r7, #8]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fec1 	bl	800492c <LCD_SendData>
    		localcounter++;
 8004baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bac:	3301      	adds	r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <printLCDInt+0xa6>
 8004bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bba:	2b13      	cmp	r3, #19
 8004bbc:	ddee      	ble.n	8004b9c <printLCDInt+0x84>
    	}
    	for (int i = 0; numberStr[i] != '\0' && localcounter < LCD_COLUMN_COUNT; i++) {
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc2:	e00d      	b.n	8004be0 <printLCDInt+0xc8>
    	        LCD_SendData(numberStr[i]);
 8004bc4:	f107 0210 	add.w	r2, r7, #16
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff feac 	bl	800492c <LCD_SendData>
    	        localcounter++;
 8004bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	for (int i = 0; numberStr[i] != '\0' && localcounter < LCD_COLUMN_COUNT; i++) {
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	3301      	adds	r3, #1
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004be0:	f107 0210 	add.w	r2, r7, #16
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	4413      	add	r3, r2
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <printLCDInt+0xea>
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	2b13      	cmp	r3, #19
 8004bf2:	dde7      	ble.n	8004bc4 <printLCDInt+0xac>
    	LCD_SendData(numberStr);
    	localcounter++;
    	}
    	*/
    	//Fill rest of column with empty space
    	while(localcounter < LCD_COLUMN_COUNT){
 8004bf4:	e005      	b.n	8004c02 <printLCDInt+0xea>
    		LCD_SendData(0);
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	f7ff fe98 	bl	800492c <LCD_SendData>
    		localcounter++;
 8004bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bfe:	3301      	adds	r3, #1
 8004c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	while(localcounter < LCD_COLUMN_COUNT){
 8004c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c04:	2b13      	cmp	r3, #19
 8004c06:	ddf6      	ble.n	8004bf6 <printLCDInt+0xde>
 8004c08:	e000      	b.n	8004c0c <printLCDInt+0xf4>
        return;
 8004c0a:	bf00      	nop
    }
}
 8004c0c:	3730      	adds	r7, #48	@ 0x30
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	200003f8 	.word	0x200003f8
 8004c18:	080170d4 	.word	0x080170d4
 8004c1c:	080170dc 	.word	0x080170dc

08004c20 <printLCD>:
		localcounter++;
	}
}
*/

void printLCD(int row, char *data, int smiley) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	int localcounter = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
	if (row < 0 || row >= LCD_ROW_COUNT) {
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	db58      	blt.n	8004ce8 <printLCD+0xc8>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	dc55      	bgt.n	8004ce8 <printLCD+0xc8>
		return; // Row is out of bounds
	}
	// Store the data in the global array lastLCDData
	strncpy(lastLCDData[row], data, MAX_STRING_LENGTH - 1);
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	00da      	lsls	r2, r3, #3
 8004c46:	1ad2      	subs	r2, r2, r3
 8004c48:	4b29      	ldr	r3, [pc, #164]	@ (8004cf0 <printLCD+0xd0>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	2214      	movs	r2, #20
 8004c4e:	68b9      	ldr	r1, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f00e fd2e 	bl	80136b2 <strncpy>
	lastLCDData[row][MAX_STRING_LENGTH - 1] = '\0'; // Ensure null termination
 8004c56:	4926      	ldr	r1, [pc, #152]	@ (8004cf0 <printLCD+0xd0>)
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	00da      	lsls	r2, r3, #3
 8004c62:	1ad2      	subs	r2, r2, r3
 8004c64:	188b      	adds	r3, r1, r2
 8004c66:	3314      	adds	r3, #20
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
	// Store the smiley (custom character) code in lastLCDCustom
	lastLCDCustom[row] = smiley;
 8004c6c:	4921      	ldr	r1, [pc, #132]	@ (8004cf4 <printLCD+0xd4>)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// Set cursor position
	LCD_SetCursor(row, 0);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fe9d 	bl	80049bc <LCD_SetCursor>
	// Print the data
	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004c82:	e009      	b.n	8004c98 <printLCD+0x78>
		LCD_SendData(*data++);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	60ba      	str	r2, [r7, #8]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fe4d 	bl	800492c <LCD_SendData>
		localcounter++;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3301      	adds	r3, #1
 8004c96:	617b      	str	r3, [r7, #20]
	while (*data && localcounter < (LCD_COLUMN_COUNT)) {
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <printLCD+0x86>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	2b13      	cmp	r3, #19
 8004ca4:	ddee      	ble.n	8004c84 <printLCD+0x64>
	}
	// Check the length of the data and print the smiley if there is space
	if (strlen(lastLCDData[row]) < LCD_COLUMN_COUNT) {
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	00da      	lsls	r2, r3, #3
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <printLCD+0xd0>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb faea 	bl	8000290 <strlen>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b13      	cmp	r3, #19
 8004cc0:	d80e      	bhi.n	8004ce0 <printLCD+0xc0>
		LCD_SendData(smiley);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fe30 	bl	800492c <LCD_SendData>
		localcounter++;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
	}
	//Fill rest of column with empty space
	while(localcounter < LCD_COLUMN_COUNT){
 8004cd2:	e005      	b.n	8004ce0 <printLCD+0xc0>
		LCD_SendData(0);
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f7ff fe29 	bl	800492c <LCD_SendData>
		localcounter++;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
	while(localcounter < LCD_COLUMN_COUNT){
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2b13      	cmp	r3, #19
 8004ce4:	ddf6      	ble.n	8004cd4 <printLCD+0xb4>
 8004ce6:	e000      	b.n	8004cea <printLCD+0xca>
		return; // Row is out of bounds
 8004ce8:	bf00      	nop
	}
}
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	200003f8 	.word	0x200003f8
 8004cf4:	2000044c 	.word	0x2000044c

08004cf8 <LCDRGBControl>:

void LCDRGBControl(int brightness) {
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	if (brightness > 100) {
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b64      	cmp	r3, #100	@ 0x64
 8004d04:	dd02      	ble.n	8004d0c <LCDRGBControl+0x14>
		brightness = 100;
 8004d06:	2364      	movs	r3, #100	@ 0x64
 8004d08:	607b      	str	r3, [r7, #4]
 8004d0a:	e004      	b.n	8004d16 <LCDRGBControl+0x1e>
		} else if (brightness < 0) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da01      	bge.n	8004d16 <LCDRGBControl+0x1e>
			brightness = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
		}
		int contrast = 100 - brightness;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8004d1c:	60fb      	str	r3, [r7, #12]
	pwm(LCD_Contrast_PWM, contrast);  //Pins are Common Anode
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d28:	eeb0 0a67 	vmov.f32	s0, s15
 8004d2c:	2003      	movs	r0, #3
 8004d2e:	f002 fa4b 	bl	80071c8 <pwm>
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <powerLEDControl>:
	for (int i = 0; i < LCD_ROW_COUNT; i++) {
		printLCD(i, lastLCDData[i], lastLCDCustom[i]);
	}
}

void powerLEDControl(int state) {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	if (state == OFF) {
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d107      	bne.n	8004d5a <powerLEDControl+0x1e>
		digitalWrite(Power_LED_Output, LOW);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fe f82f 	bl	8002db0 <digitalWrite>
		isPowerLEDOn = FALSE;
 8004d52:	4b09      	ldr	r3, [pc, #36]	@ (8004d78 <powerLEDControl+0x3c>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
	} else if (state == ON) {
		digitalWrite(Power_LED_Output, HIGH);
		isPowerLEDOn = TRUE;
	}
}
 8004d58:	e009      	b.n	8004d6e <powerLEDControl+0x32>
	} else if (state == ON) {
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d106      	bne.n	8004d6e <powerLEDControl+0x32>
		digitalWrite(Power_LED_Output, HIGH);
 8004d60:	2101      	movs	r1, #1
 8004d62:	2000      	movs	r0, #0
 8004d64:	f7fe f824 	bl	8002db0 <digitalWrite>
		isPowerLEDOn = TRUE;
 8004d68:	4b03      	ldr	r3, [pc, #12]	@ (8004d78 <powerLEDControl+0x3c>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	2000049d 	.word	0x2000049d

08004d7c <controlLCDContrast>:

void controlLCDContrast(int contrastLevel) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
	if (contrastLevel > 100) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	dd02      	ble.n	8004d90 <controlLCDContrast+0x14>
		contrastLevel = 100;
 8004d8a:	2364      	movs	r3, #100	@ 0x64
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	e004      	b.n	8004d9a <controlLCDContrast+0x1e>
	} else if (contrastLevel < 0) {
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da01      	bge.n	8004d9a <controlLCDContrast+0x1e>
		contrastLevel = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
	}
	int contrast = 100 - contrastLevel;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8004da0:	60fb      	str	r3, [r7, #12]
	pwm(LCD_Contrast_PWM, contrast);  //Change LCD contrast
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dac:	eeb0 0a67 	vmov.f32	s0, s15
 8004db0:	2003      	movs	r0, #3
 8004db2:	f002 fa09 	bl	80071c8 <pwm>
}
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <SendTareWeight>:
/**
  * @brief  Function to send the Weight after Sending TARE command.
  * @Param   TareWeight which is the total weight or the weight when not zero
  * @retval None
  */
static void SendTareWeight(int Tareweight) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
    char buffer[7]= {0};// Allocate enough space for the number (max 10 digits)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	f107 030c 	add.w	r3, r7, #12
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	460a      	mov	r2, r1
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	460a      	mov	r2, r1
 8004dd8:	709a      	strb	r2, [r3, #2]
    sprintf(buffer, "%d", Tareweight);  // Convert integer to string
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	4909      	ldr	r1, [pc, #36]	@ (8004e08 <SendTareWeight+0x48>)
 8004de2:	4618      	mov	r0, r3
 8004de4:	f00e fba0 	bl	8013528 <siprintf>

    // Transmit data using DMA
    if (HAL_UART_Transmit_DMA(&huart3, (uint8_t*)buffer,7) != HAL_OK) {
 8004de8:	f107 0308 	add.w	r3, r7, #8
 8004dec:	2207      	movs	r2, #7
 8004dee:	4619      	mov	r1, r3
 8004df0:	4806      	ldr	r0, [pc, #24]	@ (8004e0c <SendTareWeight+0x4c>)
 8004df2:	f007 fc05 	bl	800c600 <HAL_UART_Transmit_DMA>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <SendTareWeight+0x40>
        Error_Handler();  // Handle errors if transmission fails
 8004dfc:	f002 f9de 	bl	80071bc <Error_Handler>
    }
}
 8004e00:	bf00      	nop
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	080170e0 	.word	0x080170e0
 8004e0c:	20002c30 	.word	0x20002c30

08004e10 <TareAll>:
/**
  * @brief  Function to send the "TARE" command using interrupt-based transmission.
  * @retval None
  */
void TareAll(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
	 HAL_Delay(2000);
 8004e16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8004e1a:	f003 fc6d 	bl	80086f8 <HAL_Delay>
    // Start interrupt-based transmission of the "TARE" string
	   uint8_t tare[4] = "TARE";
 8004e1e:	4b10      	ldr	r3, [pc, #64]	@ (8004e60 <TareAll+0x50>)
 8004e20:	607b      	str	r3, [r7, #4]

	   //sprintf(char_buffer, "%s%d", Data,Total_Weight);
	   if(HAL_UART_Transmit_DMA(&huart3, tare, sizeof(tare))!= HAL_OK)
 8004e22:	1d3b      	adds	r3, r7, #4
 8004e24:	2204      	movs	r2, #4
 8004e26:	4619      	mov	r1, r3
 8004e28:	480e      	ldr	r0, [pc, #56]	@ (8004e64 <TareAll+0x54>)
 8004e2a:	f007 fbe9 	bl	800c600 <HAL_UART_Transmit_DMA>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d001      	beq.n	8004e38 <TareAll+0x28>
	   {
			  Error_Handler();
 8004e34:	f002 f9c2 	bl	80071bc <Error_Handler>
	   }
	   HAL_Delay(10);
 8004e38:	200a      	movs	r0, #10
 8004e3a:	f003 fc5d 	bl	80086f8 <HAL_Delay>
	   SendTareWeight(tareSend);
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e68 <TareAll+0x58>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff ffbc 	bl	8004dc0 <SendTareWeight>
	   SerialPrintln("Taring the system");
 8004e48:	4808      	ldr	r0, [pc, #32]	@ (8004e6c <TareAll+0x5c>)
 8004e4a:	f000 fabd 	bl	80053c8 <SerialPrintln>
	   HAL_Delay(1000);
 8004e4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e52:	f003 fc51 	bl	80086f8 <HAL_Delay>
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	45524154 	.word	0x45524154
 8004e64:	20002c30 	.word	0x20002c30
 8004e68:	20000394 	.word	0x20000394
 8004e6c:	080170e4 	.word	0x080170e4

08004e70 <ReadLoadCellAVG>:
  * @brief  Processes the received 8-byte message and displays the weight if valid.
  * @param  message: Pointer to the received 8-byte message buffer.
  * @retval None
  */
void ReadLoadCellAVG()
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
	int current_A = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
	//startUARTReception();
    uint32_t syncWord = (rxBuffer[0] << 24) | (rxBuffer[1] << 16) | (rxBuffer[2] << 8) | rxBuffer[3];
 8004e7a:	4b22      	ldr	r3, [pc, #136]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	061a      	lsls	r2, r3, #24
 8004e80:	4b20      	ldr	r3, [pc, #128]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	041b      	lsls	r3, r3, #16
 8004e86:	431a      	orrs	r2, r3
 8004e88:	4b1e      	ldr	r3, [pc, #120]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004e8a:	789b      	ldrb	r3, [r3, #2]
 8004e8c:	021b      	lsls	r3, r3, #8
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	4a1c      	ldr	r2, [pc, #112]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004e92:	78d2      	ldrb	r2, [r2, #3]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	607b      	str	r3, [r7, #4]
    if (syncWord != SYNCWORD)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 3faa 	cmp.w	r3, #2863311530	@ 0xaaaaaaaa
 8004e9e:	d129      	bne.n	8004ef4 <ReadLoadCellAVG+0x84>
    {
        return;
    }
    //Extract the weight values
    int16_t value1 = (rxBuffer[4] << 8) | rxBuffer[5];  // First weight value
 8004ea0:	4b18      	ldr	r3, [pc, #96]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	4b16      	ldr	r3, [pc, #88]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004eaa:	795b      	ldrb	r3, [r3, #5]
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	807b      	strh	r3, [r7, #2]
    int16_t value2 = (rxBuffer[6] << 8) | rxBuffer[7];  // Repeated weight value
 8004eb2:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004eb4:	799b      	ldrb	r3, [r3, #6]
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	b21a      	sxth	r2, r3
 8004eba:	4b12      	ldr	r3, [pc, #72]	@ (8004f04 <ReadLoadCellAVG+0x94>)
 8004ebc:	79db      	ldrb	r3, [r3, #7]
 8004ebe:	b21b      	sxth	r3, r3
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	803b      	strh	r3, [r7, #0]
    if (value1 != value2)
 8004ec4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ec8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d113      	bne.n	8004ef8 <ReadLoadCellAVG+0x88>
    {
        return;
    }
   // value1 = value1 * CORRECTION_FACTOR;
    for(int i = 0; i < AVERAGE; i++){
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	e007      	b.n	8004ee6 <ReadLoadCellAVG+0x76>
       	current_A = current_A + value1;
 8004ed6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < AVERAGE; i++){
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	ddf4      	ble.n	8004ed6 <ReadLoadCellAVG+0x66>
    }
    current_A = current_A / AVERAGE;
    //futureFilter(current_A);
    Total_Weight = current_A;
 8004eec:	4a06      	ldr	r2, [pc, #24]	@ (8004f08 <ReadLoadCellAVG+0x98>)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e002      	b.n	8004efa <ReadLoadCellAVG+0x8a>
        return;
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <ReadLoadCellAVG+0x8a>
        return;
 8004ef8:	bf00      	nop
    // Re-enable UART reception for the next message
    //startUARTReception();
}
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	200028d4 	.word	0x200028d4
 8004f08:	2000035c 	.word	0x2000035c

08004f0c <clear_buffer>:
	while (*buf++ != '\0') i++;
	return i;
}

void clear_buffer (void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8004f12:	2300      	movs	r3, #0
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	e007      	b.n	8004f28 <clear_buffer+0x1c>
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <clear_buffer+0x30>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3301      	adds	r3, #1
 8004f26:	607b      	str	r3, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f2c:	ddf4      	ble.n	8004f18 <clear_buffer+0xc>
}
 8004f2e:	bf00      	nop
 8004f30:	bf00      	nop
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	2000275c 	.word	0x2000275c

08004f40 <send_uart>:

void send_uart (char *string)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen (string);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fb f9a1 	bl	8000290 <strlen>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, (uint8_t *) string, len, HAL_MAX_DELAY);  // transmit in blocking mode
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4803      	ldr	r0, [pc, #12]	@ (8004f6c <send_uart+0x2c>)
 8004f5e:	f007 fac3 	bl	800c4e8 <HAL_UART_Transmit>
}
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20002be8 	.word	0x20002be8

08004f70 <sd_Card_Check>:


void sd_Card_Check(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af02      	add	r7, sp, #8
	 fresult = f_mount(&fs, "/", 1);
 8004f76:	2201      	movs	r2, #1
 8004f78:	4945      	ldr	r1, [pc, #276]	@ (8005090 <sd_Card_Check+0x120>)
 8004f7a:	4846      	ldr	r0, [pc, #280]	@ (8005094 <sd_Card_Check+0x124>)
 8004f7c:	f00b f98e 	bl	801029c <f_mount>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b44      	ldr	r3, [pc, #272]	@ (8005098 <sd_Card_Check+0x128>)
 8004f86:	701a      	strb	r2, [r3, #0]
	  	if (fresult != FR_OK){
 8004f88:	4b43      	ldr	r3, [pc, #268]	@ (8005098 <sd_Card_Check+0x128>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01c      	beq.n	8004fca <sd_Card_Check+0x5a>
				send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8004f90:	4842      	ldr	r0, [pc, #264]	@ (800509c <sd_Card_Check+0x12c>)
 8004f92:	f7ff ffd5 	bl	8004f40 <send_uart>
				if (f_mkfs("", FM_FAT32, 0, work, sizeof(work)) != FR_OK) {
 8004f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4b40      	ldr	r3, [pc, #256]	@ (80050a0 <sd_Card_Check+0x130>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4840      	ldr	r0, [pc, #256]	@ (80050a4 <sd_Card_Check+0x134>)
 8004fa4:	f00b ffd8 	bl	8010f58 <f_mkfs>
					// Handle format error
				}
				fresult = f_mount(&fs, "/", 1);
 8004fa8:	2201      	movs	r2, #1
 8004faa:	4939      	ldr	r1, [pc, #228]	@ (8005090 <sd_Card_Check+0x120>)
 8004fac:	4839      	ldr	r0, [pc, #228]	@ (8005094 <sd_Card_Check+0x124>)
 8004fae:	f00b f975 	bl	801029c <f_mount>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b38      	ldr	r3, [pc, #224]	@ (8005098 <sd_Card_Check+0x128>)
 8004fb8:	701a      	strb	r2, [r3, #0]
				if (fresult == FR_OK){
 8004fba:	4b37      	ldr	r3, [pc, #220]	@ (8005098 <sd_Card_Check+0x128>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <sd_Card_Check+0x60>
					send_uart ("Mounted SD CARD Sucesfully ...\n\n");
 8004fc2:	4839      	ldr	r0, [pc, #228]	@ (80050a8 <sd_Card_Check+0x138>)
 8004fc4:	f7ff ffbc 	bl	8004f40 <send_uart>
 8004fc8:	e002      	b.n	8004fd0 <sd_Card_Check+0x60>
				}
	  		}
	  	else send_uart("SD CARD mounted successfully...\n\n");
 8004fca:	4838      	ldr	r0, [pc, #224]	@ (80050ac <sd_Card_Check+0x13c>)
 8004fcc:	f7ff ffb8 	bl	8004f40 <send_uart>

	  	/*************** Card capacity details ********************/

	  	/* Check free space */
	 	f_getfree("", &fre_clust, &pfs);
 8004fd0:	4a37      	ldr	r2, [pc, #220]	@ (80050b0 <sd_Card_Check+0x140>)
 8004fd2:	4938      	ldr	r1, [pc, #224]	@ (80050b4 <sd_Card_Check+0x144>)
 8004fd4:	4833      	ldr	r0, [pc, #204]	@ (80050a4 <sd_Card_Check+0x134>)
 8004fd6:	f00b ff0a 	bl	8010dee <f_getfree>
	  	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8004fda:	4b35      	ldr	r3, [pc, #212]	@ (80050b0 <sd_Card_Check+0x140>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	3b02      	subs	r3, #2
 8004fe2:	4a33      	ldr	r2, [pc, #204]	@ (80050b0 <sd_Card_Check+0x140>)
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	8952      	ldrh	r2, [r2, #10]
 8004fe8:	fb02 f303 	mul.w	r3, r2, r3
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fb fa99 	bl	8000524 <__aeabi_ui2d>
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	4b30      	ldr	r3, [pc, #192]	@ (80050b8 <sd_Card_Check+0x148>)
 8004ff8:	f7fb fb0e 	bl	8000618 <__aeabi_dmul>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	f7fb fde0 	bl	8000bc8 <__aeabi_d2uiz>
 8005008:	4603      	mov	r3, r0
 800500a:	4a2c      	ldr	r2, [pc, #176]	@ (80050bc <sd_Card_Check+0x14c>)
 800500c:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800500e:	4b2b      	ldr	r3, [pc, #172]	@ (80050bc <sd_Card_Check+0x14c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	492a      	ldr	r1, [pc, #168]	@ (80050c0 <sd_Card_Check+0x150>)
 8005016:	482b      	ldr	r0, [pc, #172]	@ (80050c4 <sd_Card_Check+0x154>)
 8005018:	f00e fa86 	bl	8013528 <siprintf>
	  	send_uart(buffer);
 800501c:	4829      	ldr	r0, [pc, #164]	@ (80050c4 <sd_Card_Check+0x154>)
 800501e:	f7ff ff8f 	bl	8004f40 <send_uart>
	  	clear_buffer();
 8005022:	f7ff ff73 	bl	8004f0c <clear_buffer>
	  	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8005026:	4b22      	ldr	r3, [pc, #136]	@ (80050b0 <sd_Card_Check+0x140>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	895b      	ldrh	r3, [r3, #10]
 800502c:	461a      	mov	r2, r3
 800502e:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <sd_Card_Check+0x144>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	fb02 f303 	mul.w	r3, r2, r3
 8005036:	4618      	mov	r0, r3
 8005038:	f7fb fa74 	bl	8000524 <__aeabi_ui2d>
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	4b1d      	ldr	r3, [pc, #116]	@ (80050b8 <sd_Card_Check+0x148>)
 8005042:	f7fb fae9 	bl	8000618 <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f7fb fdbb 	bl	8000bc8 <__aeabi_d2uiz>
 8005052:	4603      	mov	r3, r0
 8005054:	4a1c      	ldr	r2, [pc, #112]	@ (80050c8 <sd_Card_Check+0x158>)
 8005056:	6013      	str	r3, [r2, #0]
	  	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8005058:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <sd_Card_Check+0x158>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	461a      	mov	r2, r3
 800505e:	491b      	ldr	r1, [pc, #108]	@ (80050cc <sd_Card_Check+0x15c>)
 8005060:	4818      	ldr	r0, [pc, #96]	@ (80050c4 <sd_Card_Check+0x154>)
 8005062:	f00e fa61 	bl	8013528 <siprintf>
	  	send_uart(buffer);
 8005066:	4817      	ldr	r0, [pc, #92]	@ (80050c4 <sd_Card_Check+0x154>)
 8005068:	f7ff ff6a 	bl	8004f40 <send_uart>
	  	clear_buffer();
 800506c:	f7ff ff4e 	bl	8004f0c <clear_buffer>

	  	/************* The following operation is using PUTS and GETS *********************/

	  	/* Open file to write/ create a file if it doesn't exist */
	  	 fresult = f_open(&fil, "TimeLine.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8005070:	2213      	movs	r2, #19
 8005072:	4917      	ldr	r1, [pc, #92]	@ (80050d0 <sd_Card_Check+0x160>)
 8005074:	4817      	ldr	r0, [pc, #92]	@ (80050d4 <sd_Card_Check+0x164>)
 8005076:	f00b f957 	bl	8010328 <f_open>
 800507a:	4603      	mov	r3, r0
 800507c:	461a      	mov	r2, r3
 800507e:	4b06      	ldr	r3, [pc, #24]	@ (8005098 <sd_Card_Check+0x128>)
 8005080:	701a      	strb	r2, [r3, #0]
	    send_uart(buffer);
	  	send_uart("\n\n");
*/


	  	f_close(&fil);
 8005082:	4814      	ldr	r0, [pc, #80]	@ (80050d4 <sd_Card_Check+0x164>)
 8005084:	f00b fe89 	bl	8010d9a <f_close>

}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	080170f8 	.word	0x080170f8
 8005094:	200004e0 	.word	0x200004e0
 8005098:	20002548 	.word	0x20002548
 800509c:	080170fc 	.word	0x080170fc
 80050a0:	2000255c 	.word	0x2000255c
 80050a4:	08017120 	.word	0x08017120
 80050a8:	08017124 	.word	0x08017124
 80050ac:	08017148 	.word	0x08017148
 80050b0:	2000254c 	.word	0x2000254c
 80050b4:	20002550 	.word	0x20002550
 80050b8:	3fe00000 	.word	0x3fe00000
 80050bc:	20002554 	.word	0x20002554
 80050c0:	0801716c 	.word	0x0801716c
 80050c4:	2000275c 	.word	0x2000275c
 80050c8:	20002558 	.word	0x20002558
 80050cc:	08017188 	.word	0x08017188
 80050d0:	080171a4 	.word	0x080171a4
 80050d4:	20001518 	.word	0x20001518

080050d8 <LoadTimeFromSDCard>:

void LoadTimeFromSDCard(uint32_t *hours, uint32_t *minutes, uint32_t *seconds) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80050de:	af02      	add	r7, sp, #8
 80050e0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80050e4:	f843 0c4c 	str.w	r0, [r3, #-76]
 80050e8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80050ec:	f843 1c50 	str.w	r1, [r3, #-80]
 80050f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80050f4:	f843 2c54 	str.w	r2, [r3, #-84]
    FIL file;
    char time_str[16];
    FRESULT fresult;

    // Initialize time to zero in case of errors
    *hours = 0;
 80050f8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80050fc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
    *minutes = 0;
 8005104:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005108:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
    *seconds = 0;
 8005110:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005114:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

    /* Open file for reading */
    fresult = f_open(&file, "TimeLine.txt", FA_READ);
 800511c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005120:	3b14      	subs	r3, #20
 8005122:	2201      	movs	r2, #1
 8005124:	492a      	ldr	r1, [pc, #168]	@ (80051d0 <LoadTimeFromSDCard+0xf8>)
 8005126:	4618      	mov	r0, r3
 8005128:	f00b f8fe 	bl	8010328 <f_open>
 800512c:	4603      	mov	r3, r0
 800512e:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005132:	f102 0217 	add.w	r2, r2, #23
 8005136:	7013      	strb	r3, [r2, #0]
    if (fresult == FR_OK) {
 8005138:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800513c:	f103 0317 	add.w	r3, r3, #23
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d13d      	bne.n	80051c2 <LoadTimeFromSDCard+0xea>
        // Read the last saved time from the file
        UINT bytes_read;
        fresult = f_read(&file, time_str, sizeof(time_str) - 1, &bytes_read);
 8005146:	f107 0318 	add.w	r3, r7, #24
 800514a:	3b08      	subs	r3, #8
 800514c:	f107 0118 	add.w	r1, r7, #24
 8005150:	3904      	subs	r1, #4
 8005152:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8005156:	3814      	subs	r0, #20
 8005158:	220f      	movs	r2, #15
 800515a:	f00b faad 	bl	80106b8 <f_read>
 800515e:	4603      	mov	r3, r0
 8005160:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005164:	f102 0217 	add.w	r2, r2, #23
 8005168:	7013      	strb	r3, [r2, #0]
        if (fresult == FR_OK) {
 800516a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800516e:	f103 0317 	add.w	r3, r3, #23
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11e      	bne.n	80051b6 <LoadTimeFromSDCard+0xde>
            time_str[bytes_read] = '\0'; // Null-terminate the string
 8005178:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800517c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8005180:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8005184:	4413      	add	r3, r2
 8005186:	2200      	movs	r2, #0
 8005188:	f803 2c44 	strb.w	r2, [r3, #-68]
            sscanf(time_str, "%02lu:%02lu:%02lu", hours, minutes, seconds); // Parse the time
 800518c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005190:	4619      	mov	r1, r3
 8005192:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005196:	461a      	mov	r2, r3
 8005198:	f107 0018 	add.w	r0, r7, #24
 800519c:	3804      	subs	r0, #4
 800519e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80051a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	f851 3c50 	ldr.w	r3, [r1, #-80]
 80051ac:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80051b0:	4908      	ldr	r1, [pc, #32]	@ (80051d4 <LoadTimeFromSDCard+0xfc>)
 80051b2:	f00e f9d9 	bl	8013568 <siscanf>
        }
        f_close(&file);
 80051b6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80051ba:	3b14      	subs	r3, #20
 80051bc:	4618      	mov	r0, r3
 80051be:	f00b fdec 	bl	8010d9a <f_close>
    } else {
        // Handle case where the file doesn't exist or can't be read
        // Time will remain initialized to 0:0:0
    }
}
 80051c2:	bf00      	nop
 80051c4:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 80051c8:	3718      	adds	r7, #24
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	080171a4 	.word	0x080171a4
 80051d4:	080171b4 	.word	0x080171b4

080051d8 <UpdateTimeToSDCard>:



void UpdateTimeToSDCard(uint32_t add_hours, uint32_t add_minutes, uint32_t add_seconds) {
 80051d8:	b580      	push	{r7, lr}
 80051da:	f5ad 5d83 	sub.w	sp, sp, #4192	@ 0x1060
 80051de:	b086      	sub	sp, #24
 80051e0:	af02      	add	r7, sp, #8
 80051e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80051e6:	f843 0c64 	str.w	r0, [r3, #-100]
 80051ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80051ee:	f843 1c68 	str.w	r1, [r3, #-104]
 80051f2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80051f6:	f843 2c6c 	str.w	r2, [r3, #-108]
    uint32_t current_hours, current_minutes, current_seconds;

    if(log_to_sd_flag)
 80051fa:	4b64      	ldr	r3, [pc, #400]	@ (800538c <UpdateTimeToSDCard+0x1b4>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80bd 	beq.w	8005380 <UpdateTimeToSDCard+0x1a8>
    {
    	log_to_sd_flag = 0;
 8005206:	4b61      	ldr	r3, [pc, #388]	@ (800538c <UpdateTimeToSDCard+0x1b4>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
		// Load existing time from SD card
		LoadTimeFromSDCard(&current_hours, &current_minutes, &current_seconds);
 800520c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005210:	f102 0214 	add.w	r2, r2, #20
 8005214:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 8005218:	f101 0118 	add.w	r1, r1, #24
 800521c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005220:	f103 031c 	add.w	r3, r3, #28
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff57 	bl	80050d8 <LoadTimeFromSDCard>

		// Add the new time values
		uint32_t total_seconds = current_seconds + add_seconds;
 800522a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800522e:	f103 0314 	add.w	r3, r3, #20
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8005238:	f852 2c6c 	ldr.w	r2, [r2, #-108]
 800523c:	4413      	add	r3, r2
 800523e:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005242:	f102 020c 	add.w	r2, r2, #12
 8005246:	6013      	str	r3, [r2, #0]
		uint32_t total_minutes = current_minutes + add_minutes + (total_seconds / 60);
 8005248:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800524c:	f103 0318 	add.w	r3, r3, #24
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005256:	f853 3c68 	ldr.w	r3, [r3, #-104]
 800525a:	441a      	add	r2, r3
 800525c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005260:	f103 030c 	add.w	r3, r3, #12
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	494a      	ldr	r1, [pc, #296]	@ (8005390 <UpdateTimeToSDCard+0x1b8>)
 8005268:	fba1 1303 	umull	r1, r3, r1, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	4413      	add	r3, r2
 8005270:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8005274:	f102 0208 	add.w	r2, r2, #8
 8005278:	6013      	str	r3, [r2, #0]
		uint32_t total_hours = current_hours + add_hours + (total_minutes / 60);
 800527a:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800527e:	f103 031c 	add.w	r3, r3, #28
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005288:	f853 3c64 	ldr.w	r3, [r3, #-100]
 800528c:	441a      	add	r2, r3
 800528e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005292:	f103 0308 	add.w	r3, r3, #8
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	493d      	ldr	r1, [pc, #244]	@ (8005390 <UpdateTimeToSDCard+0x1b8>)
 800529a:	fba1 1303 	umull	r1, r3, r1, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	4413      	add	r3, r2
 80052a2:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80052a6:	f102 0204 	add.w	r2, r2, #4
 80052aa:	6013      	str	r3, [r2, #0]

		// Normalize the time
		total_seconds %= 60;
 80052ac:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80052b0:	f103 030c 	add.w	r3, r3, #12
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	4b36      	ldr	r3, [pc, #216]	@ (8005390 <UpdateTimeToSDCard+0x1b8>)
 80052b8:	fba3 1302 	umull	r1, r3, r3, r2
 80052bc:	0959      	lsrs	r1, r3, #5
 80052be:	460b      	mov	r3, r1
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80052cc:	f102 020c 	add.w	r2, r2, #12
 80052d0:	6013      	str	r3, [r2, #0]
		total_minutes %= 60;
 80052d2:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80052d6:	f103 0308 	add.w	r3, r3, #8
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005390 <UpdateTimeToSDCard+0x1b8>)
 80052de:	fba3 1302 	umull	r1, r3, r3, r2
 80052e2:	0959      	lsrs	r1, r3, #5
 80052e4:	460b      	mov	r3, r1
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a5b      	subs	r3, r3, r1
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80052f2:	f102 0208 	add.w	r2, r2, #8
 80052f6:	6013      	str	r3, [r2, #0]

		// Save the updated time back to the SD card
		char time_str[16];
		snprintf(time_str, sizeof(time_str), "%02lu:%02lu:%02lu\n", total_hours, total_minutes, total_seconds);
 80052f8:	f507 5082 	add.w	r0, r7, #4160	@ 0x1040
 80052fc:	f100 0004 	add.w	r0, r0, #4
 8005300:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005304:	f103 030c 	add.w	r3, r3, #12
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	9301      	str	r3, [sp, #4]
 800530c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005310:	f103 0308 	add.w	r3, r3, #8
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800531c:	f103 0304 	add.w	r3, r3, #4
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1c      	ldr	r2, [pc, #112]	@ (8005394 <UpdateTimeToSDCard+0x1bc>)
 8005324:	2110      	movs	r1, #16
 8005326:	f00e f8cb 	bl	80134c0 <sniprintf>
		FIL file;
		UINT bytes_written;
		FRESULT fresult;

		/* Open file to write/ create a file if it doesn't exist */
		fresult = f_open(&file, "TimeLine.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800532a:	f107 0310 	add.w	r3, r7, #16
 800532e:	220a      	movs	r2, #10
 8005330:	4919      	ldr	r1, [pc, #100]	@ (8005398 <UpdateTimeToSDCard+0x1c0>)
 8005332:	4618      	mov	r0, r3
 8005334:	f00a fff8 	bl	8010328 <f_open>
 8005338:	4603      	mov	r3, r0
 800533a:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800533e:	f102 0203 	add.w	r2, r2, #3
 8005342:	7013      	strb	r3, [r2, #0]
		if (fresult == FR_OK) {
 8005344:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8005348:	f103 0303 	add.w	r3, r3, #3
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d116      	bne.n	8005380 <UpdateTimeToSDCard+0x1a8>
			f_write(&file, time_str, strlen(time_str), &bytes_written);
 8005352:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005356:	f103 0304 	add.w	r3, r3, #4
 800535a:	4618      	mov	r0, r3
 800535c:	f7fa ff98 	bl	8000290 <strlen>
 8005360:	4602      	mov	r2, r0
 8005362:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005366:	f507 5182 	add.w	r1, r7, #4160	@ 0x1040
 800536a:	f101 0104 	add.w	r1, r1, #4
 800536e:	f107 0010 	add.w	r0, r7, #16
 8005372:	f00b fb00 	bl	8010976 <f_write>
			f_close(&file);
 8005376:	f107 0310 	add.w	r3, r7, #16
 800537a:	4618      	mov	r0, r3
 800537c:	f00b fd0d 	bl	8010d9a <f_close>
		} else {
			// Handle error (e.g., SD card not inserted or write failure)
		}
    }
}
 8005380:	bf00      	nop
 8005382:	f507 5783 	add.w	r7, r7, #4192	@ 0x1060
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	200003a2 	.word	0x200003a2
 8005390:	88888889 	.word	0x88888889
 8005394:	080171c8 	.word	0x080171c8
 8005398:	080171a4 	.word	0x080171a4

0800539c <SerialPrint>:
extern UART_HandleTypeDef huart1;


/*Print character data without the new line at the end*/
void SerialPrint(const char* Data)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7fa ff73 	bl	8000290 <strlen>
 80053aa:	4603      	mov	r3, r0
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	f04f 33ff 	mov.w	r3, #4294967295
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4803      	ldr	r0, [pc, #12]	@ (80053c4 <SerialPrint+0x28>)
 80053b6:	f007 f897 	bl	800c4e8 <HAL_UART_Transmit>
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20002be8 	.word	0x20002be8

080053c8 <SerialPrintln>:

/*Print character data with the new line at the end*/
void SerialPrintln(const char* Data)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), HAL_MAX_DELAY);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7fa ff5d 	bl	8000290 <strlen>
 80053d6:	4603      	mov	r3, r0
 80053d8:	b29a      	uxth	r2, r3
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	4808      	ldr	r0, [pc, #32]	@ (8005404 <SerialPrintln+0x3c>)
 80053e2:	f007 f881 	bl	800c4e8 <HAL_UART_Transmit>
    const char newline[2] = "\r\n"; // Newline characters for UART
 80053e6:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80053ea:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart1, (uint8_t*)newline, 2, HAL_MAX_DELAY);
 80053ec:	f107 010c 	add.w	r1, r7, #12
 80053f0:	f04f 33ff 	mov.w	r3, #4294967295
 80053f4:	2202      	movs	r2, #2
 80053f6:	4803      	ldr	r0, [pc, #12]	@ (8005404 <SerialPrintln+0x3c>)
 80053f8:	f007 f876 	bl	800c4e8 <HAL_UART_Transmit>
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20002be8 	.word	0x20002be8

08005408 <SerialPrintlnINT>:

/*Print Numeric data with the new line at the end*/
void SerialPrintlnINT(int Data)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/*Here the UART Buffer is being used to store the numeric values and present then as character array*/
	char buffer[10];
	sprintf(buffer, "%d", Data);
 8005410:	f107 030c 	add.w	r3, r7, #12
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4906      	ldr	r1, [pc, #24]	@ (8005430 <SerialPrintlnINT+0x28>)
 8005418:	4618      	mov	r0, r3
 800541a:	f00e f885 	bl	8013528 <siprintf>
	SerialPrintln(buffer);
 800541e:	f107 030c 	add.w	r3, r7, #12
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff ffd0 	bl	80053c8 <SerialPrintln>
}
 8005428:	bf00      	nop
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	080171dc 	.word	0x080171dc

08005434 <SerialPrintINT>:

/*Print Numeric data without the new line at the end*/
void SerialPrintINT(int Data)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b086      	sub	sp, #24
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	/*Here the UART Buffer is being used to store the numeric values and present then as character array*/
	char buffer[10];
	sprintf(buffer, "%d", Data);
 800543c:	f107 030c 	add.w	r3, r7, #12
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	4906      	ldr	r1, [pc, #24]	@ (800545c <SerialPrintINT+0x28>)
 8005444:	4618      	mov	r0, r3
 8005446:	f00e f86f 	bl	8013528 <siprintf>
	SerialPrint(buffer);
 800544a:	f107 030c 	add.w	r3, r7, #12
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff ffa4 	bl	800539c <SerialPrint>
}
 8005454:	bf00      	nop
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	080171dc 	.word	0x080171dc

08005460 <Servo_Init>:
int pulse = 0;
int16_t current_angle_offset = 0;
extern TIM_HandleTypeDef htim11; // Timer 11 is dedicated to the servo

// Initialize the servo control
void Servo_Init(void) {
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
	// Start the PWM signal on Timer 11, Channel 1
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8005464:	2100      	movs	r1, #0
 8005466:	4802      	ldr	r0, [pc, #8]	@ (8005470 <Servo_Init+0x10>)
 8005468:	f006 f886 	bl	800b578 <HAL_TIM_PWM_Start>
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20002b58 	.word	0x20002b58

08005474 <Servo_SetAngle>:

// Set the servo angle
void Servo_SetAngle(int16_t degree) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	4603      	mov	r3, r0
 800547c:	80fb      	strh	r3, [r7, #6]
	// Constrain the angle within the defined minimum and maximum limits
	 //HAL_GPIO_WritePin(GPIOC,EN_DCDC_8V_Output_Pin, GPIO_PIN_RESET);
	degree += current_angle_offset;
 800547e:	88fa      	ldrh	r2, [r7, #6]
 8005480:	4b1b      	ldr	r3, [pc, #108]	@ (80054f0 <Servo_SetAngle+0x7c>)
 8005482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005486:	b29b      	uxth	r3, r3
 8005488:	4413      	add	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	80fb      	strh	r3, [r7, #6]
	if (degree > SERVO_MAX_ANGLE) {
 800548e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005492:	2baf      	cmp	r3, #175	@ 0xaf
 8005494:	dd02      	ble.n	800549c <Servo_SetAngle+0x28>
		degree = SERVO_MAX_ANGLE;
 8005496:	23af      	movs	r3, #175	@ 0xaf
 8005498:	80fb      	strh	r3, [r7, #6]
 800549a:	e005      	b.n	80054a8 <Servo_SetAngle+0x34>
	} else if (degree < SERVO_MIN_ANGLE) {
 800549c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	dc01      	bgt.n	80054a8 <Servo_SetAngle+0x34>
		degree = SERVO_MIN_ANGLE;
 80054a4:	2305      	movs	r3, #5
 80054a6:	80fb      	strh	r3, [r7, #6]
	}

	// Map the angle to the pulse width in microseconds
	uint32_t pulseWidth = SERVO_MIN_PULSE_WIDTH + (uint32_t) ((float) (degree - SERVO_MIN_ANGLE)
 80054a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ac:	3b05      	subs	r3, #5
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			/ (float) (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE) * (SERVO_MAX_PULSE_WIDTH - SERVO_MIN_PULSE_WIDTH));
 80054b6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80054f4 <Servo_SetAngle+0x80>
 80054ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054be:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80054f8 <Servo_SetAngle+0x84>
 80054c2:	ee67 7a87 	vmul.f32	s15, s15, s14
	uint32_t pulseWidth = SERVO_MIN_PULSE_WIDTH + (uint32_t) ((float) (degree - SERVO_MIN_ANGLE)
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 3a90 	vmov	r3, s15
 80054ce:	33aa      	adds	r3, #170	@ 0xaa
 80054d0:	60fb      	str	r3, [r7, #12]

	pulse = pulseWidth;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a09      	ldr	r2, [pc, #36]	@ (80054fc <Servo_SetAngle+0x88>)
 80054d6:	6013      	str	r3, [r2, #0]

	// Set the pulse width for PWM
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, pulseWidth);
 80054d8:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <Servo_SetAngle+0x8c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	635a      	str	r2, [r3, #52]	@ 0x34
	 HAL_TIM_PWM_Start(&htim11,TIM_CHANNEL_1);
 80054e0:	2100      	movs	r1, #0
 80054e2:	4807      	ldr	r0, [pc, #28]	@ (8005500 <Servo_SetAngle+0x8c>)
 80054e4:	f006 f848 	bl	800b578 <HAL_TIM_PWM_Start>
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	200027e8 	.word	0x200027e8
 80054f4:	432a0000 	.word	0x432a0000
 80054f8:	44098000 	.word	0x44098000
 80054fc:	200027e4 	.word	0x200027e4
 8005500:	20002b58 	.word	0x20002b58

08005504 <Servo_SetPercent>:

// Set the servo position based on a percentage
void Servo_SetPercent(int percentage) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	static int16_t old_angle = 1000; //Illogical number to ensure its not same as 1st input to function

	// Constrain the percentage to be between 0% and 100%
	if (percentage > 100) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b64      	cmp	r3, #100	@ 0x64
 8005510:	dd02      	ble.n	8005518 <Servo_SetPercent+0x14>
		percentage = 100;
 8005512:	2364      	movs	r3, #100	@ 0x64
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	e004      	b.n	8005522 <Servo_SetPercent+0x1e>
	} else if (percentage < 0) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da01      	bge.n	8005522 <Servo_SetPercent+0x1e>
		percentage = 0;
 800551e:	2300      	movs	r3, #0
 8005520:	607b      	str	r3, [r7, #4]
	}
   percent = percentage;
 8005522:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <Servo_SetPercent+0xd4>)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6013      	str	r3, [r2, #0]
  // Map the percentage to the corresponding angle
  	if(ISSERVOINTERTED == 1){
  		percentage = 100 - percentage;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 800552e:	607b      	str	r3, [r7, #4]
  	}
	// Map the percentage to the corresponding angle
	int16_t angle = SERVO_MIN_ANGLE + (int16_t) ((float) percentage / 100.0f * (SERVO_MAX_ANGLE - SERVO_MIN_ANGLE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800553a:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80055dc <Servo_SetPercent+0xd8>
 800553e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005542:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80055e0 <Servo_SetPercent+0xdc>
 8005546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800554a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800554e:	ee17 3a90 	vmov	r3, s15
 8005552:	b21b      	sxth	r3, r3
 8005554:	b29b      	uxth	r3, r3
 8005556:	3305      	adds	r3, #5
 8005558:	b29b      	uxth	r3, r3
 800555a:	81fb      	strh	r3, [r7, #14]

	Servo_SetAngle(angle - current_angle_offset); // Account for the offset
 800555c:	89fa      	ldrh	r2, [r7, #14]
 800555e:	4b21      	ldr	r3, [pc, #132]	@ (80055e4 <Servo_SetPercent+0xe0>)
 8005560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005564:	b29b      	uxth	r3, r3
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	b29b      	uxth	r3, r3
 800556a:	b21b      	sxth	r3, r3
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff81 	bl	8005474 <Servo_SetAngle>
	// Set the servo angle
	//Servo_SetAngle(angle);

	//Relax servo only if new angle is more than 10 degrees different than old one, plus conditions inside this
	if (abs(old_angle - angle) > 10) {
 8005572:	4b1d      	ldr	r3, [pc, #116]	@ (80055e8 <Servo_SetPercent+0xe4>)
 8005574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005578:	461a      	mov	r2, r3
 800557a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	bfb8      	it	lt
 8005584:	425b      	neglt	r3, r3
 8005586:	2b0a      	cmp	r3, #10
 8005588:	dd1e      	ble.n	80055c8 <Servo_SetPercent+0xc4>
		if (abs(percentage - ValveOpen) < 10) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3b64      	subs	r3, #100	@ 0x64
 800558e:	f113 0f09 	cmn.w	r3, #9
 8005592:	db0b      	blt.n	80055ac <Servo_SetPercent+0xa8>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3b64      	subs	r3, #100	@ 0x64
 8005598:	2b09      	cmp	r3, #9
 800559a:	dc07      	bgt.n	80055ac <Servo_SetPercent+0xa8>
			HAL_Delay(1000);
 800559c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055a0:	f003 f8aa 	bl	80086f8 <HAL_Delay>
			if (ISSERVOINTERTED == 1) {
				Servo_SetAngle(SERVO_MAX_ANGLE - 5);
 80055a4:	20aa      	movs	r0, #170	@ 0xaa
 80055a6:	f7ff ff65 	bl	8005474 <Servo_SetAngle>
			if (ISSERVOINTERTED == 1) {
 80055aa:	e00d      	b.n	80055c8 <Servo_SetPercent+0xc4>
			} else {
				Servo_SetAngle(SERVO_MIN_ANGLE + 5);
			}
		} else if (abs(percentage - ValveClose) < 10) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f113 0f09 	cmn.w	r3, #9
 80055b2:	db09      	blt.n	80055c8 <Servo_SetPercent+0xc4>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b09      	cmp	r3, #9
 80055b8:	dc06      	bgt.n	80055c8 <Servo_SetPercent+0xc4>
			HAL_Delay(1000);
 80055ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80055be:	f003 f89b 	bl	80086f8 <HAL_Delay>
			if (ISSERVOINTERTED == 1) {
				Servo_SetAngle(SERVO_MIN_ANGLE + 5);
 80055c2:	200a      	movs	r0, #10
 80055c4:	f7ff ff56 	bl	8005474 <Servo_SetAngle>
			} else {
				Servo_SetAngle(SERVO_MAX_ANGLE - 5);
			}
		}
	}
	old_angle = angle;
 80055c8:	4a07      	ldr	r2, [pc, #28]	@ (80055e8 <Servo_SetPercent+0xe4>)
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	8013      	strh	r3, [r2, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	200027e0 	.word	0x200027e0
 80055dc:	42c80000 	.word	0x42c80000
 80055e0:	432a0000 	.word	0x432a0000
 80055e4:	200027e8 	.word	0x200027e8
 80055e8:	20000134 	.word	0x20000134

080055ec <Servo_Home_Position>:
    // Set the servo's current position as zero
    Servo_SetAngle(3); // Update internal logic if necessary to mark zero position
}

*/
void Servo_Home_Position(void) {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
    static int16_t homing_angle = SERVO_MAX_ANGLE; // Start from maximum angle

    // Drive the servo to the limit switch
    while (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) != 1){
 80055f0:	e01a      	b.n	8005628 <Servo_Home_Position+0x3c>
        // Gradually move the servo angle toward the limit
        Servo_SetAngle(homing_angle);
 80055f2:	4b21      	ldr	r3, [pc, #132]	@ (8005678 <Servo_Home_Position+0x8c>)
 80055f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff3b 	bl	8005474 <Servo_SetAngle>
        homing_angle--;
 80055fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005678 <Servo_Home_Position+0x8c>)
 8005600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005604:	b29b      	uxth	r3, r3
 8005606:	3b01      	subs	r3, #1
 8005608:	b29b      	uxth	r3, r3
 800560a:	b21a      	sxth	r2, r3
 800560c:	4b1a      	ldr	r3, [pc, #104]	@ (8005678 <Servo_Home_Position+0x8c>)
 800560e:	801a      	strh	r2, [r3, #0]

        // Ensure the angle does not go below the minimum
        if (homing_angle < SERVO_MIN_ANGLE) {
 8005610:	4b19      	ldr	r3, [pc, #100]	@ (8005678 <Servo_Home_Position+0x8c>)
 8005612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005616:	2b04      	cmp	r3, #4
 8005618:	dc03      	bgt.n	8005622 <Servo_Home_Position+0x36>
            homing_angle = SERVO_MIN_ANGLE;
 800561a:	4b17      	ldr	r3, [pc, #92]	@ (8005678 <Servo_Home_Position+0x8c>)
 800561c:	2205      	movs	r2, #5
 800561e:	801a      	strh	r2, [r3, #0]
            break; // Exit if the servo reaches the minimum without triggering the limit switch
 8005620:	e00a      	b.n	8005638 <Servo_Home_Position+0x4c>
        }

        HAL_Delay(10); // Small delay to allow the servo to move and stabilize
 8005622:	200a      	movs	r0, #10
 8005624:	f003 f868 	bl	80086f8 <HAL_Delay>
    while (HAL_GPIO_ReadPin(ServoDC_M1_Prox_Interrupt_GPIO_Port, ServoDC_M1_Prox_Interrupt_Pin) != 1){
 8005628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800562c:	4813      	ldr	r0, [pc, #76]	@ (800567c <Servo_Home_Position+0x90>)
 800562e:	f004 fccf 	bl	8009fd0 <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d1dc      	bne.n	80055f2 <Servo_Home_Position+0x6>
    }
    HAL_Delay(2000);
 8005638:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800563c:	f003 f85c 	bl	80086f8 <HAL_Delay>

    // Once the limit switch is triggered, stop the servo
    Servo_SetAngle(homing_angle);
 8005640:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <Servo_Home_Position+0x8c>)
 8005642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff14 	bl	8005474 <Servo_SetAngle>
#if DEBUG == 1
    SerialPrint("Servo During Homing");
 800564c:	480c      	ldr	r0, [pc, #48]	@ (8005680 <Servo_Home_Position+0x94>)
 800564e:	f7ff fea5 	bl	800539c <SerialPrint>
#endif
   	SerialPrintINT(homing_angle);
 8005652:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <Servo_Home_Position+0x8c>)
 8005654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff feeb 	bl	8005434 <SerialPrintINT>

    // Update internal logic to mark the current position as zero
    current_angle_offset = homing_angle; // Store the "zero" offset
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <Servo_Home_Position+0x8c>)
 8005660:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005664:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <Servo_Home_Position+0x98>)
 8005666:	801a      	strh	r2, [r3, #0]
    angle = 0; // Reset the angle variable to zero for consistency
 8005668:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <Servo_Home_Position+0x9c>)
 800566a:	2200      	movs	r2, #0
 800566c:	801a      	strh	r2, [r3, #0]
    percent = 0; // Reset percentage to zero if used in your logic
 800566e:	4b07      	ldr	r3, [pc, #28]	@ (800568c <Servo_Home_Position+0xa0>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

    // Adjust all future angle calculations to account for the offset
    //Servo_SetAngle(0); // Set servo to the logical zero position
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20000136 	.word	0x20000136
 800567c:	40020000 	.word	0x40020000
 8005680:	080171e8 	.word	0x080171e8
 8005684:	200027e8 	.word	0x200027e8
 8005688:	200027dc 	.word	0x200027dc
 800568c:	200027e0 	.word	0x200027e0

08005690 <MotorTest>:

void DeveloperMenu(void);
int EnterPassword(void);
static uint64_t StoringTimedev = 0;

void MotorTest() {
 8005690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005694:	b0a4      	sub	sp, #144	@ 0x90
 8005696:	af02      	add	r7, sp, #8
	//TareAll();
	LCDRGBControl(WHITE); //Turn on LCD backlight and set it to color
 8005698:	2064      	movs	r0, #100	@ 0x64
 800569a:	f7ff fb2d 	bl	8004cf8 <LCDRGBControl>
	printLCD(0, "Initializing", NO_SYMBOL);
 800569e:	2200      	movs	r2, #0
 80056a0:	49b5      	ldr	r1, [pc, #724]	@ (8005978 <MotorTest+0x2e8>)
 80056a2:	2000      	movs	r0, #0
 80056a4:	f7ff fabc 	bl	8004c20 <printLCD>
	//TareAll();
	while (TRUE) {
		 if (HAL_GetTick() - StoringTimedev >= 1000) {  // Check if 2 seconds passed
 80056a8:	f003 f81a 	bl	80086e0 <HAL_GetTick>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2200      	movs	r2, #0
 80056b0:	4698      	mov	r8, r3
 80056b2:	4691      	mov	r9, r2
 80056b4:	4bb1      	ldr	r3, [pc, #708]	@ (800597c <MotorTest+0x2ec>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	ebb8 0402 	subs.w	r4, r8, r2
 80056be:	eb69 0503 	sbc.w	r5, r9, r3
 80056c2:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 80056c6:	f175 0300 	sbcs.w	r3, r5, #0
 80056ca:	d30c      	bcc.n	80056e6 <MotorTest+0x56>
			 StoringTimedev = HAL_GetTick();  // Update the last tick time
 80056cc:	f003 f808 	bl	80086e0 <HAL_GetTick>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2200      	movs	r2, #0
 80056d4:	469a      	mov	sl, r3
 80056d6:	4693      	mov	fp, r2
 80056d8:	4ba8      	ldr	r3, [pc, #672]	@ (800597c <MotorTest+0x2ec>)
 80056da:	e9c3 ab00 	strd	sl, fp, [r3]
			 tareSend = Tareweight;  // Update the variable
 80056de:	4ba8      	ldr	r3, [pc, #672]	@ (8005980 <MotorTest+0x2f0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4aa8      	ldr	r2, [pc, #672]	@ (8005984 <MotorTest+0x2f4>)
 80056e4:	6013      	str	r3, [r2, #0]
		  }
		DeveloperMenu();
 80056e6:	f000 fa8b 	bl	8005c00 <DeveloperMenu>
		ReadKeypadVar(CONTROL);
 80056ea:	2002      	movs	r0, #2
 80056ec:	f7fe fc32 	bl	8003f54 <ReadKeypadVar>
		if (lastKeyPressed == PLAYSTOPKEY) {
 80056f0:	4ba5      	ldr	r3, [pc, #660]	@ (8005988 <MotorTest+0x2f8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b0d      	cmp	r3, #13
 80056f6:	d113      	bne.n	8005720 <MotorTest+0x90>
			   	TareAll();
 80056f8:	f7ff fb8a 	bl	8004e10 <TareAll>
				printLCD(0, "TARE", NO_SYMBOL);
 80056fc:	2200      	movs	r2, #0
 80056fe:	49a3      	ldr	r1, [pc, #652]	@ (800598c <MotorTest+0x2fc>)
 8005700:	2000      	movs	r0, #0
 8005702:	f7ff fa8d 	bl	8004c20 <printLCD>
				//TareAll();
				HAL_Delay(1000);
 8005706:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800570a:	f002 fff5 	bl	80086f8 <HAL_Delay>
				lastKeyPressed = 255;
 800570e:	4b9e      	ldr	r3, [pc, #632]	@ (8005988 <MotorTest+0x2f8>)
 8005710:	22ff      	movs	r2, #255	@ 0xff
 8005712:	601a      	str	r2, [r3, #0]
				SerialPrintln("ALways here");
 8005714:	489e      	ldr	r0, [pc, #632]	@ (8005990 <MotorTest+0x300>)
 8005716:	f7ff fe57 	bl	80053c8 <SerialPrintln>
				CleaningExitCounter =0;
 800571a:	4b9e      	ldr	r3, [pc, #632]	@ (8005994 <MotorTest+0x304>)
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
		}

		if (isAutoOperation == FALSE) {
 8005720:	4b9d      	ldr	r3, [pc, #628]	@ (8005998 <MotorTest+0x308>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	f040 81c5 	bne.w	8005ab4 <MotorTest+0x424>
			int var = readKeypadNonBlock(ALL);
 800572a:	2000      	movs	r0, #0
 800572c:	f7fe fc5e 	bl	8003fec <readKeypadNonBlock>
 8005730:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
			if (var == DELKEY) {
 8005734:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005738:	2b0e      	cmp	r3, #14
 800573a:	d12d      	bne.n	8005798 <MotorTest+0x108>
				lastKeyPressed = DELKEY;
 800573c:	4b92      	ldr	r3, [pc, #584]	@ (8005988 <MotorTest+0x2f8>)
 800573e:	220e      	movs	r2, #14
 8005740:	601a      	str	r2, [r3, #0]
				uint32_t hours, minutes, seconds;
				LoadTimeFromSDCard(&hours,&minutes,&seconds);
 8005742:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8005746:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800574a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fcc2 	bl	80050d8 <LoadTimeFromSDCard>
				// Display the time on the LCD
				LCD_Clear();
 8005754:	f7ff f964 	bl	8004a20 <LCD_Clear>
				printLCD(1, "System Run Time", NO_SYMBOL);
 8005758:	2200      	movs	r2, #0
 800575a:	4990      	ldr	r1, [pc, #576]	@ (800599c <MotorTest+0x30c>)
 800575c:	2001      	movs	r0, #1
 800575e:	f7ff fa5f 	bl	8004c20 <printLCD>
				char time_display[20];
				snprintf(time_display, sizeof(time_display), "Time: %02lu:%02lu:%02lu", hours, minutes, seconds);
 8005762:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005766:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005768:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800576c:	9201      	str	r2, [sp, #4]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	460b      	mov	r3, r1
 8005772:	4a8b      	ldr	r2, [pc, #556]	@ (80059a0 <MotorTest+0x310>)
 8005774:	2114      	movs	r1, #20
 8005776:	f00d fea3 	bl	80134c0 <sniprintf>
				printLCD(2, time_display, NO_SYMBOL);
 800577a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800577e:	2200      	movs	r2, #0
 8005780:	4619      	mov	r1, r3
 8005782:	2002      	movs	r0, #2
 8005784:	f7ff fa4c 	bl	8004c20 <printLCD>
				while(readKeypadNonBlock(ALL) != ENTERKEY);
 8005788:	bf00      	nop
 800578a:	2000      	movs	r0, #0
 800578c:	f7fe fc2e 	bl	8003fec <readKeypadNonBlock>
 8005790:	4603      	mov	r3, r0
 8005792:	2b0b      	cmp	r3, #11
 8005794:	d1f9      	bne.n	800578a <MotorTest+0xfa>
 8005796:	e027      	b.n	80057e8 <MotorTest+0x158>
			} else if (var == MANAUTOKEY) {
 8005798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800579c:	2b0c      	cmp	r3, #12
 800579e:	d10e      	bne.n	80057be <MotorTest+0x12e>
				isAutoOperation = !isAutoOperation;
 80057a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005998 <MotorTest+0x308>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	4b79      	ldr	r3, [pc, #484]	@ (8005998 <MotorTest+0x308>)
 80057b2:	701a      	strb	r2, [r3, #0]
				HAL_Delay(1000);
 80057b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057b8:	f002 ff9e 	bl	80086f8 <HAL_Delay>
 80057bc:	e014      	b.n	80057e8 <MotorTest+0x158>
			}
			else if (var == PLAYSTOPKEY) {
 80057be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057c2:	2b0d      	cmp	r3, #13
 80057c4:	d110      	bne.n	80057e8 <MotorTest+0x158>
				//lastKeyPressed = PLAYSTOPKEY;
				TareAll();
 80057c6:	f7ff fb23 	bl	8004e10 <TareAll>
				printLCD(0, "TARE", NO_SYMBOL);
 80057ca:	2200      	movs	r2, #0
 80057cc:	496f      	ldr	r1, [pc, #444]	@ (800598c <MotorTest+0x2fc>)
 80057ce:	2000      	movs	r0, #0
 80057d0:	f7ff fa26 	bl	8004c20 <printLCD>
				HAL_Delay(1000);
 80057d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80057d8:	f002 ff8e 	bl	80086f8 <HAL_Delay>
				lastKeyPressed = 255;
 80057dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005988 <MotorTest+0x2f8>)
 80057de:	22ff      	movs	r2, #255	@ 0xff
 80057e0:	601a      	str	r2, [r3, #0]
				CleaningExitCounter =0;
 80057e2:	4b6c      	ldr	r3, [pc, #432]	@ (8005994 <MotorTest+0x304>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
			}
			char buffer1[21]; // Buffer to hold the formatted string
			char buffer2[21]; // Buffer to hold the formatted string
			sprintf(buffer1, "MC-W:%ld S:%d", Total_Weight,percent); //Point # 7
 80057e8:	4b6e      	ldr	r3, [pc, #440]	@ (80059a4 <MotorTest+0x314>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b6e      	ldr	r3, [pc, #440]	@ (80059a8 <MotorTest+0x318>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80057f4:	496d      	ldr	r1, [pc, #436]	@ (80059ac <MotorTest+0x31c>)
 80057f6:	f00d fe97 	bl	8013528 <siprintf>
			printLCD(0, buffer1, NO_SYMBOL);
 80057fa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80057fe:	2200      	movs	r2, #0
 8005800:	4619      	mov	r1, r3
 8005802:	2000      	movs	r0, #0
 8005804:	f7ff fa0c 	bl	8004c20 <printLCD>
			printLCD(1, "CAP    CLAMP   SERVO", NO_SYMBOL);
 8005808:	2200      	movs	r2, #0
 800580a:	4969      	ldr	r1, [pc, #420]	@ (80059b0 <MotorTest+0x320>)
 800580c:	2001      	movs	r0, #1
 800580e:	f7ff fa07 	bl	8004c20 <printLCD>
			printLCD(2, "0/8     4/6      7/9", NO_SYMBOL);
 8005812:	2200      	movs	r2, #0
 8005814:	4967      	ldr	r1, [pc, #412]	@ (80059b4 <MotorTest+0x324>)
 8005816:	2002      	movs	r0, #2
 8005818:	f7ff fa02 	bl	8004c20 <printLCD>
			sprintf(buffer2, "Valve: 1/3 %s", ValveStatus);
 800581c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005820:	4a65      	ldr	r2, [pc, #404]	@ (80059b8 <MotorTest+0x328>)
 8005822:	4966      	ldr	r1, [pc, #408]	@ (80059bc <MotorTest+0x32c>)
 8005824:	4618      	mov	r0, r3
 8005826:	f00d fe7f 	bl	8013528 <siprintf>
			printLCD(3, buffer2, NO_SYMBOL);
 800582a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800582e:	2200      	movs	r2, #0
 8005830:	4619      	mov	r1, r3
 8005832:	2003      	movs	r0, #3
 8005834:	f7ff f9f4 	bl	8004c20 <printLCD>

			//Make sure safety is active and motor turns off whenever it reaches min or max positions
			if ((Spindle_M3_EncA_Pulses <= M2POS1VAL|| Spindle_M3_EncB_Pulses <= M2POS1VAL) || (Spindle_M3_EncA_Pulses >= M2POS4VAL || Spindle_M3_EncB_Pulses >= M2POS4VAL)) {
 8005838:	4b61      	ldr	r3, [pc, #388]	@ (80059c0 <MotorTest+0x330>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	dd0f      	ble.n	8005860 <MotorTest+0x1d0>
 8005840:	4b60      	ldr	r3, [pc, #384]	@ (80059c4 <MotorTest+0x334>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dd0b      	ble.n	8005860 <MotorTest+0x1d0>
 8005848:	4b5d      	ldr	r3, [pc, #372]	@ (80059c0 <MotorTest+0x330>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f641 32bb 	movw	r2, #7099	@ 0x1bbb
 8005850:	4293      	cmp	r3, r2
 8005852:	dc05      	bgt.n	8005860 <MotorTest+0x1d0>
 8005854:	4b5b      	ldr	r3, [pc, #364]	@ (80059c4 <MotorTest+0x334>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f641 32bb 	movw	r2, #7099	@ 0x1bbb
 800585c:	4293      	cmp	r3, r2
 800585e:	dd04      	ble.n	800586a <MotorTest+0x1da>
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8005860:	4a59      	ldr	r2, [pc, #356]	@ (80059c8 <MotorTest+0x338>)
 8005862:	2100      	movs	r1, #0
 8005864:	2002      	movs	r0, #2
 8005866:	f7fd fc39 	bl	80030dc <moveMotor>
			}
			if (Clamp_M2_EncA_Pulses <= M1POS1VAL  || percent >= ValveOpen) {
 800586a:	4b58      	ldr	r3, [pc, #352]	@ (80059cc <MotorTest+0x33c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd03      	ble.n	800587a <MotorTest+0x1ea>
 8005872:	4b4d      	ldr	r3, [pc, #308]	@ (80059a8 <MotorTest+0x318>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b63      	cmp	r3, #99	@ 0x63
 8005878:	dd04      	ble.n	8005884 <MotorTest+0x1f4>
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 800587a:	4a53      	ldr	r2, [pc, #332]	@ (80059c8 <MotorTest+0x338>)
 800587c:	2100      	movs	r1, #0
 800587e:	2001      	movs	r0, #1
 8005880:	f7fd fc2c 	bl	80030dc <moveMotor>
			}
			if (var == 0) {
 8005884:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005888:	2b00      	cmp	r3, #0
 800588a:	d11f      	bne.n	80058cc <MotorTest+0x23c>
				while (readKeypadNonBlock(ALL) == 0) {
 800588c:	e012      	b.n	80058b4 <MotorTest+0x224>
					if (Spindle_M3_EncA_Pulses > M2POS1VAL || Spindle_M3_EncB_Pulses > M2POS1VAL) {
 800588e:	4b4c      	ldr	r3, [pc, #304]	@ (80059c0 <MotorTest+0x330>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	dc03      	bgt.n	800589e <MotorTest+0x20e>
 8005896:	4b4b      	ldr	r3, [pc, #300]	@ (80059c4 <MotorTest+0x334>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	dd05      	ble.n	80058aa <MotorTest+0x21a>
						moveMotor(CAPMOTOR, CCW, M2POS1VAL);
 800589e:	2200      	movs	r2, #0
 80058a0:	2102      	movs	r1, #2
 80058a2:	2002      	movs	r0, #2
 80058a4:	f7fd fc1a 	bl	80030dc <moveMotor>
 80058a8:	e004      	b.n	80058b4 <MotorTest+0x224>

					} else {
						moveMotor(CAPMOTOR, OFF, INT_INF);
 80058aa:	4a47      	ldr	r2, [pc, #284]	@ (80059c8 <MotorTest+0x338>)
 80058ac:	2100      	movs	r1, #0
 80058ae:	2002      	movs	r0, #2
 80058b0:	f7fd fc14 	bl	80030dc <moveMotor>
				while (readKeypadNonBlock(ALL) == 0) {
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fe fb99 	bl	8003fec <readKeypadNonBlock>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0e6      	beq.n	800588e <MotorTest+0x1fe>
					}
				}
				moveMotor(CAPMOTOR, OFF, INT_INF);
 80058c0:	4a41      	ldr	r2, [pc, #260]	@ (80059c8 <MotorTest+0x338>)
 80058c2:	2100      	movs	r1, #0
 80058c4:	2002      	movs	r0, #2
 80058c6:	f7fd fc09 	bl	80030dc <moveMotor>
 80058ca:	e027      	b.n	800591c <MotorTest+0x28c>
			}
			else if (var == 8) {
 80058cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058d0:	2b08      	cmp	r3, #8
 80058d2:	d123      	bne.n	800591c <MotorTest+0x28c>
				while (readKeypadNonBlock(ALL) == 8) {
 80058d4:	e017      	b.n	8005906 <MotorTest+0x276>
					if (Spindle_M3_EncA_Pulses < M2POS4VAL ||  Spindle_M3_EncB_Pulses < M2POS4VAL) {
 80058d6:	4b3a      	ldr	r3, [pc, #232]	@ (80059c0 <MotorTest+0x330>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f641 32bb 	movw	r2, #7099	@ 0x1bbb
 80058de:	4293      	cmp	r3, r2
 80058e0:	dd05      	ble.n	80058ee <MotorTest+0x25e>
 80058e2:	4b38      	ldr	r3, [pc, #224]	@ (80059c4 <MotorTest+0x334>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f641 32bb 	movw	r2, #7099	@ 0x1bbb
 80058ea:	4293      	cmp	r3, r2
 80058ec:	dc06      	bgt.n	80058fc <MotorTest+0x26c>
						moveMotor(CAPMOTOR, CW, M2POS4VAL);
 80058ee:	f641 32bc 	movw	r2, #7100	@ 0x1bbc
 80058f2:	2101      	movs	r1, #1
 80058f4:	2002      	movs	r0, #2
 80058f6:	f7fd fbf1 	bl	80030dc <moveMotor>
 80058fa:	e004      	b.n	8005906 <MotorTest+0x276>
					} else {
						moveMotor(CAPMOTOR, OFF, INT_INF);
 80058fc:	4a32      	ldr	r2, [pc, #200]	@ (80059c8 <MotorTest+0x338>)
 80058fe:	2100      	movs	r1, #0
 8005900:	2002      	movs	r0, #2
 8005902:	f7fd fbeb 	bl	80030dc <moveMotor>
				while (readKeypadNonBlock(ALL) == 8) {
 8005906:	2000      	movs	r0, #0
 8005908:	f7fe fb70 	bl	8003fec <readKeypadNonBlock>
 800590c:	4603      	mov	r3, r0
 800590e:	2b08      	cmp	r3, #8
 8005910:	d0e1      	beq.n	80058d6 <MotorTest+0x246>
					}
				}
				moveMotor(CAPMOTOR, OFF, INT_INF);
 8005912:	4a2d      	ldr	r2, [pc, #180]	@ (80059c8 <MotorTest+0x338>)
 8005914:	2100      	movs	r1, #0
 8005916:	2002      	movs	r0, #2
 8005918:	f7fd fbe0 	bl	80030dc <moveMotor>
			}

			if (var == 4) {
 800591c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005920:	2b04      	cmp	r3, #4
 8005922:	d124      	bne.n	800596e <MotorTest+0x2de>
				while (readKeypadNonBlock(ALL) == 4) {
 8005924:	e017      	b.n	8005956 <MotorTest+0x2c6>
					if (Clamp_M2_EncA_Pulses > M1POS1VAL || Clamp_M2_EncB_Pulses > M1POS1VAL) {
 8005926:	4b29      	ldr	r3, [pc, #164]	@ (80059cc <MotorTest+0x33c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	dc03      	bgt.n	8005936 <MotorTest+0x2a6>
 800592e:	4b28      	ldr	r3, [pc, #160]	@ (80059d0 <MotorTest+0x340>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	dd0a      	ble.n	800594c <MotorTest+0x2bc>
						SerialPrintlnINT(Clamp_M2_EncA_Pulses);
 8005936:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <MotorTest+0x33c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fd64 	bl	8005408 <SerialPrintlnINT>
						moveMotor(CLAMPMOTOR, CW, M1POS1VAL);
 8005940:	2200      	movs	r2, #0
 8005942:	2101      	movs	r1, #1
 8005944:	2001      	movs	r0, #1
 8005946:	f7fd fbc9 	bl	80030dc <moveMotor>
 800594a:	e004      	b.n	8005956 <MotorTest+0x2c6>
					} else {
						moveMotor(CLAMPMOTOR, OFF, INT_INF);
 800594c:	4a1e      	ldr	r2, [pc, #120]	@ (80059c8 <MotorTest+0x338>)
 800594e:	2100      	movs	r1, #0
 8005950:	2001      	movs	r0, #1
 8005952:	f7fd fbc3 	bl	80030dc <moveMotor>
				while (readKeypadNonBlock(ALL) == 4) {
 8005956:	2000      	movs	r0, #0
 8005958:	f7fe fb48 	bl	8003fec <readKeypadNonBlock>
 800595c:	4603      	mov	r3, r0
 800595e:	2b04      	cmp	r3, #4
 8005960:	d0e1      	beq.n	8005926 <MotorTest+0x296>
					}
				}
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005962:	4a19      	ldr	r2, [pc, #100]	@ (80059c8 <MotorTest+0x338>)
 8005964:	2100      	movs	r1, #0
 8005966:	2001      	movs	r0, #1
 8005968:	f7fd fbb8 	bl	80030dc <moveMotor>
 800596c:	e69c      	b.n	80056a8 <MotorTest+0x18>
			}
			else if (var == 6) {
 800596e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005972:	2b06      	cmp	r3, #6
 8005974:	d155      	bne.n	8005a22 <MotorTest+0x392>
				while (readKeypadNonBlock(ALL) == 6) {
 8005976:	e048      	b.n	8005a0a <MotorTest+0x37a>
 8005978:	080171fc 	.word	0x080171fc
 800597c:	200027f0 	.word	0x200027f0
 8005980:	20000364 	.word	0x20000364
 8005984:	20000394 	.word	0x20000394
 8005988:	20000110 	.word	0x20000110
 800598c:	0801720c 	.word	0x0801720c
 8005990:	08017214 	.word	0x08017214
 8005994:	2000038d 	.word	0x2000038d
 8005998:	2000010f 	.word	0x2000010f
 800599c:	08017220 	.word	0x08017220
 80059a0:	08017230 	.word	0x08017230
 80059a4:	2000035c 	.word	0x2000035c
 80059a8:	200027e0 	.word	0x200027e0
 80059ac:	08017248 	.word	0x08017248
 80059b0:	08017258 	.word	0x08017258
 80059b4:	08017270 	.word	0x08017270
 80059b8:	20000380 	.word	0x20000380
 80059bc:	08017288 	.word	0x08017288
 80059c0:	20000104 	.word	0x20000104
 80059c4:	20000108 	.word	0x20000108
 80059c8:	0098967f 	.word	0x0098967f
 80059cc:	200000fc 	.word	0x200000fc
 80059d0:	20000100 	.word	0x20000100
					if (Clamp_M2_EncA_Pulses < (M1POS2VAL)  || Clamp_M2_EncB_Pulses < (M1POS2VAL)) {
 80059d4:	4b7e      	ldr	r3, [pc, #504]	@ (8005bd0 <MotorTest+0x540>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f5b3 7f39 	cmp.w	r3, #740	@ 0x2e4
 80059dc:	db04      	blt.n	80059e8 <MotorTest+0x358>
 80059de:	4b7d      	ldr	r3, [pc, #500]	@ (8005bd4 <MotorTest+0x544>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f5b3 7f39 	cmp.w	r3, #740	@ 0x2e4
 80059e6:	da0b      	bge.n	8005a00 <MotorTest+0x370>
						SerialPrintlnINT(Clamp_M2_EncA_Pulses);
 80059e8:	4b79      	ldr	r3, [pc, #484]	@ (8005bd0 <MotorTest+0x540>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fd0b 	bl	8005408 <SerialPrintlnINT>
						moveMotor(CLAMPMOTOR, CCW, (M1POS2VAL));
 80059f2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80059f6:	2102      	movs	r1, #2
 80059f8:	2001      	movs	r0, #1
 80059fa:	f7fd fb6f 	bl	80030dc <moveMotor>
 80059fe:	e004      	b.n	8005a0a <MotorTest+0x37a>
					} else {
						moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005a00:	4a75      	ldr	r2, [pc, #468]	@ (8005bd8 <MotorTest+0x548>)
 8005a02:	2100      	movs	r1, #0
 8005a04:	2001      	movs	r0, #1
 8005a06:	f7fd fb69 	bl	80030dc <moveMotor>
				while (readKeypadNonBlock(ALL) == 6) {
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f7fe faee 	bl	8003fec <readKeypadNonBlock>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d0de      	beq.n	80059d4 <MotorTest+0x344>
					}
				}
				moveMotor(CLAMPMOTOR, OFF, INT_INF);
 8005a16:	4a70      	ldr	r2, [pc, #448]	@ (8005bd8 <MotorTest+0x548>)
 8005a18:	2100      	movs	r1, #0
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f7fd fb5e 	bl	80030dc <moveMotor>
 8005a20:	e642      	b.n	80056a8 <MotorTest+0x18>
			}
			else if (var == 9) { //Which thing should be controlled with it?
 8005a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	d11f      	bne.n	8005a6a <MotorTest+0x3da>
				while (readKeypadNonBlock(ALL) == 9) {
 8005a2a:	e012      	b.n	8005a52 <MotorTest+0x3c2>
					if(ValveOpen > ValveClose){
						if (percent <= ValveOpen) {
 8005a2c:	4b6b      	ldr	r3, [pc, #428]	@ (8005bdc <MotorTest+0x54c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b64      	cmp	r3, #100	@ 0x64
 8005a32:	dc09      	bgt.n	8005a48 <MotorTest+0x3b8>
							Servo_SetPercent(percent +1);//(angle + 1);
 8005a34:	4b69      	ldr	r3, [pc, #420]	@ (8005bdc <MotorTest+0x54c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fd62 	bl	8005504 <Servo_SetPercent>
							HAL_Delay(20);
 8005a40:	2014      	movs	r0, #20
 8005a42:	f002 fe59 	bl	80086f8 <HAL_Delay>
 8005a46:	e004      	b.n	8005a52 <MotorTest+0x3c2>
						} else { //Do Nothing?
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8005a48:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8005be0 <MotorTest+0x550>
 8005a4c:	2005      	movs	r0, #5
 8005a4e:	f001 fbbb 	bl	80071c8 <pwm>
				while (readKeypadNonBlock(ALL) == 9) {
 8005a52:	2000      	movs	r0, #0
 8005a54:	f7fe faca 	bl	8003fec <readKeypadNonBlock>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d0e6      	beq.n	8005a2c <MotorTest+0x39c>
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
						}
					}
				}
				//moveMotor(CLAMPMOTOR, OFF, INT_INF);
				pwm(ServoDC_M1_PWM, 0);
 8005a5e:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8005be0 <MotorTest+0x550>
 8005a62:	2000      	movs	r0, #0
 8005a64:	f001 fbb0 	bl	80071c8 <pwm>
 8005a68:	e61e      	b.n	80056a8 <MotorTest+0x18>

			}
			else if (var == 7) { //Which thing should be controlled with it?
 8005a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a6e:	2b07      	cmp	r3, #7
 8005a70:	f47f ae1a 	bne.w	80056a8 <MotorTest+0x18>
				while (readKeypadNonBlock(ALL) == 7) {
 8005a74:	e012      	b.n	8005a9c <MotorTest+0x40c>
					if(ValveOpen > ValveClose){
						if (percent >= ValveClose) {
 8005a76:	4b59      	ldr	r3, [pc, #356]	@ (8005bdc <MotorTest+0x54c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	db09      	blt.n	8005a92 <MotorTest+0x402>
							Servo_SetPercent(percent - 1);
 8005a7e:	4b57      	ldr	r3, [pc, #348]	@ (8005bdc <MotorTest+0x54c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fd3d 	bl	8005504 <Servo_SetPercent>
							HAL_Delay(20);
 8005a8a:	2014      	movs	r0, #20
 8005a8c:	f002 fe34 	bl	80086f8 <HAL_Delay>
 8005a90:	e004      	b.n	8005a9c <MotorTest+0x40c>
						} else { //Do Nothing?
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8005a92:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8005be0 <MotorTest+0x550>
 8005a96:	2005      	movs	r0, #5
 8005a98:	f001 fb96 	bl	80071c8 <pwm>
				while (readKeypadNonBlock(ALL) == 7) {
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	f7fe faa5 	bl	8003fec <readKeypadNonBlock>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b07      	cmp	r3, #7
 8005aa6:	d0e6      	beq.n	8005a76 <MotorTest+0x3e6>
							pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
						}
					}
				}
				//moveMotor(CLAMPMOTOR, OFF, INT_INF);
				pwm(Servo_PWM_OR_DC_M1_EncA_Interrupt, 0);
 8005aa8:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8005be0 <MotorTest+0x550>
 8005aac:	2005      	movs	r0, #5
 8005aae:	f001 fb8b 	bl	80071c8 <pwm>
 8005ab2:	e5f9      	b.n	80056a8 <MotorTest+0x18>
				//moveMotor(VALVEMOTOR, OFF, INT_INF);		//Relay Control ON
			} else if (var == 3) {
				//moveMotor(VALVEMOTOR, ON, INT_INF);	//Relay Control OFF
			}
		} else {
			ReadKeypadVar(ALL);
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fe fa4d 	bl	8003f54 <ReadKeypadVar>
			char buffer[21]; // Buffer to hold the formatted string
			char buffer2[21]; // Buffer to hold the formatted string
			sprintf(buffer, "AC-W:%ld S:%d", Total_Weight,percent);
 8005aba:	4b4a      	ldr	r3, [pc, #296]	@ (8005be4 <MotorTest+0x554>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	4b47      	ldr	r3, [pc, #284]	@ (8005bdc <MotorTest+0x54c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f107 001c 	add.w	r0, r7, #28
 8005ac6:	4948      	ldr	r1, [pc, #288]	@ (8005be8 <MotorTest+0x558>)
 8005ac8:	f00d fd2e 	bl	8013528 <siprintf>
			printLCD(0, buffer, NO_SYMBOL);
 8005acc:	f107 031c 	add.w	r3, r7, #28
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7ff f8a3 	bl	8004c20 <printLCD>
			printLCD(1, "CAP    CLAMP   SERVO", NO_SYMBOL);
 8005ada:	2200      	movs	r2, #0
 8005adc:	4943      	ldr	r1, [pc, #268]	@ (8005bec <MotorTest+0x55c>)
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f7ff f89e 	bl	8004c20 <printLCD>
			printLCD(2, "0,2,5,8   4/6    7/9", NO_SYMBOL);
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	4942      	ldr	r1, [pc, #264]	@ (8005bf0 <MotorTest+0x560>)
 8005ae8:	2002      	movs	r0, #2
 8005aea:	f7ff f899 	bl	8004c20 <printLCD>
			sprintf(buffer2, "Valve: 1/3 %s", ValveStatus);
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	4a40      	ldr	r2, [pc, #256]	@ (8005bf4 <MotorTest+0x564>)
 8005af2:	4941      	ldr	r1, [pc, #260]	@ (8005bf8 <MotorTest+0x568>)
 8005af4:	4618      	mov	r0, r3
 8005af6:	f00d fd17 	bl	8013528 <siprintf>
			printLCD(3, buffer2, NO_SYMBOL);
 8005afa:	1d3b      	adds	r3, r7, #4
 8005afc:	2200      	movs	r2, #0
 8005afe:	4619      	mov	r1, r3
 8005b00:	2003      	movs	r0, #3
 8005b02:	f7ff f88d 	bl	8004c20 <printLCD>

			switch(lastKeyPressed){
 8005b06:	4b3d      	ldr	r3, [pc, #244]	@ (8005bfc <MotorTest+0x56c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b0d      	cmp	r3, #13
 8005b0c:	d85a      	bhi.n	8005bc4 <MotorTest+0x534>
 8005b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b14 <MotorTest+0x484>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005b93 	.word	0x08005b93
 8005b18:	08005b5f 	.word	0x08005b5f
 8005b1c:	08005b9b 	.word	0x08005b9b
 8005b20:	08005b6b 	.word	0x08005b6b
 8005b24:	08005b4d 	.word	0x08005b4d
 8005b28:	08005ba5 	.word	0x08005ba5
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b77 	.word	0x08005b77
 8005b34:	08005baf 	.word	0x08005baf
 8005b38:	08005b85 	.word	0x08005b85
 8005b3c:	08005bb9 	.word	0x08005bb9
 8005b40:	08005bc5 	.word	0x08005bc5
 8005b44:	08005bc5 	.word	0x08005bc5
 8005b48:	08005bbf 	.word	0x08005bbf
			case  4:
				moveMotorClampToLocBlock(M1POS1VAL);
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f7fd f981 	bl	8002e54 <moveMotorClampToLocBlock>
				break;
 8005b52:	e03b      	b.n	8005bcc <MotorTest+0x53c>
			case  6:
				moveMotorClampToLocBlock(M1POS2VAL);
 8005b54:	f44f 7039 	mov.w	r0, #740	@ 0x2e4
 8005b58:	f7fd f97c 	bl	8002e54 <moveMotorClampToLocBlock>
				break;
 8005b5c:	e036      	b.n	8005bcc <MotorTest+0x53c>

			case  1:
				moveMotor(VALVEMOTOR, OFF, INT_INF);	//Relay Control ON
 8005b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd8 <MotorTest+0x548>)
 8005b60:	2100      	movs	r1, #0
 8005b62:	2003      	movs	r0, #3
 8005b64:	f7fd faba 	bl	80030dc <moveMotor>
				break;
 8005b68:	e030      	b.n	8005bcc <MotorTest+0x53c>

			case  3:
				moveMotor(VALVEMOTOR, ON, INT_INF);		//Relay Control OFF
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd8 <MotorTest+0x548>)
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	2003      	movs	r0, #3
 8005b70:	f7fd fab4 	bl	80030dc <moveMotor>
				break;
 8005b74:	e02a      	b.n	8005bcc <MotorTest+0x53c>

			case  7:
				Servo_SetPercent(percent - 10);
 8005b76:	4b19      	ldr	r3, [pc, #100]	@ (8005bdc <MotorTest+0x54c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3b0a      	subs	r3, #10
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fcc1 	bl	8005504 <Servo_SetPercent>
				break;
 8005b82:	e023      	b.n	8005bcc <MotorTest+0x53c>
			case  9:
				Servo_SetPercent(percent + 10);
 8005b84:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <MotorTest+0x54c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330a      	adds	r3, #10
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fcba 	bl	8005504 <Servo_SetPercent>
				break;
 8005b90:	e01c      	b.n	8005bcc <MotorTest+0x53c>
			case  0:
				moveMotorSpindleToLocBlock(M2POS1VAL);
 8005b92:	2000      	movs	r0, #0
 8005b94:	f7fd f932 	bl	8002dfc <moveMotorSpindleToLocBlock>
				break;
 8005b98:	e018      	b.n	8005bcc <MotorTest+0x53c>

			case  2:
				moveMotorSpindleToLocBlock(M2POS2VAL);
 8005b9a:	f640 40b2 	movw	r0, #3250	@ 0xcb2
 8005b9e:	f7fd f92d 	bl	8002dfc <moveMotorSpindleToLocBlock>
				break;
 8005ba2:	e013      	b.n	8005bcc <MotorTest+0x53c>

			case  5:
				moveMotorSpindleToLocBlock(M2POS3VAL);
 8005ba4:	f241 1094 	movw	r0, #4500	@ 0x1194
 8005ba8:	f7fd f928 	bl	8002dfc <moveMotorSpindleToLocBlock>
				break;
 8005bac:	e00e      	b.n	8005bcc <MotorTest+0x53c>

			case  8:
				moveMotorSpindleToLocBlock(M2POS4VAL);
 8005bae:	f641 30bc 	movw	r0, #7100	@ 0x1bbc
 8005bb2:	f7fd f923 	bl	8002dfc <moveMotorSpindleToLocBlock>
				break;
 8005bb6:	e009      	b.n	8005bcc <MotorTest+0x53c>

			case  10:
				CustomerFrontEnd();
 8005bb8:	f7fb fb40 	bl	800123c <CustomerFrontEnd>
				break;
 8005bbc:	e006      	b.n	8005bcc <MotorTest+0x53c>
			case  13:
				TareAll();
 8005bbe:	f7ff f927 	bl	8004e10 <TareAll>
				break;
 8005bc2:	e003      	b.n	8005bcc <MotorTest+0x53c>
			default :
				lastKeyPressed =255;
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bfc <MotorTest+0x56c>)
 8005bc6:	22ff      	movs	r2, #255	@ 0xff
 8005bc8:	601a      	str	r2, [r3, #0]
				break;
 8005bca:	bf00      	nop
		 if (HAL_GetTick() - StoringTimedev >= 1000) {  // Check if 2 seconds passed
 8005bcc:	e56c      	b.n	80056a8 <MotorTest+0x18>
 8005bce:	bf00      	nop
 8005bd0:	200000fc 	.word	0x200000fc
 8005bd4:	20000100 	.word	0x20000100
 8005bd8:	0098967f 	.word	0x0098967f
 8005bdc:	200027e0 	.word	0x200027e0
 8005be0:	00000000 	.word	0x00000000
 8005be4:	2000035c 	.word	0x2000035c
 8005be8:	08017298 	.word	0x08017298
 8005bec:	08017258 	.word	0x08017258
 8005bf0:	080172a8 	.word	0x080172a8
 8005bf4:	20000380 	.word	0x20000380
 8005bf8:	08017288 	.word	0x08017288
 8005bfc:	20000110 	.word	0x20000110

08005c00 <DeveloperMenu>:
		}
	}

}

void DeveloperMenu(void) { //Enter developer menu under next condition
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
	int pass = 0;
 8005c06:	2300      	movs	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]
	if (digitalRead(Button_ManAuto_Input_PullUp) == LOW) { // Man/Auto, comma and delete are all pressed at same time
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	f7fd f8ae 	bl	8002d6c <digitalRead>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d115      	bne.n	8005c42 <DeveloperMenu+0x42>
		if (digitalRead(Button_Comma_Input_PullUp) == LOW) {
 8005c16:	200e      	movs	r0, #14
 8005c18:	f7fd f8a8 	bl	8002d6c <digitalRead>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10f      	bne.n	8005c42 <DeveloperMenu+0x42>
			if (digitalRead(Button_DelBack_Input_PullUp) == LOW) {
 8005c22:	2002      	movs	r0, #2
 8005c24:	f7fd f8a2 	bl	8002d6c <digitalRead>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <DeveloperMenu+0x42>
				pass = EnterPassword();
 8005c2e:	f000 f80d 	bl	8005c4c <EnterPassword>
 8005c32:	6078      	str	r0, [r7, #4]
				if (pass == 4869) { //Then this password is entered
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f241 3205 	movw	r2, #4869	@ 0x1305
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <DeveloperMenu+0x42>
					MotorTest();
 8005c3e:	f7ff fd27 	bl	8005690 <MotorTest>
					//CustomerFrontEnd();
				}
			}
		}
	}
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <EnterPassword>:

int EnterPassword(void) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b090      	sub	sp, #64	@ 0x40
 8005c50:	af00      	add	r7, sp, #0
	int Key = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char stars[21] = { '\0' }; // Allocate a char array for the password asterisks
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
 8005c5a:	f107 0320 	add.w	r3, r7, #32
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	605a      	str	r2, [r3, #4]
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	741a      	strb	r2, [r3, #16]
	char buffer[21];          // Buffer for converting numbers to strings

	LCD_Clear();
 8005c6a:	f7fe fed9 	bl	8004a20 <LCD_Clear>
	printLCD(0, "Enter password:", NO_SYMBOL);
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4936      	ldr	r1, [pc, #216]	@ (8005d4c <EnterPassword+0x100>)
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7fe ffd4 	bl	8004c20 <printLCD>
	ReadKeypadVar(ALL);
 8005c78:	2000      	movs	r0, #0
 8005c7a:	f7fe f96b 	bl	8003f54 <ReadKeypadVar>

	while (lastKeyPressed != ENTERKEY) {
 8005c7e:	e056      	b.n	8005d2e <EnterPassword+0xe2>
		ReadKeypadVar(ALL);
 8005c80:	2000      	movs	r0, #0
 8005c82:	f7fe f967 	bl	8003f54 <ReadKeypadVar>
		if (lastKeyPressed >= 0 && lastKeyPressed <= 9) {
 8005c86:	4b32      	ldr	r3, [pc, #200]	@ (8005d50 <EnterPassword+0x104>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db2b      	blt.n	8005ce6 <EnterPassword+0x9a>
 8005c8e:	4b30      	ldr	r3, [pc, #192]	@ (8005d50 <EnterPassword+0x104>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b09      	cmp	r3, #9
 8005c94:	dc27      	bgt.n	8005ce6 <EnterPassword+0x9a>
			Key = Key * 10 + lastKeyPressed;
 8005c96:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8005d50 <EnterPassword+0x104>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c

			int len = strlen(stars);
 8005caa:	f107 031c 	add.w	r3, r7, #28
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7fa faee 	bl	8000290 <strlen>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (len < sizeof(stars) - 1) {
 8005cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cba:	2b13      	cmp	r3, #19
 8005cbc:	d80c      	bhi.n	8005cd8 <EnterPassword+0x8c>
				stars[len] = '*';
 8005cbe:	f107 021c 	add.w	r2, r7, #28
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	4413      	add	r3, r2
 8005cc6:	222a      	movs	r2, #42	@ 0x2a
 8005cc8:	701a      	strb	r2, [r3, #0]
				stars[len + 1] = '\0';  // Null-terminate the string
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	3301      	adds	r3, #1
 8005cce:	3340      	adds	r3, #64	@ 0x40
 8005cd0:	443b      	add	r3, r7
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f803 2c24 	strb.w	r2, [r3, #-36]
			}

			printLCD(1, stars, NO_SYMBOL);
 8005cd8:	f107 031c 	add.w	r3, r7, #28
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4619      	mov	r1, r3
 8005ce0:	2001      	movs	r0, #1
 8005ce2:	f7fe ff9d 	bl	8004c20 <printLCD>
		}
		// If DELKEY is pressed, remove the last entered character
		if (lastKeyPressed == DELKEY) {
 8005ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d50 <EnterPassword+0x104>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b0e      	cmp	r3, #14
 8005cec:	d11f      	bne.n	8005d2e <EnterPassword+0xe2>
			Key /= 10;
 8005cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf0:	4a18      	ldr	r2, [pc, #96]	@ (8005d54 <EnterPassword+0x108>)
 8005cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8005cf6:	1092      	asrs	r2, r2, #2
 8005cf8:	17db      	asrs	r3, r3, #31
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c

			int len = strlen(stars);
 8005cfe:	f107 031c 	add.w	r3, r7, #28
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fac4 	bl	8000290 <strlen>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	637b      	str	r3, [r7, #52]	@ 0x34
			if (len > 0) {
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dd06      	ble.n	8005d20 <EnterPassword+0xd4>
				stars[len - 1] = '\0';
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	3b01      	subs	r3, #1
 8005d16:	3340      	adds	r3, #64	@ 0x40
 8005d18:	443b      	add	r3, r7
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f803 2c24 	strb.w	r2, [r3, #-36]
			}
			printLCD(1, stars, NO_SYMBOL);
 8005d20:	f107 031c 	add.w	r3, r7, #28
 8005d24:	2200      	movs	r2, #0
 8005d26:	4619      	mov	r1, r3
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7fe ff79 	bl	8004c20 <printLCD>
	while (lastKeyPressed != ENTERKEY) {
 8005d2e:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <EnterPassword+0x104>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b0b      	cmp	r3, #11
 8005d34:	d1a4      	bne.n	8005c80 <EnterPassword+0x34>
		}
	}
	// Convert integer Key to string and print
	snprintf(buffer, sizeof(buffer), "Pass: %d", Key);
 8005d36:	1d38      	adds	r0, r7, #4
 8005d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3a:	4a07      	ldr	r2, [pc, #28]	@ (8005d58 <EnterPassword+0x10c>)
 8005d3c:	2115      	movs	r1, #21
 8005d3e:	f00d fbbf 	bl	80134c0 <sniprintf>
	//SerialPrint(buffer);

	return Key;
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3740      	adds	r7, #64	@ 0x40
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	080172c0 	.word	0x080172c0
 8005d50:	20000110 	.word	0x20000110
 8005d54:	66666667 	.word	0x66666667
 8005d58:	080172d0 	.word	0x080172d0

08005d5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005d62:	463b      	mov	r3, r7
 8005d64:	2200      	movs	r2, #0
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	605a      	str	r2, [r3, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005d6e:	4b21      	ldr	r3, [pc, #132]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d70:	4a21      	ldr	r2, [pc, #132]	@ (8005df8 <MX_ADC1_Init+0x9c>)
 8005d72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005d74:	4b1f      	ldr	r3, [pc, #124]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005d7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005d82:	4b1c      	ldr	r3, [pc, #112]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005d88:	4b1a      	ldr	r3, [pc, #104]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d8e:	4b19      	ldr	r3, [pc, #100]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d96:	4b17      	ldr	r3, [pc, #92]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d9c:	4b15      	ldr	r3, [pc, #84]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005d9e:	4a17      	ldr	r2, [pc, #92]	@ (8005dfc <MX_ADC1_Init+0xa0>)
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005da2:	4b14      	ldr	r3, [pc, #80]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005da8:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005dae:	4b11      	ldr	r3, [pc, #68]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005db6:	4b0f      	ldr	r3, [pc, #60]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005dbc:	480d      	ldr	r0, [pc, #52]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005dbe:	f002 fcbf 	bl	8008740 <HAL_ADC_Init>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005dc8:	f001 f9f8 	bl	80071bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005dcc:	230e      	movs	r3, #14
 8005dce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005dd8:	463b      	mov	r3, r7
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4805      	ldr	r0, [pc, #20]	@ (8005df4 <MX_ADC1_Init+0x98>)
 8005dde:	f002 fe91 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005de8:	f001 f9e8 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005dec:	bf00      	nop
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200027f8 	.word	0x200027f8
 8005df8:	40012000 	.word	0x40012000
 8005dfc:	0f000001 	.word	0x0f000001

08005e00 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005e06:	463b      	mov	r3, r7
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	605a      	str	r2, [r3, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
 8005e10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005e12:	4b21      	ldr	r3, [pc, #132]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e14:	4a21      	ldr	r2, [pc, #132]	@ (8005e9c <MX_ADC2_Init+0x9c>)
 8005e16:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005e18:	4b1f      	ldr	r3, [pc, #124]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e1a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005e1e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005e20:	4b1d      	ldr	r3, [pc, #116]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8005e26:	4b1c      	ldr	r3, [pc, #112]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005e32:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005e3a:	4b17      	ldr	r3, [pc, #92]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005e40:	4b15      	ldr	r3, [pc, #84]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e42:	4a17      	ldr	r2, [pc, #92]	@ (8005ea0 <MX_ADC2_Init+0xa0>)
 8005e44:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005e46:	4b14      	ldr	r3, [pc, #80]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005e4c:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005e52:	4b11      	ldr	r3, [pc, #68]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005e60:	480d      	ldr	r0, [pc, #52]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e62:	f002 fc6d 	bl	8008740 <HAL_ADC_Init>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005e6c:	f001 f9a6 	bl	80071bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005e70:	2301      	movs	r3, #1
 8005e72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005e74:	2301      	movs	r3, #1
 8005e76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4805      	ldr	r0, [pc, #20]	@ (8005e98 <MX_ADC2_Init+0x98>)
 8005e82:	f002 fe3f 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005e8c:	f001 f996 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005e90:	bf00      	nop
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20002840 	.word	0x20002840
 8005e9c:	40012100 	.word	0x40012100
 8005ea0:	0f000001 	.word	0x0f000001

08005ea4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005eaa:	463b      	mov	r3, r7
 8005eac:	2200      	movs	r2, #0
 8005eae:	601a      	str	r2, [r3, #0]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	609a      	str	r2, [r3, #8]
 8005eb4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8005eb6:	4b21      	ldr	r3, [pc, #132]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005eb8:	4a21      	ldr	r2, [pc, #132]	@ (8005f40 <MX_ADC3_Init+0x9c>)
 8005eba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8005ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ebe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005ec2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8005eca:	4b1c      	ldr	r3, [pc, #112]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005ed6:	4b19      	ldr	r3, [pc, #100]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005ede:	4b17      	ldr	r3, [pc, #92]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005ee4:	4b15      	ldr	r3, [pc, #84]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ee6:	4a17      	ldr	r2, [pc, #92]	@ (8005f44 <MX_ADC3_Init+0xa0>)
 8005ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005eea:	4b14      	ldr	r3, [pc, #80]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005ef0:	4b12      	ldr	r3, [pc, #72]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005ef6:	4b11      	ldr	r3, [pc, #68]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005efe:	4b0f      	ldr	r3, [pc, #60]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005f00:	2201      	movs	r2, #1
 8005f02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005f04:	480d      	ldr	r0, [pc, #52]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005f06:	f002 fc1b 	bl	8008740 <HAL_ADC_Init>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d001      	beq.n	8005f14 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8005f10:	f001 f954 	bl	80071bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005f14:	2300      	movs	r3, #0
 8005f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005f20:	463b      	mov	r3, r7
 8005f22:	4619      	mov	r1, r3
 8005f24:	4805      	ldr	r0, [pc, #20]	@ (8005f3c <MX_ADC3_Init+0x98>)
 8005f26:	f002 fded 	bl	8008b04 <HAL_ADC_ConfigChannel>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8005f30:	f001 f944 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20002888 	.word	0x20002888
 8005f40:	40012200 	.word	0x40012200
 8005f44:	0f000001 	.word	0x0f000001

08005f48 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08e      	sub	sp, #56	@ 0x38
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a52      	ldr	r2, [pc, #328]	@ (80060b0 <HAL_ADC_MspInit+0x168>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d128      	bne.n	8005fbc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	623b      	str	r3, [r7, #32]
 8005f6e:	4b51      	ldr	r3, [pc, #324]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f72:	4a50      	ldr	r2, [pc, #320]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f7a:	4b4e      	ldr	r3, [pc, #312]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f82:	623b      	str	r3, [r7, #32]
 8005f84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	4a49      	ldr	r2, [pc, #292]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f96:	4b47      	ldr	r3, [pc, #284]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = Sensor_Pressure_ADC_Input_Pin;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Sensor_Pressure_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 8005fae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4840      	ldr	r0, [pc, #256]	@ (80060b8 <HAL_ADC_MspInit+0x170>)
 8005fb6:	f003 fe6f 	bl	8009c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8005fba:	e074      	b.n	80060a6 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC2)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80060bc <HAL_ADC_MspInit+0x174>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d128      	bne.n	8006018 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	4b3a      	ldr	r3, [pc, #232]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fce:	4a39      	ldr	r2, [pc, #228]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005fd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fd6:	4b37      	ldr	r3, [pc, #220]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fde:	61bb      	str	r3, [r7, #24]
 8005fe0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	4b33      	ldr	r3, [pc, #204]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fea:	4a32      	ldr	r2, [pc, #200]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ff2:	4b30      	ldr	r3, [pc, #192]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = V12_ADC_Input_Pin;
 8005ffe:	2302      	movs	r3, #2
 8006000:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006002:	2303      	movs	r3, #3
 8006004:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(V12_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 800600a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800600e:	4619      	mov	r1, r3
 8006010:	482b      	ldr	r0, [pc, #172]	@ (80060c0 <HAL_ADC_MspInit+0x178>)
 8006012:	f003 fe41 	bl	8009c98 <HAL_GPIO_Init>
}
 8006016:	e046      	b.n	80060a6 <HAL_ADC_MspInit+0x15e>
  else if(adcHandle->Instance==ADC3)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a29      	ldr	r2, [pc, #164]	@ (80060c4 <HAL_ADC_MspInit+0x17c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d141      	bne.n	80060a6 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	4b23      	ldr	r3, [pc, #140]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	4a22      	ldr	r2, [pc, #136]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 800602c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006030:	6453      	str	r3, [r2, #68]	@ 0x44
 8006032:	4b20      	ldr	r3, [pc, #128]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	4b1c      	ldr	r3, [pc, #112]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	4a1b      	ldr	r2, [pc, #108]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006048:	f043 0304 	orr.w	r3, r3, #4
 800604c:	6313      	str	r3, [r2, #48]	@ 0x30
 800604e:	4b19      	ldr	r3, [pc, #100]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	4b15      	ldr	r3, [pc, #84]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006062:	4a14      	ldr	r2, [pc, #80]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6313      	str	r3, [r2, #48]	@ 0x30
 800606a:	4b12      	ldr	r3, [pc, #72]	@ (80060b4 <HAL_ADC_MspInit+0x16c>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Curr_Sensor_ServoDC_ADC_Input_Pin|Curr_Sensor_Clamp_ADC_Input_Pin;
 8006076:	230c      	movs	r3, #12
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800607a:	2303      	movs	r3, #3
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607e:	2300      	movs	r3, #0
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006086:	4619      	mov	r1, r3
 8006088:	480b      	ldr	r0, [pc, #44]	@ (80060b8 <HAL_ADC_MspInit+0x170>)
 800608a:	f003 fe05 	bl	8009c98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Curr_Sensor_Spindle_ADC_Input_Pin;
 800608e:	2301      	movs	r3, #1
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006092:	2303      	movs	r3, #3
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006096:	2300      	movs	r3, #0
 8006098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Curr_Sensor_Spindle_ADC_Input_GPIO_Port, &GPIO_InitStruct);
 800609a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800609e:	4619      	mov	r1, r3
 80060a0:	4807      	ldr	r0, [pc, #28]	@ (80060c0 <HAL_ADC_MspInit+0x178>)
 80060a2:	f003 fdf9 	bl	8009c98 <HAL_GPIO_Init>
}
 80060a6:	bf00      	nop
 80060a8:	3738      	adds	r7, #56	@ 0x38
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40012000 	.word	0x40012000
 80060b4:	40023800 	.word	0x40023800
 80060b8:	40020800 	.word	0x40020800
 80060bc:	40012100 	.word	0x40012100
 80060c0:	40020000 	.word	0x40020000
 80060c4:	40012200 	.word	0x40012200

080060c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <MX_DMA_Init+0x78>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006140 <MX_DMA_Init+0x78>)
 80060d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80060de:	4b18      	ldr	r3, [pc, #96]	@ (8006140 <MX_DMA_Init+0x78>)
 80060e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060e6:	607b      	str	r3, [r7, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80060ea:	2300      	movs	r3, #0
 80060ec:	603b      	str	r3, [r7, #0]
 80060ee:	4b14      	ldr	r3, [pc, #80]	@ (8006140 <MX_DMA_Init+0x78>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f2:	4a13      	ldr	r2, [pc, #76]	@ (8006140 <MX_DMA_Init+0x78>)
 80060f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80060fa:	4b11      	ldr	r3, [pc, #68]	@ (8006140 <MX_DMA_Init+0x78>)
 80060fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8006106:	2200      	movs	r2, #0
 8006108:	2100      	movs	r1, #0
 800610a:	200c      	movs	r0, #12
 800610c:	f002 fff3 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8006110:	200c      	movs	r0, #12
 8006112:	f003 f80c 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8006116:	2200      	movs	r2, #0
 8006118:	2100      	movs	r1, #0
 800611a:	200e      	movs	r0, #14
 800611c:	f002 ffeb 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8006120:	200e      	movs	r0, #14
 8006122:	f003 f804 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	203a      	movs	r0, #58	@ 0x3a
 800612c:	f002 ffe3 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006130:	203a      	movs	r0, #58	@ 0x3a
 8006132:	f002 fffc 	bl	800912e <HAL_NVIC_EnableIRQ>

}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40023800 	.word	0x40023800

08006144 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8006148:	2200      	movs	r2, #0
 800614a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800614e:	4804      	ldr	r0, [pc, #16]	@ (8006160 <SELECT+0x1c>)
 8006150:	f003 ff56 	bl	800a000 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006154:	2001      	movs	r0, #1
 8006156:	f002 facf 	bl	80086f8 <HAL_Delay>
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40020000 	.word	0x40020000

08006164 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8006168:	2201      	movs	r2, #1
 800616a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800616e:	4804      	ldr	r0, [pc, #16]	@ (8006180 <DESELECT+0x1c>)
 8006170:	f003 ff46 	bl	800a000 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006174:	2001      	movs	r0, #1
 8006176:	f002 fabf 	bl	80086f8 <HAL_Delay>
}
 800617a:	bf00      	nop
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40020000 	.word	0x40020000

08006184 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	4603      	mov	r3, r0
 800618c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800618e:	bf00      	nop
 8006190:	4b08      	ldr	r3, [pc, #32]	@ (80061b4 <SPI_TxByte+0x30>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b02      	cmp	r3, #2
 800619c:	d1f8      	bne.n	8006190 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800619e:	1df9      	adds	r1, r7, #7
 80061a0:	2364      	movs	r3, #100	@ 0x64
 80061a2:	2201      	movs	r2, #1
 80061a4:	4803      	ldr	r0, [pc, #12]	@ (80061b4 <SPI_TxByte+0x30>)
 80061a6:	f004 fcfe 	bl	800aba6 <HAL_SPI_Transmit>
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20002900 	.word	0x20002900

080061b8 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	460b      	mov	r3, r1
 80061c2:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80061c4:	bf00      	nop
 80061c6:	4b08      	ldr	r3, [pc, #32]	@ (80061e8 <SPI_TxBuffer+0x30>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d1f8      	bne.n	80061c6 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80061d4:	887a      	ldrh	r2, [r7, #2]
 80061d6:	2364      	movs	r3, #100	@ 0x64
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4803      	ldr	r0, [pc, #12]	@ (80061e8 <SPI_TxBuffer+0x30>)
 80061dc:	f004 fce3 	bl	800aba6 <HAL_SPI_Transmit>
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20002900 	.word	0x20002900

080061ec <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80061f2:	23ff      	movs	r3, #255	@ 0xff
 80061f4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80061f6:	bf00      	nop
 80061f8:	4b09      	ldr	r3, [pc, #36]	@ (8006220 <SPI_RxByte+0x34>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d1f8      	bne.n	80061f8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8006206:	1dba      	adds	r2, r7, #6
 8006208:	1df9      	adds	r1, r7, #7
 800620a:	2364      	movs	r3, #100	@ 0x64
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2301      	movs	r3, #1
 8006210:	4803      	ldr	r0, [pc, #12]	@ (8006220 <SPI_RxByte+0x34>)
 8006212:	f004 fe0b 	bl	800ae2c <HAL_SPI_TransmitReceive>

	return data;
 8006216:	79bb      	ldrb	r3, [r7, #6]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20002900 	.word	0x20002900

08006224 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 800622c:	f7ff ffde 	bl	80061ec <SPI_RxByte>
 8006230:	4603      	mov	r3, r0
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	701a      	strb	r2, [r3, #0]
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8006246:	4b0a      	ldr	r3, [pc, #40]	@ (8006270 <SD_ReadyWait+0x30>)
 8006248:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800624c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800624e:	f7ff ffcd 	bl	80061ec <SPI_RxByte>
 8006252:	4603      	mov	r3, r0
 8006254:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	2bff      	cmp	r3, #255	@ 0xff
 800625a:	d004      	beq.n	8006266 <SD_ReadyWait+0x26>
 800625c:	4b04      	ldr	r3, [pc, #16]	@ (8006270 <SD_ReadyWait+0x30>)
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f3      	bne.n	800624e <SD_ReadyWait+0xe>

	return res;
 8006266:	79fb      	ldrb	r3, [r7, #7]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	2000295a 	.word	0x2000295a

08006274 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800627a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800627e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8006280:	f7ff ff70 	bl	8006164 <DESELECT>
	for(int i = 0; i < 10; i++)
 8006284:	2300      	movs	r3, #0
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	e005      	b.n	8006296 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800628a:	20ff      	movs	r0, #255	@ 0xff
 800628c:	f7ff ff7a 	bl	8006184 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	3301      	adds	r3, #1
 8006294:	60bb      	str	r3, [r7, #8]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	2b09      	cmp	r3, #9
 800629a:	ddf6      	ble.n	800628a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800629c:	f7ff ff52 	bl	8006144 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80062a0:	2340      	movs	r3, #64	@ 0x40
 80062a2:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80062a4:	2300      	movs	r3, #0
 80062a6:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80062b0:	2300      	movs	r3, #0
 80062b2:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80062b4:	2395      	movs	r3, #149	@ 0x95
 80062b6:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80062b8:	463b      	mov	r3, r7
 80062ba:	2106      	movs	r1, #6
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff ff7b 	bl	80061b8 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80062c2:	e002      	b.n	80062ca <SD_PowerOn+0x56>
	{
		cnt--;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3b01      	subs	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80062ca:	f7ff ff8f 	bl	80061ec <SPI_RxByte>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d002      	beq.n	80062da <SD_PowerOn+0x66>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f4      	bne.n	80062c4 <SD_PowerOn+0x50>
	}

	DESELECT();
 80062da:	f7ff ff43 	bl	8006164 <DESELECT>
	SPI_TxByte(0XFF);
 80062de:	20ff      	movs	r0, #255	@ 0xff
 80062e0:	f7ff ff50 	bl	8006184 <SPI_TxByte>

	PowerFlag = 1;
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <SD_PowerOn+0x80>)
 80062e6:	2201      	movs	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	200028d1 	.word	0x200028d1

080062f8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80062fc:	4b03      	ldr	r3, [pc, #12]	@ (800630c <SD_PowerOff+0x14>)
 80062fe:	2200      	movs	r2, #0
 8006300:	701a      	strb	r2, [r3, #0]
}
 8006302:	bf00      	nop
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	200028d1 	.word	0x200028d1

08006310 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
	return PowerFlag;
 8006314:	4b03      	ldr	r3, [pc, #12]	@ (8006324 <SD_CheckPower+0x14>)
 8006316:	781b      	ldrb	r3, [r3, #0]
}
 8006318:	4618      	mov	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	200028d1 	.word	0x200028d1

08006328 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8006332:	4b14      	ldr	r3, [pc, #80]	@ (8006384 <SD_RxDataBlock+0x5c>)
 8006334:	22c8      	movs	r2, #200	@ 0xc8
 8006336:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8006338:	f7ff ff58 	bl	80061ec <SPI_RxByte>
 800633c:	4603      	mov	r3, r0
 800633e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	2bff      	cmp	r3, #255	@ 0xff
 8006344:	d104      	bne.n	8006350 <SD_RxDataBlock+0x28>
 8006346:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <SD_RxDataBlock+0x5c>)
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f3      	bne.n	8006338 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	2bfe      	cmp	r3, #254	@ 0xfe
 8006354:	d001      	beq.n	800635a <SD_RxDataBlock+0x32>
 8006356:	2300      	movs	r3, #0
 8006358:	e00f      	b.n	800637a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff ff5f 	bl	8006224 <SPI_RxBytePtr>
	} while(len--);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	1e5a      	subs	r2, r3, #1
 800636a:	603a      	str	r2, [r7, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f4      	bne.n	800635a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8006370:	f7ff ff3c 	bl	80061ec <SPI_RxByte>
	SPI_RxByte();
 8006374:	f7ff ff3a 	bl	80061ec <SPI_RxByte>

	return TRUE;
 8006378:	2301      	movs	r3, #1
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20002959 	.word	0x20002959

08006388 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	460b      	mov	r3, r1
 8006392:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8006398:	f7ff ff52 	bl	8006240 <SD_ReadyWait>
 800639c:	4603      	mov	r3, r0
 800639e:	2bff      	cmp	r3, #255	@ 0xff
 80063a0:	d001      	beq.n	80063a6 <SD_TxDataBlock+0x1e>
 80063a2:	2300      	movs	r3, #0
 80063a4:	e02f      	b.n	8006406 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff feeb 	bl	8006184 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80063ae:	78fb      	ldrb	r3, [r7, #3]
 80063b0:	2bfd      	cmp	r3, #253	@ 0xfd
 80063b2:	d020      	beq.n	80063f6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80063b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff fefd 	bl	80061b8 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80063be:	f7ff ff15 	bl	80061ec <SPI_RxByte>
		SPI_RxByte();
 80063c2:	f7ff ff13 	bl	80061ec <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80063c6:	e00b      	b.n	80063e0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80063c8:	f7ff ff10 	bl	80061ec <SPI_RxByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	f003 031f 	and.w	r3, r3, #31
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	d006      	beq.n	80063e8 <SD_TxDataBlock+0x60>
			i++;
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	3301      	adds	r3, #1
 80063de:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	2b40      	cmp	r3, #64	@ 0x40
 80063e4:	d9f0      	bls.n	80063c8 <SD_TxDataBlock+0x40>
 80063e6:	e000      	b.n	80063ea <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80063e8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80063ea:	bf00      	nop
 80063ec:	f7ff fefe 	bl	80061ec <SPI_RxByte>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0fa      	beq.n	80063ec <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	f003 031f 	and.w	r3, r3, #31
 80063fc:	2b05      	cmp	r3, #5
 80063fe:	d101      	bne.n	8006404 <SD_TxDataBlock+0x7c>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <SD_TxDataBlock+0x7e>

	return FALSE;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b084      	sub	sp, #16
 8006412:	af00      	add	r7, sp, #0
 8006414:	4603      	mov	r3, r0
 8006416:	6039      	str	r1, [r7, #0]
 8006418:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800641a:	f7ff ff11 	bl	8006240 <SD_ReadyWait>
 800641e:	4603      	mov	r3, r0
 8006420:	2bff      	cmp	r3, #255	@ 0xff
 8006422:	d001      	beq.n	8006428 <SD_SendCmd+0x1a>
 8006424:	23ff      	movs	r3, #255	@ 0xff
 8006426:	e042      	b.n	80064ae <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff feaa 	bl	8006184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	0e1b      	lsrs	r3, r3, #24
 8006434:	b2db      	uxtb	r3, r3
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fea4 	bl	8006184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	0c1b      	lsrs	r3, r3, #16
 8006440:	b2db      	uxtb	r3, r3
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fe9e 	bl	8006184 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	b2db      	uxtb	r3, r3
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff fe98 	bl	8006184 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	4618      	mov	r0, r3
 800645a:	f7ff fe93 	bl	8006184 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	2b40      	cmp	r3, #64	@ 0x40
 8006462:	d102      	bne.n	800646a <SD_SendCmd+0x5c>
 8006464:	2395      	movs	r3, #149	@ 0x95
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e007      	b.n	800647a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800646a:	79fb      	ldrb	r3, [r7, #7]
 800646c:	2b48      	cmp	r3, #72	@ 0x48
 800646e:	d102      	bne.n	8006476 <SD_SendCmd+0x68>
 8006470:	2387      	movs	r3, #135	@ 0x87
 8006472:	73fb      	strb	r3, [r7, #15]
 8006474:	e001      	b.n	800647a <SD_SendCmd+0x6c>
	else crc = 1;
 8006476:	2301      	movs	r3, #1
 8006478:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff fe81 	bl	8006184 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	2b4c      	cmp	r3, #76	@ 0x4c
 8006486:	d101      	bne.n	800648c <SD_SendCmd+0x7e>
 8006488:	f7ff feb0 	bl	80061ec <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800648c:	230a      	movs	r3, #10
 800648e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8006490:	f7ff feac 	bl	80061ec <SPI_RxByte>
 8006494:	4603      	mov	r3, r0
 8006496:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8006498:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800649c:	2b00      	cmp	r3, #0
 800649e:	da05      	bge.n	80064ac <SD_SendCmd+0x9e>
 80064a0:	7bbb      	ldrb	r3, [r7, #14]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	73bb      	strb	r3, [r7, #14]
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f1      	bne.n	8006490 <SD_SendCmd+0x82>

	return res;
 80064ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80064b8:	b590      	push	{r4, r7, lr}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <SD_disk_initialize+0x14>
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0d6      	b.n	800667a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80064cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006684 <SD_disk_initialize+0x1cc>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <SD_disk_initialize+0x2a>
 80064da:	4b6a      	ldr	r3, [pc, #424]	@ (8006684 <SD_disk_initialize+0x1cc>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	e0cb      	b.n	800667a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 80064e2:	f7ff fec7 	bl	8006274 <SD_PowerOn>

	/* slave select */
	SELECT();
 80064e6:	f7ff fe2d 	bl	8006144 <SELECT>

	/* check disk type */
	type = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80064ee:	2100      	movs	r1, #0
 80064f0:	2040      	movs	r0, #64	@ 0x40
 80064f2:	f7ff ff8c 	bl	800640e <SD_SendCmd>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	f040 80a6 	bne.w	800664a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80064fe:	4b62      	ldr	r3, [pc, #392]	@ (8006688 <SD_disk_initialize+0x1d0>)
 8006500:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006504:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8006506:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800650a:	2048      	movs	r0, #72	@ 0x48
 800650c:	f7ff ff7f 	bl	800640e <SD_SendCmd>
 8006510:	4603      	mov	r3, r0
 8006512:	2b01      	cmp	r3, #1
 8006514:	d158      	bne.n	80065c8 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8006516:	2300      	movs	r3, #0
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	e00c      	b.n	8006536 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 800651c:	7bfc      	ldrb	r4, [r7, #15]
 800651e:	f7ff fe65 	bl	80061ec <SPI_RxByte>
 8006522:	4603      	mov	r3, r0
 8006524:	461a      	mov	r2, r3
 8006526:	f104 0310 	add.w	r3, r4, #16
 800652a:	443b      	add	r3, r7
 800652c:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	3301      	adds	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	2b03      	cmp	r3, #3
 800653a:	d9ef      	bls.n	800651c <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800653c:	7abb      	ldrb	r3, [r7, #10]
 800653e:	2b01      	cmp	r3, #1
 8006540:	f040 8083 	bne.w	800664a <SD_disk_initialize+0x192>
 8006544:	7afb      	ldrb	r3, [r7, #11]
 8006546:	2baa      	cmp	r3, #170	@ 0xaa
 8006548:	d17f      	bne.n	800664a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800654a:	2100      	movs	r1, #0
 800654c:	2077      	movs	r0, #119	@ 0x77
 800654e:	f7ff ff5e 	bl	800640e <SD_SendCmd>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d807      	bhi.n	8006568 <SD_disk_initialize+0xb0>
 8006558:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800655c:	2069      	movs	r0, #105	@ 0x69
 800655e:	f7ff ff56 	bl	800640e <SD_SendCmd>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8006568:	4b47      	ldr	r3, [pc, #284]	@ (8006688 <SD_disk_initialize+0x1d0>)
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1eb      	bne.n	800654a <SD_disk_initialize+0x92>
 8006572:	e000      	b.n	8006576 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8006574:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8006576:	4b44      	ldr	r3, [pc, #272]	@ (8006688 <SD_disk_initialize+0x1d0>)
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d064      	beq.n	800664a <SD_disk_initialize+0x192>
 8006580:	2100      	movs	r1, #0
 8006582:	207a      	movs	r0, #122	@ 0x7a
 8006584:	f7ff ff43 	bl	800640e <SD_SendCmd>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d15d      	bne.n	800664a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	e00c      	b.n	80065ae <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8006594:	7bfc      	ldrb	r4, [r7, #15]
 8006596:	f7ff fe29 	bl	80061ec <SPI_RxByte>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	f104 0310 	add.w	r3, r4, #16
 80065a2:	443b      	add	r3, r7
 80065a4:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	3301      	adds	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d9ef      	bls.n	8006594 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80065b4:	7a3b      	ldrb	r3, [r7, #8]
 80065b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <SD_disk_initialize+0x10a>
 80065be:	230c      	movs	r3, #12
 80065c0:	e000      	b.n	80065c4 <SD_disk_initialize+0x10c>
 80065c2:	2304      	movs	r3, #4
 80065c4:	73bb      	strb	r3, [r7, #14]
 80065c6:	e040      	b.n	800664a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80065c8:	2100      	movs	r1, #0
 80065ca:	2077      	movs	r0, #119	@ 0x77
 80065cc:	f7ff ff1f 	bl	800640e <SD_SendCmd>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d808      	bhi.n	80065e8 <SD_disk_initialize+0x130>
 80065d6:	2100      	movs	r1, #0
 80065d8:	2069      	movs	r0, #105	@ 0x69
 80065da:	f7ff ff18 	bl	800640e <SD_SendCmd>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d801      	bhi.n	80065e8 <SD_disk_initialize+0x130>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e000      	b.n	80065ea <SD_disk_initialize+0x132>
 80065e8:	2301      	movs	r3, #1
 80065ea:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d10e      	bne.n	8006610 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80065f2:	2100      	movs	r1, #0
 80065f4:	2077      	movs	r0, #119	@ 0x77
 80065f6:	f7ff ff0a 	bl	800640e <SD_SendCmd>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d80e      	bhi.n	800661e <SD_disk_initialize+0x166>
 8006600:	2100      	movs	r1, #0
 8006602:	2069      	movs	r0, #105	@ 0x69
 8006604:	f7ff ff03 	bl	800640e <SD_SendCmd>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d107      	bne.n	800661e <SD_disk_initialize+0x166>
 800660e:	e00d      	b.n	800662c <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8006610:	2100      	movs	r1, #0
 8006612:	2041      	movs	r0, #65	@ 0x41
 8006614:	f7ff fefb 	bl	800640e <SD_SendCmd>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 800661e:	4b1a      	ldr	r3, [pc, #104]	@ (8006688 <SD_disk_initialize+0x1d0>)
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1e1      	bne.n	80065ec <SD_disk_initialize+0x134>
 8006628:	e000      	b.n	800662c <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800662a:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800662c:	4b16      	ldr	r3, [pc, #88]	@ (8006688 <SD_disk_initialize+0x1d0>)
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <SD_disk_initialize+0x18e>
 8006636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800663a:	2050      	movs	r0, #80	@ 0x50
 800663c:	f7ff fee7 	bl	800640e <SD_SendCmd>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <SD_disk_initialize+0x192>
 8006646:	2300      	movs	r3, #0
 8006648:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800664a:	4a10      	ldr	r2, [pc, #64]	@ (800668c <SD_disk_initialize+0x1d4>)
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8006650:	f7ff fd88 	bl	8006164 <DESELECT>
	SPI_RxByte();
 8006654:	f7ff fdca 	bl	80061ec <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8006658:	7bbb      	ldrb	r3, [r7, #14]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d008      	beq.n	8006670 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800665e:	4b09      	ldr	r3, [pc, #36]	@ (8006684 <SD_disk_initialize+0x1cc>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f023 0301 	bic.w	r3, r3, #1
 8006668:	b2da      	uxtb	r2, r3
 800666a:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <SD_disk_initialize+0x1cc>)
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e001      	b.n	8006674 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8006670:	f7ff fe42 	bl	80062f8 <SD_PowerOff>
	}

	return Stat;
 8006674:	4b03      	ldr	r3, [pc, #12]	@ (8006684 <SD_disk_initialize+0x1cc>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	b2db      	uxtb	r3, r3
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	bd90      	pop	{r4, r7, pc}
 8006682:	bf00      	nop
 8006684:	20000138 	.word	0x20000138
 8006688:	20002959 	.word	0x20002959
 800668c:	200028d0 	.word	0x200028d0

08006690 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <SD_disk_status+0x14>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e002      	b.n	80066aa <SD_disk_status+0x1a>
	return Stat;
 80066a4:	4b04      	ldr	r3, [pc, #16]	@ (80066b8 <SD_disk_status+0x28>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	b2db      	uxtb	r3, r3
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20000138 	.word	0x20000138

080066bc <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	603b      	str	r3, [r7, #0]
 80066c8:	4603      	mov	r3, r0
 80066ca:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80066cc:	7bfb      	ldrb	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <SD_disk_read+0x1c>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <SD_disk_read+0x20>
 80066d8:	2304      	movs	r3, #4
 80066da:	e051      	b.n	8006780 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80066dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006788 <SD_disk_read+0xcc>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <SD_disk_read+0x32>
 80066ea:	2303      	movs	r3, #3
 80066ec:	e048      	b.n	8006780 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80066ee:	4b27      	ldr	r3, [pc, #156]	@ (800678c <SD_disk_read+0xd0>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d102      	bne.n	8006700 <SD_disk_read+0x44>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	025b      	lsls	r3, r3, #9
 80066fe:	607b      	str	r3, [r7, #4]

	SELECT();
 8006700:	f7ff fd20 	bl	8006144 <SELECT>

	if (count == 1)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d111      	bne.n	800672e <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	2051      	movs	r0, #81	@ 0x51
 800670e:	f7ff fe7e 	bl	800640e <SD_SendCmd>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d129      	bne.n	800676c <SD_disk_read+0xb0>
 8006718:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800671c:	68b8      	ldr	r0, [r7, #8]
 800671e:	f7ff fe03 	bl	8006328 <SD_RxDataBlock>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d021      	beq.n	800676c <SD_disk_read+0xb0>
 8006728:	2300      	movs	r3, #0
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	e01e      	b.n	800676c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	2052      	movs	r0, #82	@ 0x52
 8006732:	f7ff fe6c 	bl	800640e <SD_SendCmd>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d117      	bne.n	800676c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 800673c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f7ff fdf1 	bl	8006328 <SD_RxDataBlock>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <SD_disk_read+0xa6>
				buff += 512;
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006752:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	603b      	str	r3, [r7, #0]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1ed      	bne.n	800673c <SD_disk_read+0x80>
 8006760:	e000      	b.n	8006764 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8006762:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8006764:	2100      	movs	r1, #0
 8006766:	204c      	movs	r0, #76	@ 0x4c
 8006768:	f7ff fe51 	bl	800640e <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800676c:	f7ff fcfa 	bl	8006164 <DESELECT>
	SPI_RxByte();
 8006770:	f7ff fd3c 	bl	80061ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	bf14      	ite	ne
 800677a:	2301      	movne	r3, #1
 800677c:	2300      	moveq	r3, #0
 800677e:	b2db      	uxtb	r3, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000138 	.word	0x20000138
 800678c:	200028d0 	.word	0x200028d0

08006790 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4603      	mov	r3, r0
 800679e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <SD_disk_write+0x1c>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <SD_disk_write+0x20>
 80067ac:	2304      	movs	r3, #4
 80067ae:	e06b      	b.n	8006888 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80067b0:	4b37      	ldr	r3, [pc, #220]	@ (8006890 <SD_disk_write+0x100>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <SD_disk_write+0x32>
 80067be:	2303      	movs	r3, #3
 80067c0:	e062      	b.n	8006888 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80067c2:	4b33      	ldr	r3, [pc, #204]	@ (8006890 <SD_disk_write+0x100>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <SD_disk_write+0x44>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e059      	b.n	8006888 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80067d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006894 <SD_disk_write+0x104>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <SD_disk_write+0x56>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	025b      	lsls	r3, r3, #9
 80067e4:	607b      	str	r3, [r7, #4]

	SELECT();
 80067e6:	f7ff fcad 	bl	8006144 <SELECT>

	if (count == 1)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d110      	bne.n	8006812 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	2058      	movs	r0, #88	@ 0x58
 80067f4:	f7ff fe0b 	bl	800640e <SD_SendCmd>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d13a      	bne.n	8006874 <SD_disk_write+0xe4>
 80067fe:	21fe      	movs	r1, #254	@ 0xfe
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f7ff fdc1 	bl	8006388 <SD_TxDataBlock>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d033      	beq.n	8006874 <SD_disk_write+0xe4>
			count = 0;
 800680c:	2300      	movs	r3, #0
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	e030      	b.n	8006874 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8006812:	4b20      	ldr	r3, [pc, #128]	@ (8006894 <SD_disk_write+0x104>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800681e:	2100      	movs	r1, #0
 8006820:	2077      	movs	r0, #119	@ 0x77
 8006822:	f7ff fdf4 	bl	800640e <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8006826:	6839      	ldr	r1, [r7, #0]
 8006828:	2057      	movs	r0, #87	@ 0x57
 800682a:	f7ff fdf0 	bl	800640e <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	2059      	movs	r0, #89	@ 0x59
 8006832:	f7ff fdec 	bl	800640e <SD_SendCmd>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d11b      	bne.n	8006874 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800683c:	21fc      	movs	r1, #252	@ 0xfc
 800683e:	68b8      	ldr	r0, [r7, #8]
 8006840:	f7ff fda2 	bl	8006388 <SD_TxDataBlock>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <SD_disk_write+0xd0>
				buff += 512;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8006850:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	3b01      	subs	r3, #1
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1ee      	bne.n	800683c <SD_disk_write+0xac>
 800685e:	e000      	b.n	8006862 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8006860:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8006862:	21fd      	movs	r1, #253	@ 0xfd
 8006864:	2000      	movs	r0, #0
 8006866:	f7ff fd8f 	bl	8006388 <SD_TxDataBlock>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <SD_disk_write+0xe4>
			{
				count = 1;
 8006870:	2301      	movs	r3, #1
 8006872:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8006874:	f7ff fc76 	bl	8006164 <DESELECT>
	SPI_RxByte();
 8006878:	f7ff fcb8 	bl	80061ec <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2301      	movne	r3, #1
 8006884:	2300      	moveq	r3, #0
 8006886:	b2db      	uxtb	r3, r3
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000138 	.word	0x20000138
 8006894:	200028d0 	.word	0x200028d0

08006898 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8006898:	b590      	push	{r4, r7, lr}
 800689a:	b08b      	sub	sp, #44	@ 0x2c
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	603a      	str	r2, [r7, #0]
 80068a2:	71fb      	strb	r3, [r7, #7]
 80068a4:	460b      	mov	r3, r1
 80068a6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <SD_disk_ioctl+0x1e>
 80068b2:	2304      	movs	r3, #4
 80068b4:	e113      	b.n	8006ade <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 80068bc:	79bb      	ldrb	r3, [r7, #6]
 80068be:	2b05      	cmp	r3, #5
 80068c0:	d124      	bne.n	800690c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d012      	beq.n	80068f0 <SD_disk_ioctl+0x58>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	dc1a      	bgt.n	8006904 <SD_disk_ioctl+0x6c>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <SD_disk_ioctl+0x40>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d006      	beq.n	80068e4 <SD_disk_ioctl+0x4c>
 80068d6:	e015      	b.n	8006904 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 80068d8:	f7ff fd0e 	bl	80062f8 <SD_PowerOff>
			res = RES_OK;
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80068e2:	e0fa      	b.n	8006ada <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 80068e4:	f7ff fcc6 	bl	8006274 <SD_PowerOn>
			res = RES_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80068ee:	e0f4      	b.n	8006ada <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	1c5c      	adds	r4, r3, #1
 80068f4:	f7ff fd0c 	bl	8006310 <SD_CheckPower>
 80068f8:	4603      	mov	r3, r0
 80068fa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006902:	e0ea      	b.n	8006ada <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8006904:	2304      	movs	r3, #4
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800690a:	e0e6      	b.n	8006ada <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800690c:	4b76      	ldr	r3, [pc, #472]	@ (8006ae8 <SD_disk_ioctl+0x250>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <SD_disk_ioctl+0x86>
 800691a:	2303      	movs	r3, #3
 800691c:	e0df      	b.n	8006ade <SD_disk_ioctl+0x246>

		SELECT();
 800691e:	f7ff fc11 	bl	8006144 <SELECT>

		switch (ctrl)
 8006922:	79bb      	ldrb	r3, [r7, #6]
 8006924:	2b0d      	cmp	r3, #13
 8006926:	f200 80c9 	bhi.w	8006abc <SD_disk_ioctl+0x224>
 800692a:	a201      	add	r2, pc, #4	@ (adr r2, 8006930 <SD_disk_ioctl+0x98>)
 800692c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006930:	08006a27 	.word	0x08006a27
 8006934:	08006969 	.word	0x08006969
 8006938:	08006a17 	.word	0x08006a17
 800693c:	08006abd 	.word	0x08006abd
 8006940:	08006abd 	.word	0x08006abd
 8006944:	08006abd 	.word	0x08006abd
 8006948:	08006abd 	.word	0x08006abd
 800694c:	08006abd 	.word	0x08006abd
 8006950:	08006abd 	.word	0x08006abd
 8006954:	08006abd 	.word	0x08006abd
 8006958:	08006abd 	.word	0x08006abd
 800695c:	08006a39 	.word	0x08006a39
 8006960:	08006a5d 	.word	0x08006a5d
 8006964:	08006a81 	.word	0x08006a81
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8006968:	2100      	movs	r1, #0
 800696a:	2049      	movs	r0, #73	@ 0x49
 800696c:	f7ff fd4f 	bl	800640e <SD_SendCmd>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	f040 80a6 	bne.w	8006ac4 <SD_disk_ioctl+0x22c>
 8006978:	f107 030c 	add.w	r3, r7, #12
 800697c:	2110      	movs	r1, #16
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fcd2 	bl	8006328 <SD_RxDataBlock>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 809c 	beq.w	8006ac4 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800698c:	7b3b      	ldrb	r3, [r7, #12]
 800698e:	099b      	lsrs	r3, r3, #6
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10d      	bne.n	80069b2 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8006996:	7d7b      	ldrb	r3, [r7, #21]
 8006998:	461a      	mov	r2, r3
 800699a:	7d3b      	ldrb	r3, [r7, #20]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4413      	add	r3, r2
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3301      	adds	r3, #1
 80069a6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80069a8:	8bfb      	ldrh	r3, [r7, #30]
 80069aa:	029a      	lsls	r2, r3, #10
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	e02d      	b.n	8006a0e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80069b2:	7c7b      	ldrb	r3, [r7, #17]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	7dbb      	ldrb	r3, [r7, #22]
 80069bc:	09db      	lsrs	r3, r3, #7
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	4413      	add	r3, r2
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	7d7b      	ldrb	r3, [r7, #21]
 80069c6:	005b      	lsls	r3, r3, #1
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 0306 	and.w	r3, r3, #6
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4413      	add	r3, r2
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	3302      	adds	r3, #2
 80069d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80069da:	7d3b      	ldrb	r3, [r7, #20]
 80069dc:	099b      	lsrs	r3, r3, #6
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	7cfb      	ldrb	r3, [r7, #19]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4413      	add	r3, r2
 80069ea:	b29a      	uxth	r2, r3
 80069ec:	7cbb      	ldrb	r3, [r7, #18]
 80069ee:	029b      	lsls	r3, r3, #10
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3301      	adds	r3, #1
 80069fe:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8006a00:	8bfa      	ldrh	r2, [r7, #30]
 8006a02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a06:	3b09      	subs	r3, #9
 8006a08:	409a      	lsls	r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8006a14:	e056      	b.n	8006ac4 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a1c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006a24:	e055      	b.n	8006ad2 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8006a26:	f7ff fc0b 	bl	8006240 <SD_ReadyWait>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2bff      	cmp	r3, #255	@ 0xff
 8006a2e:	d14b      	bne.n	8006ac8 <SD_disk_ioctl+0x230>
 8006a30:	2300      	movs	r3, #0
 8006a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006a36:	e047      	b.n	8006ac8 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006a38:	2100      	movs	r1, #0
 8006a3a:	2049      	movs	r0, #73	@ 0x49
 8006a3c:	f7ff fce7 	bl	800640e <SD_SendCmd>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d142      	bne.n	8006acc <SD_disk_ioctl+0x234>
 8006a46:	2110      	movs	r1, #16
 8006a48:	6a38      	ldr	r0, [r7, #32]
 8006a4a:	f7ff fc6d 	bl	8006328 <SD_RxDataBlock>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03b      	beq.n	8006acc <SD_disk_ioctl+0x234>
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006a5a:	e037      	b.n	8006acc <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	204a      	movs	r0, #74	@ 0x4a
 8006a60:	f7ff fcd5 	bl	800640e <SD_SendCmd>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d132      	bne.n	8006ad0 <SD_disk_ioctl+0x238>
 8006a6a:	2110      	movs	r1, #16
 8006a6c:	6a38      	ldr	r0, [r7, #32]
 8006a6e:	f7ff fc5b 	bl	8006328 <SD_RxDataBlock>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02b      	beq.n	8006ad0 <SD_disk_ioctl+0x238>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8006a7e:	e027      	b.n	8006ad0 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8006a80:	2100      	movs	r1, #0
 8006a82:	207a      	movs	r0, #122	@ 0x7a
 8006a84:	f7ff fcc3 	bl	800640e <SD_SendCmd>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d116      	bne.n	8006abc <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006a94:	e00b      	b.n	8006aae <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8006a96:	6a3c      	ldr	r4, [r7, #32]
 8006a98:	1c63      	adds	r3, r4, #1
 8006a9a:	623b      	str	r3, [r7, #32]
 8006a9c:	f7ff fba6 	bl	80061ec <SPI_RxByte>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8006aa4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006aae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d9ef      	bls.n	8006a96 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ac2:	e006      	b.n	8006ad2 <SD_disk_ioctl+0x23a>
			break;
 8006ac4:	bf00      	nop
 8006ac6:	e004      	b.n	8006ad2 <SD_disk_ioctl+0x23a>
			break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <SD_disk_ioctl+0x23a>
			break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <SD_disk_ioctl+0x23a>
			break;
 8006ad0:	bf00      	nop
		}

		DESELECT();
 8006ad2:	f7ff fb47 	bl	8006164 <DESELECT>
		SPI_RxByte();
 8006ad6:	f7ff fb89 	bl	80061ec <SPI_RxByte>
	}

	return res;
 8006ada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	372c      	adds	r7, #44	@ 0x2c
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd90      	pop	{r4, r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20000138 	.word	0x20000138

08006aec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b08c      	sub	sp, #48	@ 0x30
 8006af0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006af2:	f107 031c 	add.w	r3, r7, #28
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	605a      	str	r2, [r3, #4]
 8006afc:	609a      	str	r2, [r3, #8]
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b02:	2300      	movs	r3, #0
 8006b04:	61bb      	str	r3, [r7, #24]
 8006b06:	4ba2      	ldr	r3, [pc, #648]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b0a:	4aa1      	ldr	r2, [pc, #644]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b0c:	f043 0310 	orr.w	r3, r3, #16
 8006b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b12:	4b9f      	ldr	r3, [pc, #636]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
 8006b22:	4b9b      	ldr	r3, [pc, #620]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b26:	4a9a      	ldr	r2, [pc, #616]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b28:	f043 0304 	orr.w	r3, r3, #4
 8006b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b2e:	4b98      	ldr	r3, [pc, #608]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	4b94      	ldr	r3, [pc, #592]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b42:	4a93      	ldr	r2, [pc, #588]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b4a:	4b91      	ldr	r3, [pc, #580]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b52:	613b      	str	r3, [r7, #16]
 8006b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	4a8c      	ldr	r2, [pc, #560]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b66:	4b8a      	ldr	r3, [pc, #552]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]
 8006b76:	4b86      	ldr	r3, [pc, #536]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7a:	4a85      	ldr	r2, [pc, #532]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b7c:	f043 0302 	orr.w	r3, r3, #2
 8006b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b82:	4b83      	ldr	r3, [pc, #524]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	60bb      	str	r3, [r7, #8]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	4b7f      	ldr	r3, [pc, #508]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b96:	4a7e      	ldr	r2, [pc, #504]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006b98:	f043 0308 	orr.w	r3, r3, #8
 8006b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006d90 <MX_GPIO_Init+0x2a4>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	607b      	str	r3, [r7, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_RESET);
 8006baa:	2200      	movs	r2, #0
 8006bac:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8006bb0:	4878      	ldr	r0, [pc, #480]	@ (8006d94 <MX_GPIO_Init+0x2a8>)
 8006bb2:	f003 fa25 	bl	800a000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Power_LED_Output_GPIO_Port, Power_LED_Output_Pin, GPIO_PIN_RESET);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2108      	movs	r1, #8
 8006bba:	4877      	ldr	r0, [pc, #476]	@ (8006d98 <MX_GPIO_Init+0x2ac>)
 8006bbc:	f003 fa20 	bl	800a000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ServoDC_M1_Dir_Output_Pin|USB_EN_Output_Pin, GPIO_PIN_RESET);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8006bc6:	4875      	ldr	r0, [pc, #468]	@ (8006d9c <MX_GPIO_Init+0x2b0>)
 8006bc8:	f003 fa1a 	bl	800a000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin|Relay_Output_Pin|Spindle_M3_Dir_Output_Pin|Clamp_M2_Dir_Output_Pin
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f244 71de 	movw	r1, #18398	@ 0x47de
 8006bd2:	4873      	ldr	r0, [pc, #460]	@ (8006da0 <MX_GPIO_Init+0x2b4>)
 8006bd4:	f003 fa14 	bl	800a000 <HAL_GPIO_WritePin>
                          |LCD_RS_Output_Pin|LCD_EN_Output_Pin|LCD_D4_Output_Pin|LCD_D5_Output_Pin
                          |LCD_D6_Output_Pin|LCD_D7_Output_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Sensor_BottlePosition_Input_Pin|Sensor_RES_Input_Pin;
 8006bd8:	2314      	movs	r3, #20
 8006bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be0:	2300      	movs	r3, #0
 8006be2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006be4:	f107 031c 	add.w	r3, r7, #28
 8006be8:	4619      	mov	r1, r3
 8006bea:	486e      	ldr	r0, [pc, #440]	@ (8006da4 <MX_GPIO_Init+0x2b8>)
 8006bec:	f003 f854 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Clamp_M2_EncA_Interrupt_Pin|Spindle_M3_EncA_Interrupt_Pin;
 8006bf0:	2360      	movs	r3, #96	@ 0x60
 8006bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006bf4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bfe:	f107 031c 	add.w	r3, r7, #28
 8006c02:	4619      	mov	r1, r3
 8006c04:	4867      	ldr	r0, [pc, #412]	@ (8006da4 <MX_GPIO_Init+0x2b8>)
 8006c06:	f003 f847 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Spindle_M3_EncB_Interrupt_Pin|Clamp_M2_EncB__Interrupt_Pin;
 8006c0a:	f242 0302 	movw	r3, #8194	@ 0x2002
 8006c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c10:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c1a:	f107 031c 	add.w	r3, r7, #28
 8006c1e:	4619      	mov	r1, r3
 8006c20:	485c      	ldr	r0, [pc, #368]	@ (8006d94 <MX_GPIO_Init+0x2a8>)
 8006c22:	f003 f839 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin;
 8006c26:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8006c2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c34:	2300      	movs	r3, #0
 8006c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c38:	f107 031c 	add.w	r3, r7, #28
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4855      	ldr	r0, [pc, #340]	@ (8006d94 <MX_GPIO_Init+0x2a8>)
 8006c40:	f003 f82a 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Clamp_M2_Prox_Interrupt_Pin;
 8006c44:	2301      	movs	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006c48:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Clamp_M2_Prox_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8006c52:	f107 031c 	add.w	r3, r7, #28
 8006c56:	4619      	mov	r1, r3
 8006c58:	484e      	ldr	r0, [pc, #312]	@ (8006d94 <MX_GPIO_Init+0x2a8>)
 8006c5a:	f003 f81d 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button_Clean_Interrupt_PullUp_Pin|Button_Power_Interrupt_PullUp_Pin;
 8006c5e:	2314      	movs	r3, #20
 8006c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c62:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c6c:	f107 031c 	add.w	r3, r7, #28
 8006c70:	4619      	mov	r1, r3
 8006c72:	4849      	ldr	r0, [pc, #292]	@ (8006d98 <MX_GPIO_Init+0x2ac>)
 8006c74:	f003 f810 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Power_LED_Output_Pin;
 8006c78:	2308      	movs	r3, #8
 8006c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c84:	2300      	movs	r3, #0
 8006c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(Power_LED_Output_GPIO_Port, &GPIO_InitStruct);
 8006c88:	f107 031c 	add.w	r3, r7, #28
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4842      	ldr	r0, [pc, #264]	@ (8006d98 <MX_GPIO_Init+0x2ac>)
 8006c90:	f003 f802 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Button_ManAuto_Input_PullUp_Pin|Button_PlayStop_Input_PullUp_Pin|Button_DelBack_Input_PullUp_Pin;
 8006c94:	23e0      	movs	r3, #224	@ 0xe0
 8006c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca0:	f107 031c 	add.w	r3, r7, #28
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	483c      	ldr	r0, [pc, #240]	@ (8006d98 <MX_GPIO_Init+0x2ac>)
 8006ca8:	f002 fff6 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_1_Input_PullUp_Pin;
 8006cac:	2320      	movs	r3, #32
 8006cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Button_1_Input_PullUp_GPIO_Port, &GPIO_InitStruct);
 8006cb8:	f107 031c 	add.w	r3, r7, #28
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4835      	ldr	r0, [pc, #212]	@ (8006d94 <MX_GPIO_Init+0x2a8>)
 8006cc0:	f002 ffea 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Button_2_Input_PullUp_Pin|Button_3_Input_PullUp_Pin|Button_4_Input_PullUp_Pin;
 8006cc4:	2307      	movs	r3, #7
 8006cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd0:	f107 031c 	add.w	r3, r7, #28
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	4831      	ldr	r0, [pc, #196]	@ (8006d9c <MX_GPIO_Init+0x2b0>)
 8006cd8:	f002 ffde 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Button_5_Input_PullUp_Pin|Button_6_Input_PullUp_Pin|Button_7_Input_PullUp_Pin|Button_8_Input_PullUp_Pin
 8006cdc:	f44f 43ff 	mov.w	r3, #32640	@ 0x7f80
 8006ce0:	61fb      	str	r3, [r7, #28]
                          |Button_9_Input_PullUp_Pin|Button_0_Input_PullUp_Pin|Button_Enter_Input_PullUp_Pin|Button_Comma_Input_PullUp_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cea:	f107 031c 	add.w	r3, r7, #28
 8006cee:	4619      	mov	r1, r3
 8006cf0:	482c      	ldr	r0, [pc, #176]	@ (8006da4 <MX_GPIO_Init+0x2b8>)
 8006cf2:	f002 ffd1 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USBFlag_Interrupt_PullUp_Pin;
 8006cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006cfc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d02:	2301      	movs	r3, #1
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USBFlag_Interrupt_PullUp_GPIO_Port, &GPIO_InitStruct);
 8006d06:	f107 031c 	add.w	r3, r7, #28
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4823      	ldr	r0, [pc, #140]	@ (8006d9c <MX_GPIO_Init+0x2b0>)
 8006d0e:	f002 ffc3 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ServoDC_M1_Dir_Output_Pin|USB_EN_Output_Pin;
 8006d12:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8006d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d20:	2300      	movs	r3, #0
 8006d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d24:	f107 031c 	add.w	r3, r7, #28
 8006d28:	4619      	mov	r1, r3
 8006d2a:	481c      	ldr	r0, [pc, #112]	@ (8006d9c <MX_GPIO_Init+0x2b0>)
 8006d2c:	f002 ffb4 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = nRESET_LPC_Output_Pin|Relay_Output_Pin|Spindle_M3_Dir_Output_Pin|Clamp_M2_Dir_Output_Pin
 8006d30:	f244 73de 	movw	r3, #18398	@ 0x47de
 8006d34:	61fb      	str	r3, [r7, #28]
                          |LCD_RS_Output_Pin|LCD_EN_Output_Pin|LCD_D4_Output_Pin|LCD_D5_Output_Pin
                          |LCD_D6_Output_Pin|LCD_D7_Output_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d36:	2301      	movs	r3, #1
 8006d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d42:	f107 031c 	add.w	r3, r7, #28
 8006d46:	4619      	mov	r1, r3
 8006d48:	4815      	ldr	r0, [pc, #84]	@ (8006da0 <MX_GPIO_Init+0x2b4>)
 8006d4a:	f002 ffa5 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ServoDC_M1_EncB_Interrupt_Pin;
 8006d4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006d54:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8006d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ServoDC_M1_EncB_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8006d5e:	f107 031c 	add.w	r3, r7, #28
 8006d62:	4619      	mov	r1, r3
 8006d64:	480e      	ldr	r0, [pc, #56]	@ (8006da0 <MX_GPIO_Init+0x2b4>)
 8006d66:	f002 ff97 	bl	8009c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ServoDC_M1_Prox_Interrupt_Pin|Spindle_M3_Prox_Interrupt_Pin;
 8006d6a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8006d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006d70:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8006d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d7a:	f107 031c 	add.w	r3, r7, #28
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4805      	ldr	r0, [pc, #20]	@ (8006d98 <MX_GPIO_Init+0x2ac>)
 8006d82:	f002 ff89 	bl	8009c98 <HAL_GPIO_Init>

}
 8006d86:	bf00      	nop
 8006d88:	3730      	adds	r7, #48	@ 0x30
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40020800 	.word	0x40020800
 8006d98:	40020000 	.word	0x40020000
 8006d9c:	40020400 	.word	0x40020400
 8006da0:	40020c00 	.word	0x40020c00
 8006da4:	40021000 	.word	0x40021000

08006da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006dae:	f001 fc31 	bl	8008614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006db2:	f000 f8d1 	bl	8006f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006db6:	f7ff fe99 	bl	8006aec <MX_GPIO_Init>
  MX_DMA_Init();
 8006dba:	f7ff f985 	bl	80060c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8006dbe:	f7fe ffcd 	bl	8005d5c <MX_ADC1_Init>
  MX_ADC2_Init();
 8006dc2:	f7ff f81d 	bl	8005e00 <MX_ADC2_Init>
  MX_ADC3_Init();
 8006dc6:	f7ff f86d 	bl	8005ea4 <MX_ADC3_Init>
  MX_SPI1_Init();
 8006dca:	f000 fa95 	bl	80072f8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8006dce:	f000 fdad 	bl	800792c <MX_TIM3_Init>
  MX_TIM4_Init();
 8006dd2:	f000 fe21 	bl	8007a18 <MX_TIM4_Init>
  //MX_TIM8_Init();
  MX_TIM11_Init();
 8006dd6:	f000 ffdd 	bl	8007d94 <MX_TIM11_Init>
  MX_UART4_Init();
 8006dda:	f001 f9ab 	bl	8008134 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8006dde:	f001 f9d3 	bl	8008188 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8006de2:	f001 f9fb 	bl	80081dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8006de6:	f001 fb7d 	bl	80084e4 <MX_USB_OTG_FS_HCD_Init>
  MX_TIM2_Init();
 8006dea:	f000 fd51 	bl	8007890 <MX_TIM2_Init>
  MX_TIM7_Init();
 8006dee:	f000 fecb 	bl	8007b88 <MX_TIM7_Init>
  MX_TIM10_Init();
 8006df2:	f000 ffab 	bl	8007d4c <MX_TIM10_Init>
  MX_FATFS_Init();
 8006df6:	f007 f809 	bl	800de0c <MX_FATFS_Init>
  MX_TIM6_Init();
 8006dfa:	f000 fe8f 	bl	8007b1c <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006dfe:	f000 f915 	bl	800702c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8006e02:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8006e06:	f001 fc77 	bl	80086f8 <HAL_Delay>
	// Start Timer 7 in interrupt mode
  HAL_TIM_Base_Start_IT(&htim7);
 8006e0a:	483f      	ldr	r0, [pc, #252]	@ (8006f08 <main+0x160>)
 8006e0c:	f004 faea 	bl	800b3e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8006e10:	483e      	ldr	r0, [pc, #248]	@ (8006f0c <main+0x164>)
 8006e12:	f004 fae7 	bl	800b3e4 <HAL_TIM_Base_Start_IT>
  /** ENABLING LPC  AND THE LOAD CELLS WILL GET ACTIVATED **/
  HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_SET);
 8006e16:	2201      	movs	r2, #1
 8006e18:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8006e1c:	483c      	ldr	r0, [pc, #240]	@ (8006f10 <main+0x168>)
 8006e1e:	f003 f8ef 	bl	800a000 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin, GPIO_PIN_SET);
  /********************************************************/
  HAL_Delay(1000);
 8006e22:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006e26:	f001 fc67 	bl	80086f8 <HAL_Delay>
  moveMotor(VALVEMOTOR, OFF, INT_INF);
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8006f14 <main+0x16c>)
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	2003      	movs	r0, #3
 8006e30:	f7fc f954 	bl	80030dc <moveMotor>
  Servo_Init();
 8006e34:	f7fe fb14 	bl	8005460 <Servo_Init>
  digitalWrite(Spindle_M3_Dir_Output, LOW);
 8006e38:	2100      	movs	r1, #0
 8006e3a:	2004      	movs	r0, #4
 8006e3c:	f7fb ffb8 	bl	8002db0 <digitalWrite>
  digitalWrite(Clamp_M2_Dir_Output, LOW);
 8006e40:	2100      	movs	r1, #0
 8006e42:	2005      	movs	r0, #5
 8006e44:	f7fb ffb4 	bl	8002db0 <digitalWrite>
  pwm(Spindle_M3_PWM, 0);
 8006e48:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8006f18 <main+0x170>
 8006e4c:	2002      	movs	r0, #2
 8006e4e:	f000 f9bb 	bl	80071c8 <pwm>
  pwm(Clamp_M2_PWM, 0);
 8006e52:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8006f18 <main+0x170>
 8006e56:	2001      	movs	r0, #1
 8006e58:	f000 f9b6 	bl	80071c8 <pwm>
  sd_Card_Check();
 8006e5c:	f7fe f888 	bl	8004f70 <sd_Card_Check>

  if (isMachineOn == FALSE) {
 8006e60:	4b2e      	ldr	r3, [pc, #184]	@ (8006f1c <main+0x174>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <main+0xc4>
		goToSleep(); // Ensure goToSleep is adapted for STM32
 8006e68:	f7fd f832 	bl	8003ed0 <goToSleep>
	}

  //HAL_GPIO_WritePin(GPIOC, EN_DCDC_5V_Output_Pin|EN_DCDC_8V_Output_Pin, GPIO_PIN_SET);
  HAL_GPIO_WritePin(GPIOD, nRESET_LPC_Output_Pin, GPIO_PIN_SET);
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006e72:	482b      	ldr	r0, [pc, #172]	@ (8006f20 <main+0x178>)
 8006e74:	f003 f8c4 	bl	800a000 <HAL_GPIO_WritePin>
  //HAL_Delay(1000);
  HAL_TIM_Base_Start_IT(&htim6);
 8006e78:	482a      	ldr	r0, [pc, #168]	@ (8006f24 <main+0x17c>)
 8006e7a:	f004 fab3 	bl	800b3e4 <HAL_TIM_Base_Start_IT>
	  LCD_Init();
	  LCDRGBControl(WHITE);
	  controlLCDContrast(100);
  */
  /* THIS iS DEVELOPER AND TESTING PURPOSE ONLE */
  printLCD(0, "SOFTWARE VER ", NO_SYMBOL);
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4929      	ldr	r1, [pc, #164]	@ (8006f28 <main+0x180>)
 8006e82:	2000      	movs	r0, #0
 8006e84:	f7fd fecc 	bl	8004c20 <printLCD>
  snprintf(VERSION_NO, sizeof(VERSION_NO), "%d.%d.%d ", MAJOR_VERSION,MINOR_VERSION,PATCH_VERSION);
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9301      	str	r3, [sp, #4]
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	2306      	movs	r3, #6
 8006e92:	4a26      	ldr	r2, [pc, #152]	@ (8006f2c <main+0x184>)
 8006e94:	210a      	movs	r1, #10
 8006e96:	4826      	ldr	r0, [pc, #152]	@ (8006f30 <main+0x188>)
 8006e98:	f00c fb12 	bl	80134c0 <sniprintf>
  printLCD(1, VERSION_NO, NO_SYMBOL);
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	4924      	ldr	r1, [pc, #144]	@ (8006f30 <main+0x188>)
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f7fd febd 	bl	8004c20 <printLCD>
  /************************************************/

  CTS_Home_position();
 8006ea6:	f7fc ff09 	bl	8003cbc <CTS_Home_position>
  HAL_Delay(100);
 8006eaa:	2064      	movs	r0, #100	@ 0x64
 8006eac:	f001 fc24 	bl	80086f8 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, rxBuffer, 8);
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	4920      	ldr	r1, [pc, #128]	@ (8006f34 <main+0x18c>)
 8006eb4:	4820      	ldr	r0, [pc, #128]	@ (8006f38 <main+0x190>)
 8006eb6:	f005 fc13 	bl	800c6e0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart1, rxBuffer1, 11);
 8006eba:	220b      	movs	r2, #11
 8006ebc:	491f      	ldr	r1, [pc, #124]	@ (8006f3c <main+0x194>)
 8006ebe:	4820      	ldr	r0, [pc, #128]	@ (8006f40 <main+0x198>)
 8006ec0:	f005 fc0e 	bl	800c6e0 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start_IT(&htim10);
 8006ec4:	481f      	ldr	r0, [pc, #124]	@ (8006f44 <main+0x19c>)
 8006ec6:	f004 fa8d 	bl	800b3e4 <HAL_TIM_Base_Start_IT>
  LoadTimeFromSDCard(0,0,0);
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2100      	movs	r1, #0
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7fe f902 	bl	80050d8 <LoadTimeFromSDCard>
  UpdateTimeToSDCard(hours,  minutes,  seconds);
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8006f48 <main+0x1a0>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8006f4c <main+0x1a4>)
 8006eda:	6811      	ldr	r1, [r2, #0]
 8006edc:	4a1c      	ldr	r2, [pc, #112]	@ (8006f50 <main+0x1a8>)
 8006ede:	6812      	ldr	r2, [r2, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fe f979 	bl	80051d8 <UpdateTimeToSDCard>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 {
	  if (ProgramToRun == CUSTOMERAPP) {
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f54 <main+0x1ac>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d102      	bne.n	8006ef4 <main+0x14c>
			CustomerFrontEnd();
 8006eee:	f7fa f9a5 	bl	800123c <CustomerFrontEnd>
 8006ef2:	e7f8      	b.n	8006ee6 <main+0x13e>
		}
	  else if (ProgramToRun == TESTAPP) {
 8006ef4:	4b17      	ldr	r3, [pc, #92]	@ (8006f54 <main+0x1ac>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d102      	bne.n	8006f02 <main+0x15a>
			MotorTest();
 8006efc:	f7fe fbc8 	bl	8005690 <MotorTest>
 8006f00:	e7f1      	b.n	8006ee6 <main+0x13e>
	  }
	  else {
			DemoApp();
 8006f02:	f7fb fd2d 	bl	8002960 <DemoApp>
	  if (ProgramToRun == CUSTOMERAPP) {
 8006f06:	e7ee      	b.n	8006ee6 <main+0x13e>
 8006f08:	20002a80 	.word	0x20002a80
 8006f0c:	20002960 	.word	0x20002960
 8006f10:	40020800 	.word	0x40020800
 8006f14:	0098967f 	.word	0x0098967f
 8006f18:	00000000 	.word	0x00000000
 8006f1c:	20000358 	.word	0x20000358
 8006f20:	40020c00 	.word	0x40020c00
 8006f24:	20002a38 	.word	0x20002a38
 8006f28:	080172dc 	.word	0x080172dc
 8006f2c:	080172ec 	.word	0x080172ec
 8006f30:	200028f4 	.word	0x200028f4
 8006f34:	200028d4 	.word	0x200028d4
 8006f38:	20002c30 	.word	0x20002c30
 8006f3c:	200028dc 	.word	0x200028dc
 8006f40:	20002be8 	.word	0x20002be8
 8006f44:	20002b10 	.word	0x20002b10
 8006f48:	200003ac 	.word	0x200003ac
 8006f4c:	200003a8 	.word	0x200003a8
 8006f50:	200003a4 	.word	0x200003a4
 8006f54:	200000f0 	.word	0x200000f0

08006f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b094      	sub	sp, #80	@ 0x50
 8006f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006f5e:	f107 0320 	add.w	r3, r7, #32
 8006f62:	2230      	movs	r2, #48	@ 0x30
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f00c fb6d 	bl	8013646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006f6c:	f107 030c 	add.w	r3, r7, #12
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	605a      	str	r2, [r3, #4]
 8006f76:	609a      	str	r2, [r3, #8]
 8006f78:	60da      	str	r2, [r3, #12]
 8006f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60bb      	str	r3, [r7, #8]
 8006f80:	4b28      	ldr	r3, [pc, #160]	@ (8007024 <SystemClock_Config+0xcc>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f84:	4a27      	ldr	r2, [pc, #156]	@ (8007024 <SystemClock_Config+0xcc>)
 8006f86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f8c:	4b25      	ldr	r3, [pc, #148]	@ (8007024 <SystemClock_Config+0xcc>)
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	4b22      	ldr	r3, [pc, #136]	@ (8007028 <SystemClock_Config+0xd0>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a21      	ldr	r2, [pc, #132]	@ (8007028 <SystemClock_Config+0xd0>)
 8006fa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8007028 <SystemClock_Config+0xd0>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fb0:	607b      	str	r3, [r7, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006fb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006fc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006fc8:	2308      	movs	r3, #8
 8006fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006fcc:	23a8      	movs	r3, #168	@ 0xa8
 8006fce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006fd4:	2307      	movs	r3, #7
 8006fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006fd8:	f107 0320 	add.w	r3, r7, #32
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f003 f8c3 	bl	800a168 <HAL_RCC_OscConfig>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006fe8:	f000 f8e8 	bl	80071bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006fec:	230f      	movs	r3, #15
 8006fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006ff8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8006ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007004:	f107 030c 	add.w	r3, r7, #12
 8007008:	2105      	movs	r1, #5
 800700a:	4618      	mov	r0, r3
 800700c:	f003 fb24 	bl	800a658 <HAL_RCC_ClockConfig>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007016:	f000 f8d1 	bl	80071bc <Error_Handler>
  }
}
 800701a:	bf00      	nop
 800701c:	3750      	adds	r7, #80	@ 0x50
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	40007000 	.word	0x40007000

0800702c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007030:	2200      	movs	r2, #0
 8007032:	2100      	movs	r1, #0
 8007034:	2037      	movs	r0, #55	@ 0x37
 8007036:	f002 f85e 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800703a:	2037      	movs	r0, #55	@ 0x37
 800703c:	f002 f877 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007040:	2200      	movs	r2, #0
 8007042:	2100      	movs	r1, #0
 8007044:	2028      	movs	r0, #40	@ 0x28
 8007046:	f002 f856 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800704a:	2028      	movs	r0, #40	@ 0x28
 800704c:	f002 f86f 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	201c      	movs	r0, #28
 8007056:	f002 f84e 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800705a:	201c      	movs	r0, #28
 800705c:	f002 f867 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	2017      	movs	r0, #23
 8007066:	f002 f846 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800706a:	2017      	movs	r0, #23
 800706c:	f002 f85f 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	200a      	movs	r0, #10
 8007076:	f002 f83e 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800707a:	200a      	movs	r0, #10
 800707c:	f002 f857 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8007080:	2200      	movs	r2, #0
 8007082:	2100      	movs	r1, #0
 8007084:	2008      	movs	r0, #8
 8007086:	f002 f836 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800708a:	2008      	movs	r0, #8
 800708c:	f002 f84f 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8007090:	2200      	movs	r2, #0
 8007092:	2100      	movs	r1, #0
 8007094:	2007      	movs	r0, #7
 8007096:	f002 f82e 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800709a:	2007      	movs	r0, #7
 800709c:	f002 f847 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	2006      	movs	r0, #6
 80070a6:	f002 f826 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80070aa:	2006      	movs	r0, #6
 80070ac:	f002 f83f 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	2001      	movs	r0, #1
 80070b6:	f002 f81e 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80070ba:	2001      	movs	r0, #1
 80070bc:	f002 f837 	bl	800912e <HAL_NVIC_EnableIRQ>
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <processPIDValues>:

/* USER CODE BEGIN 4 */

/* Function to update PID values */
void processPIDValues(uint8_t* message) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	6078      	str	r0, [r7, #4]
    int p, i, d;
    if (sscanf((char*)message, "%d,%d,%d", &p, &i, &d) == 3) {
 80070cc:	f107 0110 	add.w	r1, r7, #16
 80070d0:	f107 0214 	add.w	r2, r7, #20
 80070d4:	f107 030c 	add.w	r3, r7, #12
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	460b      	mov	r3, r1
 80070dc:	4915      	ldr	r1, [pc, #84]	@ (8007134 <processPIDValues+0x70>)
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f00c fa42 	bl	8013568 <siscanf>
    }
    Kp = (float)p / 1000;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	ee07 3a90 	vmov	s15, r3
 80070ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070ee:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8007138 <processPIDValues+0x74>
 80070f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f6:	4b11      	ldr	r3, [pc, #68]	@ (800713c <processPIDValues+0x78>)
 80070f8:	edc3 7a00 	vstr	s15, [r3]
	Ki = (float)i / 1000;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007106:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8007138 <processPIDValues+0x74>
 800710a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800710e:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <processPIDValues+0x7c>)
 8007110:	edc3 7a00 	vstr	s15, [r3]
	Kd = (float)d / 1000;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800711e:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8007138 <processPIDValues+0x74>
 8007122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007126:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <processPIDValues+0x80>)
 8007128:	edc3 7a00 	vstr	s15, [r3]
}
 800712c:	bf00      	nop
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}
 8007134:	080172f8 	.word	0x080172f8
 8007138:	447a0000 	.word	0x447a0000
 800713c:	200000f4 	.word	0x200000f4
 8007140:	20000398 	.word	0x20000398
 8007144:	2000039c 	.word	0x2000039c

08007148 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a13      	ldr	r2, [pc, #76]	@ (80071a4 <HAL_UART_RxCpltCallback+0x5c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d10f      	bne.n	800717a <HAL_UART_RxCpltCallback+0x32>
	{
	   memcpy(dst1,rxBuffer1,sizeof(rxBuffer1));
 800715a:	4b13      	ldr	r3, [pc, #76]	@ (80071a8 <HAL_UART_RxCpltCallback+0x60>)
 800715c:	4a13      	ldr	r2, [pc, #76]	@ (80071ac <HAL_UART_RxCpltCallback+0x64>)
 800715e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007160:	c303      	stmia	r3!, {r0, r1}
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	3302      	adds	r3, #2
 8007166:	0c12      	lsrs	r2, r2, #16
 8007168:	701a      	strb	r2, [r3, #0]
	   processPIDValues(dst1);
 800716a:	480f      	ldr	r0, [pc, #60]	@ (80071a8 <HAL_UART_RxCpltCallback+0x60>)
 800716c:	f7ff ffaa 	bl	80070c4 <processPIDValues>
	   HAL_UART_Receive_DMA(huart, rxBuffer1, 11);
 8007170:	220b      	movs	r2, #11
 8007172:	490e      	ldr	r1, [pc, #56]	@ (80071ac <HAL_UART_RxCpltCallback+0x64>)
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f005 fab3 	bl	800c6e0 <HAL_UART_Receive_DMA>
	}

   if (huart->Instance == USART3)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a0c      	ldr	r2, [pc, #48]	@ (80071b0 <HAL_UART_RxCpltCallback+0x68>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d10b      	bne.n	800719c <HAL_UART_RxCpltCallback+0x54>
   {
	   memcpy(dst,rxBuffer,sizeof(rxBuffer));
 8007184:	4a0b      	ldr	r2, [pc, #44]	@ (80071b4 <HAL_UART_RxCpltCallback+0x6c>)
 8007186:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <HAL_UART_RxCpltCallback+0x70>)
 8007188:	cb03      	ldmia	r3!, {r0, r1}
 800718a:	6010      	str	r0, [r2, #0]
 800718c:	6051      	str	r1, [r2, #4]
	   ReadLoadCellAVG();
 800718e:	f7fd fe6f 	bl	8004e70 <ReadLoadCellAVG>
       HAL_UART_Receive_DMA(huart, rxBuffer, 8);
 8007192:	2208      	movs	r2, #8
 8007194:	4908      	ldr	r1, [pc, #32]	@ (80071b8 <HAL_UART_RxCpltCallback+0x70>)
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f005 faa2 	bl	800c6e0 <HAL_UART_Receive_DMA>
   }

}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40011000 	.word	0x40011000
 80071a8:	200028e8 	.word	0x200028e8
 80071ac:	200028dc 	.word	0x200028dc
 80071b0:	40004800 	.word	0x40004800
 80071b4:	200004d8 	.word	0x200004d8
 80071b8:	200028d4 	.word	0x200028d4

080071bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80071c0:	b672      	cpsid	i
}
 80071c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80071c4:	bf00      	nop
 80071c6:	e7fd      	b.n	80071c4 <Error_Handler+0x8>

080071c8 <pwm>:
int PWM_FAST=98;
int PWM_SLOW=90;
int PWM_CLEANING = 50;

void pwm(PWM_Label label, float percentage)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	ed87 0a00 	vstr	s0, [r7]
 80071d4:	71fb      	strb	r3, [r7, #7]
    if (percentage < 0.0f) percentage = 0.0f;
 80071d6:	edd7 7a00 	vldr	s15, [r7]
 80071da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e2:	d502      	bpl.n	80071ea <pwm+0x22>
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	603b      	str	r3, [r7, #0]
    if (percentage > 100.0f) percentage = 100.0f;
 80071ea:	edd7 7a00 	vldr	s15, [r7]
 80071ee:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80072e0 <pwm+0x118>
 80071f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fa:	dd01      	ble.n	8007200 <pwm+0x38>
 80071fc:	4b39      	ldr	r3, [pc, #228]	@ (80072e4 <pwm+0x11c>)
 80071fe:	603b      	str	r3, [r7, #0]

    uint32_t pulse = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
    TIM_HandleTypeDef* htim = NULL;
 8007204:	2300      	movs	r3, #0
 8007206:	617b      	str	r3, [r7, #20]
    uint32_t channel = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	613b      	str	r3, [r7, #16]

    switch (label)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b05      	cmp	r3, #5
 8007210:	d861      	bhi.n	80072d6 <pwm+0x10e>
 8007212:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <pwm+0x50>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007231 	.word	0x08007231
 800721c:	0800723b 	.word	0x0800723b
 8007220:	08007245 	.word	0x08007245
 8007224:	0800724f 	.word	0x0800724f
 8007228:	08007259 	.word	0x08007259
 800722c:	08007263 	.word	0x08007263
    {
        case ServoDC_M1_PWM:
            htim = &htim3;
 8007230:	4b2d      	ldr	r3, [pc, #180]	@ (80072e8 <pwm+0x120>)
 8007232:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_3;
 8007234:	2308      	movs	r3, #8
 8007236:	613b      	str	r3, [r7, #16]
            break;
 8007238:	e018      	b.n	800726c <pwm+0xa4>

        case Clamp_M2_PWM:
            htim = &htim4;
 800723a:	4b2c      	ldr	r3, [pc, #176]	@ (80072ec <pwm+0x124>)
 800723c:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 800723e:	2300      	movs	r3, #0
 8007240:	613b      	str	r3, [r7, #16]
            break;
 8007242:	e013      	b.n	800726c <pwm+0xa4>

        case Spindle_M3_PWM:
            htim = &htim4;
 8007244:	4b29      	ldr	r3, [pc, #164]	@ (80072ec <pwm+0x124>)
 8007246:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_2;
 8007248:	2304      	movs	r3, #4
 800724a:	613b      	str	r3, [r7, #16]
            break;
 800724c:	e00e      	b.n	800726c <pwm+0xa4>

        case LCD_Contrast_PWM:
            htim = &htim8;
 800724e:	4b28      	ldr	r3, [pc, #160]	@ (80072f0 <pwm+0x128>)
 8007250:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
            break;
 8007256:	e009      	b.n	800726c <pwm+0xa4>

        case LCD_LED_PWM:
            htim = &htim8;
 8007258:	4b25      	ldr	r3, [pc, #148]	@ (80072f0 <pwm+0x128>)
 800725a:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_2;
 800725c:	2304      	movs	r3, #4
 800725e:	613b      	str	r3, [r7, #16]
            break;
 8007260:	e004      	b.n	800726c <pwm+0xa4>
#ifdef Servo
        case Servo_PWM_OR_DC_M1_EncA_Interrupt:
            htim = &htim11;
 8007262:	4b24      	ldr	r3, [pc, #144]	@ (80072f4 <pwm+0x12c>)
 8007264:	617b      	str	r3, [r7, #20]
            channel = TIM_CHANNEL_1;
 8007266:	2300      	movs	r3, #0
 8007268:	613b      	str	r3, [r7, #16]
            break;
 800726a:	bf00      	nop
        default:
            return; // Invalid label
    }

    // Calculate the pulse value based on percentage
    pulse = (uint32_t)((percentage / 100.0f) * (htim->Init.Period + 1));
 800726c:	edd7 7a00 	vldr	s15, [r7]
 8007270:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 80072e0 <pwm+0x118>
 8007274:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	3301      	adds	r3, #1
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728e:	ee17 3a90 	vmov	r3, s15
 8007292:	60fb      	str	r3, [r7, #12]

    // Set the pulse value for the corresponding channel
    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d104      	bne.n	80072a4 <pwm+0xdc>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80072a2:	e013      	b.n	80072cc <pwm+0x104>
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d104      	bne.n	80072b4 <pwm+0xec>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80072b2:	e00b      	b.n	80072cc <pwm+0x104>
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	d104      	bne.n	80072c4 <pwm+0xfc>
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80072c2:	e003      	b.n	80072cc <pwm+0x104>
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6413      	str	r3, [r2, #64]	@ 0x40

    // Start PWM signal generation if not already running
    HAL_TIM_PWM_Start(htim, channel);
 80072cc:	6939      	ldr	r1, [r7, #16]
 80072ce:	6978      	ldr	r0, [r7, #20]
 80072d0:	f004 f952 	bl	800b578 <HAL_TIM_PWM_Start>
 80072d4:	e000      	b.n	80072d8 <pwm+0x110>
            return; // Invalid label
 80072d6:	bf00      	nop
}
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	42c80000 	.word	0x42c80000
 80072e4:	42c80000 	.word	0x42c80000
 80072e8:	200029a8 	.word	0x200029a8
 80072ec:	200029f0 	.word	0x200029f0
 80072f0:	20002ac8 	.word	0x20002ac8
 80072f4:	20002b58 	.word	0x20002b58

080072f8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80072fc:	4b17      	ldr	r3, [pc, #92]	@ (800735c <MX_SPI1_Init+0x64>)
 80072fe:	4a18      	ldr	r2, [pc, #96]	@ (8007360 <MX_SPI1_Init+0x68>)
 8007300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007302:	4b16      	ldr	r3, [pc, #88]	@ (800735c <MX_SPI1_Init+0x64>)
 8007304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800730a:	4b14      	ldr	r3, [pc, #80]	@ (800735c <MX_SPI1_Init+0x64>)
 800730c:	2200      	movs	r2, #0
 800730e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007310:	4b12      	ldr	r3, [pc, #72]	@ (800735c <MX_SPI1_Init+0x64>)
 8007312:	2200      	movs	r2, #0
 8007314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007316:	4b11      	ldr	r3, [pc, #68]	@ (800735c <MX_SPI1_Init+0x64>)
 8007318:	2200      	movs	r2, #0
 800731a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800731c:	4b0f      	ldr	r3, [pc, #60]	@ (800735c <MX_SPI1_Init+0x64>)
 800731e:	2200      	movs	r2, #0
 8007320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007322:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <MX_SPI1_Init+0x64>)
 8007324:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8007328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800732a:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <MX_SPI1_Init+0x64>)
 800732c:	2220      	movs	r2, #32
 800732e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007330:	4b0a      	ldr	r3, [pc, #40]	@ (800735c <MX_SPI1_Init+0x64>)
 8007332:	2200      	movs	r2, #0
 8007334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007336:	4b09      	ldr	r3, [pc, #36]	@ (800735c <MX_SPI1_Init+0x64>)
 8007338:	2200      	movs	r2, #0
 800733a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <MX_SPI1_Init+0x64>)
 800733e:	2200      	movs	r2, #0
 8007340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007342:	4b06      	ldr	r3, [pc, #24]	@ (800735c <MX_SPI1_Init+0x64>)
 8007344:	220a      	movs	r2, #10
 8007346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007348:	4804      	ldr	r0, [pc, #16]	@ (800735c <MX_SPI1_Init+0x64>)
 800734a:	f003 fba3 	bl	800aa94 <HAL_SPI_Init>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007354:	f7ff ff32 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007358:	bf00      	nop
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20002900 	.word	0x20002900
 8007360:	40013000 	.word	0x40013000

08007364 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	@ 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a28      	ldr	r2, [pc, #160]	@ (8007424 <HAL_SPI_MspInit+0xc0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d14a      	bne.n	800741c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007386:	2300      	movs	r3, #0
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 800738c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800738e:	4a26      	ldr	r2, [pc, #152]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 8007390:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007394:	6453      	str	r3, [r2, #68]	@ 0x44
 8007396:	4b24      	ldr	r3, [pc, #144]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 8007398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800739a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	4b20      	ldr	r3, [pc, #128]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 80073a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80073b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	60bb      	str	r3, [r7, #8]
 80073c2:	4b19      	ldr	r3, [pc, #100]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c6:	4a18      	ldr	r2, [pc, #96]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ce:	4b16      	ldr	r3, [pc, #88]	@ (8007428 <HAL_SPI_MspInit+0xc4>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	60bb      	str	r3, [r7, #8]
 80073d8:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_nSS_Pin;
 80073da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073e0:	2302      	movs	r3, #2
 80073e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073e8:	2303      	movs	r3, #3
 80073ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80073ec:	2305      	movs	r3, #5
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI_nSS_GPIO_Port, &GPIO_InitStruct);
 80073f0:	f107 0314 	add.w	r3, r7, #20
 80073f4:	4619      	mov	r1, r3
 80073f6:	480d      	ldr	r0, [pc, #52]	@ (800742c <HAL_SPI_MspInit+0xc8>)
 80073f8:	f002 fc4e 	bl	8009c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 80073fc:	2338      	movs	r3, #56	@ 0x38
 80073fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007400:	2302      	movs	r3, #2
 8007402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007408:	2303      	movs	r3, #3
 800740a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800740c:	2305      	movs	r3, #5
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	4619      	mov	r1, r3
 8007416:	4806      	ldr	r0, [pc, #24]	@ (8007430 <HAL_SPI_MspInit+0xcc>)
 8007418:	f002 fc3e 	bl	8009c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800741c:	bf00      	nop
 800741e:	3728      	adds	r7, #40	@ 0x28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40013000 	.word	0x40013000
 8007428:	40023800 	.word	0x40023800
 800742c:	40020000 	.word	0x40020000
 8007430:	40020400 	.word	0x40020400

08007434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	4b18      	ldr	r3, [pc, #96]	@ (80074a0 <HAL_MspInit+0x6c>)
 8007440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007442:	4a17      	ldr	r2, [pc, #92]	@ (80074a0 <HAL_MspInit+0x6c>)
 8007444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007448:	6453      	str	r3, [r2, #68]	@ 0x44
 800744a:	4b15      	ldr	r3, [pc, #84]	@ (80074a0 <HAL_MspInit+0x6c>)
 800744c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800744e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	4b11      	ldr	r3, [pc, #68]	@ (80074a0 <HAL_MspInit+0x6c>)
 800745c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745e:	4a10      	ldr	r2, [pc, #64]	@ (80074a0 <HAL_MspInit+0x6c>)
 8007460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007464:	6413      	str	r3, [r2, #64]	@ 0x40
 8007466:	4b0e      	ldr	r3, [pc, #56]	@ (80074a0 <HAL_MspInit+0x6c>)
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800746e:	603b      	str	r3, [r7, #0]
 8007470:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007472:	2007      	movs	r0, #7
 8007474:	f001 fe34 	bl	80090e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8007478:	2200      	movs	r2, #0
 800747a:	2100      	movs	r1, #0
 800747c:	2004      	movs	r0, #4
 800747e:	f001 fe3a 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8007482:	2004      	movs	r0, #4
 8007484:	f001 fe53 	bl	800912e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	2005      	movs	r0, #5
 800748e:	f001 fe32 	bl	80090f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8007492:	2005      	movs	r0, #5
 8007494:	f001 fe4b 	bl	800912e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800

080074a4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80074a8:	4b0e      	ldr	r3, [pc, #56]	@ (80074e4 <SDTimer_Handler+0x40>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d006      	beq.n	80074c0 <SDTimer_Handler+0x1c>
    Timer1--;
 80074b2:	4b0c      	ldr	r3, [pc, #48]	@ (80074e4 <SDTimer_Handler+0x40>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	4b09      	ldr	r3, [pc, #36]	@ (80074e4 <SDTimer_Handler+0x40>)
 80074be:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80074c0:	4b09      	ldr	r3, [pc, #36]	@ (80074e8 <SDTimer_Handler+0x44>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d006      	beq.n	80074d8 <SDTimer_Handler+0x34>
    Timer2--;
 80074ca:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <SDTimer_Handler+0x44>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b2da      	uxtb	r2, r3
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <SDTimer_Handler+0x44>)
 80074d6:	701a      	strb	r2, [r3, #0]
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20002959 	.word	0x20002959
 80074e8:	2000295a 	.word	0x2000295a

080074ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80074f0:	bf00      	nop
 80074f2:	e7fd      	b.n	80074f0 <NMI_Handler+0x4>

080074f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074f8:	bf00      	nop
 80074fa:	e7fd      	b.n	80074f8 <HardFault_Handler+0x4>

080074fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007500:	bf00      	nop
 8007502:	e7fd      	b.n	8007500 <MemManage_Handler+0x4>

08007504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <BusFault_Handler+0x4>

0800750c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007510:	bf00      	nop
 8007512:	e7fd      	b.n	8007510 <UsageFault_Handler+0x4>

08007514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007522:	b480      	push	{r7}
 8007524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007526:	bf00      	nop
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
	...

08007540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8007544:	4b0a      	ldr	r3, [pc, #40]	@ (8007570 <SysTick_Handler+0x30>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	3301      	adds	r3, #1
 800754c:	b2da      	uxtb	r2, r3
 800754e:	4b08      	ldr	r3, [pc, #32]	@ (8007570 <SysTick_Handler+0x30>)
 8007550:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8007552:	4b07      	ldr	r3, [pc, #28]	@ (8007570 <SysTick_Handler+0x30>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b09      	cmp	r3, #9
 800755a:	d904      	bls.n	8007566 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800755c:	4b04      	ldr	r3, [pc, #16]	@ (8007570 <SysTick_Handler+0x30>)
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8007562:	f7ff ff9f 	bl	80074a4 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007566:	f001 f8a7 	bl	80086b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800756a:	bf00      	nop
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20002958 	.word	0x20002958

08007574 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8007578:	f002 fddc 	bl	800a134 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800757c:	bf00      	nop
 800757e:	bd80      	pop	{r7, pc}

08007580 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8007584:	f002 f9f0 	bl	8009968 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8007588:	bf00      	nop
 800758a:	bd80      	pop	{r7, pc}

0800758c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007590:	bf00      	nop
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_Prox_Interrupt_Pin);
 800759e:	2001      	movs	r0, #1
 80075a0:	f002 fd48 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80075a4:	bf00      	nop
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_EncB__Interrupt_Pin);
 80075ac:	2002      	movs	r0, #2
 80075ae:	f002 fd41 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80075b2:	bf00      	nop
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Clean_Interrupt_PullUp_Pin);
 80075ba:	2004      	movs	r0, #4
 80075bc:	f002 fd3a 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80075c0:	bf00      	nop
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Power_Interrupt_PullUp_Pin);
 80075c8:	2010      	movs	r0, #16
 80075ca:	f002 fd33 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80075ce:	bf00      	nop
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80075d8:	4802      	ldr	r0, [pc, #8]	@ (80075e4 <DMA1_Stream1_IRQHandler+0x10>)
 80075da:	f001 ff5b 	bl	8009494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80075de:	bf00      	nop
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20002cd8 	.word	0x20002cd8

080075e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80075ec:	4802      	ldr	r0, [pc, #8]	@ (80075f8 <DMA1_Stream3_IRQHandler+0x10>)
 80075ee:	f001 ff51 	bl	8009494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80075f2:	bf00      	nop
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20002d38 	.word	0x20002d38

080075fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Clamp_M2_EncA_Interrupt_Pin);
 8007600:	2020      	movs	r0, #32
 8007602:	f002 fd17 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_EncA_Interrupt_Pin);
 8007606:	2040      	movs	r0, #64	@ 0x40
 8007608:	f002 fd14 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ServoDC_M1_Prox_Interrupt_Pin);
 800760c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007610:	f002 fd10 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
//*  This  part will only work if we are using DC Motor instead of Servo Motor:
  #ifndef Servo
  HAL_GPIO_EXTI_IRQHandler(Servo_PWM_OR_DC_M1_EncA_Interrupt_Pin);
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007614:	bf00      	nop
 8007616:	bd80      	pop	{r7, pc}

08007618 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800761c:	4802      	ldr	r0, [pc, #8]	@ (8007628 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800761e:	f004 f873 	bl	800b708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007622:	bf00      	nop
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20002b10 	.word	0x20002b10

0800762c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007630:	4802      	ldr	r0, [pc, #8]	@ (800763c <TIM2_IRQHandler+0x10>)
 8007632:	f004 f869 	bl	800b708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007636:	bf00      	nop
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20002960 	.word	0x20002960

08007640 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007644:	4802      	ldr	r0, [pc, #8]	@ (8007650 <USART1_IRQHandler+0x10>)
 8007646:	f005 f871 	bl	800c72c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800764a:	bf00      	nop
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20002be8 	.word	0x20002be8

08007654 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007658:	4802      	ldr	r0, [pc, #8]	@ (8007664 <USART3_IRQHandler+0x10>)
 800765a:	f005 f867 	bl	800c72c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800765e:	bf00      	nop
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20002c30 	.word	0x20002c30

08007668 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_Prox_Interrupt_Pin);
 800766c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8007670:	f002 fce0 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USBFlag_Interrupt_PullUp_Pin);
 8007674:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007678:	f002 fcdc 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Spindle_M3_EncB_Interrupt_Pin);
 800767c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8007680:	f002 fcd8 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ServoDC_M1_EncB_Interrupt_Pin);
 8007684:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007688:	f002 fcd4 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800768c:	bf00      	nop
 800768e:	bd80      	pop	{r7, pc}

08007690 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007694:	4802      	ldr	r0, [pc, #8]	@ (80076a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8007696:	f004 f837 	bl	800b708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800769a:	bf00      	nop
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	20002ac8 	.word	0x20002ac8

080076a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80076a8:	4802      	ldr	r0, [pc, #8]	@ (80076b4 <TIM6_DAC_IRQHandler+0x10>)
 80076aa:	f004 f82d 	bl	800b708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80076ae:	bf00      	nop
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20002a38 	.word	0x20002a38

080076b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80076bc:	4802      	ldr	r0, [pc, #8]	@ (80076c8 <TIM7_IRQHandler+0x10>)
 80076be:	f004 f823 	bl	800b708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20002a80 	.word	0x20002a80

080076cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80076d0:	4802      	ldr	r0, [pc, #8]	@ (80076dc <DMA2_Stream2_IRQHandler+0x10>)
 80076d2:	f001 fedf 	bl	8009494 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80076d6:	bf00      	nop
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	bf00      	nop
 80076dc:	20002c78 	.word	0x20002c78

080076e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return 1;
 80076e4:	2301      	movs	r3, #1
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <_kill>:

int _kill(int pid, int sig)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80076fa:	f00c f837 	bl	801376c <__errno>
 80076fe:	4603      	mov	r3, r0
 8007700:	2216      	movs	r2, #22
 8007702:	601a      	str	r2, [r3, #0]
  return -1;
 8007704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <_exit>:

void _exit (int status)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007718:	f04f 31ff 	mov.w	r1, #4294967295
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ffe7 	bl	80076f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <_exit+0x12>

08007726 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e00a      	b.n	800774e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007738:	f3af 8000 	nop.w
 800773c:	4601      	mov	r1, r0
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	1c5a      	adds	r2, r3, #1
 8007742:	60ba      	str	r2, [r7, #8]
 8007744:	b2ca      	uxtb	r2, r1
 8007746:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	3301      	adds	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	429a      	cmp	r2, r3
 8007754:	dbf0      	blt.n	8007738 <_read+0x12>
  }

  return len;
 8007756:	687b      	ldr	r3, [r7, #4]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3718      	adds	r7, #24
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
 8007770:	e009      	b.n	8007786 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	60ba      	str	r2, [r7, #8]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	3301      	adds	r3, #1
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	429a      	cmp	r2, r3
 800778c:	dbf1      	blt.n	8007772 <_write+0x12>
  }
  return len;
 800778e:	687b      	ldr	r3, [r7, #4]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <_close>:

int _close(int file)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80077c0:	605a      	str	r2, [r3, #4]
  return 0;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <_isatty>:

int _isatty(int file)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80077d8:	2301      	movs	r3, #1
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b085      	sub	sp, #20
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007808:	4a14      	ldr	r2, [pc, #80]	@ (800785c <_sbrk+0x5c>)
 800780a:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <_sbrk+0x60>)
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007814:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <_sbrk+0x64>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d102      	bne.n	8007822 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800781c:	4b11      	ldr	r3, [pc, #68]	@ (8007864 <_sbrk+0x64>)
 800781e:	4a12      	ldr	r2, [pc, #72]	@ (8007868 <_sbrk+0x68>)
 8007820:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007822:	4b10      	ldr	r3, [pc, #64]	@ (8007864 <_sbrk+0x64>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4413      	add	r3, r2
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	429a      	cmp	r2, r3
 800782e:	d207      	bcs.n	8007840 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007830:	f00b ff9c 	bl	801376c <__errno>
 8007834:	4603      	mov	r3, r0
 8007836:	220c      	movs	r2, #12
 8007838:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	e009      	b.n	8007854 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007840:	4b08      	ldr	r3, [pc, #32]	@ (8007864 <_sbrk+0x64>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007846:	4b07      	ldr	r3, [pc, #28]	@ (8007864 <_sbrk+0x64>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	4a05      	ldr	r2, [pc, #20]	@ (8007864 <_sbrk+0x64>)
 8007850:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007852:	68fb      	ldr	r3, [r7, #12]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	20020000 	.word	0x20020000
 8007860:	00000400 	.word	0x00000400
 8007864:	2000295c 	.word	0x2000295c
 8007868:	20003528 	.word	0x20003528

0800786c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800786c:	b480      	push	{r7}
 800786e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007870:	4b06      	ldr	r3, [pc, #24]	@ (800788c <SystemInit+0x20>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007876:	4a05      	ldr	r2, [pc, #20]	@ (800788c <SystemInit+0x20>)
 8007878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800787c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <MX_TIM2_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007896:	f107 0308 	add.w	r3, r7, #8
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	609a      	str	r2, [r3, #8]
 80078a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a4:	463b      	mov	r3, r7
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80078ac:	4b1e      	ldr	r3, [pc, #120]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80078b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16799;
 80078b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078b6:	f244 129f 	movw	r2, #16799	@ 0x419f
 80078ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078be:	2200      	movs	r2, #0
 80078c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 80078c2:	4b19      	ldr	r3, [pc, #100]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078c4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80078c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078ca:	4b17      	ldr	r3, [pc, #92]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078d0:	4b15      	ldr	r3, [pc, #84]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078d2:	2200      	movs	r2, #0
 80078d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80078d6:	4814      	ldr	r0, [pc, #80]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078d8:	f003 fd34 	bl	800b344 <HAL_TIM_Base_Init>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80078e2:	f7ff fc6b 	bl	80071bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80078ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80078ec:	f107 0308 	add.w	r3, r7, #8
 80078f0:	4619      	mov	r1, r3
 80078f2:	480d      	ldr	r0, [pc, #52]	@ (8007928 <MX_TIM2_Init+0x98>)
 80078f4:	f004 f8ba 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80078fe:	f7ff fc5d 	bl	80071bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007902:	2300      	movs	r3, #0
 8007904:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800790a:	463b      	mov	r3, r7
 800790c:	4619      	mov	r1, r3
 800790e:	4806      	ldr	r0, [pc, #24]	@ (8007928 <MX_TIM2_Init+0x98>)
 8007910:	f004 fcb8 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800791a:	f7ff fc4f 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800791e:	bf00      	nop
 8007920:	3718      	adds	r7, #24
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20002960 	.word	0x20002960

0800792c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08e      	sub	sp, #56	@ 0x38
 8007930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
/**  ServoDC Connector PWM Timer Configuration for Servo*/
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
 800793c:	609a      	str	r2, [r3, #8]
 800793e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007940:	f107 0320 	add.w	r3, r7, #32
 8007944:	2200      	movs	r2, #0
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800794a:	1d3b      	adds	r3, r7, #4
 800794c:	2200      	movs	r2, #0
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	605a      	str	r2, [r3, #4]
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	60da      	str	r2, [r3, #12]
 8007956:	611a      	str	r2, [r3, #16]
 8007958:	615a      	str	r2, [r3, #20]
 800795a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800795c:	4b2c      	ldr	r3, [pc, #176]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 800795e:	4a2d      	ldr	r2, [pc, #180]	@ (8007a14 <MX_TIM3_Init+0xe8>)
 8007960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8007962:	4b2b      	ldr	r3, [pc, #172]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 8007964:	2253      	movs	r2, #83	@ 0x53
 8007966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007968:	4b29      	ldr	r3, [pc, #164]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 499;
 800796e:	4b28      	ldr	r3, [pc, #160]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 8007970:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8007974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007976:	4b26      	ldr	r3, [pc, #152]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 8007978:	2200      	movs	r2, #0
 800797a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800797c:	4b24      	ldr	r3, [pc, #144]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 800797e:	2200      	movs	r2, #0
 8007980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007982:	4823      	ldr	r0, [pc, #140]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 8007984:	f003 fcde 	bl	800b344 <HAL_TIM_Base_Init>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d001      	beq.n	8007992 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800798e:	f7ff fc15 	bl	80071bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007996:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007998:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800799c:	4619      	mov	r1, r3
 800799e:	481c      	ldr	r0, [pc, #112]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 80079a0:	f004 f864 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80079aa:	f7ff fc07 	bl	80071bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80079ae:	4818      	ldr	r0, [pc, #96]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 80079b0:	f003 fd88 	bl	800b4c4 <HAL_TIM_PWM_Init>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80079ba:	f7ff fbff 	bl	80071bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80079c6:	f107 0320 	add.w	r3, r7, #32
 80079ca:	4619      	mov	r1, r3
 80079cc:	4810      	ldr	r0, [pc, #64]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 80079ce:	f004 fc59 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d001      	beq.n	80079dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80079d8:	f7ff fbf0 	bl	80071bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80079dc:	2360      	movs	r3, #96	@ 0x60
 80079de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079e4:	2300      	movs	r3, #0
 80079e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80079ec:	1d3b      	adds	r3, r7, #4
 80079ee:	2208      	movs	r2, #8
 80079f0:	4619      	mov	r1, r3
 80079f2:	4807      	ldr	r0, [pc, #28]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 80079f4:	f003 ff78 	bl	800b8e8 <HAL_TIM_PWM_ConfigChannel>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80079fe:	f7ff fbdd 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007a02:	4803      	ldr	r0, [pc, #12]	@ (8007a10 <MX_TIM3_Init+0xe4>)
 8007a04:	f000 fae4 	bl	8007fd0 <HAL_TIM_MspPostInit>

}
 8007a08:	bf00      	nop
 8007a0a:	3738      	adds	r7, #56	@ 0x38
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200029a8 	.word	0x200029a8
 8007a14:	40000400 	.word	0x40000400

08007a18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b08e      	sub	sp, #56	@ 0x38
 8007a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
/**  DC Clamp Motor and DC Spindle Motor PWM Timer Configration*/
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	609a      	str	r2, [r3, #8]
 8007a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a2c:	f107 0320 	add.w	r3, r7, #32
 8007a30:	2200      	movs	r2, #0
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007a36:	1d3b      	adds	r3, r7, #4
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	605a      	str	r2, [r3, #4]
 8007a3e:	609a      	str	r2, [r3, #8]
 8007a40:	60da      	str	r2, [r3, #12]
 8007a42:	611a      	str	r2, [r3, #16]
 8007a44:	615a      	str	r2, [r3, #20]
 8007a46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007a48:	4b32      	ldr	r3, [pc, #200]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a4a:	4a33      	ldr	r2, [pc, #204]	@ (8007b18 <MX_TIM4_Init+0x100>)
 8007a4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8007a4e:	4b31      	ldr	r3, [pc, #196]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a50:	2253      	movs	r2, #83	@ 0x53
 8007a52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a54:	4b2f      	ldr	r3, [pc, #188]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8007a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a5c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8007a60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a62:	4b2c      	ldr	r3, [pc, #176]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a68:	4b2a      	ldr	r3, [pc, #168]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007a6e:	4829      	ldr	r0, [pc, #164]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a70:	f003 fc68 	bl	800b344 <HAL_TIM_Base_Init>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8007a7a:	f7ff fb9f 	bl	80071bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007a84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4822      	ldr	r0, [pc, #136]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a8c:	f003 ffee 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007a96:	f7ff fb91 	bl	80071bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007a9a:	481e      	ldr	r0, [pc, #120]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007a9c:	f003 fd12 	bl	800b4c4 <HAL_TIM_PWM_Init>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007aa6:	f7ff fb89 	bl	80071bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007ab2:	f107 0320 	add.w	r3, r7, #32
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4816      	ldr	r0, [pc, #88]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007aba:	f004 fbe3 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007ac4:	f7ff fb7a 	bl	80071bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ac8:	2360      	movs	r3, #96	@ 0x60
 8007aca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ad8:	1d3b      	adds	r3, r7, #4
 8007ada:	2200      	movs	r2, #0
 8007adc:	4619      	mov	r1, r3
 8007ade:	480d      	ldr	r0, [pc, #52]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007ae0:	f003 ff02 	bl	800b8e8 <HAL_TIM_PWM_ConfigChannel>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8007aea:	f7ff fb67 	bl	80071bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	2204      	movs	r2, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4807      	ldr	r0, [pc, #28]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007af6:	f003 fef7 	bl	800b8e8 <HAL_TIM_PWM_ConfigChannel>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8007b00:	f7ff fb5c 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007b04:	4803      	ldr	r0, [pc, #12]	@ (8007b14 <MX_TIM4_Init+0xfc>)
 8007b06:	f000 fa63 	bl	8007fd0 <HAL_TIM_MspPostInit>

}
 8007b0a:	bf00      	nop
 8007b0c:	3738      	adds	r7, #56	@ 0x38
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	200029f0 	.word	0x200029f0
 8007b18:	40000800 	.word	0x40000800

08007b1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b22:	463b      	mov	r3, r7
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8007b2a:	4b15      	ldr	r3, [pc, #84]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b2c:	4a15      	ldr	r2, [pc, #84]	@ (8007b84 <MX_TIM6_Init+0x68>)
 8007b2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8007b30:	4b13      	ldr	r3, [pc, #76]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b32:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8007b36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b38:	4b11      	ldr	r3, [pc, #68]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 8007b3e:	4b10      	ldr	r3, [pc, #64]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b40:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8007b44:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b46:	4b0e      	ldr	r3, [pc, #56]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8007b4c:	480c      	ldr	r0, [pc, #48]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b4e:	f003 fbf9 	bl	800b344 <HAL_TIM_Base_Init>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8007b58:	f7ff fb30 	bl	80071bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8007b64:	463b      	mov	r3, r7
 8007b66:	4619      	mov	r1, r3
 8007b68:	4805      	ldr	r0, [pc, #20]	@ (8007b80 <MX_TIM6_Init+0x64>)
 8007b6a:	f004 fb8b 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8007b74:	f7ff fb22 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20002a38 	.word	0x20002a38
 8007b84:	40001000 	.word	0x40001000

08007b88 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b8e:	463b      	mov	r3, r7
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8007b96:	4b15      	ldr	r3, [pc, #84]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007b98:	4a15      	ldr	r2, [pc, #84]	@ (8007bf0 <MX_TIM7_Init+0x68>)
 8007b9a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8007b9c:	4b13      	ldr	r3, [pc, #76]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007b9e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8007ba2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ba4:	4b11      	ldr	r3, [pc, #68]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8007baa:	4b10      	ldr	r3, [pc, #64]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007bac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007bb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8007bb8:	480c      	ldr	r0, [pc, #48]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007bba:	f003 fbc3 	bl	800b344 <HAL_TIM_Base_Init>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8007bc4:	f7ff fafa 	bl	80071bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8007bd0:	463b      	mov	r3, r7
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4805      	ldr	r0, [pc, #20]	@ (8007bec <MX_TIM7_Init+0x64>)
 8007bd6:	f004 fb55 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8007be0:	f7ff faec 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8007be4:	bf00      	nop
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20002a80 	.word	0x20002a80
 8007bf0:	40001400 	.word	0x40001400

08007bf4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b096      	sub	sp, #88	@ 0x58
 8007bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */
/** LCD PWM Timer Configurations*/
  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007bfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	609a      	str	r2, [r3, #8]
 8007c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c16:	2200      	movs	r2, #0
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	605a      	str	r2, [r3, #4]
 8007c1c:	609a      	str	r2, [r3, #8]
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	611a      	str	r2, [r3, #16]
 8007c22:	615a      	str	r2, [r3, #20]
 8007c24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c26:	1d3b      	adds	r3, r7, #4
 8007c28:	2220      	movs	r2, #32
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f00b fd0a 	bl	8013646 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007c32:	4b44      	ldr	r3, [pc, #272]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c34:	4a44      	ldr	r2, [pc, #272]	@ (8007d48 <MX_TIM8_Init+0x154>)
 8007c36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8007c38:	4b42      	ldr	r3, [pc, #264]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c3a:	2253      	movs	r2, #83	@ 0x53
 8007c3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c3e:	4b41      	ldr	r3, [pc, #260]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 499;
 8007c44:	4b3f      	ldr	r3, [pc, #252]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c46:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8007c4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c4c:	4b3d      	ldr	r3, [pc, #244]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007c52:	4b3c      	ldr	r3, [pc, #240]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c58:	4b3a      	ldr	r3, [pc, #232]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007c5e:	4839      	ldr	r0, [pc, #228]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c60:	f003 fb70 	bl	800b344 <HAL_TIM_Base_Init>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8007c6a:	f7ff faa7 	bl	80071bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007c74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4832      	ldr	r0, [pc, #200]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c7c:	f003 fef6 	bl	800ba6c <HAL_TIM_ConfigClockSource>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d001      	beq.n	8007c8a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8007c86:	f7ff fa99 	bl	80071bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8007c8a:	482e      	ldr	r0, [pc, #184]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007c8c:	f003 fc1a 	bl	800b4c4 <HAL_TIM_PWM_Init>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8007c96:	f7ff fa91 	bl	80071bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007ca2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4826      	ldr	r0, [pc, #152]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007caa:	f004 faeb 	bl	800c284 <HAL_TIMEx_MasterConfigSynchronization>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8007cb4:	f7ff fa82 	bl	80071bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007cb8:	2360      	movs	r3, #96	@ 0x60
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4819      	ldr	r0, [pc, #100]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007cde:	f003 fe03 	bl	800b8e8 <HAL_TIM_PWM_ConfigChannel>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8007ce8:	f7ff fa68 	bl	80071bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	4813      	ldr	r0, [pc, #76]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007cf6:	f003 fdf7 	bl	800b8e8 <HAL_TIM_PWM_ConfigChannel>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8007d00:	f7ff fa5c 	bl	80071bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007d10:	2300      	movs	r3, #0
 8007d12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007d18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007d1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007d22:	1d3b      	adds	r3, r7, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4807      	ldr	r0, [pc, #28]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007d28:	f004 fb28 	bl	800c37c <HAL_TIMEx_ConfigBreakDeadTime>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8007d32:	f7ff fa43 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8007d36:	4803      	ldr	r0, [pc, #12]	@ (8007d44 <MX_TIM8_Init+0x150>)
 8007d38:	f000 f94a 	bl	8007fd0 <HAL_TIM_MspPostInit>

}
 8007d3c:	bf00      	nop
 8007d3e:	3758      	adds	r7, #88	@ 0x58
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20002ac8 	.word	0x20002ac8
 8007d48:	40010400 	.word	0x40010400

08007d4c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8007d50:	4b0e      	ldr	r3, [pc, #56]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d52:	4a0f      	ldr	r2, [pc, #60]	@ (8007d90 <MX_TIM10_Init+0x44>)
 8007d54:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 65535;
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d5c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 270;
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d66:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8007d6a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d6c:	4b07      	ldr	r3, [pc, #28]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d72:	4b06      	ldr	r3, [pc, #24]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8007d78:	4804      	ldr	r0, [pc, #16]	@ (8007d8c <MX_TIM10_Init+0x40>)
 8007d7a:	f003 fae3 	bl	800b344 <HAL_TIM_Base_Init>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8007d84:	f7ff fa1a 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8007d88:	bf00      	nop
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20002b10 	.word	0x20002b10
 8007d90:	40014400 	.word	0x40014400

08007d94 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */
/**  Servo Motor PWM Timer Configuration */
  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8007d9a:	1d3b      	adds	r3, r7, #4
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
 8007da8:	615a      	str	r2, [r3, #20]
 8007daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8007dac:	4b1e      	ldr	r3, [pc, #120]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007dae:	4a1f      	ldr	r2, [pc, #124]	@ (8007e2c <MX_TIM11_Init+0x98>)
 8007db0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 509;
 8007db2:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007db4:	f240 12fd 	movw	r2, #509	@ 0x1fd
 8007db8:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dba:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 3029;
 8007dc0:	4b19      	ldr	r3, [pc, #100]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007dc2:	f640 32d5 	movw	r2, #3029	@ 0xbd5
 8007dc6:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dc8:	4b17      	ldr	r3, [pc, #92]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007dce:	4b16      	ldr	r3, [pc, #88]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8007dd4:	4814      	ldr	r0, [pc, #80]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007dd6:	f003 fab5 	bl	800b344 <HAL_TIM_Base_Init>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 8007de0:	f7ff f9ec 	bl	80071bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8007de4:	4810      	ldr	r0, [pc, #64]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007de6:	f003 fb6d 	bl	800b4c4 <HAL_TIM_PWM_Init>
 8007dea:	4603      	mov	r3, r0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d001      	beq.n	8007df4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 8007df0:	f7ff f9e4 	bl	80071bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007df4:	2360      	movs	r3, #96	@ 0x60
 8007df6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007e04:	1d3b      	adds	r3, r7, #4
 8007e06:	2200      	movs	r2, #0
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4807      	ldr	r0, [pc, #28]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007e0c:	f003 fd6c 	bl	800b8e8 <HAL_TIM_PWM_ConfigChannel>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 8007e16:	f7ff f9d1 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8007e1a:	4803      	ldr	r0, [pc, #12]	@ (8007e28 <MX_TIM11_Init+0x94>)
 8007e1c:	f000 f8d8 	bl	8007fd0 <HAL_TIM_MspPostInit>

}
 8007e20:	bf00      	nop
 8007e22:	3720      	adds	r7, #32
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20002b58 	.word	0x20002b58
 8007e2c:	40014800 	.word	0x40014800

08007e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	@ 0x28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e40:	d10e      	bne.n	8007e60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e42:	2300      	movs	r3, #0
 8007e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e46:	4b5a      	ldr	r3, [pc, #360]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4a:	4a59      	ldr	r2, [pc, #356]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e52:	4b57      	ldr	r3, [pc, #348]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8007e5e:	e0a2      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM3)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a53      	ldr	r2, [pc, #332]	@ (8007fb4 <HAL_TIM_Base_MspInit+0x184>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d10e      	bne.n	8007e88 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	623b      	str	r3, [r7, #32]
 8007e6e:	4b50      	ldr	r3, [pc, #320]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e72:	4a4f      	ldr	r2, [pc, #316]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e74:	f043 0302 	orr.w	r3, r3, #2
 8007e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8007e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	623b      	str	r3, [r7, #32]
 8007e84:	6a3b      	ldr	r3, [r7, #32]
}
 8007e86:	e08e      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM4)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8007fb8 <HAL_TIM_Base_MspInit+0x188>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d10e      	bne.n	8007eb0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e92:	2300      	movs	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	4b46      	ldr	r3, [pc, #280]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	4a45      	ldr	r2, [pc, #276]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007e9c:	f043 0304 	orr.w	r3, r3, #4
 8007ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ea2:	4b43      	ldr	r3, [pc, #268]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	61fb      	str	r3, [r7, #28]
 8007eac:	69fb      	ldr	r3, [r7, #28]
}
 8007eae:	e07a      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM6)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a41      	ldr	r2, [pc, #260]	@ (8007fbc <HAL_TIM_Base_MspInit+0x18c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d116      	bne.n	8007ee8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007ec4:	f043 0310 	orr.w	r3, r3, #16
 8007ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007eca:	4b39      	ldr	r3, [pc, #228]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	61bb      	str	r3, [r7, #24]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	2100      	movs	r1, #0
 8007eda:	2036      	movs	r0, #54	@ 0x36
 8007edc:	f001 f90b 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ee0:	2036      	movs	r0, #54	@ 0x36
 8007ee2:	f001 f924 	bl	800912e <HAL_NVIC_EnableIRQ>
}
 8007ee6:	e05e      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM7)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a34      	ldr	r2, [pc, #208]	@ (8007fc0 <HAL_TIM_Base_MspInit+0x190>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d10e      	bne.n	8007f10 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efa:	4a2d      	ldr	r2, [pc, #180]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007efc:	f043 0320 	orr.w	r3, r3, #32
 8007f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f02:	4b2b      	ldr	r3, [pc, #172]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	697b      	ldr	r3, [r7, #20]
}
 8007f0e:	e04a      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a2b      	ldr	r2, [pc, #172]	@ (8007fc4 <HAL_TIM_Base_MspInit+0x194>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d116      	bne.n	8007f48 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
 8007f1e:	4b24      	ldr	r3, [pc, #144]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f22:	4a23      	ldr	r2, [pc, #140]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f2a:	4b21      	ldr	r3, [pc, #132]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	613b      	str	r3, [r7, #16]
 8007f34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	202d      	movs	r0, #45	@ 0x2d
 8007f3c:	f001 f8db 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8007f40:	202d      	movs	r0, #45	@ 0x2d
 8007f42:	f001 f8f4 	bl	800912e <HAL_NVIC_EnableIRQ>
}
 8007f46:	e02e      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM10)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8007fc8 <HAL_TIM_Base_MspInit+0x198>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d116      	bne.n	8007f80 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	4b16      	ldr	r3, [pc, #88]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5a:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f60:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f62:	4b13      	ldr	r3, [pc, #76]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2100      	movs	r1, #0
 8007f72:	2019      	movs	r0, #25
 8007f74:	f001 f8bf 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007f78:	2019      	movs	r0, #25
 8007f7a:	f001 f8d8 	bl	800912e <HAL_NVIC_EnableIRQ>
}
 8007f7e:	e012      	b.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM11)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a11      	ldr	r2, [pc, #68]	@ (8007fcc <HAL_TIM_Base_MspInit+0x19c>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d10d      	bne.n	8007fa6 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]
 8007f8e:	4b08      	ldr	r3, [pc, #32]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f92:	4a07      	ldr	r2, [pc, #28]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f98:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f9a:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <HAL_TIM_Base_MspInit+0x180>)
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fa2:	60bb      	str	r3, [r7, #8]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
}
 8007fa6:	bf00      	nop
 8007fa8:	3728      	adds	r7, #40	@ 0x28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40023800 	.word	0x40023800
 8007fb4:	40000400 	.word	0x40000400
 8007fb8:	40000800 	.word	0x40000800
 8007fbc:	40001000 	.word	0x40001000
 8007fc0:	40001400 	.word	0x40001400
 8007fc4:	40010400 	.word	0x40010400
 8007fc8:	40014400 	.word	0x40014400
 8007fcc:	40014800 	.word	0x40014800

08007fd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08c      	sub	sp, #48	@ 0x30
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fd8:	f107 031c 	add.w	r3, r7, #28
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	605a      	str	r2, [r3, #4]
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	60da      	str	r2, [r3, #12]
 8007fe6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a49      	ldr	r2, [pc, #292]	@ (8008114 <HAL_TIM_MspPostInit+0x144>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d11f      	bne.n	8008032 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	4b48      	ldr	r3, [pc, #288]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ffa:	4a47      	ldr	r2, [pc, #284]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8007ffc:	f043 0304 	orr.w	r3, r3, #4
 8008000:	6313      	str	r3, [r2, #48]	@ 0x30
 8008002:	4b45      	ldr	r3, [pc, #276]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008006:	f003 0304 	and.w	r3, r3, #4
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = ServoDC_M1_PWM_Pin;
 800800e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008014:	2302      	movs	r3, #2
 8008016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008018:	2300      	movs	r3, #0
 800801a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800801c:	2300      	movs	r3, #0
 800801e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008020:	2302      	movs	r3, #2
 8008022:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ServoDC_M1_PWM_GPIO_Port, &GPIO_InitStruct);
 8008024:	f107 031c 	add.w	r3, r7, #28
 8008028:	4619      	mov	r1, r3
 800802a:	483c      	ldr	r0, [pc, #240]	@ (800811c <HAL_TIM_MspPostInit+0x14c>)
 800802c:	f001 fe34 	bl	8009c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8008030:	e06c      	b.n	800810c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM4)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a3a      	ldr	r2, [pc, #232]	@ (8008120 <HAL_TIM_MspPostInit+0x150>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d11f      	bne.n	800807c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800803c:	2300      	movs	r3, #0
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	4b35      	ldr	r3, [pc, #212]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8008042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008044:	4a34      	ldr	r2, [pc, #208]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8008046:	f043 0308 	orr.w	r3, r3, #8
 800804a:	6313      	str	r3, [r2, #48]	@ 0x30
 800804c:	4b32      	ldr	r3, [pc, #200]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 800804e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008050:	f003 0308 	and.w	r3, r3, #8
 8008054:	617b      	str	r3, [r7, #20]
 8008056:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Clamp_M2_PWM_Pin|Spindle_M3_PWM_Pin;
 8008058:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800805c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800805e:	2302      	movs	r3, #2
 8008060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008066:	2300      	movs	r3, #0
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800806a:	2302      	movs	r3, #2
 800806c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800806e:	f107 031c 	add.w	r3, r7, #28
 8008072:	4619      	mov	r1, r3
 8008074:	482b      	ldr	r0, [pc, #172]	@ (8008124 <HAL_TIM_MspPostInit+0x154>)
 8008076:	f001 fe0f 	bl	8009c98 <HAL_GPIO_Init>
}
 800807a:	e047      	b.n	800810c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM8)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a29      	ldr	r2, [pc, #164]	@ (8008128 <HAL_TIM_MspPostInit+0x158>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d11e      	bne.n	80080c4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008086:	2300      	movs	r3, #0
 8008088:	613b      	str	r3, [r7, #16]
 800808a:	4b23      	ldr	r3, [pc, #140]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 800808c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800808e:	4a22      	ldr	r2, [pc, #136]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8008090:	f043 0304 	orr.w	r3, r3, #4
 8008094:	6313      	str	r3, [r2, #48]	@ 0x30
 8008096:	4b20      	ldr	r3, [pc, #128]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 8008098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_Contrast_PWM_Pin|LCD_LED_PWM_Pin;
 80080a2:	23c0      	movs	r3, #192	@ 0xc0
 80080a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080a6:	2302      	movs	r3, #2
 80080a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ae:	2300      	movs	r3, #0
 80080b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80080b2:	2303      	movs	r3, #3
 80080b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080b6:	f107 031c 	add.w	r3, r7, #28
 80080ba:	4619      	mov	r1, r3
 80080bc:	4817      	ldr	r0, [pc, #92]	@ (800811c <HAL_TIM_MspPostInit+0x14c>)
 80080be:	f001 fdeb 	bl	8009c98 <HAL_GPIO_Init>
}
 80080c2:	e023      	b.n	800810c <HAL_TIM_MspPostInit+0x13c>
  else if(timHandle->Instance==TIM11)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a18      	ldr	r2, [pc, #96]	@ (800812c <HAL_TIM_MspPostInit+0x15c>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d11e      	bne.n	800810c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	4b11      	ldr	r3, [pc, #68]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080d6:	4a10      	ldr	r2, [pc, #64]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 80080d8:	f043 0302 	orr.w	r3, r3, #2
 80080dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80080de:	4b0e      	ldr	r3, [pc, #56]	@ (8008118 <HAL_TIM_MspPostInit+0x148>)
 80080e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_PWM_OR_DC_M1_EncA_Interrupt_Pin;
 80080ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f0:	2302      	movs	r3, #2
 80080f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080f8:	2300      	movs	r3, #0
 80080fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80080fc:	2303      	movs	r3, #3
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Servo_PWM_OR_DC_M1_EncA_Interrupt_GPIO_Port, &GPIO_InitStruct);
 8008100:	f107 031c 	add.w	r3, r7, #28
 8008104:	4619      	mov	r1, r3
 8008106:	480a      	ldr	r0, [pc, #40]	@ (8008130 <HAL_TIM_MspPostInit+0x160>)
 8008108:	f001 fdc6 	bl	8009c98 <HAL_GPIO_Init>
}
 800810c:	bf00      	nop
 800810e:	3730      	adds	r7, #48	@ 0x30
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40000400 	.word	0x40000400
 8008118:	40023800 	.word	0x40023800
 800811c:	40020800 	.word	0x40020800
 8008120:	40000800 	.word	0x40000800
 8008124:	40020c00 	.word	0x40020c00
 8008128:	40010400 	.word	0x40010400
 800812c:	40014800 	.word	0x40014800
 8008130:	40020400 	.word	0x40020400

08008134 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008138:	4b11      	ldr	r3, [pc, #68]	@ (8008180 <MX_UART4_Init+0x4c>)
 800813a:	4a12      	ldr	r2, [pc, #72]	@ (8008184 <MX_UART4_Init+0x50>)
 800813c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800813e:	4b10      	ldr	r3, [pc, #64]	@ (8008180 <MX_UART4_Init+0x4c>)
 8008140:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008144:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008146:	4b0e      	ldr	r3, [pc, #56]	@ (8008180 <MX_UART4_Init+0x4c>)
 8008148:	2200      	movs	r2, #0
 800814a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800814c:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <MX_UART4_Init+0x4c>)
 800814e:	2200      	movs	r2, #0
 8008150:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008152:	4b0b      	ldr	r3, [pc, #44]	@ (8008180 <MX_UART4_Init+0x4c>)
 8008154:	2200      	movs	r2, #0
 8008156:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008158:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <MX_UART4_Init+0x4c>)
 800815a:	220c      	movs	r2, #12
 800815c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800815e:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <MX_UART4_Init+0x4c>)
 8008160:	2200      	movs	r2, #0
 8008162:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008164:	4b06      	ldr	r3, [pc, #24]	@ (8008180 <MX_UART4_Init+0x4c>)
 8008166:	2200      	movs	r2, #0
 8008168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800816a:	4805      	ldr	r0, [pc, #20]	@ (8008180 <MX_UART4_Init+0x4c>)
 800816c:	f004 f96c 	bl	800c448 <HAL_UART_Init>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8008176:	f7ff f821 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800817a:	bf00      	nop
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20002ba0 	.word	0x20002ba0
 8008184:	40004c00 	.word	0x40004c00

08008188 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800818c:	4b11      	ldr	r3, [pc, #68]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 800818e:	4a12      	ldr	r2, [pc, #72]	@ (80081d8 <MX_USART1_UART_Init+0x50>)
 8008190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008192:	4b10      	ldr	r3, [pc, #64]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 8008194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800819a:	4b0e      	ldr	r3, [pc, #56]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 800819c:	2200      	movs	r2, #0
 800819e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80081a0:	4b0c      	ldr	r3, [pc, #48]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80081ac:	4b09      	ldr	r3, [pc, #36]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081ae:	220c      	movs	r2, #12
 80081b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80081b2:	4b08      	ldr	r3, [pc, #32]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80081b8:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80081be:	4805      	ldr	r0, [pc, #20]	@ (80081d4 <MX_USART1_UART_Init+0x4c>)
 80081c0:	f004 f942 	bl	800c448 <HAL_UART_Init>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80081ca:	f7fe fff7 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80081ce:	bf00      	nop
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20002be8 	.word	0x20002be8
 80081d8:	40011000 	.word	0x40011000

080081dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80081e0:	4b11      	ldr	r3, [pc, #68]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 80081e2:	4a12      	ldr	r2, [pc, #72]	@ (800822c <MX_USART3_UART_Init+0x50>)
 80081e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80081e6:	4b10      	ldr	r3, [pc, #64]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 80081e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80081ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80081ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80081f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80081fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008200:	4b09      	ldr	r3, [pc, #36]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 8008202:	220c      	movs	r2, #12
 8008204:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008206:	4b08      	ldr	r3, [pc, #32]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 8008208:	2200      	movs	r2, #0
 800820a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800820c:	4b06      	ldr	r3, [pc, #24]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 800820e:	2200      	movs	r2, #0
 8008210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008212:	4805      	ldr	r0, [pc, #20]	@ (8008228 <MX_USART3_UART_Init+0x4c>)
 8008214:	f004 f918 	bl	800c448 <HAL_UART_Init>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800821e:	f7fe ffcd 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20002c30 	.word	0x20002c30
 800822c:	40004800 	.word	0x40004800

08008230 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08e      	sub	sp, #56	@ 0x38
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	605a      	str	r2, [r3, #4]
 8008242:	609a      	str	r2, [r3, #8]
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a99      	ldr	r2, [pc, #612]	@ (80084b4 <HAL_UART_MspInit+0x284>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d12d      	bne.n	80082ae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8008252:	2300      	movs	r3, #0
 8008254:	623b      	str	r3, [r7, #32]
 8008256:	4b98      	ldr	r3, [pc, #608]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825a:	4a97      	ldr	r2, [pc, #604]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 800825c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008260:	6413      	str	r3, [r2, #64]	@ 0x40
 8008262:	4b95      	ldr	r3, [pc, #596]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800826a:	623b      	str	r3, [r7, #32]
 800826c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800826e:	2300      	movs	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]
 8008272:	4b91      	ldr	r3, [pc, #580]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	4a90      	ldr	r2, [pc, #576]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008278:	f043 0304 	orr.w	r3, r3, #4
 800827c:	6313      	str	r3, [r2, #48]	@ 0x30
 800827e:	4b8e      	ldr	r3, [pc, #568]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = STMUART4_TX_ESPUART1RX_Pin|STMUART4_RX_ESPUART1TX_Pin;
 800828a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008290:	2302      	movs	r3, #2
 8008292:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008294:	2300      	movs	r3, #0
 8008296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008298:	2303      	movs	r3, #3
 800829a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800829c:	2308      	movs	r3, #8
 800829e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082a4:	4619      	mov	r1, r3
 80082a6:	4885      	ldr	r0, [pc, #532]	@ (80084bc <HAL_UART_MspInit+0x28c>)
 80082a8:	f001 fcf6 	bl	8009c98 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80082ac:	e0fe      	b.n	80084ac <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART1)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a83      	ldr	r2, [pc, #524]	@ (80084c0 <HAL_UART_MspInit+0x290>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d162      	bne.n	800837e <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80082b8:	2300      	movs	r3, #0
 80082ba:	61bb      	str	r3, [r7, #24]
 80082bc:	4b7e      	ldr	r3, [pc, #504]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80082be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082c0:	4a7d      	ldr	r2, [pc, #500]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80082c2:	f043 0310 	orr.w	r3, r3, #16
 80082c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80082c8:	4b7b      	ldr	r3, [pc, #492]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80082ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	61bb      	str	r3, [r7, #24]
 80082d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
 80082d8:	4b77      	ldr	r3, [pc, #476]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082dc:	4a76      	ldr	r2, [pc, #472]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80082de:	f043 0302 	orr.w	r3, r3, #2
 80082e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80082e4:	4b74      	ldr	r3, [pc, #464]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80082e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART1_TX_STLINK_RX_Pin|UART1_RX_STLINK_TX_Pin;
 80082f0:	23c0      	movs	r3, #192	@ 0xc0
 80082f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f4:	2302      	movs	r3, #2
 80082f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082fc:	2303      	movs	r3, #3
 80082fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008300:	2307      	movs	r3, #7
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008308:	4619      	mov	r1, r3
 800830a:	486e      	ldr	r0, [pc, #440]	@ (80084c4 <HAL_UART_MspInit+0x294>)
 800830c:	f001 fcc4 	bl	8009c98 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008310:	4b6d      	ldr	r3, [pc, #436]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008312:	4a6e      	ldr	r2, [pc, #440]	@ (80084cc <HAL_UART_MspInit+0x29c>)
 8008314:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008316:	4b6c      	ldr	r3, [pc, #432]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008318:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800831c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800831e:	4b6a      	ldr	r3, [pc, #424]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008320:	2200      	movs	r2, #0
 8008322:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008324:	4b68      	ldr	r3, [pc, #416]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008326:	2200      	movs	r2, #0
 8008328:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800832a:	4b67      	ldr	r3, [pc, #412]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 800832c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008330:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008332:	4b65      	ldr	r3, [pc, #404]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008334:	2200      	movs	r2, #0
 8008336:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008338:	4b63      	ldr	r3, [pc, #396]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 800833a:	2200      	movs	r2, #0
 800833c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800833e:	4b62      	ldr	r3, [pc, #392]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008340:	2200      	movs	r2, #0
 8008342:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008344:	4b60      	ldr	r3, [pc, #384]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008346:	2200      	movs	r2, #0
 8008348:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800834a:	4b5f      	ldr	r3, [pc, #380]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 800834c:	2200      	movs	r2, #0
 800834e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008350:	485d      	ldr	r0, [pc, #372]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008352:	f000 ff07 	bl	8009164 <HAL_DMA_Init>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d001      	beq.n	8008360 <HAL_UART_MspInit+0x130>
      Error_Handler();
 800835c:	f7fe ff2e 	bl	80071bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a59      	ldr	r2, [pc, #356]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008364:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008366:	4a58      	ldr	r2, [pc, #352]	@ (80084c8 <HAL_UART_MspInit+0x298>)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800836c:	2200      	movs	r2, #0
 800836e:	2100      	movs	r1, #0
 8008370:	2025      	movs	r0, #37	@ 0x25
 8008372:	f000 fec0 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008376:	2025      	movs	r0, #37	@ 0x25
 8008378:	f000 fed9 	bl	800912e <HAL_NVIC_EnableIRQ>
}
 800837c:	e096      	b.n	80084ac <HAL_UART_MspInit+0x27c>
  else if(uartHandle->Instance==USART3)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a53      	ldr	r2, [pc, #332]	@ (80084d0 <HAL_UART_MspInit+0x2a0>)
 8008384:	4293      	cmp	r3, r2
 8008386:	f040 8091 	bne.w	80084ac <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	4b4a      	ldr	r3, [pc, #296]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008392:	4a49      	ldr	r2, [pc, #292]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 8008394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008398:	6413      	str	r3, [r2, #64]	@ 0x40
 800839a:	4b47      	ldr	r3, [pc, #284]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 800839c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80083a2:	613b      	str	r3, [r7, #16]
 80083a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083a6:	2300      	movs	r3, #0
 80083a8:	60fb      	str	r3, [r7, #12]
 80083aa:	4b43      	ldr	r3, [pc, #268]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ae:	4a42      	ldr	r2, [pc, #264]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80083b0:	f043 0302 	orr.w	r3, r3, #2
 80083b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80083b6:	4b40      	ldr	r3, [pc, #256]	@ (80084b8 <HAL_UART_MspInit+0x288>)
 80083b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ba:	f003 0302 	and.w	r3, r3, #2
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3TX_FC1RX_Pin|UART3RX_FC1TX_Pin;
 80083c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c8:	2302      	movs	r3, #2
 80083ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083d0:	2303      	movs	r3, #3
 80083d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80083d4:	2307      	movs	r3, #7
 80083d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80083d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083dc:	4619      	mov	r1, r3
 80083de:	4839      	ldr	r0, [pc, #228]	@ (80084c4 <HAL_UART_MspInit+0x294>)
 80083e0:	f001 fc5a 	bl	8009c98 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80083e4:	4b3b      	ldr	r3, [pc, #236]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 80083e6:	4a3c      	ldr	r2, [pc, #240]	@ (80084d8 <HAL_UART_MspInit+0x2a8>)
 80083e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80083ea:	4b3a      	ldr	r3, [pc, #232]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 80083ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80083f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083f2:	4b38      	ldr	r3, [pc, #224]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083f8:	4b36      	ldr	r3, [pc, #216]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80083fe:	4b35      	ldr	r3, [pc, #212]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 8008400:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008404:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008406:	4b33      	ldr	r3, [pc, #204]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 8008408:	2200      	movs	r2, #0
 800840a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800840c:	4b31      	ldr	r3, [pc, #196]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 800840e:	2200      	movs	r2, #0
 8008410:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8008412:	4b30      	ldr	r3, [pc, #192]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 8008414:	2200      	movs	r2, #0
 8008416:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008418:	4b2e      	ldr	r3, [pc, #184]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 800841a:	2200      	movs	r2, #0
 800841c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800841e:	4b2d      	ldr	r3, [pc, #180]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 8008420:	2200      	movs	r2, #0
 8008422:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8008424:	482b      	ldr	r0, [pc, #172]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 8008426:	f000 fe9d 	bl	8009164 <HAL_DMA_Init>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d001      	beq.n	8008434 <HAL_UART_MspInit+0x204>
      Error_Handler();
 8008430:	f7fe fec4 	bl	80071bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a27      	ldr	r2, [pc, #156]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 8008438:	63da      	str	r2, [r3, #60]	@ 0x3c
 800843a:	4a26      	ldr	r2, [pc, #152]	@ (80084d4 <HAL_UART_MspInit+0x2a4>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8008440:	4b26      	ldr	r3, [pc, #152]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008442:	4a27      	ldr	r2, [pc, #156]	@ (80084e0 <HAL_UART_MspInit+0x2b0>)
 8008444:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8008446:	4b25      	ldr	r3, [pc, #148]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008448:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800844c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800844e:	4b23      	ldr	r3, [pc, #140]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008450:	2240      	movs	r2, #64	@ 0x40
 8008452:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008454:	4b21      	ldr	r3, [pc, #132]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008456:	2200      	movs	r2, #0
 8008458:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800845a:	4b20      	ldr	r3, [pc, #128]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 800845c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008460:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008462:	4b1e      	ldr	r3, [pc, #120]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008464:	2200      	movs	r2, #0
 8008466:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008468:	4b1c      	ldr	r3, [pc, #112]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 800846a:	2200      	movs	r2, #0
 800846c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800846e:	4b1b      	ldr	r3, [pc, #108]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008470:	2200      	movs	r2, #0
 8008472:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008474:	4b19      	ldr	r3, [pc, #100]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008476:	2200      	movs	r2, #0
 8008478:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800847a:	4b18      	ldr	r3, [pc, #96]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 800847c:	2200      	movs	r2, #0
 800847e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8008480:	4816      	ldr	r0, [pc, #88]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008482:	f000 fe6f 	bl	8009164 <HAL_DMA_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <HAL_UART_MspInit+0x260>
      Error_Handler();
 800848c:	f7fe fe96 	bl	80071bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a12      	ldr	r2, [pc, #72]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008494:	639a      	str	r2, [r3, #56]	@ 0x38
 8008496:	4a11      	ldr	r2, [pc, #68]	@ (80084dc <HAL_UART_MspInit+0x2ac>)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800849c:	2200      	movs	r2, #0
 800849e:	2100      	movs	r1, #0
 80084a0:	2027      	movs	r0, #39	@ 0x27
 80084a2:	f000 fe28 	bl	80090f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80084a6:	2027      	movs	r0, #39	@ 0x27
 80084a8:	f000 fe41 	bl	800912e <HAL_NVIC_EnableIRQ>
}
 80084ac:	bf00      	nop
 80084ae:	3738      	adds	r7, #56	@ 0x38
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40004c00 	.word	0x40004c00
 80084b8:	40023800 	.word	0x40023800
 80084bc:	40020800 	.word	0x40020800
 80084c0:	40011000 	.word	0x40011000
 80084c4:	40020400 	.word	0x40020400
 80084c8:	20002c78 	.word	0x20002c78
 80084cc:	40026440 	.word	0x40026440
 80084d0:	40004800 	.word	0x40004800
 80084d4:	20002cd8 	.word	0x20002cd8
 80084d8:	40026028 	.word	0x40026028
 80084dc:	20002d38 	.word	0x20002d38
 80084e0:	40026058 	.word	0x40026058

080084e4 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80084ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80084ee:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80084f2:	2208      	movs	r2, #8
 80084f4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80084f8:	2201      	movs	r2, #1
 80084fa:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084fc:	4b09      	ldr	r3, [pc, #36]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80084fe:	2200      	movs	r2, #0
 8008500:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008502:	4b08      	ldr	r3, [pc, #32]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8008504:	2202      	movs	r2, #2
 8008506:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008508:	4b06      	ldr	r3, [pc, #24]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 800850a:	2200      	movs	r2, #0
 800850c:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800850e:	4805      	ldr	r0, [pc, #20]	@ (8008524 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8008510:	f001 fda8 	bl	800a064 <HAL_HCD_Init>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 800851a:	f7fe fe4f 	bl	80071bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800851e:	bf00      	nop
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20002d98 	.word	0x20002d98

08008528 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08a      	sub	sp, #40	@ 0x28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008530:	f107 0314 	add.w	r3, r7, #20
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008548:	d132      	bne.n	80085b0 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
 800854e:	4b1a      	ldr	r3, [pc, #104]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008552:	4a19      	ldr	r2, [pc, #100]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	6313      	str	r3, [r2, #48]	@ 0x30
 800855a:	4b17      	ldr	r3, [pc, #92]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008566:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800856a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856c:	2302      	movs	r3, #2
 800856e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008570:	2300      	movs	r3, #0
 8008572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008574:	2303      	movs	r3, #3
 8008576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008578:	230a      	movs	r3, #10
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800857c:	f107 0314 	add.w	r3, r7, #20
 8008580:	4619      	mov	r1, r3
 8008582:	480e      	ldr	r0, [pc, #56]	@ (80085bc <HAL_HCD_MspInit+0x94>)
 8008584:	f001 fb88 	bl	8009c98 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008588:	4b0b      	ldr	r3, [pc, #44]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 800858a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858c:	4a0a      	ldr	r2, [pc, #40]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 800858e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008592:	6353      	str	r3, [r2, #52]	@ 0x34
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	4b07      	ldr	r3, [pc, #28]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 800859a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859c:	4a06      	ldr	r2, [pc, #24]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 800859e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80085a4:	4b04      	ldr	r3, [pc, #16]	@ (80085b8 <HAL_HCD_MspInit+0x90>)
 80085a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085ac:	60fb      	str	r3, [r7, #12]
 80085ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085b0:	bf00      	nop
 80085b2:	3728      	adds	r7, #40	@ 0x28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40023800 	.word	0x40023800
 80085bc:	40020000 	.word	0x40020000

080085c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80085c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80085f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80085c4:	f7ff f952 	bl	800786c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80085c8:	480c      	ldr	r0, [pc, #48]	@ (80085fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80085ca:	490d      	ldr	r1, [pc, #52]	@ (8008600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80085cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80085ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085d0:	e002      	b.n	80085d8 <LoopCopyDataInit>

080085d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085d6:	3304      	adds	r3, #4

080085d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085dc:	d3f9      	bcc.n	80085d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085de:	4a0a      	ldr	r2, [pc, #40]	@ (8008608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80085e0:	4c0a      	ldr	r4, [pc, #40]	@ (800860c <LoopFillZerobss+0x22>)
  movs r3, #0
 80085e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085e4:	e001      	b.n	80085ea <LoopFillZerobss>

080085e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085e8:	3204      	adds	r2, #4

080085ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085ec:	d3fb      	bcc.n	80085e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80085ee:	f00b f8c3 	bl	8013778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80085f2:	f7fe fbd9 	bl	8006da8 <main>
  bx  lr    
 80085f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80085f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80085fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008600:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8008604:	08017c34 	.word	0x08017c34
  ldr r2, =_sbss
 8008608:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 800860c:	20003524 	.word	0x20003524

08008610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008610:	e7fe      	b.n	8008610 <ADC_IRQHandler>
	...

08008614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008618:	4b0e      	ldr	r3, [pc, #56]	@ (8008654 <HAL_Init+0x40>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a0d      	ldr	r2, [pc, #52]	@ (8008654 <HAL_Init+0x40>)
 800861e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008624:	4b0b      	ldr	r3, [pc, #44]	@ (8008654 <HAL_Init+0x40>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a0a      	ldr	r2, [pc, #40]	@ (8008654 <HAL_Init+0x40>)
 800862a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800862e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008630:	4b08      	ldr	r3, [pc, #32]	@ (8008654 <HAL_Init+0x40>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a07      	ldr	r2, [pc, #28]	@ (8008654 <HAL_Init+0x40>)
 8008636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800863a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800863c:	2003      	movs	r0, #3
 800863e:	f000 fd4f 	bl	80090e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008642:	2000      	movs	r0, #0
 8008644:	f000 f808 	bl	8008658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008648:	f7fe fef4 	bl	8007434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40023c00 	.word	0x40023c00

08008658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008660:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <HAL_InitTick+0x54>)
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	4b12      	ldr	r3, [pc, #72]	@ (80086b0 <HAL_InitTick+0x58>)
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	4619      	mov	r1, r3
 800866a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800866e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008672:	fbb2 f3f3 	udiv	r3, r2, r3
 8008676:	4618      	mov	r0, r3
 8008678:	f000 fd67 	bl	800914a <HAL_SYSTICK_Config>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e00e      	b.n	80086a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b0f      	cmp	r3, #15
 800868a:	d80a      	bhi.n	80086a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800868c:	2200      	movs	r2, #0
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	f000 fd2f 	bl	80090f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008698:	4a06      	ldr	r2, [pc, #24]	@ (80086b4 <HAL_InitTick+0x5c>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	e000      	b.n	80086a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000148 	.word	0x20000148
 80086b0:	20000150 	.word	0x20000150
 80086b4:	2000014c 	.word	0x2000014c

080086b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <HAL_IncTick+0x20>)
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	461a      	mov	r2, r3
 80086c2:	4b06      	ldr	r3, [pc, #24]	@ (80086dc <HAL_IncTick+0x24>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4413      	add	r3, r2
 80086c8:	4a04      	ldr	r2, [pc, #16]	@ (80086dc <HAL_IncTick+0x24>)
 80086ca:	6013      	str	r3, [r2, #0]
}
 80086cc:	bf00      	nop
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000150 	.word	0x20000150
 80086dc:	20003178 	.word	0x20003178

080086e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
  return uwTick;
 80086e4:	4b03      	ldr	r3, [pc, #12]	@ (80086f4 <HAL_GetTick+0x14>)
 80086e6:	681b      	ldr	r3, [r3, #0]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20003178 	.word	0x20003178

080086f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008700:	f7ff ffee 	bl	80086e0 <HAL_GetTick>
 8008704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008710:	d005      	beq.n	800871e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <HAL_Delay+0x44>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4413      	add	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800871e:	bf00      	nop
 8008720:	f7ff ffde 	bl	80086e0 <HAL_GetTick>
 8008724:	4602      	mov	r2, r0
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	429a      	cmp	r2, r3
 800872e:	d8f7      	bhi.n	8008720 <HAL_Delay+0x28>
  {
  }
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000150 	.word	0x20000150

08008740 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e033      	b.n	80087be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875a:	2b00      	cmp	r3, #0
 800875c:	d109      	bne.n	8008772 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fd fbf2 	bl	8005f48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	d118      	bne.n	80087b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008786:	f023 0302 	bic.w	r3, r3, #2
 800878a:	f043 0202 	orr.w	r2, r3, #2
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fad8 	bl	8008d48 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	f043 0201 	orr.w	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80087ae:	e001      	b.n	80087b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <HAL_ADC_Start+0x1a>
 80087de:	2302      	movs	r3, #2
 80087e0:	e0b2      	b.n	8008948 <HAL_ADC_Start+0x180>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f003 0301 	and.w	r3, r3, #1
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d018      	beq.n	800882a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008808:	4b52      	ldr	r3, [pc, #328]	@ (8008954 <HAL_ADC_Start+0x18c>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a52      	ldr	r2, [pc, #328]	@ (8008958 <HAL_ADC_Start+0x190>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	0c9a      	lsrs	r2, r3, #18
 8008814:	4613      	mov	r3, r2
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4413      	add	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800881c:	e002      	b.n	8008824 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	3b01      	subs	r3, #1
 8008822:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1f9      	bne.n	800881e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b01      	cmp	r3, #1
 8008836:	d17a      	bne.n	800892e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800883c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008840:	f023 0301 	bic.w	r3, r3, #1
 8008844:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800885e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008862:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008876:	d106      	bne.n	8008886 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800887c:	f023 0206 	bic.w	r2, r3, #6
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	645a      	str	r2, [r3, #68]	@ 0x44
 8008884:	e002      	b.n	800888c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008894:	4b31      	ldr	r3, [pc, #196]	@ (800895c <HAL_ADC_Start+0x194>)
 8008896:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80088a0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d12a      	bne.n	8008904 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008960 <HAL_ADC_Start+0x198>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d015      	beq.n	80088e4 <HAL_ADC_Start+0x11c>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a29      	ldr	r2, [pc, #164]	@ (8008964 <HAL_ADC_Start+0x19c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d105      	bne.n	80088ce <HAL_ADC_Start+0x106>
 80088c2:	4b26      	ldr	r3, [pc, #152]	@ (800895c <HAL_ADC_Start+0x194>)
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f003 031f 	and.w	r3, r3, #31
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00a      	beq.n	80088e4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a25      	ldr	r2, [pc, #148]	@ (8008968 <HAL_ADC_Start+0x1a0>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d136      	bne.n	8008946 <HAL_ADC_Start+0x17e>
 80088d8:	4b20      	ldr	r3, [pc, #128]	@ (800895c <HAL_ADC_Start+0x194>)
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d130      	bne.n	8008946 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d129      	bne.n	8008946 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008900:	609a      	str	r2, [r3, #8]
 8008902:	e020      	b.n	8008946 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a15      	ldr	r2, [pc, #84]	@ (8008960 <HAL_ADC_Start+0x198>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d11b      	bne.n	8008946 <HAL_ADC_Start+0x17e>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d114      	bne.n	8008946 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800892a:	609a      	str	r2, [r3, #8]
 800892c:	e00b      	b.n	8008946 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008932:	f043 0210 	orr.w	r2, r3, #16
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893e:	f043 0201 	orr.w	r2, r3, #1
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	20000148 	.word	0x20000148
 8008958:	431bde83 	.word	0x431bde83
 800895c:	40012300 	.word	0x40012300
 8008960:	40012000 	.word	0x40012000
 8008964:	40012100 	.word	0x40012100
 8008968:	40012200 	.word	0x40012200

0800896c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_ADC_Stop+0x16>
 800897e:	2302      	movs	r3, #2
 8008980:	e021      	b.n	80089c6 <HAL_ADC_Stop+0x5a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689a      	ldr	r2, [r3, #8]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0201 	bic.w	r2, r2, #1
 8008998:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d109      	bne.n	80089bc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80089b0:	f023 0301 	bic.w	r3, r3, #1
 80089b4:	f043 0201 	orr.w	r2, r3, #1
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ee:	d113      	bne.n	8008a18 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80089fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089fe:	d10b      	bne.n	8008a18 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a04:	f043 0220 	orr.w	r2, r3, #32
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e063      	b.n	8008ae0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a18:	f7ff fe62 	bl	80086e0 <HAL_GetTick>
 8008a1c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008a1e:	e021      	b.n	8008a64 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a26:	d01d      	beq.n	8008a64 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d007      	beq.n	8008a3e <HAL_ADC_PollForConversion+0x6c>
 8008a2e:	f7ff fe57 	bl	80086e0 <HAL_GetTick>
 8008a32:	4602      	mov	r2, r0
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	1ad3      	subs	r3, r2, r3
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d212      	bcs.n	8008a64 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d00b      	beq.n	8008a64 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a50:	f043 0204 	orr.w	r2, r3, #4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e03d      	b.n	8008ae0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d1d6      	bne.n	8008a20 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f06f 0212 	mvn.w	r2, #18
 8008a7a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d123      	bne.n	8008ade <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d11f      	bne.n	8008ade <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aa4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d006      	beq.n	8008aba <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d111      	bne.n	8008ade <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d105      	bne.n	8008ade <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	f043 0201 	orr.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d101      	bne.n	8008b20 <HAL_ADC_ConfigChannel+0x1c>
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	e105      	b.n	8008d2c <HAL_ADC_ConfigChannel+0x228>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b09      	cmp	r3, #9
 8008b2e:	d925      	bls.n	8008b7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68d9      	ldr	r1, [r3, #12]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4613      	mov	r3, r2
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	4413      	add	r3, r2
 8008b44:	3b1e      	subs	r3, #30
 8008b46:	2207      	movs	r2, #7
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	43da      	mvns	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	400a      	ands	r2, r1
 8008b54:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68d9      	ldr	r1, [r3, #12]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	4618      	mov	r0, r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	4403      	add	r3, r0
 8008b6e:	3b1e      	subs	r3, #30
 8008b70:	409a      	lsls	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	60da      	str	r2, [r3, #12]
 8008b7a:	e022      	b.n	8008bc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6919      	ldr	r1, [r3, #16]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4613      	mov	r3, r2
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	4413      	add	r3, r2
 8008b90:	2207      	movs	r2, #7
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	43da      	mvns	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	400a      	ands	r2, r1
 8008b9e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6919      	ldr	r1, [r3, #16]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	4403      	add	r3, r0
 8008bb8:	409a      	lsls	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	2b06      	cmp	r3, #6
 8008bc8:	d824      	bhi.n	8008c14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685a      	ldr	r2, [r3, #4]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	3b05      	subs	r3, #5
 8008bdc:	221f      	movs	r2, #31
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43da      	mvns	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	400a      	ands	r2, r1
 8008bea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	4613      	mov	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	4413      	add	r3, r2
 8008c04:	3b05      	subs	r3, #5
 8008c06:	fa00 f203 	lsl.w	r2, r0, r3
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	430a      	orrs	r2, r1
 8008c10:	635a      	str	r2, [r3, #52]	@ 0x34
 8008c12:	e04c      	b.n	8008cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	2b0c      	cmp	r3, #12
 8008c1a:	d824      	bhi.n	8008c66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3b23      	subs	r3, #35	@ 0x23
 8008c2e:	221f      	movs	r2, #31
 8008c30:	fa02 f303 	lsl.w	r3, r2, r3
 8008c34:	43da      	mvns	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	400a      	ands	r2, r1
 8008c3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	4613      	mov	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	3b23      	subs	r3, #35	@ 0x23
 8008c58:	fa00 f203 	lsl.w	r2, r0, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	430a      	orrs	r2, r1
 8008c62:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c64:	e023      	b.n	8008cae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685a      	ldr	r2, [r3, #4]
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	3b41      	subs	r3, #65	@ 0x41
 8008c78:	221f      	movs	r2, #31
 8008c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7e:	43da      	mvns	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	400a      	ands	r2, r1
 8008c86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4618      	mov	r0, r3
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	3b41      	subs	r3, #65	@ 0x41
 8008ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008cae:	4b22      	ldr	r3, [pc, #136]	@ (8008d38 <HAL_ADC_ConfigChannel+0x234>)
 8008cb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a21      	ldr	r2, [pc, #132]	@ (8008d3c <HAL_ADC_ConfigChannel+0x238>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d109      	bne.n	8008cd0 <HAL_ADC_ConfigChannel+0x1cc>
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b12      	cmp	r3, #18
 8008cc2:	d105      	bne.n	8008cd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a19      	ldr	r2, [pc, #100]	@ (8008d3c <HAL_ADC_ConfigChannel+0x238>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d123      	bne.n	8008d22 <HAL_ADC_ConfigChannel+0x21e>
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d003      	beq.n	8008cea <HAL_ADC_ConfigChannel+0x1e6>
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b11      	cmp	r3, #17
 8008ce8:	d11b      	bne.n	8008d22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b10      	cmp	r3, #16
 8008cfc:	d111      	bne.n	8008d22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008cfe:	4b10      	ldr	r3, [pc, #64]	@ (8008d40 <HAL_ADC_ConfigChannel+0x23c>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a10      	ldr	r2, [pc, #64]	@ (8008d44 <HAL_ADC_ConfigChannel+0x240>)
 8008d04:	fba2 2303 	umull	r2, r3, r2, r3
 8008d08:	0c9a      	lsrs	r2, r3, #18
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008d14:	e002      	b.n	8008d1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f9      	bne.n	8008d16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3714      	adds	r7, #20
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr
 8008d38:	40012300 	.word	0x40012300
 8008d3c:	40012000 	.word	0x40012000
 8008d40:	20000148 	.word	0x20000148
 8008d44:	431bde83 	.word	0x431bde83

08008d48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008d50:	4b79      	ldr	r3, [pc, #484]	@ (8008f38 <ADC_Init+0x1f0>)
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008d7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6859      	ldr	r1, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	021a      	lsls	r2, r3, #8
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008da0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6859      	ldr	r1, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689a      	ldr	r2, [r3, #8]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	6899      	ldr	r1, [r3, #8]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68da      	ldr	r2, [r3, #12]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dda:	4a58      	ldr	r2, [pc, #352]	@ (8008f3c <ADC_Init+0x1f4>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d022      	beq.n	8008e26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	689a      	ldr	r2, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008dee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6899      	ldr	r1, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	689a      	ldr	r2, [r3, #8]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008e10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6899      	ldr	r1, [r3, #8]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	609a      	str	r2, [r3, #8]
 8008e24:	e00f      	b.n	8008e46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008e34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	689a      	ldr	r2, [r3, #8]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008e44:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0202 	bic.w	r2, r2, #2
 8008e54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	6899      	ldr	r1, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7e1b      	ldrb	r3, [r3, #24]
 8008e60:	005a      	lsls	r2, r3, #1
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d01b      	beq.n	8008eac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e82:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685a      	ldr	r2, [r3, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008e92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6859      	ldr	r1, [r3, #4]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	035a      	lsls	r2, r3, #13
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	605a      	str	r2, [r3, #4]
 8008eaa:	e007      	b.n	8008ebc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685a      	ldr	r2, [r3, #4]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008eba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	051a      	lsls	r2, r3, #20
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008ef0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6899      	ldr	r1, [r3, #8]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008efe:	025a      	lsls	r2, r3, #9
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	689a      	ldr	r2, [r3, #8]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6899      	ldr	r1, [r3, #8]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	029a      	lsls	r2, r3, #10
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	609a      	str	r2, [r3, #8]
}
 8008f2c:	bf00      	nop
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr
 8008f38:	40012300 	.word	0x40012300
 8008f3c:	0f000001 	.word	0x0f000001

08008f40 <__NVIC_SetPriorityGrouping>:
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f50:	4b0c      	ldr	r3, [pc, #48]	@ (8008f84 <__NVIC_SetPriorityGrouping+0x44>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f72:	4a04      	ldr	r2, [pc, #16]	@ (8008f84 <__NVIC_SetPriorityGrouping+0x44>)
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	60d3      	str	r3, [r2, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	e000ed00 	.word	0xe000ed00

08008f88 <__NVIC_GetPriorityGrouping>:
{
 8008f88:	b480      	push	{r7}
 8008f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f8c:	4b04      	ldr	r3, [pc, #16]	@ (8008fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	0a1b      	lsrs	r3, r3, #8
 8008f92:	f003 0307 	and.w	r3, r3, #7
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	e000ed00 	.word	0xe000ed00

08008fa4 <__NVIC_EnableIRQ>:
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	db0b      	blt.n	8008fce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	f003 021f 	and.w	r2, r3, #31
 8008fbc:	4907      	ldr	r1, [pc, #28]	@ (8008fdc <__NVIC_EnableIRQ+0x38>)
 8008fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	2001      	movs	r0, #1
 8008fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8008fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	e000e100 	.word	0xe000e100

08008fe0 <__NVIC_SetPriority>:
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	db0a      	blt.n	800900a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	490c      	ldr	r1, [pc, #48]	@ (800902c <__NVIC_SetPriority+0x4c>)
 8008ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffe:	0112      	lsls	r2, r2, #4
 8009000:	b2d2      	uxtb	r2, r2
 8009002:	440b      	add	r3, r1
 8009004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009008:	e00a      	b.n	8009020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	b2da      	uxtb	r2, r3
 800900e:	4908      	ldr	r1, [pc, #32]	@ (8009030 <__NVIC_SetPriority+0x50>)
 8009010:	79fb      	ldrb	r3, [r7, #7]
 8009012:	f003 030f 	and.w	r3, r3, #15
 8009016:	3b04      	subs	r3, #4
 8009018:	0112      	lsls	r2, r2, #4
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	440b      	add	r3, r1
 800901e:	761a      	strb	r2, [r3, #24]
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	e000e100 	.word	0xe000e100
 8009030:	e000ed00 	.word	0xe000ed00

08009034 <NVIC_EncodePriority>:
{
 8009034:	b480      	push	{r7}
 8009036:	b089      	sub	sp, #36	@ 0x24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 0307 	and.w	r3, r3, #7
 8009046:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	f1c3 0307 	rsb	r3, r3, #7
 800904e:	2b04      	cmp	r3, #4
 8009050:	bf28      	it	cs
 8009052:	2304      	movcs	r3, #4
 8009054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	3304      	adds	r3, #4
 800905a:	2b06      	cmp	r3, #6
 800905c:	d902      	bls.n	8009064 <NVIC_EncodePriority+0x30>
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	3b03      	subs	r3, #3
 8009062:	e000      	b.n	8009066 <NVIC_EncodePriority+0x32>
 8009064:	2300      	movs	r3, #0
 8009066:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009068:	f04f 32ff 	mov.w	r2, #4294967295
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	43da      	mvns	r2, r3
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	401a      	ands	r2, r3
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800907c:	f04f 31ff 	mov.w	r1, #4294967295
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	fa01 f303 	lsl.w	r3, r1, r3
 8009086:	43d9      	mvns	r1, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800908c:	4313      	orrs	r3, r2
}
 800908e:	4618      	mov	r0, r3
 8009090:	3724      	adds	r7, #36	@ 0x24
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
	...

0800909c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090ac:	d301      	bcc.n	80090b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090ae:	2301      	movs	r3, #1
 80090b0:	e00f      	b.n	80090d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090b2:	4a0a      	ldr	r2, [pc, #40]	@ (80090dc <SysTick_Config+0x40>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090ba:	210f      	movs	r1, #15
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	f7ff ff8e 	bl	8008fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090c4:	4b05      	ldr	r3, [pc, #20]	@ (80090dc <SysTick_Config+0x40>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090ca:	4b04      	ldr	r3, [pc, #16]	@ (80090dc <SysTick_Config+0x40>)
 80090cc:	2207      	movs	r2, #7
 80090ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	e000e010 	.word	0xe000e010

080090e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff ff29 	bl	8008f40 <__NVIC_SetPriorityGrouping>
}
 80090ee:	bf00      	nop
 80090f0:	3708      	adds	r7, #8
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	4603      	mov	r3, r0
 80090fe:	60b9      	str	r1, [r7, #8]
 8009100:	607a      	str	r2, [r7, #4]
 8009102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009108:	f7ff ff3e 	bl	8008f88 <__NVIC_GetPriorityGrouping>
 800910c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	68b9      	ldr	r1, [r7, #8]
 8009112:	6978      	ldr	r0, [r7, #20]
 8009114:	f7ff ff8e 	bl	8009034 <NVIC_EncodePriority>
 8009118:	4602      	mov	r2, r0
 800911a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff ff5d 	bl	8008fe0 <__NVIC_SetPriority>
}
 8009126:	bf00      	nop
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b082      	sub	sp, #8
 8009132:	af00      	add	r7, sp, #0
 8009134:	4603      	mov	r3, r0
 8009136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff ff31 	bl	8008fa4 <__NVIC_EnableIRQ>
}
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff ffa2 	bl	800909c <SysTick_Config>
 8009158:	4603      	mov	r3, r0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
	...

08009164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009170:	f7ff fab6 	bl	80086e0 <HAL_GetTick>
 8009174:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e099      	b.n	80092b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0201 	bic.w	r2, r2, #1
 800919e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091a0:	e00f      	b.n	80091c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80091a2:	f7ff fa9d 	bl	80086e0 <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b05      	cmp	r3, #5
 80091ae:	d908      	bls.n	80091c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2203      	movs	r2, #3
 80091ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e078      	b.n	80092b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 0301 	and.w	r3, r3, #1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e8      	bne.n	80091a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4b38      	ldr	r3, [pc, #224]	@ (80092bc <HAL_DMA_Init+0x158>)
 80091dc:	4013      	ands	r3, r2
 80091de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685a      	ldr	r2, [r3, #4]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009206:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009218:	2b04      	cmp	r3, #4
 800921a:	d107      	bne.n	800922c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009224:	4313      	orrs	r3, r2
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	4313      	orrs	r3, r2
 800922a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	695b      	ldr	r3, [r3, #20]
 800923a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f023 0307 	bic.w	r3, r3, #7
 8009242:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009252:	2b04      	cmp	r3, #4
 8009254:	d117      	bne.n	8009286 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	4313      	orrs	r3, r2
 800925e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00e      	beq.n	8009286 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb01 	bl	8009870 <DMA_CheckFifoParam>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d008      	beq.n	8009286 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2240      	movs	r2, #64	@ 0x40
 8009278:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8009282:	2301      	movs	r3, #1
 8009284:	e016      	b.n	80092b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fab8 	bl	8009804 <DMA_CalcBaseAndBitshift>
 8009294:	4603      	mov	r3, r0
 8009296:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929c:	223f      	movs	r2, #63	@ 0x3f
 800929e:	409a      	lsls	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3718      	adds	r7, #24
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	f010803f 	.word	0xf010803f

080092c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_DMA_Start_IT+0x26>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e040      	b.n	8009368 <HAL_DMA_Start_IT+0xa8>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d12f      	bne.n	800935a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	68b9      	ldr	r1, [r7, #8]
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f000 fa4a 	bl	80097a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009318:	223f      	movs	r2, #63	@ 0x3f
 800931a:	409a      	lsls	r2, r3
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0216 	orr.w	r2, r2, #22
 800932e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009334:	2b00      	cmp	r3, #0
 8009336:	d007      	beq.n	8009348 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0208 	orr.w	r2, r2, #8
 8009346:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0201 	orr.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	e005      	b.n	8009366 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009362:	2302      	movs	r3, #2
 8009364:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009366:	7dfb      	ldrb	r3, [r7, #23]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800937c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800937e:	f7ff f9af 	bl	80086e0 <HAL_GetTick>
 8009382:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b02      	cmp	r3, #2
 800938e:	d008      	beq.n	80093a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2280      	movs	r2, #128	@ 0x80
 8009394:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e052      	b.n	8009448 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0216 	bic.w	r2, r2, #22
 80093b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	695a      	ldr	r2, [r3, #20]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d103      	bne.n	80093d2 <HAL_DMA_Abort+0x62>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d007      	beq.n	80093e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f022 0208 	bic.w	r2, r2, #8
 80093e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f022 0201 	bic.w	r2, r2, #1
 80093f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80093f2:	e013      	b.n	800941c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80093f4:	f7ff f974 	bl	80086e0 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b05      	cmp	r3, #5
 8009400:	d90c      	bls.n	800941c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2203      	movs	r2, #3
 800940c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e015      	b.n	8009448 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0301 	and.w	r3, r3, #1
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e4      	bne.n	80093f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800942e:	223f      	movs	r2, #63	@ 0x3f
 8009430:	409a      	lsls	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d004      	beq.n	800946e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2280      	movs	r2, #128	@ 0x80
 8009468:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e00c      	b.n	8009488 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2205      	movs	r2, #5
 8009472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800949c:	2300      	movs	r3, #0
 800949e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80094a0:	4b8e      	ldr	r3, [pc, #568]	@ (80096dc <HAL_DMA_IRQHandler+0x248>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a8e      	ldr	r2, [pc, #568]	@ (80096e0 <HAL_DMA_IRQHandler+0x24c>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	0a9b      	lsrs	r3, r3, #10
 80094ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094be:	2208      	movs	r2, #8
 80094c0:	409a      	lsls	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	4013      	ands	r3, r2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d01a      	beq.n	8009500 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0304 	and.w	r3, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d013      	beq.n	8009500 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0204 	bic.w	r2, r2, #4
 80094e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094ec:	2208      	movs	r2, #8
 80094ee:	409a      	lsls	r2, r3
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f8:	f043 0201 	orr.w	r2, r3, #1
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009504:	2201      	movs	r2, #1
 8009506:	409a      	lsls	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4013      	ands	r3, r2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d012      	beq.n	8009536 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00b      	beq.n	8009536 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009522:	2201      	movs	r2, #1
 8009524:	409a      	lsls	r2, r3
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800952e:	f043 0202 	orr.w	r2, r3, #2
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800953a:	2204      	movs	r2, #4
 800953c:	409a      	lsls	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d012      	beq.n	800956c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f003 0302 	and.w	r3, r3, #2
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00b      	beq.n	800956c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009558:	2204      	movs	r2, #4
 800955a:	409a      	lsls	r2, r3
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009564:	f043 0204 	orr.w	r2, r3, #4
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009570:	2210      	movs	r2, #16
 8009572:	409a      	lsls	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4013      	ands	r3, r2
 8009578:	2b00      	cmp	r3, #0
 800957a:	d043      	beq.n	8009604 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0308 	and.w	r3, r3, #8
 8009586:	2b00      	cmp	r3, #0
 8009588:	d03c      	beq.n	8009604 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800958e:	2210      	movs	r2, #16
 8009590:	409a      	lsls	r2, r3
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d018      	beq.n	80095d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d108      	bne.n	80095c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d024      	beq.n	8009604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	4798      	blx	r3
 80095c2:	e01f      	b.n	8009604 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d01b      	beq.n	8009604 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
 80095d4:	e016      	b.n	8009604 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d107      	bne.n	80095f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0208 	bic.w	r2, r2, #8
 80095f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009608:	2220      	movs	r2, #32
 800960a:	409a      	lsls	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4013      	ands	r3, r2
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 808f 	beq.w	8009734 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0310 	and.w	r3, r3, #16
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8087 	beq.w	8009734 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800962a:	2220      	movs	r2, #32
 800962c:	409a      	lsls	r2, r3
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b05      	cmp	r3, #5
 800963c:	d136      	bne.n	80096ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f022 0216 	bic.w	r2, r2, #22
 800964c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	695a      	ldr	r2, [r3, #20]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800965c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <HAL_DMA_IRQHandler+0x1da>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800966a:	2b00      	cmp	r3, #0
 800966c:	d007      	beq.n	800967e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0208 	bic.w	r2, r2, #8
 800967c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009682:	223f      	movs	r2, #63	@ 0x3f
 8009684:	409a      	lsls	r2, r3
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d07e      	beq.n	80097a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	4798      	blx	r3
        }
        return;
 80096aa:	e079      	b.n	80097a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01d      	beq.n	80096f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10d      	bne.n	80096e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d031      	beq.n	8009734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
 80096d8:	e02c      	b.n	8009734 <HAL_DMA_IRQHandler+0x2a0>
 80096da:	bf00      	nop
 80096dc:	20000148 	.word	0x20000148
 80096e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d023      	beq.n	8009734 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	4798      	blx	r3
 80096f4:	e01e      	b.n	8009734 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10f      	bne.n	8009724 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0210 	bic.w	r2, r2, #16
 8009712:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d003      	beq.n	8009734 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009738:	2b00      	cmp	r3, #0
 800973a:	d032      	beq.n	80097a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d022      	beq.n	800978e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2205      	movs	r2, #5
 800974c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f022 0201 	bic.w	r2, r2, #1
 800975e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	3301      	adds	r3, #1
 8009764:	60bb      	str	r3, [r7, #8]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	429a      	cmp	r2, r3
 800976a:	d307      	bcc.n	800977c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1f2      	bne.n	8009760 <HAL_DMA_IRQHandler+0x2cc>
 800977a:	e000      	b.n	800977e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800977c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2201      	movs	r2, #1
 8009782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d005      	beq.n	80097a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	4798      	blx	r3
 800979e:	e000      	b.n	80097a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80097a0:	bf00      	nop
    }
  }
}
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80097c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	2b40      	cmp	r3, #64	@ 0x40
 80097d4:	d108      	bne.n	80097e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80097e6:	e007      	b.n	80097f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	60da      	str	r2, [r3, #12]
}
 80097f8:	bf00      	nop
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	b2db      	uxtb	r3, r3
 8009812:	3b10      	subs	r3, #16
 8009814:	4a14      	ldr	r2, [pc, #80]	@ (8009868 <DMA_CalcBaseAndBitshift+0x64>)
 8009816:	fba2 2303 	umull	r2, r3, r2, r3
 800981a:	091b      	lsrs	r3, r3, #4
 800981c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800981e:	4a13      	ldr	r2, [pc, #76]	@ (800986c <DMA_CalcBaseAndBitshift+0x68>)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4413      	add	r3, r2
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2b03      	cmp	r3, #3
 8009830:	d909      	bls.n	8009846 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	659a      	str	r2, [r3, #88]	@ 0x58
 8009844:	e007      	b.n	8009856 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800984e:	f023 0303 	bic.w	r3, r3, #3
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	aaaaaaab 	.word	0xaaaaaaab
 800986c:	08017370 	.word	0x08017370

08009870 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009880:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d11f      	bne.n	80098ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2b03      	cmp	r3, #3
 800988e:	d856      	bhi.n	800993e <DMA_CheckFifoParam+0xce>
 8009890:	a201      	add	r2, pc, #4	@ (adr r2, 8009898 <DMA_CheckFifoParam+0x28>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	080098a9 	.word	0x080098a9
 800989c:	080098bb 	.word	0x080098bb
 80098a0:	080098a9 	.word	0x080098a9
 80098a4:	0800993f 	.word	0x0800993f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d046      	beq.n	8009942 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098b8:	e043      	b.n	8009942 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098be:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80098c2:	d140      	bne.n	8009946 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098c8:	e03d      	b.n	8009946 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098d2:	d121      	bne.n	8009918 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d837      	bhi.n	800994a <DMA_CheckFifoParam+0xda>
 80098da:	a201      	add	r2, pc, #4	@ (adr r2, 80098e0 <DMA_CheckFifoParam+0x70>)
 80098dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098e0:	080098f1 	.word	0x080098f1
 80098e4:	080098f7 	.word	0x080098f7
 80098e8:	080098f1 	.word	0x080098f1
 80098ec:	08009909 	.word	0x08009909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
      break;
 80098f4:	e030      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d025      	beq.n	800994e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009906:	e022      	b.n	800994e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009910:	d11f      	bne.n	8009952 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009916:	e01c      	b.n	8009952 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2b02      	cmp	r3, #2
 800991c:	d903      	bls.n	8009926 <DMA_CheckFifoParam+0xb6>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b03      	cmp	r3, #3
 8009922:	d003      	beq.n	800992c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009924:	e018      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	73fb      	strb	r3, [r7, #15]
      break;
 800992a:	e015      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009930:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00e      	beq.n	8009956 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	73fb      	strb	r3, [r7, #15]
      break;
 800993c:	e00b      	b.n	8009956 <DMA_CheckFifoParam+0xe6>
      break;
 800993e:	bf00      	nop
 8009940:	e00a      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      break;
 8009942:	bf00      	nop
 8009944:	e008      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      break;
 8009946:	bf00      	nop
 8009948:	e006      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      break;
 800994a:	bf00      	nop
 800994c:	e004      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      break;
 800994e:	bf00      	nop
 8009950:	e002      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      break;   
 8009952:	bf00      	nop
 8009954:	e000      	b.n	8009958 <DMA_CheckFifoParam+0xe8>
      break;
 8009956:	bf00      	nop
    }
  } 
  
  return status; 
 8009958:	7bfb      	ldrb	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop

08009968 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009972:	4b4b      	ldr	r3, [pc, #300]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 800997a:	2b00      	cmp	r3, #0
 800997c:	d020      	beq.n	80099c0 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800997e:	4b49      	ldr	r3, [pc, #292]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	2b01      	cmp	r3, #1
 8009986:	d107      	bne.n	8009998 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009988:	4b46      	ldr	r3, [pc, #280]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800998e:	4b45      	ldr	r3, [pc, #276]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	60da      	str	r2, [r3, #12]
 8009996:	e00b      	b.n	80099b0 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009998:	4b42      	ldr	r3, [pc, #264]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d103      	bne.n	80099aa <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 80099a2:	4b40      	ldr	r3, [pc, #256]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	607b      	str	r3, [r7, #4]
 80099a8:	e002      	b.n	80099b0 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 80099aa:	4b3e      	ldr	r3, [pc, #248]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80099b0:	f000 f88e 	bl	8009ad0 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f881 	bl	8009abc <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80099ba:	4b3a      	ldr	r3, [pc, #232]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80099c0:	4b37      	ldr	r3, [pc, #220]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d04a      	beq.n	8009a62 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80099cc:	4b34      	ldr	r3, [pc, #208]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 80099ce:	2201      	movs	r2, #1
 80099d0:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 80099d2:	4b34      	ldr	r3, [pc, #208]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d12d      	bne.n	8009a38 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 80099dc:	4b31      	ldr	r3, [pc, #196]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	4a30      	ldr	r2, [pc, #192]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099e4:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 80099e6:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d015      	beq.n	8009a1a <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 80099ee:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f857 	bl	8009aa8 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 80099fa:	4b2a      	ldr	r3, [pc, #168]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	3301      	adds	r3, #1
 8009a00:	4a28      	ldr	r2, [pc, #160]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a02:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8009a04:	4b27      	ldr	r3, [pc, #156]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8009a0a:	4b26      	ldr	r3, [pc, #152]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a0c:	7a1b      	ldrb	r3, [r3, #8]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f8b2 	bl	8009b7c <FLASH_Erase_Sector>
 8009a18:	e023      	b.n	8009a62 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8009a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1e:	607b      	str	r3, [r7, #4]
 8009a20:	4a20      	ldr	r2, [pc, #128]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009a26:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009a2c:	f000 f8ee 	bl	8009c0c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f839 	bl	8009aa8 <HAL_FLASH_EndOfOperationCallback>
 8009a36:	e014      	b.n	8009a62 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009a38:	4b1a      	ldr	r3, [pc, #104]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d107      	bne.n	8009a52 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009a42:	f000 f8e3 	bl	8009c0c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009a46:	4b17      	ldr	r3, [pc, #92]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f82c 	bl	8009aa8 <HAL_FLASH_EndOfOperationCallback>
 8009a50:	e004      	b.n	8009a5c <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009a52:	4b14      	ldr	r3, [pc, #80]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f826 	bl	8009aa8 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009a5c:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009a62:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d114      	bne.n	8009a96 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a0b      	ldr	r2, [pc, #44]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009a72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009a76:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009a78:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	4a08      	ldr	r2, [pc, #32]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009a7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009a82:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009a84:	4b06      	ldr	r3, [pc, #24]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	4a05      	ldr	r2, [pc, #20]	@ (8009aa0 <HAL_FLASH_IRQHandler+0x138>)
 8009a8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009a8e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009a90:	4b04      	ldr	r3, [pc, #16]	@ (8009aa4 <HAL_FLASH_IRQHandler+0x13c>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	761a      	strb	r2, [r3, #24]
  }
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	40023c00 	.word	0x40023c00
 8009aa4:	2000317c 	.word	0x2000317c

08009aa8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009ad4:	4b27      	ldr	r3, [pc, #156]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f003 0310 	and.w	r3, r3, #16
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d008      	beq.n	8009af2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009ae0:	4b25      	ldr	r3, [pc, #148]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	f043 0310 	orr.w	r3, r3, #16
 8009ae8:	4a23      	ldr	r2, [pc, #140]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009aea:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009aec:	4b21      	ldr	r3, [pc, #132]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009aee:	2210      	movs	r2, #16
 8009af0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009af2:	4b20      	ldr	r3, [pc, #128]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	f003 0320 	and.w	r3, r3, #32
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d008      	beq.n	8009b10 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009afe:	4b1e      	ldr	r3, [pc, #120]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	f043 0308 	orr.w	r3, r3, #8
 8009b06:	4a1c      	ldr	r2, [pc, #112]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b08:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b0c:	2220      	movs	r2, #32
 8009b0e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009b10:	4b18      	ldr	r3, [pc, #96]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d008      	beq.n	8009b2e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009b1c:	4b16      	ldr	r3, [pc, #88]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	f043 0304 	orr.w	r3, r3, #4
 8009b24:	4a14      	ldr	r2, [pc, #80]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009b28:	4b12      	ldr	r3, [pc, #72]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b2a:	2240      	movs	r2, #64	@ 0x40
 8009b2c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009b2e:	4b11      	ldr	r3, [pc, #68]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d008      	beq.n	8009b4c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f043 0302 	orr.w	r3, r3, #2
 8009b42:	4a0d      	ldr	r2, [pc, #52]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b44:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009b46:	4b0b      	ldr	r3, [pc, #44]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b48:	2280      	movs	r2, #128	@ 0x80
 8009b4a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009b4c:	4b09      	ldr	r3, [pc, #36]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f003 0302 	and.w	r3, r3, #2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d008      	beq.n	8009b6a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009b58:	4b07      	ldr	r3, [pc, #28]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	f043 0320 	orr.w	r3, r3, #32
 8009b60:	4a05      	ldr	r2, [pc, #20]	@ (8009b78 <FLASH_SetErrorCode+0xa8>)
 8009b62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009b64:	4b03      	ldr	r3, [pc, #12]	@ (8009b74 <FLASH_SetErrorCode+0xa4>)
 8009b66:	2202      	movs	r2, #2
 8009b68:	60da      	str	r2, [r3, #12]
  }
}
 8009b6a:	bf00      	nop
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr
 8009b74:	40023c00 	.word	0x40023c00
 8009b78:	2000317c 	.word	0x2000317c

08009b7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	e010      	b.n	8009bba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d103      	bne.n	8009ba6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009b9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e009      	b.n	8009bba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d103      	bne.n	8009bb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009bac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bb0:	60fb      	str	r3, [r7, #12]
 8009bb2:	e002      	b.n	8009bba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009bb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8009bb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009bba:	4b13      	ldr	r3, [pc, #76]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bbc:	691b      	ldr	r3, [r3, #16]
 8009bbe:	4a12      	ldr	r2, [pc, #72]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8009bc6:	4b10      	ldr	r3, [pc, #64]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bc8:	691a      	ldr	r2, [r3, #16]
 8009bca:	490f      	ldr	r1, [pc, #60]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bd4:	691b      	ldr	r3, [r3, #16]
 8009bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bd8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009bdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8009bde:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009be0:	691a      	ldr	r2, [r3, #16]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	4313      	orrs	r3, r2
 8009be8:	4a07      	ldr	r2, [pc, #28]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bea:	f043 0302 	orr.w	r3, r3, #2
 8009bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8009bf0:	4b05      	ldr	r3, [pc, #20]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	4a04      	ldr	r2, [pc, #16]	@ (8009c08 <FLASH_Erase_Sector+0x8c>)
 8009bf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bfa:	6113      	str	r3, [r2, #16]
}
 8009bfc:	bf00      	nop
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	40023c00 	.word	0x40023c00

08009c0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8009c10:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d017      	beq.n	8009c4c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1c      	ldr	r2, [pc, #112]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c22:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c26:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8009c28:	4b1a      	ldr	r3, [pc, #104]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a19      	ldr	r2, [pc, #100]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	4b17      	ldr	r3, [pc, #92]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a16      	ldr	r2, [pc, #88]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c3e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c40:	4b14      	ldr	r3, [pc, #80]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a13      	ldr	r2, [pc, #76]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c4a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009c4c:	4b11      	ldr	r3, [pc, #68]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d017      	beq.n	8009c88 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8009c58:	4b0e      	ldr	r3, [pc, #56]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c62:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009c64:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a0a      	ldr	r2, [pc, #40]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	4b08      	ldr	r3, [pc, #32]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a07      	ldr	r2, [pc, #28]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c7a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c7c:	4b05      	ldr	r3, [pc, #20]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a04      	ldr	r2, [pc, #16]	@ (8009c94 <FLASH_FlushCaches+0x88>)
 8009c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009c86:	6013      	str	r3, [r2, #0]
  }
}
 8009c88:	bf00      	nop
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	40023c00 	.word	0x40023c00

08009c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b089      	sub	sp, #36	@ 0x24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009caa:	2300      	movs	r3, #0
 8009cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009cae:	2300      	movs	r3, #0
 8009cb0:	61fb      	str	r3, [r7, #28]
 8009cb2:	e16b      	b.n	8009f8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	f040 815a 	bne.w	8009f86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f003 0303 	and.w	r3, r3, #3
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d005      	beq.n	8009cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d130      	bne.n	8009d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	2203      	movs	r2, #3
 8009cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cfa:	43db      	mvns	r3, r3
 8009cfc:	69ba      	ldr	r2, [r7, #24]
 8009cfe:	4013      	ands	r3, r2
 8009d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d20:	2201      	movs	r2, #1
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	fa02 f303 	lsl.w	r3, r2, r3
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	091b      	lsrs	r3, r3, #4
 8009d36:	f003 0201 	and.w	r2, r3, #1
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f003 0303 	and.w	r3, r3, #3
 8009d54:	2b03      	cmp	r3, #3
 8009d56:	d017      	beq.n	8009d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	2203      	movs	r2, #3
 8009d64:	fa02 f303 	lsl.w	r3, r2, r3
 8009d68:	43db      	mvns	r3, r3
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	4013      	ands	r3, r2
 8009d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689a      	ldr	r2, [r3, #8]
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	005b      	lsls	r3, r3, #1
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	69ba      	ldr	r2, [r7, #24]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	69ba      	ldr	r2, [r7, #24]
 8009d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f003 0303 	and.w	r3, r3, #3
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d123      	bne.n	8009ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	08da      	lsrs	r2, r3, #3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	3208      	adds	r2, #8
 8009d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f003 0307 	and.w	r3, r3, #7
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	220f      	movs	r2, #15
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	43db      	mvns	r3, r3
 8009db2:	69ba      	ldr	r2, [r7, #24]
 8009db4:	4013      	ands	r3, r2
 8009db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	08da      	lsrs	r2, r3, #3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3208      	adds	r2, #8
 8009dd6:	69b9      	ldr	r1, [r7, #24]
 8009dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	2203      	movs	r2, #3
 8009de8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dec:	43db      	mvns	r3, r3
 8009dee:	69ba      	ldr	r2, [r7, #24]
 8009df0:	4013      	ands	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f003 0203 	and.w	r2, r3, #3
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 80b4 	beq.w	8009f86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
 8009e22:	4b60      	ldr	r3, [pc, #384]	@ (8009fa4 <HAL_GPIO_Init+0x30c>)
 8009e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e26:	4a5f      	ldr	r2, [pc, #380]	@ (8009fa4 <HAL_GPIO_Init+0x30c>)
 8009e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8009e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8009fa4 <HAL_GPIO_Init+0x30c>)
 8009e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8009fa8 <HAL_GPIO_Init+0x310>)
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	089b      	lsrs	r3, r3, #2
 8009e40:	3302      	adds	r3, #2
 8009e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	f003 0303 	and.w	r3, r3, #3
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	220f      	movs	r2, #15
 8009e52:	fa02 f303 	lsl.w	r3, r2, r3
 8009e56:	43db      	mvns	r3, r3
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a52      	ldr	r2, [pc, #328]	@ (8009fac <HAL_GPIO_Init+0x314>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d02b      	beq.n	8009ebe <HAL_GPIO_Init+0x226>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a51      	ldr	r2, [pc, #324]	@ (8009fb0 <HAL_GPIO_Init+0x318>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d025      	beq.n	8009eba <HAL_GPIO_Init+0x222>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a50      	ldr	r2, [pc, #320]	@ (8009fb4 <HAL_GPIO_Init+0x31c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d01f      	beq.n	8009eb6 <HAL_GPIO_Init+0x21e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a4f      	ldr	r2, [pc, #316]	@ (8009fb8 <HAL_GPIO_Init+0x320>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d019      	beq.n	8009eb2 <HAL_GPIO_Init+0x21a>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a4e      	ldr	r2, [pc, #312]	@ (8009fbc <HAL_GPIO_Init+0x324>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d013      	beq.n	8009eae <HAL_GPIO_Init+0x216>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a4d      	ldr	r2, [pc, #308]	@ (8009fc0 <HAL_GPIO_Init+0x328>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00d      	beq.n	8009eaa <HAL_GPIO_Init+0x212>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a4c      	ldr	r2, [pc, #304]	@ (8009fc4 <HAL_GPIO_Init+0x32c>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d007      	beq.n	8009ea6 <HAL_GPIO_Init+0x20e>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a4b      	ldr	r2, [pc, #300]	@ (8009fc8 <HAL_GPIO_Init+0x330>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d101      	bne.n	8009ea2 <HAL_GPIO_Init+0x20a>
 8009e9e:	2307      	movs	r3, #7
 8009ea0:	e00e      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009ea2:	2308      	movs	r3, #8
 8009ea4:	e00c      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009ea6:	2306      	movs	r3, #6
 8009ea8:	e00a      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009eaa:	2305      	movs	r3, #5
 8009eac:	e008      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009eae:	2304      	movs	r3, #4
 8009eb0:	e006      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e004      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	e002      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <HAL_GPIO_Init+0x228>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	69fa      	ldr	r2, [r7, #28]
 8009ec2:	f002 0203 	and.w	r2, r2, #3
 8009ec6:	0092      	lsls	r2, r2, #2
 8009ec8:	4093      	lsls	r3, r2
 8009eca:	69ba      	ldr	r2, [r7, #24]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ed0:	4935      	ldr	r1, [pc, #212]	@ (8009fa8 <HAL_GPIO_Init+0x310>)
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	089b      	lsrs	r3, r3, #2
 8009ed6:	3302      	adds	r3, #2
 8009ed8:	69ba      	ldr	r2, [r7, #24]
 8009eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ede:	4b3b      	ldr	r3, [pc, #236]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	43db      	mvns	r3, r3
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	4013      	ands	r3, r2
 8009eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009efa:	69ba      	ldr	r2, [r7, #24]
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009f02:	4a32      	ldr	r2, [pc, #200]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009f08:	4b30      	ldr	r3, [pc, #192]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f0a:	68db      	ldr	r3, [r3, #12]
 8009f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	43db      	mvns	r3, r3
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	4013      	ands	r3, r2
 8009f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d003      	beq.n	8009f2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009f2c:	4a27      	ldr	r2, [pc, #156]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009f32:	4b26      	ldr	r3, [pc, #152]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	43db      	mvns	r3, r3
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	4013      	ands	r3, r2
 8009f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d003      	beq.n	8009f56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009f4e:	69ba      	ldr	r2, [r7, #24]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	4313      	orrs	r3, r2
 8009f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f56:	4a1d      	ldr	r2, [pc, #116]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	43db      	mvns	r3, r3
 8009f66:	69ba      	ldr	r2, [r7, #24]
 8009f68:	4013      	ands	r3, r2
 8009f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009f78:	69ba      	ldr	r2, [r7, #24]
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009f80:	4a12      	ldr	r2, [pc, #72]	@ (8009fcc <HAL_GPIO_Init+0x334>)
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	61fb      	str	r3, [r7, #28]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	f67f ae90 	bls.w	8009cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop
 8009f98:	3724      	adds	r7, #36	@ 0x24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	40023800 	.word	0x40023800
 8009fa8:	40013800 	.word	0x40013800
 8009fac:	40020000 	.word	0x40020000
 8009fb0:	40020400 	.word	0x40020400
 8009fb4:	40020800 	.word	0x40020800
 8009fb8:	40020c00 	.word	0x40020c00
 8009fbc:	40021000 	.word	0x40021000
 8009fc0:	40021400 	.word	0x40021400
 8009fc4:	40021800 	.word	0x40021800
 8009fc8:	40021c00 	.word	0x40021c00
 8009fcc:	40013c00 	.word	0x40013c00

08009fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	887b      	ldrh	r3, [r7, #2]
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	73fb      	strb	r3, [r7, #15]
 8009fec:	e001      	b.n	8009ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	807b      	strh	r3, [r7, #2]
 800a00c:	4613      	mov	r3, r2
 800a00e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a010:	787b      	ldrb	r3, [r7, #1]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a016:	887a      	ldrh	r2, [r7, #2]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a01c:	e003      	b.n	800a026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a01e:	887b      	ldrh	r3, [r7, #2]
 800a020:	041a      	lsls	r2, r3, #16
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	619a      	str	r2, [r3, #24]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
	...

0800a034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a03e:	4b08      	ldr	r3, [pc, #32]	@ (800a060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	4013      	ands	r3, r2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a04a:	4a05      	ldr	r2, [pc, #20]	@ (800a060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	4618      	mov	r0, r3
 800a054:	f7f9 f9a0 	bl	8003398 <HAL_GPIO_EXTI_Callback>
  }
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40013c00 	.word	0x40013c00

0800a064 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af02      	add	r7, sp, #8
 800a06a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e059      	b.n	800a12a <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d106      	bne.n	800a096 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f7fe fa49 	bl	8008528 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2203      	movs	r2, #3
 800a09a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a0a4:	d102      	bne.n	800a0ac <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f003 fceb 	bl	800da8c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	7c1a      	ldrb	r2, [r3, #16]
 800a0be:	f88d 2000 	strb.w	r2, [sp]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0c6:	f003 fc7d 	bl	800d9c4 <USB_CoreInit>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e026      	b.n	800a12a <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f003 fce3 	bl	800daae <USB_SetCurrentMode>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e017      	b.n	800a12a <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	7c1a      	ldrb	r2, [r3, #16]
 800a102:	f88d 2000 	strb.w	r2, [sp]
 800a106:	3304      	adds	r3, #4
 800a108:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a10a:	f003 fdbb 	bl	800dc84 <USB_HostInit>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e004      	b.n	800a12a <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
	...

0800a134 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800a138:	4b06      	ldr	r3, [pc, #24]	@ (800a154 <HAL_PWR_PVD_IRQHandler+0x20>)
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800a144:	f000 f808 	bl	800a158 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800a148:	4b02      	ldr	r3, [pc, #8]	@ (800a154 <HAL_PWR_PVD_IRQHandler+0x20>)
 800a14a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a14e:	615a      	str	r2, [r3, #20]
  }
}
 800a150:	bf00      	nop
 800a152:	bd80      	pop	{r7, pc}
 800a154:	40013c00 	.word	0x40013c00

0800a158 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800a15c:	bf00      	nop
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	e267      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	2b00      	cmp	r3, #0
 800a184:	d075      	beq.n	800a272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a186:	4b88      	ldr	r3, [pc, #544]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	f003 030c 	and.w	r3, r3, #12
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d00c      	beq.n	800a1ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a192:	4b85      	ldr	r3, [pc, #532]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a19a:	2b08      	cmp	r3, #8
 800a19c:	d112      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a19e:	4b82      	ldr	r3, [pc, #520]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a1a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1aa:	d10b      	bne.n	800a1c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1ac:	4b7e      	ldr	r3, [pc, #504]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d05b      	beq.n	800a270 <HAL_RCC_OscConfig+0x108>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d157      	bne.n	800a270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e242      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1cc:	d106      	bne.n	800a1dc <HAL_RCC_OscConfig+0x74>
 800a1ce:	4b76      	ldr	r3, [pc, #472]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a75      	ldr	r2, [pc, #468]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1d8:	6013      	str	r3, [r2, #0]
 800a1da:	e01d      	b.n	800a218 <HAL_RCC_OscConfig+0xb0>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1e4:	d10c      	bne.n	800a200 <HAL_RCC_OscConfig+0x98>
 800a1e6:	4b70      	ldr	r3, [pc, #448]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a6f      	ldr	r2, [pc, #444]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	4b6d      	ldr	r3, [pc, #436]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a6c      	ldr	r2, [pc, #432]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a1f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1fc:	6013      	str	r3, [r2, #0]
 800a1fe:	e00b      	b.n	800a218 <HAL_RCC_OscConfig+0xb0>
 800a200:	4b69      	ldr	r3, [pc, #420]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a68      	ldr	r2, [pc, #416]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a20a:	6013      	str	r3, [r2, #0]
 800a20c:	4b66      	ldr	r3, [pc, #408]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a65      	ldr	r2, [pc, #404]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d013      	beq.n	800a248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a220:	f7fe fa5e 	bl	80086e0 <HAL_GetTick>
 800a224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a226:	e008      	b.n	800a23a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a228:	f7fe fa5a 	bl	80086e0 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	2b64      	cmp	r3, #100	@ 0x64
 800a234:	d901      	bls.n	800a23a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	e207      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a23a:	4b5b      	ldr	r3, [pc, #364]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a242:	2b00      	cmp	r3, #0
 800a244:	d0f0      	beq.n	800a228 <HAL_RCC_OscConfig+0xc0>
 800a246:	e014      	b.n	800a272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a248:	f7fe fa4a 	bl	80086e0 <HAL_GetTick>
 800a24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a24e:	e008      	b.n	800a262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a250:	f7fe fa46 	bl	80086e0 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b64      	cmp	r3, #100	@ 0x64
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e1f3      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a262:	4b51      	ldr	r3, [pc, #324]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1f0      	bne.n	800a250 <HAL_RCC_OscConfig+0xe8>
 800a26e:	e000      	b.n	800a272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d063      	beq.n	800a346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a27e:	4b4a      	ldr	r3, [pc, #296]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 030c 	and.w	r3, r3, #12
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00b      	beq.n	800a2a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a28a:	4b47      	ldr	r3, [pc, #284]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a292:	2b08      	cmp	r3, #8
 800a294:	d11c      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a296:	4b44      	ldr	r3, [pc, #272]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d116      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2a2:	4b41      	ldr	r3, [pc, #260]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0302 	and.w	r3, r3, #2
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <HAL_RCC_OscConfig+0x152>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d001      	beq.n	800a2ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e1c7      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ba:	4b3b      	ldr	r3, [pc, #236]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	4937      	ldr	r1, [pc, #220]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ce:	e03a      	b.n	800a346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d020      	beq.n	800a31a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2d8:	4b34      	ldr	r3, [pc, #208]	@ (800a3ac <HAL_RCC_OscConfig+0x244>)
 800a2da:	2201      	movs	r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2de:	f7fe f9ff 	bl	80086e0 <HAL_GetTick>
 800a2e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2e4:	e008      	b.n	800a2f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2e6:	f7fe f9fb 	bl	80086e0 <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d901      	bls.n	800a2f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e1a8      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2f8:	4b2b      	ldr	r3, [pc, #172]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d0f0      	beq.n	800a2e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a304:	4b28      	ldr	r3, [pc, #160]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	4925      	ldr	r1, [pc, #148]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a314:	4313      	orrs	r3, r2
 800a316:	600b      	str	r3, [r1, #0]
 800a318:	e015      	b.n	800a346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a31a:	4b24      	ldr	r3, [pc, #144]	@ (800a3ac <HAL_RCC_OscConfig+0x244>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a320:	f7fe f9de 	bl	80086e0 <HAL_GetTick>
 800a324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a326:	e008      	b.n	800a33a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a328:	f7fe f9da 	bl	80086e0 <HAL_GetTick>
 800a32c:	4602      	mov	r2, r0
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	2b02      	cmp	r3, #2
 800a334:	d901      	bls.n	800a33a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e187      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a33a:	4b1b      	ldr	r3, [pc, #108]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0302 	and.w	r3, r3, #2
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1f0      	bne.n	800a328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0308 	and.w	r3, r3, #8
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d036      	beq.n	800a3c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	695b      	ldr	r3, [r3, #20]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d016      	beq.n	800a388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a35a:	4b15      	ldr	r3, [pc, #84]	@ (800a3b0 <HAL_RCC_OscConfig+0x248>)
 800a35c:	2201      	movs	r2, #1
 800a35e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a360:	f7fe f9be 	bl	80086e0 <HAL_GetTick>
 800a364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a366:	e008      	b.n	800a37a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a368:	f7fe f9ba 	bl	80086e0 <HAL_GetTick>
 800a36c:	4602      	mov	r2, r0
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	1ad3      	subs	r3, r2, r3
 800a372:	2b02      	cmp	r3, #2
 800a374:	d901      	bls.n	800a37a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e167      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a37a:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a8 <HAL_RCC_OscConfig+0x240>)
 800a37c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0f0      	beq.n	800a368 <HAL_RCC_OscConfig+0x200>
 800a386:	e01b      	b.n	800a3c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a388:	4b09      	ldr	r3, [pc, #36]	@ (800a3b0 <HAL_RCC_OscConfig+0x248>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a38e:	f7fe f9a7 	bl	80086e0 <HAL_GetTick>
 800a392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a394:	e00e      	b.n	800a3b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a396:	f7fe f9a3 	bl	80086e0 <HAL_GetTick>
 800a39a:	4602      	mov	r2, r0
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	1ad3      	subs	r3, r2, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d907      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e150      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
 800a3a8:	40023800 	.word	0x40023800
 800a3ac:	42470000 	.word	0x42470000
 800a3b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3b4:	4b88      	ldr	r3, [pc, #544]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a3b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1ea      	bne.n	800a396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f003 0304 	and.w	r3, r3, #4
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8097 	beq.w	800a4fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3d2:	4b81      	ldr	r3, [pc, #516]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10f      	bne.n	800a3fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60bb      	str	r3, [r7, #8]
 800a3e2:	4b7d      	ldr	r3, [pc, #500]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3e6:	4a7c      	ldr	r2, [pc, #496]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a3e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3ee:	4b7a      	ldr	r3, [pc, #488]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a3f6:	60bb      	str	r3, [r7, #8]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3fe:	4b77      	ldr	r3, [pc, #476]	@ (800a5dc <HAL_RCC_OscConfig+0x474>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a406:	2b00      	cmp	r3, #0
 800a408:	d118      	bne.n	800a43c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a40a:	4b74      	ldr	r3, [pc, #464]	@ (800a5dc <HAL_RCC_OscConfig+0x474>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a73      	ldr	r2, [pc, #460]	@ (800a5dc <HAL_RCC_OscConfig+0x474>)
 800a410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a416:	f7fe f963 	bl	80086e0 <HAL_GetTick>
 800a41a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a41c:	e008      	b.n	800a430 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a41e:	f7fe f95f 	bl	80086e0 <HAL_GetTick>
 800a422:	4602      	mov	r2, r0
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d901      	bls.n	800a430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a42c:	2303      	movs	r3, #3
 800a42e:	e10c      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a430:	4b6a      	ldr	r3, [pc, #424]	@ (800a5dc <HAL_RCC_OscConfig+0x474>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0f0      	beq.n	800a41e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d106      	bne.n	800a452 <HAL_RCC_OscConfig+0x2ea>
 800a444:	4b64      	ldr	r3, [pc, #400]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a448:	4a63      	ldr	r2, [pc, #396]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a44a:	f043 0301 	orr.w	r3, r3, #1
 800a44e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a450:	e01c      	b.n	800a48c <HAL_RCC_OscConfig+0x324>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b05      	cmp	r3, #5
 800a458:	d10c      	bne.n	800a474 <HAL_RCC_OscConfig+0x30c>
 800a45a:	4b5f      	ldr	r3, [pc, #380]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a45c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a45e:	4a5e      	ldr	r2, [pc, #376]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a460:	f043 0304 	orr.w	r3, r3, #4
 800a464:	6713      	str	r3, [r2, #112]	@ 0x70
 800a466:	4b5c      	ldr	r3, [pc, #368]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a46a:	4a5b      	ldr	r2, [pc, #364]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a46c:	f043 0301 	orr.w	r3, r3, #1
 800a470:	6713      	str	r3, [r2, #112]	@ 0x70
 800a472:	e00b      	b.n	800a48c <HAL_RCC_OscConfig+0x324>
 800a474:	4b58      	ldr	r3, [pc, #352]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a478:	4a57      	ldr	r2, [pc, #348]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a47a:	f023 0301 	bic.w	r3, r3, #1
 800a47e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a480:	4b55      	ldr	r3, [pc, #340]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a484:	4a54      	ldr	r2, [pc, #336]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a486:	f023 0304 	bic.w	r3, r3, #4
 800a48a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d015      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a494:	f7fe f924 	bl	80086e0 <HAL_GetTick>
 800a498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a49a:	e00a      	b.n	800a4b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a49c:	f7fe f920 	bl	80086e0 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d901      	bls.n	800a4b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	e0cb      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4b2:	4b49      	ldr	r3, [pc, #292]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a4b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0ee      	beq.n	800a49c <HAL_RCC_OscConfig+0x334>
 800a4be:	e014      	b.n	800a4ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4c0:	f7fe f90e 	bl	80086e0 <HAL_GetTick>
 800a4c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4c6:	e00a      	b.n	800a4de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4c8:	f7fe f90a 	bl	80086e0 <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d901      	bls.n	800a4de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e0b5      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4de:	4b3e      	ldr	r3, [pc, #248]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a4e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1ee      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d105      	bne.n	800a4fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4f0:	4b39      	ldr	r3, [pc, #228]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a4f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4f4:	4a38      	ldr	r2, [pc, #224]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a4f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	699b      	ldr	r3, [r3, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 80a1 	beq.w	800a648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a506:	4b34      	ldr	r3, [pc, #208]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a508:	689b      	ldr	r3, [r3, #8]
 800a50a:	f003 030c 	and.w	r3, r3, #12
 800a50e:	2b08      	cmp	r3, #8
 800a510:	d05c      	beq.n	800a5cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	2b02      	cmp	r3, #2
 800a518:	d141      	bne.n	800a59e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a51a:	4b31      	ldr	r3, [pc, #196]	@ (800a5e0 <HAL_RCC_OscConfig+0x478>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a520:	f7fe f8de 	bl	80086e0 <HAL_GetTick>
 800a524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a526:	e008      	b.n	800a53a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a528:	f7fe f8da 	bl	80086e0 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e087      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a53a:	4b27      	ldr	r3, [pc, #156]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1f0      	bne.n	800a528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	69da      	ldr	r2, [r3, #28]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a554:	019b      	lsls	r3, r3, #6
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	085b      	lsrs	r3, r3, #1
 800a55e:	3b01      	subs	r3, #1
 800a560:	041b      	lsls	r3, r3, #16
 800a562:	431a      	orrs	r2, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a568:	061b      	lsls	r3, r3, #24
 800a56a:	491b      	ldr	r1, [pc, #108]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a56c:	4313      	orrs	r3, r2
 800a56e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a570:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e0 <HAL_RCC_OscConfig+0x478>)
 800a572:	2201      	movs	r2, #1
 800a574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a576:	f7fe f8b3 	bl	80086e0 <HAL_GetTick>
 800a57a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a57c:	e008      	b.n	800a590 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a57e:	f7fe f8af 	bl	80086e0 <HAL_GetTick>
 800a582:	4602      	mov	r2, r0
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d901      	bls.n	800a590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a58c:	2303      	movs	r3, #3
 800a58e:	e05c      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a590:	4b11      	ldr	r3, [pc, #68]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0f0      	beq.n	800a57e <HAL_RCC_OscConfig+0x416>
 800a59c:	e054      	b.n	800a648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a59e:	4b10      	ldr	r3, [pc, #64]	@ (800a5e0 <HAL_RCC_OscConfig+0x478>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5a4:	f7fe f89c 	bl	80086e0 <HAL_GetTick>
 800a5a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5aa:	e008      	b.n	800a5be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5ac:	f7fe f898 	bl	80086e0 <HAL_GetTick>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d901      	bls.n	800a5be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e045      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5be:	4b06      	ldr	r3, [pc, #24]	@ (800a5d8 <HAL_RCC_OscConfig+0x470>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f0      	bne.n	800a5ac <HAL_RCC_OscConfig+0x444>
 800a5ca:	e03d      	b.n	800a648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d107      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e038      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
 800a5d8:	40023800 	.word	0x40023800
 800a5dc:	40007000 	.word	0x40007000
 800a5e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a5e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a654 <HAL_RCC_OscConfig+0x4ec>)
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d028      	beq.n	800a644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d121      	bne.n	800a644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d11a      	bne.n	800a644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a614:	4013      	ands	r3, r2
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a61a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d111      	bne.n	800a644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62a:	085b      	lsrs	r3, r3, #1
 800a62c:	3b01      	subs	r3, #1
 800a62e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a630:	429a      	cmp	r2, r3
 800a632:	d107      	bne.n	800a644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a640:	429a      	cmp	r2, r3
 800a642:	d001      	beq.n	800a648 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	40023800 	.word	0x40023800

0800a658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b084      	sub	sp, #16
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e0cc      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a66c:	4b68      	ldr	r3, [pc, #416]	@ (800a810 <HAL_RCC_ClockConfig+0x1b8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	429a      	cmp	r2, r3
 800a678:	d90c      	bls.n	800a694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a67a:	4b65      	ldr	r3, [pc, #404]	@ (800a810 <HAL_RCC_ClockConfig+0x1b8>)
 800a67c:	683a      	ldr	r2, [r7, #0]
 800a67e:	b2d2      	uxtb	r2, r2
 800a680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a682:	4b63      	ldr	r3, [pc, #396]	@ (800a810 <HAL_RCC_ClockConfig+0x1b8>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d001      	beq.n	800a694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e0b8      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d020      	beq.n	800a6e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6ac:	4b59      	ldr	r3, [pc, #356]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	4a58      	ldr	r2, [pc, #352]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a6b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0308 	and.w	r3, r3, #8
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6c4:	4b53      	ldr	r3, [pc, #332]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	4a52      	ldr	r2, [pc, #328]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a6ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6d0:	4b50      	ldr	r3, [pc, #320]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	494d      	ldr	r1, [pc, #308]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d044      	beq.n	800a778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d107      	bne.n	800a706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6f6:	4b47      	ldr	r3, [pc, #284]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d119      	bne.n	800a736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e07f      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d003      	beq.n	800a716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a712:	2b03      	cmp	r3, #3
 800a714:	d107      	bne.n	800a726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a716:	4b3f      	ldr	r3, [pc, #252]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d109      	bne.n	800a736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e06f      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a726:	4b3b      	ldr	r3, [pc, #236]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0302 	and.w	r3, r3, #2
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e067      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a736:	4b37      	ldr	r3, [pc, #220]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	f023 0203 	bic.w	r2, r3, #3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	4934      	ldr	r1, [pc, #208]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a744:	4313      	orrs	r3, r2
 800a746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a748:	f7fd ffca 	bl	80086e0 <HAL_GetTick>
 800a74c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a74e:	e00a      	b.n	800a766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a750:	f7fd ffc6 	bl	80086e0 <HAL_GetTick>
 800a754:	4602      	mov	r2, r0
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a75e:	4293      	cmp	r3, r2
 800a760:	d901      	bls.n	800a766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e04f      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a766:	4b2b      	ldr	r3, [pc, #172]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	f003 020c 	and.w	r2, r3, #12
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	429a      	cmp	r2, r3
 800a776:	d1eb      	bne.n	800a750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a778:	4b25      	ldr	r3, [pc, #148]	@ (800a810 <HAL_RCC_ClockConfig+0x1b8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d20c      	bcs.n	800a7a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a786:	4b22      	ldr	r3, [pc, #136]	@ (800a810 <HAL_RCC_ClockConfig+0x1b8>)
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a78e:	4b20      	ldr	r3, [pc, #128]	@ (800a810 <HAL_RCC_ClockConfig+0x1b8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d001      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	e032      	b.n	800a806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d008      	beq.n	800a7be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7ac:	4b19      	ldr	r3, [pc, #100]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	4916      	ldr	r1, [pc, #88]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0308 	and.w	r3, r3, #8
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7ca:	4b12      	ldr	r3, [pc, #72]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	00db      	lsls	r3, r3, #3
 800a7d8:	490e      	ldr	r1, [pc, #56]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a7de:	f000 f821 	bl	800a824 <HAL_RCC_GetSysClockFreq>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <HAL_RCC_ClockConfig+0x1bc>)
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	091b      	lsrs	r3, r3, #4
 800a7ea:	f003 030f 	and.w	r3, r3, #15
 800a7ee:	490a      	ldr	r1, [pc, #40]	@ (800a818 <HAL_RCC_ClockConfig+0x1c0>)
 800a7f0:	5ccb      	ldrb	r3, [r1, r3]
 800a7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f6:	4a09      	ldr	r2, [pc, #36]	@ (800a81c <HAL_RCC_ClockConfig+0x1c4>)
 800a7f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a7fa:	4b09      	ldr	r3, [pc, #36]	@ (800a820 <HAL_RCC_ClockConfig+0x1c8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fd ff2a 	bl	8008658 <HAL_InitTick>

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	40023c00 	.word	0x40023c00
 800a814:	40023800 	.word	0x40023800
 800a818:	08017358 	.word	0x08017358
 800a81c:	20000148 	.word	0x20000148
 800a820:	2000014c 	.word	0x2000014c

0800a824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a828:	b094      	sub	sp, #80	@ 0x50
 800a82a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a830:	2300      	movs	r3, #0
 800a832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a834:	2300      	movs	r3, #0
 800a836:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800a838:	2300      	movs	r3, #0
 800a83a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a83c:	4b79      	ldr	r3, [pc, #484]	@ (800aa24 <HAL_RCC_GetSysClockFreq+0x200>)
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	f003 030c 	and.w	r3, r3, #12
 800a844:	2b08      	cmp	r3, #8
 800a846:	d00d      	beq.n	800a864 <HAL_RCC_GetSysClockFreq+0x40>
 800a848:	2b08      	cmp	r3, #8
 800a84a:	f200 80e1 	bhi.w	800aa10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0x34>
 800a852:	2b04      	cmp	r3, #4
 800a854:	d003      	beq.n	800a85e <HAL_RCC_GetSysClockFreq+0x3a>
 800a856:	e0db      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a858:	4b73      	ldr	r3, [pc, #460]	@ (800aa28 <HAL_RCC_GetSysClockFreq+0x204>)
 800a85a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800a85c:	e0db      	b.n	800aa16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a85e:	4b72      	ldr	r3, [pc, #456]	@ (800aa28 <HAL_RCC_GetSysClockFreq+0x204>)
 800a860:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a862:	e0d8      	b.n	800aa16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a864:	4b6f      	ldr	r3, [pc, #444]	@ (800aa24 <HAL_RCC_GetSysClockFreq+0x200>)
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a86c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a86e:	4b6d      	ldr	r3, [pc, #436]	@ (800aa24 <HAL_RCC_GetSysClockFreq+0x200>)
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d063      	beq.n	800a942 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a87a:	4b6a      	ldr	r3, [pc, #424]	@ (800aa24 <HAL_RCC_GetSysClockFreq+0x200>)
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	099b      	lsrs	r3, r3, #6
 800a880:	2200      	movs	r2, #0
 800a882:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a884:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88c:	633b      	str	r3, [r7, #48]	@ 0x30
 800a88e:	2300      	movs	r3, #0
 800a890:	637b      	str	r3, [r7, #52]	@ 0x34
 800a892:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a896:	4622      	mov	r2, r4
 800a898:	462b      	mov	r3, r5
 800a89a:	f04f 0000 	mov.w	r0, #0
 800a89e:	f04f 0100 	mov.w	r1, #0
 800a8a2:	0159      	lsls	r1, r3, #5
 800a8a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a8a8:	0150      	lsls	r0, r2, #5
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	1a51      	subs	r1, r2, r1
 800a8b2:	6139      	str	r1, [r7, #16]
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	eb63 0301 	sbc.w	r3, r3, r1
 800a8ba:	617b      	str	r3, [r7, #20]
 800a8bc:	f04f 0200 	mov.w	r2, #0
 800a8c0:	f04f 0300 	mov.w	r3, #0
 800a8c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8c8:	4659      	mov	r1, fp
 800a8ca:	018b      	lsls	r3, r1, #6
 800a8cc:	4651      	mov	r1, sl
 800a8ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a8d2:	4651      	mov	r1, sl
 800a8d4:	018a      	lsls	r2, r1, #6
 800a8d6:	4651      	mov	r1, sl
 800a8d8:	ebb2 0801 	subs.w	r8, r2, r1
 800a8dc:	4659      	mov	r1, fp
 800a8de:	eb63 0901 	sbc.w	r9, r3, r1
 800a8e2:	f04f 0200 	mov.w	r2, #0
 800a8e6:	f04f 0300 	mov.w	r3, #0
 800a8ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8f6:	4690      	mov	r8, r2
 800a8f8:	4699      	mov	r9, r3
 800a8fa:	4623      	mov	r3, r4
 800a8fc:	eb18 0303 	adds.w	r3, r8, r3
 800a900:	60bb      	str	r3, [r7, #8]
 800a902:	462b      	mov	r3, r5
 800a904:	eb49 0303 	adc.w	r3, r9, r3
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	f04f 0200 	mov.w	r2, #0
 800a90e:	f04f 0300 	mov.w	r3, #0
 800a912:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a916:	4629      	mov	r1, r5
 800a918:	028b      	lsls	r3, r1, #10
 800a91a:	4621      	mov	r1, r4
 800a91c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a920:	4621      	mov	r1, r4
 800a922:	028a      	lsls	r2, r1, #10
 800a924:	4610      	mov	r0, r2
 800a926:	4619      	mov	r1, r3
 800a928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a92a:	2200      	movs	r2, #0
 800a92c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a92e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a930:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a934:	f7f6 f9b8 	bl	8000ca8 <__aeabi_uldivmod>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4613      	mov	r3, r2
 800a93e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a940:	e058      	b.n	800a9f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a942:	4b38      	ldr	r3, [pc, #224]	@ (800aa24 <HAL_RCC_GetSysClockFreq+0x200>)
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	099b      	lsrs	r3, r3, #6
 800a948:	2200      	movs	r2, #0
 800a94a:	4618      	mov	r0, r3
 800a94c:	4611      	mov	r1, r2
 800a94e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a952:	623b      	str	r3, [r7, #32]
 800a954:	2300      	movs	r3, #0
 800a956:	627b      	str	r3, [r7, #36]	@ 0x24
 800a958:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a95c:	4642      	mov	r2, r8
 800a95e:	464b      	mov	r3, r9
 800a960:	f04f 0000 	mov.w	r0, #0
 800a964:	f04f 0100 	mov.w	r1, #0
 800a968:	0159      	lsls	r1, r3, #5
 800a96a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a96e:	0150      	lsls	r0, r2, #5
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4641      	mov	r1, r8
 800a976:	ebb2 0a01 	subs.w	sl, r2, r1
 800a97a:	4649      	mov	r1, r9
 800a97c:	eb63 0b01 	sbc.w	fp, r3, r1
 800a980:	f04f 0200 	mov.w	r2, #0
 800a984:	f04f 0300 	mov.w	r3, #0
 800a988:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a98c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a990:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a994:	ebb2 040a 	subs.w	r4, r2, sl
 800a998:	eb63 050b 	sbc.w	r5, r3, fp
 800a99c:	f04f 0200 	mov.w	r2, #0
 800a9a0:	f04f 0300 	mov.w	r3, #0
 800a9a4:	00eb      	lsls	r3, r5, #3
 800a9a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a9aa:	00e2      	lsls	r2, r4, #3
 800a9ac:	4614      	mov	r4, r2
 800a9ae:	461d      	mov	r5, r3
 800a9b0:	4643      	mov	r3, r8
 800a9b2:	18e3      	adds	r3, r4, r3
 800a9b4:	603b      	str	r3, [r7, #0]
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	eb45 0303 	adc.w	r3, r5, r3
 800a9bc:	607b      	str	r3, [r7, #4]
 800a9be:	f04f 0200 	mov.w	r2, #0
 800a9c2:	f04f 0300 	mov.w	r3, #0
 800a9c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	028b      	lsls	r3, r1, #10
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	028a      	lsls	r2, r1, #10
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9de:	2200      	movs	r2, #0
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	61fa      	str	r2, [r7, #28]
 800a9e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9e8:	f7f6 f95e 	bl	8000ca8 <__aeabi_uldivmod>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa24 <HAL_RCC_GetSysClockFreq+0x200>)
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	0c1b      	lsrs	r3, r3, #16
 800a9fa:	f003 0303 	and.w	r3, r3, #3
 800a9fe:	3301      	adds	r3, #1
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800aa04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aa06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa08:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aa0e:	e002      	b.n	800aa16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa10:	4b05      	ldr	r3, [pc, #20]	@ (800aa28 <HAL_RCC_GetSysClockFreq+0x204>)
 800aa12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800aa14:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3750      	adds	r7, #80	@ 0x50
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa22:	bf00      	nop
 800aa24:	40023800 	.word	0x40023800
 800aa28:	00f42400 	.word	0x00f42400

0800aa2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa30:	4b03      	ldr	r3, [pc, #12]	@ (800aa40 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa32:	681b      	ldr	r3, [r3, #0]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	20000148 	.word	0x20000148

0800aa44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa48:	f7ff fff0 	bl	800aa2c <HAL_RCC_GetHCLKFreq>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	4b05      	ldr	r3, [pc, #20]	@ (800aa64 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	0a9b      	lsrs	r3, r3, #10
 800aa54:	f003 0307 	and.w	r3, r3, #7
 800aa58:	4903      	ldr	r1, [pc, #12]	@ (800aa68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa5a:	5ccb      	ldrb	r3, [r1, r3]
 800aa5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	40023800 	.word	0x40023800
 800aa68:	08017368 	.word	0x08017368

0800aa6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa70:	f7ff ffdc 	bl	800aa2c <HAL_RCC_GetHCLKFreq>
 800aa74:	4602      	mov	r2, r0
 800aa76:	4b05      	ldr	r3, [pc, #20]	@ (800aa8c <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	0b5b      	lsrs	r3, r3, #13
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	4903      	ldr	r1, [pc, #12]	@ (800aa90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa82:	5ccb      	ldrb	r3, [r1, r3]
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	40023800 	.word	0x40023800
 800aa90:	08017368 	.word	0x08017368

0800aa94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e07b      	b.n	800ab9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d108      	bne.n	800aac0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aab6:	d009      	beq.n	800aacc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	61da      	str	r2, [r3, #28]
 800aabe:	e005      	b.n	800aacc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2200      	movs	r2, #0
 800aac4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fc fc3c 	bl	8007364 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2202      	movs	r2, #2
 800aaf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ab14:	431a      	orrs	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab1e:	431a      	orrs	r2, r3
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	f003 0301 	and.w	r3, r3, #1
 800ab32:	431a      	orrs	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab50:	ea42 0103 	orr.w	r1, r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	0c1b      	lsrs	r3, r3, #16
 800ab6a:	f003 0104 	and.w	r1, r3, #4
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab72:	f003 0210 	and.w	r2, r3, #16
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b088      	sub	sp, #32
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	603b      	str	r3, [r7, #0]
 800abb2:	4613      	mov	r3, r2
 800abb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d101      	bne.n	800abc8 <HAL_SPI_Transmit+0x22>
 800abc4:	2302      	movs	r3, #2
 800abc6:	e12d      	b.n	800ae24 <HAL_SPI_Transmit+0x27e>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2201      	movs	r2, #1
 800abcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abd0:	f7fd fd86 	bl	80086e0 <HAL_GetTick>
 800abd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d002      	beq.n	800abec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800abe6:	2302      	movs	r3, #2
 800abe8:	77fb      	strb	r3, [r7, #31]
    goto error;
 800abea:	e116      	b.n	800ae1a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d002      	beq.n	800abf8 <HAL_SPI_Transmit+0x52>
 800abf2:	88fb      	ldrh	r3, [r7, #6]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d102      	bne.n	800abfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 800abfc:	e10d      	b.n	800ae1a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2203      	movs	r2, #3
 800ac02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68ba      	ldr	r2, [r7, #8]
 800ac10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	88fa      	ldrh	r2, [r7, #6]
 800ac16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	88fa      	ldrh	r2, [r7, #6]
 800ac1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2200      	movs	r2, #0
 800ac28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac44:	d10f      	bne.n	800ac66 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac70:	2b40      	cmp	r3, #64	@ 0x40
 800ac72:	d007      	beq.n	800ac84 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac8c:	d14f      	bne.n	800ad2e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <HAL_SPI_Transmit+0xf6>
 800ac96:	8afb      	ldrh	r3, [r7, #22]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d142      	bne.n	800ad22 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aca0:	881a      	ldrh	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acac:	1c9a      	adds	r2, r3, #2
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	3b01      	subs	r3, #1
 800acba:	b29a      	uxth	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800acc0:	e02f      	b.n	800ad22 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f003 0302 	and.w	r3, r3, #2
 800accc:	2b02      	cmp	r3, #2
 800acce:	d112      	bne.n	800acf6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd4:	881a      	ldrh	r2, [r3, #0]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace0:	1c9a      	adds	r2, r3, #2
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800acea:	b29b      	uxth	r3, r3
 800acec:	3b01      	subs	r3, #1
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	86da      	strh	r2, [r3, #54]	@ 0x36
 800acf4:	e015      	b.n	800ad22 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800acf6:	f7fd fcf3 	bl	80086e0 <HAL_GetTick>
 800acfa:	4602      	mov	r2, r0
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	1ad3      	subs	r3, r2, r3
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d803      	bhi.n	800ad0e <HAL_SPI_Transmit+0x168>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0c:	d102      	bne.n	800ad14 <HAL_SPI_Transmit+0x16e>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800ad14:	2303      	movs	r3, #3
 800ad16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800ad20:	e07b      	b.n	800ae1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1ca      	bne.n	800acc2 <HAL_SPI_Transmit+0x11c>
 800ad2c:	e050      	b.n	800add0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <HAL_SPI_Transmit+0x196>
 800ad36:	8afb      	ldrh	r3, [r7, #22]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d144      	bne.n	800adc6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	330c      	adds	r3, #12
 800ad46:	7812      	ldrb	r2, [r2, #0]
 800ad48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ad62:	e030      	b.n	800adc6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f003 0302 	and.w	r3, r3, #2
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d113      	bne.n	800ad9a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	330c      	adds	r3, #12
 800ad7c:	7812      	ldrb	r2, [r2, #0]
 800ad7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b29a      	uxth	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	86da      	strh	r2, [r3, #54]	@ 0x36
 800ad98:	e015      	b.n	800adc6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad9a:	f7fd fca1 	bl	80086e0 <HAL_GetTick>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d803      	bhi.n	800adb2 <HAL_SPI_Transmit+0x20c>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d102      	bne.n	800adb8 <HAL_SPI_Transmit+0x212>
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d106      	bne.n	800adc6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800adc4:	e029      	b.n	800ae1a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800adca:	b29b      	uxth	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1c9      	bne.n	800ad64 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 fa61 	bl	800b29c <SPI_EndRxTxTransaction>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d002      	beq.n	800ade6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2220      	movs	r2, #32
 800ade4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	689b      	ldr	r3, [r3, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d10a      	bne.n	800ae04 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adee:	2300      	movs	r3, #0
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	77fb      	strb	r3, [r7, #31]
 800ae10:	e003      	b.n	800ae1a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ae22:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3720      	adds	r7, #32
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08c      	sub	sp, #48	@ 0x30
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800ae4a:	2b01      	cmp	r3, #1
 800ae4c:	d101      	bne.n	800ae52 <HAL_SPI_TransmitReceive+0x26>
 800ae4e:	2302      	movs	r3, #2
 800ae50:	e198      	b.n	800b184 <HAL_SPI_TransmitReceive+0x358>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae5a:	f7fd fc41 	bl	80086e0 <HAL_GetTick>
 800ae5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800ae66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ae70:	887b      	ldrh	r3, [r7, #2]
 800ae72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ae74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d00f      	beq.n	800ae9c <HAL_SPI_TransmitReceive+0x70>
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ae82:	d107      	bne.n	800ae94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d103      	bne.n	800ae94 <HAL_SPI_TransmitReceive+0x68>
 800ae8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d003      	beq.n	800ae9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ae94:	2302      	movs	r3, #2
 800ae96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800ae9a:	e16d      	b.n	800b178 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <HAL_SPI_TransmitReceive+0x82>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <HAL_SPI_TransmitReceive+0x82>
 800aea8:	887b      	ldrh	r3, [r7, #2]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800aeb4:	e160      	b.n	800b178 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b04      	cmp	r3, #4
 800aec0:	d003      	beq.n	800aeca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2205      	movs	r2, #5
 800aec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2200      	movs	r2, #0
 800aece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	887a      	ldrh	r2, [r7, #2]
 800aeda:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	887a      	ldrh	r2, [r7, #2]
 800aee0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	887a      	ldrh	r2, [r7, #2]
 800aeec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	887a      	ldrh	r2, [r7, #2]
 800aef2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af0a:	2b40      	cmp	r3, #64	@ 0x40
 800af0c:	d007      	beq.n	800af1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af26:	d17c      	bne.n	800b022 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <HAL_SPI_TransmitReceive+0x10a>
 800af30:	8b7b      	ldrh	r3, [r7, #26]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d16a      	bne.n	800b00c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3a:	881a      	ldrh	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af46:	1c9a      	adds	r2, r3, #2
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af50:	b29b      	uxth	r3, r3
 800af52:	3b01      	subs	r3, #1
 800af54:	b29a      	uxth	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af5a:	e057      	b.n	800b00c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b02      	cmp	r3, #2
 800af68:	d11b      	bne.n	800afa2 <HAL_SPI_TransmitReceive+0x176>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af6e:	b29b      	uxth	r3, r3
 800af70:	2b00      	cmp	r3, #0
 800af72:	d016      	beq.n	800afa2 <HAL_SPI_TransmitReceive+0x176>
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	2b01      	cmp	r3, #1
 800af78:	d113      	bne.n	800afa2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af7e:	881a      	ldrh	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af8a:	1c9a      	adds	r2, r3, #2
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800af94:	b29b      	uxth	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	b29a      	uxth	r2, r3
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b01      	cmp	r3, #1
 800afae:	d119      	bne.n	800afe4 <HAL_SPI_TransmitReceive+0x1b8>
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d014      	beq.n	800afe4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68da      	ldr	r2, [r3, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc4:	b292      	uxth	r2, r2
 800afc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afcc:	1c9a      	adds	r2, r3, #2
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	3b01      	subs	r3, #1
 800afda:	b29a      	uxth	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800afe0:	2301      	movs	r3, #1
 800afe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800afe4:	f7fd fb7c 	bl	80086e0 <HAL_GetTick>
 800afe8:	4602      	mov	r2, r0
 800afea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d80b      	bhi.n	800b00c <HAL_SPI_TransmitReceive+0x1e0>
 800aff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affa:	d007      	beq.n	800b00c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2201      	movs	r2, #1
 800b006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800b00a:	e0b5      	b.n	800b178 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b010:	b29b      	uxth	r3, r3
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1a2      	bne.n	800af5c <HAL_SPI_TransmitReceive+0x130>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d19d      	bne.n	800af5c <HAL_SPI_TransmitReceive+0x130>
 800b020:	e080      	b.n	800b124 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d002      	beq.n	800b030 <HAL_SPI_TransmitReceive+0x204>
 800b02a:	8b7b      	ldrh	r3, [r7, #26]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d16f      	bne.n	800b110 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	330c      	adds	r3, #12
 800b03a:	7812      	ldrb	r2, [r2, #0]
 800b03c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b042:	1c5a      	adds	r2, r3, #1
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	3b01      	subs	r3, #1
 800b050:	b29a      	uxth	r2, r3
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b056:	e05b      	b.n	800b110 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 0302 	and.w	r3, r3, #2
 800b062:	2b02      	cmp	r3, #2
 800b064:	d11c      	bne.n	800b0a0 <HAL_SPI_TransmitReceive+0x274>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d017      	beq.n	800b0a0 <HAL_SPI_TransmitReceive+0x274>
 800b070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b072:	2b01      	cmp	r3, #1
 800b074:	d114      	bne.n	800b0a0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	330c      	adds	r3, #12
 800b080:	7812      	ldrb	r2, [r2, #0]
 800b082:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b092:	b29b      	uxth	r3, r3
 800b094:	3b01      	subs	r3, #1
 800b096:	b29a      	uxth	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d119      	bne.n	800b0e2 <HAL_SPI_TransmitReceive+0x2b6>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d014      	beq.n	800b0e2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c2:	b2d2      	uxtb	r2, r2
 800b0c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0ca:	1c5a      	adds	r2, r3, #1
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b0e2:	f7fd fafd 	bl	80086e0 <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d803      	bhi.n	800b0fa <HAL_SPI_TransmitReceive+0x2ce>
 800b0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d102      	bne.n	800b100 <HAL_SPI_TransmitReceive+0x2d4>
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800b100:	2303      	movs	r3, #3
 800b102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2201      	movs	r2, #1
 800b10a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800b10e:	e033      	b.n	800b178 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800b114:	b29b      	uxth	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d19e      	bne.n	800b058 <HAL_SPI_TransmitReceive+0x22c>
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800b11e:	b29b      	uxth	r3, r3
 800b120:	2b00      	cmp	r3, #0
 800b122:	d199      	bne.n	800b058 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b126:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 f8b7 	bl	800b29c <SPI_EndRxTxTransaction>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d006      	beq.n	800b142 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2220      	movs	r2, #32
 800b13e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800b140:	e01a      	b.n	800b178 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b14a:	2300      	movs	r3, #0
 800b14c:	617b      	str	r3, [r7, #20]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	617b      	str	r3, [r7, #20]
 800b15e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b16e:	e003      	b.n	800b178 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800b180:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800b184:	4618      	mov	r0, r3
 800b186:	3730      	adds	r7, #48	@ 0x30
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b088      	sub	sp, #32
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	4613      	mov	r3, r2
 800b19a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b19c:	f7fd faa0 	bl	80086e0 <HAL_GetTick>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a4:	1a9b      	subs	r3, r3, r2
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b1ac:	f7fd fa98 	bl	80086e0 <HAL_GetTick>
 800b1b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b1b2:	4b39      	ldr	r3, [pc, #228]	@ (800b298 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	015b      	lsls	r3, r3, #5
 800b1b8:	0d1b      	lsrs	r3, r3, #20
 800b1ba:	69fa      	ldr	r2, [r7, #28]
 800b1bc:	fb02 f303 	mul.w	r3, r2, r3
 800b1c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b1c2:	e054      	b.n	800b26e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ca:	d050      	beq.n	800b26e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b1cc:	f7fd fa88 	bl	80086e0 <HAL_GetTick>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	1ad3      	subs	r3, r2, r3
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d902      	bls.n	800b1e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d13d      	bne.n	800b25e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b1f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b1fa:	d111      	bne.n	800b220 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b204:	d004      	beq.n	800b210 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	689b      	ldr	r3, [r3, #8]
 800b20a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b20e:	d107      	bne.n	800b220 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b21e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b228:	d10f      	bne.n	800b24a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b248:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2201      	movs	r2, #1
 800b24e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e017      	b.n	800b28e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d101      	bne.n	800b268 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	689a      	ldr	r2, [r3, #8]
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	4013      	ands	r3, r2
 800b278:	68ba      	ldr	r2, [r7, #8]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	bf0c      	ite	eq
 800b27e:	2301      	moveq	r3, #1
 800b280:	2300      	movne	r3, #0
 800b282:	b2db      	uxtb	r3, r3
 800b284:	461a      	mov	r2, r3
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d19b      	bne.n	800b1c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000148 	.word	0x20000148

0800b29c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b088      	sub	sp, #32
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	2102      	movs	r1, #2
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f7ff ff6a 	bl	800b18c <SPI_WaitFlagStateUntilTimeout>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d007      	beq.n	800b2ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2c2:	f043 0220 	orr.w	r2, r3, #32
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e032      	b.n	800b334 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b33c <SPI_EndRxTxTransaction+0xa0>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a1b      	ldr	r2, [pc, #108]	@ (800b340 <SPI_EndRxTxTransaction+0xa4>)
 800b2d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2d8:	0d5b      	lsrs	r3, r3, #21
 800b2da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b2de:	fb02 f303 	mul.w	r3, r2, r3
 800b2e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b2ec:	d112      	bne.n	800b314 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	2180      	movs	r1, #128	@ 0x80
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff ff47 	bl	800b18c <SPI_WaitFlagStateUntilTimeout>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d016      	beq.n	800b332 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b308:	f043 0220 	orr.w	r2, r3, #32
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e00f      	b.n	800b334 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00a      	beq.n	800b330 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	3b01      	subs	r3, #1
 800b31e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b32a:	2b80      	cmp	r3, #128	@ 0x80
 800b32c:	d0f2      	beq.n	800b314 <SPI_EndRxTxTransaction+0x78>
 800b32e:	e000      	b.n	800b332 <SPI_EndRxTxTransaction+0x96>
        break;
 800b330:	bf00      	nop
  }

  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3718      	adds	r7, #24
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	20000148 	.word	0x20000148
 800b340:	165e9f81 	.word	0x165e9f81

0800b344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e041      	b.n	800b3da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f7fc fd60 	bl	8007e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2202      	movs	r2, #2
 800b374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	3304      	adds	r3, #4
 800b380:	4619      	mov	r1, r3
 800b382:	4610      	mov	r0, r2
 800b384:	f000 fc62 	bl	800bc4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d001      	beq.n	800b3fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e04e      	b.n	800b49a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2202      	movs	r2, #2
 800b400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68da      	ldr	r2, [r3, #12]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f042 0201 	orr.w	r2, r2, #1
 800b412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a23      	ldr	r2, [pc, #140]	@ (800b4a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d022      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b426:	d01d      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a1f      	ldr	r2, [pc, #124]	@ (800b4ac <HAL_TIM_Base_Start_IT+0xc8>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d018      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a1e      	ldr	r2, [pc, #120]	@ (800b4b0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d013      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a1c      	ldr	r2, [pc, #112]	@ (800b4b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00e      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a1b      	ldr	r2, [pc, #108]	@ (800b4b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d009      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a19      	ldr	r2, [pc, #100]	@ (800b4bc <HAL_TIM_Base_Start_IT+0xd8>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d004      	beq.n	800b464 <HAL_TIM_Base_Start_IT+0x80>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a18      	ldr	r2, [pc, #96]	@ (800b4c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d111      	bne.n	800b488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b06      	cmp	r3, #6
 800b474:	d010      	beq.n	800b498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	681a      	ldr	r2, [r3, #0]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f042 0201 	orr.w	r2, r2, #1
 800b484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b486:	e007      	b.n	800b498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f042 0201 	orr.w	r2, r2, #1
 800b496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr
 800b4a6:	bf00      	nop
 800b4a8:	40010000 	.word	0x40010000
 800b4ac:	40000400 	.word	0x40000400
 800b4b0:	40000800 	.word	0x40000800
 800b4b4:	40000c00 	.word	0x40000c00
 800b4b8:	40010400 	.word	0x40010400
 800b4bc:	40014000 	.word	0x40014000
 800b4c0:	40001800 	.word	0x40001800

0800b4c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e041      	b.n	800b55a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f839 	bl	800b562 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2202      	movs	r2, #2
 800b4f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3304      	adds	r3, #4
 800b500:	4619      	mov	r1, r3
 800b502:	4610      	mov	r0, r2
 800b504:	f000 fba2 	bl	800bc4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2201      	movs	r2, #1
 800b51c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2201      	movs	r2, #1
 800b534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2201      	movs	r2, #1
 800b544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b562:	b480      	push	{r7}
 800b564:	b083      	sub	sp, #12
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b56a:	bf00      	nop
 800b56c:	370c      	adds	r7, #12
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
	...

0800b578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d109      	bne.n	800b59c <HAL_TIM_PWM_Start+0x24>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b01      	cmp	r3, #1
 800b592:	bf14      	ite	ne
 800b594:	2301      	movne	r3, #1
 800b596:	2300      	moveq	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	e022      	b.n	800b5e2 <HAL_TIM_PWM_Start+0x6a>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b04      	cmp	r3, #4
 800b5a0:	d109      	bne.n	800b5b6 <HAL_TIM_PWM_Start+0x3e>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	bf14      	ite	ne
 800b5ae:	2301      	movne	r3, #1
 800b5b0:	2300      	moveq	r3, #0
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	e015      	b.n	800b5e2 <HAL_TIM_PWM_Start+0x6a>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b08      	cmp	r3, #8
 800b5ba:	d109      	bne.n	800b5d0 <HAL_TIM_PWM_Start+0x58>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	bf14      	ite	ne
 800b5c8:	2301      	movne	r3, #1
 800b5ca:	2300      	moveq	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	e008      	b.n	800b5e2 <HAL_TIM_PWM_Start+0x6a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	bf14      	ite	ne
 800b5dc:	2301      	movne	r3, #1
 800b5de:	2300      	moveq	r3, #0
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d001      	beq.n	800b5ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e07c      	b.n	800b6e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d104      	bne.n	800b5fa <HAL_TIM_PWM_Start+0x82>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5f8:	e013      	b.n	800b622 <HAL_TIM_PWM_Start+0xaa>
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b04      	cmp	r3, #4
 800b5fe:	d104      	bne.n	800b60a <HAL_TIM_PWM_Start+0x92>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b608:	e00b      	b.n	800b622 <HAL_TIM_PWM_Start+0xaa>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b08      	cmp	r3, #8
 800b60e:	d104      	bne.n	800b61a <HAL_TIM_PWM_Start+0xa2>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b618:	e003      	b.n	800b622 <HAL_TIM_PWM_Start+0xaa>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2202      	movs	r2, #2
 800b61e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2201      	movs	r2, #1
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fe04 	bl	800c238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a2d      	ldr	r2, [pc, #180]	@ (800b6ec <HAL_TIM_PWM_Start+0x174>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d004      	beq.n	800b644 <HAL_TIM_PWM_Start+0xcc>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a2c      	ldr	r2, [pc, #176]	@ (800b6f0 <HAL_TIM_PWM_Start+0x178>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d101      	bne.n	800b648 <HAL_TIM_PWM_Start+0xd0>
 800b644:	2301      	movs	r3, #1
 800b646:	e000      	b.n	800b64a <HAL_TIM_PWM_Start+0xd2>
 800b648:	2300      	movs	r3, #0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d007      	beq.n	800b65e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b65c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a22      	ldr	r2, [pc, #136]	@ (800b6ec <HAL_TIM_PWM_Start+0x174>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d022      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b670:	d01d      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a1f      	ldr	r2, [pc, #124]	@ (800b6f4 <HAL_TIM_PWM_Start+0x17c>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d018      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a1d      	ldr	r2, [pc, #116]	@ (800b6f8 <HAL_TIM_PWM_Start+0x180>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d013      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	4a1c      	ldr	r2, [pc, #112]	@ (800b6fc <HAL_TIM_PWM_Start+0x184>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d00e      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a16      	ldr	r2, [pc, #88]	@ (800b6f0 <HAL_TIM_PWM_Start+0x178>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d009      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a18      	ldr	r2, [pc, #96]	@ (800b700 <HAL_TIM_PWM_Start+0x188>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d004      	beq.n	800b6ae <HAL_TIM_PWM_Start+0x136>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a16      	ldr	r2, [pc, #88]	@ (800b704 <HAL_TIM_PWM_Start+0x18c>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d111      	bne.n	800b6d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	f003 0307 	and.w	r3, r3, #7
 800b6b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b06      	cmp	r3, #6
 800b6be:	d010      	beq.n	800b6e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f042 0201 	orr.w	r2, r2, #1
 800b6ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6d0:	e007      	b.n	800b6e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f042 0201 	orr.w	r2, r2, #1
 800b6e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	40010000 	.word	0x40010000
 800b6f0:	40010400 	.word	0x40010400
 800b6f4:	40000400 	.word	0x40000400
 800b6f8:	40000800 	.word	0x40000800
 800b6fc:	40000c00 	.word	0x40000c00
 800b700:	40014000 	.word	0x40014000
 800b704:	40001800 	.word	0x40001800

0800b708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d020      	beq.n	800b76c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f003 0302 	and.w	r3, r3, #2
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01b      	beq.n	800b76c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f06f 0202 	mvn.w	r2, #2
 800b73c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	699b      	ldr	r3, [r3, #24]
 800b74a:	f003 0303 	and.w	r3, r3, #3
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d003      	beq.n	800b75a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fa5b 	bl	800bc0e <HAL_TIM_IC_CaptureCallback>
 800b758:	e005      	b.n	800b766 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 fa4d 	bl	800bbfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fa5e 	bl	800bc22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f003 0304 	and.w	r3, r3, #4
 800b772:	2b00      	cmp	r3, #0
 800b774:	d020      	beq.n	800b7b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d01b      	beq.n	800b7b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f06f 0204 	mvn.w	r2, #4
 800b788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2202      	movs	r2, #2
 800b78e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d003      	beq.n	800b7a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fa35 	bl	800bc0e <HAL_TIM_IC_CaptureCallback>
 800b7a4:	e005      	b.n	800b7b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 fa27 	bl	800bbfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fa38 	bl	800bc22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f003 0308 	and.w	r3, r3, #8
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d020      	beq.n	800b804 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01b      	beq.n	800b804 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f06f 0208 	mvn.w	r2, #8
 800b7d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2204      	movs	r2, #4
 800b7da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	f003 0303 	and.w	r3, r3, #3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d003      	beq.n	800b7f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa0f 	bl	800bc0e <HAL_TIM_IC_CaptureCallback>
 800b7f0:	e005      	b.n	800b7fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f000 fa01 	bl	800bbfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fa12 	bl	800bc22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	f003 0310 	and.w	r3, r3, #16
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d020      	beq.n	800b850 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f003 0310 	and.w	r3, r3, #16
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01b      	beq.n	800b850 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f06f 0210 	mvn.w	r2, #16
 800b820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2208      	movs	r2, #8
 800b826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b832:	2b00      	cmp	r3, #0
 800b834:	d003      	beq.n	800b83e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 f9e9 	bl	800bc0e <HAL_TIM_IC_CaptureCallback>
 800b83c:	e005      	b.n	800b84a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f9db 	bl	800bbfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f9ec 	bl	800bc22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	f003 0301 	and.w	r3, r3, #1
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00c      	beq.n	800b874 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	2b00      	cmp	r3, #0
 800b862:	d007      	beq.n	800b874 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f06f 0201 	mvn.w	r2, #1
 800b86c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7f8 f89c 	bl	80039ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b884:	2b00      	cmp	r3, #0
 800b886:	d007      	beq.n	800b898 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fdce 	bl	800c434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00c      	beq.n	800b8bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d007      	beq.n	800b8bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b8b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f9bd 	bl	800bc36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00c      	beq.n	800b8e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f003 0320 	and.w	r3, r3, #32
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f06f 0220 	mvn.w	r2, #32
 800b8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fda0 	bl	800c420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8e0:	bf00      	nop
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b086      	sub	sp, #24
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d101      	bne.n	800b906 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b902:	2302      	movs	r3, #2
 800b904:	e0ae      	b.n	800ba64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b0c      	cmp	r3, #12
 800b912:	f200 809f 	bhi.w	800ba54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b916:	a201      	add	r2, pc, #4	@ (adr r2, 800b91c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91c:	0800b951 	.word	0x0800b951
 800b920:	0800ba55 	.word	0x0800ba55
 800b924:	0800ba55 	.word	0x0800ba55
 800b928:	0800ba55 	.word	0x0800ba55
 800b92c:	0800b991 	.word	0x0800b991
 800b930:	0800ba55 	.word	0x0800ba55
 800b934:	0800ba55 	.word	0x0800ba55
 800b938:	0800ba55 	.word	0x0800ba55
 800b93c:	0800b9d3 	.word	0x0800b9d3
 800b940:	0800ba55 	.word	0x0800ba55
 800b944:	0800ba55 	.word	0x0800ba55
 800b948:	0800ba55 	.word	0x0800ba55
 800b94c:	0800ba13 	.word	0x0800ba13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68b9      	ldr	r1, [r7, #8]
 800b956:	4618      	mov	r0, r3
 800b958:	f000 fa24 	bl	800bda4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	699a      	ldr	r2, [r3, #24]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f042 0208 	orr.w	r2, r2, #8
 800b96a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699a      	ldr	r2, [r3, #24]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f022 0204 	bic.w	r2, r2, #4
 800b97a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	6999      	ldr	r1, [r3, #24]
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	691a      	ldr	r2, [r3, #16]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	619a      	str	r2, [r3, #24]
      break;
 800b98e:	e064      	b.n	800ba5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68b9      	ldr	r1, [r7, #8]
 800b996:	4618      	mov	r0, r3
 800b998:	f000 fa74 	bl	800be84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	699a      	ldr	r2, [r3, #24]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	699a      	ldr	r2, [r3, #24]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6999      	ldr	r1, [r3, #24]
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	691b      	ldr	r3, [r3, #16]
 800b9c6:	021a      	lsls	r2, r3, #8
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	619a      	str	r2, [r3, #24]
      break;
 800b9d0:	e043      	b.n	800ba5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	68b9      	ldr	r1, [r7, #8]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 fac9 	bl	800bf70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	69da      	ldr	r2, [r3, #28]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f042 0208 	orr.w	r2, r2, #8
 800b9ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f022 0204 	bic.w	r2, r2, #4
 800b9fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	69d9      	ldr	r1, [r3, #28]
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	691a      	ldr	r2, [r3, #16]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	61da      	str	r2, [r3, #28]
      break;
 800ba10:	e023      	b.n	800ba5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68b9      	ldr	r1, [r7, #8]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f000 fb1d 	bl	800c058 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	69da      	ldr	r2, [r3, #28]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	69d9      	ldr	r1, [r3, #28]
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	021a      	lsls	r2, r3, #8
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	61da      	str	r2, [r3, #28]
      break;
 800ba52:	e002      	b.n	800ba5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	75fb      	strb	r3, [r7, #23]
      break;
 800ba58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3718      	adds	r7, #24
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d101      	bne.n	800ba88 <HAL_TIM_ConfigClockSource+0x1c>
 800ba84:	2302      	movs	r3, #2
 800ba86:	e0b4      	b.n	800bbf2 <HAL_TIM_ConfigClockSource+0x186>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2202      	movs	r2, #2
 800ba94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800baa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800baae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68ba      	ldr	r2, [r7, #8]
 800bab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bac0:	d03e      	beq.n	800bb40 <HAL_TIM_ConfigClockSource+0xd4>
 800bac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bac6:	f200 8087 	bhi.w	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800baca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bace:	f000 8086 	beq.w	800bbde <HAL_TIM_ConfigClockSource+0x172>
 800bad2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bad6:	d87f      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bad8:	2b70      	cmp	r3, #112	@ 0x70
 800bada:	d01a      	beq.n	800bb12 <HAL_TIM_ConfigClockSource+0xa6>
 800badc:	2b70      	cmp	r3, #112	@ 0x70
 800bade:	d87b      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bae0:	2b60      	cmp	r3, #96	@ 0x60
 800bae2:	d050      	beq.n	800bb86 <HAL_TIM_ConfigClockSource+0x11a>
 800bae4:	2b60      	cmp	r3, #96	@ 0x60
 800bae6:	d877      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bae8:	2b50      	cmp	r3, #80	@ 0x50
 800baea:	d03c      	beq.n	800bb66 <HAL_TIM_ConfigClockSource+0xfa>
 800baec:	2b50      	cmp	r3, #80	@ 0x50
 800baee:	d873      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800baf0:	2b40      	cmp	r3, #64	@ 0x40
 800baf2:	d058      	beq.n	800bba6 <HAL_TIM_ConfigClockSource+0x13a>
 800baf4:	2b40      	cmp	r3, #64	@ 0x40
 800baf6:	d86f      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800baf8:	2b30      	cmp	r3, #48	@ 0x30
 800bafa:	d064      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x15a>
 800bafc:	2b30      	cmp	r3, #48	@ 0x30
 800bafe:	d86b      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bb00:	2b20      	cmp	r3, #32
 800bb02:	d060      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d867      	bhi.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d05c      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb0c:	2b10      	cmp	r3, #16
 800bb0e:	d05a      	beq.n	800bbc6 <HAL_TIM_ConfigClockSource+0x15a>
 800bb10:	e062      	b.n	800bbd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb22:	f000 fb69 	bl	800c1f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	689b      	ldr	r3, [r3, #8]
 800bb2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bb34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	609a      	str	r2, [r3, #8]
      break;
 800bb3e:	e04f      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb50:	f000 fb52 	bl	800c1f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	689a      	ldr	r2, [r3, #8]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb62:	609a      	str	r2, [r3, #8]
      break;
 800bb64:	e03c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb72:	461a      	mov	r2, r3
 800bb74:	f000 fac6 	bl	800c104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2150      	movs	r1, #80	@ 0x50
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 fb1f 	bl	800c1c2 <TIM_ITRx_SetConfig>
      break;
 800bb84:	e02c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb92:	461a      	mov	r2, r3
 800bb94:	f000 fae5 	bl	800c162 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2160      	movs	r1, #96	@ 0x60
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fb0f 	bl	800c1c2 <TIM_ITRx_SetConfig>
      break;
 800bba4:	e01c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	f000 faa6 	bl	800c104 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	2140      	movs	r1, #64	@ 0x40
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 faff 	bl	800c1c2 <TIM_ITRx_SetConfig>
      break;
 800bbc4:	e00c      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f000 faf6 	bl	800c1c2 <TIM_ITRx_SetConfig>
      break;
 800bbd6:	e003      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	73fb      	strb	r3, [r7, #15]
      break;
 800bbdc:	e000      	b.n	800bbe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bbde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3710      	adds	r7, #16
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b083      	sub	sp, #12
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc02:	bf00      	nop
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b083      	sub	sp, #12
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc2a:	bf00      	nop
 800bc2c:	370c      	adds	r7, #12
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b083      	sub	sp, #12
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc3e:	bf00      	nop
 800bc40:	370c      	adds	r7, #12
 800bc42:	46bd      	mov	sp, r7
 800bc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc48:	4770      	bx	lr
	...

0800bc4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	4a46      	ldr	r2, [pc, #280]	@ (800bd78 <TIM_Base_SetConfig+0x12c>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d013      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc6a:	d00f      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a43      	ldr	r2, [pc, #268]	@ (800bd7c <TIM_Base_SetConfig+0x130>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d00b      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a42      	ldr	r2, [pc, #264]	@ (800bd80 <TIM_Base_SetConfig+0x134>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d007      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a41      	ldr	r2, [pc, #260]	@ (800bd84 <TIM_Base_SetConfig+0x138>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d003      	beq.n	800bc8c <TIM_Base_SetConfig+0x40>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a40      	ldr	r2, [pc, #256]	@ (800bd88 <TIM_Base_SetConfig+0x13c>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d108      	bne.n	800bc9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a35      	ldr	r2, [pc, #212]	@ (800bd78 <TIM_Base_SetConfig+0x12c>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d02b      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcac:	d027      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a32      	ldr	r2, [pc, #200]	@ (800bd7c <TIM_Base_SetConfig+0x130>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d023      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a31      	ldr	r2, [pc, #196]	@ (800bd80 <TIM_Base_SetConfig+0x134>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d01f      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a30      	ldr	r2, [pc, #192]	@ (800bd84 <TIM_Base_SetConfig+0x138>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d01b      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a2f      	ldr	r2, [pc, #188]	@ (800bd88 <TIM_Base_SetConfig+0x13c>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d017      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a2e      	ldr	r2, [pc, #184]	@ (800bd8c <TIM_Base_SetConfig+0x140>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d013      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a2d      	ldr	r2, [pc, #180]	@ (800bd90 <TIM_Base_SetConfig+0x144>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00f      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a2c      	ldr	r2, [pc, #176]	@ (800bd94 <TIM_Base_SetConfig+0x148>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d00b      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a2b      	ldr	r2, [pc, #172]	@ (800bd98 <TIM_Base_SetConfig+0x14c>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d007      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a2a      	ldr	r2, [pc, #168]	@ (800bd9c <TIM_Base_SetConfig+0x150>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d003      	beq.n	800bcfe <TIM_Base_SetConfig+0xb2>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a29      	ldr	r2, [pc, #164]	@ (800bda0 <TIM_Base_SetConfig+0x154>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d108      	bne.n	800bd10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	695b      	ldr	r3, [r3, #20]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a10      	ldr	r2, [pc, #64]	@ (800bd78 <TIM_Base_SetConfig+0x12c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d003      	beq.n	800bd44 <TIM_Base_SetConfig+0xf8>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a12      	ldr	r2, [pc, #72]	@ (800bd88 <TIM_Base_SetConfig+0x13c>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d103      	bne.n	800bd4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2201      	movs	r2, #1
 800bd50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	691b      	ldr	r3, [r3, #16]
 800bd56:	f003 0301 	and.w	r3, r3, #1
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d105      	bne.n	800bd6a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	f023 0201 	bic.w	r2, r3, #1
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	611a      	str	r2, [r3, #16]
  }
}
 800bd6a:	bf00      	nop
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	40010000 	.word	0x40010000
 800bd7c:	40000400 	.word	0x40000400
 800bd80:	40000800 	.word	0x40000800
 800bd84:	40000c00 	.word	0x40000c00
 800bd88:	40010400 	.word	0x40010400
 800bd8c:	40014000 	.word	0x40014000
 800bd90:	40014400 	.word	0x40014400
 800bd94:	40014800 	.word	0x40014800
 800bd98:	40001800 	.word	0x40001800
 800bd9c:	40001c00 	.word	0x40001c00
 800bda0:	40002000 	.word	0x40002000

0800bda4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	f023 0201 	bic.w	r2, r3, #1
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	699b      	ldr	r3, [r3, #24]
 800bdca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f023 0303 	bic.w	r3, r3, #3
 800bdda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	68fa      	ldr	r2, [r7, #12]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f023 0302 	bic.w	r3, r3, #2
 800bdec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a20      	ldr	r2, [pc, #128]	@ (800be7c <TIM_OC1_SetConfig+0xd8>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d003      	beq.n	800be08 <TIM_OC1_SetConfig+0x64>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a1f      	ldr	r2, [pc, #124]	@ (800be80 <TIM_OC1_SetConfig+0xdc>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d10c      	bne.n	800be22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f023 0308 	bic.w	r3, r3, #8
 800be0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	68db      	ldr	r3, [r3, #12]
 800be14:	697a      	ldr	r2, [r7, #20]
 800be16:	4313      	orrs	r3, r2
 800be18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f023 0304 	bic.w	r3, r3, #4
 800be20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a15      	ldr	r2, [pc, #84]	@ (800be7c <TIM_OC1_SetConfig+0xd8>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d003      	beq.n	800be32 <TIM_OC1_SetConfig+0x8e>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	4a14      	ldr	r2, [pc, #80]	@ (800be80 <TIM_OC1_SetConfig+0xdc>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d111      	bne.n	800be56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800be40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	695b      	ldr	r3, [r3, #20]
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	4313      	orrs	r3, r2
 800be4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4313      	orrs	r3, r2
 800be54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	693a      	ldr	r2, [r7, #16]
 800be5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	685a      	ldr	r2, [r3, #4]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	697a      	ldr	r2, [r7, #20]
 800be6e:	621a      	str	r2, [r3, #32]
}
 800be70:	bf00      	nop
 800be72:	371c      	adds	r7, #28
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	40010000 	.word	0x40010000
 800be80:	40010400 	.word	0x40010400

0800be84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6a1b      	ldr	r3, [r3, #32]
 800be98:	f023 0210 	bic.w	r2, r3, #16
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800beba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	021b      	lsls	r3, r3, #8
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	f023 0320 	bic.w	r3, r3, #32
 800bece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	011b      	lsls	r3, r3, #4
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a22      	ldr	r2, [pc, #136]	@ (800bf68 <TIM_OC2_SetConfig+0xe4>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d003      	beq.n	800beec <TIM_OC2_SetConfig+0x68>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a21      	ldr	r2, [pc, #132]	@ (800bf6c <TIM_OC2_SetConfig+0xe8>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d10d      	bne.n	800bf08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	697a      	ldr	r2, [r7, #20]
 800befc:	4313      	orrs	r3, r2
 800befe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a17      	ldr	r2, [pc, #92]	@ (800bf68 <TIM_OC2_SetConfig+0xe4>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d003      	beq.n	800bf18 <TIM_OC2_SetConfig+0x94>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a16      	ldr	r2, [pc, #88]	@ (800bf6c <TIM_OC2_SetConfig+0xe8>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d113      	bne.n	800bf40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bf1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bf26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	695b      	ldr	r3, [r3, #20]
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	699b      	ldr	r3, [r3, #24]
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	693a      	ldr	r2, [r7, #16]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	685a      	ldr	r2, [r3, #4]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	697a      	ldr	r2, [r7, #20]
 800bf58:	621a      	str	r2, [r3, #32]
}
 800bf5a:	bf00      	nop
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	40010000 	.word	0x40010000
 800bf6c:	40010400 	.word	0x40010400

0800bf70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6a1b      	ldr	r3, [r3, #32]
 800bf84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bfb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	021b      	lsls	r3, r3, #8
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4a21      	ldr	r2, [pc, #132]	@ (800c050 <TIM_OC3_SetConfig+0xe0>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d003      	beq.n	800bfd6 <TIM_OC3_SetConfig+0x66>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	4a20      	ldr	r2, [pc, #128]	@ (800c054 <TIM_OC3_SetConfig+0xe4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	d10d      	bne.n	800bff2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	021b      	lsls	r3, r3, #8
 800bfe4:	697a      	ldr	r2, [r7, #20]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a16      	ldr	r2, [pc, #88]	@ (800c050 <TIM_OC3_SetConfig+0xe0>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d003      	beq.n	800c002 <TIM_OC3_SetConfig+0x92>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a15      	ldr	r2, [pc, #84]	@ (800c054 <TIM_OC3_SetConfig+0xe4>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d113      	bne.n	800c02a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	011b      	lsls	r3, r3, #4
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	4313      	orrs	r3, r2
 800c028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	621a      	str	r2, [r3, #32]
}
 800c044:	bf00      	nop
 800c046:	371c      	adds	r7, #28
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	40010000 	.word	0x40010000
 800c054:	40010400 	.word	0x40010400

0800c058 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a1b      	ldr	r3, [r3, #32]
 800c066:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6a1b      	ldr	r3, [r3, #32]
 800c06c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c08e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	021b      	lsls	r3, r3, #8
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c09c:	693b      	ldr	r3, [r7, #16]
 800c09e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c0a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	031b      	lsls	r3, r3, #12
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a12      	ldr	r2, [pc, #72]	@ (800c0fc <TIM_OC4_SetConfig+0xa4>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d003      	beq.n	800c0c0 <TIM_OC4_SetConfig+0x68>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a11      	ldr	r2, [pc, #68]	@ (800c100 <TIM_OC4_SetConfig+0xa8>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d109      	bne.n	800c0d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	019b      	lsls	r3, r3, #6
 800c0ce:	697a      	ldr	r2, [r7, #20]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	685a      	ldr	r2, [r3, #4]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	693a      	ldr	r2, [r7, #16]
 800c0ec:	621a      	str	r2, [r3, #32]
}
 800c0ee:	bf00      	nop
 800c0f0:	371c      	adds	r7, #28
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	40010000 	.word	0x40010000
 800c100:	40010400 	.word	0x40010400

0800c104 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c104:	b480      	push	{r7}
 800c106:	b087      	sub	sp, #28
 800c108:	af00      	add	r7, sp, #0
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	f023 0201 	bic.w	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c12e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	011b      	lsls	r3, r3, #4
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	4313      	orrs	r3, r2
 800c138:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	f023 030a 	bic.w	r3, r3, #10
 800c140:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	4313      	orrs	r3, r2
 800c148:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	621a      	str	r2, [r3, #32]
}
 800c156:	bf00      	nop
 800c158:	371c      	adds	r7, #28
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr

0800c162 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c162:	b480      	push	{r7}
 800c164:	b087      	sub	sp, #28
 800c166:	af00      	add	r7, sp, #0
 800c168:	60f8      	str	r0, [r7, #12]
 800c16a:	60b9      	str	r1, [r7, #8]
 800c16c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6a1b      	ldr	r3, [r3, #32]
 800c178:	f023 0210 	bic.w	r2, r3, #16
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c18c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	031b      	lsls	r3, r3, #12
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	4313      	orrs	r3, r2
 800c196:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c19e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	011b      	lsls	r3, r3, #4
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	693a      	ldr	r2, [r7, #16]
 800c1ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	697a      	ldr	r2, [r7, #20]
 800c1b4:	621a      	str	r2, [r3, #32]
}
 800c1b6:	bf00      	nop
 800c1b8:	371c      	adds	r7, #28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	b085      	sub	sp, #20
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
 800c1ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c1da:	683a      	ldr	r2, [r7, #0]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	f043 0307 	orr.w	r3, r3, #7
 800c1e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	609a      	str	r2, [r3, #8]
}
 800c1ec:	bf00      	nop
 800c1ee:	3714      	adds	r7, #20
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c212:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	021a      	lsls	r2, r3, #8
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	431a      	orrs	r2, r3
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	4313      	orrs	r3, r2
 800c220:	697a      	ldr	r2, [r7, #20]
 800c222:	4313      	orrs	r3, r2
 800c224:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	697a      	ldr	r2, [r7, #20]
 800c22a:	609a      	str	r2, [r3, #8]
}
 800c22c:	bf00      	nop
 800c22e:	371c      	adds	r7, #28
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f003 031f 	and.w	r3, r3, #31
 800c24a:	2201      	movs	r2, #1
 800c24c:	fa02 f303 	lsl.w	r3, r2, r3
 800c250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6a1a      	ldr	r2, [r3, #32]
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	43db      	mvns	r3, r3
 800c25a:	401a      	ands	r2, r3
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6a1a      	ldr	r2, [r3, #32]
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	f003 031f 	and.w	r3, r3, #31
 800c26a:	6879      	ldr	r1, [r7, #4]
 800c26c:	fa01 f303 	lsl.w	r3, r1, r3
 800c270:	431a      	orrs	r2, r3
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	621a      	str	r2, [r3, #32]
}
 800c276:	bf00      	nop
 800c278:	371c      	adds	r7, #28
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
	...

0800c284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c294:	2b01      	cmp	r3, #1
 800c296:	d101      	bne.n	800c29c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c298:	2302      	movs	r3, #2
 800c29a:	e05a      	b.n	800c352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a21      	ldr	r2, [pc, #132]	@ (800c360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d022      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2e8:	d01d      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d018      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d013      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4a1a      	ldr	r2, [pc, #104]	@ (800c36c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d00e      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a18      	ldr	r2, [pc, #96]	@ (800c370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d009      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a17      	ldr	r2, [pc, #92]	@ (800c374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d004      	beq.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a15      	ldr	r2, [pc, #84]	@ (800c378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d10c      	bne.n	800c340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c32c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	4313      	orrs	r3, r2
 800c336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68ba      	ldr	r2, [r7, #8]
 800c33e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40010000 	.word	0x40010000
 800c364:	40000400 	.word	0x40000400
 800c368:	40000800 	.word	0x40000800
 800c36c:	40000c00 	.word	0x40000c00
 800c370:	40010400 	.word	0x40010400
 800c374:	40014000 	.word	0x40014000
 800c378:	40001800 	.word	0x40001800

0800c37c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c390:	2b01      	cmp	r3, #1
 800c392:	d101      	bne.n	800c398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c394:	2302      	movs	r3, #2
 800c396:	e03d      	b.n	800c414 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	695b      	ldr	r3, [r3, #20]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2200      	movs	r2, #0
 800c40e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c456:	2301      	movs	r3, #1
 800c458:	e042      	b.n	800c4e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7fb fede 	bl	8008230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2224      	movs	r2, #36	@ 0x24
 800c478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68da      	ldr	r2, [r3, #12]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c48a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f001 f825 	bl	800d4dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	691a      	ldr	r2, [r3, #16]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	695a      	ldr	r2, [r3, #20]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c4b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	68da      	ldr	r2, [r3, #12]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c4c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2220      	movs	r2, #32
 800c4cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2220      	movs	r2, #32
 800c4d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b08a      	sub	sp, #40	@ 0x28
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	603b      	str	r3, [r7, #0]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c502:	b2db      	uxtb	r3, r3
 800c504:	2b20      	cmp	r3, #32
 800c506:	d175      	bne.n	800c5f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <HAL_UART_Transmit+0x2c>
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	e06e      	b.n	800c5f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2200      	movs	r2, #0
 800c51c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2221      	movs	r2, #33	@ 0x21
 800c522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c526:	f7fc f8db 	bl	80086e0 <HAL_GetTick>
 800c52a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	88fa      	ldrh	r2, [r7, #6]
 800c530:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	88fa      	ldrh	r2, [r7, #6]
 800c536:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c540:	d108      	bne.n	800c554 <HAL_UART_Transmit+0x6c>
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	691b      	ldr	r3, [r3, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d104      	bne.n	800c554 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	e003      	b.n	800c55c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c558:	2300      	movs	r3, #0
 800c55a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c55c:	e02e      	b.n	800c5bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2200      	movs	r2, #0
 800c566:	2180      	movs	r1, #128	@ 0x80
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f000 fcfe 	bl	800cf6a <UART_WaitOnFlagUntilTimeout>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d005      	beq.n	800c580 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2220      	movs	r2, #32
 800c578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e03a      	b.n	800c5f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10b      	bne.n	800c59e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	881b      	ldrh	r3, [r3, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c594:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	3302      	adds	r3, #2
 800c59a:	61bb      	str	r3, [r7, #24]
 800c59c:	e007      	b.n	800c5ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	781a      	ldrb	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c5a8:	69fb      	ldr	r3, [r7, #28]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	b29a      	uxth	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1cb      	bne.n	800c55e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	9300      	str	r3, [sp, #0]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	2140      	movs	r1, #64	@ 0x40
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f000 fcca 	bl	800cf6a <UART_WaitOnFlagUntilTimeout>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d005      	beq.n	800c5e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	e006      	b.n	800c5f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	e000      	b.n	800c5f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800c5f4:	2302      	movs	r3, #2
  }
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3720      	adds	r7, #32
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
	...

0800c600 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08c      	sub	sp, #48	@ 0x30
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c614:	b2db      	uxtb	r3, r3
 800c616:	2b20      	cmp	r3, #32
 800c618:	d156      	bne.n	800c6c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <HAL_UART_Transmit_DMA+0x26>
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d101      	bne.n	800c62a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e04f      	b.n	800c6ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800c62a:	68ba      	ldr	r2, [r7, #8]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	88fa      	ldrh	r2, [r7, #6]
 800c634:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	88fa      	ldrh	r2, [r7, #6]
 800c63a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2221      	movs	r2, #33	@ 0x21
 800c646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64e:	4a21      	ldr	r2, [pc, #132]	@ (800c6d4 <HAL_UART_Transmit_DMA+0xd4>)
 800c650:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c656:	4a20      	ldr	r2, [pc, #128]	@ (800c6d8 <HAL_UART_Transmit_DMA+0xd8>)
 800c658:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c65e:	4a1f      	ldr	r2, [pc, #124]	@ (800c6dc <HAL_UART_Transmit_DMA+0xdc>)
 800c660:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c666:	2200      	movs	r2, #0
 800c668:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c66a:	f107 0308 	add.w	r3, r7, #8
 800c66e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c676:	6819      	ldr	r1, [r3, #0]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3304      	adds	r3, #4
 800c67e:	461a      	mov	r2, r3
 800c680:	88fb      	ldrh	r3, [r7, #6]
 800c682:	f7fc fe1d 	bl	80092c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c68e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3314      	adds	r3, #20
 800c696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	617b      	str	r3, [r7, #20]
   return(result);
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3314      	adds	r3, #20
 800c6ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6a39      	ldr	r1, [r7, #32]
 800c6b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e5      	bne.n	800c690 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e000      	b.n	800c6ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800c6c8:	2302      	movs	r3, #2
  }
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3730      	adds	r7, #48	@ 0x30
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	0800ccb9 	.word	0x0800ccb9
 800c6d8:	0800cd53 	.word	0x0800cd53
 800c6dc:	0800ced7 	.word	0x0800ced7

0800c6e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b20      	cmp	r3, #32
 800c6f8:	d112      	bne.n	800c720 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <HAL_UART_Receive_DMA+0x26>
 800c700:	88fb      	ldrh	r3, [r7, #6]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d101      	bne.n	800c70a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	e00b      	b.n	800c722 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c710:	88fb      	ldrh	r3, [r7, #6]
 800c712:	461a      	mov	r2, r3
 800c714:	68b9      	ldr	r1, [r7, #8]
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f000 fc80 	bl	800d01c <UART_Start_Receive_DMA>
 800c71c:	4603      	mov	r3, r0
 800c71e:	e000      	b.n	800c722 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c720:	2302      	movs	r3, #2
  }
}
 800c722:	4618      	mov	r0, r3
 800c724:	3710      	adds	r7, #16
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
	...

0800c72c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b0ba      	sub	sp, #232	@ 0xe8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68db      	ldr	r3, [r3, #12]
 800c744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c752:	2300      	movs	r3, #0
 800c754:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c758:	2300      	movs	r3, #0
 800c75a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c75e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c762:	f003 030f 	and.w	r3, r3, #15
 800c766:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c76a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10f      	bne.n	800c792 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c776:	f003 0320 	and.w	r3, r3, #32
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d009      	beq.n	800c792 <HAL_UART_IRQHandler+0x66>
 800c77e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c782:	f003 0320 	and.w	r3, r3, #32
 800c786:	2b00      	cmp	r3, #0
 800c788:	d003      	beq.n	800c792 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 fde7 	bl	800d35e <UART_Receive_IT>
      return;
 800c790:	e25b      	b.n	800cc4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c792:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c796:	2b00      	cmp	r3, #0
 800c798:	f000 80de 	beq.w	800c958 <HAL_UART_IRQHandler+0x22c>
 800c79c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d106      	bne.n	800c7b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c7a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80d1 	beq.w	800c958 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d00b      	beq.n	800c7da <HAL_UART_IRQHandler+0xae>
 800c7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d005      	beq.n	800c7da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7d2:	f043 0201 	orr.w	r2, r3, #1
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7de:	f003 0304 	and.w	r3, r3, #4
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <HAL_UART_IRQHandler+0xd2>
 800c7e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7ea:	f003 0301 	and.w	r3, r3, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d005      	beq.n	800c7fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7f6:	f043 0202 	orr.w	r2, r3, #2
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c802:	f003 0302 	and.w	r3, r3, #2
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00b      	beq.n	800c822 <HAL_UART_IRQHandler+0xf6>
 800c80a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c81a:	f043 0204 	orr.w	r2, r3, #4
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c826:	f003 0308 	and.w	r3, r3, #8
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d011      	beq.n	800c852 <HAL_UART_IRQHandler+0x126>
 800c82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c832:	f003 0320 	and.w	r3, r3, #32
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c83a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c83e:	f003 0301 	and.w	r3, r3, #1
 800c842:	2b00      	cmp	r3, #0
 800c844:	d005      	beq.n	800c852 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c84a:	f043 0208 	orr.w	r2, r3, #8
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c856:	2b00      	cmp	r3, #0
 800c858:	f000 81f2 	beq.w	800cc40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c85c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c860:	f003 0320 	and.w	r3, r3, #32
 800c864:	2b00      	cmp	r3, #0
 800c866:	d008      	beq.n	800c87a <HAL_UART_IRQHandler+0x14e>
 800c868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c86c:	f003 0320 	and.w	r3, r3, #32
 800c870:	2b00      	cmp	r3, #0
 800c872:	d002      	beq.n	800c87a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 fd72 	bl	800d35e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c884:	2b40      	cmp	r3, #64	@ 0x40
 800c886:	bf0c      	ite	eq
 800c888:	2301      	moveq	r3, #1
 800c88a:	2300      	movne	r3, #0
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c896:	f003 0308 	and.w	r3, r3, #8
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d103      	bne.n	800c8a6 <HAL_UART_IRQHandler+0x17a>
 800c89e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d04f      	beq.n	800c946 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 fc7a 	bl	800d1a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b6:	2b40      	cmp	r3, #64	@ 0x40
 800c8b8:	d141      	bne.n	800c93e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3314      	adds	r3, #20
 800c8c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c8d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	3314      	adds	r3, #20
 800c8e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c8e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c8ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c8f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c8f6:	e841 2300 	strex	r3, r2, [r1]
 800c8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c8fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1d9      	bne.n	800c8ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d013      	beq.n	800c936 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c912:	4a7e      	ldr	r2, [pc, #504]	@ (800cb0c <HAL_UART_IRQHandler+0x3e0>)
 800c914:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fc fd98 	bl	8009450 <HAL_DMA_Abort_IT>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d016      	beq.n	800c954 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c92a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c930:	4610      	mov	r0, r2
 800c932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c934:	e00e      	b.n	800c954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 f9a8 	bl	800cc8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c93c:	e00a      	b.n	800c954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f9a4 	bl	800cc8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c944:	e006      	b.n	800c954 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f000 f9a0 	bl	800cc8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c952:	e175      	b.n	800cc40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c954:	bf00      	nop
    return;
 800c956:	e173      	b.n	800cc40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c95c:	2b01      	cmp	r3, #1
 800c95e:	f040 814f 	bne.w	800cc00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c966:	f003 0310 	and.w	r3, r3, #16
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f000 8148 	beq.w	800cc00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c974:	f003 0310 	and.w	r3, r3, #16
 800c978:	2b00      	cmp	r3, #0
 800c97a:	f000 8141 	beq.w	800cc00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c97e:	2300      	movs	r3, #0
 800c980:	60bb      	str	r3, [r7, #8]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60bb      	str	r3, [r7, #8]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	60bb      	str	r3, [r7, #8]
 800c992:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c99e:	2b40      	cmp	r3, #64	@ 0x40
 800c9a0:	f040 80b6 	bne.w	800cb10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f000 8145 	beq.w	800cc44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c9be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	f080 813e 	bcs.w	800cc44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c9d4:	69db      	ldr	r3, [r3, #28]
 800c9d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9da:	f000 8088 	beq.w	800caee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	330c      	adds	r3, #12
 800c9e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c9ec:	e853 3f00 	ldrex	r3, [r3]
 800c9f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c9f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c9f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	330c      	adds	r3, #12
 800ca06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ca0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ca0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca1a:	e841 2300 	strex	r3, r2, [r1]
 800ca1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1d9      	bne.n	800c9de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	3314      	adds	r3, #20
 800ca30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca34:	e853 3f00 	ldrex	r3, [r3]
 800ca38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca3c:	f023 0301 	bic.w	r3, r3, #1
 800ca40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3314      	adds	r3, #20
 800ca4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca5a:	e841 2300 	strex	r3, r2, [r1]
 800ca5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e1      	bne.n	800ca2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	3314      	adds	r3, #20
 800ca6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca70:	e853 3f00 	ldrex	r3, [r3]
 800ca74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	3314      	adds	r3, #20
 800ca86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ca8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ca90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca92:	e841 2300 	strex	r3, r2, [r1]
 800ca96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ca98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1e3      	bne.n	800ca66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2220      	movs	r2, #32
 800caa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	330c      	adds	r3, #12
 800cab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab6:	e853 3f00 	ldrex	r3, [r3]
 800caba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cabc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cabe:	f023 0310 	bic.w	r3, r3, #16
 800cac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	330c      	adds	r3, #12
 800cacc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cad0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cad2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cad4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cad6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cad8:	e841 2300 	strex	r3, r2, [r1]
 800cadc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d1e3      	bne.n	800caac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fc fc41 	bl	8009370 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2202      	movs	r2, #2
 800caf2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 f8cb 	bl	800cca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb0a:	e09b      	b.n	800cc44 <HAL_UART_IRQHandler+0x518>
 800cb0c:	0800d267 	.word	0x0800d267
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f000 808e 	beq.w	800cc48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cb2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	f000 8089 	beq.w	800cc48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	330c      	adds	r3, #12
 800cb3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb40:	e853 3f00 	ldrex	r3, [r3]
 800cb44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	330c      	adds	r3, #12
 800cb56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800cb5a:	647a      	str	r2, [r7, #68]	@ 0x44
 800cb5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb62:	e841 2300 	strex	r3, r2, [r1]
 800cb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1e3      	bne.n	800cb36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	3314      	adds	r3, #20
 800cb74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	e853 3f00 	ldrex	r3, [r3]
 800cb7c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb7e:	6a3b      	ldr	r3, [r7, #32]
 800cb80:	f023 0301 	bic.w	r3, r3, #1
 800cb84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3314      	adds	r3, #20
 800cb8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cb92:	633a      	str	r2, [r7, #48]	@ 0x30
 800cb94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb9a:	e841 2300 	strex	r3, r2, [r1]
 800cb9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1e3      	bne.n	800cb6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2220      	movs	r2, #32
 800cbaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	330c      	adds	r3, #12
 800cbba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	e853 3f00 	ldrex	r3, [r3]
 800cbc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f023 0310 	bic.w	r3, r3, #16
 800cbca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	330c      	adds	r3, #12
 800cbd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800cbd8:	61fa      	str	r2, [r7, #28]
 800cbda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbdc:	69b9      	ldr	r1, [r7, #24]
 800cbde:	69fa      	ldr	r2, [r7, #28]
 800cbe0:	e841 2300 	strex	r3, r2, [r1]
 800cbe4:	617b      	str	r3, [r7, #20]
   return(result);
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e3      	bne.n	800cbb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2202      	movs	r2, #2
 800cbf0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cbf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f851 	bl	800cca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cbfe:	e023      	b.n	800cc48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d009      	beq.n	800cc20 <HAL_UART_IRQHandler+0x4f4>
 800cc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d003      	beq.n	800cc20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fb38 	bl	800d28e <UART_Transmit_IT>
    return;
 800cc1e:	e014      	b.n	800cc4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00e      	beq.n	800cc4a <HAL_UART_IRQHandler+0x51e>
 800cc2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d008      	beq.n	800cc4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fb78 	bl	800d32e <UART_EndTransmit_IT>
    return;
 800cc3e:	e004      	b.n	800cc4a <HAL_UART_IRQHandler+0x51e>
    return;
 800cc40:	bf00      	nop
 800cc42:	e002      	b.n	800cc4a <HAL_UART_IRQHandler+0x51e>
      return;
 800cc44:	bf00      	nop
 800cc46:	e000      	b.n	800cc4a <HAL_UART_IRQHandler+0x51e>
      return;
 800cc48:	bf00      	nop
  }
}
 800cc4a:	37e8      	adds	r7, #232	@ 0xe8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b090      	sub	sp, #64	@ 0x40
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d137      	bne.n	800cd44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ccd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ccda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	3314      	adds	r3, #20
 800cce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	623b      	str	r3, [r7, #32]
   return(result);
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ccf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ccf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	3314      	adds	r3, #20
 800ccf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccfa:	633a      	str	r2, [r7, #48]	@ 0x30
 800ccfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1e5      	bne.n	800ccda <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	330c      	adds	r3, #12
 800cd14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	e853 3f00 	ldrex	r3, [r3]
 800cd1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd24:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	330c      	adds	r3, #12
 800cd2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd2e:	61fa      	str	r2, [r7, #28]
 800cd30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd32:	69b9      	ldr	r1, [r7, #24]
 800cd34:	69fa      	ldr	r2, [r7, #28]
 800cd36:	e841 2300 	strex	r3, r2, [r1]
 800cd3a:	617b      	str	r3, [r7, #20]
   return(result);
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1e5      	bne.n	800cd0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd42:	e002      	b.n	800cd4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800cd44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cd46:	f7ff ff83 	bl	800cc50 <HAL_UART_TxCpltCallback>
}
 800cd4a:	bf00      	nop
 800cd4c:	3740      	adds	r7, #64	@ 0x40
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b084      	sub	sp, #16
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f7ff ff7f 	bl	800cc64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd66:	bf00      	nop
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b09c      	sub	sp, #112	@ 0x70
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d172      	bne.n	800ce70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800cd8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cd90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	330c      	adds	r3, #12
 800cd96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd9a:	e853 3f00 	ldrex	r3, [r3]
 800cd9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cda0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cda2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cda6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cda8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	330c      	adds	r3, #12
 800cdae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cdb0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cdb2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cdb6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdb8:	e841 2300 	strex	r3, r2, [r1]
 800cdbc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cdbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1e5      	bne.n	800cd90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3314      	adds	r3, #20
 800cdca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdce:	e853 3f00 	ldrex	r3, [r3]
 800cdd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd6:	f023 0301 	bic.w	r3, r3, #1
 800cdda:	667b      	str	r3, [r7, #100]	@ 0x64
 800cddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3314      	adds	r3, #20
 800cde2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cde4:	647a      	str	r2, [r7, #68]	@ 0x44
 800cde6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdec:	e841 2300 	strex	r3, r2, [r1]
 800cdf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1e5      	bne.n	800cdc4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3314      	adds	r3, #20
 800cdfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	e853 3f00 	ldrex	r3, [r3]
 800ce06:	623b      	str	r3, [r7, #32]
   return(result);
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce0e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	3314      	adds	r3, #20
 800ce16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce18:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce20:	e841 2300 	strex	r3, r2, [r1]
 800ce24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1e5      	bne.n	800cdf8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce2e:	2220      	movs	r2, #32
 800ce30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d119      	bne.n	800ce70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	330c      	adds	r3, #12
 800ce42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	e853 3f00 	ldrex	r3, [r3]
 800ce4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	f023 0310 	bic.w	r3, r3, #16
 800ce52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	330c      	adds	r3, #12
 800ce5a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ce5c:	61fa      	str	r2, [r7, #28]
 800ce5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce60:	69b9      	ldr	r1, [r7, #24]
 800ce62:	69fa      	ldr	r2, [r7, #28]
 800ce64:	e841 2300 	strex	r3, r2, [r1]
 800ce68:	617b      	str	r3, [r7, #20]
   return(result);
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1e5      	bne.n	800ce3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce72:	2200      	movs	r2, #0
 800ce74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d106      	bne.n	800ce8c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ce82:	4619      	mov	r1, r3
 800ce84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ce86:	f7ff ff0b 	bl	800cca0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ce8a:	e002      	b.n	800ce92 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ce8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ce8e:	f7fa f95b 	bl	8007148 <HAL_UART_RxCpltCallback>
}
 800ce92:	bf00      	nop
 800ce94:	3770      	adds	r7, #112	@ 0x70
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cea6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d108      	bne.n	800cec8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ceba:	085b      	lsrs	r3, r3, #1
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	4619      	mov	r1, r3
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7ff feed 	bl	800cca0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cec6:	e002      	b.n	800cece <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800cec8:	68f8      	ldr	r0, [r7, #12]
 800ceca:	f7ff fed5 	bl	800cc78 <HAL_UART_RxHalfCpltCallback>
}
 800cece:	bf00      	nop
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b084      	sub	sp, #16
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cede:	2300      	movs	r3, #0
 800cee0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cee6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	695b      	ldr	r3, [r3, #20]
 800ceee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cef2:	2b80      	cmp	r3, #128	@ 0x80
 800cef4:	bf0c      	ite	eq
 800cef6:	2301      	moveq	r3, #1
 800cef8:	2300      	movne	r3, #0
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	2b21      	cmp	r3, #33	@ 0x21
 800cf08:	d108      	bne.n	800cf1c <UART_DMAError+0x46>
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d005      	beq.n	800cf1c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2200      	movs	r2, #0
 800cf14:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800cf16:	68b8      	ldr	r0, [r7, #8]
 800cf18:	f000 f91a 	bl	800d150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf26:	2b40      	cmp	r3, #64	@ 0x40
 800cf28:	bf0c      	ite	eq
 800cf2a:	2301      	moveq	r3, #1
 800cf2c:	2300      	movne	r3, #0
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b22      	cmp	r3, #34	@ 0x22
 800cf3c:	d108      	bne.n	800cf50 <UART_DMAError+0x7a>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d005      	beq.n	800cf50 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	2200      	movs	r2, #0
 800cf48:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800cf4a:	68b8      	ldr	r0, [r7, #8]
 800cf4c:	f000 f928 	bl	800d1a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf54:	f043 0210 	orr.w	r2, r3, #16
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cf5c:	68b8      	ldr	r0, [r7, #8]
 800cf5e:	f7ff fe95 	bl	800cc8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b086      	sub	sp, #24
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	603b      	str	r3, [r7, #0]
 800cf76:	4613      	mov	r3, r2
 800cf78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf7a:	e03b      	b.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf82:	d037      	beq.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf84:	f7fb fbac 	bl	80086e0 <HAL_GetTick>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	6a3a      	ldr	r2, [r7, #32]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d302      	bcc.n	800cf9a <UART_WaitOnFlagUntilTimeout+0x30>
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e03a      	b.n	800d014 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d023      	beq.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b80      	cmp	r3, #128	@ 0x80
 800cfb0:	d020      	beq.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b40      	cmp	r3, #64	@ 0x40
 800cfb6:	d01d      	beq.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0308 	and.w	r3, r3, #8
 800cfc2:	2b08      	cmp	r3, #8
 800cfc4:	d116      	bne.n	800cff4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	617b      	str	r3, [r7, #20]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	617b      	str	r3, [r7, #20]
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f000 f8df 	bl	800d1a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2208      	movs	r2, #8
 800cfe6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e00f      	b.n	800d014 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	4013      	ands	r3, r2
 800cffe:	68ba      	ldr	r2, [r7, #8]
 800d000:	429a      	cmp	r2, r3
 800d002:	bf0c      	ite	eq
 800d004:	2301      	moveq	r3, #1
 800d006:	2300      	movne	r3, #0
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	461a      	mov	r2, r3
 800d00c:	79fb      	ldrb	r3, [r7, #7]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d0b4      	beq.n	800cf7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b098      	sub	sp, #96	@ 0x60
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	4613      	mov	r3, r2
 800d028:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	88fa      	ldrh	r2, [r7, #6]
 800d034:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2200      	movs	r2, #0
 800d03a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2222      	movs	r2, #34	@ 0x22
 800d040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d048:	4a3e      	ldr	r2, [pc, #248]	@ (800d144 <UART_Start_Receive_DMA+0x128>)
 800d04a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d050:	4a3d      	ldr	r2, [pc, #244]	@ (800d148 <UART_Start_Receive_DMA+0x12c>)
 800d052:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d058:	4a3c      	ldr	r2, [pc, #240]	@ (800d14c <UART_Start_Receive_DMA+0x130>)
 800d05a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d060:	2200      	movs	r2, #0
 800d062:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d064:	f107 0308 	add.w	r3, r7, #8
 800d068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3304      	adds	r3, #4
 800d074:	4619      	mov	r1, r3
 800d076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	88fb      	ldrh	r3, [r7, #6]
 800d07c:	f7fc f920 	bl	80092c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d080:	2300      	movs	r3, #0
 800d082:	613b      	str	r3, [r7, #16]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	613b      	str	r3, [r7, #16]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	613b      	str	r3, [r7, #16]
 800d094:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d019      	beq.n	800d0d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	330c      	adds	r3, #12
 800d0a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0a8:	e853 3f00 	ldrex	r3, [r3]
 800d0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d0ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	330c      	adds	r3, #12
 800d0bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d0c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d0c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d0c6:	e841 2300 	strex	r3, r2, [r1]
 800d0ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1e5      	bne.n	800d09e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3314      	adds	r3, #20
 800d0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e4:	f043 0301 	orr.w	r3, r3, #1
 800d0e8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3314      	adds	r3, #20
 800d0f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d0f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d0f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d0f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d0fa:	e841 2300 	strex	r3, r2, [r1]
 800d0fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1e5      	bne.n	800d0d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	3314      	adds	r3, #20
 800d10c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	e853 3f00 	ldrex	r3, [r3]
 800d114:	617b      	str	r3, [r7, #20]
   return(result);
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d11c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3314      	adds	r3, #20
 800d124:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d126:	627a      	str	r2, [r7, #36]	@ 0x24
 800d128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	6a39      	ldr	r1, [r7, #32]
 800d12c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	61fb      	str	r3, [r7, #28]
   return(result);
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e5      	bne.n	800d106 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3760      	adds	r7, #96	@ 0x60
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	0800cd6f 	.word	0x0800cd6f
 800d148:	0800ce9b 	.word	0x0800ce9b
 800d14c:	0800ced7 	.word	0x0800ced7

0800d150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d150:	b480      	push	{r7}
 800d152:	b089      	sub	sp, #36	@ 0x24
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	330c      	adds	r3, #12
 800d15e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	e853 3f00 	ldrex	r3, [r3]
 800d166:	60bb      	str	r3, [r7, #8]
   return(result);
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d16e:	61fb      	str	r3, [r7, #28]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	330c      	adds	r3, #12
 800d176:	69fa      	ldr	r2, [r7, #28]
 800d178:	61ba      	str	r2, [r7, #24]
 800d17a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d17c:	6979      	ldr	r1, [r7, #20]
 800d17e:	69ba      	ldr	r2, [r7, #24]
 800d180:	e841 2300 	strex	r3, r2, [r1]
 800d184:	613b      	str	r3, [r7, #16]
   return(result);
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1e5      	bne.n	800d158 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2220      	movs	r2, #32
 800d190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d194:	bf00      	nop
 800d196:	3724      	adds	r7, #36	@ 0x24
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b095      	sub	sp, #84	@ 0x54
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	330c      	adds	r3, #12
 800d1ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	330c      	adds	r3, #12
 800d1c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1c8:	643a      	str	r2, [r7, #64]	@ 0x40
 800d1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e5      	bne.n	800d1a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3314      	adds	r3, #20
 800d1e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e4:	6a3b      	ldr	r3, [r7, #32]
 800d1e6:	e853 3f00 	ldrex	r3, [r3]
 800d1ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	f023 0301 	bic.w	r3, r3, #1
 800d1f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3314      	adds	r3, #20
 800d1fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d1fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d200:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e5      	bne.n	800d1dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d214:	2b01      	cmp	r3, #1
 800d216:	d119      	bne.n	800d24c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	330c      	adds	r3, #12
 800d21e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	e853 3f00 	ldrex	r3, [r3]
 800d226:	60bb      	str	r3, [r7, #8]
   return(result);
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f023 0310 	bic.w	r3, r3, #16
 800d22e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	330c      	adds	r3, #12
 800d236:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d238:	61ba      	str	r2, [r7, #24]
 800d23a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d23c:	6979      	ldr	r1, [r7, #20]
 800d23e:	69ba      	ldr	r2, [r7, #24]
 800d240:	e841 2300 	strex	r3, r2, [r1]
 800d244:	613b      	str	r3, [r7, #16]
   return(result);
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1e5      	bne.n	800d218 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2220      	movs	r2, #32
 800d250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d25a:	bf00      	nop
 800d25c:	3754      	adds	r7, #84	@ 0x54
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d272:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f7ff fd03 	bl	800cc8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}

0800d28e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d28e:	b480      	push	{r7}
 800d290:	b085      	sub	sp, #20
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b21      	cmp	r3, #33	@ 0x21
 800d2a0:	d13e      	bne.n	800d320 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	689b      	ldr	r3, [r3, #8]
 800d2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2aa:	d114      	bne.n	800d2d6 <UART_Transmit_IT+0x48>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	691b      	ldr	r3, [r3, #16]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d110      	bne.n	800d2d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a1b      	ldr	r3, [r3, #32]
 800d2ce:	1c9a      	adds	r2, r3, #2
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	621a      	str	r2, [r3, #32]
 800d2d4:	e008      	b.n	800d2e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a1b      	ldr	r3, [r3, #32]
 800d2da:	1c59      	adds	r1, r3, #1
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	6211      	str	r1, [r2, #32]
 800d2e0:	781a      	ldrb	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d10f      	bne.n	800d31c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d30a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68da      	ldr	r2, [r3, #12]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d31a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d31c:	2300      	movs	r3, #0
 800d31e:	e000      	b.n	800d322 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d320:	2302      	movs	r3, #2
  }
}
 800d322:	4618      	mov	r0, r3
 800d324:	3714      	adds	r7, #20
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b082      	sub	sp, #8
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	68da      	ldr	r2, [r3, #12]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d344:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2220      	movs	r2, #32
 800d34a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7ff fc7e 	bl	800cc50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d354:	2300      	movs	r3, #0
}
 800d356:	4618      	mov	r0, r3
 800d358:	3708      	adds	r7, #8
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b08c      	sub	sp, #48	@ 0x30
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	2b22      	cmp	r3, #34	@ 0x22
 800d370:	f040 80ae 	bne.w	800d4d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	689b      	ldr	r3, [r3, #8]
 800d378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d37c:	d117      	bne.n	800d3ae <UART_Receive_IT+0x50>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	691b      	ldr	r3, [r3, #16]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d113      	bne.n	800d3ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d386:	2300      	movs	r3, #0
 800d388:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d38e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	b29b      	uxth	r3, r3
 800d398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a6:	1c9a      	adds	r2, r3, #2
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800d3ac:	e026      	b.n	800d3fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	689b      	ldr	r3, [r3, #8]
 800d3bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3c0:	d007      	beq.n	800d3d2 <UART_Receive_IT+0x74>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10a      	bne.n	800d3e0 <UART_Receive_IT+0x82>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	691b      	ldr	r3, [r3, #16]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d106      	bne.n	800d3e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3dc:	701a      	strb	r2, [r3, #0]
 800d3de:	e008      	b.n	800d3f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3ec:	b2da      	uxtb	r2, r3
 800d3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29b      	uxth	r3, r3
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	4619      	mov	r1, r3
 800d40a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d15d      	bne.n	800d4cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	68da      	ldr	r2, [r3, #12]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	f022 0220 	bic.w	r2, r2, #32
 800d41e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68da      	ldr	r2, [r3, #12]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d42e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	695a      	ldr	r2, [r3, #20]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f022 0201 	bic.w	r2, r2, #1
 800d43e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2220      	movs	r2, #32
 800d444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d452:	2b01      	cmp	r3, #1
 800d454:	d135      	bne.n	800d4c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	330c      	adds	r3, #12
 800d462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	e853 3f00 	ldrex	r3, [r3]
 800d46a:	613b      	str	r3, [r7, #16]
   return(result);
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	f023 0310 	bic.w	r3, r3, #16
 800d472:	627b      	str	r3, [r7, #36]	@ 0x24
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	330c      	adds	r3, #12
 800d47a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d47c:	623a      	str	r2, [r7, #32]
 800d47e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d480:	69f9      	ldr	r1, [r7, #28]
 800d482:	6a3a      	ldr	r2, [r7, #32]
 800d484:	e841 2300 	strex	r3, r2, [r1]
 800d488:	61bb      	str	r3, [r7, #24]
   return(result);
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1e5      	bne.n	800d45c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f003 0310 	and.w	r3, r3, #16
 800d49a:	2b10      	cmp	r3, #16
 800d49c:	d10a      	bne.n	800d4b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d49e:	2300      	movs	r3, #0
 800d4a0:	60fb      	str	r3, [r7, #12]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d4b8:	4619      	mov	r1, r3
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7ff fbf0 	bl	800cca0 <HAL_UARTEx_RxEventCallback>
 800d4c0:	e002      	b.n	800d4c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7f9 fe40 	bl	8007148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	e002      	b.n	800d4d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	e000      	b.n	800d4d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d4d0:	2302      	movs	r3, #2
  }
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3730      	adds	r7, #48	@ 0x30
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
	...

0800d4dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4e0:	b0c0      	sub	sp, #256	@ 0x100
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	691b      	ldr	r3, [r3, #16]
 800d4f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4f8:	68d9      	ldr	r1, [r3, #12]
 800d4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	ea40 0301 	orr.w	r3, r0, r1
 800d504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d50a:	689a      	ldr	r2, [r3, #8]
 800d50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d510:	691b      	ldr	r3, [r3, #16]
 800d512:	431a      	orrs	r2, r3
 800d514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	431a      	orrs	r2, r3
 800d51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	4313      	orrs	r3, r2
 800d524:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800d534:	f021 010c 	bic.w	r1, r1, #12
 800d538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d542:	430b      	orrs	r3, r1
 800d544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	695b      	ldr	r3, [r3, #20]
 800d54e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800d552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d556:	6999      	ldr	r1, [r3, #24]
 800d558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	ea40 0301 	orr.w	r3, r0, r1
 800d562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4b8f      	ldr	r3, [pc, #572]	@ (800d7a8 <UART_SetConfig+0x2cc>)
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d005      	beq.n	800d57c <UART_SetConfig+0xa0>
 800d570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	4b8d      	ldr	r3, [pc, #564]	@ (800d7ac <UART_SetConfig+0x2d0>)
 800d578:	429a      	cmp	r2, r3
 800d57a:	d104      	bne.n	800d586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d57c:	f7fd fa76 	bl	800aa6c <HAL_RCC_GetPCLK2Freq>
 800d580:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800d584:	e003      	b.n	800d58e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d586:	f7fd fa5d 	bl	800aa44 <HAL_RCC_GetPCLK1Freq>
 800d58a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d592:	69db      	ldr	r3, [r3, #28]
 800d594:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d598:	f040 810c 	bne.w	800d7b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d5a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800d5aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800d5ae:	4622      	mov	r2, r4
 800d5b0:	462b      	mov	r3, r5
 800d5b2:	1891      	adds	r1, r2, r2
 800d5b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800d5b6:	415b      	adcs	r3, r3
 800d5b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d5ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d5be:	4621      	mov	r1, r4
 800d5c0:	eb12 0801 	adds.w	r8, r2, r1
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	eb43 0901 	adc.w	r9, r3, r1
 800d5ca:	f04f 0200 	mov.w	r2, #0
 800d5ce:	f04f 0300 	mov.w	r3, #0
 800d5d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d5d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d5da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d5de:	4690      	mov	r8, r2
 800d5e0:	4699      	mov	r9, r3
 800d5e2:	4623      	mov	r3, r4
 800d5e4:	eb18 0303 	adds.w	r3, r8, r3
 800d5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d5ec:	462b      	mov	r3, r5
 800d5ee:	eb49 0303 	adc.w	r3, r9, r3
 800d5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d602:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800d606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d60a:	460b      	mov	r3, r1
 800d60c:	18db      	adds	r3, r3, r3
 800d60e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d610:	4613      	mov	r3, r2
 800d612:	eb42 0303 	adc.w	r3, r2, r3
 800d616:	657b      	str	r3, [r7, #84]	@ 0x54
 800d618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800d61c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800d620:	f7f3 fb42 	bl	8000ca8 <__aeabi_uldivmod>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	4b61      	ldr	r3, [pc, #388]	@ (800d7b0 <UART_SetConfig+0x2d4>)
 800d62a:	fba3 2302 	umull	r2, r3, r3, r2
 800d62e:	095b      	lsrs	r3, r3, #5
 800d630:	011c      	lsls	r4, r3, #4
 800d632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d636:	2200      	movs	r2, #0
 800d638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d63c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d644:	4642      	mov	r2, r8
 800d646:	464b      	mov	r3, r9
 800d648:	1891      	adds	r1, r2, r2
 800d64a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d64c:	415b      	adcs	r3, r3
 800d64e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d654:	4641      	mov	r1, r8
 800d656:	eb12 0a01 	adds.w	sl, r2, r1
 800d65a:	4649      	mov	r1, r9
 800d65c:	eb43 0b01 	adc.w	fp, r3, r1
 800d660:	f04f 0200 	mov.w	r2, #0
 800d664:	f04f 0300 	mov.w	r3, #0
 800d668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d66c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d674:	4692      	mov	sl, r2
 800d676:	469b      	mov	fp, r3
 800d678:	4643      	mov	r3, r8
 800d67a:	eb1a 0303 	adds.w	r3, sl, r3
 800d67e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d682:	464b      	mov	r3, r9
 800d684:	eb4b 0303 	adc.w	r3, fp, r3
 800d688:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d698:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d69c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d6a0:	460b      	mov	r3, r1
 800d6a2:	18db      	adds	r3, r3, r3
 800d6a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	eb42 0303 	adc.w	r3, r2, r3
 800d6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d6b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d6b6:	f7f3 faf7 	bl	8000ca8 <__aeabi_uldivmod>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	4611      	mov	r1, r2
 800d6c0:	4b3b      	ldr	r3, [pc, #236]	@ (800d7b0 <UART_SetConfig+0x2d4>)
 800d6c2:	fba3 2301 	umull	r2, r3, r3, r1
 800d6c6:	095b      	lsrs	r3, r3, #5
 800d6c8:	2264      	movs	r2, #100	@ 0x64
 800d6ca:	fb02 f303 	mul.w	r3, r2, r3
 800d6ce:	1acb      	subs	r3, r1, r3
 800d6d0:	00db      	lsls	r3, r3, #3
 800d6d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d6d6:	4b36      	ldr	r3, [pc, #216]	@ (800d7b0 <UART_SetConfig+0x2d4>)
 800d6d8:	fba3 2302 	umull	r2, r3, r3, r2
 800d6dc:	095b      	lsrs	r3, r3, #5
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d6e4:	441c      	add	r4, r3
 800d6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d6f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d6f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	464b      	mov	r3, r9
 800d6fc:	1891      	adds	r1, r2, r2
 800d6fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d700:	415b      	adcs	r3, r3
 800d702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d708:	4641      	mov	r1, r8
 800d70a:	1851      	adds	r1, r2, r1
 800d70c:	6339      	str	r1, [r7, #48]	@ 0x30
 800d70e:	4649      	mov	r1, r9
 800d710:	414b      	adcs	r3, r1
 800d712:	637b      	str	r3, [r7, #52]	@ 0x34
 800d714:	f04f 0200 	mov.w	r2, #0
 800d718:	f04f 0300 	mov.w	r3, #0
 800d71c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d720:	4659      	mov	r1, fp
 800d722:	00cb      	lsls	r3, r1, #3
 800d724:	4651      	mov	r1, sl
 800d726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d72a:	4651      	mov	r1, sl
 800d72c:	00ca      	lsls	r2, r1, #3
 800d72e:	4610      	mov	r0, r2
 800d730:	4619      	mov	r1, r3
 800d732:	4603      	mov	r3, r0
 800d734:	4642      	mov	r2, r8
 800d736:	189b      	adds	r3, r3, r2
 800d738:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d73c:	464b      	mov	r3, r9
 800d73e:	460a      	mov	r2, r1
 800d740:	eb42 0303 	adc.w	r3, r2, r3
 800d744:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d754:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d75c:	460b      	mov	r3, r1
 800d75e:	18db      	adds	r3, r3, r3
 800d760:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d762:	4613      	mov	r3, r2
 800d764:	eb42 0303 	adc.w	r3, r2, r3
 800d768:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d76a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d76e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d772:	f7f3 fa99 	bl	8000ca8 <__aeabi_uldivmod>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b0 <UART_SetConfig+0x2d4>)
 800d77c:	fba3 1302 	umull	r1, r3, r3, r2
 800d780:	095b      	lsrs	r3, r3, #5
 800d782:	2164      	movs	r1, #100	@ 0x64
 800d784:	fb01 f303 	mul.w	r3, r1, r3
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	00db      	lsls	r3, r3, #3
 800d78c:	3332      	adds	r3, #50	@ 0x32
 800d78e:	4a08      	ldr	r2, [pc, #32]	@ (800d7b0 <UART_SetConfig+0x2d4>)
 800d790:	fba2 2303 	umull	r2, r3, r2, r3
 800d794:	095b      	lsrs	r3, r3, #5
 800d796:	f003 0207 	and.w	r2, r3, #7
 800d79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4422      	add	r2, r4
 800d7a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d7a4:	e106      	b.n	800d9b4 <UART_SetConfig+0x4d8>
 800d7a6:	bf00      	nop
 800d7a8:	40011000 	.word	0x40011000
 800d7ac:	40011400 	.word	0x40011400
 800d7b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d7be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d7c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d7c6:	4642      	mov	r2, r8
 800d7c8:	464b      	mov	r3, r9
 800d7ca:	1891      	adds	r1, r2, r2
 800d7cc:	6239      	str	r1, [r7, #32]
 800d7ce:	415b      	adcs	r3, r3
 800d7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d7d6:	4641      	mov	r1, r8
 800d7d8:	1854      	adds	r4, r2, r1
 800d7da:	4649      	mov	r1, r9
 800d7dc:	eb43 0501 	adc.w	r5, r3, r1
 800d7e0:	f04f 0200 	mov.w	r2, #0
 800d7e4:	f04f 0300 	mov.w	r3, #0
 800d7e8:	00eb      	lsls	r3, r5, #3
 800d7ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d7ee:	00e2      	lsls	r2, r4, #3
 800d7f0:	4614      	mov	r4, r2
 800d7f2:	461d      	mov	r5, r3
 800d7f4:	4643      	mov	r3, r8
 800d7f6:	18e3      	adds	r3, r4, r3
 800d7f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d7fc:	464b      	mov	r3, r9
 800d7fe:	eb45 0303 	adc.w	r3, r5, r3
 800d802:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d812:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d816:	f04f 0200 	mov.w	r2, #0
 800d81a:	f04f 0300 	mov.w	r3, #0
 800d81e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d822:	4629      	mov	r1, r5
 800d824:	008b      	lsls	r3, r1, #2
 800d826:	4621      	mov	r1, r4
 800d828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d82c:	4621      	mov	r1, r4
 800d82e:	008a      	lsls	r2, r1, #2
 800d830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d834:	f7f3 fa38 	bl	8000ca8 <__aeabi_uldivmod>
 800d838:	4602      	mov	r2, r0
 800d83a:	460b      	mov	r3, r1
 800d83c:	4b60      	ldr	r3, [pc, #384]	@ (800d9c0 <UART_SetConfig+0x4e4>)
 800d83e:	fba3 2302 	umull	r2, r3, r3, r2
 800d842:	095b      	lsrs	r3, r3, #5
 800d844:	011c      	lsls	r4, r3, #4
 800d846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d84a:	2200      	movs	r2, #0
 800d84c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d850:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d858:	4642      	mov	r2, r8
 800d85a:	464b      	mov	r3, r9
 800d85c:	1891      	adds	r1, r2, r2
 800d85e:	61b9      	str	r1, [r7, #24]
 800d860:	415b      	adcs	r3, r3
 800d862:	61fb      	str	r3, [r7, #28]
 800d864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d868:	4641      	mov	r1, r8
 800d86a:	1851      	adds	r1, r2, r1
 800d86c:	6139      	str	r1, [r7, #16]
 800d86e:	4649      	mov	r1, r9
 800d870:	414b      	adcs	r3, r1
 800d872:	617b      	str	r3, [r7, #20]
 800d874:	f04f 0200 	mov.w	r2, #0
 800d878:	f04f 0300 	mov.w	r3, #0
 800d87c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d880:	4659      	mov	r1, fp
 800d882:	00cb      	lsls	r3, r1, #3
 800d884:	4651      	mov	r1, sl
 800d886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d88a:	4651      	mov	r1, sl
 800d88c:	00ca      	lsls	r2, r1, #3
 800d88e:	4610      	mov	r0, r2
 800d890:	4619      	mov	r1, r3
 800d892:	4603      	mov	r3, r0
 800d894:	4642      	mov	r2, r8
 800d896:	189b      	adds	r3, r3, r2
 800d898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d89c:	464b      	mov	r3, r9
 800d89e:	460a      	mov	r2, r1
 800d8a0:	eb42 0303 	adc.w	r3, r2, r3
 800d8a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d8b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d8b4:	f04f 0200 	mov.w	r2, #0
 800d8b8:	f04f 0300 	mov.w	r3, #0
 800d8bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d8c0:	4649      	mov	r1, r9
 800d8c2:	008b      	lsls	r3, r1, #2
 800d8c4:	4641      	mov	r1, r8
 800d8c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d8ca:	4641      	mov	r1, r8
 800d8cc:	008a      	lsls	r2, r1, #2
 800d8ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d8d2:	f7f3 f9e9 	bl	8000ca8 <__aeabi_uldivmod>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4611      	mov	r1, r2
 800d8dc:	4b38      	ldr	r3, [pc, #224]	@ (800d9c0 <UART_SetConfig+0x4e4>)
 800d8de:	fba3 2301 	umull	r2, r3, r3, r1
 800d8e2:	095b      	lsrs	r3, r3, #5
 800d8e4:	2264      	movs	r2, #100	@ 0x64
 800d8e6:	fb02 f303 	mul.w	r3, r2, r3
 800d8ea:	1acb      	subs	r3, r1, r3
 800d8ec:	011b      	lsls	r3, r3, #4
 800d8ee:	3332      	adds	r3, #50	@ 0x32
 800d8f0:	4a33      	ldr	r2, [pc, #204]	@ (800d9c0 <UART_SetConfig+0x4e4>)
 800d8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d8f6:	095b      	lsrs	r3, r3, #5
 800d8f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8fc:	441c      	add	r4, r3
 800d8fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d902:	2200      	movs	r2, #0
 800d904:	673b      	str	r3, [r7, #112]	@ 0x70
 800d906:	677a      	str	r2, [r7, #116]	@ 0x74
 800d908:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d90c:	4642      	mov	r2, r8
 800d90e:	464b      	mov	r3, r9
 800d910:	1891      	adds	r1, r2, r2
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	415b      	adcs	r3, r3
 800d916:	60fb      	str	r3, [r7, #12]
 800d918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d91c:	4641      	mov	r1, r8
 800d91e:	1851      	adds	r1, r2, r1
 800d920:	6039      	str	r1, [r7, #0]
 800d922:	4649      	mov	r1, r9
 800d924:	414b      	adcs	r3, r1
 800d926:	607b      	str	r3, [r7, #4]
 800d928:	f04f 0200 	mov.w	r2, #0
 800d92c:	f04f 0300 	mov.w	r3, #0
 800d930:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d934:	4659      	mov	r1, fp
 800d936:	00cb      	lsls	r3, r1, #3
 800d938:	4651      	mov	r1, sl
 800d93a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d93e:	4651      	mov	r1, sl
 800d940:	00ca      	lsls	r2, r1, #3
 800d942:	4610      	mov	r0, r2
 800d944:	4619      	mov	r1, r3
 800d946:	4603      	mov	r3, r0
 800d948:	4642      	mov	r2, r8
 800d94a:	189b      	adds	r3, r3, r2
 800d94c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d94e:	464b      	mov	r3, r9
 800d950:	460a      	mov	r2, r1
 800d952:	eb42 0303 	adc.w	r3, r2, r3
 800d956:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	663b      	str	r3, [r7, #96]	@ 0x60
 800d962:	667a      	str	r2, [r7, #100]	@ 0x64
 800d964:	f04f 0200 	mov.w	r2, #0
 800d968:	f04f 0300 	mov.w	r3, #0
 800d96c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d970:	4649      	mov	r1, r9
 800d972:	008b      	lsls	r3, r1, #2
 800d974:	4641      	mov	r1, r8
 800d976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d97a:	4641      	mov	r1, r8
 800d97c:	008a      	lsls	r2, r1, #2
 800d97e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d982:	f7f3 f991 	bl	8000ca8 <__aeabi_uldivmod>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c0 <UART_SetConfig+0x4e4>)
 800d98c:	fba3 1302 	umull	r1, r3, r3, r2
 800d990:	095b      	lsrs	r3, r3, #5
 800d992:	2164      	movs	r1, #100	@ 0x64
 800d994:	fb01 f303 	mul.w	r3, r1, r3
 800d998:	1ad3      	subs	r3, r2, r3
 800d99a:	011b      	lsls	r3, r3, #4
 800d99c:	3332      	adds	r3, #50	@ 0x32
 800d99e:	4a08      	ldr	r2, [pc, #32]	@ (800d9c0 <UART_SetConfig+0x4e4>)
 800d9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d9a4:	095b      	lsrs	r3, r3, #5
 800d9a6:	f003 020f 	and.w	r2, r3, #15
 800d9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4422      	add	r2, r4
 800d9b2:	609a      	str	r2, [r3, #8]
}
 800d9b4:	bf00      	nop
 800d9b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9c0:	51eb851f 	.word	0x51eb851f

0800d9c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9c4:	b084      	sub	sp, #16
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b084      	sub	sp, #16
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
 800d9ce:	f107 001c 	add.w	r0, r7, #28
 800d9d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d9d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d123      	bne.n	800da26 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d9f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d105      	bne.n	800da1a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f901 	bl	800dc22 <USB_CoreReset>
 800da20:	4603      	mov	r3, r0
 800da22:	73fb      	strb	r3, [r7, #15]
 800da24:	e01b      	b.n	800da5e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f8f5 	bl	800dc22 <USB_CoreReset>
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800da40:	2b00      	cmp	r3, #0
 800da42:	d106      	bne.n	800da52 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	639a      	str	r2, [r3, #56]	@ 0x38
 800da50:	e005      	b.n	800da5e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800da5e:	7fbb      	ldrb	r3, [r7, #30]
 800da60:	2b01      	cmp	r3, #1
 800da62:	d10b      	bne.n	800da7c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	f043 0206 	orr.w	r2, r3, #6
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	f043 0220 	orr.w	r2, r3, #32
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800da88:	b004      	add	sp, #16
 800da8a:	4770      	bx	lr

0800da8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	689b      	ldr	r3, [r3, #8]
 800da98:	f023 0201 	bic.w	r2, r3, #1
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	370c      	adds	r7, #12
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr

0800daae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b084      	sub	sp, #16
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800daca:	78fb      	ldrb	r3, [r7, #3]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d115      	bne.n	800dafc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68db      	ldr	r3, [r3, #12]
 800dad4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dadc:	200a      	movs	r0, #10
 800dade:	f7fa fe0b 	bl	80086f8 <HAL_Delay>
      ms += 10U;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	330a      	adds	r3, #10
 800dae6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 f88c 	bl	800dc06 <USB_GetMode>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d01e      	beq.n	800db32 <USB_SetCurrentMode+0x84>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2bc7      	cmp	r3, #199	@ 0xc7
 800daf8:	d9f0      	bls.n	800dadc <USB_SetCurrentMode+0x2e>
 800dafa:	e01a      	b.n	800db32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dafc:	78fb      	ldrb	r3, [r7, #3]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d115      	bne.n	800db2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800db0e:	200a      	movs	r0, #10
 800db10:	f7fa fdf2 	bl	80086f8 <HAL_Delay>
      ms += 10U;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	330a      	adds	r3, #10
 800db18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 f873 	bl	800dc06 <USB_GetMode>
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d005      	beq.n	800db32 <USB_SetCurrentMode+0x84>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2bc7      	cmp	r3, #199	@ 0xc7
 800db2a:	d9f0      	bls.n	800db0e <USB_SetCurrentMode+0x60>
 800db2c:	e001      	b.n	800db32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e005      	b.n	800db3e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2bc8      	cmp	r3, #200	@ 0xc8
 800db36:	d101      	bne.n	800db3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db38:	2301      	movs	r3, #1
 800db3a:	e000      	b.n	800db3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3710      	adds	r7, #16
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}

0800db46 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800db46:	b480      	push	{r7}
 800db48:	b085      	sub	sp, #20
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800db50:	2300      	movs	r3, #0
 800db52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3301      	adds	r3, #1
 800db58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db60:	d901      	bls.n	800db66 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800db62:	2303      	movs	r3, #3
 800db64:	e01b      	b.n	800db9e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	daf2      	bge.n	800db54 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800db6e:	2300      	movs	r3, #0
 800db70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	019b      	lsls	r3, r3, #6
 800db76:	f043 0220 	orr.w	r2, r3, #32
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3301      	adds	r3, #1
 800db82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db8a:	d901      	bls.n	800db90 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800db8c:	2303      	movs	r3, #3
 800db8e:	e006      	b.n	800db9e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	691b      	ldr	r3, [r3, #16]
 800db94:	f003 0320 	and.w	r3, r3, #32
 800db98:	2b20      	cmp	r3, #32
 800db9a:	d0f0      	beq.n	800db7e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr

0800dbaa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b085      	sub	sp, #20
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbc2:	d901      	bls.n	800dbc8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dbc4:	2303      	movs	r3, #3
 800dbc6:	e018      	b.n	800dbfa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	691b      	ldr	r3, [r3, #16]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	daf2      	bge.n	800dbb6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2210      	movs	r2, #16
 800dbd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dbe6:	d901      	bls.n	800dbec <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	e006      	b.n	800dbfa <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	691b      	ldr	r3, [r3, #16]
 800dbf0:	f003 0310 	and.w	r3, r3, #16
 800dbf4:	2b10      	cmp	r3, #16
 800dbf6:	d0f0      	beq.n	800dbda <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr

0800dc06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dc06:	b480      	push	{r7}
 800dc08:	b083      	sub	sp, #12
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	695b      	ldr	r3, [r3, #20]
 800dc12:	f003 0301 	and.w	r3, r3, #1
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc22:	b480      	push	{r7}
 800dc24:	b085      	sub	sp, #20
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3301      	adds	r3, #1
 800dc32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc3a:	d901      	bls.n	800dc40 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	e01b      	b.n	800dc78 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	daf2      	bge.n	800dc2e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	f043 0201 	orr.w	r2, r3, #1
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc64:	d901      	bls.n	800dc6a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dc66:	2303      	movs	r3, #3
 800dc68:	e006      	b.n	800dc78 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	f003 0301 	and.w	r3, r3, #1
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d0f0      	beq.n	800dc58 <USB_CoreReset+0x36>

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3714      	adds	r7, #20
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc84:	b084      	sub	sp, #16
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b086      	sub	sp, #24
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
 800dc8e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dc92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dc96:	2300      	movs	r3, #0
 800dc98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dca4:	461a      	mov	r2, r3
 800dca6:	2300      	movs	r3, #0
 800dca8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcc6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d119      	bne.n	800dd0e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800dcda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d10a      	bne.n	800dcf8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68fa      	ldr	r2, [r7, #12]
 800dcec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dcf0:	f043 0304 	orr.w	r3, r3, #4
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	e014      	b.n	800dd22 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd06:	f023 0304 	bic.w	r3, r3, #4
 800dd0a:	6013      	str	r3, [r2, #0]
 800dd0c:	e009      	b.n	800dd22 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68fa      	ldr	r2, [r7, #12]
 800dd18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800dd1c:	f023 0304 	bic.w	r3, r3, #4
 800dd20:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd22:	2110      	movs	r1, #16
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f7ff ff0e 	bl	800db46 <USB_FlushTxFifo>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7ff ff38 	bl	800dbaa <USB_FlushRxFifo>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800dd40:	2301      	movs	r3, #1
 800dd42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]
 800dd48:	e015      	b.n	800dd76 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	015a      	lsls	r2, r3, #5
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	4413      	add	r3, r2
 800dd52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd56:	461a      	mov	r2, r3
 800dd58:	f04f 33ff 	mov.w	r3, #4294967295
 800dd5c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	015a      	lsls	r2, r3, #5
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	4413      	add	r3, r2
 800dd66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	3301      	adds	r3, #1
 800dd74:	613b      	str	r3, [r7, #16]
 800dd76:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d3e3      	bcc.n	800dd4a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2200      	movs	r2, #0
 800dd86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	4a18      	ldr	r2, [pc, #96]	@ (800ddf4 <USB_HostInit+0x170>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d10b      	bne.n	800ddb0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd9e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a15      	ldr	r2, [pc, #84]	@ (800ddf8 <USB_HostInit+0x174>)
 800dda4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	4a14      	ldr	r2, [pc, #80]	@ (800ddfc <USB_HostInit+0x178>)
 800ddaa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800ddae:	e009      	b.n	800ddc4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2280      	movs	r2, #128	@ 0x80
 800ddb4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	4a11      	ldr	r2, [pc, #68]	@ (800de00 <USB_HostInit+0x17c>)
 800ddba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a11      	ldr	r2, [pc, #68]	@ (800de04 <USB_HostInit+0x180>)
 800ddc0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ddc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	f043 0210 	orr.w	r2, r3, #16
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	699a      	ldr	r2, [r3, #24]
 800dddc:	4b0a      	ldr	r3, [pc, #40]	@ (800de08 <USB_HostInit+0x184>)
 800ddde:	4313      	orrs	r3, r2
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800dde4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3718      	adds	r7, #24
 800ddea:	46bd      	mov	sp, r7
 800ddec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddf0:	b004      	add	sp, #16
 800ddf2:	4770      	bx	lr
 800ddf4:	40040000 	.word	0x40040000
 800ddf8:	01000200 	.word	0x01000200
 800ddfc:	00e00300 	.word	0x00e00300
 800de00:	00600080 	.word	0x00600080
 800de04:	004000e0 	.word	0x004000e0
 800de08:	a3200008 	.word	0xa3200008

0800de0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800de10:	4904      	ldr	r1, [pc, #16]	@ (800de24 <MX_FATFS_Init+0x18>)
 800de12:	4805      	ldr	r0, [pc, #20]	@ (800de28 <MX_FATFS_Init+0x1c>)
 800de14:	f003 fd3c 	bl	8011890 <FATFS_LinkDriver>
 800de18:	4603      	mov	r3, r0
 800de1a:	461a      	mov	r2, r3
 800de1c:	4b03      	ldr	r3, [pc, #12]	@ (800de2c <MX_FATFS_Init+0x20>)
 800de1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de20:	bf00      	nop
 800de22:	bd80      	pop	{r7, pc}
 800de24:	200031a0 	.word	0x200031a0
 800de28:	20000154 	.word	0x20000154
 800de2c:	2000319c 	.word	0x2000319c

0800de30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de30:	b480      	push	{r7}
 800de32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de36:	4618      	mov	r0, r3
 800de38:	46bd      	mov	sp, r7
 800de3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3e:	4770      	bx	lr

0800de40 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		  /*Stat = STA_NOINIT;
		    return Stat;*/
			return SD_disk_initialize(pdrv);
 800de4a:	79fb      	ldrb	r3, [r7, #7]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7f8 fb33 	bl	80064b8 <SD_disk_initialize>
 800de52:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800de54:	4618      	mov	r0, r3
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	4603      	mov	r3, r0
 800de64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		 /*Stat = STA_NOINIT;
		    return Stat;*/
			return SD_disk_status(pdrv);
 800de66:	79fb      	ldrb	r3, [r7, #7]
 800de68:	4618      	mov	r0, r3
 800de6a:	f7f8 fc11 	bl	8006690 <SD_disk_status>
 800de6e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60b9      	str	r1, [r7, #8]
 800de80:	607a      	str	r2, [r7, #4]
 800de82:	603b      	str	r3, [r7, #0]
 800de84:	4603      	mov	r3, r0
 800de86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
		 // return RES_OK;
			return SD_disk_read(pdrv,buff,sector,count);
 800de88:	7bf8      	ldrb	r0, [r7, #15]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	f7f8 fc14 	bl	80066bc <SD_disk_read>
 800de94:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800de96:	4618      	mov	r0, r3
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b084      	sub	sp, #16
 800dea2:	af00      	add	r7, sp, #0
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	603b      	str	r3, [r7, #0]
 800deaa:	4603      	mov	r3, r0
 800deac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	  /* USER CODE HERE */
		// return RES_OK;
			return SD_disk_write(pdrv,buff,sector,count);
 800deae:	7bf8      	ldrb	r0, [r7, #15]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	f7f8 fc6b 	bl	8006790 <SD_disk_write>
 800deba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	4603      	mov	r3, r0
 800decc:	603a      	str	r2, [r7, #0]
 800dece:	71fb      	strb	r3, [r7, #7]
 800ded0:	460b      	mov	r3, r1
 800ded2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
		/* DRESULT res = RES_ERROR;
		    return res;*/
			return SD_disk_ioctl(pdrv,cmd,buff);
 800ded4:	79b9      	ldrb	r1, [r7, #6]
 800ded6:	79fb      	ldrb	r3, [r7, #7]
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f8 fcdc 	bl	8006898 <SD_disk_ioctl>
 800dee0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
	...

0800deec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	4603      	mov	r3, r0
 800def4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800def6:	79fb      	ldrb	r3, [r7, #7]
 800def8:	4a08      	ldr	r2, [pc, #32]	@ (800df1c <disk_status+0x30>)
 800defa:	009b      	lsls	r3, r3, #2
 800defc:	4413      	add	r3, r2
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	79fa      	ldrb	r2, [r7, #7]
 800df04:	4905      	ldr	r1, [pc, #20]	@ (800df1c <disk_status+0x30>)
 800df06:	440a      	add	r2, r1
 800df08:	7a12      	ldrb	r2, [r2, #8]
 800df0a:	4610      	mov	r0, r2
 800df0c:	4798      	blx	r3
 800df0e:	4603      	mov	r3, r0
 800df10:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df12:	7bfb      	ldrb	r3, [r7, #15]
}
 800df14:	4618      	mov	r0, r3
 800df16:	3710      	adds	r7, #16
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}
 800df1c:	200033cc 	.word	0x200033cc

0800df20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	4603      	mov	r3, r0
 800df28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800df2a:	2300      	movs	r3, #0
 800df2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800df2e:	79fb      	ldrb	r3, [r7, #7]
 800df30:	4a0e      	ldr	r2, [pc, #56]	@ (800df6c <disk_initialize+0x4c>)
 800df32:	5cd3      	ldrb	r3, [r2, r3]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d114      	bne.n	800df62 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800df38:	79fb      	ldrb	r3, [r7, #7]
 800df3a:	4a0c      	ldr	r2, [pc, #48]	@ (800df6c <disk_initialize+0x4c>)
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	79fa      	ldrb	r2, [r7, #7]
 800df46:	4909      	ldr	r1, [pc, #36]	@ (800df6c <disk_initialize+0x4c>)
 800df48:	440a      	add	r2, r1
 800df4a:	7a12      	ldrb	r2, [r2, #8]
 800df4c:	4610      	mov	r0, r2
 800df4e:	4798      	blx	r3
 800df50:	4603      	mov	r3, r0
 800df52:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800df54:	7bfb      	ldrb	r3, [r7, #15]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d103      	bne.n	800df62 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800df5a:	79fb      	ldrb	r3, [r7, #7]
 800df5c:	4a03      	ldr	r2, [pc, #12]	@ (800df6c <disk_initialize+0x4c>)
 800df5e:	2101      	movs	r1, #1
 800df60:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800df62:	7bfb      	ldrb	r3, [r7, #15]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	200033cc 	.word	0x200033cc

0800df70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800df70:	b590      	push	{r4, r7, lr}
 800df72:	b087      	sub	sp, #28
 800df74:	af00      	add	r7, sp, #0
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	607a      	str	r2, [r7, #4]
 800df7a:	603b      	str	r3, [r7, #0]
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800df80:	7bfb      	ldrb	r3, [r7, #15]
 800df82:	4a0a      	ldr	r2, [pc, #40]	@ (800dfac <disk_read+0x3c>)
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	689c      	ldr	r4, [r3, #8]
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	4a07      	ldr	r2, [pc, #28]	@ (800dfac <disk_read+0x3c>)
 800df90:	4413      	add	r3, r2
 800df92:	7a18      	ldrb	r0, [r3, #8]
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	68b9      	ldr	r1, [r7, #8]
 800df9a:	47a0      	blx	r4
 800df9c:	4603      	mov	r3, r0
 800df9e:	75fb      	strb	r3, [r7, #23]
  return res;
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	371c      	adds	r7, #28
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd90      	pop	{r4, r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	200033cc 	.word	0x200033cc

0800dfb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dfb0:	b590      	push	{r4, r7, lr}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60b9      	str	r1, [r7, #8]
 800dfb8:	607a      	str	r2, [r7, #4]
 800dfba:	603b      	str	r3, [r7, #0]
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dfc0:	7bfb      	ldrb	r3, [r7, #15]
 800dfc2:	4a0a      	ldr	r2, [pc, #40]	@ (800dfec <disk_write+0x3c>)
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4413      	add	r3, r2
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	68dc      	ldr	r4, [r3, #12]
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
 800dfce:	4a07      	ldr	r2, [pc, #28]	@ (800dfec <disk_write+0x3c>)
 800dfd0:	4413      	add	r3, r2
 800dfd2:	7a18      	ldrb	r0, [r3, #8]
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	687a      	ldr	r2, [r7, #4]
 800dfd8:	68b9      	ldr	r1, [r7, #8]
 800dfda:	47a0      	blx	r4
 800dfdc:	4603      	mov	r3, r0
 800dfde:	75fb      	strb	r3, [r7, #23]
  return res;
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd90      	pop	{r4, r7, pc}
 800dfea:	bf00      	nop
 800dfec:	200033cc 	.word	0x200033cc

0800dff0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	4603      	mov	r3, r0
 800dff8:	603a      	str	r2, [r7, #0]
 800dffa:	71fb      	strb	r3, [r7, #7]
 800dffc:	460b      	mov	r3, r1
 800dffe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	4a09      	ldr	r2, [pc, #36]	@ (800e028 <disk_ioctl+0x38>)
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4413      	add	r3, r2
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	691b      	ldr	r3, [r3, #16]
 800e00c:	79fa      	ldrb	r2, [r7, #7]
 800e00e:	4906      	ldr	r1, [pc, #24]	@ (800e028 <disk_ioctl+0x38>)
 800e010:	440a      	add	r2, r1
 800e012:	7a10      	ldrb	r0, [r2, #8]
 800e014:	79b9      	ldrb	r1, [r7, #6]
 800e016:	683a      	ldr	r2, [r7, #0]
 800e018:	4798      	blx	r3
 800e01a:	4603      	mov	r3, r0
 800e01c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	200033cc 	.word	0x200033cc

0800e02c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	3301      	adds	r3, #1
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e03c:	89fb      	ldrh	r3, [r7, #14]
 800e03e:	021b      	lsls	r3, r3, #8
 800e040:	b21a      	sxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	b21b      	sxth	r3, r3
 800e048:	4313      	orrs	r3, r2
 800e04a:	b21b      	sxth	r3, r3
 800e04c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e04e:	89fb      	ldrh	r3, [r7, #14]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3303      	adds	r3, #3
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	021b      	lsls	r3, r3, #8
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	3202      	adds	r2, #2
 800e074:	7812      	ldrb	r2, [r2, #0]
 800e076:	4313      	orrs	r3, r2
 800e078:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	3201      	adds	r2, #1
 800e082:	7812      	ldrb	r2, [r2, #0]
 800e084:	4313      	orrs	r3, r2
 800e086:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	021b      	lsls	r3, r3, #8
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	7812      	ldrb	r2, [r2, #0]
 800e090:	4313      	orrs	r3, r2
 800e092:	60fb      	str	r3, [r7, #12]
	return rv;
 800e094:	68fb      	ldr	r3, [r7, #12]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b083      	sub	sp, #12
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	887a      	ldrh	r2, [r7, #2]
 800e0b6:	b2d2      	uxtb	r2, r2
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	887b      	ldrh	r3, [r7, #2]
 800e0bc:	0a1b      	lsrs	r3, r3, #8
 800e0be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	607a      	str	r2, [r7, #4]
 800e0c6:	887a      	ldrh	r2, [r7, #2]
 800e0c8:	b2d2      	uxtb	r2, r2
 800e0ca:	701a      	strb	r2, [r3, #0]
}
 800e0cc:	bf00      	nop
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	1c5a      	adds	r2, r3, #1
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	683a      	ldr	r2, [r7, #0]
 800e0ea:	b2d2      	uxtb	r2, r2
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	0a1b      	lsrs	r3, r3, #8
 800e0f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	1c5a      	adds	r2, r3, #1
 800e0f8:	607a      	str	r2, [r7, #4]
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	b2d2      	uxtb	r2, r2
 800e0fe:	701a      	strb	r2, [r3, #0]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	0a1b      	lsrs	r3, r3, #8
 800e104:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	b2d2      	uxtb	r2, r2
 800e110:	701a      	strb	r2, [r3, #0]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	0a1b      	lsrs	r3, r3, #8
 800e116:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	607a      	str	r2, [r7, #4]
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	b2d2      	uxtb	r2, r2
 800e122:	701a      	strb	r2, [r3, #0]
}
 800e124:	bf00      	nop
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e130:	b480      	push	{r7}
 800e132:	b087      	sub	sp, #28
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d00d      	beq.n	800e166 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e14a:	693a      	ldr	r2, [r7, #16]
 800e14c:	1c53      	adds	r3, r2, #1
 800e14e:	613b      	str	r3, [r7, #16]
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	1c59      	adds	r1, r3, #1
 800e154:	6179      	str	r1, [r7, #20]
 800e156:	7812      	ldrb	r2, [r2, #0]
 800e158:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	607b      	str	r3, [r7, #4]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d1f1      	bne.n	800e14a <mem_cpy+0x1a>
	}
}
 800e166:	bf00      	nop
 800e168:	371c      	adds	r7, #28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e172:	b480      	push	{r7}
 800e174:	b087      	sub	sp, #28
 800e176:	af00      	add	r7, sp, #0
 800e178:	60f8      	str	r0, [r7, #12]
 800e17a:	60b9      	str	r1, [r7, #8]
 800e17c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	1c5a      	adds	r2, r3, #1
 800e186:	617a      	str	r2, [r7, #20]
 800e188:	68ba      	ldr	r2, [r7, #8]
 800e18a:	b2d2      	uxtb	r2, r2
 800e18c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	3b01      	subs	r3, #1
 800e192:	607b      	str	r3, [r7, #4]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1f3      	bne.n	800e182 <mem_set+0x10>
}
 800e19a:	bf00      	nop
 800e19c:	bf00      	nop
 800e19e:	371c      	adds	r7, #28
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e1a8:	b480      	push	{r7}
 800e1aa:	b089      	sub	sp, #36	@ 0x24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	1c5a      	adds	r2, r3, #1
 800e1c4:	61fa      	str	r2, [r7, #28]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	1c5a      	adds	r2, r3, #1
 800e1ce:	61ba      	str	r2, [r7, #24]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	1acb      	subs	r3, r1, r3
 800e1d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	3b01      	subs	r3, #1
 800e1da:	607b      	str	r3, [r7, #4]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <mem_cmp+0x40>
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d0eb      	beq.n	800e1c0 <mem_cmp+0x18>

	return r;
 800e1e8:	697b      	ldr	r3, [r7, #20]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3724      	adds	r7, #36	@ 0x24
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr

0800e1f6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e1f6:	b480      	push	{r7}
 800e1f8:	b083      	sub	sp, #12
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
 800e1fe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e200:	e002      	b.n	800e208 <chk_chr+0x12>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	3301      	adds	r3, #1
 800e206:	607b      	str	r3, [r7, #4]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d005      	beq.n	800e21c <chk_chr+0x26>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	461a      	mov	r2, r3
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	4293      	cmp	r3, r2
 800e21a:	d1f2      	bne.n	800e202 <chk_chr+0xc>
	return *str;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	781b      	ldrb	r3, [r3, #0]
}
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e236:	2300      	movs	r3, #0
 800e238:	60bb      	str	r3, [r7, #8]
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	60fb      	str	r3, [r7, #12]
 800e23e:	e029      	b.n	800e294 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e240:	4a27      	ldr	r2, [pc, #156]	@ (800e2e0 <chk_lock+0xb4>)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	011b      	lsls	r3, r3, #4
 800e246:	4413      	add	r3, r2
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d01d      	beq.n	800e28a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e24e:	4a24      	ldr	r2, [pc, #144]	@ (800e2e0 <chk_lock+0xb4>)
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	011b      	lsls	r3, r3, #4
 800e254:	4413      	add	r3, r2
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d116      	bne.n	800e28e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e260:	4a1f      	ldr	r2, [pc, #124]	@ (800e2e0 <chk_lock+0xb4>)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	011b      	lsls	r3, r3, #4
 800e266:	4413      	add	r3, r2
 800e268:	3304      	adds	r3, #4
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e270:	429a      	cmp	r2, r3
 800e272:	d10c      	bne.n	800e28e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e274:	4a1a      	ldr	r2, [pc, #104]	@ (800e2e0 <chk_lock+0xb4>)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	011b      	lsls	r3, r3, #4
 800e27a:	4413      	add	r3, r2
 800e27c:	3308      	adds	r3, #8
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e284:	429a      	cmp	r2, r3
 800e286:	d102      	bne.n	800e28e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e288:	e007      	b.n	800e29a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e28a:	2301      	movs	r3, #1
 800e28c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	3301      	adds	r3, #1
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b01      	cmp	r3, #1
 800e298:	d9d2      	bls.n	800e240 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d109      	bne.n	800e2b4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d102      	bne.n	800e2ac <chk_lock+0x80>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d101      	bne.n	800e2b0 <chk_lock+0x84>
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	e010      	b.n	800e2d2 <chk_lock+0xa6>
 800e2b0:	2312      	movs	r3, #18
 800e2b2:	e00e      	b.n	800e2d2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d108      	bne.n	800e2cc <chk_lock+0xa0>
 800e2ba:	4a09      	ldr	r2, [pc, #36]	@ (800e2e0 <chk_lock+0xb4>)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	011b      	lsls	r3, r3, #4
 800e2c0:	4413      	add	r3, r2
 800e2c2:	330c      	adds	r3, #12
 800e2c4:	881b      	ldrh	r3, [r3, #0]
 800e2c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2ca:	d101      	bne.n	800e2d0 <chk_lock+0xa4>
 800e2cc:	2310      	movs	r3, #16
 800e2ce:	e000      	b.n	800e2d2 <chk_lock+0xa6>
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3714      	adds	r7, #20
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	200031ac 	.word	0x200031ac

0800e2e4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	607b      	str	r3, [r7, #4]
 800e2ee:	e002      	b.n	800e2f6 <enq_lock+0x12>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	607b      	str	r3, [r7, #4]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d806      	bhi.n	800e30a <enq_lock+0x26>
 800e2fc:	4a09      	ldr	r2, [pc, #36]	@ (800e324 <enq_lock+0x40>)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	011b      	lsls	r3, r3, #4
 800e302:	4413      	add	r3, r2
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d1f2      	bne.n	800e2f0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	bf14      	ite	ne
 800e310:	2301      	movne	r3, #1
 800e312:	2300      	moveq	r3, #0
 800e314:	b2db      	uxtb	r3, r3
}
 800e316:	4618      	mov	r0, r3
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	200031ac 	.word	0x200031ac

0800e328 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e332:	2300      	movs	r3, #0
 800e334:	60fb      	str	r3, [r7, #12]
 800e336:	e01f      	b.n	800e378 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e338:	4a41      	ldr	r2, [pc, #260]	@ (800e440 <inc_lock+0x118>)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	011b      	lsls	r3, r3, #4
 800e33e:	4413      	add	r3, r2
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	429a      	cmp	r2, r3
 800e348:	d113      	bne.n	800e372 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e34a:	4a3d      	ldr	r2, [pc, #244]	@ (800e440 <inc_lock+0x118>)
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	011b      	lsls	r3, r3, #4
 800e350:	4413      	add	r3, r2
 800e352:	3304      	adds	r3, #4
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d109      	bne.n	800e372 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e35e:	4a38      	ldr	r2, [pc, #224]	@ (800e440 <inc_lock+0x118>)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	011b      	lsls	r3, r3, #4
 800e364:	4413      	add	r3, r2
 800e366:	3308      	adds	r3, #8
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e36e:	429a      	cmp	r2, r3
 800e370:	d006      	beq.n	800e380 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	3301      	adds	r3, #1
 800e376:	60fb      	str	r3, [r7, #12]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d9dc      	bls.n	800e338 <inc_lock+0x10>
 800e37e:	e000      	b.n	800e382 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e380:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b02      	cmp	r3, #2
 800e386:	d132      	bne.n	800e3ee <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e388:	2300      	movs	r3, #0
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	e002      	b.n	800e394 <inc_lock+0x6c>
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3301      	adds	r3, #1
 800e392:	60fb      	str	r3, [r7, #12]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d806      	bhi.n	800e3a8 <inc_lock+0x80>
 800e39a:	4a29      	ldr	r2, [pc, #164]	@ (800e440 <inc_lock+0x118>)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	011b      	lsls	r3, r3, #4
 800e3a0:	4413      	add	r3, r2
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1f2      	bne.n	800e38e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b02      	cmp	r3, #2
 800e3ac:	d101      	bne.n	800e3b2 <inc_lock+0x8a>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	e040      	b.n	800e434 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681a      	ldr	r2, [r3, #0]
 800e3b6:	4922      	ldr	r1, [pc, #136]	@ (800e440 <inc_lock+0x118>)
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	011b      	lsls	r3, r3, #4
 800e3bc:	440b      	add	r3, r1
 800e3be:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	689a      	ldr	r2, [r3, #8]
 800e3c4:	491e      	ldr	r1, [pc, #120]	@ (800e440 <inc_lock+0x118>)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	011b      	lsls	r3, r3, #4
 800e3ca:	440b      	add	r3, r1
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	695a      	ldr	r2, [r3, #20]
 800e3d4:	491a      	ldr	r1, [pc, #104]	@ (800e440 <inc_lock+0x118>)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	011b      	lsls	r3, r3, #4
 800e3da:	440b      	add	r3, r1
 800e3dc:	3308      	adds	r3, #8
 800e3de:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e3e0:	4a17      	ldr	r2, [pc, #92]	@ (800e440 <inc_lock+0x118>)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	011b      	lsls	r3, r3, #4
 800e3e6:	4413      	add	r3, r2
 800e3e8:	330c      	adds	r3, #12
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d009      	beq.n	800e408 <inc_lock+0xe0>
 800e3f4:	4a12      	ldr	r2, [pc, #72]	@ (800e440 <inc_lock+0x118>)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	011b      	lsls	r3, r3, #4
 800e3fa:	4413      	add	r3, r2
 800e3fc:	330c      	adds	r3, #12
 800e3fe:	881b      	ldrh	r3, [r3, #0]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <inc_lock+0xe0>
 800e404:	2300      	movs	r3, #0
 800e406:	e015      	b.n	800e434 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d108      	bne.n	800e420 <inc_lock+0xf8>
 800e40e:	4a0c      	ldr	r2, [pc, #48]	@ (800e440 <inc_lock+0x118>)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	011b      	lsls	r3, r3, #4
 800e414:	4413      	add	r3, r2
 800e416:	330c      	adds	r3, #12
 800e418:	881b      	ldrh	r3, [r3, #0]
 800e41a:	3301      	adds	r3, #1
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	e001      	b.n	800e424 <inc_lock+0xfc>
 800e420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e424:	4906      	ldr	r1, [pc, #24]	@ (800e440 <inc_lock+0x118>)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	011b      	lsls	r3, r3, #4
 800e42a:	440b      	add	r3, r1
 800e42c:	330c      	adds	r3, #12
 800e42e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3301      	adds	r3, #1
}
 800e434:	4618      	mov	r0, r3
 800e436:	3714      	adds	r7, #20
 800e438:	46bd      	mov	sp, r7
 800e43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e43e:	4770      	bx	lr
 800e440:	200031ac 	.word	0x200031ac

0800e444 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e444:	b480      	push	{r7}
 800e446:	b085      	sub	sp, #20
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	3b01      	subs	r3, #1
 800e450:	607b      	str	r3, [r7, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b01      	cmp	r3, #1
 800e456:	d825      	bhi.n	800e4a4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e458:	4a17      	ldr	r2, [pc, #92]	@ (800e4b8 <dec_lock+0x74>)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	011b      	lsls	r3, r3, #4
 800e45e:	4413      	add	r3, r2
 800e460:	330c      	adds	r3, #12
 800e462:	881b      	ldrh	r3, [r3, #0]
 800e464:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e466:	89fb      	ldrh	r3, [r7, #14]
 800e468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e46c:	d101      	bne.n	800e472 <dec_lock+0x2e>
 800e46e:	2300      	movs	r3, #0
 800e470:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e472:	89fb      	ldrh	r3, [r7, #14]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d002      	beq.n	800e47e <dec_lock+0x3a>
 800e478:	89fb      	ldrh	r3, [r7, #14]
 800e47a:	3b01      	subs	r3, #1
 800e47c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e47e:	4a0e      	ldr	r2, [pc, #56]	@ (800e4b8 <dec_lock+0x74>)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	011b      	lsls	r3, r3, #4
 800e484:	4413      	add	r3, r2
 800e486:	330c      	adds	r3, #12
 800e488:	89fa      	ldrh	r2, [r7, #14]
 800e48a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e48c:	89fb      	ldrh	r3, [r7, #14]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d105      	bne.n	800e49e <dec_lock+0x5a>
 800e492:	4a09      	ldr	r2, [pc, #36]	@ (800e4b8 <dec_lock+0x74>)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	011b      	lsls	r3, r3, #4
 800e498:	4413      	add	r3, r2
 800e49a:	2200      	movs	r2, #0
 800e49c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	737b      	strb	r3, [r7, #13]
 800e4a2:	e001      	b.n	800e4a8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e4a4:	2302      	movs	r3, #2
 800e4a6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e4a8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3714      	adds	r7, #20
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr
 800e4b6:	bf00      	nop
 800e4b8:	200031ac 	.word	0x200031ac

0800e4bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b085      	sub	sp, #20
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	e010      	b.n	800e4ec <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e4ca:	4a0d      	ldr	r2, [pc, #52]	@ (800e500 <clear_lock+0x44>)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	011b      	lsls	r3, r3, #4
 800e4d0:	4413      	add	r3, r2
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d105      	bne.n	800e4e6 <clear_lock+0x2a>
 800e4da:	4a09      	ldr	r2, [pc, #36]	@ (800e500 <clear_lock+0x44>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	011b      	lsls	r3, r3, #4
 800e4e0:	4413      	add	r3, r2
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	3301      	adds	r3, #1
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d9eb      	bls.n	800e4ca <clear_lock+0xe>
	}
}
 800e4f2:	bf00      	nop
 800e4f4:	bf00      	nop
 800e4f6:	3714      	adds	r7, #20
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fe:	4770      	bx	lr
 800e500:	200031ac 	.word	0x200031ac

0800e504 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b086      	sub	sp, #24
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	78db      	ldrb	r3, [r3, #3]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d034      	beq.n	800e582 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e51c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	7858      	ldrb	r0, [r3, #1]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e528:	2301      	movs	r3, #1
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	f7ff fd40 	bl	800dfb0 <disk_write>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	d002      	beq.n	800e53c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e536:	2301      	movs	r3, #1
 800e538:	73fb      	strb	r3, [r7, #15]
 800e53a:	e022      	b.n	800e582 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	1ad2      	subs	r2, r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d217      	bcs.n	800e582 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	789b      	ldrb	r3, [r3, #2]
 800e556:	613b      	str	r3, [r7, #16]
 800e558:	e010      	b.n	800e57c <sync_window+0x78>
					wsect += fs->fsize;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	4413      	add	r3, r2
 800e562:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	7858      	ldrb	r0, [r3, #1]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e56e:	2301      	movs	r3, #1
 800e570:	697a      	ldr	r2, [r7, #20]
 800e572:	f7ff fd1d 	bl	800dfb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	3b01      	subs	r3, #1
 800e57a:	613b      	str	r3, [r7, #16]
 800e57c:	693b      	ldr	r3, [r7, #16]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d8eb      	bhi.n	800e55a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e582:	7bfb      	ldrb	r3, [r7, #15]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3718      	adds	r7, #24
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e596:	2300      	movs	r3, #0
 800e598:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d01b      	beq.n	800e5dc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f7ff ffad 	bl	800e504 <sync_window>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d113      	bne.n	800e5dc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	7858      	ldrb	r0, [r3, #1]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e5be:	2301      	movs	r3, #1
 800e5c0:	683a      	ldr	r2, [r7, #0]
 800e5c2:	f7ff fcd5 	bl	800df70 <disk_read>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d004      	beq.n	800e5d6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5d0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
	...

0800e5e8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f7ff ff87 	bl	800e504 <sync_window>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5fa:	7bfb      	ldrb	r3, [r7, #15]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d159      	bne.n	800e6b4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	2b03      	cmp	r3, #3
 800e606:	d149      	bne.n	800e69c <sync_fs+0xb4>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	791b      	ldrb	r3, [r3, #4]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d145      	bne.n	800e69c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	899b      	ldrh	r3, [r3, #12]
 800e61a:	461a      	mov	r2, r3
 800e61c:	2100      	movs	r1, #0
 800e61e:	f7ff fda8 	bl	800e172 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	3338      	adds	r3, #56	@ 0x38
 800e626:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e62a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e62e:	4618      	mov	r0, r3
 800e630:	f7ff fd37 	bl	800e0a2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3338      	adds	r3, #56	@ 0x38
 800e638:	4921      	ldr	r1, [pc, #132]	@ (800e6c0 <sync_fs+0xd8>)
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7ff fd4c 	bl	800e0d8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3338      	adds	r3, #56	@ 0x38
 800e644:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e648:	491e      	ldr	r1, [pc, #120]	@ (800e6c4 <sync_fs+0xdc>)
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff fd44 	bl	800e0d8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3338      	adds	r3, #56	@ 0x38
 800e654:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	4619      	mov	r1, r3
 800e65e:	4610      	mov	r0, r2
 800e660:	f7ff fd3a 	bl	800e0d8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3338      	adds	r3, #56	@ 0x38
 800e668:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	695b      	ldr	r3, [r3, #20]
 800e670:	4619      	mov	r1, r3
 800e672:	4610      	mov	r0, r2
 800e674:	f7ff fd30 	bl	800e0d8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e67c:	1c5a      	adds	r2, r3, #1
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	7858      	ldrb	r0, [r3, #1]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e690:	2301      	movs	r3, #1
 800e692:	f7ff fc8d 	bl	800dfb0 <disk_write>
			fs->fsi_flag = 0;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	785b      	ldrb	r3, [r3, #1]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7ff fca3 	bl	800dff0 <disk_ioctl>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d001      	beq.n	800e6b4 <sync_fs+0xcc>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	3710      	adds	r7, #16
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	bd80      	pop	{r7, pc}
 800e6be:	bf00      	nop
 800e6c0:	41615252 	.word	0x41615252
 800e6c4:	61417272 	.word	0x61417272

0800e6c8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	3b02      	subs	r3, #2
 800e6d6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	69db      	ldr	r3, [r3, #28]
 800e6dc:	3b02      	subs	r3, #2
 800e6de:	683a      	ldr	r2, [r7, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d301      	bcc.n	800e6e8 <clust2sect+0x20>
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	e008      	b.n	800e6fa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	895b      	ldrh	r3, [r3, #10]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	fb03 f202 	mul.w	r2, r3, r2
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6f8:	4413      	add	r3, r2
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	b086      	sub	sp, #24
 800e70a:	af00      	add	r7, sp, #0
 800e70c:	6078      	str	r0, [r7, #4]
 800e70e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d904      	bls.n	800e726 <get_fat+0x20>
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	69db      	ldr	r3, [r3, #28]
 800e720:	683a      	ldr	r2, [r7, #0]
 800e722:	429a      	cmp	r2, r3
 800e724:	d302      	bcc.n	800e72c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e726:	2301      	movs	r3, #1
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	e0ba      	b.n	800e8a2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e72c:	f04f 33ff 	mov.w	r3, #4294967295
 800e730:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	2b03      	cmp	r3, #3
 800e738:	f000 8082 	beq.w	800e840 <get_fat+0x13a>
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	f300 80a6 	bgt.w	800e88e <get_fat+0x188>
 800e742:	2b01      	cmp	r3, #1
 800e744:	d002      	beq.n	800e74c <get_fat+0x46>
 800e746:	2b02      	cmp	r3, #2
 800e748:	d055      	beq.n	800e7f6 <get_fat+0xf0>
 800e74a:	e0a0      	b.n	800e88e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	60fb      	str	r3, [r7, #12]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	085b      	lsrs	r3, r3, #1
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	899b      	ldrh	r3, [r3, #12]
 800e762:	4619      	mov	r1, r3
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	fbb3 f3f1 	udiv	r3, r3, r1
 800e76a:	4413      	add	r3, r2
 800e76c:	4619      	mov	r1, r3
 800e76e:	6938      	ldr	r0, [r7, #16]
 800e770:	f7ff ff0c 	bl	800e58c <move_window>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	f040 808c 	bne.w	800e894 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	60fa      	str	r2, [r7, #12]
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	8992      	ldrh	r2, [r2, #12]
 800e786:	fbb3 f1f2 	udiv	r1, r3, r2
 800e78a:	fb01 f202 	mul.w	r2, r1, r2
 800e78e:	1a9b      	subs	r3, r3, r2
 800e790:	693a      	ldr	r2, [r7, #16]
 800e792:	4413      	add	r3, r2
 800e794:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e798:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	899b      	ldrh	r3, [r3, #12]
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7aa:	4413      	add	r3, r2
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	6938      	ldr	r0, [r7, #16]
 800e7b0:	f7ff feec 	bl	800e58c <move_window>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d16e      	bne.n	800e898 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	899b      	ldrh	r3, [r3, #12]
 800e7be:	461a      	mov	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7c6:	fb01 f202 	mul.w	r2, r1, r2
 800e7ca:	1a9b      	subs	r3, r3, r2
 800e7cc:	693a      	ldr	r2, [r7, #16]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e7d4:	021b      	lsls	r3, r3, #8
 800e7d6:	68ba      	ldr	r2, [r7, #8]
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	f003 0301 	and.w	r3, r3, #1
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <get_fat+0xe6>
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	091b      	lsrs	r3, r3, #4
 800e7ea:	e002      	b.n	800e7f2 <get_fat+0xec>
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7f2:	617b      	str	r3, [r7, #20]
			break;
 800e7f4:	e055      	b.n	800e8a2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	899b      	ldrh	r3, [r3, #12]
 800e7fe:	085b      	lsrs	r3, r3, #1
 800e800:	b29b      	uxth	r3, r3
 800e802:	4619      	mov	r1, r3
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	fbb3 f3f1 	udiv	r3, r3, r1
 800e80a:	4413      	add	r3, r2
 800e80c:	4619      	mov	r1, r3
 800e80e:	6938      	ldr	r0, [r7, #16]
 800e810:	f7ff febc 	bl	800e58c <move_window>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d140      	bne.n	800e89c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	005b      	lsls	r3, r3, #1
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	8992      	ldrh	r2, [r2, #12]
 800e828:	fbb3 f0f2 	udiv	r0, r3, r2
 800e82c:	fb00 f202 	mul.w	r2, r0, r2
 800e830:	1a9b      	subs	r3, r3, r2
 800e832:	440b      	add	r3, r1
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fbf9 	bl	800e02c <ld_word>
 800e83a:	4603      	mov	r3, r0
 800e83c:	617b      	str	r3, [r7, #20]
			break;
 800e83e:	e030      	b.n	800e8a2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	899b      	ldrh	r3, [r3, #12]
 800e848:	089b      	lsrs	r3, r3, #2
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	4619      	mov	r1, r3
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	fbb3 f3f1 	udiv	r3, r3, r1
 800e854:	4413      	add	r3, r2
 800e856:	4619      	mov	r1, r3
 800e858:	6938      	ldr	r0, [r7, #16]
 800e85a:	f7ff fe97 	bl	800e58c <move_window>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d11d      	bne.n	800e8a0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	009b      	lsls	r3, r3, #2
 800e86e:	693a      	ldr	r2, [r7, #16]
 800e870:	8992      	ldrh	r2, [r2, #12]
 800e872:	fbb3 f0f2 	udiv	r0, r3, r2
 800e876:	fb00 f202 	mul.w	r2, r0, r2
 800e87a:	1a9b      	subs	r3, r3, r2
 800e87c:	440b      	add	r3, r1
 800e87e:	4618      	mov	r0, r3
 800e880:	f7ff fbec 	bl	800e05c <ld_dword>
 800e884:	4603      	mov	r3, r0
 800e886:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e88a:	617b      	str	r3, [r7, #20]
			break;
 800e88c:	e009      	b.n	800e8a2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e88e:	2301      	movs	r3, #1
 800e890:	617b      	str	r3, [r7, #20]
 800e892:	e006      	b.n	800e8a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e894:	bf00      	nop
 800e896:	e004      	b.n	800e8a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e898:	bf00      	nop
 800e89a:	e002      	b.n	800e8a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e89c:	bf00      	nop
 800e89e:	e000      	b.n	800e8a2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e8a0:	bf00      	nop
		}
	}

	return val;
 800e8a2:	697b      	ldr	r3, [r7, #20]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3718      	adds	r7, #24
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e8ac:	b590      	push	{r4, r7, lr}
 800e8ae:	b089      	sub	sp, #36	@ 0x24
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e8b8:	2302      	movs	r3, #2
 800e8ba:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e8bc:	68bb      	ldr	r3, [r7, #8]
 800e8be:	2b01      	cmp	r3, #1
 800e8c0:	f240 8109 	bls.w	800ead6 <put_fat+0x22a>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	69db      	ldr	r3, [r3, #28]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	f080 8103 	bcs.w	800ead6 <put_fat+0x22a>
		switch (fs->fs_type) {
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	f000 80b6 	beq.w	800ea46 <put_fat+0x19a>
 800e8da:	2b03      	cmp	r3, #3
 800e8dc:	f300 80fb 	bgt.w	800ead6 <put_fat+0x22a>
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d003      	beq.n	800e8ec <put_fat+0x40>
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	f000 8083 	beq.w	800e9f0 <put_fat+0x144>
 800e8ea:	e0f4      	b.n	800ead6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	61bb      	str	r3, [r7, #24]
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	085b      	lsrs	r3, r3, #1
 800e8f4:	69ba      	ldr	r2, [r7, #24]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	899b      	ldrh	r3, [r3, #12]
 800e902:	4619      	mov	r1, r3
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	fbb3 f3f1 	udiv	r3, r3, r1
 800e90a:	4413      	add	r3, r2
 800e90c:	4619      	mov	r1, r3
 800e90e:	68f8      	ldr	r0, [r7, #12]
 800e910:	f7ff fe3c 	bl	800e58c <move_window>
 800e914:	4603      	mov	r3, r0
 800e916:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e918:	7ffb      	ldrb	r3, [r7, #31]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f040 80d4 	bne.w	800eac8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	1c5a      	adds	r2, r3, #1
 800e92a:	61ba      	str	r2, [r7, #24]
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	8992      	ldrh	r2, [r2, #12]
 800e930:	fbb3 f0f2 	udiv	r0, r3, r2
 800e934:	fb00 f202 	mul.w	r2, r0, r2
 800e938:	1a9b      	subs	r3, r3, r2
 800e93a:	440b      	add	r3, r1
 800e93c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	f003 0301 	and.w	r3, r3, #1
 800e944:	2b00      	cmp	r3, #0
 800e946:	d00d      	beq.n	800e964 <put_fat+0xb8>
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	b25b      	sxtb	r3, r3
 800e94e:	f003 030f 	and.w	r3, r3, #15
 800e952:	b25a      	sxtb	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	b2db      	uxtb	r3, r3
 800e958:	011b      	lsls	r3, r3, #4
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	4313      	orrs	r3, r2
 800e95e:	b25b      	sxtb	r3, r3
 800e960:	b2db      	uxtb	r3, r3
 800e962:	e001      	b.n	800e968 <put_fat+0xbc>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	b2db      	uxtb	r3, r3
 800e968:	697a      	ldr	r2, [r7, #20]
 800e96a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2201      	movs	r2, #1
 800e970:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	899b      	ldrh	r3, [r3, #12]
 800e97a:	4619      	mov	r1, r3
 800e97c:	69bb      	ldr	r3, [r7, #24]
 800e97e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e982:	4413      	add	r3, r2
 800e984:	4619      	mov	r1, r3
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff fe00 	bl	800e58c <move_window>
 800e98c:	4603      	mov	r3, r0
 800e98e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e990:	7ffb      	ldrb	r3, [r7, #31]
 800e992:	2b00      	cmp	r3, #0
 800e994:	f040 809a 	bne.w	800eacc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	899b      	ldrh	r3, [r3, #12]
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9aa:	fb00 f202 	mul.w	r2, r0, r2
 800e9ae:	1a9b      	subs	r3, r3, r2
 800e9b0:	440b      	add	r3, r1
 800e9b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	f003 0301 	and.w	r3, r3, #1
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d003      	beq.n	800e9c6 <put_fat+0x11a>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	091b      	lsrs	r3, r3, #4
 800e9c2:	b2db      	uxtb	r3, r3
 800e9c4:	e00e      	b.n	800e9e4 <put_fat+0x138>
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	b25b      	sxtb	r3, r3
 800e9cc:	f023 030f 	bic.w	r3, r3, #15
 800e9d0:	b25a      	sxtb	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	0a1b      	lsrs	r3, r3, #8
 800e9d6:	b25b      	sxtb	r3, r3
 800e9d8:	f003 030f 	and.w	r3, r3, #15
 800e9dc:	b25b      	sxtb	r3, r3
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	b25b      	sxtb	r3, r3
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	697a      	ldr	r2, [r7, #20]
 800e9e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2201      	movs	r2, #1
 800e9ec:	70da      	strb	r2, [r3, #3]
			break;
 800e9ee:	e072      	b.n	800ead6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	899b      	ldrh	r3, [r3, #12]
 800e9f8:	085b      	lsrs	r3, r3, #1
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea04:	4413      	add	r3, r2
 800ea06:	4619      	mov	r1, r3
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f7ff fdbf 	bl	800e58c <move_window>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea12:	7ffb      	ldrb	r3, [r7, #31]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d15b      	bne.n	800ead0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	8992      	ldrh	r2, [r2, #12]
 800ea26:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea2a:	fb00 f202 	mul.w	r2, r0, r2
 800ea2e:	1a9b      	subs	r3, r3, r2
 800ea30:	440b      	add	r3, r1
 800ea32:	687a      	ldr	r2, [r7, #4]
 800ea34:	b292      	uxth	r2, r2
 800ea36:	4611      	mov	r1, r2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff fb32 	bl	800e0a2 <st_word>
			fs->wflag = 1;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2201      	movs	r2, #1
 800ea42:	70da      	strb	r2, [r3, #3]
			break;
 800ea44:	e047      	b.n	800ead6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	899b      	ldrh	r3, [r3, #12]
 800ea4e:	089b      	lsrs	r3, r3, #2
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	4619      	mov	r1, r3
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea5a:	4413      	add	r3, r2
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	68f8      	ldr	r0, [r7, #12]
 800ea60:	f7ff fd94 	bl	800e58c <move_window>
 800ea64:	4603      	mov	r3, r0
 800ea66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ea68:	7ffb      	ldrb	r3, [r7, #31]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d132      	bne.n	800ead4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	009b      	lsls	r3, r3, #2
 800ea7e:	68fa      	ldr	r2, [r7, #12]
 800ea80:	8992      	ldrh	r2, [r2, #12]
 800ea82:	fbb3 f0f2 	udiv	r0, r3, r2
 800ea86:	fb00 f202 	mul.w	r2, r0, r2
 800ea8a:	1a9b      	subs	r3, r3, r2
 800ea8c:	440b      	add	r3, r1
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fae4 	bl	800e05c <ld_dword>
 800ea94:	4603      	mov	r3, r0
 800ea96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ea9a:	4323      	orrs	r3, r4
 800ea9c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	68fa      	ldr	r2, [r7, #12]
 800eaaa:	8992      	ldrh	r2, [r2, #12]
 800eaac:	fbb3 f0f2 	udiv	r0, r3, r2
 800eab0:	fb00 f202 	mul.w	r2, r0, r2
 800eab4:	1a9b      	subs	r3, r3, r2
 800eab6:	440b      	add	r3, r1
 800eab8:	6879      	ldr	r1, [r7, #4]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7ff fb0c 	bl	800e0d8 <st_dword>
			fs->wflag = 1;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2201      	movs	r2, #1
 800eac4:	70da      	strb	r2, [r3, #3]
			break;
 800eac6:	e006      	b.n	800ead6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800eac8:	bf00      	nop
 800eaca:	e004      	b.n	800ead6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800eacc:	bf00      	nop
 800eace:	e002      	b.n	800ead6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ead0:	bf00      	nop
 800ead2:	e000      	b.n	800ead6 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ead4:	bf00      	nop
		}
	}
	return res;
 800ead6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3724      	adds	r7, #36	@ 0x24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd90      	pop	{r4, r7, pc}

0800eae0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d904      	bls.n	800eb06 <remove_chain+0x26>
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	69db      	ldr	r3, [r3, #28]
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d301      	bcc.n	800eb0a <remove_chain+0x2a>
 800eb06:	2302      	movs	r3, #2
 800eb08:	e04b      	b.n	800eba2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d00c      	beq.n	800eb2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eb10:	f04f 32ff 	mov.w	r2, #4294967295
 800eb14:	6879      	ldr	r1, [r7, #4]
 800eb16:	69b8      	ldr	r0, [r7, #24]
 800eb18:	f7ff fec8 	bl	800e8ac <put_fat>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eb20:	7ffb      	ldrb	r3, [r7, #31]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d001      	beq.n	800eb2a <remove_chain+0x4a>
 800eb26:	7ffb      	ldrb	r3, [r7, #31]
 800eb28:	e03b      	b.n	800eba2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eb2a:	68b9      	ldr	r1, [r7, #8]
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f7ff fdea 	bl	800e706 <get_fat>
 800eb32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d031      	beq.n	800eb9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d101      	bne.n	800eb44 <remove_chain+0x64>
 800eb40:	2302      	movs	r3, #2
 800eb42:	e02e      	b.n	800eba2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb4a:	d101      	bne.n	800eb50 <remove_chain+0x70>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e028      	b.n	800eba2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eb50:	2200      	movs	r2, #0
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	69b8      	ldr	r0, [r7, #24]
 800eb56:	f7ff fea9 	bl	800e8ac <put_fat>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eb5e:	7ffb      	ldrb	r3, [r7, #31]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <remove_chain+0x88>
 800eb64:	7ffb      	ldrb	r3, [r7, #31]
 800eb66:	e01c      	b.n	800eba2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	699a      	ldr	r2, [r3, #24]
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	3b02      	subs	r3, #2
 800eb72:	429a      	cmp	r2, r3
 800eb74:	d20b      	bcs.n	800eb8e <remove_chain+0xae>
			fs->free_clst++;
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	1c5a      	adds	r2, r3, #1
 800eb7c:	69bb      	ldr	r3, [r7, #24]
 800eb7e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	791b      	ldrb	r3, [r3, #4]
 800eb84:	f043 0301 	orr.w	r3, r3, #1
 800eb88:	b2da      	uxtb	r2, r3
 800eb8a:	69bb      	ldr	r3, [r7, #24]
 800eb8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	69db      	ldr	r3, [r3, #28]
 800eb96:	68ba      	ldr	r2, [r7, #8]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d3c6      	bcc.n	800eb2a <remove_chain+0x4a>
 800eb9c:	e000      	b.n	800eba0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eb9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3720      	adds	r7, #32
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}

0800ebaa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b088      	sub	sp, #32
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
 800ebb2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10d      	bne.n	800ebdc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	695b      	ldr	r3, [r3, #20]
 800ebc4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d004      	beq.n	800ebd6 <create_chain+0x2c>
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	69db      	ldr	r3, [r3, #28]
 800ebd0:	69ba      	ldr	r2, [r7, #24]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d31b      	bcc.n	800ec0e <create_chain+0x64>
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	61bb      	str	r3, [r7, #24]
 800ebda:	e018      	b.n	800ec0e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ebdc:	6839      	ldr	r1, [r7, #0]
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7ff fd91 	bl	800e706 <get_fat>
 800ebe4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d801      	bhi.n	800ebf0 <create_chain+0x46>
 800ebec:	2301      	movs	r3, #1
 800ebee:	e070      	b.n	800ecd2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebf6:	d101      	bne.n	800ebfc <create_chain+0x52>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	e06a      	b.n	800ecd2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d201      	bcs.n	800ec0a <create_chain+0x60>
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	e063      	b.n	800ecd2 <create_chain+0x128>
		scl = clst;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	3301      	adds	r3, #1
 800ec16:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	69db      	ldr	r3, [r3, #28]
 800ec1c:	69fa      	ldr	r2, [r7, #28]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d307      	bcc.n	800ec32 <create_chain+0x88>
				ncl = 2;
 800ec22:	2302      	movs	r3, #2
 800ec24:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ec26:	69fa      	ldr	r2, [r7, #28]
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d901      	bls.n	800ec32 <create_chain+0x88>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e04f      	b.n	800ecd2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ec32:	69f9      	ldr	r1, [r7, #28]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7ff fd66 	bl	800e706 <get_fat>
 800ec3a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00e      	beq.n	800ec60 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d003      	beq.n	800ec50 <create_chain+0xa6>
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4e:	d101      	bne.n	800ec54 <create_chain+0xaa>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	e03e      	b.n	800ecd2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ec54:	69fa      	ldr	r2, [r7, #28]
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d1da      	bne.n	800ec12 <create_chain+0x68>
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e038      	b.n	800ecd2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ec60:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ec62:	f04f 32ff 	mov.w	r2, #4294967295
 800ec66:	69f9      	ldr	r1, [r7, #28]
 800ec68:	6938      	ldr	r0, [r7, #16]
 800ec6a:	f7ff fe1f 	bl	800e8ac <put_fat>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ec72:	7dfb      	ldrb	r3, [r7, #23]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d109      	bne.n	800ec8c <create_chain+0xe2>
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d006      	beq.n	800ec8c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ec7e:	69fa      	ldr	r2, [r7, #28]
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	6938      	ldr	r0, [r7, #16]
 800ec84:	f7ff fe12 	bl	800e8ac <put_fat>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ec8c:	7dfb      	ldrb	r3, [r7, #23]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d116      	bne.n	800ecc0 <create_chain+0x116>
		fs->last_clst = ncl;
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	69fa      	ldr	r2, [r7, #28]
 800ec96:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	699a      	ldr	r2, [r3, #24]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	69db      	ldr	r3, [r3, #28]
 800eca0:	3b02      	subs	r3, #2
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d804      	bhi.n	800ecb0 <create_chain+0x106>
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	699b      	ldr	r3, [r3, #24]
 800ecaa:	1e5a      	subs	r2, r3, #1
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	791b      	ldrb	r3, [r3, #4]
 800ecb4:	f043 0301 	orr.w	r3, r3, #1
 800ecb8:	b2da      	uxtb	r2, r3
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	711a      	strb	r2, [r3, #4]
 800ecbe:	e007      	b.n	800ecd0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ecc0:	7dfb      	ldrb	r3, [r7, #23]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d102      	bne.n	800eccc <create_chain+0x122>
 800ecc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ecca:	e000      	b.n	800ecce <create_chain+0x124>
 800eccc:	2301      	movs	r3, #1
 800ecce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ecd0:	69fb      	ldr	r3, [r7, #28]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3720      	adds	r7, #32
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b087      	sub	sp, #28
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
 800ece2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecee:	3304      	adds	r3, #4
 800ecf0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	899b      	ldrh	r3, [r3, #12]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecfe:	68fa      	ldr	r2, [r7, #12]
 800ed00:	8952      	ldrh	r2, [r2, #10]
 800ed02:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed06:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	1d1a      	adds	r2, r3, #4
 800ed0c:	613a      	str	r2, [r7, #16]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <clmt_clust+0x42>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	e010      	b.n	800ed3e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ed1c:	697a      	ldr	r2, [r7, #20]
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d307      	bcc.n	800ed34 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	617b      	str	r3, [r7, #20]
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	3304      	adds	r3, #4
 800ed30:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ed32:	e7e9      	b.n	800ed08 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ed34:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	4413      	add	r3, r2
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	371c      	adds	r7, #28
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr

0800ed4a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b086      	sub	sp, #24
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
 800ed52:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ed60:	d204      	bcs.n	800ed6c <dir_sdi+0x22>
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	f003 031f 	and.w	r3, r3, #31
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	e071      	b.n	800ee54 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	683a      	ldr	r2, [r7, #0]
 800ed74:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d106      	bne.n	800ed90 <dir_sdi+0x46>
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d902      	bls.n	800ed90 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10c      	bne.n	800edb0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	095b      	lsrs	r3, r3, #5
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	8912      	ldrh	r2, [r2, #8]
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d301      	bcc.n	800eda6 <dir_sdi+0x5c>
 800eda2:	2302      	movs	r3, #2
 800eda4:	e056      	b.n	800ee54 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	61da      	str	r2, [r3, #28]
 800edae:	e02d      	b.n	800ee0c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	895b      	ldrh	r3, [r3, #10]
 800edb4:	461a      	mov	r2, r3
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	899b      	ldrh	r3, [r3, #12]
 800edba:	fb02 f303 	mul.w	r3, r2, r3
 800edbe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800edc0:	e019      	b.n	800edf6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6979      	ldr	r1, [r7, #20]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7ff fc9d 	bl	800e706 <get_fat>
 800edcc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edd4:	d101      	bne.n	800edda <dir_sdi+0x90>
 800edd6:	2301      	movs	r3, #1
 800edd8:	e03c      	b.n	800ee54 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800edda:	697b      	ldr	r3, [r7, #20]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d904      	bls.n	800edea <dir_sdi+0xa0>
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	69db      	ldr	r3, [r3, #28]
 800ede4:	697a      	ldr	r2, [r7, #20]
 800ede6:	429a      	cmp	r2, r3
 800ede8:	d301      	bcc.n	800edee <dir_sdi+0xa4>
 800edea:	2302      	movs	r3, #2
 800edec:	e032      	b.n	800ee54 <dir_sdi+0x10a>
			ofs -= csz;
 800edee:	683a      	ldr	r2, [r7, #0]
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800edf6:	683a      	ldr	r2, [r7, #0]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d2e1      	bcs.n	800edc2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800edfe:	6979      	ldr	r1, [r7, #20]
 800ee00:	6938      	ldr	r0, [r7, #16]
 800ee02:	f7ff fc61 	bl	800e6c8 <clust2sect>
 800ee06:	4602      	mov	r2, r0
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	69db      	ldr	r3, [r3, #28]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <dir_sdi+0xd4>
 800ee1a:	2302      	movs	r3, #2
 800ee1c:	e01a      	b.n	800ee54 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	69da      	ldr	r2, [r3, #28]
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	899b      	ldrh	r3, [r3, #12]
 800ee26:	4619      	mov	r1, r3
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee2e:	441a      	add	r2, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ee34:	693b      	ldr	r3, [r7, #16]
 800ee36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	899b      	ldrh	r3, [r3, #12]
 800ee3e:	461a      	mov	r2, r3
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee46:	fb00 f202 	mul.w	r2, r0, r2
 800ee4a:	1a9b      	subs	r3, r3, r2
 800ee4c:	18ca      	adds	r2, r1, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3718      	adds	r7, #24
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	695b      	ldr	r3, [r3, #20]
 800ee70:	3320      	adds	r3, #32
 800ee72:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	69db      	ldr	r3, [r3, #28]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d003      	beq.n	800ee84 <dir_next+0x28>
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ee82:	d301      	bcc.n	800ee88 <dir_next+0x2c>
 800ee84:	2304      	movs	r3, #4
 800ee86:	e0bb      	b.n	800f000 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	899b      	ldrh	r3, [r3, #12]
 800ee8c:	461a      	mov	r2, r3
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee94:	fb01 f202 	mul.w	r2, r1, r2
 800ee98:	1a9b      	subs	r3, r3, r2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f040 809d 	bne.w	800efda <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	69db      	ldr	r3, [r3, #28]
 800eea4:	1c5a      	adds	r2, r3, #1
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d10b      	bne.n	800eeca <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	095b      	lsrs	r3, r3, #5
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	8912      	ldrh	r2, [r2, #8]
 800eeba:	4293      	cmp	r3, r2
 800eebc:	f0c0 808d 	bcc.w	800efda <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	61da      	str	r2, [r3, #28]
 800eec6:	2304      	movs	r3, #4
 800eec8:	e09a      	b.n	800f000 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	899b      	ldrh	r3, [r3, #12]
 800eece:	461a      	mov	r2, r3
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	8952      	ldrh	r2, [r2, #10]
 800eeda:	3a01      	subs	r2, #1
 800eedc:	4013      	ands	r3, r2
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d17b      	bne.n	800efda <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	699b      	ldr	r3, [r3, #24]
 800eee8:	4619      	mov	r1, r3
 800eeea:	4610      	mov	r0, r2
 800eeec:	f7ff fc0b 	bl	800e706 <get_fat>
 800eef0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d801      	bhi.n	800eefc <dir_next+0xa0>
 800eef8:	2302      	movs	r3, #2
 800eefa:	e081      	b.n	800f000 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef02:	d101      	bne.n	800ef08 <dir_next+0xac>
 800ef04:	2301      	movs	r3, #1
 800ef06:	e07b      	b.n	800f000 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	69db      	ldr	r3, [r3, #28]
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	d359      	bcc.n	800efc6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	61da      	str	r2, [r3, #28]
 800ef1e:	2304      	movs	r3, #4
 800ef20:	e06e      	b.n	800f000 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	699b      	ldr	r3, [r3, #24]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4610      	mov	r0, r2
 800ef2c:	f7ff fe3d 	bl	800ebaa <create_chain>
 800ef30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <dir_next+0xe0>
 800ef38:	2307      	movs	r3, #7
 800ef3a:	e061      	b.n	800f000 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	2b01      	cmp	r3, #1
 800ef40:	d101      	bne.n	800ef46 <dir_next+0xea>
 800ef42:	2302      	movs	r3, #2
 800ef44:	e05c      	b.n	800f000 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef4c:	d101      	bne.n	800ef52 <dir_next+0xf6>
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e056      	b.n	800f000 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f7ff fad6 	bl	800e504 <sync_window>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d001      	beq.n	800ef62 <dir_next+0x106>
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e04e      	b.n	800f000 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	899b      	ldrh	r3, [r3, #12]
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	2100      	movs	r1, #0
 800ef70:	f7ff f8ff 	bl	800e172 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef74:	2300      	movs	r3, #0
 800ef76:	613b      	str	r3, [r7, #16]
 800ef78:	6979      	ldr	r1, [r7, #20]
 800ef7a:	68f8      	ldr	r0, [r7, #12]
 800ef7c:	f7ff fba4 	bl	800e6c8 <clust2sect>
 800ef80:	4602      	mov	r2, r0
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	635a      	str	r2, [r3, #52]	@ 0x34
 800ef86:	e012      	b.n	800efae <dir_next+0x152>
						fs->wflag = 1;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ef8e:	68f8      	ldr	r0, [r7, #12]
 800ef90:	f7ff fab8 	bl	800e504 <sync_window>
 800ef94:	4603      	mov	r3, r0
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d001      	beq.n	800ef9e <dir_next+0x142>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e030      	b.n	800f000 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	3301      	adds	r3, #1
 800efa2:	613b      	str	r3, [r7, #16]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efa8:	1c5a      	adds	r2, r3, #1
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	635a      	str	r2, [r3, #52]	@ 0x34
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	895b      	ldrh	r3, [r3, #10]
 800efb2:	461a      	mov	r2, r3
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	4293      	cmp	r3, r2
 800efb8:	d3e6      	bcc.n	800ef88 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	1ad2      	subs	r2, r2, r3
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	697a      	ldr	r2, [r7, #20]
 800efca:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800efcc:	6979      	ldr	r1, [r7, #20]
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7ff fb7a 	bl	800e6c8 <clust2sect>
 800efd4:	4602      	mov	r2, r0
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	899b      	ldrh	r3, [r3, #12]
 800efea:	461a      	mov	r2, r3
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	fbb3 f0f2 	udiv	r0, r3, r2
 800eff2:	fb00 f202 	mul.w	r2, r0, r2
 800eff6:	1a9b      	subs	r3, r3, r2
 800eff8:	18ca      	adds	r2, r1, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800effe:	2300      	movs	r3, #0
}
 800f000:	4618      	mov	r0, r3
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f018:	2100      	movs	r1, #0
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f7ff fe95 	bl	800ed4a <dir_sdi>
 800f020:	4603      	mov	r3, r0
 800f022:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f024:	7dfb      	ldrb	r3, [r7, #23]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d12b      	bne.n	800f082 <dir_alloc+0x7a>
		n = 0;
 800f02a:	2300      	movs	r3, #0
 800f02c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	69db      	ldr	r3, [r3, #28]
 800f032:	4619      	mov	r1, r3
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff faa9 	bl	800e58c <move_window>
 800f03a:	4603      	mov	r3, r0
 800f03c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f03e:	7dfb      	ldrb	r3, [r7, #23]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d11d      	bne.n	800f080 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6a1b      	ldr	r3, [r3, #32]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	2be5      	cmp	r3, #229	@ 0xe5
 800f04c:	d004      	beq.n	800f058 <dir_alloc+0x50>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d107      	bne.n	800f068 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	3301      	adds	r3, #1
 800f05c:	613b      	str	r3, [r7, #16]
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	d102      	bne.n	800f06c <dir_alloc+0x64>
 800f066:	e00c      	b.n	800f082 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f068:	2300      	movs	r3, #0
 800f06a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f06c:	2101      	movs	r1, #1
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7ff fef4 	bl	800ee5c <dir_next>
 800f074:	4603      	mov	r3, r0
 800f076:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d0d7      	beq.n	800f02e <dir_alloc+0x26>
 800f07e:	e000      	b.n	800f082 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f080:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f082:	7dfb      	ldrb	r3, [r7, #23]
 800f084:	2b04      	cmp	r3, #4
 800f086:	d101      	bne.n	800f08c <dir_alloc+0x84>
 800f088:	2307      	movs	r3, #7
 800f08a:	75fb      	strb	r3, [r7, #23]
	return res;
 800f08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3718      	adds	r7, #24
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b084      	sub	sp, #16
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	331a      	adds	r3, #26
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fe ffc1 	bl	800e02c <ld_word>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d109      	bne.n	800f0ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	3314      	adds	r3, #20
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe ffb6 	bl	800e02c <ld_word>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	041b      	lsls	r3, r3, #16
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3710      	adds	r7, #16
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	331a      	adds	r3, #26
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	b292      	uxth	r2, r2
 800f0e8:	4611      	mov	r1, r2
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fe ffd9 	bl	800e0a2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	2b03      	cmp	r3, #3
 800f0f6:	d109      	bne.n	800f10c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	f103 0214 	add.w	r2, r3, #20
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	0c1b      	lsrs	r3, r3, #16
 800f102:	b29b      	uxth	r3, r3
 800f104:	4619      	mov	r1, r3
 800f106:	4610      	mov	r0, r2
 800f108:	f7fe ffcb 	bl	800e0a2 <st_word>
	}
}
 800f10c:	bf00      	nop
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b087      	sub	sp, #28
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	331a      	adds	r3, #26
 800f122:	4618      	mov	r0, r3
 800f124:	f7fe ff82 	bl	800e02c <ld_word>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d001      	beq.n	800f132 <cmp_lfn+0x1e>
 800f12e:	2300      	movs	r3, #0
 800f130:	e059      	b.n	800f1e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f13a:	1e5a      	subs	r2, r3, #1
 800f13c:	4613      	mov	r3, r2
 800f13e:	005b      	lsls	r3, r3, #1
 800f140:	4413      	add	r3, r2
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	4413      	add	r3, r2
 800f146:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f148:	2301      	movs	r3, #1
 800f14a:	81fb      	strh	r3, [r7, #14]
 800f14c:	2300      	movs	r3, #0
 800f14e:	613b      	str	r3, [r7, #16]
 800f150:	e033      	b.n	800f1ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f152:	4a27      	ldr	r2, [pc, #156]	@ (800f1f0 <cmp_lfn+0xdc>)
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	4413      	add	r3, r2
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	461a      	mov	r2, r3
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	4413      	add	r3, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f7fe ff63 	bl	800e02c <ld_word>
 800f166:	4603      	mov	r3, r0
 800f168:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f16a:	89fb      	ldrh	r3, [r7, #14]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d01a      	beq.n	800f1a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	2bfe      	cmp	r3, #254	@ 0xfe
 800f174:	d812      	bhi.n	800f19c <cmp_lfn+0x88>
 800f176:	89bb      	ldrh	r3, [r7, #12]
 800f178:	4618      	mov	r0, r3
 800f17a:	f002 fbd5 	bl	8011928 <ff_wtoupper>
 800f17e:	4603      	mov	r3, r0
 800f180:	461c      	mov	r4, r3
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	1c5a      	adds	r2, r3, #1
 800f186:	617a      	str	r2, [r7, #20]
 800f188:	005b      	lsls	r3, r3, #1
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	4413      	add	r3, r2
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	4618      	mov	r0, r3
 800f192:	f002 fbc9 	bl	8011928 <ff_wtoupper>
 800f196:	4603      	mov	r3, r0
 800f198:	429c      	cmp	r4, r3
 800f19a:	d001      	beq.n	800f1a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f19c:	2300      	movs	r3, #0
 800f19e:	e022      	b.n	800f1e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f1a0:	89bb      	ldrh	r3, [r7, #12]
 800f1a2:	81fb      	strh	r3, [r7, #14]
 800f1a4:	e006      	b.n	800f1b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f1a6:	89bb      	ldrh	r3, [r7, #12]
 800f1a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d001      	beq.n	800f1b4 <cmp_lfn+0xa0>
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	e018      	b.n	800f1e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	613b      	str	r3, [r7, #16]
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	2b0c      	cmp	r3, #12
 800f1be:	d9c8      	bls.n	800f152 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00b      	beq.n	800f1e4 <cmp_lfn+0xd0>
 800f1cc:	89fb      	ldrh	r3, [r7, #14]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d008      	beq.n	800f1e4 <cmp_lfn+0xd0>
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	005b      	lsls	r3, r3, #1
 800f1d6:	687a      	ldr	r2, [r7, #4]
 800f1d8:	4413      	add	r3, r2
 800f1da:	881b      	ldrh	r3, [r3, #0]
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d001      	beq.n	800f1e4 <cmp_lfn+0xd0>
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e000      	b.n	800f1e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f1e4:	2301      	movs	r3, #1
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	371c      	adds	r7, #28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd90      	pop	{r4, r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	080173f8 	.word	0x080173f8

0800f1f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b088      	sub	sp, #32
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	4611      	mov	r1, r2
 800f200:	461a      	mov	r2, r3
 800f202:	460b      	mov	r3, r1
 800f204:	71fb      	strb	r3, [r7, #7]
 800f206:	4613      	mov	r3, r2
 800f208:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	330d      	adds	r3, #13
 800f20e:	79ba      	ldrb	r2, [r7, #6]
 800f210:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	330b      	adds	r3, #11
 800f216:	220f      	movs	r2, #15
 800f218:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	330c      	adds	r3, #12
 800f21e:	2200      	movs	r2, #0
 800f220:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	331a      	adds	r3, #26
 800f226:	2100      	movs	r1, #0
 800f228:	4618      	mov	r0, r3
 800f22a:	f7fe ff3a 	bl	800e0a2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f22e:	79fb      	ldrb	r3, [r7, #7]
 800f230:	1e5a      	subs	r2, r3, #1
 800f232:	4613      	mov	r3, r2
 800f234:	005b      	lsls	r3, r3, #1
 800f236:	4413      	add	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	4413      	add	r3, r2
 800f23c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	82fb      	strh	r3, [r7, #22]
 800f242:	2300      	movs	r3, #0
 800f244:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f246:	8afb      	ldrh	r3, [r7, #22]
 800f248:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f24c:	4293      	cmp	r3, r2
 800f24e:	d007      	beq.n	800f260 <put_lfn+0x6c>
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	61fa      	str	r2, [r7, #28]
 800f256:	005b      	lsls	r3, r3, #1
 800f258:	68fa      	ldr	r2, [r7, #12]
 800f25a:	4413      	add	r3, r2
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f260:	4a17      	ldr	r2, [pc, #92]	@ (800f2c0 <put_lfn+0xcc>)
 800f262:	69bb      	ldr	r3, [r7, #24]
 800f264:	4413      	add	r3, r2
 800f266:	781b      	ldrb	r3, [r3, #0]
 800f268:	461a      	mov	r2, r3
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	4413      	add	r3, r2
 800f26e:	8afa      	ldrh	r2, [r7, #22]
 800f270:	4611      	mov	r1, r2
 800f272:	4618      	mov	r0, r3
 800f274:	f7fe ff15 	bl	800e0a2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f278:	8afb      	ldrh	r3, [r7, #22]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d102      	bne.n	800f284 <put_lfn+0x90>
 800f27e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f282:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	3301      	adds	r3, #1
 800f288:	61bb      	str	r3, [r7, #24]
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	2b0c      	cmp	r3, #12
 800f28e:	d9da      	bls.n	800f246 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f290:	8afb      	ldrh	r3, [r7, #22]
 800f292:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f296:	4293      	cmp	r3, r2
 800f298:	d006      	beq.n	800f2a8 <put_lfn+0xb4>
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	881b      	ldrh	r3, [r3, #0]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d103      	bne.n	800f2b0 <put_lfn+0xbc>
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	79fa      	ldrb	r2, [r7, #7]
 800f2b4:	701a      	strb	r2, [r3, #0]
}
 800f2b6:	bf00      	nop
 800f2b8:	3720      	adds	r7, #32
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	080173f8 	.word	0x080173f8

0800f2c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b08c      	sub	sp, #48	@ 0x30
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f2d2:	220b      	movs	r2, #11
 800f2d4:	68b9      	ldr	r1, [r7, #8]
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7fe ff2a 	bl	800e130 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	2b05      	cmp	r3, #5
 800f2e0:	d92b      	bls.n	800f33a <gen_numname+0x76>
		sr = seq;
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f2e6:	e022      	b.n	800f32e <gen_numname+0x6a>
			wc = *lfn++;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	1c9a      	adds	r2, r3, #2
 800f2ec:	607a      	str	r2, [r7, #4]
 800f2ee:	881b      	ldrh	r3, [r3, #0]
 800f2f0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f2f6:	e017      	b.n	800f328 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	005a      	lsls	r2, r3, #1
 800f2fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	4413      	add	r3, r2
 800f304:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f306:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f308:	085b      	lsrs	r3, r3, #1
 800f30a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f312:	2b00      	cmp	r3, #0
 800f314:	d005      	beq.n	800f322 <gen_numname+0x5e>
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800f31c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800f320:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f324:	3301      	adds	r3, #1
 800f326:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f32a:	2b0f      	cmp	r3, #15
 800f32c:	d9e4      	bls.n	800f2f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1d8      	bne.n	800f2e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f33a:	2307      	movs	r3, #7
 800f33c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	b2db      	uxtb	r3, r3
 800f342:	f003 030f 	and.w	r3, r3, #15
 800f346:	b2db      	uxtb	r3, r3
 800f348:	3330      	adds	r3, #48	@ 0x30
 800f34a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800f34e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f352:	2b39      	cmp	r3, #57	@ 0x39
 800f354:	d904      	bls.n	800f360 <gen_numname+0x9c>
 800f356:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f35a:	3307      	adds	r3, #7
 800f35c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800f360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f362:	1e5a      	subs	r2, r3, #1
 800f364:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f366:	3330      	adds	r3, #48	@ 0x30
 800f368:	443b      	add	r3, r7
 800f36a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800f36e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	091b      	lsrs	r3, r3, #4
 800f376:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d1df      	bne.n	800f33e <gen_numname+0x7a>
	ns[i] = '~';
 800f37e:	f107 0214 	add.w	r2, r7, #20
 800f382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f384:	4413      	add	r3, r2
 800f386:	227e      	movs	r2, #126	@ 0x7e
 800f388:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f38a:	2300      	movs	r3, #0
 800f38c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f38e:	e002      	b.n	800f396 <gen_numname+0xd2>
 800f390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f392:	3301      	adds	r3, #1
 800f394:	627b      	str	r3, [r7, #36]	@ 0x24
 800f396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d205      	bcs.n	800f3aa <gen_numname+0xe6>
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3a2:	4413      	add	r3, r2
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	2b20      	cmp	r3, #32
 800f3a8:	d1f2      	bne.n	800f390 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ac:	2b07      	cmp	r3, #7
 800f3ae:	d807      	bhi.n	800f3c0 <gen_numname+0xfc>
 800f3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b2:	1c5a      	adds	r2, r3, #1
 800f3b4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800f3b6:	3330      	adds	r3, #48	@ 0x30
 800f3b8:	443b      	add	r3, r7
 800f3ba:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f3be:	e000      	b.n	800f3c2 <gen_numname+0xfe>
 800f3c0:	2120      	movs	r1, #32
 800f3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3c4:	1c5a      	adds	r2, r3, #1
 800f3c6:	627a      	str	r2, [r7, #36]	@ 0x24
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	4413      	add	r3, r2
 800f3cc:	460a      	mov	r2, r1
 800f3ce:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3d2:	2b07      	cmp	r3, #7
 800f3d4:	d9e9      	bls.n	800f3aa <gen_numname+0xe6>
}
 800f3d6:	bf00      	nop
 800f3d8:	bf00      	nop
 800f3da:	3730      	adds	r7, #48	@ 0x30
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f3ec:	230b      	movs	r3, #11
 800f3ee:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f3f0:	7bfb      	ldrb	r3, [r7, #15]
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	0852      	lsrs	r2, r2, #1
 800f3f6:	01db      	lsls	r3, r3, #7
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	b2da      	uxtb	r2, r3
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	1c59      	adds	r1, r3, #1
 800f400:	6079      	str	r1, [r7, #4]
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	4413      	add	r3, r2
 800f406:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	3b01      	subs	r3, #1
 800f40c:	60bb      	str	r3, [r7, #8]
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1ed      	bne.n	800f3f0 <sum_sfn+0x10>
	return sum;
 800f414:	7bfb      	ldrb	r3, [r7, #15]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3714      	adds	r7, #20
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b086      	sub	sp, #24
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f430:	2100      	movs	r1, #0
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff fc89 	bl	800ed4a <dir_sdi>
 800f438:	4603      	mov	r3, r0
 800f43a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f43c:	7dfb      	ldrb	r3, [r7, #23]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <dir_find+0x24>
 800f442:	7dfb      	ldrb	r3, [r7, #23]
 800f444:	e0a9      	b.n	800f59a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f446:	23ff      	movs	r3, #255	@ 0xff
 800f448:	753b      	strb	r3, [r7, #20]
 800f44a:	7d3b      	ldrb	r3, [r7, #20]
 800f44c:	757b      	strb	r3, [r7, #21]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f04f 32ff 	mov.w	r2, #4294967295
 800f454:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	69db      	ldr	r3, [r3, #28]
 800f45a:	4619      	mov	r1, r3
 800f45c:	6938      	ldr	r0, [r7, #16]
 800f45e:	f7ff f895 	bl	800e58c <move_window>
 800f462:	4603      	mov	r3, r0
 800f464:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f466:	7dfb      	ldrb	r3, [r7, #23]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f040 8090 	bne.w	800f58e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6a1b      	ldr	r3, [r3, #32]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f476:	7dbb      	ldrb	r3, [r7, #22]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d102      	bne.n	800f482 <dir_find+0x60>
 800f47c:	2304      	movs	r3, #4
 800f47e:	75fb      	strb	r3, [r7, #23]
 800f480:	e08a      	b.n	800f598 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	330b      	adds	r3, #11
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f48e:	73fb      	strb	r3, [r7, #15]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	7bfa      	ldrb	r2, [r7, #15]
 800f494:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f496:	7dbb      	ldrb	r3, [r7, #22]
 800f498:	2be5      	cmp	r3, #229	@ 0xe5
 800f49a:	d007      	beq.n	800f4ac <dir_find+0x8a>
 800f49c:	7bfb      	ldrb	r3, [r7, #15]
 800f49e:	f003 0308 	and.w	r3, r3, #8
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d009      	beq.n	800f4ba <dir_find+0x98>
 800f4a6:	7bfb      	ldrb	r3, [r7, #15]
 800f4a8:	2b0f      	cmp	r3, #15
 800f4aa:	d006      	beq.n	800f4ba <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f4ac:	23ff      	movs	r3, #255	@ 0xff
 800f4ae:	757b      	strb	r3, [r7, #21]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b6:	631a      	str	r2, [r3, #48]	@ 0x30
 800f4b8:	e05e      	b.n	800f578 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f4ba:	7bfb      	ldrb	r3, [r7, #15]
 800f4bc:	2b0f      	cmp	r3, #15
 800f4be:	d136      	bne.n	800f52e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d154      	bne.n	800f578 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f4ce:	7dbb      	ldrb	r3, [r7, #22]
 800f4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00d      	beq.n	800f4f4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a1b      	ldr	r3, [r3, #32]
 800f4dc:	7b5b      	ldrb	r3, [r3, #13]
 800f4de:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f4e0:	7dbb      	ldrb	r3, [r7, #22]
 800f4e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f4e6:	75bb      	strb	r3, [r7, #22]
 800f4e8:	7dbb      	ldrb	r3, [r7, #22]
 800f4ea:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	695a      	ldr	r2, [r3, #20]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4f4:	7dba      	ldrb	r2, [r7, #22]
 800f4f6:	7d7b      	ldrb	r3, [r7, #21]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d115      	bne.n	800f528 <dir_find+0x106>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6a1b      	ldr	r3, [r3, #32]
 800f500:	330d      	adds	r3, #13
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	7d3a      	ldrb	r2, [r7, #20]
 800f506:	429a      	cmp	r2, r3
 800f508:	d10e      	bne.n	800f528 <dir_find+0x106>
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	691a      	ldr	r2, [r3, #16]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	4619      	mov	r1, r3
 800f514:	4610      	mov	r0, r2
 800f516:	f7ff fdfd 	bl	800f114 <cmp_lfn>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d003      	beq.n	800f528 <dir_find+0x106>
 800f520:	7d7b      	ldrb	r3, [r7, #21]
 800f522:	3b01      	subs	r3, #1
 800f524:	b2db      	uxtb	r3, r3
 800f526:	e000      	b.n	800f52a <dir_find+0x108>
 800f528:	23ff      	movs	r3, #255	@ 0xff
 800f52a:	757b      	strb	r3, [r7, #21]
 800f52c:	e024      	b.n	800f578 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f52e:	7d7b      	ldrb	r3, [r7, #21]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d109      	bne.n	800f548 <dir_find+0x126>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	4618      	mov	r0, r3
 800f53a:	f7ff ff51 	bl	800f3e0 <sum_sfn>
 800f53e:	4603      	mov	r3, r0
 800f540:	461a      	mov	r2, r3
 800f542:	7d3b      	ldrb	r3, [r7, #20]
 800f544:	4293      	cmp	r3, r2
 800f546:	d024      	beq.n	800f592 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f54e:	f003 0301 	and.w	r3, r3, #1
 800f552:	2b00      	cmp	r3, #0
 800f554:	d10a      	bne.n	800f56c <dir_find+0x14a>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a18      	ldr	r0, [r3, #32]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3324      	adds	r3, #36	@ 0x24
 800f55e:	220b      	movs	r2, #11
 800f560:	4619      	mov	r1, r3
 800f562:	f7fe fe21 	bl	800e1a8 <mem_cmp>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d014      	beq.n	800f596 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f56c:	23ff      	movs	r3, #255	@ 0xff
 800f56e:	757b      	strb	r3, [r7, #21]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f04f 32ff 	mov.w	r2, #4294967295
 800f576:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f578:	2100      	movs	r1, #0
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f7ff fc6e 	bl	800ee5c <dir_next>
 800f580:	4603      	mov	r3, r0
 800f582:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f584:	7dfb      	ldrb	r3, [r7, #23]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f43f af65 	beq.w	800f456 <dir_find+0x34>
 800f58c:	e004      	b.n	800f598 <dir_find+0x176>
		if (res != FR_OK) break;
 800f58e:	bf00      	nop
 800f590:	e002      	b.n	800f598 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f592:	bf00      	nop
 800f594:	e000      	b.n	800f598 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f596:	bf00      	nop

	return res;
 800f598:	7dfb      	ldrb	r3, [r7, #23]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3718      	adds	r7, #24
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}
	...

0800f5a4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b08c      	sub	sp, #48	@ 0x30
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f5b8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d001      	beq.n	800f5c4 <dir_register+0x20>
 800f5c0:	2306      	movs	r3, #6
 800f5c2:	e0e0      	b.n	800f786 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5c8:	e002      	b.n	800f5d0 <dir_register+0x2c>
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5d0:	69fb      	ldr	r3, [r7, #28]
 800f5d2:	691a      	ldr	r2, [r3, #16]
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	4413      	add	r3, r2
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d1f4      	bne.n	800f5ca <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800f5e6:	f107 030c 	add.w	r3, r7, #12
 800f5ea:	220c      	movs	r2, #12
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fe fd9f 	bl	800e130 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f5f2:	7dfb      	ldrb	r3, [r7, #23]
 800f5f4:	f003 0301 	and.w	r3, r3, #1
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d032      	beq.n	800f662 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2240      	movs	r2, #64	@ 0x40
 800f600:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800f604:	2301      	movs	r3, #1
 800f606:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f608:	e016      	b.n	800f638 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800f610:	69fb      	ldr	r3, [r7, #28]
 800f612:	691a      	ldr	r2, [r3, #16]
 800f614:	f107 010c 	add.w	r1, r7, #12
 800f618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f61a:	f7ff fe53 	bl	800f2c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff feff 	bl	800f422 <dir_find>
 800f624:	4603      	mov	r3, r0
 800f626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800f62a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d106      	bne.n	800f640 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f634:	3301      	adds	r3, #1
 800f636:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f63a:	2b63      	cmp	r3, #99	@ 0x63
 800f63c:	d9e5      	bls.n	800f60a <dir_register+0x66>
 800f63e:	e000      	b.n	800f642 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f640:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f644:	2b64      	cmp	r3, #100	@ 0x64
 800f646:	d101      	bne.n	800f64c <dir_register+0xa8>
 800f648:	2307      	movs	r3, #7
 800f64a:	e09c      	b.n	800f786 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f64c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f650:	2b04      	cmp	r3, #4
 800f652:	d002      	beq.n	800f65a <dir_register+0xb6>
 800f654:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f658:	e095      	b.n	800f786 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f65a:	7dfa      	ldrb	r2, [r7, #23]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f662:	7dfb      	ldrb	r3, [r7, #23]
 800f664:	f003 0302 	and.w	r3, r3, #2
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d007      	beq.n	800f67c <dir_register+0xd8>
 800f66c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f66e:	330c      	adds	r3, #12
 800f670:	4a47      	ldr	r2, [pc, #284]	@ (800f790 <dir_register+0x1ec>)
 800f672:	fba2 2303 	umull	r2, r3, r2, r3
 800f676:	089b      	lsrs	r3, r3, #2
 800f678:	3301      	adds	r3, #1
 800f67a:	e000      	b.n	800f67e <dir_register+0xda>
 800f67c:	2301      	movs	r3, #1
 800f67e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f680:	6a39      	ldr	r1, [r7, #32]
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7ff fcc0 	bl	800f008 <dir_alloc>
 800f688:	4603      	mov	r3, r0
 800f68a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f68e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f692:	2b00      	cmp	r3, #0
 800f694:	d148      	bne.n	800f728 <dir_register+0x184>
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	3b01      	subs	r3, #1
 800f69a:	623b      	str	r3, [r7, #32]
 800f69c:	6a3b      	ldr	r3, [r7, #32]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d042      	beq.n	800f728 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	695a      	ldr	r2, [r3, #20]
 800f6a6:	6a3b      	ldr	r3, [r7, #32]
 800f6a8:	015b      	lsls	r3, r3, #5
 800f6aa:	1ad3      	subs	r3, r2, r3
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f7ff fb4b 	bl	800ed4a <dir_sdi>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f6ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d132      	bne.n	800f728 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	3324      	adds	r3, #36	@ 0x24
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7ff fe8a 	bl	800f3e0 <sum_sfn>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	69db      	ldr	r3, [r3, #28]
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	69f8      	ldr	r0, [r7, #28]
 800f6d8:	f7fe ff58 	bl	800e58c <move_window>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800f6e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d11d      	bne.n	800f726 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	6918      	ldr	r0, [r3, #16]
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6a19      	ldr	r1, [r3, #32]
 800f6f2:	6a3b      	ldr	r3, [r7, #32]
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	7efb      	ldrb	r3, [r7, #27]
 800f6f8:	f7ff fd7c 	bl	800f1f4 <put_lfn>
				fs->wflag = 1;
 800f6fc:	69fb      	ldr	r3, [r7, #28]
 800f6fe:	2201      	movs	r2, #1
 800f700:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f702:	2100      	movs	r1, #0
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff fba9 	bl	800ee5c <dir_next>
 800f70a:	4603      	mov	r3, r0
 800f70c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800f710:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f714:	2b00      	cmp	r3, #0
 800f716:	d107      	bne.n	800f728 <dir_register+0x184>
 800f718:	6a3b      	ldr	r3, [r7, #32]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	623b      	str	r3, [r7, #32]
 800f71e:	6a3b      	ldr	r3, [r7, #32]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1d5      	bne.n	800f6d0 <dir_register+0x12c>
 800f724:	e000      	b.n	800f728 <dir_register+0x184>
				if (res != FR_OK) break;
 800f726:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f728:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d128      	bne.n	800f782 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	69db      	ldr	r3, [r3, #28]
 800f734:	4619      	mov	r1, r3
 800f736:	69f8      	ldr	r0, [r7, #28]
 800f738:	f7fe ff28 	bl	800e58c <move_window>
 800f73c:	4603      	mov	r3, r0
 800f73e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800f742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f746:	2b00      	cmp	r3, #0
 800f748:	d11b      	bne.n	800f782 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a1b      	ldr	r3, [r3, #32]
 800f74e:	2220      	movs	r2, #32
 800f750:	2100      	movs	r1, #0
 800f752:	4618      	mov	r0, r3
 800f754:	f7fe fd0d 	bl	800e172 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a18      	ldr	r0, [r3, #32]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	3324      	adds	r3, #36	@ 0x24
 800f760:	220b      	movs	r2, #11
 800f762:	4619      	mov	r1, r3
 800f764:	f7fe fce4 	bl	800e130 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a1b      	ldr	r3, [r3, #32]
 800f772:	330c      	adds	r3, #12
 800f774:	f002 0218 	and.w	r2, r2, #24
 800f778:	b2d2      	uxtb	r2, r2
 800f77a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	2201      	movs	r2, #1
 800f780:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f782:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f786:	4618      	mov	r0, r3
 800f788:	3730      	adds	r7, #48	@ 0x30
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
 800f78e:	bf00      	nop
 800f790:	4ec4ec4f 	.word	0x4ec4ec4f

0800f794 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b08a      	sub	sp, #40	@ 0x28
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	613b      	str	r3, [r7, #16]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	691b      	ldr	r3, [r3, #16]
 800f7aa:	60fb      	str	r3, [r7, #12]
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	617b      	str	r3, [r7, #20]
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	1c5a      	adds	r2, r3, #1
 800f7b8:	61ba      	str	r2, [r7, #24]
 800f7ba:	693a      	ldr	r2, [r7, #16]
 800f7bc:	4413      	add	r3, r2
 800f7be:	781b      	ldrb	r3, [r3, #0]
 800f7c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f7c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f7c4:	2b1f      	cmp	r3, #31
 800f7c6:	d940      	bls.n	800f84a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f7c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f7ca:	2b2f      	cmp	r3, #47	@ 0x2f
 800f7cc:	d006      	beq.n	800f7dc <create_name+0x48>
 800f7ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f7d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800f7d2:	d110      	bne.n	800f7f6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f7d4:	e002      	b.n	800f7dc <create_name+0x48>
 800f7d6:	69bb      	ldr	r3, [r7, #24]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	61bb      	str	r3, [r7, #24]
 800f7dc:	693a      	ldr	r2, [r7, #16]
 800f7de:	69bb      	ldr	r3, [r7, #24]
 800f7e0:	4413      	add	r3, r2
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800f7e6:	d0f6      	beq.n	800f7d6 <create_name+0x42>
 800f7e8:	693a      	ldr	r2, [r7, #16]
 800f7ea:	69bb      	ldr	r3, [r7, #24]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	2b5c      	cmp	r3, #92	@ 0x5c
 800f7f2:	d0f0      	beq.n	800f7d6 <create_name+0x42>
			break;
 800f7f4:	e02a      	b.n	800f84c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	2bfe      	cmp	r3, #254	@ 0xfe
 800f7fa:	d901      	bls.n	800f800 <create_name+0x6c>
 800f7fc:	2306      	movs	r3, #6
 800f7fe:	e17d      	b.n	800fafc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f802:	b2db      	uxtb	r3, r3
 800f804:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f806:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f808:	2101      	movs	r1, #1
 800f80a:	4618      	mov	r0, r3
 800f80c:	f002 f850 	bl	80118b0 <ff_convert>
 800f810:	4603      	mov	r3, r0
 800f812:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f814:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f816:	2b00      	cmp	r3, #0
 800f818:	d101      	bne.n	800f81e <create_name+0x8a>
 800f81a:	2306      	movs	r3, #6
 800f81c:	e16e      	b.n	800fafc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f81e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f820:	2b7f      	cmp	r3, #127	@ 0x7f
 800f822:	d809      	bhi.n	800f838 <create_name+0xa4>
 800f824:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f826:	4619      	mov	r1, r3
 800f828:	488d      	ldr	r0, [pc, #564]	@ (800fa60 <create_name+0x2cc>)
 800f82a:	f7fe fce4 	bl	800e1f6 <chk_chr>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <create_name+0xa4>
 800f834:	2306      	movs	r3, #6
 800f836:	e161      	b.n	800fafc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	617a      	str	r2, [r7, #20]
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	4413      	add	r3, r2
 800f844:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f846:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f848:	e7b4      	b.n	800f7b4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f84a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f84c:	693a      	ldr	r2, [r7, #16]
 800f84e:	69bb      	ldr	r3, [r7, #24]
 800f850:	441a      	add	r2, r3
 800f852:	683b      	ldr	r3, [r7, #0]
 800f854:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f856:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f858:	2b1f      	cmp	r3, #31
 800f85a:	d801      	bhi.n	800f860 <create_name+0xcc>
 800f85c:	2304      	movs	r3, #4
 800f85e:	e000      	b.n	800f862 <create_name+0xce>
 800f860:	2300      	movs	r3, #0
 800f862:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f866:	e011      	b.n	800f88c <create_name+0xf8>
		w = lfn[di - 1];
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f86e:	3b01      	subs	r3, #1
 800f870:	005b      	lsls	r3, r3, #1
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	4413      	add	r3, r2
 800f876:	881b      	ldrh	r3, [r3, #0]
 800f878:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800f87a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f87c:	2b20      	cmp	r3, #32
 800f87e:	d002      	beq.n	800f886 <create_name+0xf2>
 800f880:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f882:	2b2e      	cmp	r3, #46	@ 0x2e
 800f884:	d106      	bne.n	800f894 <create_name+0x100>
		di--;
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	3b01      	subs	r3, #1
 800f88a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d1ea      	bne.n	800f868 <create_name+0xd4>
 800f892:	e000      	b.n	800f896 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f894:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	005b      	lsls	r3, r3, #1
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	4413      	add	r3, r2
 800f89e:	2200      	movs	r2, #0
 800f8a0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <create_name+0x118>
 800f8a8:	2306      	movs	r3, #6
 800f8aa:	e127      	b.n	800fafc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	3324      	adds	r3, #36	@ 0x24
 800f8b0:	220b      	movs	r2, #11
 800f8b2:	2120      	movs	r1, #32
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f7fe fc5c 	bl	800e172 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	61bb      	str	r3, [r7, #24]
 800f8be:	e002      	b.n	800f8c6 <create_name+0x132>
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	3301      	adds	r3, #1
 800f8c4:	61bb      	str	r3, [r7, #24]
 800f8c6:	69bb      	ldr	r3, [r7, #24]
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	68fa      	ldr	r2, [r7, #12]
 800f8cc:	4413      	add	r3, r2
 800f8ce:	881b      	ldrh	r3, [r3, #0]
 800f8d0:	2b20      	cmp	r3, #32
 800f8d2:	d0f5      	beq.n	800f8c0 <create_name+0x12c>
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	005b      	lsls	r3, r3, #1
 800f8d8:	68fa      	ldr	r2, [r7, #12]
 800f8da:	4413      	add	r3, r2
 800f8dc:	881b      	ldrh	r3, [r3, #0]
 800f8de:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8e0:	d0ee      	beq.n	800f8c0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d009      	beq.n	800f8fc <create_name+0x168>
 800f8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f8ec:	f043 0303 	orr.w	r3, r3, #3
 800f8f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f8f4:	e002      	b.n	800f8fc <create_name+0x168>
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	617b      	str	r3, [r7, #20]
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d009      	beq.n	800f916 <create_name+0x182>
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f908:	3b01      	subs	r3, #1
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	68fa      	ldr	r2, [r7, #12]
 800f90e:	4413      	add	r3, r2
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	2b2e      	cmp	r3, #46	@ 0x2e
 800f914:	d1ef      	bne.n	800f8f6 <create_name+0x162>

	i = b = 0; ni = 8;
 800f916:	2300      	movs	r3, #0
 800f918:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f91c:	2300      	movs	r3, #0
 800f91e:	623b      	str	r3, [r7, #32]
 800f920:	2308      	movs	r3, #8
 800f922:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	61ba      	str	r2, [r7, #24]
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	4413      	add	r3, r2
 800f930:	881b      	ldrh	r3, [r3, #0]
 800f932:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f934:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f936:	2b00      	cmp	r3, #0
 800f938:	f000 8090 	beq.w	800fa5c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f93c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f93e:	2b20      	cmp	r3, #32
 800f940:	d006      	beq.n	800f950 <create_name+0x1bc>
 800f942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f944:	2b2e      	cmp	r3, #46	@ 0x2e
 800f946:	d10a      	bne.n	800f95e <create_name+0x1ca>
 800f948:	69ba      	ldr	r2, [r7, #24]
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	429a      	cmp	r2, r3
 800f94e:	d006      	beq.n	800f95e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f954:	f043 0303 	orr.w	r3, r3, #3
 800f958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f95c:	e07d      	b.n	800fa5a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f95e:	6a3a      	ldr	r2, [r7, #32]
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	429a      	cmp	r2, r3
 800f964:	d203      	bcs.n	800f96e <create_name+0x1da>
 800f966:	69ba      	ldr	r2, [r7, #24]
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d123      	bne.n	800f9b6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	2b0b      	cmp	r3, #11
 800f972:	d106      	bne.n	800f982 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f978:	f043 0303 	orr.w	r3, r3, #3
 800f97c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f980:	e075      	b.n	800fa6e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f982:	69ba      	ldr	r2, [r7, #24]
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	429a      	cmp	r2, r3
 800f988:	d005      	beq.n	800f996 <create_name+0x202>
 800f98a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f98e:	f043 0303 	orr.w	r3, r3, #3
 800f992:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800f996:	69ba      	ldr	r2, [r7, #24]
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d866      	bhi.n	800fa6c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	61bb      	str	r3, [r7, #24]
 800f9a2:	2308      	movs	r3, #8
 800f9a4:	623b      	str	r3, [r7, #32]
 800f9a6:	230b      	movs	r3, #11
 800f9a8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f9aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f9b4:	e051      	b.n	800fa5a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f9b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9b8:	2b7f      	cmp	r3, #127	@ 0x7f
 800f9ba:	d914      	bls.n	800f9e6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f9bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9be:	2100      	movs	r1, #0
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f001 ff75 	bl	80118b0 <ff_convert>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f9ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d004      	beq.n	800f9da <create_name+0x246>
 800f9d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9d2:	3b80      	subs	r3, #128	@ 0x80
 800f9d4:	4a23      	ldr	r2, [pc, #140]	@ (800fa64 <create_name+0x2d0>)
 800f9d6:	5cd3      	ldrb	r3, [r2, r3]
 800f9d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f9da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f9de:	f043 0302 	orr.w	r3, r3, #2
 800f9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f9e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d007      	beq.n	800f9fc <create_name+0x268>
 800f9ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	481d      	ldr	r0, [pc, #116]	@ (800fa68 <create_name+0x2d4>)
 800f9f2:	f7fe fc00 	bl	800e1f6 <chk_chr>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d008      	beq.n	800fa0e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f9fc:	235f      	movs	r3, #95	@ 0x5f
 800f9fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800fa00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fa04:	f043 0303 	orr.w	r3, r3, #3
 800fa08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800fa0c:	e01b      	b.n	800fa46 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fa0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa10:	2b40      	cmp	r3, #64	@ 0x40
 800fa12:	d909      	bls.n	800fa28 <create_name+0x294>
 800fa14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa16:	2b5a      	cmp	r3, #90	@ 0x5a
 800fa18:	d806      	bhi.n	800fa28 <create_name+0x294>
					b |= 2;
 800fa1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fa1e:	f043 0302 	orr.w	r3, r3, #2
 800fa22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fa26:	e00e      	b.n	800fa46 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fa28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa2a:	2b60      	cmp	r3, #96	@ 0x60
 800fa2c:	d90b      	bls.n	800fa46 <create_name+0x2b2>
 800fa2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa30:	2b7a      	cmp	r3, #122	@ 0x7a
 800fa32:	d808      	bhi.n	800fa46 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fa34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fa38:	f043 0301 	orr.w	r3, r3, #1
 800fa3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800fa40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800fa42:	3b20      	subs	r3, #32
 800fa44:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fa46:	6a3b      	ldr	r3, [r7, #32]
 800fa48:	1c5a      	adds	r2, r3, #1
 800fa4a:	623a      	str	r2, [r7, #32]
 800fa4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800fa4e:	b2d1      	uxtb	r1, r2
 800fa50:	687a      	ldr	r2, [r7, #4]
 800fa52:	4413      	add	r3, r2
 800fa54:	460a      	mov	r2, r1
 800fa56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fa5a:	e763      	b.n	800f924 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fa5c:	bf00      	nop
 800fa5e:	e006      	b.n	800fa6e <create_name+0x2da>
 800fa60:	08017304 	.word	0x08017304
 800fa64:	08017378 	.word	0x08017378
 800fa68:	08017310 	.word	0x08017310
			if (si > di) break;			/* No extension */
 800fa6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800fa74:	2be5      	cmp	r3, #229	@ 0xe5
 800fa76:	d103      	bne.n	800fa80 <create_name+0x2ec>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2205      	movs	r2, #5
 800fa7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	2b08      	cmp	r3, #8
 800fa84:	d104      	bne.n	800fa90 <create_name+0x2fc>
 800fa86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fa8a:	009b      	lsls	r3, r3, #2
 800fa8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fa90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fa94:	f003 030c 	and.w	r3, r3, #12
 800fa98:	2b0c      	cmp	r3, #12
 800fa9a:	d005      	beq.n	800faa8 <create_name+0x314>
 800fa9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800faa0:	f003 0303 	and.w	r3, r3, #3
 800faa4:	2b03      	cmp	r3, #3
 800faa6:	d105      	bne.n	800fab4 <create_name+0x320>
 800faa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800faac:	f043 0302 	orr.w	r3, r3, #2
 800fab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fab8:	f003 0302 	and.w	r3, r3, #2
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d117      	bne.n	800faf0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fac0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fac4:	f003 0303 	and.w	r3, r3, #3
 800fac8:	2b01      	cmp	r3, #1
 800faca:	d105      	bne.n	800fad8 <create_name+0x344>
 800facc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fad0:	f043 0310 	orr.w	r3, r3, #16
 800fad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fad8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fadc:	f003 030c 	and.w	r3, r3, #12
 800fae0:	2b04      	cmp	r3, #4
 800fae2:	d105      	bne.n	800faf0 <create_name+0x35c>
 800fae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fae8:	f043 0308 	orr.w	r3, r3, #8
 800faec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800faf6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800fafa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3728      	adds	r7, #40	@ 0x28
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b086      	sub	sp, #24
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb18:	e002      	b.n	800fb20 <follow_path+0x1c>
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	603b      	str	r3, [r7, #0]
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	781b      	ldrb	r3, [r3, #0]
 800fb24:	2b2f      	cmp	r3, #47	@ 0x2f
 800fb26:	d0f8      	beq.n	800fb1a <follow_path+0x16>
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b5c      	cmp	r3, #92	@ 0x5c
 800fb2e:	d0f4      	beq.n	800fb1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2200      	movs	r2, #0
 800fb34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	2b1f      	cmp	r3, #31
 800fb3c:	d80a      	bhi.n	800fb54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	2280      	movs	r2, #128	@ 0x80
 800fb42:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800fb46:	2100      	movs	r1, #0
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f7ff f8fe 	bl	800ed4a <dir_sdi>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	75fb      	strb	r3, [r7, #23]
 800fb52:	e048      	b.n	800fbe6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb54:	463b      	mov	r3, r7
 800fb56:	4619      	mov	r1, r3
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff fe1b 	bl	800f794 <create_name>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d139      	bne.n	800fbdc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff fc5a 	bl	800f422 <dir_find>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800fb78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb7a:	7dfb      	ldrb	r3, [r7, #23]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00a      	beq.n	800fb96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb80:	7dfb      	ldrb	r3, [r7, #23]
 800fb82:	2b04      	cmp	r3, #4
 800fb84:	d12c      	bne.n	800fbe0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb86:	7afb      	ldrb	r3, [r7, #11]
 800fb88:	f003 0304 	and.w	r3, r3, #4
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d127      	bne.n	800fbe0 <follow_path+0xdc>
 800fb90:	2305      	movs	r3, #5
 800fb92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb94:	e024      	b.n	800fbe0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb96:	7afb      	ldrb	r3, [r7, #11]
 800fb98:	f003 0304 	and.w	r3, r3, #4
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d121      	bne.n	800fbe4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	799b      	ldrb	r3, [r3, #6]
 800fba4:	f003 0310 	and.w	r3, r3, #16
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d102      	bne.n	800fbb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fbac:	2305      	movs	r3, #5
 800fbae:	75fb      	strb	r3, [r7, #23]
 800fbb0:	e019      	b.n	800fbe6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	695b      	ldr	r3, [r3, #20]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	8992      	ldrh	r2, [r2, #12]
 800fbc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbc4:	fb00 f202 	mul.w	r2, r0, r2
 800fbc8:	1a9b      	subs	r3, r3, r2
 800fbca:	440b      	add	r3, r1
 800fbcc:	4619      	mov	r1, r3
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f7ff fa61 	bl	800f096 <ld_clust>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fbda:	e7bb      	b.n	800fb54 <follow_path+0x50>
			if (res != FR_OK) break;
 800fbdc:	bf00      	nop
 800fbde:	e002      	b.n	800fbe6 <follow_path+0xe2>
				break;
 800fbe0:	bf00      	nop
 800fbe2:	e000      	b.n	800fbe6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbe4:	bf00      	nop
			}
		}
	}

	return res;
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3718      	adds	r7, #24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	bd80      	pop	{r7, pc}

0800fbf0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fbf8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbfc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d031      	beq.n	800fc6a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	617b      	str	r3, [r7, #20]
 800fc0c:	e002      	b.n	800fc14 <get_ldnumber+0x24>
 800fc0e:	697b      	ldr	r3, [r7, #20]
 800fc10:	3301      	adds	r3, #1
 800fc12:	617b      	str	r3, [r7, #20]
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	2b1f      	cmp	r3, #31
 800fc1a:	d903      	bls.n	800fc24 <get_ldnumber+0x34>
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2b3a      	cmp	r3, #58	@ 0x3a
 800fc22:	d1f4      	bne.n	800fc0e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b3a      	cmp	r3, #58	@ 0x3a
 800fc2a:	d11c      	bne.n	800fc66 <get_ldnumber+0x76>
			tp = *path;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	1c5a      	adds	r2, r3, #1
 800fc36:	60fa      	str	r2, [r7, #12]
 800fc38:	781b      	ldrb	r3, [r3, #0]
 800fc3a:	3b30      	subs	r3, #48	@ 0x30
 800fc3c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	2b09      	cmp	r3, #9
 800fc42:	d80e      	bhi.n	800fc62 <get_ldnumber+0x72>
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d10a      	bne.n	800fc62 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d107      	bne.n	800fc62 <get_ldnumber+0x72>
					vol = (int)i;
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	617b      	str	r3, [r7, #20]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	e002      	b.n	800fc6c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc66:	2300      	movs	r3, #0
 800fc68:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc6a:	693b      	ldr	r3, [r7, #16]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	371c      	adds	r7, #28
 800fc70:	46bd      	mov	sp, r7
 800fc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc76:	4770      	bx	lr

0800fc78 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b082      	sub	sp, #8
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	70da      	strb	r2, [r3, #3]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc8e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc90:	6839      	ldr	r1, [r7, #0]
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7fe fc7a 	bl	800e58c <move_window>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <check_fs+0x2a>
 800fc9e:	2304      	movs	r3, #4
 800fca0:	e038      	b.n	800fd14 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	3338      	adds	r3, #56	@ 0x38
 800fca6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe f9be 	bl	800e02c <ld_word>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d001      	beq.n	800fcc0 <check_fs+0x48>
 800fcbc:	2303      	movs	r3, #3
 800fcbe:	e029      	b.n	800fd14 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fcc6:	2be9      	cmp	r3, #233	@ 0xe9
 800fcc8:	d009      	beq.n	800fcde <check_fs+0x66>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fcd0:	2beb      	cmp	r3, #235	@ 0xeb
 800fcd2:	d11e      	bne.n	800fd12 <check_fs+0x9a>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fcda:	2b90      	cmp	r3, #144	@ 0x90
 800fcdc:	d119      	bne.n	800fd12 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3338      	adds	r3, #56	@ 0x38
 800fce2:	3336      	adds	r3, #54	@ 0x36
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe f9b9 	bl	800e05c <ld_dword>
 800fcea:	4603      	mov	r3, r0
 800fcec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800fcf0:	4a0a      	ldr	r2, [pc, #40]	@ (800fd1c <check_fs+0xa4>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d101      	bne.n	800fcfa <check_fs+0x82>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	e00c      	b.n	800fd14 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	3338      	adds	r3, #56	@ 0x38
 800fcfe:	3352      	adds	r3, #82	@ 0x52
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fe f9ab 	bl	800e05c <ld_dword>
 800fd06:	4603      	mov	r3, r0
 800fd08:	4a05      	ldr	r2, [pc, #20]	@ (800fd20 <check_fs+0xa8>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d101      	bne.n	800fd12 <check_fs+0x9a>
 800fd0e:	2300      	movs	r3, #0
 800fd10:	e000      	b.n	800fd14 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fd12:	2302      	movs	r3, #2
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}
 800fd1c:	00544146 	.word	0x00544146
 800fd20:	33544146 	.word	0x33544146

0800fd24 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b096      	sub	sp, #88	@ 0x58
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	2200      	movs	r2, #0
 800fd36:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fd38:	68f8      	ldr	r0, [r7, #12]
 800fd3a:	f7ff ff59 	bl	800fbf0 <get_ldnumber>
 800fd3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	da01      	bge.n	800fd4a <find_volume+0x26>
 800fd46:	230b      	movs	r3, #11
 800fd48:	e265      	b.n	8010216 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd4a:	4a9f      	ldr	r2, [pc, #636]	@ (800ffc8 <find_volume+0x2a4>)
 800fd4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd52:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d101      	bne.n	800fd5e <find_volume+0x3a>
 800fd5a:	230c      	movs	r3, #12
 800fd5c:	e25b      	b.n	8010216 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fd62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd64:	79fb      	ldrb	r3, [r7, #7]
 800fd66:	f023 0301 	bic.w	r3, r3, #1
 800fd6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd6e:	781b      	ldrb	r3, [r3, #0]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d01a      	beq.n	800fdaa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd76:	785b      	ldrb	r3, [r3, #1]
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fe f8b7 	bl	800deec <disk_status>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d10c      	bne.n	800fdaa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd90:	79fb      	ldrb	r3, [r7, #7]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d007      	beq.n	800fda6 <find_volume+0x82>
 800fd96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fd9a:	f003 0304 	and.w	r3, r3, #4
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fda2:	230a      	movs	r3, #10
 800fda4:	e237      	b.n	8010216 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fda6:	2300      	movs	r3, #0
 800fda8:	e235      	b.n	8010216 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdac:	2200      	movs	r2, #0
 800fdae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fdb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdb2:	b2da      	uxtb	r2, r3
 800fdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdb6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdba:	785b      	ldrb	r3, [r3, #1]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fe f8af 	bl	800df20 <disk_initialize>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fdc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d001      	beq.n	800fdd8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fdd4:	2303      	movs	r3, #3
 800fdd6:	e21e      	b.n	8010216 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fdd8:	79fb      	ldrb	r3, [r7, #7]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d007      	beq.n	800fdee <find_volume+0xca>
 800fdde:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fde2:	f003 0304 	and.w	r3, r3, #4
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d001      	beq.n	800fdee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fdea:	230a      	movs	r3, #10
 800fdec:	e213      	b.n	8010216 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fdee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf0:	7858      	ldrb	r0, [r3, #1]
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdf4:	330c      	adds	r3, #12
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	2102      	movs	r1, #2
 800fdfa:	f7fe f8f9 	bl	800dff0 <disk_ioctl>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <find_volume+0xe4>
 800fe04:	2301      	movs	r3, #1
 800fe06:	e206      	b.n	8010216 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fe08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe0a:	899b      	ldrh	r3, [r3, #12]
 800fe0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe10:	d80d      	bhi.n	800fe2e <find_volume+0x10a>
 800fe12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe14:	899b      	ldrh	r3, [r3, #12]
 800fe16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fe1a:	d308      	bcc.n	800fe2e <find_volume+0x10a>
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe1e:	899b      	ldrh	r3, [r3, #12]
 800fe20:	461a      	mov	r2, r3
 800fe22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe24:	899b      	ldrh	r3, [r3, #12]
 800fe26:	3b01      	subs	r3, #1
 800fe28:	4013      	ands	r3, r2
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <find_volume+0x10e>
 800fe2e:	2301      	movs	r3, #1
 800fe30:	e1f1      	b.n	8010216 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fe32:	2300      	movs	r3, #0
 800fe34:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fe36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800fe38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800fe3a:	f7ff ff1d 	bl	800fc78 <check_fs>
 800fe3e:	4603      	mov	r3, r0
 800fe40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d149      	bne.n	800fee0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe50:	e01e      	b.n	800fe90 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe54:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800fe58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800fe60:	4413      	add	r3, r2
 800fe62:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe66:	3304      	adds	r3, #4
 800fe68:	781b      	ldrb	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d006      	beq.n	800fe7c <find_volume+0x158>
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe70:	3308      	adds	r3, #8
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fe f8f2 	bl	800e05c <ld_dword>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	e000      	b.n	800fe7e <find_volume+0x15a>
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	3358      	adds	r3, #88	@ 0x58
 800fe84:	443b      	add	r3, r7
 800fe86:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800fe90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d9dd      	bls.n	800fe52 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe96:	2300      	movs	r3, #0
 800fe98:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800fe9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d002      	beq.n	800fea6 <find_volume+0x182>
 800fea0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fea2:	3b01      	subs	r3, #1
 800fea4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	3358      	adds	r3, #88	@ 0x58
 800feac:	443b      	add	r3, r7
 800feae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800feb2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800feb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d005      	beq.n	800fec6 <find_volume+0x1a2>
 800feba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800febc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800febe:	f7ff fedb 	bl	800fc78 <check_fs>
 800fec2:	4603      	mov	r3, r0
 800fec4:	e000      	b.n	800fec8 <find_volume+0x1a4>
 800fec6:	2303      	movs	r3, #3
 800fec8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fecc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d905      	bls.n	800fee0 <find_volume+0x1bc>
 800fed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fed6:	3301      	adds	r3, #1
 800fed8:	643b      	str	r3, [r7, #64]	@ 0x40
 800feda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fedc:	2b03      	cmp	r3, #3
 800fede:	d9e2      	bls.n	800fea6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fee0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fee4:	2b04      	cmp	r3, #4
 800fee6:	d101      	bne.n	800feec <find_volume+0x1c8>
 800fee8:	2301      	movs	r3, #1
 800feea:	e194      	b.n	8010216 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800feec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d901      	bls.n	800fef8 <find_volume+0x1d4>
 800fef4:	230d      	movs	r3, #13
 800fef6:	e18e      	b.n	8010216 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fefa:	3338      	adds	r3, #56	@ 0x38
 800fefc:	330b      	adds	r3, #11
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe f894 	bl	800e02c <ld_word>
 800ff04:	4603      	mov	r3, r0
 800ff06:	461a      	mov	r2, r3
 800ff08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff0a:	899b      	ldrh	r3, [r3, #12]
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d001      	beq.n	800ff14 <find_volume+0x1f0>
 800ff10:	230d      	movs	r3, #13
 800ff12:	e180      	b.n	8010216 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ff14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff16:	3338      	adds	r3, #56	@ 0x38
 800ff18:	3316      	adds	r3, #22
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe f886 	bl	800e02c <ld_word>
 800ff20:	4603      	mov	r3, r0
 800ff22:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ff24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d106      	bne.n	800ff38 <find_volume+0x214>
 800ff2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff2c:	3338      	adds	r3, #56	@ 0x38
 800ff2e:	3324      	adds	r3, #36	@ 0x24
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe f893 	bl	800e05c <ld_dword>
 800ff36:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800ff38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ff3c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff40:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800ff44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff46:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff4a:	789b      	ldrb	r3, [r3, #2]
 800ff4c:	2b01      	cmp	r3, #1
 800ff4e:	d005      	beq.n	800ff5c <find_volume+0x238>
 800ff50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff52:	789b      	ldrb	r3, [r3, #2]
 800ff54:	2b02      	cmp	r3, #2
 800ff56:	d001      	beq.n	800ff5c <find_volume+0x238>
 800ff58:	230d      	movs	r3, #13
 800ff5a:	e15c      	b.n	8010216 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff5e:	789b      	ldrb	r3, [r3, #2]
 800ff60:	461a      	mov	r2, r3
 800ff62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ff64:	fb02 f303 	mul.w	r3, r2, r3
 800ff68:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff70:	461a      	mov	r2, r3
 800ff72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff74:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff78:	895b      	ldrh	r3, [r3, #10]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d008      	beq.n	800ff90 <find_volume+0x26c>
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff80:	895b      	ldrh	r3, [r3, #10]
 800ff82:	461a      	mov	r2, r3
 800ff84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff86:	895b      	ldrh	r3, [r3, #10]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	4013      	ands	r3, r2
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d001      	beq.n	800ff94 <find_volume+0x270>
 800ff90:	230d      	movs	r3, #13
 800ff92:	e140      	b.n	8010216 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff96:	3338      	adds	r3, #56	@ 0x38
 800ff98:	3311      	adds	r3, #17
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7fe f846 	bl	800e02c <ld_word>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffa6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffaa:	891b      	ldrh	r3, [r3, #8]
 800ffac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ffae:	8992      	ldrh	r2, [r2, #12]
 800ffb0:	0952      	lsrs	r2, r2, #5
 800ffb2:	b292      	uxth	r2, r2
 800ffb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffb8:	fb01 f202 	mul.w	r2, r1, r2
 800ffbc:	1a9b      	subs	r3, r3, r2
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <find_volume+0x2a8>
 800ffc4:	230d      	movs	r3, #13
 800ffc6:	e126      	b.n	8010216 <find_volume+0x4f2>
 800ffc8:	200031a4 	.word	0x200031a4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ffcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffce:	3338      	adds	r3, #56	@ 0x38
 800ffd0:	3313      	adds	r3, #19
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fe f82a 	bl	800e02c <ld_word>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ffdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d106      	bne.n	800fff0 <find_volume+0x2cc>
 800ffe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe4:	3338      	adds	r3, #56	@ 0x38
 800ffe6:	3320      	adds	r3, #32
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7fe f837 	bl	800e05c <ld_dword>
 800ffee:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fff2:	3338      	adds	r3, #56	@ 0x38
 800fff4:	330e      	adds	r3, #14
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fe f818 	bl	800e02c <ld_word>
 800fffc:	4603      	mov	r3, r0
 800fffe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010000:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010002:	2b00      	cmp	r3, #0
 8010004:	d101      	bne.n	801000a <find_volume+0x2e6>
 8010006:	230d      	movs	r3, #13
 8010008:	e105      	b.n	8010216 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801000a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801000c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801000e:	4413      	add	r3, r2
 8010010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010012:	8911      	ldrh	r1, [r2, #8]
 8010014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010016:	8992      	ldrh	r2, [r2, #12]
 8010018:	0952      	lsrs	r2, r2, #5
 801001a:	b292      	uxth	r2, r2
 801001c:	fbb1 f2f2 	udiv	r2, r1, r2
 8010020:	b292      	uxth	r2, r2
 8010022:	4413      	add	r3, r2
 8010024:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002a:	429a      	cmp	r2, r3
 801002c:	d201      	bcs.n	8010032 <find_volume+0x30e>
 801002e:	230d      	movs	r3, #13
 8010030:	e0f1      	b.n	8010216 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010036:	1ad3      	subs	r3, r2, r3
 8010038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801003a:	8952      	ldrh	r2, [r2, #10]
 801003c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010040:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010044:	2b00      	cmp	r3, #0
 8010046:	d101      	bne.n	801004c <find_volume+0x328>
 8010048:	230d      	movs	r3, #13
 801004a:	e0e4      	b.n	8010216 <find_volume+0x4f2>
		fmt = FS_FAT32;
 801004c:	2303      	movs	r3, #3
 801004e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010054:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010058:	4293      	cmp	r3, r2
 801005a:	d802      	bhi.n	8010062 <find_volume+0x33e>
 801005c:	2302      	movs	r3, #2
 801005e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010064:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010068:	4293      	cmp	r3, r2
 801006a:	d802      	bhi.n	8010072 <find_volume+0x34e>
 801006c:	2301      	movs	r3, #1
 801006e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010074:	1c9a      	adds	r2, r3, #2
 8010076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010078:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801007a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801007c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801007e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010080:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010082:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010084:	441a      	add	r2, r3
 8010086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010088:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801008a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801008c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008e:	441a      	add	r2, r3
 8010090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010092:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8010094:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010098:	2b03      	cmp	r3, #3
 801009a:	d11e      	bne.n	80100da <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801009c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009e:	3338      	adds	r3, #56	@ 0x38
 80100a0:	332a      	adds	r3, #42	@ 0x2a
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fd ffc2 	bl	800e02c <ld_word>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d001      	beq.n	80100b2 <find_volume+0x38e>
 80100ae:	230d      	movs	r3, #13
 80100b0:	e0b1      	b.n	8010216 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80100b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100b4:	891b      	ldrh	r3, [r3, #8]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <find_volume+0x39a>
 80100ba:	230d      	movs	r3, #13
 80100bc:	e0ab      	b.n	8010216 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80100be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100c0:	3338      	adds	r3, #56	@ 0x38
 80100c2:	332c      	adds	r3, #44	@ 0x2c
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7fd ffc9 	bl	800e05c <ld_dword>
 80100ca:	4602      	mov	r2, r0
 80100cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ce:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80100d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100d2:	69db      	ldr	r3, [r3, #28]
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80100d8:	e01f      	b.n	801011a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	891b      	ldrh	r3, [r3, #8]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d101      	bne.n	80100e6 <find_volume+0x3c2>
 80100e2:	230d      	movs	r3, #13
 80100e4:	e097      	b.n	8010216 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80100e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80100ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100ec:	441a      	add	r2, r3
 80100ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100f0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100f2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80100f6:	2b02      	cmp	r3, #2
 80100f8:	d103      	bne.n	8010102 <find_volume+0x3de>
 80100fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100fc:	69db      	ldr	r3, [r3, #28]
 80100fe:	005b      	lsls	r3, r3, #1
 8010100:	e00a      	b.n	8010118 <find_volume+0x3f4>
 8010102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010104:	69da      	ldr	r2, [r3, #28]
 8010106:	4613      	mov	r3, r2
 8010108:	005b      	lsls	r3, r3, #1
 801010a:	4413      	add	r3, r2
 801010c:	085a      	lsrs	r2, r3, #1
 801010e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010110:	69db      	ldr	r3, [r3, #28]
 8010112:	f003 0301 	and.w	r3, r3, #1
 8010116:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010118:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801011a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801011c:	6a1a      	ldr	r2, [r3, #32]
 801011e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	4619      	mov	r1, r3
 8010124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010126:	440b      	add	r3, r1
 8010128:	3b01      	subs	r3, #1
 801012a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801012c:	8989      	ldrh	r1, [r1, #12]
 801012e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010132:	429a      	cmp	r2, r3
 8010134:	d201      	bcs.n	801013a <find_volume+0x416>
 8010136:	230d      	movs	r3, #13
 8010138:	e06d      	b.n	8010216 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801013a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801013c:	f04f 32ff 	mov.w	r2, #4294967295
 8010140:	619a      	str	r2, [r3, #24]
 8010142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010144:	699a      	ldr	r2, [r3, #24]
 8010146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010148:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801014a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014c:	2280      	movs	r2, #128	@ 0x80
 801014e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010150:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010154:	2b03      	cmp	r3, #3
 8010156:	d149      	bne.n	80101ec <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801015a:	3338      	adds	r3, #56	@ 0x38
 801015c:	3330      	adds	r3, #48	@ 0x30
 801015e:	4618      	mov	r0, r3
 8010160:	f7fd ff64 	bl	800e02c <ld_word>
 8010164:	4603      	mov	r3, r0
 8010166:	2b01      	cmp	r3, #1
 8010168:	d140      	bne.n	80101ec <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801016a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801016c:	3301      	adds	r3, #1
 801016e:	4619      	mov	r1, r3
 8010170:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010172:	f7fe fa0b 	bl	800e58c <move_window>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d137      	bne.n	80101ec <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801017c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017e:	2200      	movs	r2, #0
 8010180:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010184:	3338      	adds	r3, #56	@ 0x38
 8010186:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801018a:	4618      	mov	r0, r3
 801018c:	f7fd ff4e 	bl	800e02c <ld_word>
 8010190:	4603      	mov	r3, r0
 8010192:	461a      	mov	r2, r3
 8010194:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010198:	429a      	cmp	r2, r3
 801019a:	d127      	bne.n	80101ec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801019c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019e:	3338      	adds	r3, #56	@ 0x38
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fd ff5b 	bl	800e05c <ld_dword>
 80101a6:	4603      	mov	r3, r0
 80101a8:	4a1d      	ldr	r2, [pc, #116]	@ (8010220 <find_volume+0x4fc>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d11e      	bne.n	80101ec <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80101ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101b0:	3338      	adds	r3, #56	@ 0x38
 80101b2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80101b6:	4618      	mov	r0, r3
 80101b8:	f7fd ff50 	bl	800e05c <ld_dword>
 80101bc:	4603      	mov	r3, r0
 80101be:	4a19      	ldr	r2, [pc, #100]	@ (8010224 <find_volume+0x500>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d113      	bne.n	80101ec <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80101c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c6:	3338      	adds	r3, #56	@ 0x38
 80101c8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fd ff45 	bl	800e05c <ld_dword>
 80101d2:	4602      	mov	r2, r0
 80101d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80101d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101da:	3338      	adds	r3, #56	@ 0x38
 80101dc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7fd ff3b 	bl	800e05c <ld_dword>
 80101e6:	4602      	mov	r2, r0
 80101e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ea:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80101ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ee:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80101f2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101f4:	4b0c      	ldr	r3, [pc, #48]	@ (8010228 <find_volume+0x504>)
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	3301      	adds	r3, #1
 80101fa:	b29a      	uxth	r2, r3
 80101fc:	4b0a      	ldr	r3, [pc, #40]	@ (8010228 <find_volume+0x504>)
 80101fe:	801a      	strh	r2, [r3, #0]
 8010200:	4b09      	ldr	r3, [pc, #36]	@ (8010228 <find_volume+0x504>)
 8010202:	881a      	ldrh	r2, [r3, #0]
 8010204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010206:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801020a:	4a08      	ldr	r2, [pc, #32]	@ (801022c <find_volume+0x508>)
 801020c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801020e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010210:	f7fe f954 	bl	800e4bc <clear_lock>
#endif
	return FR_OK;
 8010214:	2300      	movs	r3, #0
}
 8010216:	4618      	mov	r0, r3
 8010218:	3758      	adds	r7, #88	@ 0x58
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	41615252 	.word	0x41615252
 8010224:	61417272 	.word	0x61417272
 8010228:	200031a8 	.word	0x200031a8
 801022c:	200031cc 	.word	0x200031cc

08010230 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
 8010238:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801023a:	2309      	movs	r3, #9
 801023c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d01c      	beq.n	801027e <validate+0x4e>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d018      	beq.n	801027e <validate+0x4e>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d013      	beq.n	801027e <validate+0x4e>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	889a      	ldrh	r2, [r3, #4]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	88db      	ldrh	r3, [r3, #6]
 8010260:	429a      	cmp	r2, r3
 8010262:	d10c      	bne.n	801027e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	785b      	ldrb	r3, [r3, #1]
 801026a:	4618      	mov	r0, r3
 801026c:	f7fd fe3e 	bl	800deec <disk_status>
 8010270:	4603      	mov	r3, r0
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <validate+0x4e>
			res = FR_OK;
 801027a:	2300      	movs	r3, #0
 801027c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801027e:	7bfb      	ldrb	r3, [r7, #15]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d102      	bne.n	801028a <validate+0x5a>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	e000      	b.n	801028c <validate+0x5c>
 801028a:	2300      	movs	r3, #0
 801028c:	683a      	ldr	r2, [r7, #0]
 801028e:	6013      	str	r3, [r2, #0]
	return res;
 8010290:	7bfb      	ldrb	r3, [r7, #15]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
	...

0801029c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b088      	sub	sp, #32
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	60f8      	str	r0, [r7, #12]
 80102a4:	60b9      	str	r1, [r7, #8]
 80102a6:	4613      	mov	r3, r2
 80102a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80102ae:	f107 0310 	add.w	r3, r7, #16
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7ff fc9c 	bl	800fbf0 <get_ldnumber>
 80102b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	da01      	bge.n	80102c4 <f_mount+0x28>
 80102c0:	230b      	movs	r3, #11
 80102c2:	e02b      	b.n	801031c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80102c4:	4a17      	ldr	r2, [pc, #92]	@ (8010324 <f_mount+0x88>)
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d005      	beq.n	80102e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80102d4:	69b8      	ldr	r0, [r7, #24]
 80102d6:	f7fe f8f1 	bl	800e4bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	2200      	movs	r2, #0
 80102de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d002      	beq.n	80102ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2200      	movs	r2, #0
 80102ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80102ec:	68fa      	ldr	r2, [r7, #12]
 80102ee:	490d      	ldr	r1, [pc, #52]	@ (8010324 <f_mount+0x88>)
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d002      	beq.n	8010302 <f_mount+0x66>
 80102fc:	79fb      	ldrb	r3, [r7, #7]
 80102fe:	2b01      	cmp	r3, #1
 8010300:	d001      	beq.n	8010306 <f_mount+0x6a>
 8010302:	2300      	movs	r3, #0
 8010304:	e00a      	b.n	801031c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010306:	f107 010c 	add.w	r1, r7, #12
 801030a:	f107 0308 	add.w	r3, r7, #8
 801030e:	2200      	movs	r2, #0
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff fd07 	bl	800fd24 <find_volume>
 8010316:	4603      	mov	r3, r0
 8010318:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801031a:	7dfb      	ldrb	r3, [r7, #23]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3720      	adds	r7, #32
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	200031a4 	.word	0x200031a4

08010328 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b09a      	sub	sp, #104	@ 0x68
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	4613      	mov	r3, r2
 8010334:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d101      	bne.n	8010340 <f_open+0x18>
 801033c:	2309      	movs	r3, #9
 801033e:	e1b7      	b.n	80106b0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010340:	79fb      	ldrb	r3, [r7, #7]
 8010342:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010346:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010348:	79fa      	ldrb	r2, [r7, #7]
 801034a:	f107 0114 	add.w	r1, r7, #20
 801034e:	f107 0308 	add.w	r3, r7, #8
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff fce6 	bl	800fd24 <find_volume>
 8010358:	4603      	mov	r3, r0
 801035a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 801035e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010362:	2b00      	cmp	r3, #0
 8010364:	f040 819b 	bne.w	801069e <f_open+0x376>
		dj.obj.fs = fs;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801036c:	68ba      	ldr	r2, [r7, #8]
 801036e:	f107 0318 	add.w	r3, r7, #24
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f7ff fbc5 	bl	800fb04 <follow_path>
 801037a:	4603      	mov	r3, r0
 801037c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010380:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010384:	2b00      	cmp	r3, #0
 8010386:	d118      	bne.n	80103ba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010388:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801038c:	b25b      	sxtb	r3, r3
 801038e:	2b00      	cmp	r3, #0
 8010390:	da03      	bge.n	801039a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010392:	2306      	movs	r3, #6
 8010394:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010398:	e00f      	b.n	80103ba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	2b01      	cmp	r3, #1
 801039e:	bf8c      	ite	hi
 80103a0:	2301      	movhi	r3, #1
 80103a2:	2300      	movls	r3, #0
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	461a      	mov	r2, r3
 80103a8:	f107 0318 	add.w	r3, r7, #24
 80103ac:	4611      	mov	r1, r2
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd ff3c 	bl	800e22c <chk_lock>
 80103b4:	4603      	mov	r3, r0
 80103b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80103ba:	79fb      	ldrb	r3, [r7, #7]
 80103bc:	f003 031c 	and.w	r3, r3, #28
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d07f      	beq.n	80104c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80103c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d017      	beq.n	80103fc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80103cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80103d0:	2b04      	cmp	r3, #4
 80103d2:	d10e      	bne.n	80103f2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80103d4:	f7fd ff86 	bl	800e2e4 <enq_lock>
 80103d8:	4603      	mov	r3, r0
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d006      	beq.n	80103ec <f_open+0xc4>
 80103de:	f107 0318 	add.w	r3, r7, #24
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7ff f8de 	bl	800f5a4 <dir_register>
 80103e8:	4603      	mov	r3, r0
 80103ea:	e000      	b.n	80103ee <f_open+0xc6>
 80103ec:	2312      	movs	r3, #18
 80103ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80103f2:	79fb      	ldrb	r3, [r7, #7]
 80103f4:	f043 0308 	orr.w	r3, r3, #8
 80103f8:	71fb      	strb	r3, [r7, #7]
 80103fa:	e010      	b.n	801041e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80103fc:	7fbb      	ldrb	r3, [r7, #30]
 80103fe:	f003 0311 	and.w	r3, r3, #17
 8010402:	2b00      	cmp	r3, #0
 8010404:	d003      	beq.n	801040e <f_open+0xe6>
					res = FR_DENIED;
 8010406:	2307      	movs	r3, #7
 8010408:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 801040c:	e007      	b.n	801041e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	f003 0304 	and.w	r3, r3, #4
 8010414:	2b00      	cmp	r3, #0
 8010416:	d002      	beq.n	801041e <f_open+0xf6>
 8010418:	2308      	movs	r3, #8
 801041a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801041e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010422:	2b00      	cmp	r3, #0
 8010424:	d168      	bne.n	80104f8 <f_open+0x1d0>
 8010426:	79fb      	ldrb	r3, [r7, #7]
 8010428:	f003 0308 	and.w	r3, r3, #8
 801042c:	2b00      	cmp	r3, #0
 801042e:	d063      	beq.n	80104f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8010430:	f7fd fcfe 	bl	800de30 <get_fattime>
 8010434:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010438:	330e      	adds	r3, #14
 801043a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801043c:	4618      	mov	r0, r3
 801043e:	f7fd fe4b 	bl	800e0d8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010444:	3316      	adds	r3, #22
 8010446:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010448:	4618      	mov	r0, r3
 801044a:	f7fd fe45 	bl	800e0d8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801044e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010450:	330b      	adds	r3, #11
 8010452:	2220      	movs	r2, #32
 8010454:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801045a:	4611      	mov	r1, r2
 801045c:	4618      	mov	r0, r3
 801045e:	f7fe fe1a 	bl	800f096 <ld_clust>
 8010462:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010468:	2200      	movs	r2, #0
 801046a:	4618      	mov	r0, r3
 801046c:	f7fe fe32 	bl	800f0d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010472:	331c      	adds	r3, #28
 8010474:	2100      	movs	r1, #0
 8010476:	4618      	mov	r0, r3
 8010478:	f7fd fe2e 	bl	800e0d8 <st_dword>
					fs->wflag = 1;
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	2201      	movs	r2, #1
 8010480:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010484:	2b00      	cmp	r3, #0
 8010486:	d037      	beq.n	80104f8 <f_open+0x1d0>
						dw = fs->winsect;
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801048c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801048e:	f107 0318 	add.w	r3, r7, #24
 8010492:	2200      	movs	r2, #0
 8010494:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010496:	4618      	mov	r0, r3
 8010498:	f7fe fb22 	bl	800eae0 <remove_chain>
 801049c:	4603      	mov	r3, r0
 801049e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80104a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d126      	bne.n	80104f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7fe f86c 	bl	800e58c <move_window>
 80104b4:	4603      	mov	r3, r0
 80104b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80104be:	3a01      	subs	r2, #1
 80104c0:	615a      	str	r2, [r3, #20]
 80104c2:	e019      	b.n	80104f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80104c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d115      	bne.n	80104f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80104cc:	7fbb      	ldrb	r3, [r7, #30]
 80104ce:	f003 0310 	and.w	r3, r3, #16
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d003      	beq.n	80104de <f_open+0x1b6>
					res = FR_NO_FILE;
 80104d6:	2304      	movs	r3, #4
 80104d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80104dc:	e00c      	b.n	80104f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80104de:	79fb      	ldrb	r3, [r7, #7]
 80104e0:	f003 0302 	and.w	r3, r3, #2
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d007      	beq.n	80104f8 <f_open+0x1d0>
 80104e8:	7fbb      	ldrb	r3, [r7, #30]
 80104ea:	f003 0301 	and.w	r3, r3, #1
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d002      	beq.n	80104f8 <f_open+0x1d0>
						res = FR_DENIED;
 80104f2:	2307      	movs	r3, #7
 80104f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80104f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d126      	bne.n	801054e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010500:	79fb      	ldrb	r3, [r7, #7]
 8010502:	f003 0308 	and.w	r3, r3, #8
 8010506:	2b00      	cmp	r3, #0
 8010508:	d003      	beq.n	8010512 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801050a:	79fb      	ldrb	r3, [r7, #7]
 801050c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010510:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801051a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010520:	79fb      	ldrb	r3, [r7, #7]
 8010522:	2b01      	cmp	r3, #1
 8010524:	bf8c      	ite	hi
 8010526:	2301      	movhi	r3, #1
 8010528:	2300      	movls	r3, #0
 801052a:	b2db      	uxtb	r3, r3
 801052c:	461a      	mov	r2, r3
 801052e:	f107 0318 	add.w	r3, r7, #24
 8010532:	4611      	mov	r1, r2
 8010534:	4618      	mov	r0, r3
 8010536:	f7fd fef7 	bl	800e328 <inc_lock>
 801053a:	4602      	mov	r2, r0
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d102      	bne.n	801054e <f_open+0x226>
 8010548:	2302      	movs	r3, #2
 801054a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801054e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010552:	2b00      	cmp	r3, #0
 8010554:	f040 80a3 	bne.w	801069e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801055c:	4611      	mov	r1, r2
 801055e:	4618      	mov	r0, r3
 8010560:	f7fe fd99 	bl	800f096 <ld_clust>
 8010564:	4602      	mov	r2, r0
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801056a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801056c:	331c      	adds	r3, #28
 801056e:	4618      	mov	r0, r3
 8010570:	f7fd fd74 	bl	800e05c <ld_dword>
 8010574:	4602      	mov	r2, r0
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2200      	movs	r2, #0
 801057e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	88da      	ldrh	r2, [r3, #6]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	79fa      	ldrb	r2, [r7, #7]
 8010592:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2200      	movs	r2, #0
 8010598:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2200      	movs	r2, #0
 801059e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3330      	adds	r3, #48	@ 0x30
 80105aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80105ae:	2100      	movs	r1, #0
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fd fdde 	bl	800e172 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80105b6:	79fb      	ldrb	r3, [r7, #7]
 80105b8:	f003 0320 	and.w	r3, r3, #32
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d06e      	beq.n	801069e <f_open+0x376>
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d06a      	beq.n	801069e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	68da      	ldr	r2, [r3, #12]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	895b      	ldrh	r3, [r3, #10]
 80105d4:	461a      	mov	r2, r3
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	899b      	ldrh	r3, [r3, #12]
 80105da:	fb02 f303 	mul.w	r3, r2, r3
 80105de:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	68db      	ldr	r3, [r3, #12]
 80105ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80105ec:	e016      	b.n	801061c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe f887 	bl	800e706 <get_fat>
 80105f8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80105fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d802      	bhi.n	8010606 <f_open+0x2de>
 8010600:	2302      	movs	r3, #2
 8010602:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010608:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060c:	d102      	bne.n	8010614 <f_open+0x2ec>
 801060e:	2301      	movs	r3, #1
 8010610:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010614:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801061c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010620:	2b00      	cmp	r3, #0
 8010622:	d103      	bne.n	801062c <f_open+0x304>
 8010624:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010628:	429a      	cmp	r2, r3
 801062a:	d8e0      	bhi.n	80105ee <f_open+0x2c6>
				}
				fp->clust = clst;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010630:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010632:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8010636:	2b00      	cmp	r3, #0
 8010638:	d131      	bne.n	801069e <f_open+0x376>
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	899b      	ldrh	r3, [r3, #12]
 801063e:	461a      	mov	r2, r3
 8010640:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010642:	fbb3 f1f2 	udiv	r1, r3, r2
 8010646:	fb01 f202 	mul.w	r2, r1, r2
 801064a:	1a9b      	subs	r3, r3, r2
 801064c:	2b00      	cmp	r3, #0
 801064e:	d026      	beq.n	801069e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8010654:	4618      	mov	r0, r3
 8010656:	f7fe f837 	bl	800e6c8 <clust2sect>
 801065a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801065c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801065e:	2b00      	cmp	r3, #0
 8010660:	d103      	bne.n	801066a <f_open+0x342>
						res = FR_INT_ERR;
 8010662:	2302      	movs	r3, #2
 8010664:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8010668:	e019      	b.n	801069e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	899b      	ldrh	r3, [r3, #12]
 801066e:	461a      	mov	r2, r3
 8010670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010672:	fbb3 f2f2 	udiv	r2, r3, r2
 8010676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010678:	441a      	add	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	7858      	ldrb	r0, [r3, #1]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6a1a      	ldr	r2, [r3, #32]
 801068c:	2301      	movs	r3, #1
 801068e:	f7fd fc6f 	bl	800df70 <disk_read>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d002      	beq.n	801069e <f_open+0x376>
 8010698:	2301      	movs	r3, #1
 801069a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801069e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <f_open+0x384>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2200      	movs	r2, #0
 80106aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80106ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3768      	adds	r7, #104	@ 0x68
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b08e      	sub	sp, #56	@ 0x38
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	60b9      	str	r1, [r7, #8]
 80106c2:	607a      	str	r2, [r7, #4]
 80106c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2200      	movs	r2, #0
 80106ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f107 0214 	add.w	r2, r7, #20
 80106d6:	4611      	mov	r1, r2
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fda9 	bl	8010230 <validate>
 80106de:	4603      	mov	r3, r0
 80106e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80106e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d107      	bne.n	80106fc <f_read+0x44>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	7d5b      	ldrb	r3, [r3, #21]
 80106f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80106f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <f_read+0x4a>
 80106fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010700:	e135      	b.n	801096e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	7d1b      	ldrb	r3, [r3, #20]
 8010706:	f003 0301 	and.w	r3, r3, #1
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <f_read+0x5a>
 801070e:	2307      	movs	r3, #7
 8010710:	e12d      	b.n	801096e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	68da      	ldr	r2, [r3, #12]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	699b      	ldr	r3, [r3, #24]
 801071a:	1ad3      	subs	r3, r2, r3
 801071c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	6a3b      	ldr	r3, [r7, #32]
 8010722:	429a      	cmp	r2, r3
 8010724:	f240 811e 	bls.w	8010964 <f_read+0x2ac>
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801072c:	e11a      	b.n	8010964 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	699b      	ldr	r3, [r3, #24]
 8010732:	697a      	ldr	r2, [r7, #20]
 8010734:	8992      	ldrh	r2, [r2, #12]
 8010736:	fbb3 f1f2 	udiv	r1, r3, r2
 801073a:	fb01 f202 	mul.w	r2, r1, r2
 801073e:	1a9b      	subs	r3, r3, r2
 8010740:	2b00      	cmp	r3, #0
 8010742:	f040 80d5 	bne.w	80108f0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	697a      	ldr	r2, [r7, #20]
 801074c:	8992      	ldrh	r2, [r2, #12]
 801074e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	8952      	ldrh	r2, [r2, #10]
 8010756:	3a01      	subs	r2, #1
 8010758:	4013      	ands	r3, r2
 801075a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d12f      	bne.n	80107c2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	699b      	ldr	r3, [r3, #24]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d103      	bne.n	8010772 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010770:	e013      	b.n	801079a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010776:	2b00      	cmp	r3, #0
 8010778:	d007      	beq.n	801078a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	699b      	ldr	r3, [r3, #24]
 801077e:	4619      	mov	r1, r3
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f7fe faaa 	bl	800ecda <clmt_clust>
 8010786:	6338      	str	r0, [r7, #48]	@ 0x30
 8010788:	e007      	b.n	801079a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801078a:	68fa      	ldr	r2, [r7, #12]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	69db      	ldr	r3, [r3, #28]
 8010790:	4619      	mov	r1, r3
 8010792:	4610      	mov	r0, r2
 8010794:	f7fd ffb7 	bl	800e706 <get_fat>
 8010798:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801079a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801079c:	2b01      	cmp	r3, #1
 801079e:	d804      	bhi.n	80107aa <f_read+0xf2>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2202      	movs	r2, #2
 80107a4:	755a      	strb	r2, [r3, #21]
 80107a6:	2302      	movs	r3, #2
 80107a8:	e0e1      	b.n	801096e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80107aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b0:	d104      	bne.n	80107bc <f_read+0x104>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2201      	movs	r2, #1
 80107b6:	755a      	strb	r2, [r3, #21]
 80107b8:	2301      	movs	r3, #1
 80107ba:	e0d8      	b.n	801096e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	4619      	mov	r1, r3
 80107ca:	4610      	mov	r0, r2
 80107cc:	f7fd ff7c 	bl	800e6c8 <clust2sect>
 80107d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d104      	bne.n	80107e2 <f_read+0x12a>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2202      	movs	r2, #2
 80107dc:	755a      	strb	r2, [r3, #21]
 80107de:	2302      	movs	r3, #2
 80107e0:	e0c5      	b.n	801096e <f_read+0x2b6>
			sect += csect;
 80107e2:	69ba      	ldr	r2, [r7, #24]
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	4413      	add	r3, r2
 80107e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	899b      	ldrh	r3, [r3, #12]
 80107ee:	461a      	mov	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80107f6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80107f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d041      	beq.n	8010882 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80107fe:	69fa      	ldr	r2, [r7, #28]
 8010800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010802:	4413      	add	r3, r2
 8010804:	697a      	ldr	r2, [r7, #20]
 8010806:	8952      	ldrh	r2, [r2, #10]
 8010808:	4293      	cmp	r3, r2
 801080a:	d905      	bls.n	8010818 <f_read+0x160>
					cc = fs->csize - csect;
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	895b      	ldrh	r3, [r3, #10]
 8010810:	461a      	mov	r2, r3
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	1ad3      	subs	r3, r2, r3
 8010816:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	7858      	ldrb	r0, [r3, #1]
 801081c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801081e:	69ba      	ldr	r2, [r7, #24]
 8010820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010822:	f7fd fba5 	bl	800df70 <disk_read>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d004      	beq.n	8010836 <f_read+0x17e>
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	2201      	movs	r2, #1
 8010830:	755a      	strb	r2, [r3, #21]
 8010832:	2301      	movs	r3, #1
 8010834:	e09b      	b.n	801096e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	7d1b      	ldrb	r3, [r3, #20]
 801083a:	b25b      	sxtb	r3, r3
 801083c:	2b00      	cmp	r3, #0
 801083e:	da18      	bge.n	8010872 <f_read+0x1ba>
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	6a1a      	ldr	r2, [r3, #32]
 8010844:	69bb      	ldr	r3, [r7, #24]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801084a:	429a      	cmp	r2, r3
 801084c:	d911      	bls.n	8010872 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6a1a      	ldr	r2, [r3, #32]
 8010852:	69bb      	ldr	r3, [r7, #24]
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	697a      	ldr	r2, [r7, #20]
 8010858:	8992      	ldrh	r2, [r2, #12]
 801085a:	fb02 f303 	mul.w	r3, r2, r3
 801085e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010860:	18d0      	adds	r0, r2, r3
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	899b      	ldrh	r3, [r3, #12]
 801086c:	461a      	mov	r2, r3
 801086e:	f7fd fc5f 	bl	800e130 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	899b      	ldrh	r3, [r3, #12]
 8010876:	461a      	mov	r2, r3
 8010878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087a:	fb02 f303 	mul.w	r3, r2, r3
 801087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8010880:	e05c      	b.n	801093c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	6a1b      	ldr	r3, [r3, #32]
 8010886:	69ba      	ldr	r2, [r7, #24]
 8010888:	429a      	cmp	r2, r3
 801088a:	d02e      	beq.n	80108ea <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	7d1b      	ldrb	r3, [r3, #20]
 8010890:	b25b      	sxtb	r3, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	da18      	bge.n	80108c8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	7858      	ldrb	r0, [r3, #1]
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6a1a      	ldr	r2, [r3, #32]
 80108a4:	2301      	movs	r3, #1
 80108a6:	f7fd fb83 	bl	800dfb0 <disk_write>
 80108aa:	4603      	mov	r3, r0
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d004      	beq.n	80108ba <f_read+0x202>
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2201      	movs	r2, #1
 80108b4:	755a      	strb	r2, [r3, #21]
 80108b6:	2301      	movs	r3, #1
 80108b8:	e059      	b.n	801096e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	7d1b      	ldrb	r3, [r3, #20]
 80108be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	7858      	ldrb	r0, [r3, #1]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80108d2:	2301      	movs	r3, #1
 80108d4:	69ba      	ldr	r2, [r7, #24]
 80108d6:	f7fd fb4b 	bl	800df70 <disk_read>
 80108da:	4603      	mov	r3, r0
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d004      	beq.n	80108ea <f_read+0x232>
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2201      	movs	r2, #1
 80108e4:	755a      	strb	r2, [r3, #21]
 80108e6:	2301      	movs	r3, #1
 80108e8:	e041      	b.n	801096e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	69ba      	ldr	r2, [r7, #24]
 80108ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	899b      	ldrh	r3, [r3, #12]
 80108f4:	4618      	mov	r0, r3
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	697a      	ldr	r2, [r7, #20]
 80108fc:	8992      	ldrh	r2, [r2, #12]
 80108fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8010902:	fb01 f202 	mul.w	r2, r1, r2
 8010906:	1a9b      	subs	r3, r3, r2
 8010908:	1ac3      	subs	r3, r0, r3
 801090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801090c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	429a      	cmp	r2, r3
 8010912:	d901      	bls.n	8010918 <f_read+0x260>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	699b      	ldr	r3, [r3, #24]
 8010922:	697a      	ldr	r2, [r7, #20]
 8010924:	8992      	ldrh	r2, [r2, #12]
 8010926:	fbb3 f0f2 	udiv	r0, r3, r2
 801092a:	fb00 f202 	mul.w	r2, r0, r2
 801092e:	1a9b      	subs	r3, r3, r2
 8010930:	440b      	add	r3, r1
 8010932:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010934:	4619      	mov	r1, r3
 8010936:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010938:	f7fd fbfa 	bl	800e130 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801093c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010940:	4413      	add	r3, r2
 8010942:	627b      	str	r3, [r7, #36]	@ 0x24
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	699a      	ldr	r2, [r3, #24]
 8010948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094a:	441a      	add	r2, r3
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	619a      	str	r2, [r3, #24]
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010956:	441a      	add	r2, r3
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	601a      	str	r2, [r3, #0]
 801095c:	687a      	ldr	r2, [r7, #4]
 801095e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010960:	1ad3      	subs	r3, r2, r3
 8010962:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2b00      	cmp	r3, #0
 8010968:	f47f aee1 	bne.w	801072e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3738      	adds	r7, #56	@ 0x38
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b08c      	sub	sp, #48	@ 0x30
 801097a:	af00      	add	r7, sp, #0
 801097c:	60f8      	str	r0, [r7, #12]
 801097e:	60b9      	str	r1, [r7, #8]
 8010980:	607a      	str	r2, [r7, #4]
 8010982:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	2200      	movs	r2, #0
 801098c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f107 0210 	add.w	r2, r7, #16
 8010994:	4611      	mov	r1, r2
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff fc4a 	bl	8010230 <validate>
 801099c:	4603      	mov	r3, r0
 801099e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80109a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d107      	bne.n	80109ba <f_write+0x44>
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	7d5b      	ldrb	r3, [r3, #21]
 80109ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80109b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d002      	beq.n	80109c0 <f_write+0x4a>
 80109ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80109be:	e16a      	b.n	8010c96 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	7d1b      	ldrb	r3, [r3, #20]
 80109c4:	f003 0302 	and.w	r3, r3, #2
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d101      	bne.n	80109d0 <f_write+0x5a>
 80109cc:	2307      	movs	r3, #7
 80109ce:	e162      	b.n	8010c96 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	699a      	ldr	r2, [r3, #24]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	441a      	add	r2, r3
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	699b      	ldr	r3, [r3, #24]
 80109dc:	429a      	cmp	r2, r3
 80109de:	f080 814c 	bcs.w	8010c7a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	699b      	ldr	r3, [r3, #24]
 80109e6:	43db      	mvns	r3, r3
 80109e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80109ea:	e146      	b.n	8010c7a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	699b      	ldr	r3, [r3, #24]
 80109f0:	693a      	ldr	r2, [r7, #16]
 80109f2:	8992      	ldrh	r2, [r2, #12]
 80109f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80109f8:	fb01 f202 	mul.w	r2, r1, r2
 80109fc:	1a9b      	subs	r3, r3, r2
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f040 80f1 	bne.w	8010be6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	699b      	ldr	r3, [r3, #24]
 8010a08:	693a      	ldr	r2, [r7, #16]
 8010a0a:	8992      	ldrh	r2, [r2, #12]
 8010a0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a10:	693a      	ldr	r2, [r7, #16]
 8010a12:	8952      	ldrh	r2, [r2, #10]
 8010a14:	3a01      	subs	r2, #1
 8010a16:	4013      	ands	r3, r2
 8010a18:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010a1a:	69bb      	ldr	r3, [r7, #24]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d143      	bne.n	8010aa8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	699b      	ldr	r3, [r3, #24]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d10c      	bne.n	8010a42 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d11a      	bne.n	8010a6a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	2100      	movs	r1, #0
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7fe f8b6 	bl	800ebaa <create_chain>
 8010a3e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010a40:	e013      	b.n	8010a6a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d007      	beq.n	8010a5a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	699b      	ldr	r3, [r3, #24]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	68f8      	ldr	r0, [r7, #12]
 8010a52:	f7fe f942 	bl	800ecda <clmt_clust>
 8010a56:	62b8      	str	r0, [r7, #40]	@ 0x28
 8010a58:	e007      	b.n	8010a6a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	69db      	ldr	r3, [r3, #28]
 8010a60:	4619      	mov	r1, r3
 8010a62:	4610      	mov	r0, r2
 8010a64:	f7fe f8a1 	bl	800ebaa <create_chain>
 8010a68:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	f000 8109 	beq.w	8010c84 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d104      	bne.n	8010a82 <f_write+0x10c>
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2202      	movs	r2, #2
 8010a7c:	755a      	strb	r2, [r3, #21]
 8010a7e:	2302      	movs	r3, #2
 8010a80:	e109      	b.n	8010c96 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a88:	d104      	bne.n	8010a94 <f_write+0x11e>
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	755a      	strb	r2, [r3, #21]
 8010a90:	2301      	movs	r3, #1
 8010a92:	e100      	b.n	8010c96 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010a98:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d102      	bne.n	8010aa8 <f_write+0x132>
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010aa6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	b25b      	sxtb	r3, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	da18      	bge.n	8010ae4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	7858      	ldrb	r0, [r3, #1]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	6a1a      	ldr	r2, [r3, #32]
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	f7fd fa75 	bl	800dfb0 <disk_write>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d004      	beq.n	8010ad6 <f_write+0x160>
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	755a      	strb	r2, [r3, #21]
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e0df      	b.n	8010c96 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	7d1b      	ldrb	r3, [r3, #20]
 8010ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ade:	b2da      	uxtb	r2, r3
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010ae4:	693a      	ldr	r2, [r7, #16]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	69db      	ldr	r3, [r3, #28]
 8010aea:	4619      	mov	r1, r3
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7fd fdeb 	bl	800e6c8 <clust2sect>
 8010af2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d104      	bne.n	8010b04 <f_write+0x18e>
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2202      	movs	r2, #2
 8010afe:	755a      	strb	r2, [r3, #21]
 8010b00:	2302      	movs	r3, #2
 8010b02:	e0c8      	b.n	8010c96 <f_write+0x320>
			sect += csect;
 8010b04:	697a      	ldr	r2, [r7, #20]
 8010b06:	69bb      	ldr	r3, [r7, #24]
 8010b08:	4413      	add	r3, r2
 8010b0a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010b0c:	693b      	ldr	r3, [r7, #16]
 8010b0e:	899b      	ldrh	r3, [r3, #12]
 8010b10:	461a      	mov	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b18:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010b1a:	6a3b      	ldr	r3, [r7, #32]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d043      	beq.n	8010ba8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010b20:	69ba      	ldr	r2, [r7, #24]
 8010b22:	6a3b      	ldr	r3, [r7, #32]
 8010b24:	4413      	add	r3, r2
 8010b26:	693a      	ldr	r2, [r7, #16]
 8010b28:	8952      	ldrh	r2, [r2, #10]
 8010b2a:	4293      	cmp	r3, r2
 8010b2c:	d905      	bls.n	8010b3a <f_write+0x1c4>
					cc = fs->csize - csect;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	895b      	ldrh	r3, [r3, #10]
 8010b32:	461a      	mov	r2, r3
 8010b34:	69bb      	ldr	r3, [r7, #24]
 8010b36:	1ad3      	subs	r3, r2, r3
 8010b38:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	7858      	ldrb	r0, [r3, #1]
 8010b3e:	6a3b      	ldr	r3, [r7, #32]
 8010b40:	697a      	ldr	r2, [r7, #20]
 8010b42:	69f9      	ldr	r1, [r7, #28]
 8010b44:	f7fd fa34 	bl	800dfb0 <disk_write>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d004      	beq.n	8010b58 <f_write+0x1e2>
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2201      	movs	r2, #1
 8010b52:	755a      	strb	r2, [r3, #21]
 8010b54:	2301      	movs	r3, #1
 8010b56:	e09e      	b.n	8010c96 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	6a1a      	ldr	r2, [r3, #32]
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	6a3a      	ldr	r2, [r7, #32]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d918      	bls.n	8010b98 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	6a1a      	ldr	r2, [r3, #32]
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	1ad3      	subs	r3, r2, r3
 8010b74:	693a      	ldr	r2, [r7, #16]
 8010b76:	8992      	ldrh	r2, [r2, #12]
 8010b78:	fb02 f303 	mul.w	r3, r2, r3
 8010b7c:	69fa      	ldr	r2, [r7, #28]
 8010b7e:	18d1      	adds	r1, r2, r3
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	899b      	ldrh	r3, [r3, #12]
 8010b84:	461a      	mov	r2, r3
 8010b86:	f7fd fad3 	bl	800e130 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	7d1b      	ldrb	r3, [r3, #20]
 8010b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010b98:	693b      	ldr	r3, [r7, #16]
 8010b9a:	899b      	ldrh	r3, [r3, #12]
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	fb02 f303 	mul.w	r3, r2, r3
 8010ba4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8010ba6:	e04b      	b.n	8010c40 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	6a1b      	ldr	r3, [r3, #32]
 8010bac:	697a      	ldr	r2, [r7, #20]
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	d016      	beq.n	8010be0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	699a      	ldr	r2, [r3, #24]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d210      	bcs.n	8010be0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	7858      	ldrb	r0, [r3, #1]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010bc8:	2301      	movs	r3, #1
 8010bca:	697a      	ldr	r2, [r7, #20]
 8010bcc:	f7fd f9d0 	bl	800df70 <disk_read>
 8010bd0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d004      	beq.n	8010be0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	2201      	movs	r2, #1
 8010bda:	755a      	strb	r2, [r3, #21]
 8010bdc:	2301      	movs	r3, #1
 8010bde:	e05a      	b.n	8010c96 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	697a      	ldr	r2, [r7, #20]
 8010be4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	899b      	ldrh	r3, [r3, #12]
 8010bea:	4618      	mov	r0, r3
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	699b      	ldr	r3, [r3, #24]
 8010bf0:	693a      	ldr	r2, [r7, #16]
 8010bf2:	8992      	ldrh	r2, [r2, #12]
 8010bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010bf8:	fb01 f202 	mul.w	r2, r1, r2
 8010bfc:	1a9b      	subs	r3, r3, r2
 8010bfe:	1ac3      	subs	r3, r0, r3
 8010c00:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d901      	bls.n	8010c0e <f_write+0x298>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	699b      	ldr	r3, [r3, #24]
 8010c18:	693a      	ldr	r2, [r7, #16]
 8010c1a:	8992      	ldrh	r2, [r2, #12]
 8010c1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c20:	fb00 f202 	mul.w	r2, r0, r2
 8010c24:	1a9b      	subs	r3, r3, r2
 8010c26:	440b      	add	r3, r1
 8010c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c2a:	69f9      	ldr	r1, [r7, #28]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fd fa7f 	bl	800e130 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	7d1b      	ldrb	r3, [r3, #20]
 8010c36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010c40:	69fa      	ldr	r2, [r7, #28]
 8010c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c44:	4413      	add	r3, r2
 8010c46:	61fb      	str	r3, [r7, #28]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	699a      	ldr	r2, [r3, #24]
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4e:	441a      	add	r2, r3
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	619a      	str	r2, [r3, #24]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	68da      	ldr	r2, [r3, #12]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	699b      	ldr	r3, [r3, #24]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	bf38      	it	cc
 8010c60:	461a      	movcc	r2, r3
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	60da      	str	r2, [r3, #12]
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c6c:	441a      	add	r2, r3
 8010c6e:	683b      	ldr	r3, [r7, #0]
 8010c70:	601a      	str	r2, [r3, #0]
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c76:	1ad3      	subs	r3, r2, r3
 8010c78:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f47f aeb5 	bne.w	80109ec <f_write+0x76>
 8010c82:	e000      	b.n	8010c86 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010c84:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	7d1b      	ldrb	r3, [r3, #20]
 8010c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c8e:	b2da      	uxtb	r2, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010c94:	2300      	movs	r3, #0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3730      	adds	r7, #48	@ 0x30
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b086      	sub	sp, #24
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f107 0208 	add.w	r2, r7, #8
 8010cac:	4611      	mov	r1, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7ff fabe 	bl	8010230 <validate>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010cb8:	7dfb      	ldrb	r3, [r7, #23]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d168      	bne.n	8010d90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	7d1b      	ldrb	r3, [r3, #20]
 8010cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d062      	beq.n	8010d90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	7d1b      	ldrb	r3, [r3, #20]
 8010cce:	b25b      	sxtb	r3, r3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	da15      	bge.n	8010d00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	7858      	ldrb	r0, [r3, #1]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a1a      	ldr	r2, [r3, #32]
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	f7fd f964 	bl	800dfb0 <disk_write>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d001      	beq.n	8010cf2 <f_sync+0x54>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e04f      	b.n	8010d92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	7d1b      	ldrb	r3, [r3, #20]
 8010cf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cfa:	b2da      	uxtb	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010d00:	f7fd f896 	bl	800de30 <get_fattime>
 8010d04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010d06:	68ba      	ldr	r2, [r7, #8]
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	4610      	mov	r0, r2
 8010d10:	f7fd fc3c 	bl	800e58c <move_window>
 8010d14:	4603      	mov	r3, r0
 8010d16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010d18:	7dfb      	ldrb	r3, [r7, #23]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d138      	bne.n	8010d90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	330b      	adds	r3, #11
 8010d28:	781a      	ldrb	r2, [r3, #0]
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	330b      	adds	r3, #11
 8010d2e:	f042 0220 	orr.w	r2, r2, #32
 8010d32:	b2d2      	uxtb	r2, r2
 8010d34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6818      	ldr	r0, [r3, #0]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	689b      	ldr	r3, [r3, #8]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	68f9      	ldr	r1, [r7, #12]
 8010d42:	f7fe f9c7 	bl	800f0d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f103 021c 	add.w	r2, r3, #28
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	4619      	mov	r1, r3
 8010d52:	4610      	mov	r0, r2
 8010d54:	f7fd f9c0 	bl	800e0d8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	3316      	adds	r3, #22
 8010d5c:	6939      	ldr	r1, [r7, #16]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fd f9ba 	bl	800e0d8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	3312      	adds	r3, #18
 8010d68:	2100      	movs	r1, #0
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fd f999 	bl	800e0a2 <st_word>
					fs->wflag = 1;
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	2201      	movs	r2, #1
 8010d74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fd fc35 	bl	800e5e8 <sync_fs>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	7d1b      	ldrb	r3, [r3, #20]
 8010d86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d8a:	b2da      	uxtb	r2, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}

08010d9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010d9a:	b580      	push	{r7, lr}
 8010d9c:	b084      	sub	sp, #16
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	f7ff ff7b 	bl	8010c9e <f_sync>
 8010da8:	4603      	mov	r3, r0
 8010daa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010dac:	7bfb      	ldrb	r3, [r7, #15]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d118      	bne.n	8010de4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f107 0208 	add.w	r2, r7, #8
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7ff fa38 	bl	8010230 <validate>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010dc4:	7bfb      	ldrb	r3, [r7, #15]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10c      	bne.n	8010de4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	691b      	ldr	r3, [r3, #16]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fd fb38 	bl	800e444 <dec_lock>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010dd8:	7bfb      	ldrb	r3, [r7, #15]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d102      	bne.n	8010de4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3710      	adds	r7, #16
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}

08010dee <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010dee:	b580      	push	{r7, lr}
 8010df0:	b092      	sub	sp, #72	@ 0x48
 8010df2:	af00      	add	r7, sp, #0
 8010df4:	60f8      	str	r0, [r7, #12]
 8010df6:	60b9      	str	r1, [r7, #8]
 8010df8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010dfa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010dfe:	f107 030c 	add.w	r3, r7, #12
 8010e02:	2200      	movs	r2, #0
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7fe ff8d 	bl	800fd24 <find_volume>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8010e10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	f040 8099 	bne.w	8010f4c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8010e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e22:	699a      	ldr	r2, [r3, #24]
 8010e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e26:	69db      	ldr	r3, [r3, #28]
 8010e28:	3b02      	subs	r3, #2
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d804      	bhi.n	8010e38 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e30:	699a      	ldr	r2, [r3, #24]
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	601a      	str	r2, [r3, #0]
 8010e36:	e089      	b.n	8010f4c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010e38:	2300      	movs	r3, #0
 8010e3a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8010e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	2b01      	cmp	r3, #1
 8010e42:	d128      	bne.n	8010e96 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010e44:	2302      	movs	r3, #2
 8010e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e4a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8010e4c:	f107 0314 	add.w	r3, r7, #20
 8010e50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7fd fc57 	bl	800e706 <get_fat>
 8010e58:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8010e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e60:	d103      	bne.n	8010e6a <f_getfree+0x7c>
 8010e62:	2301      	movs	r3, #1
 8010e64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010e68:	e063      	b.n	8010f32 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8010e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d103      	bne.n	8010e78 <f_getfree+0x8a>
 8010e70:	2302      	movs	r3, #2
 8010e72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8010e76:	e05c      	b.n	8010f32 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d102      	bne.n	8010e84 <f_getfree+0x96>
 8010e7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e80:	3301      	adds	r3, #1
 8010e82:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8010e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e86:	3301      	adds	r3, #1
 8010e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8c:	69db      	ldr	r3, [r3, #28]
 8010e8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d3db      	bcc.n	8010e4c <f_getfree+0x5e>
 8010e94:	e04d      	b.n	8010f32 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e98:	69db      	ldr	r3, [r3, #28]
 8010e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8010eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d113      	bne.n	8010ed8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010eb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eb4:	1c5a      	adds	r2, r3, #1
 8010eb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8010eb8:	4619      	mov	r1, r3
 8010eba:	f7fd fb67 	bl	800e58c <move_window>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8010ec4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d131      	bne.n	8010f30 <f_getfree+0x142>
							p = fs->win;
 8010ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ece:	3338      	adds	r3, #56	@ 0x38
 8010ed0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8010ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ed4:	899b      	ldrh	r3, [r3, #12]
 8010ed6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	d10f      	bne.n	8010f00 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ee2:	f7fd f8a3 	bl	800e02c <ld_word>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d102      	bne.n	8010ef2 <f_getfree+0x104>
 8010eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eee:	3301      	adds	r3, #1
 8010ef0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef4:	3302      	adds	r3, #2
 8010ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010efa:	3b02      	subs	r3, #2
 8010efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8010efe:	e010      	b.n	8010f22 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f02:	f7fd f8ab 	bl	800e05c <ld_dword>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d102      	bne.n	8010f16 <f_getfree+0x128>
 8010f10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f12:	3301      	adds	r3, #1
 8010f14:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8010f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f18:	3304      	adds	r3, #4
 8010f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f1e:	3b04      	subs	r3, #4
 8010f20:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8010f22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f24:	3b01      	subs	r3, #1
 8010f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d1bd      	bne.n	8010eaa <f_getfree+0xbc>
 8010f2e:	e000      	b.n	8010f32 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010f30:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f36:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f3c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f40:	791a      	ldrb	r2, [r3, #4]
 8010f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f44:	f042 0201 	orr.w	r2, r2, #1
 8010f48:	b2d2      	uxtb	r2, r2
 8010f4a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8010f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3748      	adds	r7, #72	@ 0x48
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8010f58:	b590      	push	{r4, r7, lr}
 8010f5a:	b09d      	sub	sp, #116	@ 0x74
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	607a      	str	r2, [r7, #4]
 8010f62:	603b      	str	r3, [r7, #0]
 8010f64:	460b      	mov	r3, r1
 8010f66:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8010f68:	2301      	movs	r3, #1
 8010f6a:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8010f6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f70:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8010f72:	f107 030c 	add.w	r3, r7, #12
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fe fe3a 	bl	800fbf0 <get_ldnumber>
 8010f7c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	da02      	bge.n	8010f8a <f_mkfs+0x32>
 8010f84:	230b      	movs	r3, #11
 8010f86:	f000 bc31 	b.w	80117ec <f_mkfs+0x894>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8010f8a:	4aa5      	ldr	r2, [pc, #660]	@ (8011220 <f_mkfs+0x2c8>)
 8010f8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d005      	beq.n	8010fa2 <f_mkfs+0x4a>
 8010f96:	4aa2      	ldr	r2, [pc, #648]	@ (8011220 <f_mkfs+0x2c8>)
 8010f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8010fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fa4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8010fa8:	2300      	movs	r3, #0
 8010faa:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8010fae:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fc ffb4 	bl	800df20 <disk_initialize>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8010fbe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8010fc2:	f003 0301 	and.w	r3, r3, #1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <f_mkfs+0x78>
 8010fca:	2303      	movs	r3, #3
 8010fcc:	f000 bc0e 	b.w	80117ec <f_mkfs+0x894>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8010fd0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8010fd4:	f003 0304 	and.w	r3, r3, #4
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <f_mkfs+0x8a>
 8010fdc:	230a      	movs	r3, #10
 8010fde:	f000 bc05 	b.w	80117ec <f_mkfs+0x894>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8010fe2:	f107 0214 	add.w	r2, r7, #20
 8010fe6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8010fea:	2103      	movs	r1, #3
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7fc ffff 	bl	800dff0 <disk_ioctl>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d10c      	bne.n	8011012 <f_mkfs+0xba>
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d009      	beq.n	8011012 <f_mkfs+0xba>
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011004:	d805      	bhi.n	8011012 <f_mkfs+0xba>
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	1e5a      	subs	r2, r3, #1
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	4013      	ands	r3, r2
 801100e:	2b00      	cmp	r3, #0
 8011010:	d001      	beq.n	8011016 <f_mkfs+0xbe>
 8011012:	2301      	movs	r3, #1
 8011014:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
 8011016:	f107 021a 	add.w	r2, r7, #26
 801101a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801101e:	2102      	movs	r1, #2
 8011020:	4618      	mov	r0, r3
 8011022:	f7fc ffe5 	bl	800dff0 <disk_ioctl>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d001      	beq.n	8011030 <f_mkfs+0xd8>
 801102c:	2301      	movs	r3, #1
 801102e:	e3dd      	b.n	80117ec <f_mkfs+0x894>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
 8011030:	8b7b      	ldrh	r3, [r7, #26]
 8011032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011036:	d80a      	bhi.n	801104e <f_mkfs+0xf6>
 8011038:	8b7b      	ldrh	r3, [r7, #26]
 801103a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801103e:	d306      	bcc.n	801104e <f_mkfs+0xf6>
 8011040:	8b7b      	ldrh	r3, [r7, #26]
 8011042:	461a      	mov	r2, r3
 8011044:	8b7b      	ldrh	r3, [r7, #26]
 8011046:	3b01      	subs	r3, #1
 8011048:	4013      	ands	r3, r2
 801104a:	2b00      	cmp	r3, #0
 801104c:	d001      	beq.n	8011052 <f_mkfs+0xfa>
 801104e:	2301      	movs	r3, #1
 8011050:	e3cc      	b.n	80117ec <f_mkfs+0x894>
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d004      	beq.n	8011062 <f_mkfs+0x10a>
 8011058:	8b7b      	ldrh	r3, [r7, #26]
 801105a:	461a      	mov	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	4293      	cmp	r3, r2
 8011060:	d309      	bcc.n	8011076 <f_mkfs+0x11e>
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011068:	d805      	bhi.n	8011076 <f_mkfs+0x11e>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	1e5a      	subs	r2, r3, #1
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4013      	ands	r3, r2
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <f_mkfs+0x122>
 8011076:	2313      	movs	r3, #19
 8011078:	e3b8      	b.n	80117ec <f_mkfs+0x894>
	au /= ss;	/* Cluster size in unit of sector */
 801107a:	8b7b      	ldrh	r3, [r7, #26]
 801107c:	461a      	mov	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	fbb3 f3f2 	udiv	r3, r3, r2
 8011084:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	637b      	str	r3, [r7, #52]	@ 0x34
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 801108a:	8b7b      	ldrh	r3, [r7, #26]
 801108c:	461a      	mov	r2, r3
 801108e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011092:	fbb3 f3f2 	udiv	r3, r3, r2
 8011096:	633b      	str	r3, [r7, #48]	@ 0x30
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8011098:	8b7b      	ldrh	r3, [r7, #26]
 801109a:	461a      	mov	r2, r3
 801109c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801109e:	fb02 f303 	mul.w	r3, r2, r3
 80110a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (!szb_buf) return FR_MKFS_ABORTED;
 80110a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d101      	bne.n	80110ae <f_mkfs+0x156>
 80110aa:	230e      	movs	r3, #14
 80110ac:	e39e      	b.n	80117ec <f_mkfs+0x894>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80110ae:	f107 0210 	add.w	r2, r7, #16
 80110b2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80110b6:	2101      	movs	r1, #1
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fc ff99 	bl	800dff0 <disk_ioctl>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d001      	beq.n	80110c8 <f_mkfs+0x170>
 80110c4:	2301      	movs	r3, #1
 80110c6:	e391      	b.n	80117ec <f_mkfs+0x894>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80110c8:	7afb      	ldrb	r3, [r7, #11]
 80110ca:	f003 0308 	and.w	r3, r3, #8
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <f_mkfs+0x17e>
 80110d2:	2300      	movs	r3, #0
 80110d4:	e000      	b.n	80110d8 <f_mkfs+0x180>
 80110d6:	233f      	movs	r3, #63	@ 0x3f
 80110d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110de:	429a      	cmp	r2, r3
 80110e0:	d901      	bls.n	80110e6 <f_mkfs+0x18e>
 80110e2:	230e      	movs	r3, #14
 80110e4:	e382      	b.n	80117ec <f_mkfs+0x894>
		sz_vol -= b_vol;						/* Volume size */
 80110e6:	693a      	ldr	r2, [r7, #16]
 80110e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80110f2:	d801      	bhi.n	80110f8 <f_mkfs+0x1a0>
 80110f4:	230e      	movs	r3, #14
 80110f6:	e379      	b.n	80117ec <f_mkfs+0x894>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b80      	cmp	r3, #128	@ 0x80
 80110fc:	d901      	bls.n	8011102 <f_mkfs+0x1aa>
 80110fe:	2313      	movs	r3, #19
 8011100:	e374      	b.n	80117ec <f_mkfs+0x894>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8011102:	7afb      	ldrb	r3, [r7, #11]
 8011104:	f003 0302 	and.w	r3, r3, #2
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00d      	beq.n	8011128 <f_mkfs+0x1d0>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801110c:	7afb      	ldrb	r3, [r7, #11]
 801110e:	f003 0307 	and.w	r3, r3, #7
 8011112:	2b02      	cmp	r3, #2
 8011114:	d004      	beq.n	8011120 <f_mkfs+0x1c8>
 8011116:	7afb      	ldrb	r3, [r7, #11]
 8011118:	f003 0301 	and.w	r3, r3, #1
 801111c:	2b00      	cmp	r3, #0
 801111e:	d103      	bne.n	8011128 <f_mkfs+0x1d0>
				fmt = FS_FAT32; break;
 8011120:	2303      	movs	r3, #3
 8011122:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011126:	e009      	b.n	801113c <f_mkfs+0x1e4>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8011128:	7afb      	ldrb	r3, [r7, #11]
 801112a:	f003 0301 	and.w	r3, r3, #1
 801112e:	2b00      	cmp	r3, #0
 8011130:	d101      	bne.n	8011136 <f_mkfs+0x1de>
 8011132:	2313      	movs	r3, #19
 8011134:	e35a      	b.n	80117ec <f_mkfs+0x894>
		fmt = FS_FAT16;
 8011136:	2302      	movs	r3, #2
 8011138:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8011140:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011144:	2b03      	cmp	r3, #3
 8011146:	d13c      	bne.n	80111c2 <f_mkfs+0x26a>
				if (!pau) {	/* au auto-selection */
 8011148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801114a:	2b00      	cmp	r3, #0
 801114c:	d11b      	bne.n	8011186 <f_mkfs+0x22e>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	0c5b      	lsrs	r3, r3, #17
 8011152:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8011154:	2300      	movs	r3, #0
 8011156:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011158:	2301      	movs	r3, #1
 801115a:	653b      	str	r3, [r7, #80]	@ 0x50
 801115c:	e005      	b.n	801116a <f_mkfs+0x212>
 801115e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011160:	3301      	adds	r3, #1
 8011162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011166:	005b      	lsls	r3, r3, #1
 8011168:	653b      	str	r3, [r7, #80]	@ 0x50
 801116a:	4a2e      	ldr	r2, [pc, #184]	@ (8011224 <f_mkfs+0x2cc>)
 801116c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801116e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d007      	beq.n	8011186 <f_mkfs+0x22e>
 8011176:	4a2b      	ldr	r2, [pc, #172]	@ (8011224 <f_mkfs+0x2cc>)
 8011178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801117a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801117e:	461a      	mov	r2, r3
 8011180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011182:	4293      	cmp	r3, r2
 8011184:	d2eb      	bcs.n	801115e <f_mkfs+0x206>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8011186:	693a      	ldr	r2, [r7, #16]
 8011188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801118a:	fbb2 f3f3 	udiv	r3, r2, r3
 801118e:	627b      	str	r3, [r7, #36]	@ 0x24
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8011190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011192:	3302      	adds	r3, #2
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	8b7a      	ldrh	r2, [r7, #26]
 8011198:	4413      	add	r3, r2
 801119a:	3b01      	subs	r3, #1
 801119c:	8b7a      	ldrh	r2, [r7, #26]
 801119e:	fbb3 f3f2 	udiv	r3, r3, r2
 80111a2:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 80111a4:	2320      	movs	r3, #32
 80111a6:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 80111a8:	2300      	movs	r3, #0
 80111aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 80111ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d903      	bls.n	80111be <f_mkfs+0x266>
 80111b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b8:	4a1b      	ldr	r2, [pc, #108]	@ (8011228 <f_mkfs+0x2d0>)
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d954      	bls.n	8011268 <f_mkfs+0x310>
 80111be:	230e      	movs	r3, #14
 80111c0:	e314      	b.n	80117ec <f_mkfs+0x894>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 80111c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d11b      	bne.n	8011200 <f_mkfs+0x2a8>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 80111c8:	693b      	ldr	r3, [r7, #16]
 80111ca:	0b1b      	lsrs	r3, r3, #12
 80111cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80111ce:	2300      	movs	r3, #0
 80111d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111d2:	2301      	movs	r3, #1
 80111d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80111d6:	e005      	b.n	80111e4 <f_mkfs+0x28c>
 80111d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111da:	3301      	adds	r3, #1
 80111dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80111e4:	4a11      	ldr	r2, [pc, #68]	@ (801122c <f_mkfs+0x2d4>)
 80111e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d007      	beq.n	8011200 <f_mkfs+0x2a8>
 80111f0:	4a0e      	ldr	r2, [pc, #56]	@ (801122c <f_mkfs+0x2d4>)
 80111f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80111f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111f8:	461a      	mov	r2, r3
 80111fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d2eb      	bcs.n	80111d8 <f_mkfs+0x280>
				}
				n_clst = sz_vol / pau;
 8011200:	693a      	ldr	r2, [r7, #16]
 8011202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011204:	fbb2 f3f3 	udiv	r3, r2, r3
 8011208:	627b      	str	r3, [r7, #36]	@ 0x24
				if (n_clst > MAX_FAT12) {
 801120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801120c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011210:	4293      	cmp	r3, r2
 8011212:	d90d      	bls.n	8011230 <f_mkfs+0x2d8>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8011214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011216:	3302      	adds	r3, #2
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801121c:	e013      	b.n	8011246 <f_mkfs+0x2ee>
 801121e:	bf00      	nop
 8011220:	200031a4 	.word	0x200031a4
 8011224:	08017408 	.word	0x08017408
 8011228:	0ffffff5 	.word	0x0ffffff5
 801122c:	08017418 	.word	0x08017418
				} else {
					fmt = FS_FAT12;
 8011230:	2301      	movs	r3, #1
 8011232:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 8011236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011238:	4613      	mov	r3, r2
 801123a:	005b      	lsls	r3, r3, #1
 801123c:	4413      	add	r3, r2
 801123e:	3301      	adds	r3, #1
 8011240:	085b      	lsrs	r3, r3, #1
 8011242:	3303      	adds	r3, #3
 8011244:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8011246:	8b7b      	ldrh	r3, [r7, #26]
 8011248:	461a      	mov	r2, r3
 801124a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801124c:	4413      	add	r3, r2
 801124e:	3b01      	subs	r3, #1
 8011250:	8b7a      	ldrh	r2, [r7, #26]
 8011252:	fbb3 f3f2 	udiv	r3, r3, r2
 8011256:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 8011258:	2301      	movs	r3, #1
 801125a:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 801125c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801125e:	015b      	lsls	r3, r3, #5
 8011260:	8b7a      	ldrh	r2, [r7, #26]
 8011262:	fbb3 f3f2 	udiv	r3, r3, r2
 8011266:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 8011268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801126a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801126c:	4413      	add	r3, r2
 801126e:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8011270:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011274:	fb03 f202 	mul.w	r2, r3, r2
 8011278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801127a:	4413      	add	r3, r2
 801127c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801127e:	4413      	add	r3, r2
 8011280:	623b      	str	r3, [r7, #32]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	6a3b      	ldr	r3, [r7, #32]
 8011286:	4413      	add	r3, r2
 8011288:	1e5a      	subs	r2, r3, #1
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	425b      	negs	r3, r3
 801128e:	401a      	ands	r2, r3
 8011290:	6a3b      	ldr	r3, [r7, #32]
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8011296:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801129a:	2b03      	cmp	r3, #3
 801129c:	d108      	bne.n	80112b0 <f_mkfs+0x358>
				sz_rsv += n; b_fat += n;
 801129e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80112a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112a2:	4413      	add	r3, r2
 80112a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80112a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80112a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112aa:	4413      	add	r3, r2
 80112ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80112ae:	e006      	b.n	80112be <f_mkfs+0x366>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 80112b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80112b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80112b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80112ba:	4413      	add	r3, r2
 80112bc:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 80112be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112c0:	011a      	lsls	r2, r3, #4
 80112c2:	6a3b      	ldr	r3, [r7, #32]
 80112c4:	441a      	add	r2, r3
 80112c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112c8:	1ad2      	subs	r2, r2, r3
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d901      	bls.n	80112d4 <f_mkfs+0x37c>
 80112d0:	230e      	movs	r3, #14
 80112d2:	e28b      	b.n	80117ec <f_mkfs+0x894>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80112d4:	693a      	ldr	r2, [r7, #16]
 80112d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112d8:	1ad2      	subs	r2, r2, r3
 80112da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80112dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80112de:	fb01 f303 	mul.w	r3, r1, r3
 80112e2:	1ad2      	subs	r2, r2, r3
 80112e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112e6:	1ad2      	subs	r2, r2, r3
 80112e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ee:	627b      	str	r3, [r7, #36]	@ 0x24
			if (fmt == FS_FAT32) {
 80112f0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80112f4:	2b03      	cmp	r3, #3
 80112f6:	d10f      	bne.n	8011318 <f_mkfs+0x3c0>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80112f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80112fe:	4293      	cmp	r3, r2
 8011300:	d80a      	bhi.n	8011318 <f_mkfs+0x3c0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d105      	bne.n	8011314 <f_mkfs+0x3bc>
 8011308:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801130a:	085b      	lsrs	r3, r3, #1
 801130c:	607b      	str	r3, [r7, #4]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d144      	bne.n	801139e <f_mkfs+0x446>
					return FR_MKFS_ABORTED;
 8011314:	230e      	movs	r3, #14
 8011316:	e269      	b.n	80117ec <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT16) {
 8011318:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801131c:	2b02      	cmp	r3, #2
 801131e:	d133      	bne.n	8011388 <f_mkfs+0x430>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8011320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011322:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011326:	4293      	cmp	r3, r2
 8011328:	d91e      	bls.n	8011368 <f_mkfs+0x410>
					if (!au && (pau * 2) <= 64) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d107      	bne.n	8011340 <f_mkfs+0x3e8>
 8011330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011332:	005b      	lsls	r3, r3, #1
 8011334:	2b40      	cmp	r3, #64	@ 0x40
 8011336:	d803      	bhi.n	8011340 <f_mkfs+0x3e8>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8011338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	607b      	str	r3, [r7, #4]
 801133e:	e033      	b.n	80113a8 <f_mkfs+0x450>
					}
					if ((opt & FM_FAT32)) {
 8011340:	7afb      	ldrb	r3, [r7, #11]
 8011342:	f003 0302 	and.w	r3, r3, #2
 8011346:	2b00      	cmp	r3, #0
 8011348:	d003      	beq.n	8011352 <f_mkfs+0x3fa>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801134a:	2303      	movs	r3, #3
 801134c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8011350:	e02a      	b.n	80113a8 <f_mkfs+0x450>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d105      	bne.n	8011364 <f_mkfs+0x40c>
 8011358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801135a:	005b      	lsls	r3, r3, #1
 801135c:	607b      	str	r3, [r7, #4]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b80      	cmp	r3, #128	@ 0x80
 8011362:	d91e      	bls.n	80113a2 <f_mkfs+0x44a>
					return FR_MKFS_ABORTED;
 8011364:	230e      	movs	r3, #14
 8011366:	e241      	b.n	80117ec <f_mkfs+0x894>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8011368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 801136e:	4293      	cmp	r3, r2
 8011370:	d80a      	bhi.n	8011388 <f_mkfs+0x430>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d105      	bne.n	8011384 <f_mkfs+0x42c>
 8011378:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801137a:	005b      	lsls	r3, r3, #1
 801137c:	607b      	str	r3, [r7, #4]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2b80      	cmp	r3, #128	@ 0x80
 8011382:	d910      	bls.n	80113a6 <f_mkfs+0x44e>
					return FR_MKFS_ABORTED;
 8011384:	230e      	movs	r3, #14
 8011386:	e231      	b.n	80117ec <f_mkfs+0x894>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8011388:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801138c:	2b01      	cmp	r3, #1
 801138e:	d10c      	bne.n	80113aa <f_mkfs+0x452>
 8011390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011392:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011396:	4293      	cmp	r3, r2
 8011398:	d907      	bls.n	80113aa <f_mkfs+0x452>
 801139a:	230e      	movs	r3, #14
 801139c:	e226      	b.n	80117ec <f_mkfs+0x894>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801139e:	bf00      	nop
 80113a0:	e6cc      	b.n	801113c <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80113a2:	bf00      	nop
 80113a4:	e6ca      	b.n	801113c <f_mkfs+0x1e4>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80113a6:	bf00      	nop
			pau = au;
 80113a8:	e6c8      	b.n	801113c <f_mkfs+0x1e4>

			/* Ok, it is the valid cluster configuration */
			break;
 80113aa:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 80113ac:	8b7b      	ldrh	r3, [r7, #26]
 80113ae:	461a      	mov	r2, r3
 80113b0:	2100      	movs	r1, #0
 80113b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80113b4:	f7fc fedd 	bl	800e172 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 80113b8:	220b      	movs	r2, #11
 80113ba:	49b3      	ldr	r1, [pc, #716]	@ (8011688 <f_mkfs+0x730>)
 80113bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80113be:	f7fc feb7 	bl	800e130 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80113c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113c4:	330b      	adds	r3, #11
 80113c6:	8b7a      	ldrh	r2, [r7, #26]
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fc fe69 	bl	800e0a2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80113d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113d2:	330d      	adds	r3, #13
 80113d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113d6:	b2d2      	uxtb	r2, r2
 80113d8:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80113da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113dc:	330e      	adds	r3, #14
 80113de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80113e0:	b292      	uxth	r2, r2
 80113e2:	4611      	mov	r1, r2
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7fc fe5c 	bl	800e0a2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80113ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113ec:	3310      	adds	r3, #16
 80113ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113f0:	b2d2      	uxtb	r2, r2
 80113f2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80113f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113f6:	f103 0211 	add.w	r2, r3, #17
 80113fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80113fe:	2b03      	cmp	r3, #3
 8011400:	d002      	beq.n	8011408 <f_mkfs+0x4b0>
 8011402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011404:	b29b      	uxth	r3, r3
 8011406:	e000      	b.n	801140a <f_mkfs+0x4b2>
 8011408:	2300      	movs	r3, #0
 801140a:	4619      	mov	r1, r3
 801140c:	4610      	mov	r0, r2
 801140e:	f7fc fe48 	bl	800e0a2 <st_word>
		if (sz_vol < 0x10000) {
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011418:	d208      	bcs.n	801142c <f_mkfs+0x4d4>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 801141a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801141c:	3313      	adds	r3, #19
 801141e:	693a      	ldr	r2, [r7, #16]
 8011420:	b292      	uxth	r2, r2
 8011422:	4611      	mov	r1, r2
 8011424:	4618      	mov	r0, r3
 8011426:	f7fc fe3c 	bl	800e0a2 <st_word>
 801142a:	e006      	b.n	801143a <f_mkfs+0x4e2>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801142c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801142e:	3320      	adds	r3, #32
 8011430:	693a      	ldr	r2, [r7, #16]
 8011432:	4611      	mov	r1, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f7fc fe4f 	bl	800e0d8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801143a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801143c:	3315      	adds	r3, #21
 801143e:	22f8      	movs	r2, #248	@ 0xf8
 8011440:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8011442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011444:	3318      	adds	r3, #24
 8011446:	213f      	movs	r1, #63	@ 0x3f
 8011448:	4618      	mov	r0, r3
 801144a:	f7fc fe2a 	bl	800e0a2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 801144e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011450:	331a      	adds	r3, #26
 8011452:	21ff      	movs	r1, #255	@ 0xff
 8011454:	4618      	mov	r0, r3
 8011456:	f7fc fe24 	bl	800e0a2 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801145a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801145c:	331c      	adds	r3, #28
 801145e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011460:	4618      	mov	r0, r3
 8011462:	f7fc fe39 	bl	800e0d8 <st_dword>
		if (fmt == FS_FAT32) {
 8011466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801146a:	2b03      	cmp	r3, #3
 801146c:	d131      	bne.n	80114d2 <f_mkfs+0x57a>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 801146e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011470:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8011474:	f7fc fcdc 	bl	800de30 <get_fattime>
 8011478:	4603      	mov	r3, r0
 801147a:	4619      	mov	r1, r3
 801147c:	4620      	mov	r0, r4
 801147e:	f7fc fe2b 	bl	800e0d8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8011482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011484:	3324      	adds	r3, #36	@ 0x24
 8011486:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011488:	4618      	mov	r0, r3
 801148a:	f7fc fe25 	bl	800e0d8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801148e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011490:	332c      	adds	r3, #44	@ 0x2c
 8011492:	2102      	movs	r1, #2
 8011494:	4618      	mov	r0, r3
 8011496:	f7fc fe1f 	bl	800e0d8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801149a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801149c:	3330      	adds	r3, #48	@ 0x30
 801149e:	2101      	movs	r1, #1
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fc fdfe 	bl	800e0a2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 80114a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114a8:	3332      	adds	r3, #50	@ 0x32
 80114aa:	2106      	movs	r1, #6
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fc fdf8 	bl	800e0a2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80114b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114b4:	3340      	adds	r3, #64	@ 0x40
 80114b6:	2280      	movs	r2, #128	@ 0x80
 80114b8:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 80114ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114bc:	3342      	adds	r3, #66	@ 0x42
 80114be:	2229      	movs	r2, #41	@ 0x29
 80114c0:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80114c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114c4:	3347      	adds	r3, #71	@ 0x47
 80114c6:	2213      	movs	r2, #19
 80114c8:	4970      	ldr	r1, [pc, #448]	@ (801168c <f_mkfs+0x734>)
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fc fe30 	bl	800e130 <mem_cpy>
 80114d0:	e020      	b.n	8011514 <f_mkfs+0x5bc>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80114d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114d4:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 80114d8:	f7fc fcaa 	bl	800de30 <get_fattime>
 80114dc:	4603      	mov	r3, r0
 80114de:	4619      	mov	r1, r3
 80114e0:	4620      	mov	r0, r4
 80114e2:	f7fc fdf9 	bl	800e0d8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80114e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114e8:	3316      	adds	r3, #22
 80114ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80114ec:	b292      	uxth	r2, r2
 80114ee:	4611      	mov	r1, r2
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fc fdd6 	bl	800e0a2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80114f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114f8:	3324      	adds	r3, #36	@ 0x24
 80114fa:	2280      	movs	r2, #128	@ 0x80
 80114fc:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80114fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011500:	3326      	adds	r3, #38	@ 0x26
 8011502:	2229      	movs	r2, #41	@ 0x29
 8011504:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8011506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011508:	332b      	adds	r3, #43	@ 0x2b
 801150a:	2213      	movs	r2, #19
 801150c:	4960      	ldr	r1, [pc, #384]	@ (8011690 <f_mkfs+0x738>)
 801150e:	4618      	mov	r0, r3
 8011510:	f7fc fe0e 	bl	800e130 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8011514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011516:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801151a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801151e:	4618      	mov	r0, r3
 8011520:	f7fc fdbf 	bl	800e0a2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8011524:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8011528:	2301      	movs	r3, #1
 801152a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801152c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801152e:	f7fc fd3f 	bl	800dfb0 <disk_write>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d001      	beq.n	801153c <f_mkfs+0x5e4>
 8011538:	2301      	movs	r3, #1
 801153a:	e157      	b.n	80117ec <f_mkfs+0x894>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801153c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011540:	2b03      	cmp	r3, #3
 8011542:	d140      	bne.n	80115c6 <f_mkfs+0x66e>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8011544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011546:	1d9a      	adds	r2, r3, #6
 8011548:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801154c:	2301      	movs	r3, #1
 801154e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011550:	f7fc fd2e 	bl	800dfb0 <disk_write>
			mem_set(buf, 0, ss);
 8011554:	8b7b      	ldrh	r3, [r7, #26]
 8011556:	461a      	mov	r2, r3
 8011558:	2100      	movs	r1, #0
 801155a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801155c:	f7fc fe09 	bl	800e172 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8011560:	494c      	ldr	r1, [pc, #304]	@ (8011694 <f_mkfs+0x73c>)
 8011562:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011564:	f7fc fdb8 	bl	800e0d8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8011568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801156a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801156e:	494a      	ldr	r1, [pc, #296]	@ (8011698 <f_mkfs+0x740>)
 8011570:	4618      	mov	r0, r3
 8011572:	f7fc fdb1 	bl	800e0d8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8011576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011578:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157e:	3b01      	subs	r3, #1
 8011580:	4619      	mov	r1, r3
 8011582:	4610      	mov	r0, r2
 8011584:	f7fc fda8 	bl	800e0d8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8011588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801158a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801158e:	2102      	movs	r1, #2
 8011590:	4618      	mov	r0, r3
 8011592:	f7fc fda1 	bl	800e0d8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8011596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011598:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801159c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80115a0:	4618      	mov	r0, r3
 80115a2:	f7fc fd7e 	bl	800e0a2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80115a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115a8:	1dda      	adds	r2, r3, #7
 80115aa:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80115ae:	2301      	movs	r3, #1
 80115b0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80115b2:	f7fc fcfd 	bl	800dfb0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 80115b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b8:	1c5a      	adds	r2, r3, #1
 80115ba:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80115be:	2301      	movs	r3, #1
 80115c0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80115c2:	f7fc fcf5 	bl	800dfb0 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80115c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80115c8:	2100      	movs	r1, #0
 80115ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80115cc:	f7fc fdd1 	bl	800e172 <mem_set>
		sect = b_fat;		/* FAT start sector */
 80115d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115d2:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80115d4:	2300      	movs	r3, #0
 80115d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115d8:	e04b      	b.n	8011672 <f_mkfs+0x71a>
			if (fmt == FS_FAT32) {
 80115da:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d113      	bne.n	801160a <f_mkfs+0x6b2>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80115e2:	f06f 0107 	mvn.w	r1, #7
 80115e6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80115e8:	f7fc fd76 	bl	800e0d8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80115ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ee:	3304      	adds	r3, #4
 80115f0:	f04f 31ff 	mov.w	r1, #4294967295
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fc fd6f 	bl	800e0d8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80115fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115fc:	3308      	adds	r3, #8
 80115fe:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8011602:	4618      	mov	r0, r3
 8011604:	f7fc fd68 	bl	800e0d8 <st_dword>
 8011608:	e00b      	b.n	8011622 <f_mkfs+0x6ca>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 801160a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801160e:	2b01      	cmp	r3, #1
 8011610:	d101      	bne.n	8011616 <f_mkfs+0x6be>
 8011612:	4b22      	ldr	r3, [pc, #136]	@ (801169c <f_mkfs+0x744>)
 8011614:	e001      	b.n	801161a <f_mkfs+0x6c2>
 8011616:	f06f 0307 	mvn.w	r3, #7
 801161a:	4619      	mov	r1, r3
 801161c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801161e:	f7fc fd5b 	bl	800e0d8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8011622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011624:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8011626:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801162a:	4293      	cmp	r3, r2
 801162c:	bf28      	it	cs
 801162e:	4613      	movcs	r3, r2
 8011630:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8011632:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8011636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011638:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801163a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801163c:	f7fc fcb8 	bl	800dfb0 <disk_write>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <f_mkfs+0x6f2>
 8011646:	2301      	movs	r3, #1
 8011648:	e0d0      	b.n	80117ec <f_mkfs+0x894>
				mem_set(buf, 0, ss);
 801164a:	8b7b      	ldrh	r3, [r7, #26]
 801164c:	461a      	mov	r2, r3
 801164e:	2100      	movs	r1, #0
 8011650:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011652:	f7fc fd8e 	bl	800e172 <mem_set>
				sect += n; nsect -= n;
 8011656:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801165a:	4413      	add	r3, r2
 801165c:	667b      	str	r3, [r7, #100]	@ 0x64
 801165e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8011666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1dc      	bne.n	8011626 <f_mkfs+0x6ce>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801166c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801166e:	3301      	adds	r3, #1
 8011670:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011676:	429a      	cmp	r2, r3
 8011678:	d3af      	bcc.n	80115da <f_mkfs+0x682>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801167a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801167e:	2b03      	cmp	r3, #3
 8011680:	d10e      	bne.n	80116a0 <f_mkfs+0x748>
 8011682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011684:	e00d      	b.n	80116a2 <f_mkfs+0x74a>
 8011686:	bf00      	nop
 8011688:	08017318 	.word	0x08017318
 801168c:	08017324 	.word	0x08017324
 8011690:	08017338 	.word	0x08017338
 8011694:	41615252 	.word	0x41615252
 8011698:	61417272 	.word	0x61417272
 801169c:	00fffff8 	.word	0x00fffff8
 80116a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80116a2:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80116a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80116a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a8:	4293      	cmp	r3, r2
 80116aa:	bf28      	it	cs
 80116ac:	4613      	movcs	r3, r2
 80116ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80116b0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80116b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80116b8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80116ba:	f7fc fc79 	bl	800dfb0 <disk_write>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <f_mkfs+0x770>
 80116c4:	2301      	movs	r3, #1
 80116c6:	e091      	b.n	80117ec <f_mkfs+0x894>
			sect += n; nsect -= n;
 80116c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80116ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116cc:	4413      	add	r3, r2
 80116ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80116d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80116d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 80116d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d1e2      	bne.n	80116a4 <f_mkfs+0x74c>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80116de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	d103      	bne.n	80116ee <f_mkfs+0x796>
			sys = 0x0C;		/* FAT32X */
 80116e6:	230c      	movs	r3, #12
 80116e8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80116ec:	e010      	b.n	8011710 <f_mkfs+0x7b8>
		} else {
			if (sz_vol >= 0x10000) {
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80116f4:	d303      	bcc.n	80116fe <f_mkfs+0x7a6>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80116f6:	2306      	movs	r3, #6
 80116f8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80116fc:	e008      	b.n	8011710 <f_mkfs+0x7b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80116fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8011702:	2b02      	cmp	r3, #2
 8011704:	d101      	bne.n	801170a <f_mkfs+0x7b2>
 8011706:	2304      	movs	r3, #4
 8011708:	e000      	b.n	801170c <f_mkfs+0x7b4>
 801170a:	2301      	movs	r3, #1
 801170c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8011710:	7afb      	ldrb	r3, [r7, #11]
 8011712:	f003 0308 	and.w	r3, r3, #8
 8011716:	2b00      	cmp	r3, #0
 8011718:	d15b      	bne.n	80117d2 <f_mkfs+0x87a>
			mem_set(buf, 0, ss);
 801171a:	8b7b      	ldrh	r3, [r7, #26]
 801171c:	461a      	mov	r2, r3
 801171e:	2100      	movs	r1, #0
 8011720:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011722:	f7fc fd26 	bl	800e172 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8011726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011728:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801172c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011730:	4618      	mov	r0, r3
 8011732:	f7fc fcb6 	bl	800e0a2 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8011736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011738:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801173c:	61fb      	str	r3, [r7, #28]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	2200      	movs	r2, #0
 8011742:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	3301      	adds	r3, #1
 8011748:	2201      	movs	r2, #1
 801174a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	3302      	adds	r3, #2
 8011750:	2201      	movs	r2, #1
 8011752:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8011754:	69fb      	ldr	r3, [r7, #28]
 8011756:	3303      	adds	r3, #3
 8011758:	2200      	movs	r2, #0
 801175a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	3304      	adds	r3, #4
 8011760:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8011764:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8011766:	693a      	ldr	r2, [r7, #16]
 8011768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801176a:	441a      	add	r2, r3
 801176c:	4b21      	ldr	r3, [pc, #132]	@ (80117f4 <f_mkfs+0x89c>)
 801176e:	fba3 1302 	umull	r1, r3, r3, r2
 8011772:	1ad2      	subs	r2, r2, r3
 8011774:	0852      	lsrs	r2, r2, #1
 8011776:	4413      	add	r3, r2
 8011778:	0b5b      	lsrs	r3, r3, #13
 801177a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	3305      	adds	r3, #5
 8011780:	22fe      	movs	r2, #254	@ 0xfe
 8011782:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8011784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011786:	089b      	lsrs	r3, r3, #2
 8011788:	b2da      	uxtb	r2, r3
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	3306      	adds	r3, #6
 801178e:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8011792:	b2d2      	uxtb	r2, r2
 8011794:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8011796:	69fb      	ldr	r3, [r7, #28]
 8011798:	3307      	adds	r3, #7
 801179a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801179c:	b2d2      	uxtb	r2, r2
 801179e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	3308      	adds	r3, #8
 80117a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fc fc96 	bl	800e0d8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80117ac:	69fb      	ldr	r3, [r7, #28]
 80117ae:	330c      	adds	r3, #12
 80117b0:	693a      	ldr	r2, [r7, #16]
 80117b2:	4611      	mov	r1, r2
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fc fc8f 	bl	800e0d8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80117ba:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80117be:	2301      	movs	r3, #1
 80117c0:	2200      	movs	r2, #0
 80117c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80117c4:	f7fc fbf4 	bl	800dfb0 <disk_write>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d001      	beq.n	80117d2 <f_mkfs+0x87a>
 80117ce:	2301      	movs	r3, #1
 80117d0:	e00c      	b.n	80117ec <f_mkfs+0x894>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80117d2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80117d6:	2200      	movs	r2, #0
 80117d8:	2100      	movs	r1, #0
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fc fc08 	bl	800dff0 <disk_ioctl>
 80117e0:	4603      	mov	r3, r0
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d001      	beq.n	80117ea <f_mkfs+0x892>
 80117e6:	2301      	movs	r3, #1
 80117e8:	e000      	b.n	80117ec <f_mkfs+0x894>

	return FR_OK;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3774      	adds	r7, #116	@ 0x74
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd90      	pop	{r4, r7, pc}
 80117f4:	0515565b 	.word	0x0515565b

080117f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117f8:	b480      	push	{r7}
 80117fa:	b087      	sub	sp, #28
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	4613      	mov	r3, r2
 8011804:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011806:	2301      	movs	r3, #1
 8011808:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801180a:	2300      	movs	r3, #0
 801180c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801180e:	4b1f      	ldr	r3, [pc, #124]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011810:	7a5b      	ldrb	r3, [r3, #9]
 8011812:	b2db      	uxtb	r3, r3
 8011814:	2b00      	cmp	r3, #0
 8011816:	d131      	bne.n	801187c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011818:	4b1c      	ldr	r3, [pc, #112]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 801181a:	7a5b      	ldrb	r3, [r3, #9]
 801181c:	b2db      	uxtb	r3, r3
 801181e:	461a      	mov	r2, r3
 8011820:	4b1a      	ldr	r3, [pc, #104]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011822:	2100      	movs	r1, #0
 8011824:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011826:	4b19      	ldr	r3, [pc, #100]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011828:	7a5b      	ldrb	r3, [r3, #9]
 801182a:	b2db      	uxtb	r3, r3
 801182c:	4a17      	ldr	r2, [pc, #92]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	4413      	add	r3, r2
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011836:	4b15      	ldr	r3, [pc, #84]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011838:	7a5b      	ldrb	r3, [r3, #9]
 801183a:	b2db      	uxtb	r3, r3
 801183c:	461a      	mov	r2, r3
 801183e:	4b13      	ldr	r3, [pc, #76]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011840:	4413      	add	r3, r2
 8011842:	79fa      	ldrb	r2, [r7, #7]
 8011844:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011846:	4b11      	ldr	r3, [pc, #68]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011848:	7a5b      	ldrb	r3, [r3, #9]
 801184a:	b2db      	uxtb	r3, r3
 801184c:	1c5a      	adds	r2, r3, #1
 801184e:	b2d1      	uxtb	r1, r2
 8011850:	4a0e      	ldr	r2, [pc, #56]	@ (801188c <FATFS_LinkDriverEx+0x94>)
 8011852:	7251      	strb	r1, [r2, #9]
 8011854:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011856:	7dbb      	ldrb	r3, [r7, #22]
 8011858:	3330      	adds	r3, #48	@ 0x30
 801185a:	b2da      	uxtb	r2, r3
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	3301      	adds	r3, #1
 8011864:	223a      	movs	r2, #58	@ 0x3a
 8011866:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	3302      	adds	r3, #2
 801186c:	222f      	movs	r2, #47	@ 0x2f
 801186e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	3303      	adds	r3, #3
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801187c:	7dfb      	ldrb	r3, [r7, #23]
}
 801187e:	4618      	mov	r0, r3
 8011880:	371c      	adds	r7, #28
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	200033cc 	.word	0x200033cc

08011890 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801189a:	2200      	movs	r2, #0
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f7ff ffaa 	bl	80117f8 <FATFS_LinkDriverEx>
 80118a4:	4603      	mov	r3, r0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
	...

080118b0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	6039      	str	r1, [r7, #0]
 80118ba:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118bc:	88fb      	ldrh	r3, [r7, #6]
 80118be:	2b7f      	cmp	r3, #127	@ 0x7f
 80118c0:	d802      	bhi.n	80118c8 <ff_convert+0x18>
		c = chr;
 80118c2:	88fb      	ldrh	r3, [r7, #6]
 80118c4:	81fb      	strh	r3, [r7, #14]
 80118c6:	e025      	b.n	8011914 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00b      	beq.n	80118e6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118ce:	88fb      	ldrh	r3, [r7, #6]
 80118d0:	2bff      	cmp	r3, #255	@ 0xff
 80118d2:	d805      	bhi.n	80118e0 <ff_convert+0x30>
 80118d4:	88fb      	ldrh	r3, [r7, #6]
 80118d6:	3b80      	subs	r3, #128	@ 0x80
 80118d8:	4a12      	ldr	r2, [pc, #72]	@ (8011924 <ff_convert+0x74>)
 80118da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118de:	e000      	b.n	80118e2 <ff_convert+0x32>
 80118e0:	2300      	movs	r3, #0
 80118e2:	81fb      	strh	r3, [r7, #14]
 80118e4:	e016      	b.n	8011914 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80118e6:	2300      	movs	r3, #0
 80118e8:	81fb      	strh	r3, [r7, #14]
 80118ea:	e009      	b.n	8011900 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118ec:	89fb      	ldrh	r3, [r7, #14]
 80118ee:	4a0d      	ldr	r2, [pc, #52]	@ (8011924 <ff_convert+0x74>)
 80118f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118f4:	88fa      	ldrh	r2, [r7, #6]
 80118f6:	429a      	cmp	r2, r3
 80118f8:	d006      	beq.n	8011908 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80118fa:	89fb      	ldrh	r3, [r7, #14]
 80118fc:	3301      	adds	r3, #1
 80118fe:	81fb      	strh	r3, [r7, #14]
 8011900:	89fb      	ldrh	r3, [r7, #14]
 8011902:	2b7f      	cmp	r3, #127	@ 0x7f
 8011904:	d9f2      	bls.n	80118ec <ff_convert+0x3c>
 8011906:	e000      	b.n	801190a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011908:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801190a:	89fb      	ldrh	r3, [r7, #14]
 801190c:	3380      	adds	r3, #128	@ 0x80
 801190e:	b29b      	uxth	r3, r3
 8011910:	b2db      	uxtb	r3, r3
 8011912:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011914:	89fb      	ldrh	r3, [r7, #14]
}
 8011916:	4618      	mov	r0, r3
 8011918:	3714      	adds	r7, #20
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop
 8011924:	08017428 	.word	0x08017428

08011928 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011928:	b480      	push	{r7}
 801192a:	b087      	sub	sp, #28
 801192c:	af00      	add	r7, sp, #0
 801192e:	4603      	mov	r3, r0
 8011930:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011932:	88fb      	ldrh	r3, [r7, #6]
 8011934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011938:	d201      	bcs.n	801193e <ff_wtoupper+0x16>
 801193a:	4b3e      	ldr	r3, [pc, #248]	@ (8011a34 <ff_wtoupper+0x10c>)
 801193c:	e000      	b.n	8011940 <ff_wtoupper+0x18>
 801193e:	4b3e      	ldr	r3, [pc, #248]	@ (8011a38 <ff_wtoupper+0x110>)
 8011940:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	1c9a      	adds	r2, r3, #2
 8011946:	617a      	str	r2, [r7, #20]
 8011948:	881b      	ldrh	r3, [r3, #0]
 801194a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801194c:	8a7b      	ldrh	r3, [r7, #18]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d068      	beq.n	8011a24 <ff_wtoupper+0xfc>
 8011952:	88fa      	ldrh	r2, [r7, #6]
 8011954:	8a7b      	ldrh	r3, [r7, #18]
 8011956:	429a      	cmp	r2, r3
 8011958:	d364      	bcc.n	8011a24 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	1c9a      	adds	r2, r3, #2
 801195e:	617a      	str	r2, [r7, #20]
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	823b      	strh	r3, [r7, #16]
 8011964:	8a3b      	ldrh	r3, [r7, #16]
 8011966:	0a1b      	lsrs	r3, r3, #8
 8011968:	81fb      	strh	r3, [r7, #14]
 801196a:	8a3b      	ldrh	r3, [r7, #16]
 801196c:	b2db      	uxtb	r3, r3
 801196e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011970:	88fa      	ldrh	r2, [r7, #6]
 8011972:	8a79      	ldrh	r1, [r7, #18]
 8011974:	8a3b      	ldrh	r3, [r7, #16]
 8011976:	440b      	add	r3, r1
 8011978:	429a      	cmp	r2, r3
 801197a:	da49      	bge.n	8011a10 <ff_wtoupper+0xe8>
			switch (cmd) {
 801197c:	89fb      	ldrh	r3, [r7, #14]
 801197e:	2b08      	cmp	r3, #8
 8011980:	d84f      	bhi.n	8011a22 <ff_wtoupper+0xfa>
 8011982:	a201      	add	r2, pc, #4	@ (adr r2, 8011988 <ff_wtoupper+0x60>)
 8011984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011988:	080119ad 	.word	0x080119ad
 801198c:	080119bf 	.word	0x080119bf
 8011990:	080119d5 	.word	0x080119d5
 8011994:	080119dd 	.word	0x080119dd
 8011998:	080119e5 	.word	0x080119e5
 801199c:	080119ed 	.word	0x080119ed
 80119a0:	080119f5 	.word	0x080119f5
 80119a4:	080119fd 	.word	0x080119fd
 80119a8:	08011a05 	.word	0x08011a05
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80119ac:	88fa      	ldrh	r2, [r7, #6]
 80119ae:	8a7b      	ldrh	r3, [r7, #18]
 80119b0:	1ad3      	subs	r3, r2, r3
 80119b2:	005b      	lsls	r3, r3, #1
 80119b4:	697a      	ldr	r2, [r7, #20]
 80119b6:	4413      	add	r3, r2
 80119b8:	881b      	ldrh	r3, [r3, #0]
 80119ba:	80fb      	strh	r3, [r7, #6]
 80119bc:	e027      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80119be:	88fa      	ldrh	r2, [r7, #6]
 80119c0:	8a7b      	ldrh	r3, [r7, #18]
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	b29b      	uxth	r3, r3
 80119c6:	f003 0301 	and.w	r3, r3, #1
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	88fa      	ldrh	r2, [r7, #6]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	80fb      	strh	r3, [r7, #6]
 80119d2:	e01c      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80119d4:	88fb      	ldrh	r3, [r7, #6]
 80119d6:	3b10      	subs	r3, #16
 80119d8:	80fb      	strh	r3, [r7, #6]
 80119da:	e018      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80119dc:	88fb      	ldrh	r3, [r7, #6]
 80119de:	3b20      	subs	r3, #32
 80119e0:	80fb      	strh	r3, [r7, #6]
 80119e2:	e014      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80119e4:	88fb      	ldrh	r3, [r7, #6]
 80119e6:	3b30      	subs	r3, #48	@ 0x30
 80119e8:	80fb      	strh	r3, [r7, #6]
 80119ea:	e010      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80119ec:	88fb      	ldrh	r3, [r7, #6]
 80119ee:	3b1a      	subs	r3, #26
 80119f0:	80fb      	strh	r3, [r7, #6]
 80119f2:	e00c      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80119f4:	88fb      	ldrh	r3, [r7, #6]
 80119f6:	3308      	adds	r3, #8
 80119f8:	80fb      	strh	r3, [r7, #6]
 80119fa:	e008      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80119fc:	88fb      	ldrh	r3, [r7, #6]
 80119fe:	3b50      	subs	r3, #80	@ 0x50
 8011a00:	80fb      	strh	r3, [r7, #6]
 8011a02:	e004      	b.n	8011a0e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011a04:	88fb      	ldrh	r3, [r7, #6]
 8011a06:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8011a0a:	80fb      	strh	r3, [r7, #6]
 8011a0c:	bf00      	nop
			}
			break;
 8011a0e:	e008      	b.n	8011a22 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a10:	89fb      	ldrh	r3, [r7, #14]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d195      	bne.n	8011942 <ff_wtoupper+0x1a>
 8011a16:	8a3b      	ldrh	r3, [r7, #16]
 8011a18:	005b      	lsls	r3, r3, #1
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a20:	e78f      	b.n	8011942 <ff_wtoupper+0x1a>
			break;
 8011a22:	bf00      	nop
	}

	return chr;
 8011a24:	88fb      	ldrh	r3, [r7, #6]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	371c      	adds	r7, #28
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	08017528 	.word	0x08017528
 8011a38:	0801771c 	.word	0x0801771c

08011a3c <sulp>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	4604      	mov	r4, r0
 8011a40:	460d      	mov	r5, r1
 8011a42:	ec45 4b10 	vmov	d0, r4, r5
 8011a46:	4616      	mov	r6, r2
 8011a48:	f003 fcf2 	bl	8015430 <__ulp>
 8011a4c:	ec51 0b10 	vmov	r0, r1, d0
 8011a50:	b17e      	cbz	r6, 8011a72 <sulp+0x36>
 8011a52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011a56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	dd09      	ble.n	8011a72 <sulp+0x36>
 8011a5e:	051b      	lsls	r3, r3, #20
 8011a60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011a64:	2400      	movs	r4, #0
 8011a66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011a6a:	4622      	mov	r2, r4
 8011a6c:	462b      	mov	r3, r5
 8011a6e:	f7ee fdd3 	bl	8000618 <__aeabi_dmul>
 8011a72:	ec41 0b10 	vmov	d0, r0, r1
 8011a76:	bd70      	pop	{r4, r5, r6, pc}

08011a78 <_strtod_l>:
 8011a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a7c:	b09f      	sub	sp, #124	@ 0x7c
 8011a7e:	460c      	mov	r4, r1
 8011a80:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011a82:	2200      	movs	r2, #0
 8011a84:	921a      	str	r2, [sp, #104]	@ 0x68
 8011a86:	9005      	str	r0, [sp, #20]
 8011a88:	f04f 0a00 	mov.w	sl, #0
 8011a8c:	f04f 0b00 	mov.w	fp, #0
 8011a90:	460a      	mov	r2, r1
 8011a92:	9219      	str	r2, [sp, #100]	@ 0x64
 8011a94:	7811      	ldrb	r1, [r2, #0]
 8011a96:	292b      	cmp	r1, #43	@ 0x2b
 8011a98:	d04a      	beq.n	8011b30 <_strtod_l+0xb8>
 8011a9a:	d838      	bhi.n	8011b0e <_strtod_l+0x96>
 8011a9c:	290d      	cmp	r1, #13
 8011a9e:	d832      	bhi.n	8011b06 <_strtod_l+0x8e>
 8011aa0:	2908      	cmp	r1, #8
 8011aa2:	d832      	bhi.n	8011b0a <_strtod_l+0x92>
 8011aa4:	2900      	cmp	r1, #0
 8011aa6:	d03b      	beq.n	8011b20 <_strtod_l+0xa8>
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011aac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011aae:	782a      	ldrb	r2, [r5, #0]
 8011ab0:	2a30      	cmp	r2, #48	@ 0x30
 8011ab2:	f040 80b3 	bne.w	8011c1c <_strtod_l+0x1a4>
 8011ab6:	786a      	ldrb	r2, [r5, #1]
 8011ab8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011abc:	2a58      	cmp	r2, #88	@ 0x58
 8011abe:	d16e      	bne.n	8011b9e <_strtod_l+0x126>
 8011ac0:	9302      	str	r3, [sp, #8]
 8011ac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ac4:	9301      	str	r3, [sp, #4]
 8011ac6:	ab1a      	add	r3, sp, #104	@ 0x68
 8011ac8:	9300      	str	r3, [sp, #0]
 8011aca:	4a8e      	ldr	r2, [pc, #568]	@ (8011d04 <_strtod_l+0x28c>)
 8011acc:	9805      	ldr	r0, [sp, #20]
 8011ace:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011ad0:	a919      	add	r1, sp, #100	@ 0x64
 8011ad2:	f002 fd9f 	bl	8014614 <__gethex>
 8011ad6:	f010 060f 	ands.w	r6, r0, #15
 8011ada:	4604      	mov	r4, r0
 8011adc:	d005      	beq.n	8011aea <_strtod_l+0x72>
 8011ade:	2e06      	cmp	r6, #6
 8011ae0:	d128      	bne.n	8011b34 <_strtod_l+0xbc>
 8011ae2:	3501      	adds	r5, #1
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	9519      	str	r5, [sp, #100]	@ 0x64
 8011ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011aea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	f040 858e 	bne.w	801260e <_strtod_l+0xb96>
 8011af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011af4:	b1cb      	cbz	r3, 8011b2a <_strtod_l+0xb2>
 8011af6:	4652      	mov	r2, sl
 8011af8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011afc:	ec43 2b10 	vmov	d0, r2, r3
 8011b00:	b01f      	add	sp, #124	@ 0x7c
 8011b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b06:	2920      	cmp	r1, #32
 8011b08:	d1ce      	bne.n	8011aa8 <_strtod_l+0x30>
 8011b0a:	3201      	adds	r2, #1
 8011b0c:	e7c1      	b.n	8011a92 <_strtod_l+0x1a>
 8011b0e:	292d      	cmp	r1, #45	@ 0x2d
 8011b10:	d1ca      	bne.n	8011aa8 <_strtod_l+0x30>
 8011b12:	2101      	movs	r1, #1
 8011b14:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011b16:	1c51      	adds	r1, r2, #1
 8011b18:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b1a:	7852      	ldrb	r2, [r2, #1]
 8011b1c:	2a00      	cmp	r2, #0
 8011b1e:	d1c5      	bne.n	8011aac <_strtod_l+0x34>
 8011b20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011b22:	9419      	str	r4, [sp, #100]	@ 0x64
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	f040 8570 	bne.w	801260a <_strtod_l+0xb92>
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	465b      	mov	r3, fp
 8011b2e:	e7e5      	b.n	8011afc <_strtod_l+0x84>
 8011b30:	2100      	movs	r1, #0
 8011b32:	e7ef      	b.n	8011b14 <_strtod_l+0x9c>
 8011b34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011b36:	b13a      	cbz	r2, 8011b48 <_strtod_l+0xd0>
 8011b38:	2135      	movs	r1, #53	@ 0x35
 8011b3a:	a81c      	add	r0, sp, #112	@ 0x70
 8011b3c:	f003 fd72 	bl	8015624 <__copybits>
 8011b40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011b42:	9805      	ldr	r0, [sp, #20]
 8011b44:	f003 f940 	bl	8014dc8 <_Bfree>
 8011b48:	3e01      	subs	r6, #1
 8011b4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011b4c:	2e04      	cmp	r6, #4
 8011b4e:	d806      	bhi.n	8011b5e <_strtod_l+0xe6>
 8011b50:	e8df f006 	tbb	[pc, r6]
 8011b54:	201d0314 	.word	0x201d0314
 8011b58:	14          	.byte	0x14
 8011b59:	00          	.byte	0x00
 8011b5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011b5e:	05e1      	lsls	r1, r4, #23
 8011b60:	bf48      	it	mi
 8011b62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011b6a:	0d1b      	lsrs	r3, r3, #20
 8011b6c:	051b      	lsls	r3, r3, #20
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1bb      	bne.n	8011aea <_strtod_l+0x72>
 8011b72:	f001 fdfb 	bl	801376c <__errno>
 8011b76:	2322      	movs	r3, #34	@ 0x22
 8011b78:	6003      	str	r3, [r0, #0]
 8011b7a:	e7b6      	b.n	8011aea <_strtod_l+0x72>
 8011b7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011b80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011b84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011b88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011b8c:	e7e7      	b.n	8011b5e <_strtod_l+0xe6>
 8011b8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011d0c <_strtod_l+0x294>
 8011b92:	e7e4      	b.n	8011b5e <_strtod_l+0xe6>
 8011b94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011b98:	f04f 3aff 	mov.w	sl, #4294967295
 8011b9c:	e7df      	b.n	8011b5e <_strtod_l+0xe6>
 8011b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ba0:	1c5a      	adds	r2, r3, #1
 8011ba2:	9219      	str	r2, [sp, #100]	@ 0x64
 8011ba4:	785b      	ldrb	r3, [r3, #1]
 8011ba6:	2b30      	cmp	r3, #48	@ 0x30
 8011ba8:	d0f9      	beq.n	8011b9e <_strtod_l+0x126>
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d09d      	beq.n	8011aea <_strtod_l+0x72>
 8011bae:	2301      	movs	r3, #1
 8011bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8011bb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011bb4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	9308      	str	r3, [sp, #32]
 8011bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8011bbc:	461f      	mov	r7, r3
 8011bbe:	220a      	movs	r2, #10
 8011bc0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011bc2:	7805      	ldrb	r5, [r0, #0]
 8011bc4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011bc8:	b2d9      	uxtb	r1, r3
 8011bca:	2909      	cmp	r1, #9
 8011bcc:	d928      	bls.n	8011c20 <_strtod_l+0x1a8>
 8011bce:	494e      	ldr	r1, [pc, #312]	@ (8011d08 <_strtod_l+0x290>)
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	f001 fd5c 	bl	801368e <strncmp>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	d032      	beq.n	8011c40 <_strtod_l+0x1c8>
 8011bda:	2000      	movs	r0, #0
 8011bdc:	462a      	mov	r2, r5
 8011bde:	4681      	mov	r9, r0
 8011be0:	463d      	mov	r5, r7
 8011be2:	4603      	mov	r3, r0
 8011be4:	2a65      	cmp	r2, #101	@ 0x65
 8011be6:	d001      	beq.n	8011bec <_strtod_l+0x174>
 8011be8:	2a45      	cmp	r2, #69	@ 0x45
 8011bea:	d114      	bne.n	8011c16 <_strtod_l+0x19e>
 8011bec:	b91d      	cbnz	r5, 8011bf6 <_strtod_l+0x17e>
 8011bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011bf0:	4302      	orrs	r2, r0
 8011bf2:	d095      	beq.n	8011b20 <_strtod_l+0xa8>
 8011bf4:	2500      	movs	r5, #0
 8011bf6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011bf8:	1c62      	adds	r2, r4, #1
 8011bfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8011bfc:	7862      	ldrb	r2, [r4, #1]
 8011bfe:	2a2b      	cmp	r2, #43	@ 0x2b
 8011c00:	d077      	beq.n	8011cf2 <_strtod_l+0x27a>
 8011c02:	2a2d      	cmp	r2, #45	@ 0x2d
 8011c04:	d07b      	beq.n	8011cfe <_strtod_l+0x286>
 8011c06:	f04f 0c00 	mov.w	ip, #0
 8011c0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011c0e:	2909      	cmp	r1, #9
 8011c10:	f240 8082 	bls.w	8011d18 <_strtod_l+0x2a0>
 8011c14:	9419      	str	r4, [sp, #100]	@ 0x64
 8011c16:	f04f 0800 	mov.w	r8, #0
 8011c1a:	e0a2      	b.n	8011d62 <_strtod_l+0x2ea>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	e7c7      	b.n	8011bb0 <_strtod_l+0x138>
 8011c20:	2f08      	cmp	r7, #8
 8011c22:	bfd5      	itete	le
 8011c24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011c26:	9908      	ldrgt	r1, [sp, #32]
 8011c28:	fb02 3301 	mlale	r3, r2, r1, r3
 8011c2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011c30:	f100 0001 	add.w	r0, r0, #1
 8011c34:	bfd4      	ite	le
 8011c36:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011c38:	9308      	strgt	r3, [sp, #32]
 8011c3a:	3701      	adds	r7, #1
 8011c3c:	9019      	str	r0, [sp, #100]	@ 0x64
 8011c3e:	e7bf      	b.n	8011bc0 <_strtod_l+0x148>
 8011c40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c42:	1c5a      	adds	r2, r3, #1
 8011c44:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c46:	785a      	ldrb	r2, [r3, #1]
 8011c48:	b37f      	cbz	r7, 8011caa <_strtod_l+0x232>
 8011c4a:	4681      	mov	r9, r0
 8011c4c:	463d      	mov	r5, r7
 8011c4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011c52:	2b09      	cmp	r3, #9
 8011c54:	d912      	bls.n	8011c7c <_strtod_l+0x204>
 8011c56:	2301      	movs	r3, #1
 8011c58:	e7c4      	b.n	8011be4 <_strtod_l+0x16c>
 8011c5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c5c:	1c5a      	adds	r2, r3, #1
 8011c5e:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c60:	785a      	ldrb	r2, [r3, #1]
 8011c62:	3001      	adds	r0, #1
 8011c64:	2a30      	cmp	r2, #48	@ 0x30
 8011c66:	d0f8      	beq.n	8011c5a <_strtod_l+0x1e2>
 8011c68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011c6c:	2b08      	cmp	r3, #8
 8011c6e:	f200 84d3 	bhi.w	8012618 <_strtod_l+0xba0>
 8011c72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c74:	930c      	str	r3, [sp, #48]	@ 0x30
 8011c76:	4681      	mov	r9, r0
 8011c78:	2000      	movs	r0, #0
 8011c7a:	4605      	mov	r5, r0
 8011c7c:	3a30      	subs	r2, #48	@ 0x30
 8011c7e:	f100 0301 	add.w	r3, r0, #1
 8011c82:	d02a      	beq.n	8011cda <_strtod_l+0x262>
 8011c84:	4499      	add	r9, r3
 8011c86:	eb00 0c05 	add.w	ip, r0, r5
 8011c8a:	462b      	mov	r3, r5
 8011c8c:	210a      	movs	r1, #10
 8011c8e:	4563      	cmp	r3, ip
 8011c90:	d10d      	bne.n	8011cae <_strtod_l+0x236>
 8011c92:	1c69      	adds	r1, r5, #1
 8011c94:	4401      	add	r1, r0
 8011c96:	4428      	add	r0, r5
 8011c98:	2808      	cmp	r0, #8
 8011c9a:	dc16      	bgt.n	8011cca <_strtod_l+0x252>
 8011c9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011c9e:	230a      	movs	r3, #10
 8011ca0:	fb03 2300 	mla	r3, r3, r0, r2
 8011ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	e018      	b.n	8011cdc <_strtod_l+0x264>
 8011caa:	4638      	mov	r0, r7
 8011cac:	e7da      	b.n	8011c64 <_strtod_l+0x1ec>
 8011cae:	2b08      	cmp	r3, #8
 8011cb0:	f103 0301 	add.w	r3, r3, #1
 8011cb4:	dc03      	bgt.n	8011cbe <_strtod_l+0x246>
 8011cb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011cb8:	434e      	muls	r6, r1
 8011cba:	960a      	str	r6, [sp, #40]	@ 0x28
 8011cbc:	e7e7      	b.n	8011c8e <_strtod_l+0x216>
 8011cbe:	2b10      	cmp	r3, #16
 8011cc0:	bfde      	ittt	le
 8011cc2:	9e08      	ldrle	r6, [sp, #32]
 8011cc4:	434e      	mulle	r6, r1
 8011cc6:	9608      	strle	r6, [sp, #32]
 8011cc8:	e7e1      	b.n	8011c8e <_strtod_l+0x216>
 8011cca:	280f      	cmp	r0, #15
 8011ccc:	dceb      	bgt.n	8011ca6 <_strtod_l+0x22e>
 8011cce:	9808      	ldr	r0, [sp, #32]
 8011cd0:	230a      	movs	r3, #10
 8011cd2:	fb03 2300 	mla	r3, r3, r0, r2
 8011cd6:	9308      	str	r3, [sp, #32]
 8011cd8:	e7e5      	b.n	8011ca6 <_strtod_l+0x22e>
 8011cda:	4629      	mov	r1, r5
 8011cdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011cde:	1c50      	adds	r0, r2, #1
 8011ce0:	9019      	str	r0, [sp, #100]	@ 0x64
 8011ce2:	7852      	ldrb	r2, [r2, #1]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	e7b1      	b.n	8011c4e <_strtod_l+0x1d6>
 8011cea:	f04f 0900 	mov.w	r9, #0
 8011cee:	2301      	movs	r3, #1
 8011cf0:	e77d      	b.n	8011bee <_strtod_l+0x176>
 8011cf2:	f04f 0c00 	mov.w	ip, #0
 8011cf6:	1ca2      	adds	r2, r4, #2
 8011cf8:	9219      	str	r2, [sp, #100]	@ 0x64
 8011cfa:	78a2      	ldrb	r2, [r4, #2]
 8011cfc:	e785      	b.n	8011c0a <_strtod_l+0x192>
 8011cfe:	f04f 0c01 	mov.w	ip, #1
 8011d02:	e7f8      	b.n	8011cf6 <_strtod_l+0x27e>
 8011d04:	080177f0 	.word	0x080177f0
 8011d08:	080177d8 	.word	0x080177d8
 8011d0c:	7ff00000 	.word	0x7ff00000
 8011d10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d12:	1c51      	adds	r1, r2, #1
 8011d14:	9119      	str	r1, [sp, #100]	@ 0x64
 8011d16:	7852      	ldrb	r2, [r2, #1]
 8011d18:	2a30      	cmp	r2, #48	@ 0x30
 8011d1a:	d0f9      	beq.n	8011d10 <_strtod_l+0x298>
 8011d1c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011d20:	2908      	cmp	r1, #8
 8011d22:	f63f af78 	bhi.w	8011c16 <_strtod_l+0x19e>
 8011d26:	3a30      	subs	r2, #48	@ 0x30
 8011d28:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d2a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d2c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011d2e:	f04f 080a 	mov.w	r8, #10
 8011d32:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d34:	1c56      	adds	r6, r2, #1
 8011d36:	9619      	str	r6, [sp, #100]	@ 0x64
 8011d38:	7852      	ldrb	r2, [r2, #1]
 8011d3a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011d3e:	f1be 0f09 	cmp.w	lr, #9
 8011d42:	d939      	bls.n	8011db8 <_strtod_l+0x340>
 8011d44:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011d46:	1a76      	subs	r6, r6, r1
 8011d48:	2e08      	cmp	r6, #8
 8011d4a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011d4e:	dc03      	bgt.n	8011d58 <_strtod_l+0x2e0>
 8011d50:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011d52:	4588      	cmp	r8, r1
 8011d54:	bfa8      	it	ge
 8011d56:	4688      	movge	r8, r1
 8011d58:	f1bc 0f00 	cmp.w	ip, #0
 8011d5c:	d001      	beq.n	8011d62 <_strtod_l+0x2ea>
 8011d5e:	f1c8 0800 	rsb	r8, r8, #0
 8011d62:	2d00      	cmp	r5, #0
 8011d64:	d14e      	bne.n	8011e04 <_strtod_l+0x38c>
 8011d66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d68:	4308      	orrs	r0, r1
 8011d6a:	f47f aebe 	bne.w	8011aea <_strtod_l+0x72>
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	f47f aed6 	bne.w	8011b20 <_strtod_l+0xa8>
 8011d74:	2a69      	cmp	r2, #105	@ 0x69
 8011d76:	d028      	beq.n	8011dca <_strtod_l+0x352>
 8011d78:	dc25      	bgt.n	8011dc6 <_strtod_l+0x34e>
 8011d7a:	2a49      	cmp	r2, #73	@ 0x49
 8011d7c:	d025      	beq.n	8011dca <_strtod_l+0x352>
 8011d7e:	2a4e      	cmp	r2, #78	@ 0x4e
 8011d80:	f47f aece 	bne.w	8011b20 <_strtod_l+0xa8>
 8011d84:	499b      	ldr	r1, [pc, #620]	@ (8011ff4 <_strtod_l+0x57c>)
 8011d86:	a819      	add	r0, sp, #100	@ 0x64
 8011d88:	f002 fe66 	bl	8014a58 <__match>
 8011d8c:	2800      	cmp	r0, #0
 8011d8e:	f43f aec7 	beq.w	8011b20 <_strtod_l+0xa8>
 8011d92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	2b28      	cmp	r3, #40	@ 0x28
 8011d98:	d12e      	bne.n	8011df8 <_strtod_l+0x380>
 8011d9a:	4997      	ldr	r1, [pc, #604]	@ (8011ff8 <_strtod_l+0x580>)
 8011d9c:	aa1c      	add	r2, sp, #112	@ 0x70
 8011d9e:	a819      	add	r0, sp, #100	@ 0x64
 8011da0:	f002 fe6e 	bl	8014a80 <__hexnan>
 8011da4:	2805      	cmp	r0, #5
 8011da6:	d127      	bne.n	8011df8 <_strtod_l+0x380>
 8011da8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011daa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011dae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011db2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011db6:	e698      	b.n	8011aea <_strtod_l+0x72>
 8011db8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011dba:	fb08 2101 	mla	r1, r8, r1, r2
 8011dbe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011dc2:	920e      	str	r2, [sp, #56]	@ 0x38
 8011dc4:	e7b5      	b.n	8011d32 <_strtod_l+0x2ba>
 8011dc6:	2a6e      	cmp	r2, #110	@ 0x6e
 8011dc8:	e7da      	b.n	8011d80 <_strtod_l+0x308>
 8011dca:	498c      	ldr	r1, [pc, #560]	@ (8011ffc <_strtod_l+0x584>)
 8011dcc:	a819      	add	r0, sp, #100	@ 0x64
 8011dce:	f002 fe43 	bl	8014a58 <__match>
 8011dd2:	2800      	cmp	r0, #0
 8011dd4:	f43f aea4 	beq.w	8011b20 <_strtod_l+0xa8>
 8011dd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011dda:	4989      	ldr	r1, [pc, #548]	@ (8012000 <_strtod_l+0x588>)
 8011ddc:	3b01      	subs	r3, #1
 8011dde:	a819      	add	r0, sp, #100	@ 0x64
 8011de0:	9319      	str	r3, [sp, #100]	@ 0x64
 8011de2:	f002 fe39 	bl	8014a58 <__match>
 8011de6:	b910      	cbnz	r0, 8011dee <_strtod_l+0x376>
 8011de8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011dea:	3301      	adds	r3, #1
 8011dec:	9319      	str	r3, [sp, #100]	@ 0x64
 8011dee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012010 <_strtod_l+0x598>
 8011df2:	f04f 0a00 	mov.w	sl, #0
 8011df6:	e678      	b.n	8011aea <_strtod_l+0x72>
 8011df8:	4882      	ldr	r0, [pc, #520]	@ (8012004 <_strtod_l+0x58c>)
 8011dfa:	f001 fcfd 	bl	80137f8 <nan>
 8011dfe:	ec5b ab10 	vmov	sl, fp, d0
 8011e02:	e672      	b.n	8011aea <_strtod_l+0x72>
 8011e04:	eba8 0309 	sub.w	r3, r8, r9
 8011e08:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e0c:	2f00      	cmp	r7, #0
 8011e0e:	bf08      	it	eq
 8011e10:	462f      	moveq	r7, r5
 8011e12:	2d10      	cmp	r5, #16
 8011e14:	462c      	mov	r4, r5
 8011e16:	bfa8      	it	ge
 8011e18:	2410      	movge	r4, #16
 8011e1a:	f7ee fb83 	bl	8000524 <__aeabi_ui2d>
 8011e1e:	2d09      	cmp	r5, #9
 8011e20:	4682      	mov	sl, r0
 8011e22:	468b      	mov	fp, r1
 8011e24:	dc13      	bgt.n	8011e4e <_strtod_l+0x3d6>
 8011e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f43f ae5e 	beq.w	8011aea <_strtod_l+0x72>
 8011e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e30:	dd78      	ble.n	8011f24 <_strtod_l+0x4ac>
 8011e32:	2b16      	cmp	r3, #22
 8011e34:	dc5f      	bgt.n	8011ef6 <_strtod_l+0x47e>
 8011e36:	4974      	ldr	r1, [pc, #464]	@ (8012008 <_strtod_l+0x590>)
 8011e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e40:	4652      	mov	r2, sl
 8011e42:	465b      	mov	r3, fp
 8011e44:	f7ee fbe8 	bl	8000618 <__aeabi_dmul>
 8011e48:	4682      	mov	sl, r0
 8011e4a:	468b      	mov	fp, r1
 8011e4c:	e64d      	b.n	8011aea <_strtod_l+0x72>
 8011e4e:	4b6e      	ldr	r3, [pc, #440]	@ (8012008 <_strtod_l+0x590>)
 8011e50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011e58:	f7ee fbde 	bl	8000618 <__aeabi_dmul>
 8011e5c:	4682      	mov	sl, r0
 8011e5e:	9808      	ldr	r0, [sp, #32]
 8011e60:	468b      	mov	fp, r1
 8011e62:	f7ee fb5f 	bl	8000524 <__aeabi_ui2d>
 8011e66:	4602      	mov	r2, r0
 8011e68:	460b      	mov	r3, r1
 8011e6a:	4650      	mov	r0, sl
 8011e6c:	4659      	mov	r1, fp
 8011e6e:	f7ee fa1d 	bl	80002ac <__adddf3>
 8011e72:	2d0f      	cmp	r5, #15
 8011e74:	4682      	mov	sl, r0
 8011e76:	468b      	mov	fp, r1
 8011e78:	ddd5      	ble.n	8011e26 <_strtod_l+0x3ae>
 8011e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e7c:	1b2c      	subs	r4, r5, r4
 8011e7e:	441c      	add	r4, r3
 8011e80:	2c00      	cmp	r4, #0
 8011e82:	f340 8096 	ble.w	8011fb2 <_strtod_l+0x53a>
 8011e86:	f014 030f 	ands.w	r3, r4, #15
 8011e8a:	d00a      	beq.n	8011ea2 <_strtod_l+0x42a>
 8011e8c:	495e      	ldr	r1, [pc, #376]	@ (8012008 <_strtod_l+0x590>)
 8011e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011e92:	4652      	mov	r2, sl
 8011e94:	465b      	mov	r3, fp
 8011e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e9a:	f7ee fbbd 	bl	8000618 <__aeabi_dmul>
 8011e9e:	4682      	mov	sl, r0
 8011ea0:	468b      	mov	fp, r1
 8011ea2:	f034 040f 	bics.w	r4, r4, #15
 8011ea6:	d073      	beq.n	8011f90 <_strtod_l+0x518>
 8011ea8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011eac:	dd48      	ble.n	8011f40 <_strtod_l+0x4c8>
 8011eae:	2400      	movs	r4, #0
 8011eb0:	46a0      	mov	r8, r4
 8011eb2:	940a      	str	r4, [sp, #40]	@ 0x28
 8011eb4:	46a1      	mov	r9, r4
 8011eb6:	9a05      	ldr	r2, [sp, #20]
 8011eb8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012010 <_strtod_l+0x598>
 8011ebc:	2322      	movs	r3, #34	@ 0x22
 8011ebe:	6013      	str	r3, [r2, #0]
 8011ec0:	f04f 0a00 	mov.w	sl, #0
 8011ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f43f ae0f 	beq.w	8011aea <_strtod_l+0x72>
 8011ecc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011ece:	9805      	ldr	r0, [sp, #20]
 8011ed0:	f002 ff7a 	bl	8014dc8 <_Bfree>
 8011ed4:	9805      	ldr	r0, [sp, #20]
 8011ed6:	4649      	mov	r1, r9
 8011ed8:	f002 ff76 	bl	8014dc8 <_Bfree>
 8011edc:	9805      	ldr	r0, [sp, #20]
 8011ede:	4641      	mov	r1, r8
 8011ee0:	f002 ff72 	bl	8014dc8 <_Bfree>
 8011ee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011ee6:	9805      	ldr	r0, [sp, #20]
 8011ee8:	f002 ff6e 	bl	8014dc8 <_Bfree>
 8011eec:	9805      	ldr	r0, [sp, #20]
 8011eee:	4621      	mov	r1, r4
 8011ef0:	f002 ff6a 	bl	8014dc8 <_Bfree>
 8011ef4:	e5f9      	b.n	8011aea <_strtod_l+0x72>
 8011ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ef8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011efc:	4293      	cmp	r3, r2
 8011efe:	dbbc      	blt.n	8011e7a <_strtod_l+0x402>
 8011f00:	4c41      	ldr	r4, [pc, #260]	@ (8012008 <_strtod_l+0x590>)
 8011f02:	f1c5 050f 	rsb	r5, r5, #15
 8011f06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011f0a:	4652      	mov	r2, sl
 8011f0c:	465b      	mov	r3, fp
 8011f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f12:	f7ee fb81 	bl	8000618 <__aeabi_dmul>
 8011f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f18:	1b5d      	subs	r5, r3, r5
 8011f1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011f22:	e78f      	b.n	8011e44 <_strtod_l+0x3cc>
 8011f24:	3316      	adds	r3, #22
 8011f26:	dba8      	blt.n	8011e7a <_strtod_l+0x402>
 8011f28:	4b37      	ldr	r3, [pc, #220]	@ (8012008 <_strtod_l+0x590>)
 8011f2a:	eba9 0808 	sub.w	r8, r9, r8
 8011f2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011f32:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011f36:	4650      	mov	r0, sl
 8011f38:	4659      	mov	r1, fp
 8011f3a:	f7ee fc97 	bl	800086c <__aeabi_ddiv>
 8011f3e:	e783      	b.n	8011e48 <_strtod_l+0x3d0>
 8011f40:	4b32      	ldr	r3, [pc, #200]	@ (801200c <_strtod_l+0x594>)
 8011f42:	9308      	str	r3, [sp, #32]
 8011f44:	2300      	movs	r3, #0
 8011f46:	1124      	asrs	r4, r4, #4
 8011f48:	4650      	mov	r0, sl
 8011f4a:	4659      	mov	r1, fp
 8011f4c:	461e      	mov	r6, r3
 8011f4e:	2c01      	cmp	r4, #1
 8011f50:	dc21      	bgt.n	8011f96 <_strtod_l+0x51e>
 8011f52:	b10b      	cbz	r3, 8011f58 <_strtod_l+0x4e0>
 8011f54:	4682      	mov	sl, r0
 8011f56:	468b      	mov	fp, r1
 8011f58:	492c      	ldr	r1, [pc, #176]	@ (801200c <_strtod_l+0x594>)
 8011f5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011f5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011f62:	4652      	mov	r2, sl
 8011f64:	465b      	mov	r3, fp
 8011f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f6a:	f7ee fb55 	bl	8000618 <__aeabi_dmul>
 8011f6e:	4b28      	ldr	r3, [pc, #160]	@ (8012010 <_strtod_l+0x598>)
 8011f70:	460a      	mov	r2, r1
 8011f72:	400b      	ands	r3, r1
 8011f74:	4927      	ldr	r1, [pc, #156]	@ (8012014 <_strtod_l+0x59c>)
 8011f76:	428b      	cmp	r3, r1
 8011f78:	4682      	mov	sl, r0
 8011f7a:	d898      	bhi.n	8011eae <_strtod_l+0x436>
 8011f7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011f80:	428b      	cmp	r3, r1
 8011f82:	bf86      	itte	hi
 8011f84:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012018 <_strtod_l+0x5a0>
 8011f88:	f04f 3aff 	movhi.w	sl, #4294967295
 8011f8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011f90:	2300      	movs	r3, #0
 8011f92:	9308      	str	r3, [sp, #32]
 8011f94:	e07a      	b.n	801208c <_strtod_l+0x614>
 8011f96:	07e2      	lsls	r2, r4, #31
 8011f98:	d505      	bpl.n	8011fa6 <_strtod_l+0x52e>
 8011f9a:	9b08      	ldr	r3, [sp, #32]
 8011f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa0:	f7ee fb3a 	bl	8000618 <__aeabi_dmul>
 8011fa4:	2301      	movs	r3, #1
 8011fa6:	9a08      	ldr	r2, [sp, #32]
 8011fa8:	3208      	adds	r2, #8
 8011faa:	3601      	adds	r6, #1
 8011fac:	1064      	asrs	r4, r4, #1
 8011fae:	9208      	str	r2, [sp, #32]
 8011fb0:	e7cd      	b.n	8011f4e <_strtod_l+0x4d6>
 8011fb2:	d0ed      	beq.n	8011f90 <_strtod_l+0x518>
 8011fb4:	4264      	negs	r4, r4
 8011fb6:	f014 020f 	ands.w	r2, r4, #15
 8011fba:	d00a      	beq.n	8011fd2 <_strtod_l+0x55a>
 8011fbc:	4b12      	ldr	r3, [pc, #72]	@ (8012008 <_strtod_l+0x590>)
 8011fbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011fc2:	4650      	mov	r0, sl
 8011fc4:	4659      	mov	r1, fp
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	f7ee fc4f 	bl	800086c <__aeabi_ddiv>
 8011fce:	4682      	mov	sl, r0
 8011fd0:	468b      	mov	fp, r1
 8011fd2:	1124      	asrs	r4, r4, #4
 8011fd4:	d0dc      	beq.n	8011f90 <_strtod_l+0x518>
 8011fd6:	2c1f      	cmp	r4, #31
 8011fd8:	dd20      	ble.n	801201c <_strtod_l+0x5a4>
 8011fda:	2400      	movs	r4, #0
 8011fdc:	46a0      	mov	r8, r4
 8011fde:	940a      	str	r4, [sp, #40]	@ 0x28
 8011fe0:	46a1      	mov	r9, r4
 8011fe2:	9a05      	ldr	r2, [sp, #20]
 8011fe4:	2322      	movs	r3, #34	@ 0x22
 8011fe6:	f04f 0a00 	mov.w	sl, #0
 8011fea:	f04f 0b00 	mov.w	fp, #0
 8011fee:	6013      	str	r3, [r2, #0]
 8011ff0:	e768      	b.n	8011ec4 <_strtod_l+0x44c>
 8011ff2:	bf00      	nop
 8011ff4:	0801783d 	.word	0x0801783d
 8011ff8:	080177dc 	.word	0x080177dc
 8011ffc:	08017835 	.word	0x08017835
 8012000:	08017872 	.word	0x08017872
 8012004:	08017c20 	.word	0x08017c20
 8012008:	080179f0 	.word	0x080179f0
 801200c:	080179c8 	.word	0x080179c8
 8012010:	7ff00000 	.word	0x7ff00000
 8012014:	7ca00000 	.word	0x7ca00000
 8012018:	7fefffff 	.word	0x7fefffff
 801201c:	f014 0310 	ands.w	r3, r4, #16
 8012020:	bf18      	it	ne
 8012022:	236a      	movne	r3, #106	@ 0x6a
 8012024:	4ea9      	ldr	r6, [pc, #676]	@ (80122cc <_strtod_l+0x854>)
 8012026:	9308      	str	r3, [sp, #32]
 8012028:	4650      	mov	r0, sl
 801202a:	4659      	mov	r1, fp
 801202c:	2300      	movs	r3, #0
 801202e:	07e2      	lsls	r2, r4, #31
 8012030:	d504      	bpl.n	801203c <_strtod_l+0x5c4>
 8012032:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012036:	f7ee faef 	bl	8000618 <__aeabi_dmul>
 801203a:	2301      	movs	r3, #1
 801203c:	1064      	asrs	r4, r4, #1
 801203e:	f106 0608 	add.w	r6, r6, #8
 8012042:	d1f4      	bne.n	801202e <_strtod_l+0x5b6>
 8012044:	b10b      	cbz	r3, 801204a <_strtod_l+0x5d2>
 8012046:	4682      	mov	sl, r0
 8012048:	468b      	mov	fp, r1
 801204a:	9b08      	ldr	r3, [sp, #32]
 801204c:	b1b3      	cbz	r3, 801207c <_strtod_l+0x604>
 801204e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012052:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8012056:	2b00      	cmp	r3, #0
 8012058:	4659      	mov	r1, fp
 801205a:	dd0f      	ble.n	801207c <_strtod_l+0x604>
 801205c:	2b1f      	cmp	r3, #31
 801205e:	dd55      	ble.n	801210c <_strtod_l+0x694>
 8012060:	2b34      	cmp	r3, #52	@ 0x34
 8012062:	bfde      	ittt	le
 8012064:	f04f 33ff 	movle.w	r3, #4294967295
 8012068:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801206c:	4093      	lslle	r3, r2
 801206e:	f04f 0a00 	mov.w	sl, #0
 8012072:	bfcc      	ite	gt
 8012074:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8012078:	ea03 0b01 	andle.w	fp, r3, r1
 801207c:	2200      	movs	r2, #0
 801207e:	2300      	movs	r3, #0
 8012080:	4650      	mov	r0, sl
 8012082:	4659      	mov	r1, fp
 8012084:	f7ee fd30 	bl	8000ae8 <__aeabi_dcmpeq>
 8012088:	2800      	cmp	r0, #0
 801208a:	d1a6      	bne.n	8011fda <_strtod_l+0x562>
 801208c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801208e:	9300      	str	r3, [sp, #0]
 8012090:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012092:	9805      	ldr	r0, [sp, #20]
 8012094:	462b      	mov	r3, r5
 8012096:	463a      	mov	r2, r7
 8012098:	f002 fefe 	bl	8014e98 <__s2b>
 801209c:	900a      	str	r0, [sp, #40]	@ 0x28
 801209e:	2800      	cmp	r0, #0
 80120a0:	f43f af05 	beq.w	8011eae <_strtod_l+0x436>
 80120a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120a6:	2a00      	cmp	r2, #0
 80120a8:	eba9 0308 	sub.w	r3, r9, r8
 80120ac:	bfa8      	it	ge
 80120ae:	2300      	movge	r3, #0
 80120b0:	9312      	str	r3, [sp, #72]	@ 0x48
 80120b2:	2400      	movs	r4, #0
 80120b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80120b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80120ba:	46a0      	mov	r8, r4
 80120bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120be:	9805      	ldr	r0, [sp, #20]
 80120c0:	6859      	ldr	r1, [r3, #4]
 80120c2:	f002 fe41 	bl	8014d48 <_Balloc>
 80120c6:	4681      	mov	r9, r0
 80120c8:	2800      	cmp	r0, #0
 80120ca:	f43f aef4 	beq.w	8011eb6 <_strtod_l+0x43e>
 80120ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120d0:	691a      	ldr	r2, [r3, #16]
 80120d2:	3202      	adds	r2, #2
 80120d4:	f103 010c 	add.w	r1, r3, #12
 80120d8:	0092      	lsls	r2, r2, #2
 80120da:	300c      	adds	r0, #12
 80120dc:	f001 fb7b 	bl	80137d6 <memcpy>
 80120e0:	ec4b ab10 	vmov	d0, sl, fp
 80120e4:	9805      	ldr	r0, [sp, #20]
 80120e6:	aa1c      	add	r2, sp, #112	@ 0x70
 80120e8:	a91b      	add	r1, sp, #108	@ 0x6c
 80120ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80120ee:	f003 fa0f 	bl	8015510 <__d2b>
 80120f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80120f4:	2800      	cmp	r0, #0
 80120f6:	f43f aede 	beq.w	8011eb6 <_strtod_l+0x43e>
 80120fa:	9805      	ldr	r0, [sp, #20]
 80120fc:	2101      	movs	r1, #1
 80120fe:	f002 ff61 	bl	8014fc4 <__i2b>
 8012102:	4680      	mov	r8, r0
 8012104:	b948      	cbnz	r0, 801211a <_strtod_l+0x6a2>
 8012106:	f04f 0800 	mov.w	r8, #0
 801210a:	e6d4      	b.n	8011eb6 <_strtod_l+0x43e>
 801210c:	f04f 32ff 	mov.w	r2, #4294967295
 8012110:	fa02 f303 	lsl.w	r3, r2, r3
 8012114:	ea03 0a0a 	and.w	sl, r3, sl
 8012118:	e7b0      	b.n	801207c <_strtod_l+0x604>
 801211a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801211c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801211e:	2d00      	cmp	r5, #0
 8012120:	bfab      	itete	ge
 8012122:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012124:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012126:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012128:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801212a:	bfac      	ite	ge
 801212c:	18ef      	addge	r7, r5, r3
 801212e:	1b5e      	sublt	r6, r3, r5
 8012130:	9b08      	ldr	r3, [sp, #32]
 8012132:	1aed      	subs	r5, r5, r3
 8012134:	4415      	add	r5, r2
 8012136:	4b66      	ldr	r3, [pc, #408]	@ (80122d0 <_strtod_l+0x858>)
 8012138:	3d01      	subs	r5, #1
 801213a:	429d      	cmp	r5, r3
 801213c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012140:	da50      	bge.n	80121e4 <_strtod_l+0x76c>
 8012142:	1b5b      	subs	r3, r3, r5
 8012144:	2b1f      	cmp	r3, #31
 8012146:	eba2 0203 	sub.w	r2, r2, r3
 801214a:	f04f 0101 	mov.w	r1, #1
 801214e:	dc3d      	bgt.n	80121cc <_strtod_l+0x754>
 8012150:	fa01 f303 	lsl.w	r3, r1, r3
 8012154:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012156:	2300      	movs	r3, #0
 8012158:	9310      	str	r3, [sp, #64]	@ 0x40
 801215a:	18bd      	adds	r5, r7, r2
 801215c:	9b08      	ldr	r3, [sp, #32]
 801215e:	42af      	cmp	r7, r5
 8012160:	4416      	add	r6, r2
 8012162:	441e      	add	r6, r3
 8012164:	463b      	mov	r3, r7
 8012166:	bfa8      	it	ge
 8012168:	462b      	movge	r3, r5
 801216a:	42b3      	cmp	r3, r6
 801216c:	bfa8      	it	ge
 801216e:	4633      	movge	r3, r6
 8012170:	2b00      	cmp	r3, #0
 8012172:	bfc2      	ittt	gt
 8012174:	1aed      	subgt	r5, r5, r3
 8012176:	1af6      	subgt	r6, r6, r3
 8012178:	1aff      	subgt	r7, r7, r3
 801217a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801217c:	2b00      	cmp	r3, #0
 801217e:	dd16      	ble.n	80121ae <_strtod_l+0x736>
 8012180:	4641      	mov	r1, r8
 8012182:	9805      	ldr	r0, [sp, #20]
 8012184:	461a      	mov	r2, r3
 8012186:	f002 ffdd 	bl	8015144 <__pow5mult>
 801218a:	4680      	mov	r8, r0
 801218c:	2800      	cmp	r0, #0
 801218e:	d0ba      	beq.n	8012106 <_strtod_l+0x68e>
 8012190:	4601      	mov	r1, r0
 8012192:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012194:	9805      	ldr	r0, [sp, #20]
 8012196:	f002 ff2b 	bl	8014ff0 <__multiply>
 801219a:	900e      	str	r0, [sp, #56]	@ 0x38
 801219c:	2800      	cmp	r0, #0
 801219e:	f43f ae8a 	beq.w	8011eb6 <_strtod_l+0x43e>
 80121a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80121a4:	9805      	ldr	r0, [sp, #20]
 80121a6:	f002 fe0f 	bl	8014dc8 <_Bfree>
 80121aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80121ae:	2d00      	cmp	r5, #0
 80121b0:	dc1d      	bgt.n	80121ee <_strtod_l+0x776>
 80121b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	dd23      	ble.n	8012200 <_strtod_l+0x788>
 80121b8:	4649      	mov	r1, r9
 80121ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80121bc:	9805      	ldr	r0, [sp, #20]
 80121be:	f002 ffc1 	bl	8015144 <__pow5mult>
 80121c2:	4681      	mov	r9, r0
 80121c4:	b9e0      	cbnz	r0, 8012200 <_strtod_l+0x788>
 80121c6:	f04f 0900 	mov.w	r9, #0
 80121ca:	e674      	b.n	8011eb6 <_strtod_l+0x43e>
 80121cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80121d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80121d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80121d8:	35e2      	adds	r5, #226	@ 0xe2
 80121da:	fa01 f305 	lsl.w	r3, r1, r5
 80121de:	9310      	str	r3, [sp, #64]	@ 0x40
 80121e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80121e2:	e7ba      	b.n	801215a <_strtod_l+0x6e2>
 80121e4:	2300      	movs	r3, #0
 80121e6:	9310      	str	r3, [sp, #64]	@ 0x40
 80121e8:	2301      	movs	r3, #1
 80121ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80121ec:	e7b5      	b.n	801215a <_strtod_l+0x6e2>
 80121ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80121f0:	9805      	ldr	r0, [sp, #20]
 80121f2:	462a      	mov	r2, r5
 80121f4:	f003 f800 	bl	80151f8 <__lshift>
 80121f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80121fa:	2800      	cmp	r0, #0
 80121fc:	d1d9      	bne.n	80121b2 <_strtod_l+0x73a>
 80121fe:	e65a      	b.n	8011eb6 <_strtod_l+0x43e>
 8012200:	2e00      	cmp	r6, #0
 8012202:	dd07      	ble.n	8012214 <_strtod_l+0x79c>
 8012204:	4649      	mov	r1, r9
 8012206:	9805      	ldr	r0, [sp, #20]
 8012208:	4632      	mov	r2, r6
 801220a:	f002 fff5 	bl	80151f8 <__lshift>
 801220e:	4681      	mov	r9, r0
 8012210:	2800      	cmp	r0, #0
 8012212:	d0d8      	beq.n	80121c6 <_strtod_l+0x74e>
 8012214:	2f00      	cmp	r7, #0
 8012216:	dd08      	ble.n	801222a <_strtod_l+0x7b2>
 8012218:	4641      	mov	r1, r8
 801221a:	9805      	ldr	r0, [sp, #20]
 801221c:	463a      	mov	r2, r7
 801221e:	f002 ffeb 	bl	80151f8 <__lshift>
 8012222:	4680      	mov	r8, r0
 8012224:	2800      	cmp	r0, #0
 8012226:	f43f ae46 	beq.w	8011eb6 <_strtod_l+0x43e>
 801222a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801222c:	9805      	ldr	r0, [sp, #20]
 801222e:	464a      	mov	r2, r9
 8012230:	f003 f86a 	bl	8015308 <__mdiff>
 8012234:	4604      	mov	r4, r0
 8012236:	2800      	cmp	r0, #0
 8012238:	f43f ae3d 	beq.w	8011eb6 <_strtod_l+0x43e>
 801223c:	68c3      	ldr	r3, [r0, #12]
 801223e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012240:	2300      	movs	r3, #0
 8012242:	60c3      	str	r3, [r0, #12]
 8012244:	4641      	mov	r1, r8
 8012246:	f003 f843 	bl	80152d0 <__mcmp>
 801224a:	2800      	cmp	r0, #0
 801224c:	da46      	bge.n	80122dc <_strtod_l+0x864>
 801224e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012250:	ea53 030a 	orrs.w	r3, r3, sl
 8012254:	d16c      	bne.n	8012330 <_strtod_l+0x8b8>
 8012256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801225a:	2b00      	cmp	r3, #0
 801225c:	d168      	bne.n	8012330 <_strtod_l+0x8b8>
 801225e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012262:	0d1b      	lsrs	r3, r3, #20
 8012264:	051b      	lsls	r3, r3, #20
 8012266:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801226a:	d961      	bls.n	8012330 <_strtod_l+0x8b8>
 801226c:	6963      	ldr	r3, [r4, #20]
 801226e:	b913      	cbnz	r3, 8012276 <_strtod_l+0x7fe>
 8012270:	6923      	ldr	r3, [r4, #16]
 8012272:	2b01      	cmp	r3, #1
 8012274:	dd5c      	ble.n	8012330 <_strtod_l+0x8b8>
 8012276:	4621      	mov	r1, r4
 8012278:	2201      	movs	r2, #1
 801227a:	9805      	ldr	r0, [sp, #20]
 801227c:	f002 ffbc 	bl	80151f8 <__lshift>
 8012280:	4641      	mov	r1, r8
 8012282:	4604      	mov	r4, r0
 8012284:	f003 f824 	bl	80152d0 <__mcmp>
 8012288:	2800      	cmp	r0, #0
 801228a:	dd51      	ble.n	8012330 <_strtod_l+0x8b8>
 801228c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012290:	9a08      	ldr	r2, [sp, #32]
 8012292:	0d1b      	lsrs	r3, r3, #20
 8012294:	051b      	lsls	r3, r3, #20
 8012296:	2a00      	cmp	r2, #0
 8012298:	d06b      	beq.n	8012372 <_strtod_l+0x8fa>
 801229a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801229e:	d868      	bhi.n	8012372 <_strtod_l+0x8fa>
 80122a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80122a4:	f67f ae9d 	bls.w	8011fe2 <_strtod_l+0x56a>
 80122a8:	4b0a      	ldr	r3, [pc, #40]	@ (80122d4 <_strtod_l+0x85c>)
 80122aa:	4650      	mov	r0, sl
 80122ac:	4659      	mov	r1, fp
 80122ae:	2200      	movs	r2, #0
 80122b0:	f7ee f9b2 	bl	8000618 <__aeabi_dmul>
 80122b4:	4b08      	ldr	r3, [pc, #32]	@ (80122d8 <_strtod_l+0x860>)
 80122b6:	400b      	ands	r3, r1
 80122b8:	4682      	mov	sl, r0
 80122ba:	468b      	mov	fp, r1
 80122bc:	2b00      	cmp	r3, #0
 80122be:	f47f ae05 	bne.w	8011ecc <_strtod_l+0x454>
 80122c2:	9a05      	ldr	r2, [sp, #20]
 80122c4:	2322      	movs	r3, #34	@ 0x22
 80122c6:	6013      	str	r3, [r2, #0]
 80122c8:	e600      	b.n	8011ecc <_strtod_l+0x454>
 80122ca:	bf00      	nop
 80122cc:	08017808 	.word	0x08017808
 80122d0:	fffffc02 	.word	0xfffffc02
 80122d4:	39500000 	.word	0x39500000
 80122d8:	7ff00000 	.word	0x7ff00000
 80122dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80122e0:	d165      	bne.n	80123ae <_strtod_l+0x936>
 80122e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80122e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122e8:	b35a      	cbz	r2, 8012342 <_strtod_l+0x8ca>
 80122ea:	4a9f      	ldr	r2, [pc, #636]	@ (8012568 <_strtod_l+0xaf0>)
 80122ec:	4293      	cmp	r3, r2
 80122ee:	d12b      	bne.n	8012348 <_strtod_l+0x8d0>
 80122f0:	9b08      	ldr	r3, [sp, #32]
 80122f2:	4651      	mov	r1, sl
 80122f4:	b303      	cbz	r3, 8012338 <_strtod_l+0x8c0>
 80122f6:	4b9d      	ldr	r3, [pc, #628]	@ (801256c <_strtod_l+0xaf4>)
 80122f8:	465a      	mov	r2, fp
 80122fa:	4013      	ands	r3, r2
 80122fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012300:	f04f 32ff 	mov.w	r2, #4294967295
 8012304:	d81b      	bhi.n	801233e <_strtod_l+0x8c6>
 8012306:	0d1b      	lsrs	r3, r3, #20
 8012308:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801230c:	fa02 f303 	lsl.w	r3, r2, r3
 8012310:	4299      	cmp	r1, r3
 8012312:	d119      	bne.n	8012348 <_strtod_l+0x8d0>
 8012314:	4b96      	ldr	r3, [pc, #600]	@ (8012570 <_strtod_l+0xaf8>)
 8012316:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012318:	429a      	cmp	r2, r3
 801231a:	d102      	bne.n	8012322 <_strtod_l+0x8aa>
 801231c:	3101      	adds	r1, #1
 801231e:	f43f adca 	beq.w	8011eb6 <_strtod_l+0x43e>
 8012322:	4b92      	ldr	r3, [pc, #584]	@ (801256c <_strtod_l+0xaf4>)
 8012324:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012326:	401a      	ands	r2, r3
 8012328:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801232c:	f04f 0a00 	mov.w	sl, #0
 8012330:	9b08      	ldr	r3, [sp, #32]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d1b8      	bne.n	80122a8 <_strtod_l+0x830>
 8012336:	e5c9      	b.n	8011ecc <_strtod_l+0x454>
 8012338:	f04f 33ff 	mov.w	r3, #4294967295
 801233c:	e7e8      	b.n	8012310 <_strtod_l+0x898>
 801233e:	4613      	mov	r3, r2
 8012340:	e7e6      	b.n	8012310 <_strtod_l+0x898>
 8012342:	ea53 030a 	orrs.w	r3, r3, sl
 8012346:	d0a1      	beq.n	801228c <_strtod_l+0x814>
 8012348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801234a:	b1db      	cbz	r3, 8012384 <_strtod_l+0x90c>
 801234c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801234e:	4213      	tst	r3, r2
 8012350:	d0ee      	beq.n	8012330 <_strtod_l+0x8b8>
 8012352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012354:	9a08      	ldr	r2, [sp, #32]
 8012356:	4650      	mov	r0, sl
 8012358:	4659      	mov	r1, fp
 801235a:	b1bb      	cbz	r3, 801238c <_strtod_l+0x914>
 801235c:	f7ff fb6e 	bl	8011a3c <sulp>
 8012360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012364:	ec53 2b10 	vmov	r2, r3, d0
 8012368:	f7ed ffa0 	bl	80002ac <__adddf3>
 801236c:	4682      	mov	sl, r0
 801236e:	468b      	mov	fp, r1
 8012370:	e7de      	b.n	8012330 <_strtod_l+0x8b8>
 8012372:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8012376:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801237a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801237e:	f04f 3aff 	mov.w	sl, #4294967295
 8012382:	e7d5      	b.n	8012330 <_strtod_l+0x8b8>
 8012384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012386:	ea13 0f0a 	tst.w	r3, sl
 801238a:	e7e1      	b.n	8012350 <_strtod_l+0x8d8>
 801238c:	f7ff fb56 	bl	8011a3c <sulp>
 8012390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012394:	ec53 2b10 	vmov	r2, r3, d0
 8012398:	f7ed ff86 	bl	80002a8 <__aeabi_dsub>
 801239c:	2200      	movs	r2, #0
 801239e:	2300      	movs	r3, #0
 80123a0:	4682      	mov	sl, r0
 80123a2:	468b      	mov	fp, r1
 80123a4:	f7ee fba0 	bl	8000ae8 <__aeabi_dcmpeq>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d0c1      	beq.n	8012330 <_strtod_l+0x8b8>
 80123ac:	e619      	b.n	8011fe2 <_strtod_l+0x56a>
 80123ae:	4641      	mov	r1, r8
 80123b0:	4620      	mov	r0, r4
 80123b2:	f003 f905 	bl	80155c0 <__ratio>
 80123b6:	ec57 6b10 	vmov	r6, r7, d0
 80123ba:	2200      	movs	r2, #0
 80123bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80123c0:	4630      	mov	r0, r6
 80123c2:	4639      	mov	r1, r7
 80123c4:	f7ee fba4 	bl	8000b10 <__aeabi_dcmple>
 80123c8:	2800      	cmp	r0, #0
 80123ca:	d06f      	beq.n	80124ac <_strtod_l+0xa34>
 80123cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d17a      	bne.n	80124c8 <_strtod_l+0xa50>
 80123d2:	f1ba 0f00 	cmp.w	sl, #0
 80123d6:	d158      	bne.n	801248a <_strtod_l+0xa12>
 80123d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d15a      	bne.n	8012498 <_strtod_l+0xa20>
 80123e2:	4b64      	ldr	r3, [pc, #400]	@ (8012574 <_strtod_l+0xafc>)
 80123e4:	2200      	movs	r2, #0
 80123e6:	4630      	mov	r0, r6
 80123e8:	4639      	mov	r1, r7
 80123ea:	f7ee fb87 	bl	8000afc <__aeabi_dcmplt>
 80123ee:	2800      	cmp	r0, #0
 80123f0:	d159      	bne.n	80124a6 <_strtod_l+0xa2e>
 80123f2:	4630      	mov	r0, r6
 80123f4:	4639      	mov	r1, r7
 80123f6:	4b60      	ldr	r3, [pc, #384]	@ (8012578 <_strtod_l+0xb00>)
 80123f8:	2200      	movs	r2, #0
 80123fa:	f7ee f90d 	bl	8000618 <__aeabi_dmul>
 80123fe:	4606      	mov	r6, r0
 8012400:	460f      	mov	r7, r1
 8012402:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012406:	9606      	str	r6, [sp, #24]
 8012408:	9307      	str	r3, [sp, #28]
 801240a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801240e:	4d57      	ldr	r5, [pc, #348]	@ (801256c <_strtod_l+0xaf4>)
 8012410:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012414:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012416:	401d      	ands	r5, r3
 8012418:	4b58      	ldr	r3, [pc, #352]	@ (801257c <_strtod_l+0xb04>)
 801241a:	429d      	cmp	r5, r3
 801241c:	f040 80b2 	bne.w	8012584 <_strtod_l+0xb0c>
 8012420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012422:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012426:	ec4b ab10 	vmov	d0, sl, fp
 801242a:	f003 f801 	bl	8015430 <__ulp>
 801242e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012432:	ec51 0b10 	vmov	r0, r1, d0
 8012436:	f7ee f8ef 	bl	8000618 <__aeabi_dmul>
 801243a:	4652      	mov	r2, sl
 801243c:	465b      	mov	r3, fp
 801243e:	f7ed ff35 	bl	80002ac <__adddf3>
 8012442:	460b      	mov	r3, r1
 8012444:	4949      	ldr	r1, [pc, #292]	@ (801256c <_strtod_l+0xaf4>)
 8012446:	4a4e      	ldr	r2, [pc, #312]	@ (8012580 <_strtod_l+0xb08>)
 8012448:	4019      	ands	r1, r3
 801244a:	4291      	cmp	r1, r2
 801244c:	4682      	mov	sl, r0
 801244e:	d942      	bls.n	80124d6 <_strtod_l+0xa5e>
 8012450:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012452:	4b47      	ldr	r3, [pc, #284]	@ (8012570 <_strtod_l+0xaf8>)
 8012454:	429a      	cmp	r2, r3
 8012456:	d103      	bne.n	8012460 <_strtod_l+0x9e8>
 8012458:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801245a:	3301      	adds	r3, #1
 801245c:	f43f ad2b 	beq.w	8011eb6 <_strtod_l+0x43e>
 8012460:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8012570 <_strtod_l+0xaf8>
 8012464:	f04f 3aff 	mov.w	sl, #4294967295
 8012468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801246a:	9805      	ldr	r0, [sp, #20]
 801246c:	f002 fcac 	bl	8014dc8 <_Bfree>
 8012470:	9805      	ldr	r0, [sp, #20]
 8012472:	4649      	mov	r1, r9
 8012474:	f002 fca8 	bl	8014dc8 <_Bfree>
 8012478:	9805      	ldr	r0, [sp, #20]
 801247a:	4641      	mov	r1, r8
 801247c:	f002 fca4 	bl	8014dc8 <_Bfree>
 8012480:	9805      	ldr	r0, [sp, #20]
 8012482:	4621      	mov	r1, r4
 8012484:	f002 fca0 	bl	8014dc8 <_Bfree>
 8012488:	e618      	b.n	80120bc <_strtod_l+0x644>
 801248a:	f1ba 0f01 	cmp.w	sl, #1
 801248e:	d103      	bne.n	8012498 <_strtod_l+0xa20>
 8012490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012492:	2b00      	cmp	r3, #0
 8012494:	f43f ada5 	beq.w	8011fe2 <_strtod_l+0x56a>
 8012498:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8012548 <_strtod_l+0xad0>
 801249c:	4f35      	ldr	r7, [pc, #212]	@ (8012574 <_strtod_l+0xafc>)
 801249e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80124a2:	2600      	movs	r6, #0
 80124a4:	e7b1      	b.n	801240a <_strtod_l+0x992>
 80124a6:	4f34      	ldr	r7, [pc, #208]	@ (8012578 <_strtod_l+0xb00>)
 80124a8:	2600      	movs	r6, #0
 80124aa:	e7aa      	b.n	8012402 <_strtod_l+0x98a>
 80124ac:	4b32      	ldr	r3, [pc, #200]	@ (8012578 <_strtod_l+0xb00>)
 80124ae:	4630      	mov	r0, r6
 80124b0:	4639      	mov	r1, r7
 80124b2:	2200      	movs	r2, #0
 80124b4:	f7ee f8b0 	bl	8000618 <__aeabi_dmul>
 80124b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124ba:	4606      	mov	r6, r0
 80124bc:	460f      	mov	r7, r1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d09f      	beq.n	8012402 <_strtod_l+0x98a>
 80124c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80124c6:	e7a0      	b.n	801240a <_strtod_l+0x992>
 80124c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8012550 <_strtod_l+0xad8>
 80124cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80124d0:	ec57 6b17 	vmov	r6, r7, d7
 80124d4:	e799      	b.n	801240a <_strtod_l+0x992>
 80124d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80124da:	9b08      	ldr	r3, [sp, #32]
 80124dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d1c1      	bne.n	8012468 <_strtod_l+0x9f0>
 80124e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80124e8:	0d1b      	lsrs	r3, r3, #20
 80124ea:	051b      	lsls	r3, r3, #20
 80124ec:	429d      	cmp	r5, r3
 80124ee:	d1bb      	bne.n	8012468 <_strtod_l+0x9f0>
 80124f0:	4630      	mov	r0, r6
 80124f2:	4639      	mov	r1, r7
 80124f4:	f7ee fbf0 	bl	8000cd8 <__aeabi_d2lz>
 80124f8:	f7ee f860 	bl	80005bc <__aeabi_l2d>
 80124fc:	4602      	mov	r2, r0
 80124fe:	460b      	mov	r3, r1
 8012500:	4630      	mov	r0, r6
 8012502:	4639      	mov	r1, r7
 8012504:	f7ed fed0 	bl	80002a8 <__aeabi_dsub>
 8012508:	460b      	mov	r3, r1
 801250a:	4602      	mov	r2, r0
 801250c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012510:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012516:	ea46 060a 	orr.w	r6, r6, sl
 801251a:	431e      	orrs	r6, r3
 801251c:	d06f      	beq.n	80125fe <_strtod_l+0xb86>
 801251e:	a30e      	add	r3, pc, #56	@ (adr r3, 8012558 <_strtod_l+0xae0>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	f7ee faea 	bl	8000afc <__aeabi_dcmplt>
 8012528:	2800      	cmp	r0, #0
 801252a:	f47f accf 	bne.w	8011ecc <_strtod_l+0x454>
 801252e:	a30c      	add	r3, pc, #48	@ (adr r3, 8012560 <_strtod_l+0xae8>)
 8012530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012538:	f7ee fafe 	bl	8000b38 <__aeabi_dcmpgt>
 801253c:	2800      	cmp	r0, #0
 801253e:	d093      	beq.n	8012468 <_strtod_l+0x9f0>
 8012540:	e4c4      	b.n	8011ecc <_strtod_l+0x454>
 8012542:	bf00      	nop
 8012544:	f3af 8000 	nop.w
 8012548:	00000000 	.word	0x00000000
 801254c:	bff00000 	.word	0xbff00000
 8012550:	00000000 	.word	0x00000000
 8012554:	3ff00000 	.word	0x3ff00000
 8012558:	94a03595 	.word	0x94a03595
 801255c:	3fdfffff 	.word	0x3fdfffff
 8012560:	35afe535 	.word	0x35afe535
 8012564:	3fe00000 	.word	0x3fe00000
 8012568:	000fffff 	.word	0x000fffff
 801256c:	7ff00000 	.word	0x7ff00000
 8012570:	7fefffff 	.word	0x7fefffff
 8012574:	3ff00000 	.word	0x3ff00000
 8012578:	3fe00000 	.word	0x3fe00000
 801257c:	7fe00000 	.word	0x7fe00000
 8012580:	7c9fffff 	.word	0x7c9fffff
 8012584:	9b08      	ldr	r3, [sp, #32]
 8012586:	b323      	cbz	r3, 80125d2 <_strtod_l+0xb5a>
 8012588:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801258c:	d821      	bhi.n	80125d2 <_strtod_l+0xb5a>
 801258e:	a328      	add	r3, pc, #160	@ (adr r3, 8012630 <_strtod_l+0xbb8>)
 8012590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012594:	4630      	mov	r0, r6
 8012596:	4639      	mov	r1, r7
 8012598:	f7ee faba 	bl	8000b10 <__aeabi_dcmple>
 801259c:	b1a0      	cbz	r0, 80125c8 <_strtod_l+0xb50>
 801259e:	4639      	mov	r1, r7
 80125a0:	4630      	mov	r0, r6
 80125a2:	f7ee fb11 	bl	8000bc8 <__aeabi_d2uiz>
 80125a6:	2801      	cmp	r0, #1
 80125a8:	bf38      	it	cc
 80125aa:	2001      	movcc	r0, #1
 80125ac:	f7ed ffba 	bl	8000524 <__aeabi_ui2d>
 80125b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125b2:	4606      	mov	r6, r0
 80125b4:	460f      	mov	r7, r1
 80125b6:	b9fb      	cbnz	r3, 80125f8 <_strtod_l+0xb80>
 80125b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80125bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80125be:	9315      	str	r3, [sp, #84]	@ 0x54
 80125c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80125c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80125c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80125ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80125ce:	1b5b      	subs	r3, r3, r5
 80125d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80125d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80125d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80125da:	f002 ff29 	bl	8015430 <__ulp>
 80125de:	4650      	mov	r0, sl
 80125e0:	ec53 2b10 	vmov	r2, r3, d0
 80125e4:	4659      	mov	r1, fp
 80125e6:	f7ee f817 	bl	8000618 <__aeabi_dmul>
 80125ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80125ee:	f7ed fe5d 	bl	80002ac <__adddf3>
 80125f2:	4682      	mov	sl, r0
 80125f4:	468b      	mov	fp, r1
 80125f6:	e770      	b.n	80124da <_strtod_l+0xa62>
 80125f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80125fc:	e7e0      	b.n	80125c0 <_strtod_l+0xb48>
 80125fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8012638 <_strtod_l+0xbc0>)
 8012600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012604:	f7ee fa7a 	bl	8000afc <__aeabi_dcmplt>
 8012608:	e798      	b.n	801253c <_strtod_l+0xac4>
 801260a:	2300      	movs	r3, #0
 801260c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801260e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012610:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012612:	6013      	str	r3, [r2, #0]
 8012614:	f7ff ba6d 	b.w	8011af2 <_strtod_l+0x7a>
 8012618:	2a65      	cmp	r2, #101	@ 0x65
 801261a:	f43f ab66 	beq.w	8011cea <_strtod_l+0x272>
 801261e:	2a45      	cmp	r2, #69	@ 0x45
 8012620:	f43f ab63 	beq.w	8011cea <_strtod_l+0x272>
 8012624:	2301      	movs	r3, #1
 8012626:	f7ff bb9e 	b.w	8011d66 <_strtod_l+0x2ee>
 801262a:	bf00      	nop
 801262c:	f3af 8000 	nop.w
 8012630:	ffc00000 	.word	0xffc00000
 8012634:	41dfffff 	.word	0x41dfffff
 8012638:	94a03595 	.word	0x94a03595
 801263c:	3fcfffff 	.word	0x3fcfffff

08012640 <_strtod_r>:
 8012640:	4b01      	ldr	r3, [pc, #4]	@ (8012648 <_strtod_r+0x8>)
 8012642:	f7ff ba19 	b.w	8011a78 <_strtod_l>
 8012646:	bf00      	nop
 8012648:	20000174 	.word	0x20000174

0801264c <strtod>:
 801264c:	460a      	mov	r2, r1
 801264e:	4601      	mov	r1, r0
 8012650:	4802      	ldr	r0, [pc, #8]	@ (801265c <strtod+0x10>)
 8012652:	4b03      	ldr	r3, [pc, #12]	@ (8012660 <strtod+0x14>)
 8012654:	6800      	ldr	r0, [r0, #0]
 8012656:	f7ff ba0f 	b.w	8011a78 <_strtod_l>
 801265a:	bf00      	nop
 801265c:	200002e0 	.word	0x200002e0
 8012660:	20000174 	.word	0x20000174

08012664 <__cvt>:
 8012664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012668:	ec57 6b10 	vmov	r6, r7, d0
 801266c:	2f00      	cmp	r7, #0
 801266e:	460c      	mov	r4, r1
 8012670:	4619      	mov	r1, r3
 8012672:	463b      	mov	r3, r7
 8012674:	bfbb      	ittet	lt
 8012676:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801267a:	461f      	movlt	r7, r3
 801267c:	2300      	movge	r3, #0
 801267e:	232d      	movlt	r3, #45	@ 0x2d
 8012680:	700b      	strb	r3, [r1, #0]
 8012682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012684:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012688:	4691      	mov	r9, r2
 801268a:	f023 0820 	bic.w	r8, r3, #32
 801268e:	bfbc      	itt	lt
 8012690:	4632      	movlt	r2, r6
 8012692:	4616      	movlt	r6, r2
 8012694:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012698:	d005      	beq.n	80126a6 <__cvt+0x42>
 801269a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801269e:	d100      	bne.n	80126a2 <__cvt+0x3e>
 80126a0:	3401      	adds	r4, #1
 80126a2:	2102      	movs	r1, #2
 80126a4:	e000      	b.n	80126a8 <__cvt+0x44>
 80126a6:	2103      	movs	r1, #3
 80126a8:	ab03      	add	r3, sp, #12
 80126aa:	9301      	str	r3, [sp, #4]
 80126ac:	ab02      	add	r3, sp, #8
 80126ae:	9300      	str	r3, [sp, #0]
 80126b0:	ec47 6b10 	vmov	d0, r6, r7
 80126b4:	4653      	mov	r3, sl
 80126b6:	4622      	mov	r2, r4
 80126b8:	f001 f936 	bl	8013928 <_dtoa_r>
 80126bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80126c0:	4605      	mov	r5, r0
 80126c2:	d119      	bne.n	80126f8 <__cvt+0x94>
 80126c4:	f019 0f01 	tst.w	r9, #1
 80126c8:	d00e      	beq.n	80126e8 <__cvt+0x84>
 80126ca:	eb00 0904 	add.w	r9, r0, r4
 80126ce:	2200      	movs	r2, #0
 80126d0:	2300      	movs	r3, #0
 80126d2:	4630      	mov	r0, r6
 80126d4:	4639      	mov	r1, r7
 80126d6:	f7ee fa07 	bl	8000ae8 <__aeabi_dcmpeq>
 80126da:	b108      	cbz	r0, 80126e0 <__cvt+0x7c>
 80126dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80126e0:	2230      	movs	r2, #48	@ 0x30
 80126e2:	9b03      	ldr	r3, [sp, #12]
 80126e4:	454b      	cmp	r3, r9
 80126e6:	d31e      	bcc.n	8012726 <__cvt+0xc2>
 80126e8:	9b03      	ldr	r3, [sp, #12]
 80126ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80126ec:	1b5b      	subs	r3, r3, r5
 80126ee:	4628      	mov	r0, r5
 80126f0:	6013      	str	r3, [r2, #0]
 80126f2:	b004      	add	sp, #16
 80126f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80126fc:	eb00 0904 	add.w	r9, r0, r4
 8012700:	d1e5      	bne.n	80126ce <__cvt+0x6a>
 8012702:	7803      	ldrb	r3, [r0, #0]
 8012704:	2b30      	cmp	r3, #48	@ 0x30
 8012706:	d10a      	bne.n	801271e <__cvt+0xba>
 8012708:	2200      	movs	r2, #0
 801270a:	2300      	movs	r3, #0
 801270c:	4630      	mov	r0, r6
 801270e:	4639      	mov	r1, r7
 8012710:	f7ee f9ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8012714:	b918      	cbnz	r0, 801271e <__cvt+0xba>
 8012716:	f1c4 0401 	rsb	r4, r4, #1
 801271a:	f8ca 4000 	str.w	r4, [sl]
 801271e:	f8da 3000 	ldr.w	r3, [sl]
 8012722:	4499      	add	r9, r3
 8012724:	e7d3      	b.n	80126ce <__cvt+0x6a>
 8012726:	1c59      	adds	r1, r3, #1
 8012728:	9103      	str	r1, [sp, #12]
 801272a:	701a      	strb	r2, [r3, #0]
 801272c:	e7d9      	b.n	80126e2 <__cvt+0x7e>

0801272e <__exponent>:
 801272e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012730:	2900      	cmp	r1, #0
 8012732:	bfba      	itte	lt
 8012734:	4249      	neglt	r1, r1
 8012736:	232d      	movlt	r3, #45	@ 0x2d
 8012738:	232b      	movge	r3, #43	@ 0x2b
 801273a:	2909      	cmp	r1, #9
 801273c:	7002      	strb	r2, [r0, #0]
 801273e:	7043      	strb	r3, [r0, #1]
 8012740:	dd29      	ble.n	8012796 <__exponent+0x68>
 8012742:	f10d 0307 	add.w	r3, sp, #7
 8012746:	461d      	mov	r5, r3
 8012748:	270a      	movs	r7, #10
 801274a:	461a      	mov	r2, r3
 801274c:	fbb1 f6f7 	udiv	r6, r1, r7
 8012750:	fb07 1416 	mls	r4, r7, r6, r1
 8012754:	3430      	adds	r4, #48	@ 0x30
 8012756:	f802 4c01 	strb.w	r4, [r2, #-1]
 801275a:	460c      	mov	r4, r1
 801275c:	2c63      	cmp	r4, #99	@ 0x63
 801275e:	f103 33ff 	add.w	r3, r3, #4294967295
 8012762:	4631      	mov	r1, r6
 8012764:	dcf1      	bgt.n	801274a <__exponent+0x1c>
 8012766:	3130      	adds	r1, #48	@ 0x30
 8012768:	1e94      	subs	r4, r2, #2
 801276a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801276e:	1c41      	adds	r1, r0, #1
 8012770:	4623      	mov	r3, r4
 8012772:	42ab      	cmp	r3, r5
 8012774:	d30a      	bcc.n	801278c <__exponent+0x5e>
 8012776:	f10d 0309 	add.w	r3, sp, #9
 801277a:	1a9b      	subs	r3, r3, r2
 801277c:	42ac      	cmp	r4, r5
 801277e:	bf88      	it	hi
 8012780:	2300      	movhi	r3, #0
 8012782:	3302      	adds	r3, #2
 8012784:	4403      	add	r3, r0
 8012786:	1a18      	subs	r0, r3, r0
 8012788:	b003      	add	sp, #12
 801278a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801278c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012790:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012794:	e7ed      	b.n	8012772 <__exponent+0x44>
 8012796:	2330      	movs	r3, #48	@ 0x30
 8012798:	3130      	adds	r1, #48	@ 0x30
 801279a:	7083      	strb	r3, [r0, #2]
 801279c:	70c1      	strb	r1, [r0, #3]
 801279e:	1d03      	adds	r3, r0, #4
 80127a0:	e7f1      	b.n	8012786 <__exponent+0x58>
	...

080127a4 <_printf_float>:
 80127a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a8:	b08d      	sub	sp, #52	@ 0x34
 80127aa:	460c      	mov	r4, r1
 80127ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80127b0:	4616      	mov	r6, r2
 80127b2:	461f      	mov	r7, r3
 80127b4:	4605      	mov	r5, r0
 80127b6:	f000 ff8f 	bl	80136d8 <_localeconv_r>
 80127ba:	6803      	ldr	r3, [r0, #0]
 80127bc:	9304      	str	r3, [sp, #16]
 80127be:	4618      	mov	r0, r3
 80127c0:	f7ed fd66 	bl	8000290 <strlen>
 80127c4:	2300      	movs	r3, #0
 80127c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80127c8:	f8d8 3000 	ldr.w	r3, [r8]
 80127cc:	9005      	str	r0, [sp, #20]
 80127ce:	3307      	adds	r3, #7
 80127d0:	f023 0307 	bic.w	r3, r3, #7
 80127d4:	f103 0208 	add.w	r2, r3, #8
 80127d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80127dc:	f8d4 b000 	ldr.w	fp, [r4]
 80127e0:	f8c8 2000 	str.w	r2, [r8]
 80127e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80127e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80127ec:	9307      	str	r3, [sp, #28]
 80127ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80127f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80127f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127fa:	4b9c      	ldr	r3, [pc, #624]	@ (8012a6c <_printf_float+0x2c8>)
 80127fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012800:	f7ee f9a4 	bl	8000b4c <__aeabi_dcmpun>
 8012804:	bb70      	cbnz	r0, 8012864 <_printf_float+0xc0>
 8012806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801280a:	4b98      	ldr	r3, [pc, #608]	@ (8012a6c <_printf_float+0x2c8>)
 801280c:	f04f 32ff 	mov.w	r2, #4294967295
 8012810:	f7ee f97e 	bl	8000b10 <__aeabi_dcmple>
 8012814:	bb30      	cbnz	r0, 8012864 <_printf_float+0xc0>
 8012816:	2200      	movs	r2, #0
 8012818:	2300      	movs	r3, #0
 801281a:	4640      	mov	r0, r8
 801281c:	4649      	mov	r1, r9
 801281e:	f7ee f96d 	bl	8000afc <__aeabi_dcmplt>
 8012822:	b110      	cbz	r0, 801282a <_printf_float+0x86>
 8012824:	232d      	movs	r3, #45	@ 0x2d
 8012826:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801282a:	4a91      	ldr	r2, [pc, #580]	@ (8012a70 <_printf_float+0x2cc>)
 801282c:	4b91      	ldr	r3, [pc, #580]	@ (8012a74 <_printf_float+0x2d0>)
 801282e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012832:	bf94      	ite	ls
 8012834:	4690      	movls	r8, r2
 8012836:	4698      	movhi	r8, r3
 8012838:	2303      	movs	r3, #3
 801283a:	6123      	str	r3, [r4, #16]
 801283c:	f02b 0304 	bic.w	r3, fp, #4
 8012840:	6023      	str	r3, [r4, #0]
 8012842:	f04f 0900 	mov.w	r9, #0
 8012846:	9700      	str	r7, [sp, #0]
 8012848:	4633      	mov	r3, r6
 801284a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801284c:	4621      	mov	r1, r4
 801284e:	4628      	mov	r0, r5
 8012850:	f000 f9d2 	bl	8012bf8 <_printf_common>
 8012854:	3001      	adds	r0, #1
 8012856:	f040 808d 	bne.w	8012974 <_printf_float+0x1d0>
 801285a:	f04f 30ff 	mov.w	r0, #4294967295
 801285e:	b00d      	add	sp, #52	@ 0x34
 8012860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012864:	4642      	mov	r2, r8
 8012866:	464b      	mov	r3, r9
 8012868:	4640      	mov	r0, r8
 801286a:	4649      	mov	r1, r9
 801286c:	f7ee f96e 	bl	8000b4c <__aeabi_dcmpun>
 8012870:	b140      	cbz	r0, 8012884 <_printf_float+0xe0>
 8012872:	464b      	mov	r3, r9
 8012874:	2b00      	cmp	r3, #0
 8012876:	bfbc      	itt	lt
 8012878:	232d      	movlt	r3, #45	@ 0x2d
 801287a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801287e:	4a7e      	ldr	r2, [pc, #504]	@ (8012a78 <_printf_float+0x2d4>)
 8012880:	4b7e      	ldr	r3, [pc, #504]	@ (8012a7c <_printf_float+0x2d8>)
 8012882:	e7d4      	b.n	801282e <_printf_float+0x8a>
 8012884:	6863      	ldr	r3, [r4, #4]
 8012886:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801288a:	9206      	str	r2, [sp, #24]
 801288c:	1c5a      	adds	r2, r3, #1
 801288e:	d13b      	bne.n	8012908 <_printf_float+0x164>
 8012890:	2306      	movs	r3, #6
 8012892:	6063      	str	r3, [r4, #4]
 8012894:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012898:	2300      	movs	r3, #0
 801289a:	6022      	str	r2, [r4, #0]
 801289c:	9303      	str	r3, [sp, #12]
 801289e:	ab0a      	add	r3, sp, #40	@ 0x28
 80128a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80128a4:	ab09      	add	r3, sp, #36	@ 0x24
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	6861      	ldr	r1, [r4, #4]
 80128aa:	ec49 8b10 	vmov	d0, r8, r9
 80128ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80128b2:	4628      	mov	r0, r5
 80128b4:	f7ff fed6 	bl	8012664 <__cvt>
 80128b8:	9b06      	ldr	r3, [sp, #24]
 80128ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80128bc:	2b47      	cmp	r3, #71	@ 0x47
 80128be:	4680      	mov	r8, r0
 80128c0:	d129      	bne.n	8012916 <_printf_float+0x172>
 80128c2:	1cc8      	adds	r0, r1, #3
 80128c4:	db02      	blt.n	80128cc <_printf_float+0x128>
 80128c6:	6863      	ldr	r3, [r4, #4]
 80128c8:	4299      	cmp	r1, r3
 80128ca:	dd41      	ble.n	8012950 <_printf_float+0x1ac>
 80128cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80128d0:	fa5f fa8a 	uxtb.w	sl, sl
 80128d4:	3901      	subs	r1, #1
 80128d6:	4652      	mov	r2, sl
 80128d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80128dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80128de:	f7ff ff26 	bl	801272e <__exponent>
 80128e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128e4:	1813      	adds	r3, r2, r0
 80128e6:	2a01      	cmp	r2, #1
 80128e8:	4681      	mov	r9, r0
 80128ea:	6123      	str	r3, [r4, #16]
 80128ec:	dc02      	bgt.n	80128f4 <_printf_float+0x150>
 80128ee:	6822      	ldr	r2, [r4, #0]
 80128f0:	07d2      	lsls	r2, r2, #31
 80128f2:	d501      	bpl.n	80128f8 <_printf_float+0x154>
 80128f4:	3301      	adds	r3, #1
 80128f6:	6123      	str	r3, [r4, #16]
 80128f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d0a2      	beq.n	8012846 <_printf_float+0xa2>
 8012900:	232d      	movs	r3, #45	@ 0x2d
 8012902:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012906:	e79e      	b.n	8012846 <_printf_float+0xa2>
 8012908:	9a06      	ldr	r2, [sp, #24]
 801290a:	2a47      	cmp	r2, #71	@ 0x47
 801290c:	d1c2      	bne.n	8012894 <_printf_float+0xf0>
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1c0      	bne.n	8012894 <_printf_float+0xf0>
 8012912:	2301      	movs	r3, #1
 8012914:	e7bd      	b.n	8012892 <_printf_float+0xee>
 8012916:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801291a:	d9db      	bls.n	80128d4 <_printf_float+0x130>
 801291c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012920:	d118      	bne.n	8012954 <_printf_float+0x1b0>
 8012922:	2900      	cmp	r1, #0
 8012924:	6863      	ldr	r3, [r4, #4]
 8012926:	dd0b      	ble.n	8012940 <_printf_float+0x19c>
 8012928:	6121      	str	r1, [r4, #16]
 801292a:	b913      	cbnz	r3, 8012932 <_printf_float+0x18e>
 801292c:	6822      	ldr	r2, [r4, #0]
 801292e:	07d0      	lsls	r0, r2, #31
 8012930:	d502      	bpl.n	8012938 <_printf_float+0x194>
 8012932:	3301      	adds	r3, #1
 8012934:	440b      	add	r3, r1
 8012936:	6123      	str	r3, [r4, #16]
 8012938:	65a1      	str	r1, [r4, #88]	@ 0x58
 801293a:	f04f 0900 	mov.w	r9, #0
 801293e:	e7db      	b.n	80128f8 <_printf_float+0x154>
 8012940:	b913      	cbnz	r3, 8012948 <_printf_float+0x1a4>
 8012942:	6822      	ldr	r2, [r4, #0]
 8012944:	07d2      	lsls	r2, r2, #31
 8012946:	d501      	bpl.n	801294c <_printf_float+0x1a8>
 8012948:	3302      	adds	r3, #2
 801294a:	e7f4      	b.n	8012936 <_printf_float+0x192>
 801294c:	2301      	movs	r3, #1
 801294e:	e7f2      	b.n	8012936 <_printf_float+0x192>
 8012950:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012956:	4299      	cmp	r1, r3
 8012958:	db05      	blt.n	8012966 <_printf_float+0x1c2>
 801295a:	6823      	ldr	r3, [r4, #0]
 801295c:	6121      	str	r1, [r4, #16]
 801295e:	07d8      	lsls	r0, r3, #31
 8012960:	d5ea      	bpl.n	8012938 <_printf_float+0x194>
 8012962:	1c4b      	adds	r3, r1, #1
 8012964:	e7e7      	b.n	8012936 <_printf_float+0x192>
 8012966:	2900      	cmp	r1, #0
 8012968:	bfd4      	ite	le
 801296a:	f1c1 0202 	rsble	r2, r1, #2
 801296e:	2201      	movgt	r2, #1
 8012970:	4413      	add	r3, r2
 8012972:	e7e0      	b.n	8012936 <_printf_float+0x192>
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	055a      	lsls	r2, r3, #21
 8012978:	d407      	bmi.n	801298a <_printf_float+0x1e6>
 801297a:	6923      	ldr	r3, [r4, #16]
 801297c:	4642      	mov	r2, r8
 801297e:	4631      	mov	r1, r6
 8012980:	4628      	mov	r0, r5
 8012982:	47b8      	blx	r7
 8012984:	3001      	adds	r0, #1
 8012986:	d12b      	bne.n	80129e0 <_printf_float+0x23c>
 8012988:	e767      	b.n	801285a <_printf_float+0xb6>
 801298a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801298e:	f240 80dd 	bls.w	8012b4c <_printf_float+0x3a8>
 8012992:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012996:	2200      	movs	r2, #0
 8012998:	2300      	movs	r3, #0
 801299a:	f7ee f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 801299e:	2800      	cmp	r0, #0
 80129a0:	d033      	beq.n	8012a0a <_printf_float+0x266>
 80129a2:	4a37      	ldr	r2, [pc, #220]	@ (8012a80 <_printf_float+0x2dc>)
 80129a4:	2301      	movs	r3, #1
 80129a6:	4631      	mov	r1, r6
 80129a8:	4628      	mov	r0, r5
 80129aa:	47b8      	blx	r7
 80129ac:	3001      	adds	r0, #1
 80129ae:	f43f af54 	beq.w	801285a <_printf_float+0xb6>
 80129b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80129b6:	4543      	cmp	r3, r8
 80129b8:	db02      	blt.n	80129c0 <_printf_float+0x21c>
 80129ba:	6823      	ldr	r3, [r4, #0]
 80129bc:	07d8      	lsls	r0, r3, #31
 80129be:	d50f      	bpl.n	80129e0 <_printf_float+0x23c>
 80129c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80129c4:	4631      	mov	r1, r6
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	f43f af45 	beq.w	801285a <_printf_float+0xb6>
 80129d0:	f04f 0900 	mov.w	r9, #0
 80129d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80129d8:	f104 0a1a 	add.w	sl, r4, #26
 80129dc:	45c8      	cmp	r8, r9
 80129de:	dc09      	bgt.n	80129f4 <_printf_float+0x250>
 80129e0:	6823      	ldr	r3, [r4, #0]
 80129e2:	079b      	lsls	r3, r3, #30
 80129e4:	f100 8103 	bmi.w	8012bee <_printf_float+0x44a>
 80129e8:	68e0      	ldr	r0, [r4, #12]
 80129ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129ec:	4298      	cmp	r0, r3
 80129ee:	bfb8      	it	lt
 80129f0:	4618      	movlt	r0, r3
 80129f2:	e734      	b.n	801285e <_printf_float+0xba>
 80129f4:	2301      	movs	r3, #1
 80129f6:	4652      	mov	r2, sl
 80129f8:	4631      	mov	r1, r6
 80129fa:	4628      	mov	r0, r5
 80129fc:	47b8      	blx	r7
 80129fe:	3001      	adds	r0, #1
 8012a00:	f43f af2b 	beq.w	801285a <_printf_float+0xb6>
 8012a04:	f109 0901 	add.w	r9, r9, #1
 8012a08:	e7e8      	b.n	80129dc <_printf_float+0x238>
 8012a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	dc39      	bgt.n	8012a84 <_printf_float+0x2e0>
 8012a10:	4a1b      	ldr	r2, [pc, #108]	@ (8012a80 <_printf_float+0x2dc>)
 8012a12:	2301      	movs	r3, #1
 8012a14:	4631      	mov	r1, r6
 8012a16:	4628      	mov	r0, r5
 8012a18:	47b8      	blx	r7
 8012a1a:	3001      	adds	r0, #1
 8012a1c:	f43f af1d 	beq.w	801285a <_printf_float+0xb6>
 8012a20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012a24:	ea59 0303 	orrs.w	r3, r9, r3
 8012a28:	d102      	bne.n	8012a30 <_printf_float+0x28c>
 8012a2a:	6823      	ldr	r3, [r4, #0]
 8012a2c:	07d9      	lsls	r1, r3, #31
 8012a2e:	d5d7      	bpl.n	80129e0 <_printf_float+0x23c>
 8012a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a34:	4631      	mov	r1, r6
 8012a36:	4628      	mov	r0, r5
 8012a38:	47b8      	blx	r7
 8012a3a:	3001      	adds	r0, #1
 8012a3c:	f43f af0d 	beq.w	801285a <_printf_float+0xb6>
 8012a40:	f04f 0a00 	mov.w	sl, #0
 8012a44:	f104 0b1a 	add.w	fp, r4, #26
 8012a48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a4a:	425b      	negs	r3, r3
 8012a4c:	4553      	cmp	r3, sl
 8012a4e:	dc01      	bgt.n	8012a54 <_printf_float+0x2b0>
 8012a50:	464b      	mov	r3, r9
 8012a52:	e793      	b.n	801297c <_printf_float+0x1d8>
 8012a54:	2301      	movs	r3, #1
 8012a56:	465a      	mov	r2, fp
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	47b8      	blx	r7
 8012a5e:	3001      	adds	r0, #1
 8012a60:	f43f aefb 	beq.w	801285a <_printf_float+0xb6>
 8012a64:	f10a 0a01 	add.w	sl, sl, #1
 8012a68:	e7ee      	b.n	8012a48 <_printf_float+0x2a4>
 8012a6a:	bf00      	nop
 8012a6c:	7fefffff 	.word	0x7fefffff
 8012a70:	08017830 	.word	0x08017830
 8012a74:	08017834 	.word	0x08017834
 8012a78:	08017838 	.word	0x08017838
 8012a7c:	0801783c 	.word	0x0801783c
 8012a80:	08017be0 	.word	0x08017be0
 8012a84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012a86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012a8a:	4553      	cmp	r3, sl
 8012a8c:	bfa8      	it	ge
 8012a8e:	4653      	movge	r3, sl
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	4699      	mov	r9, r3
 8012a94:	dc36      	bgt.n	8012b04 <_printf_float+0x360>
 8012a96:	f04f 0b00 	mov.w	fp, #0
 8012a9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012a9e:	f104 021a 	add.w	r2, r4, #26
 8012aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012aa4:	9306      	str	r3, [sp, #24]
 8012aa6:	eba3 0309 	sub.w	r3, r3, r9
 8012aaa:	455b      	cmp	r3, fp
 8012aac:	dc31      	bgt.n	8012b12 <_printf_float+0x36e>
 8012aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ab0:	459a      	cmp	sl, r3
 8012ab2:	dc3a      	bgt.n	8012b2a <_printf_float+0x386>
 8012ab4:	6823      	ldr	r3, [r4, #0]
 8012ab6:	07da      	lsls	r2, r3, #31
 8012ab8:	d437      	bmi.n	8012b2a <_printf_float+0x386>
 8012aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012abc:	ebaa 0903 	sub.w	r9, sl, r3
 8012ac0:	9b06      	ldr	r3, [sp, #24]
 8012ac2:	ebaa 0303 	sub.w	r3, sl, r3
 8012ac6:	4599      	cmp	r9, r3
 8012ac8:	bfa8      	it	ge
 8012aca:	4699      	movge	r9, r3
 8012acc:	f1b9 0f00 	cmp.w	r9, #0
 8012ad0:	dc33      	bgt.n	8012b3a <_printf_float+0x396>
 8012ad2:	f04f 0800 	mov.w	r8, #0
 8012ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ada:	f104 0b1a 	add.w	fp, r4, #26
 8012ade:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8012ae4:	eba3 0309 	sub.w	r3, r3, r9
 8012ae8:	4543      	cmp	r3, r8
 8012aea:	f77f af79 	ble.w	80129e0 <_printf_float+0x23c>
 8012aee:	2301      	movs	r3, #1
 8012af0:	465a      	mov	r2, fp
 8012af2:	4631      	mov	r1, r6
 8012af4:	4628      	mov	r0, r5
 8012af6:	47b8      	blx	r7
 8012af8:	3001      	adds	r0, #1
 8012afa:	f43f aeae 	beq.w	801285a <_printf_float+0xb6>
 8012afe:	f108 0801 	add.w	r8, r8, #1
 8012b02:	e7ec      	b.n	8012ade <_printf_float+0x33a>
 8012b04:	4642      	mov	r2, r8
 8012b06:	4631      	mov	r1, r6
 8012b08:	4628      	mov	r0, r5
 8012b0a:	47b8      	blx	r7
 8012b0c:	3001      	adds	r0, #1
 8012b0e:	d1c2      	bne.n	8012a96 <_printf_float+0x2f2>
 8012b10:	e6a3      	b.n	801285a <_printf_float+0xb6>
 8012b12:	2301      	movs	r3, #1
 8012b14:	4631      	mov	r1, r6
 8012b16:	4628      	mov	r0, r5
 8012b18:	9206      	str	r2, [sp, #24]
 8012b1a:	47b8      	blx	r7
 8012b1c:	3001      	adds	r0, #1
 8012b1e:	f43f ae9c 	beq.w	801285a <_printf_float+0xb6>
 8012b22:	9a06      	ldr	r2, [sp, #24]
 8012b24:	f10b 0b01 	add.w	fp, fp, #1
 8012b28:	e7bb      	b.n	8012aa2 <_printf_float+0x2fe>
 8012b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b2e:	4631      	mov	r1, r6
 8012b30:	4628      	mov	r0, r5
 8012b32:	47b8      	blx	r7
 8012b34:	3001      	adds	r0, #1
 8012b36:	d1c0      	bne.n	8012aba <_printf_float+0x316>
 8012b38:	e68f      	b.n	801285a <_printf_float+0xb6>
 8012b3a:	9a06      	ldr	r2, [sp, #24]
 8012b3c:	464b      	mov	r3, r9
 8012b3e:	4442      	add	r2, r8
 8012b40:	4631      	mov	r1, r6
 8012b42:	4628      	mov	r0, r5
 8012b44:	47b8      	blx	r7
 8012b46:	3001      	adds	r0, #1
 8012b48:	d1c3      	bne.n	8012ad2 <_printf_float+0x32e>
 8012b4a:	e686      	b.n	801285a <_printf_float+0xb6>
 8012b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012b50:	f1ba 0f01 	cmp.w	sl, #1
 8012b54:	dc01      	bgt.n	8012b5a <_printf_float+0x3b6>
 8012b56:	07db      	lsls	r3, r3, #31
 8012b58:	d536      	bpl.n	8012bc8 <_printf_float+0x424>
 8012b5a:	2301      	movs	r3, #1
 8012b5c:	4642      	mov	r2, r8
 8012b5e:	4631      	mov	r1, r6
 8012b60:	4628      	mov	r0, r5
 8012b62:	47b8      	blx	r7
 8012b64:	3001      	adds	r0, #1
 8012b66:	f43f ae78 	beq.w	801285a <_printf_float+0xb6>
 8012b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b6e:	4631      	mov	r1, r6
 8012b70:	4628      	mov	r0, r5
 8012b72:	47b8      	blx	r7
 8012b74:	3001      	adds	r0, #1
 8012b76:	f43f ae70 	beq.w	801285a <_printf_float+0xb6>
 8012b7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012b7e:	2200      	movs	r2, #0
 8012b80:	2300      	movs	r3, #0
 8012b82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b86:	f7ed ffaf 	bl	8000ae8 <__aeabi_dcmpeq>
 8012b8a:	b9c0      	cbnz	r0, 8012bbe <_printf_float+0x41a>
 8012b8c:	4653      	mov	r3, sl
 8012b8e:	f108 0201 	add.w	r2, r8, #1
 8012b92:	4631      	mov	r1, r6
 8012b94:	4628      	mov	r0, r5
 8012b96:	47b8      	blx	r7
 8012b98:	3001      	adds	r0, #1
 8012b9a:	d10c      	bne.n	8012bb6 <_printf_float+0x412>
 8012b9c:	e65d      	b.n	801285a <_printf_float+0xb6>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	465a      	mov	r2, fp
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	47b8      	blx	r7
 8012ba8:	3001      	adds	r0, #1
 8012baa:	f43f ae56 	beq.w	801285a <_printf_float+0xb6>
 8012bae:	f108 0801 	add.w	r8, r8, #1
 8012bb2:	45d0      	cmp	r8, sl
 8012bb4:	dbf3      	blt.n	8012b9e <_printf_float+0x3fa>
 8012bb6:	464b      	mov	r3, r9
 8012bb8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012bbc:	e6df      	b.n	801297e <_printf_float+0x1da>
 8012bbe:	f04f 0800 	mov.w	r8, #0
 8012bc2:	f104 0b1a 	add.w	fp, r4, #26
 8012bc6:	e7f4      	b.n	8012bb2 <_printf_float+0x40e>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	4642      	mov	r2, r8
 8012bcc:	e7e1      	b.n	8012b92 <_printf_float+0x3ee>
 8012bce:	2301      	movs	r3, #1
 8012bd0:	464a      	mov	r2, r9
 8012bd2:	4631      	mov	r1, r6
 8012bd4:	4628      	mov	r0, r5
 8012bd6:	47b8      	blx	r7
 8012bd8:	3001      	adds	r0, #1
 8012bda:	f43f ae3e 	beq.w	801285a <_printf_float+0xb6>
 8012bde:	f108 0801 	add.w	r8, r8, #1
 8012be2:	68e3      	ldr	r3, [r4, #12]
 8012be4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012be6:	1a5b      	subs	r3, r3, r1
 8012be8:	4543      	cmp	r3, r8
 8012bea:	dcf0      	bgt.n	8012bce <_printf_float+0x42a>
 8012bec:	e6fc      	b.n	80129e8 <_printf_float+0x244>
 8012bee:	f04f 0800 	mov.w	r8, #0
 8012bf2:	f104 0919 	add.w	r9, r4, #25
 8012bf6:	e7f4      	b.n	8012be2 <_printf_float+0x43e>

08012bf8 <_printf_common>:
 8012bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bfc:	4616      	mov	r6, r2
 8012bfe:	4698      	mov	r8, r3
 8012c00:	688a      	ldr	r2, [r1, #8]
 8012c02:	690b      	ldr	r3, [r1, #16]
 8012c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012c08:	4293      	cmp	r3, r2
 8012c0a:	bfb8      	it	lt
 8012c0c:	4613      	movlt	r3, r2
 8012c0e:	6033      	str	r3, [r6, #0]
 8012c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012c14:	4607      	mov	r7, r0
 8012c16:	460c      	mov	r4, r1
 8012c18:	b10a      	cbz	r2, 8012c1e <_printf_common+0x26>
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	6033      	str	r3, [r6, #0]
 8012c1e:	6823      	ldr	r3, [r4, #0]
 8012c20:	0699      	lsls	r1, r3, #26
 8012c22:	bf42      	ittt	mi
 8012c24:	6833      	ldrmi	r3, [r6, #0]
 8012c26:	3302      	addmi	r3, #2
 8012c28:	6033      	strmi	r3, [r6, #0]
 8012c2a:	6825      	ldr	r5, [r4, #0]
 8012c2c:	f015 0506 	ands.w	r5, r5, #6
 8012c30:	d106      	bne.n	8012c40 <_printf_common+0x48>
 8012c32:	f104 0a19 	add.w	sl, r4, #25
 8012c36:	68e3      	ldr	r3, [r4, #12]
 8012c38:	6832      	ldr	r2, [r6, #0]
 8012c3a:	1a9b      	subs	r3, r3, r2
 8012c3c:	42ab      	cmp	r3, r5
 8012c3e:	dc26      	bgt.n	8012c8e <_printf_common+0x96>
 8012c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012c44:	6822      	ldr	r2, [r4, #0]
 8012c46:	3b00      	subs	r3, #0
 8012c48:	bf18      	it	ne
 8012c4a:	2301      	movne	r3, #1
 8012c4c:	0692      	lsls	r2, r2, #26
 8012c4e:	d42b      	bmi.n	8012ca8 <_printf_common+0xb0>
 8012c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012c54:	4641      	mov	r1, r8
 8012c56:	4638      	mov	r0, r7
 8012c58:	47c8      	blx	r9
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	d01e      	beq.n	8012c9c <_printf_common+0xa4>
 8012c5e:	6823      	ldr	r3, [r4, #0]
 8012c60:	6922      	ldr	r2, [r4, #16]
 8012c62:	f003 0306 	and.w	r3, r3, #6
 8012c66:	2b04      	cmp	r3, #4
 8012c68:	bf02      	ittt	eq
 8012c6a:	68e5      	ldreq	r5, [r4, #12]
 8012c6c:	6833      	ldreq	r3, [r6, #0]
 8012c6e:	1aed      	subeq	r5, r5, r3
 8012c70:	68a3      	ldr	r3, [r4, #8]
 8012c72:	bf0c      	ite	eq
 8012c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c78:	2500      	movne	r5, #0
 8012c7a:	4293      	cmp	r3, r2
 8012c7c:	bfc4      	itt	gt
 8012c7e:	1a9b      	subgt	r3, r3, r2
 8012c80:	18ed      	addgt	r5, r5, r3
 8012c82:	2600      	movs	r6, #0
 8012c84:	341a      	adds	r4, #26
 8012c86:	42b5      	cmp	r5, r6
 8012c88:	d11a      	bne.n	8012cc0 <_printf_common+0xc8>
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	e008      	b.n	8012ca0 <_printf_common+0xa8>
 8012c8e:	2301      	movs	r3, #1
 8012c90:	4652      	mov	r2, sl
 8012c92:	4641      	mov	r1, r8
 8012c94:	4638      	mov	r0, r7
 8012c96:	47c8      	blx	r9
 8012c98:	3001      	adds	r0, #1
 8012c9a:	d103      	bne.n	8012ca4 <_printf_common+0xac>
 8012c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ca4:	3501      	adds	r5, #1
 8012ca6:	e7c6      	b.n	8012c36 <_printf_common+0x3e>
 8012ca8:	18e1      	adds	r1, r4, r3
 8012caa:	1c5a      	adds	r2, r3, #1
 8012cac:	2030      	movs	r0, #48	@ 0x30
 8012cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012cb2:	4422      	add	r2, r4
 8012cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012cbc:	3302      	adds	r3, #2
 8012cbe:	e7c7      	b.n	8012c50 <_printf_common+0x58>
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	4622      	mov	r2, r4
 8012cc4:	4641      	mov	r1, r8
 8012cc6:	4638      	mov	r0, r7
 8012cc8:	47c8      	blx	r9
 8012cca:	3001      	adds	r0, #1
 8012ccc:	d0e6      	beq.n	8012c9c <_printf_common+0xa4>
 8012cce:	3601      	adds	r6, #1
 8012cd0:	e7d9      	b.n	8012c86 <_printf_common+0x8e>
	...

08012cd4 <_printf_i>:
 8012cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd8:	7e0f      	ldrb	r7, [r1, #24]
 8012cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012cdc:	2f78      	cmp	r7, #120	@ 0x78
 8012cde:	4691      	mov	r9, r2
 8012ce0:	4680      	mov	r8, r0
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	469a      	mov	sl, r3
 8012ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012cea:	d807      	bhi.n	8012cfc <_printf_i+0x28>
 8012cec:	2f62      	cmp	r7, #98	@ 0x62
 8012cee:	d80a      	bhi.n	8012d06 <_printf_i+0x32>
 8012cf0:	2f00      	cmp	r7, #0
 8012cf2:	f000 80d2 	beq.w	8012e9a <_printf_i+0x1c6>
 8012cf6:	2f58      	cmp	r7, #88	@ 0x58
 8012cf8:	f000 80b9 	beq.w	8012e6e <_printf_i+0x19a>
 8012cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012d04:	e03a      	b.n	8012d7c <_printf_i+0xa8>
 8012d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012d0a:	2b15      	cmp	r3, #21
 8012d0c:	d8f6      	bhi.n	8012cfc <_printf_i+0x28>
 8012d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8012d14 <_printf_i+0x40>)
 8012d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d14:	08012d6d 	.word	0x08012d6d
 8012d18:	08012d81 	.word	0x08012d81
 8012d1c:	08012cfd 	.word	0x08012cfd
 8012d20:	08012cfd 	.word	0x08012cfd
 8012d24:	08012cfd 	.word	0x08012cfd
 8012d28:	08012cfd 	.word	0x08012cfd
 8012d2c:	08012d81 	.word	0x08012d81
 8012d30:	08012cfd 	.word	0x08012cfd
 8012d34:	08012cfd 	.word	0x08012cfd
 8012d38:	08012cfd 	.word	0x08012cfd
 8012d3c:	08012cfd 	.word	0x08012cfd
 8012d40:	08012e81 	.word	0x08012e81
 8012d44:	08012dab 	.word	0x08012dab
 8012d48:	08012e3b 	.word	0x08012e3b
 8012d4c:	08012cfd 	.word	0x08012cfd
 8012d50:	08012cfd 	.word	0x08012cfd
 8012d54:	08012ea3 	.word	0x08012ea3
 8012d58:	08012cfd 	.word	0x08012cfd
 8012d5c:	08012dab 	.word	0x08012dab
 8012d60:	08012cfd 	.word	0x08012cfd
 8012d64:	08012cfd 	.word	0x08012cfd
 8012d68:	08012e43 	.word	0x08012e43
 8012d6c:	6833      	ldr	r3, [r6, #0]
 8012d6e:	1d1a      	adds	r2, r3, #4
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	6032      	str	r2, [r6, #0]
 8012d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e09d      	b.n	8012ebc <_printf_i+0x1e8>
 8012d80:	6833      	ldr	r3, [r6, #0]
 8012d82:	6820      	ldr	r0, [r4, #0]
 8012d84:	1d19      	adds	r1, r3, #4
 8012d86:	6031      	str	r1, [r6, #0]
 8012d88:	0606      	lsls	r6, r0, #24
 8012d8a:	d501      	bpl.n	8012d90 <_printf_i+0xbc>
 8012d8c:	681d      	ldr	r5, [r3, #0]
 8012d8e:	e003      	b.n	8012d98 <_printf_i+0xc4>
 8012d90:	0645      	lsls	r5, r0, #25
 8012d92:	d5fb      	bpl.n	8012d8c <_printf_i+0xb8>
 8012d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012d98:	2d00      	cmp	r5, #0
 8012d9a:	da03      	bge.n	8012da4 <_printf_i+0xd0>
 8012d9c:	232d      	movs	r3, #45	@ 0x2d
 8012d9e:	426d      	negs	r5, r5
 8012da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012da4:	4859      	ldr	r0, [pc, #356]	@ (8012f0c <_printf_i+0x238>)
 8012da6:	230a      	movs	r3, #10
 8012da8:	e011      	b.n	8012dce <_printf_i+0xfa>
 8012daa:	6821      	ldr	r1, [r4, #0]
 8012dac:	6833      	ldr	r3, [r6, #0]
 8012dae:	0608      	lsls	r0, r1, #24
 8012db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012db4:	d402      	bmi.n	8012dbc <_printf_i+0xe8>
 8012db6:	0649      	lsls	r1, r1, #25
 8012db8:	bf48      	it	mi
 8012dba:	b2ad      	uxthmi	r5, r5
 8012dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012dbe:	4853      	ldr	r0, [pc, #332]	@ (8012f0c <_printf_i+0x238>)
 8012dc0:	6033      	str	r3, [r6, #0]
 8012dc2:	bf14      	ite	ne
 8012dc4:	230a      	movne	r3, #10
 8012dc6:	2308      	moveq	r3, #8
 8012dc8:	2100      	movs	r1, #0
 8012dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012dce:	6866      	ldr	r6, [r4, #4]
 8012dd0:	60a6      	str	r6, [r4, #8]
 8012dd2:	2e00      	cmp	r6, #0
 8012dd4:	bfa2      	ittt	ge
 8012dd6:	6821      	ldrge	r1, [r4, #0]
 8012dd8:	f021 0104 	bicge.w	r1, r1, #4
 8012ddc:	6021      	strge	r1, [r4, #0]
 8012dde:	b90d      	cbnz	r5, 8012de4 <_printf_i+0x110>
 8012de0:	2e00      	cmp	r6, #0
 8012de2:	d04b      	beq.n	8012e7c <_printf_i+0x1a8>
 8012de4:	4616      	mov	r6, r2
 8012de6:	fbb5 f1f3 	udiv	r1, r5, r3
 8012dea:	fb03 5711 	mls	r7, r3, r1, r5
 8012dee:	5dc7      	ldrb	r7, [r0, r7]
 8012df0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012df4:	462f      	mov	r7, r5
 8012df6:	42bb      	cmp	r3, r7
 8012df8:	460d      	mov	r5, r1
 8012dfa:	d9f4      	bls.n	8012de6 <_printf_i+0x112>
 8012dfc:	2b08      	cmp	r3, #8
 8012dfe:	d10b      	bne.n	8012e18 <_printf_i+0x144>
 8012e00:	6823      	ldr	r3, [r4, #0]
 8012e02:	07df      	lsls	r7, r3, #31
 8012e04:	d508      	bpl.n	8012e18 <_printf_i+0x144>
 8012e06:	6923      	ldr	r3, [r4, #16]
 8012e08:	6861      	ldr	r1, [r4, #4]
 8012e0a:	4299      	cmp	r1, r3
 8012e0c:	bfde      	ittt	le
 8012e0e:	2330      	movle	r3, #48	@ 0x30
 8012e10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012e14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012e18:	1b92      	subs	r2, r2, r6
 8012e1a:	6122      	str	r2, [r4, #16]
 8012e1c:	f8cd a000 	str.w	sl, [sp]
 8012e20:	464b      	mov	r3, r9
 8012e22:	aa03      	add	r2, sp, #12
 8012e24:	4621      	mov	r1, r4
 8012e26:	4640      	mov	r0, r8
 8012e28:	f7ff fee6 	bl	8012bf8 <_printf_common>
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	d14a      	bne.n	8012ec6 <_printf_i+0x1f2>
 8012e30:	f04f 30ff 	mov.w	r0, #4294967295
 8012e34:	b004      	add	sp, #16
 8012e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	f043 0320 	orr.w	r3, r3, #32
 8012e40:	6023      	str	r3, [r4, #0]
 8012e42:	4833      	ldr	r0, [pc, #204]	@ (8012f10 <_printf_i+0x23c>)
 8012e44:	2778      	movs	r7, #120	@ 0x78
 8012e46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012e4a:	6823      	ldr	r3, [r4, #0]
 8012e4c:	6831      	ldr	r1, [r6, #0]
 8012e4e:	061f      	lsls	r7, r3, #24
 8012e50:	f851 5b04 	ldr.w	r5, [r1], #4
 8012e54:	d402      	bmi.n	8012e5c <_printf_i+0x188>
 8012e56:	065f      	lsls	r7, r3, #25
 8012e58:	bf48      	it	mi
 8012e5a:	b2ad      	uxthmi	r5, r5
 8012e5c:	6031      	str	r1, [r6, #0]
 8012e5e:	07d9      	lsls	r1, r3, #31
 8012e60:	bf44      	itt	mi
 8012e62:	f043 0320 	orrmi.w	r3, r3, #32
 8012e66:	6023      	strmi	r3, [r4, #0]
 8012e68:	b11d      	cbz	r5, 8012e72 <_printf_i+0x19e>
 8012e6a:	2310      	movs	r3, #16
 8012e6c:	e7ac      	b.n	8012dc8 <_printf_i+0xf4>
 8012e6e:	4827      	ldr	r0, [pc, #156]	@ (8012f0c <_printf_i+0x238>)
 8012e70:	e7e9      	b.n	8012e46 <_printf_i+0x172>
 8012e72:	6823      	ldr	r3, [r4, #0]
 8012e74:	f023 0320 	bic.w	r3, r3, #32
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	e7f6      	b.n	8012e6a <_printf_i+0x196>
 8012e7c:	4616      	mov	r6, r2
 8012e7e:	e7bd      	b.n	8012dfc <_printf_i+0x128>
 8012e80:	6833      	ldr	r3, [r6, #0]
 8012e82:	6825      	ldr	r5, [r4, #0]
 8012e84:	6961      	ldr	r1, [r4, #20]
 8012e86:	1d18      	adds	r0, r3, #4
 8012e88:	6030      	str	r0, [r6, #0]
 8012e8a:	062e      	lsls	r6, r5, #24
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	d501      	bpl.n	8012e94 <_printf_i+0x1c0>
 8012e90:	6019      	str	r1, [r3, #0]
 8012e92:	e002      	b.n	8012e9a <_printf_i+0x1c6>
 8012e94:	0668      	lsls	r0, r5, #25
 8012e96:	d5fb      	bpl.n	8012e90 <_printf_i+0x1bc>
 8012e98:	8019      	strh	r1, [r3, #0]
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	6123      	str	r3, [r4, #16]
 8012e9e:	4616      	mov	r6, r2
 8012ea0:	e7bc      	b.n	8012e1c <_printf_i+0x148>
 8012ea2:	6833      	ldr	r3, [r6, #0]
 8012ea4:	1d1a      	adds	r2, r3, #4
 8012ea6:	6032      	str	r2, [r6, #0]
 8012ea8:	681e      	ldr	r6, [r3, #0]
 8012eaa:	6862      	ldr	r2, [r4, #4]
 8012eac:	2100      	movs	r1, #0
 8012eae:	4630      	mov	r0, r6
 8012eb0:	f7ed f99e 	bl	80001f0 <memchr>
 8012eb4:	b108      	cbz	r0, 8012eba <_printf_i+0x1e6>
 8012eb6:	1b80      	subs	r0, r0, r6
 8012eb8:	6060      	str	r0, [r4, #4]
 8012eba:	6863      	ldr	r3, [r4, #4]
 8012ebc:	6123      	str	r3, [r4, #16]
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ec4:	e7aa      	b.n	8012e1c <_printf_i+0x148>
 8012ec6:	6923      	ldr	r3, [r4, #16]
 8012ec8:	4632      	mov	r2, r6
 8012eca:	4649      	mov	r1, r9
 8012ecc:	4640      	mov	r0, r8
 8012ece:	47d0      	blx	sl
 8012ed0:	3001      	adds	r0, #1
 8012ed2:	d0ad      	beq.n	8012e30 <_printf_i+0x15c>
 8012ed4:	6823      	ldr	r3, [r4, #0]
 8012ed6:	079b      	lsls	r3, r3, #30
 8012ed8:	d413      	bmi.n	8012f02 <_printf_i+0x22e>
 8012eda:	68e0      	ldr	r0, [r4, #12]
 8012edc:	9b03      	ldr	r3, [sp, #12]
 8012ede:	4298      	cmp	r0, r3
 8012ee0:	bfb8      	it	lt
 8012ee2:	4618      	movlt	r0, r3
 8012ee4:	e7a6      	b.n	8012e34 <_printf_i+0x160>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	4632      	mov	r2, r6
 8012eea:	4649      	mov	r1, r9
 8012eec:	4640      	mov	r0, r8
 8012eee:	47d0      	blx	sl
 8012ef0:	3001      	adds	r0, #1
 8012ef2:	d09d      	beq.n	8012e30 <_printf_i+0x15c>
 8012ef4:	3501      	adds	r5, #1
 8012ef6:	68e3      	ldr	r3, [r4, #12]
 8012ef8:	9903      	ldr	r1, [sp, #12]
 8012efa:	1a5b      	subs	r3, r3, r1
 8012efc:	42ab      	cmp	r3, r5
 8012efe:	dcf2      	bgt.n	8012ee6 <_printf_i+0x212>
 8012f00:	e7eb      	b.n	8012eda <_printf_i+0x206>
 8012f02:	2500      	movs	r5, #0
 8012f04:	f104 0619 	add.w	r6, r4, #25
 8012f08:	e7f5      	b.n	8012ef6 <_printf_i+0x222>
 8012f0a:	bf00      	nop
 8012f0c:	08017840 	.word	0x08017840
 8012f10:	08017851 	.word	0x08017851

08012f14 <_scanf_float>:
 8012f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f18:	b087      	sub	sp, #28
 8012f1a:	4617      	mov	r7, r2
 8012f1c:	9303      	str	r3, [sp, #12]
 8012f1e:	688b      	ldr	r3, [r1, #8]
 8012f20:	1e5a      	subs	r2, r3, #1
 8012f22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012f26:	bf81      	itttt	hi
 8012f28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012f2c:	eb03 0b05 	addhi.w	fp, r3, r5
 8012f30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012f34:	608b      	strhi	r3, [r1, #8]
 8012f36:	680b      	ldr	r3, [r1, #0]
 8012f38:	460a      	mov	r2, r1
 8012f3a:	f04f 0500 	mov.w	r5, #0
 8012f3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8012f42:	f842 3b1c 	str.w	r3, [r2], #28
 8012f46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012f4a:	4680      	mov	r8, r0
 8012f4c:	460c      	mov	r4, r1
 8012f4e:	bf98      	it	ls
 8012f50:	f04f 0b00 	movls.w	fp, #0
 8012f54:	9201      	str	r2, [sp, #4]
 8012f56:	4616      	mov	r6, r2
 8012f58:	46aa      	mov	sl, r5
 8012f5a:	46a9      	mov	r9, r5
 8012f5c:	9502      	str	r5, [sp, #8]
 8012f5e:	68a2      	ldr	r2, [r4, #8]
 8012f60:	b152      	cbz	r2, 8012f78 <_scanf_float+0x64>
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	2b4e      	cmp	r3, #78	@ 0x4e
 8012f68:	d864      	bhi.n	8013034 <_scanf_float+0x120>
 8012f6a:	2b40      	cmp	r3, #64	@ 0x40
 8012f6c:	d83c      	bhi.n	8012fe8 <_scanf_float+0xd4>
 8012f6e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8012f72:	b2c8      	uxtb	r0, r1
 8012f74:	280e      	cmp	r0, #14
 8012f76:	d93a      	bls.n	8012fee <_scanf_float+0xda>
 8012f78:	f1b9 0f00 	cmp.w	r9, #0
 8012f7c:	d003      	beq.n	8012f86 <_scanf_float+0x72>
 8012f7e:	6823      	ldr	r3, [r4, #0]
 8012f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012f84:	6023      	str	r3, [r4, #0]
 8012f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f8a:	f1ba 0f01 	cmp.w	sl, #1
 8012f8e:	f200 8117 	bhi.w	80131c0 <_scanf_float+0x2ac>
 8012f92:	9b01      	ldr	r3, [sp, #4]
 8012f94:	429e      	cmp	r6, r3
 8012f96:	f200 8108 	bhi.w	80131aa <_scanf_float+0x296>
 8012f9a:	2001      	movs	r0, #1
 8012f9c:	b007      	add	sp, #28
 8012f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8012fa6:	2a0d      	cmp	r2, #13
 8012fa8:	d8e6      	bhi.n	8012f78 <_scanf_float+0x64>
 8012faa:	a101      	add	r1, pc, #4	@ (adr r1, 8012fb0 <_scanf_float+0x9c>)
 8012fac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012fb0:	080130f7 	.word	0x080130f7
 8012fb4:	08012f79 	.word	0x08012f79
 8012fb8:	08012f79 	.word	0x08012f79
 8012fbc:	08012f79 	.word	0x08012f79
 8012fc0:	08013157 	.word	0x08013157
 8012fc4:	0801312f 	.word	0x0801312f
 8012fc8:	08012f79 	.word	0x08012f79
 8012fcc:	08012f79 	.word	0x08012f79
 8012fd0:	08013105 	.word	0x08013105
 8012fd4:	08012f79 	.word	0x08012f79
 8012fd8:	08012f79 	.word	0x08012f79
 8012fdc:	08012f79 	.word	0x08012f79
 8012fe0:	08012f79 	.word	0x08012f79
 8012fe4:	080130bd 	.word	0x080130bd
 8012fe8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8012fec:	e7db      	b.n	8012fa6 <_scanf_float+0x92>
 8012fee:	290e      	cmp	r1, #14
 8012ff0:	d8c2      	bhi.n	8012f78 <_scanf_float+0x64>
 8012ff2:	a001      	add	r0, pc, #4	@ (adr r0, 8012ff8 <_scanf_float+0xe4>)
 8012ff4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012ff8:	080130ad 	.word	0x080130ad
 8012ffc:	08012f79 	.word	0x08012f79
 8013000:	080130ad 	.word	0x080130ad
 8013004:	08013143 	.word	0x08013143
 8013008:	08012f79 	.word	0x08012f79
 801300c:	08013055 	.word	0x08013055
 8013010:	08013093 	.word	0x08013093
 8013014:	08013093 	.word	0x08013093
 8013018:	08013093 	.word	0x08013093
 801301c:	08013093 	.word	0x08013093
 8013020:	08013093 	.word	0x08013093
 8013024:	08013093 	.word	0x08013093
 8013028:	08013093 	.word	0x08013093
 801302c:	08013093 	.word	0x08013093
 8013030:	08013093 	.word	0x08013093
 8013034:	2b6e      	cmp	r3, #110	@ 0x6e
 8013036:	d809      	bhi.n	801304c <_scanf_float+0x138>
 8013038:	2b60      	cmp	r3, #96	@ 0x60
 801303a:	d8b2      	bhi.n	8012fa2 <_scanf_float+0x8e>
 801303c:	2b54      	cmp	r3, #84	@ 0x54
 801303e:	d07b      	beq.n	8013138 <_scanf_float+0x224>
 8013040:	2b59      	cmp	r3, #89	@ 0x59
 8013042:	d199      	bne.n	8012f78 <_scanf_float+0x64>
 8013044:	2d07      	cmp	r5, #7
 8013046:	d197      	bne.n	8012f78 <_scanf_float+0x64>
 8013048:	2508      	movs	r5, #8
 801304a:	e02c      	b.n	80130a6 <_scanf_float+0x192>
 801304c:	2b74      	cmp	r3, #116	@ 0x74
 801304e:	d073      	beq.n	8013138 <_scanf_float+0x224>
 8013050:	2b79      	cmp	r3, #121	@ 0x79
 8013052:	e7f6      	b.n	8013042 <_scanf_float+0x12e>
 8013054:	6821      	ldr	r1, [r4, #0]
 8013056:	05c8      	lsls	r0, r1, #23
 8013058:	d51b      	bpl.n	8013092 <_scanf_float+0x17e>
 801305a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801305e:	6021      	str	r1, [r4, #0]
 8013060:	f109 0901 	add.w	r9, r9, #1
 8013064:	f1bb 0f00 	cmp.w	fp, #0
 8013068:	d003      	beq.n	8013072 <_scanf_float+0x15e>
 801306a:	3201      	adds	r2, #1
 801306c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013070:	60a2      	str	r2, [r4, #8]
 8013072:	68a3      	ldr	r3, [r4, #8]
 8013074:	3b01      	subs	r3, #1
 8013076:	60a3      	str	r3, [r4, #8]
 8013078:	6923      	ldr	r3, [r4, #16]
 801307a:	3301      	adds	r3, #1
 801307c:	6123      	str	r3, [r4, #16]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	3b01      	subs	r3, #1
 8013082:	2b00      	cmp	r3, #0
 8013084:	607b      	str	r3, [r7, #4]
 8013086:	f340 8087 	ble.w	8013198 <_scanf_float+0x284>
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	3301      	adds	r3, #1
 801308e:	603b      	str	r3, [r7, #0]
 8013090:	e765      	b.n	8012f5e <_scanf_float+0x4a>
 8013092:	eb1a 0105 	adds.w	r1, sl, r5
 8013096:	f47f af6f 	bne.w	8012f78 <_scanf_float+0x64>
 801309a:	6822      	ldr	r2, [r4, #0]
 801309c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80130a0:	6022      	str	r2, [r4, #0]
 80130a2:	460d      	mov	r5, r1
 80130a4:	468a      	mov	sl, r1
 80130a6:	f806 3b01 	strb.w	r3, [r6], #1
 80130aa:	e7e2      	b.n	8013072 <_scanf_float+0x15e>
 80130ac:	6822      	ldr	r2, [r4, #0]
 80130ae:	0610      	lsls	r0, r2, #24
 80130b0:	f57f af62 	bpl.w	8012f78 <_scanf_float+0x64>
 80130b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80130b8:	6022      	str	r2, [r4, #0]
 80130ba:	e7f4      	b.n	80130a6 <_scanf_float+0x192>
 80130bc:	f1ba 0f00 	cmp.w	sl, #0
 80130c0:	d10e      	bne.n	80130e0 <_scanf_float+0x1cc>
 80130c2:	f1b9 0f00 	cmp.w	r9, #0
 80130c6:	d10e      	bne.n	80130e6 <_scanf_float+0x1d2>
 80130c8:	6822      	ldr	r2, [r4, #0]
 80130ca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80130ce:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80130d2:	d108      	bne.n	80130e6 <_scanf_float+0x1d2>
 80130d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80130d8:	6022      	str	r2, [r4, #0]
 80130da:	f04f 0a01 	mov.w	sl, #1
 80130de:	e7e2      	b.n	80130a6 <_scanf_float+0x192>
 80130e0:	f1ba 0f02 	cmp.w	sl, #2
 80130e4:	d055      	beq.n	8013192 <_scanf_float+0x27e>
 80130e6:	2d01      	cmp	r5, #1
 80130e8:	d002      	beq.n	80130f0 <_scanf_float+0x1dc>
 80130ea:	2d04      	cmp	r5, #4
 80130ec:	f47f af44 	bne.w	8012f78 <_scanf_float+0x64>
 80130f0:	3501      	adds	r5, #1
 80130f2:	b2ed      	uxtb	r5, r5
 80130f4:	e7d7      	b.n	80130a6 <_scanf_float+0x192>
 80130f6:	f1ba 0f01 	cmp.w	sl, #1
 80130fa:	f47f af3d 	bne.w	8012f78 <_scanf_float+0x64>
 80130fe:	f04f 0a02 	mov.w	sl, #2
 8013102:	e7d0      	b.n	80130a6 <_scanf_float+0x192>
 8013104:	b97d      	cbnz	r5, 8013126 <_scanf_float+0x212>
 8013106:	f1b9 0f00 	cmp.w	r9, #0
 801310a:	f47f af38 	bne.w	8012f7e <_scanf_float+0x6a>
 801310e:	6822      	ldr	r2, [r4, #0]
 8013110:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013114:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8013118:	f040 8108 	bne.w	801332c <_scanf_float+0x418>
 801311c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013120:	6022      	str	r2, [r4, #0]
 8013122:	2501      	movs	r5, #1
 8013124:	e7bf      	b.n	80130a6 <_scanf_float+0x192>
 8013126:	2d03      	cmp	r5, #3
 8013128:	d0e2      	beq.n	80130f0 <_scanf_float+0x1dc>
 801312a:	2d05      	cmp	r5, #5
 801312c:	e7de      	b.n	80130ec <_scanf_float+0x1d8>
 801312e:	2d02      	cmp	r5, #2
 8013130:	f47f af22 	bne.w	8012f78 <_scanf_float+0x64>
 8013134:	2503      	movs	r5, #3
 8013136:	e7b6      	b.n	80130a6 <_scanf_float+0x192>
 8013138:	2d06      	cmp	r5, #6
 801313a:	f47f af1d 	bne.w	8012f78 <_scanf_float+0x64>
 801313e:	2507      	movs	r5, #7
 8013140:	e7b1      	b.n	80130a6 <_scanf_float+0x192>
 8013142:	6822      	ldr	r2, [r4, #0]
 8013144:	0591      	lsls	r1, r2, #22
 8013146:	f57f af17 	bpl.w	8012f78 <_scanf_float+0x64>
 801314a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801314e:	6022      	str	r2, [r4, #0]
 8013150:	f8cd 9008 	str.w	r9, [sp, #8]
 8013154:	e7a7      	b.n	80130a6 <_scanf_float+0x192>
 8013156:	6822      	ldr	r2, [r4, #0]
 8013158:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801315c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013160:	d006      	beq.n	8013170 <_scanf_float+0x25c>
 8013162:	0550      	lsls	r0, r2, #21
 8013164:	f57f af08 	bpl.w	8012f78 <_scanf_float+0x64>
 8013168:	f1b9 0f00 	cmp.w	r9, #0
 801316c:	f000 80de 	beq.w	801332c <_scanf_float+0x418>
 8013170:	0591      	lsls	r1, r2, #22
 8013172:	bf58      	it	pl
 8013174:	9902      	ldrpl	r1, [sp, #8]
 8013176:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801317a:	bf58      	it	pl
 801317c:	eba9 0101 	subpl.w	r1, r9, r1
 8013180:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8013184:	bf58      	it	pl
 8013186:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801318a:	6022      	str	r2, [r4, #0]
 801318c:	f04f 0900 	mov.w	r9, #0
 8013190:	e789      	b.n	80130a6 <_scanf_float+0x192>
 8013192:	f04f 0a03 	mov.w	sl, #3
 8013196:	e786      	b.n	80130a6 <_scanf_float+0x192>
 8013198:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801319c:	4639      	mov	r1, r7
 801319e:	4640      	mov	r0, r8
 80131a0:	4798      	blx	r3
 80131a2:	2800      	cmp	r0, #0
 80131a4:	f43f aedb 	beq.w	8012f5e <_scanf_float+0x4a>
 80131a8:	e6e6      	b.n	8012f78 <_scanf_float+0x64>
 80131aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80131ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80131b2:	463a      	mov	r2, r7
 80131b4:	4640      	mov	r0, r8
 80131b6:	4798      	blx	r3
 80131b8:	6923      	ldr	r3, [r4, #16]
 80131ba:	3b01      	subs	r3, #1
 80131bc:	6123      	str	r3, [r4, #16]
 80131be:	e6e8      	b.n	8012f92 <_scanf_float+0x7e>
 80131c0:	1e6b      	subs	r3, r5, #1
 80131c2:	2b06      	cmp	r3, #6
 80131c4:	d824      	bhi.n	8013210 <_scanf_float+0x2fc>
 80131c6:	2d02      	cmp	r5, #2
 80131c8:	d836      	bhi.n	8013238 <_scanf_float+0x324>
 80131ca:	9b01      	ldr	r3, [sp, #4]
 80131cc:	429e      	cmp	r6, r3
 80131ce:	f67f aee4 	bls.w	8012f9a <_scanf_float+0x86>
 80131d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80131d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80131da:	463a      	mov	r2, r7
 80131dc:	4640      	mov	r0, r8
 80131de:	4798      	blx	r3
 80131e0:	6923      	ldr	r3, [r4, #16]
 80131e2:	3b01      	subs	r3, #1
 80131e4:	6123      	str	r3, [r4, #16]
 80131e6:	e7f0      	b.n	80131ca <_scanf_float+0x2b6>
 80131e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80131ec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80131f0:	463a      	mov	r2, r7
 80131f2:	4640      	mov	r0, r8
 80131f4:	4798      	blx	r3
 80131f6:	6923      	ldr	r3, [r4, #16]
 80131f8:	3b01      	subs	r3, #1
 80131fa:	6123      	str	r3, [r4, #16]
 80131fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013200:	fa5f fa8a 	uxtb.w	sl, sl
 8013204:	f1ba 0f02 	cmp.w	sl, #2
 8013208:	d1ee      	bne.n	80131e8 <_scanf_float+0x2d4>
 801320a:	3d03      	subs	r5, #3
 801320c:	b2ed      	uxtb	r5, r5
 801320e:	1b76      	subs	r6, r6, r5
 8013210:	6823      	ldr	r3, [r4, #0]
 8013212:	05da      	lsls	r2, r3, #23
 8013214:	d530      	bpl.n	8013278 <_scanf_float+0x364>
 8013216:	055b      	lsls	r3, r3, #21
 8013218:	d511      	bpl.n	801323e <_scanf_float+0x32a>
 801321a:	9b01      	ldr	r3, [sp, #4]
 801321c:	429e      	cmp	r6, r3
 801321e:	f67f aebc 	bls.w	8012f9a <_scanf_float+0x86>
 8013222:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013226:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801322a:	463a      	mov	r2, r7
 801322c:	4640      	mov	r0, r8
 801322e:	4798      	blx	r3
 8013230:	6923      	ldr	r3, [r4, #16]
 8013232:	3b01      	subs	r3, #1
 8013234:	6123      	str	r3, [r4, #16]
 8013236:	e7f0      	b.n	801321a <_scanf_float+0x306>
 8013238:	46aa      	mov	sl, r5
 801323a:	46b3      	mov	fp, r6
 801323c:	e7de      	b.n	80131fc <_scanf_float+0x2e8>
 801323e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013242:	6923      	ldr	r3, [r4, #16]
 8013244:	2965      	cmp	r1, #101	@ 0x65
 8013246:	f103 33ff 	add.w	r3, r3, #4294967295
 801324a:	f106 35ff 	add.w	r5, r6, #4294967295
 801324e:	6123      	str	r3, [r4, #16]
 8013250:	d00c      	beq.n	801326c <_scanf_float+0x358>
 8013252:	2945      	cmp	r1, #69	@ 0x45
 8013254:	d00a      	beq.n	801326c <_scanf_float+0x358>
 8013256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801325a:	463a      	mov	r2, r7
 801325c:	4640      	mov	r0, r8
 801325e:	4798      	blx	r3
 8013260:	6923      	ldr	r3, [r4, #16]
 8013262:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013266:	3b01      	subs	r3, #1
 8013268:	1eb5      	subs	r5, r6, #2
 801326a:	6123      	str	r3, [r4, #16]
 801326c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013270:	463a      	mov	r2, r7
 8013272:	4640      	mov	r0, r8
 8013274:	4798      	blx	r3
 8013276:	462e      	mov	r6, r5
 8013278:	6822      	ldr	r2, [r4, #0]
 801327a:	f012 0210 	ands.w	r2, r2, #16
 801327e:	d001      	beq.n	8013284 <_scanf_float+0x370>
 8013280:	2000      	movs	r0, #0
 8013282:	e68b      	b.n	8012f9c <_scanf_float+0x88>
 8013284:	7032      	strb	r2, [r6, #0]
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801328c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013290:	d11c      	bne.n	80132cc <_scanf_float+0x3b8>
 8013292:	9b02      	ldr	r3, [sp, #8]
 8013294:	454b      	cmp	r3, r9
 8013296:	eba3 0209 	sub.w	r2, r3, r9
 801329a:	d123      	bne.n	80132e4 <_scanf_float+0x3d0>
 801329c:	9901      	ldr	r1, [sp, #4]
 801329e:	2200      	movs	r2, #0
 80132a0:	4640      	mov	r0, r8
 80132a2:	f7ff f9cd 	bl	8012640 <_strtod_r>
 80132a6:	9b03      	ldr	r3, [sp, #12]
 80132a8:	6821      	ldr	r1, [r4, #0]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f011 0f02 	tst.w	r1, #2
 80132b0:	ec57 6b10 	vmov	r6, r7, d0
 80132b4:	f103 0204 	add.w	r2, r3, #4
 80132b8:	d01f      	beq.n	80132fa <_scanf_float+0x3e6>
 80132ba:	9903      	ldr	r1, [sp, #12]
 80132bc:	600a      	str	r2, [r1, #0]
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	e9c3 6700 	strd	r6, r7, [r3]
 80132c4:	68e3      	ldr	r3, [r4, #12]
 80132c6:	3301      	adds	r3, #1
 80132c8:	60e3      	str	r3, [r4, #12]
 80132ca:	e7d9      	b.n	8013280 <_scanf_float+0x36c>
 80132cc:	9b04      	ldr	r3, [sp, #16]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d0e4      	beq.n	801329c <_scanf_float+0x388>
 80132d2:	9905      	ldr	r1, [sp, #20]
 80132d4:	230a      	movs	r3, #10
 80132d6:	3101      	adds	r1, #1
 80132d8:	4640      	mov	r0, r8
 80132da:	f002 fa61 	bl	80157a0 <_strtol_r>
 80132de:	9b04      	ldr	r3, [sp, #16]
 80132e0:	9e05      	ldr	r6, [sp, #20]
 80132e2:	1ac2      	subs	r2, r0, r3
 80132e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80132e8:	429e      	cmp	r6, r3
 80132ea:	bf28      	it	cs
 80132ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80132f0:	4910      	ldr	r1, [pc, #64]	@ (8013334 <_scanf_float+0x420>)
 80132f2:	4630      	mov	r0, r6
 80132f4:	f000 f918 	bl	8013528 <siprintf>
 80132f8:	e7d0      	b.n	801329c <_scanf_float+0x388>
 80132fa:	f011 0f04 	tst.w	r1, #4
 80132fe:	9903      	ldr	r1, [sp, #12]
 8013300:	600a      	str	r2, [r1, #0]
 8013302:	d1dc      	bne.n	80132be <_scanf_float+0x3aa>
 8013304:	681d      	ldr	r5, [r3, #0]
 8013306:	4632      	mov	r2, r6
 8013308:	463b      	mov	r3, r7
 801330a:	4630      	mov	r0, r6
 801330c:	4639      	mov	r1, r7
 801330e:	f7ed fc1d 	bl	8000b4c <__aeabi_dcmpun>
 8013312:	b128      	cbz	r0, 8013320 <_scanf_float+0x40c>
 8013314:	4808      	ldr	r0, [pc, #32]	@ (8013338 <_scanf_float+0x424>)
 8013316:	f000 fa77 	bl	8013808 <nanf>
 801331a:	ed85 0a00 	vstr	s0, [r5]
 801331e:	e7d1      	b.n	80132c4 <_scanf_float+0x3b0>
 8013320:	4630      	mov	r0, r6
 8013322:	4639      	mov	r1, r7
 8013324:	f7ed fc70 	bl	8000c08 <__aeabi_d2f>
 8013328:	6028      	str	r0, [r5, #0]
 801332a:	e7cb      	b.n	80132c4 <_scanf_float+0x3b0>
 801332c:	f04f 0900 	mov.w	r9, #0
 8013330:	e629      	b.n	8012f86 <_scanf_float+0x72>
 8013332:	bf00      	nop
 8013334:	08017862 	.word	0x08017862
 8013338:	08017c20 	.word	0x08017c20

0801333c <std>:
 801333c:	2300      	movs	r3, #0
 801333e:	b510      	push	{r4, lr}
 8013340:	4604      	mov	r4, r0
 8013342:	e9c0 3300 	strd	r3, r3, [r0]
 8013346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801334a:	6083      	str	r3, [r0, #8]
 801334c:	8181      	strh	r1, [r0, #12]
 801334e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013350:	81c2      	strh	r2, [r0, #14]
 8013352:	6183      	str	r3, [r0, #24]
 8013354:	4619      	mov	r1, r3
 8013356:	2208      	movs	r2, #8
 8013358:	305c      	adds	r0, #92	@ 0x5c
 801335a:	f000 f974 	bl	8013646 <memset>
 801335e:	4b0d      	ldr	r3, [pc, #52]	@ (8013394 <std+0x58>)
 8013360:	6263      	str	r3, [r4, #36]	@ 0x24
 8013362:	4b0d      	ldr	r3, [pc, #52]	@ (8013398 <std+0x5c>)
 8013364:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013366:	4b0d      	ldr	r3, [pc, #52]	@ (801339c <std+0x60>)
 8013368:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801336a:	4b0d      	ldr	r3, [pc, #52]	@ (80133a0 <std+0x64>)
 801336c:	6323      	str	r3, [r4, #48]	@ 0x30
 801336e:	4b0d      	ldr	r3, [pc, #52]	@ (80133a4 <std+0x68>)
 8013370:	6224      	str	r4, [r4, #32]
 8013372:	429c      	cmp	r4, r3
 8013374:	d006      	beq.n	8013384 <std+0x48>
 8013376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801337a:	4294      	cmp	r4, r2
 801337c:	d002      	beq.n	8013384 <std+0x48>
 801337e:	33d0      	adds	r3, #208	@ 0xd0
 8013380:	429c      	cmp	r4, r3
 8013382:	d105      	bne.n	8013390 <std+0x54>
 8013384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801338c:	f000 ba18 	b.w	80137c0 <__retarget_lock_init_recursive>
 8013390:	bd10      	pop	{r4, pc}
 8013392:	bf00      	nop
 8013394:	080135bd 	.word	0x080135bd
 8013398:	080135e3 	.word	0x080135e3
 801339c:	0801361b 	.word	0x0801361b
 80133a0:	0801363f 	.word	0x0801363f
 80133a4:	200033d8 	.word	0x200033d8

080133a8 <stdio_exit_handler>:
 80133a8:	4a02      	ldr	r2, [pc, #8]	@ (80133b4 <stdio_exit_handler+0xc>)
 80133aa:	4903      	ldr	r1, [pc, #12]	@ (80133b8 <stdio_exit_handler+0x10>)
 80133ac:	4803      	ldr	r0, [pc, #12]	@ (80133bc <stdio_exit_handler+0x14>)
 80133ae:	f000 b869 	b.w	8013484 <_fwalk_sglue>
 80133b2:	bf00      	nop
 80133b4:	20000168 	.word	0x20000168
 80133b8:	080161a9 	.word	0x080161a9
 80133bc:	200002e4 	.word	0x200002e4

080133c0 <cleanup_stdio>:
 80133c0:	6841      	ldr	r1, [r0, #4]
 80133c2:	4b0c      	ldr	r3, [pc, #48]	@ (80133f4 <cleanup_stdio+0x34>)
 80133c4:	4299      	cmp	r1, r3
 80133c6:	b510      	push	{r4, lr}
 80133c8:	4604      	mov	r4, r0
 80133ca:	d001      	beq.n	80133d0 <cleanup_stdio+0x10>
 80133cc:	f002 feec 	bl	80161a8 <_fflush_r>
 80133d0:	68a1      	ldr	r1, [r4, #8]
 80133d2:	4b09      	ldr	r3, [pc, #36]	@ (80133f8 <cleanup_stdio+0x38>)
 80133d4:	4299      	cmp	r1, r3
 80133d6:	d002      	beq.n	80133de <cleanup_stdio+0x1e>
 80133d8:	4620      	mov	r0, r4
 80133da:	f002 fee5 	bl	80161a8 <_fflush_r>
 80133de:	68e1      	ldr	r1, [r4, #12]
 80133e0:	4b06      	ldr	r3, [pc, #24]	@ (80133fc <cleanup_stdio+0x3c>)
 80133e2:	4299      	cmp	r1, r3
 80133e4:	d004      	beq.n	80133f0 <cleanup_stdio+0x30>
 80133e6:	4620      	mov	r0, r4
 80133e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ec:	f002 bedc 	b.w	80161a8 <_fflush_r>
 80133f0:	bd10      	pop	{r4, pc}
 80133f2:	bf00      	nop
 80133f4:	200033d8 	.word	0x200033d8
 80133f8:	20003440 	.word	0x20003440
 80133fc:	200034a8 	.word	0x200034a8

08013400 <global_stdio_init.part.0>:
 8013400:	b510      	push	{r4, lr}
 8013402:	4b0b      	ldr	r3, [pc, #44]	@ (8013430 <global_stdio_init.part.0+0x30>)
 8013404:	4c0b      	ldr	r4, [pc, #44]	@ (8013434 <global_stdio_init.part.0+0x34>)
 8013406:	4a0c      	ldr	r2, [pc, #48]	@ (8013438 <global_stdio_init.part.0+0x38>)
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	4620      	mov	r0, r4
 801340c:	2200      	movs	r2, #0
 801340e:	2104      	movs	r1, #4
 8013410:	f7ff ff94 	bl	801333c <std>
 8013414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013418:	2201      	movs	r2, #1
 801341a:	2109      	movs	r1, #9
 801341c:	f7ff ff8e 	bl	801333c <std>
 8013420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013424:	2202      	movs	r2, #2
 8013426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801342a:	2112      	movs	r1, #18
 801342c:	f7ff bf86 	b.w	801333c <std>
 8013430:	20003510 	.word	0x20003510
 8013434:	200033d8 	.word	0x200033d8
 8013438:	080133a9 	.word	0x080133a9

0801343c <__sfp_lock_acquire>:
 801343c:	4801      	ldr	r0, [pc, #4]	@ (8013444 <__sfp_lock_acquire+0x8>)
 801343e:	f000 b9c0 	b.w	80137c2 <__retarget_lock_acquire_recursive>
 8013442:	bf00      	nop
 8013444:	20003519 	.word	0x20003519

08013448 <__sfp_lock_release>:
 8013448:	4801      	ldr	r0, [pc, #4]	@ (8013450 <__sfp_lock_release+0x8>)
 801344a:	f000 b9bb 	b.w	80137c4 <__retarget_lock_release_recursive>
 801344e:	bf00      	nop
 8013450:	20003519 	.word	0x20003519

08013454 <__sinit>:
 8013454:	b510      	push	{r4, lr}
 8013456:	4604      	mov	r4, r0
 8013458:	f7ff fff0 	bl	801343c <__sfp_lock_acquire>
 801345c:	6a23      	ldr	r3, [r4, #32]
 801345e:	b11b      	cbz	r3, 8013468 <__sinit+0x14>
 8013460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013464:	f7ff bff0 	b.w	8013448 <__sfp_lock_release>
 8013468:	4b04      	ldr	r3, [pc, #16]	@ (801347c <__sinit+0x28>)
 801346a:	6223      	str	r3, [r4, #32]
 801346c:	4b04      	ldr	r3, [pc, #16]	@ (8013480 <__sinit+0x2c>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d1f5      	bne.n	8013460 <__sinit+0xc>
 8013474:	f7ff ffc4 	bl	8013400 <global_stdio_init.part.0>
 8013478:	e7f2      	b.n	8013460 <__sinit+0xc>
 801347a:	bf00      	nop
 801347c:	080133c1 	.word	0x080133c1
 8013480:	20003510 	.word	0x20003510

08013484 <_fwalk_sglue>:
 8013484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013488:	4607      	mov	r7, r0
 801348a:	4688      	mov	r8, r1
 801348c:	4614      	mov	r4, r2
 801348e:	2600      	movs	r6, #0
 8013490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013494:	f1b9 0901 	subs.w	r9, r9, #1
 8013498:	d505      	bpl.n	80134a6 <_fwalk_sglue+0x22>
 801349a:	6824      	ldr	r4, [r4, #0]
 801349c:	2c00      	cmp	r4, #0
 801349e:	d1f7      	bne.n	8013490 <_fwalk_sglue+0xc>
 80134a0:	4630      	mov	r0, r6
 80134a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134a6:	89ab      	ldrh	r3, [r5, #12]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d907      	bls.n	80134bc <_fwalk_sglue+0x38>
 80134ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134b0:	3301      	adds	r3, #1
 80134b2:	d003      	beq.n	80134bc <_fwalk_sglue+0x38>
 80134b4:	4629      	mov	r1, r5
 80134b6:	4638      	mov	r0, r7
 80134b8:	47c0      	blx	r8
 80134ba:	4306      	orrs	r6, r0
 80134bc:	3568      	adds	r5, #104	@ 0x68
 80134be:	e7e9      	b.n	8013494 <_fwalk_sglue+0x10>

080134c0 <sniprintf>:
 80134c0:	b40c      	push	{r2, r3}
 80134c2:	b530      	push	{r4, r5, lr}
 80134c4:	4b17      	ldr	r3, [pc, #92]	@ (8013524 <sniprintf+0x64>)
 80134c6:	1e0c      	subs	r4, r1, #0
 80134c8:	681d      	ldr	r5, [r3, #0]
 80134ca:	b09d      	sub	sp, #116	@ 0x74
 80134cc:	da08      	bge.n	80134e0 <sniprintf+0x20>
 80134ce:	238b      	movs	r3, #139	@ 0x8b
 80134d0:	602b      	str	r3, [r5, #0]
 80134d2:	f04f 30ff 	mov.w	r0, #4294967295
 80134d6:	b01d      	add	sp, #116	@ 0x74
 80134d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134dc:	b002      	add	sp, #8
 80134de:	4770      	bx	lr
 80134e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80134e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80134e8:	bf14      	ite	ne
 80134ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80134ee:	4623      	moveq	r3, r4
 80134f0:	9304      	str	r3, [sp, #16]
 80134f2:	9307      	str	r3, [sp, #28]
 80134f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80134f8:	9002      	str	r0, [sp, #8]
 80134fa:	9006      	str	r0, [sp, #24]
 80134fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013500:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013502:	ab21      	add	r3, sp, #132	@ 0x84
 8013504:	a902      	add	r1, sp, #8
 8013506:	4628      	mov	r0, r5
 8013508:	9301      	str	r3, [sp, #4]
 801350a:	f002 f9b3 	bl	8015874 <_svfiprintf_r>
 801350e:	1c43      	adds	r3, r0, #1
 8013510:	bfbc      	itt	lt
 8013512:	238b      	movlt	r3, #139	@ 0x8b
 8013514:	602b      	strlt	r3, [r5, #0]
 8013516:	2c00      	cmp	r4, #0
 8013518:	d0dd      	beq.n	80134d6 <sniprintf+0x16>
 801351a:	9b02      	ldr	r3, [sp, #8]
 801351c:	2200      	movs	r2, #0
 801351e:	701a      	strb	r2, [r3, #0]
 8013520:	e7d9      	b.n	80134d6 <sniprintf+0x16>
 8013522:	bf00      	nop
 8013524:	200002e0 	.word	0x200002e0

08013528 <siprintf>:
 8013528:	b40e      	push	{r1, r2, r3}
 801352a:	b500      	push	{lr}
 801352c:	b09c      	sub	sp, #112	@ 0x70
 801352e:	ab1d      	add	r3, sp, #116	@ 0x74
 8013530:	9002      	str	r0, [sp, #8]
 8013532:	9006      	str	r0, [sp, #24]
 8013534:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013538:	4809      	ldr	r0, [pc, #36]	@ (8013560 <siprintf+0x38>)
 801353a:	9107      	str	r1, [sp, #28]
 801353c:	9104      	str	r1, [sp, #16]
 801353e:	4909      	ldr	r1, [pc, #36]	@ (8013564 <siprintf+0x3c>)
 8013540:	f853 2b04 	ldr.w	r2, [r3], #4
 8013544:	9105      	str	r1, [sp, #20]
 8013546:	6800      	ldr	r0, [r0, #0]
 8013548:	9301      	str	r3, [sp, #4]
 801354a:	a902      	add	r1, sp, #8
 801354c:	f002 f992 	bl	8015874 <_svfiprintf_r>
 8013550:	9b02      	ldr	r3, [sp, #8]
 8013552:	2200      	movs	r2, #0
 8013554:	701a      	strb	r2, [r3, #0]
 8013556:	b01c      	add	sp, #112	@ 0x70
 8013558:	f85d eb04 	ldr.w	lr, [sp], #4
 801355c:	b003      	add	sp, #12
 801355e:	4770      	bx	lr
 8013560:	200002e0 	.word	0x200002e0
 8013564:	ffff0208 	.word	0xffff0208

08013568 <siscanf>:
 8013568:	b40e      	push	{r1, r2, r3}
 801356a:	b530      	push	{r4, r5, lr}
 801356c:	b09c      	sub	sp, #112	@ 0x70
 801356e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8013570:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8013574:	f854 5b04 	ldr.w	r5, [r4], #4
 8013578:	f8ad 2014 	strh.w	r2, [sp, #20]
 801357c:	9002      	str	r0, [sp, #8]
 801357e:	9006      	str	r0, [sp, #24]
 8013580:	f7ec fe86 	bl	8000290 <strlen>
 8013584:	4b0b      	ldr	r3, [pc, #44]	@ (80135b4 <siscanf+0x4c>)
 8013586:	9003      	str	r0, [sp, #12]
 8013588:	9007      	str	r0, [sp, #28]
 801358a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801358c:	480a      	ldr	r0, [pc, #40]	@ (80135b8 <siscanf+0x50>)
 801358e:	9401      	str	r4, [sp, #4]
 8013590:	2300      	movs	r3, #0
 8013592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013594:	9314      	str	r3, [sp, #80]	@ 0x50
 8013596:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801359a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801359e:	462a      	mov	r2, r5
 80135a0:	4623      	mov	r3, r4
 80135a2:	a902      	add	r1, sp, #8
 80135a4:	6800      	ldr	r0, [r0, #0]
 80135a6:	f002 fab9 	bl	8015b1c <__ssvfiscanf_r>
 80135aa:	b01c      	add	sp, #112	@ 0x70
 80135ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135b0:	b003      	add	sp, #12
 80135b2:	4770      	bx	lr
 80135b4:	080135df 	.word	0x080135df
 80135b8:	200002e0 	.word	0x200002e0

080135bc <__sread>:
 80135bc:	b510      	push	{r4, lr}
 80135be:	460c      	mov	r4, r1
 80135c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135c4:	f000 f8ae 	bl	8013724 <_read_r>
 80135c8:	2800      	cmp	r0, #0
 80135ca:	bfab      	itete	ge
 80135cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80135ce:	89a3      	ldrhlt	r3, [r4, #12]
 80135d0:	181b      	addge	r3, r3, r0
 80135d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80135d6:	bfac      	ite	ge
 80135d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80135da:	81a3      	strhlt	r3, [r4, #12]
 80135dc:	bd10      	pop	{r4, pc}

080135de <__seofread>:
 80135de:	2000      	movs	r0, #0
 80135e0:	4770      	bx	lr

080135e2 <__swrite>:
 80135e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135e6:	461f      	mov	r7, r3
 80135e8:	898b      	ldrh	r3, [r1, #12]
 80135ea:	05db      	lsls	r3, r3, #23
 80135ec:	4605      	mov	r5, r0
 80135ee:	460c      	mov	r4, r1
 80135f0:	4616      	mov	r6, r2
 80135f2:	d505      	bpl.n	8013600 <__swrite+0x1e>
 80135f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135f8:	2302      	movs	r3, #2
 80135fa:	2200      	movs	r2, #0
 80135fc:	f000 f880 	bl	8013700 <_lseek_r>
 8013600:	89a3      	ldrh	r3, [r4, #12]
 8013602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801360a:	81a3      	strh	r3, [r4, #12]
 801360c:	4632      	mov	r2, r6
 801360e:	463b      	mov	r3, r7
 8013610:	4628      	mov	r0, r5
 8013612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013616:	f000 b897 	b.w	8013748 <_write_r>

0801361a <__sseek>:
 801361a:	b510      	push	{r4, lr}
 801361c:	460c      	mov	r4, r1
 801361e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013622:	f000 f86d 	bl	8013700 <_lseek_r>
 8013626:	1c43      	adds	r3, r0, #1
 8013628:	89a3      	ldrh	r3, [r4, #12]
 801362a:	bf15      	itete	ne
 801362c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801362e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013632:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013636:	81a3      	strheq	r3, [r4, #12]
 8013638:	bf18      	it	ne
 801363a:	81a3      	strhne	r3, [r4, #12]
 801363c:	bd10      	pop	{r4, pc}

0801363e <__sclose>:
 801363e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013642:	f000 b84d 	b.w	80136e0 <_close_r>

08013646 <memset>:
 8013646:	4402      	add	r2, r0
 8013648:	4603      	mov	r3, r0
 801364a:	4293      	cmp	r3, r2
 801364c:	d100      	bne.n	8013650 <memset+0xa>
 801364e:	4770      	bx	lr
 8013650:	f803 1b01 	strb.w	r1, [r3], #1
 8013654:	e7f9      	b.n	801364a <memset+0x4>

08013656 <strcat>:
 8013656:	b510      	push	{r4, lr}
 8013658:	4602      	mov	r2, r0
 801365a:	7814      	ldrb	r4, [r2, #0]
 801365c:	4613      	mov	r3, r2
 801365e:	3201      	adds	r2, #1
 8013660:	2c00      	cmp	r4, #0
 8013662:	d1fa      	bne.n	801365a <strcat+0x4>
 8013664:	3b01      	subs	r3, #1
 8013666:	f811 2b01 	ldrb.w	r2, [r1], #1
 801366a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801366e:	2a00      	cmp	r2, #0
 8013670:	d1f9      	bne.n	8013666 <strcat+0x10>
 8013672:	bd10      	pop	{r4, pc}

08013674 <strchr>:
 8013674:	b2c9      	uxtb	r1, r1
 8013676:	4603      	mov	r3, r0
 8013678:	4618      	mov	r0, r3
 801367a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801367e:	b112      	cbz	r2, 8013686 <strchr+0x12>
 8013680:	428a      	cmp	r2, r1
 8013682:	d1f9      	bne.n	8013678 <strchr+0x4>
 8013684:	4770      	bx	lr
 8013686:	2900      	cmp	r1, #0
 8013688:	bf18      	it	ne
 801368a:	2000      	movne	r0, #0
 801368c:	4770      	bx	lr

0801368e <strncmp>:
 801368e:	b510      	push	{r4, lr}
 8013690:	b16a      	cbz	r2, 80136ae <strncmp+0x20>
 8013692:	3901      	subs	r1, #1
 8013694:	1884      	adds	r4, r0, r2
 8013696:	f810 2b01 	ldrb.w	r2, [r0], #1
 801369a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801369e:	429a      	cmp	r2, r3
 80136a0:	d103      	bne.n	80136aa <strncmp+0x1c>
 80136a2:	42a0      	cmp	r0, r4
 80136a4:	d001      	beq.n	80136aa <strncmp+0x1c>
 80136a6:	2a00      	cmp	r2, #0
 80136a8:	d1f5      	bne.n	8013696 <strncmp+0x8>
 80136aa:	1ad0      	subs	r0, r2, r3
 80136ac:	bd10      	pop	{r4, pc}
 80136ae:	4610      	mov	r0, r2
 80136b0:	e7fc      	b.n	80136ac <strncmp+0x1e>

080136b2 <strncpy>:
 80136b2:	b510      	push	{r4, lr}
 80136b4:	3901      	subs	r1, #1
 80136b6:	4603      	mov	r3, r0
 80136b8:	b132      	cbz	r2, 80136c8 <strncpy+0x16>
 80136ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80136be:	f803 4b01 	strb.w	r4, [r3], #1
 80136c2:	3a01      	subs	r2, #1
 80136c4:	2c00      	cmp	r4, #0
 80136c6:	d1f7      	bne.n	80136b8 <strncpy+0x6>
 80136c8:	441a      	add	r2, r3
 80136ca:	2100      	movs	r1, #0
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d100      	bne.n	80136d2 <strncpy+0x20>
 80136d0:	bd10      	pop	{r4, pc}
 80136d2:	f803 1b01 	strb.w	r1, [r3], #1
 80136d6:	e7f9      	b.n	80136cc <strncpy+0x1a>

080136d8 <_localeconv_r>:
 80136d8:	4800      	ldr	r0, [pc, #0]	@ (80136dc <_localeconv_r+0x4>)
 80136da:	4770      	bx	lr
 80136dc:	20000264 	.word	0x20000264

080136e0 <_close_r>:
 80136e0:	b538      	push	{r3, r4, r5, lr}
 80136e2:	4d06      	ldr	r5, [pc, #24]	@ (80136fc <_close_r+0x1c>)
 80136e4:	2300      	movs	r3, #0
 80136e6:	4604      	mov	r4, r0
 80136e8:	4608      	mov	r0, r1
 80136ea:	602b      	str	r3, [r5, #0]
 80136ec:	f7f4 f854 	bl	8007798 <_close>
 80136f0:	1c43      	adds	r3, r0, #1
 80136f2:	d102      	bne.n	80136fa <_close_r+0x1a>
 80136f4:	682b      	ldr	r3, [r5, #0]
 80136f6:	b103      	cbz	r3, 80136fa <_close_r+0x1a>
 80136f8:	6023      	str	r3, [r4, #0]
 80136fa:	bd38      	pop	{r3, r4, r5, pc}
 80136fc:	20003514 	.word	0x20003514

08013700 <_lseek_r>:
 8013700:	b538      	push	{r3, r4, r5, lr}
 8013702:	4d07      	ldr	r5, [pc, #28]	@ (8013720 <_lseek_r+0x20>)
 8013704:	4604      	mov	r4, r0
 8013706:	4608      	mov	r0, r1
 8013708:	4611      	mov	r1, r2
 801370a:	2200      	movs	r2, #0
 801370c:	602a      	str	r2, [r5, #0]
 801370e:	461a      	mov	r2, r3
 8013710:	f7f4 f869 	bl	80077e6 <_lseek>
 8013714:	1c43      	adds	r3, r0, #1
 8013716:	d102      	bne.n	801371e <_lseek_r+0x1e>
 8013718:	682b      	ldr	r3, [r5, #0]
 801371a:	b103      	cbz	r3, 801371e <_lseek_r+0x1e>
 801371c:	6023      	str	r3, [r4, #0]
 801371e:	bd38      	pop	{r3, r4, r5, pc}
 8013720:	20003514 	.word	0x20003514

08013724 <_read_r>:
 8013724:	b538      	push	{r3, r4, r5, lr}
 8013726:	4d07      	ldr	r5, [pc, #28]	@ (8013744 <_read_r+0x20>)
 8013728:	4604      	mov	r4, r0
 801372a:	4608      	mov	r0, r1
 801372c:	4611      	mov	r1, r2
 801372e:	2200      	movs	r2, #0
 8013730:	602a      	str	r2, [r5, #0]
 8013732:	461a      	mov	r2, r3
 8013734:	f7f3 fff7 	bl	8007726 <_read>
 8013738:	1c43      	adds	r3, r0, #1
 801373a:	d102      	bne.n	8013742 <_read_r+0x1e>
 801373c:	682b      	ldr	r3, [r5, #0]
 801373e:	b103      	cbz	r3, 8013742 <_read_r+0x1e>
 8013740:	6023      	str	r3, [r4, #0]
 8013742:	bd38      	pop	{r3, r4, r5, pc}
 8013744:	20003514 	.word	0x20003514

08013748 <_write_r>:
 8013748:	b538      	push	{r3, r4, r5, lr}
 801374a:	4d07      	ldr	r5, [pc, #28]	@ (8013768 <_write_r+0x20>)
 801374c:	4604      	mov	r4, r0
 801374e:	4608      	mov	r0, r1
 8013750:	4611      	mov	r1, r2
 8013752:	2200      	movs	r2, #0
 8013754:	602a      	str	r2, [r5, #0]
 8013756:	461a      	mov	r2, r3
 8013758:	f7f4 f802 	bl	8007760 <_write>
 801375c:	1c43      	adds	r3, r0, #1
 801375e:	d102      	bne.n	8013766 <_write_r+0x1e>
 8013760:	682b      	ldr	r3, [r5, #0]
 8013762:	b103      	cbz	r3, 8013766 <_write_r+0x1e>
 8013764:	6023      	str	r3, [r4, #0]
 8013766:	bd38      	pop	{r3, r4, r5, pc}
 8013768:	20003514 	.word	0x20003514

0801376c <__errno>:
 801376c:	4b01      	ldr	r3, [pc, #4]	@ (8013774 <__errno+0x8>)
 801376e:	6818      	ldr	r0, [r3, #0]
 8013770:	4770      	bx	lr
 8013772:	bf00      	nop
 8013774:	200002e0 	.word	0x200002e0

08013778 <__libc_init_array>:
 8013778:	b570      	push	{r4, r5, r6, lr}
 801377a:	4d0d      	ldr	r5, [pc, #52]	@ (80137b0 <__libc_init_array+0x38>)
 801377c:	4c0d      	ldr	r4, [pc, #52]	@ (80137b4 <__libc_init_array+0x3c>)
 801377e:	1b64      	subs	r4, r4, r5
 8013780:	10a4      	asrs	r4, r4, #2
 8013782:	2600      	movs	r6, #0
 8013784:	42a6      	cmp	r6, r4
 8013786:	d109      	bne.n	801379c <__libc_init_array+0x24>
 8013788:	4d0b      	ldr	r5, [pc, #44]	@ (80137b8 <__libc_init_array+0x40>)
 801378a:	4c0c      	ldr	r4, [pc, #48]	@ (80137bc <__libc_init_array+0x44>)
 801378c:	f003 f960 	bl	8016a50 <_init>
 8013790:	1b64      	subs	r4, r4, r5
 8013792:	10a4      	asrs	r4, r4, #2
 8013794:	2600      	movs	r6, #0
 8013796:	42a6      	cmp	r6, r4
 8013798:	d105      	bne.n	80137a6 <__libc_init_array+0x2e>
 801379a:	bd70      	pop	{r4, r5, r6, pc}
 801379c:	f855 3b04 	ldr.w	r3, [r5], #4
 80137a0:	4798      	blx	r3
 80137a2:	3601      	adds	r6, #1
 80137a4:	e7ee      	b.n	8013784 <__libc_init_array+0xc>
 80137a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80137aa:	4798      	blx	r3
 80137ac:	3601      	adds	r6, #1
 80137ae:	e7f2      	b.n	8013796 <__libc_init_array+0x1e>
 80137b0:	08017c2c 	.word	0x08017c2c
 80137b4:	08017c2c 	.word	0x08017c2c
 80137b8:	08017c2c 	.word	0x08017c2c
 80137bc:	08017c30 	.word	0x08017c30

080137c0 <__retarget_lock_init_recursive>:
 80137c0:	4770      	bx	lr

080137c2 <__retarget_lock_acquire_recursive>:
 80137c2:	4770      	bx	lr

080137c4 <__retarget_lock_release_recursive>:
 80137c4:	4770      	bx	lr

080137c6 <strcpy>:
 80137c6:	4603      	mov	r3, r0
 80137c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137cc:	f803 2b01 	strb.w	r2, [r3], #1
 80137d0:	2a00      	cmp	r2, #0
 80137d2:	d1f9      	bne.n	80137c8 <strcpy+0x2>
 80137d4:	4770      	bx	lr

080137d6 <memcpy>:
 80137d6:	440a      	add	r2, r1
 80137d8:	4291      	cmp	r1, r2
 80137da:	f100 33ff 	add.w	r3, r0, #4294967295
 80137de:	d100      	bne.n	80137e2 <memcpy+0xc>
 80137e0:	4770      	bx	lr
 80137e2:	b510      	push	{r4, lr}
 80137e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137ec:	4291      	cmp	r1, r2
 80137ee:	d1f9      	bne.n	80137e4 <memcpy+0xe>
 80137f0:	bd10      	pop	{r4, pc}
 80137f2:	0000      	movs	r0, r0
 80137f4:	0000      	movs	r0, r0
	...

080137f8 <nan>:
 80137f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013800 <nan+0x8>
 80137fc:	4770      	bx	lr
 80137fe:	bf00      	nop
 8013800:	00000000 	.word	0x00000000
 8013804:	7ff80000 	.word	0x7ff80000

08013808 <nanf>:
 8013808:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013810 <nanf+0x8>
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	7fc00000 	.word	0x7fc00000

08013814 <quorem>:
 8013814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013818:	6903      	ldr	r3, [r0, #16]
 801381a:	690c      	ldr	r4, [r1, #16]
 801381c:	42a3      	cmp	r3, r4
 801381e:	4607      	mov	r7, r0
 8013820:	db7e      	blt.n	8013920 <quorem+0x10c>
 8013822:	3c01      	subs	r4, #1
 8013824:	f101 0814 	add.w	r8, r1, #20
 8013828:	00a3      	lsls	r3, r4, #2
 801382a:	f100 0514 	add.w	r5, r0, #20
 801382e:	9300      	str	r3, [sp, #0]
 8013830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013834:	9301      	str	r3, [sp, #4]
 8013836:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801383a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801383e:	3301      	adds	r3, #1
 8013840:	429a      	cmp	r2, r3
 8013842:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013846:	fbb2 f6f3 	udiv	r6, r2, r3
 801384a:	d32e      	bcc.n	80138aa <quorem+0x96>
 801384c:	f04f 0a00 	mov.w	sl, #0
 8013850:	46c4      	mov	ip, r8
 8013852:	46ae      	mov	lr, r5
 8013854:	46d3      	mov	fp, sl
 8013856:	f85c 3b04 	ldr.w	r3, [ip], #4
 801385a:	b298      	uxth	r0, r3
 801385c:	fb06 a000 	mla	r0, r6, r0, sl
 8013860:	0c02      	lsrs	r2, r0, #16
 8013862:	0c1b      	lsrs	r3, r3, #16
 8013864:	fb06 2303 	mla	r3, r6, r3, r2
 8013868:	f8de 2000 	ldr.w	r2, [lr]
 801386c:	b280      	uxth	r0, r0
 801386e:	b292      	uxth	r2, r2
 8013870:	1a12      	subs	r2, r2, r0
 8013872:	445a      	add	r2, fp
 8013874:	f8de 0000 	ldr.w	r0, [lr]
 8013878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801387c:	b29b      	uxth	r3, r3
 801387e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013882:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013886:	b292      	uxth	r2, r2
 8013888:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801388c:	45e1      	cmp	r9, ip
 801388e:	f84e 2b04 	str.w	r2, [lr], #4
 8013892:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013896:	d2de      	bcs.n	8013856 <quorem+0x42>
 8013898:	9b00      	ldr	r3, [sp, #0]
 801389a:	58eb      	ldr	r3, [r5, r3]
 801389c:	b92b      	cbnz	r3, 80138aa <quorem+0x96>
 801389e:	9b01      	ldr	r3, [sp, #4]
 80138a0:	3b04      	subs	r3, #4
 80138a2:	429d      	cmp	r5, r3
 80138a4:	461a      	mov	r2, r3
 80138a6:	d32f      	bcc.n	8013908 <quorem+0xf4>
 80138a8:	613c      	str	r4, [r7, #16]
 80138aa:	4638      	mov	r0, r7
 80138ac:	f001 fd10 	bl	80152d0 <__mcmp>
 80138b0:	2800      	cmp	r0, #0
 80138b2:	db25      	blt.n	8013900 <quorem+0xec>
 80138b4:	4629      	mov	r1, r5
 80138b6:	2000      	movs	r0, #0
 80138b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80138bc:	f8d1 c000 	ldr.w	ip, [r1]
 80138c0:	fa1f fe82 	uxth.w	lr, r2
 80138c4:	fa1f f38c 	uxth.w	r3, ip
 80138c8:	eba3 030e 	sub.w	r3, r3, lr
 80138cc:	4403      	add	r3, r0
 80138ce:	0c12      	lsrs	r2, r2, #16
 80138d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80138d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80138d8:	b29b      	uxth	r3, r3
 80138da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80138de:	45c1      	cmp	r9, r8
 80138e0:	f841 3b04 	str.w	r3, [r1], #4
 80138e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80138e8:	d2e6      	bcs.n	80138b8 <quorem+0xa4>
 80138ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80138ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80138f2:	b922      	cbnz	r2, 80138fe <quorem+0xea>
 80138f4:	3b04      	subs	r3, #4
 80138f6:	429d      	cmp	r5, r3
 80138f8:	461a      	mov	r2, r3
 80138fa:	d30b      	bcc.n	8013914 <quorem+0x100>
 80138fc:	613c      	str	r4, [r7, #16]
 80138fe:	3601      	adds	r6, #1
 8013900:	4630      	mov	r0, r6
 8013902:	b003      	add	sp, #12
 8013904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013908:	6812      	ldr	r2, [r2, #0]
 801390a:	3b04      	subs	r3, #4
 801390c:	2a00      	cmp	r2, #0
 801390e:	d1cb      	bne.n	80138a8 <quorem+0x94>
 8013910:	3c01      	subs	r4, #1
 8013912:	e7c6      	b.n	80138a2 <quorem+0x8e>
 8013914:	6812      	ldr	r2, [r2, #0]
 8013916:	3b04      	subs	r3, #4
 8013918:	2a00      	cmp	r2, #0
 801391a:	d1ef      	bne.n	80138fc <quorem+0xe8>
 801391c:	3c01      	subs	r4, #1
 801391e:	e7ea      	b.n	80138f6 <quorem+0xe2>
 8013920:	2000      	movs	r0, #0
 8013922:	e7ee      	b.n	8013902 <quorem+0xee>
 8013924:	0000      	movs	r0, r0
	...

08013928 <_dtoa_r>:
 8013928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801392c:	69c7      	ldr	r7, [r0, #28]
 801392e:	b099      	sub	sp, #100	@ 0x64
 8013930:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013934:	ec55 4b10 	vmov	r4, r5, d0
 8013938:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801393a:	9109      	str	r1, [sp, #36]	@ 0x24
 801393c:	4683      	mov	fp, r0
 801393e:	920e      	str	r2, [sp, #56]	@ 0x38
 8013940:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013942:	b97f      	cbnz	r7, 8013964 <_dtoa_r+0x3c>
 8013944:	2010      	movs	r0, #16
 8013946:	f001 f937 	bl	8014bb8 <malloc>
 801394a:	4602      	mov	r2, r0
 801394c:	f8cb 001c 	str.w	r0, [fp, #28]
 8013950:	b920      	cbnz	r0, 801395c <_dtoa_r+0x34>
 8013952:	4ba7      	ldr	r3, [pc, #668]	@ (8013bf0 <_dtoa_r+0x2c8>)
 8013954:	21ef      	movs	r1, #239	@ 0xef
 8013956:	48a7      	ldr	r0, [pc, #668]	@ (8013bf4 <_dtoa_r+0x2cc>)
 8013958:	f002 fcec 	bl	8016334 <__assert_func>
 801395c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013960:	6007      	str	r7, [r0, #0]
 8013962:	60c7      	str	r7, [r0, #12]
 8013964:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013968:	6819      	ldr	r1, [r3, #0]
 801396a:	b159      	cbz	r1, 8013984 <_dtoa_r+0x5c>
 801396c:	685a      	ldr	r2, [r3, #4]
 801396e:	604a      	str	r2, [r1, #4]
 8013970:	2301      	movs	r3, #1
 8013972:	4093      	lsls	r3, r2
 8013974:	608b      	str	r3, [r1, #8]
 8013976:	4658      	mov	r0, fp
 8013978:	f001 fa26 	bl	8014dc8 <_Bfree>
 801397c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013980:	2200      	movs	r2, #0
 8013982:	601a      	str	r2, [r3, #0]
 8013984:	1e2b      	subs	r3, r5, #0
 8013986:	bfb9      	ittee	lt
 8013988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801398c:	9303      	strlt	r3, [sp, #12]
 801398e:	2300      	movge	r3, #0
 8013990:	6033      	strge	r3, [r6, #0]
 8013992:	9f03      	ldr	r7, [sp, #12]
 8013994:	4b98      	ldr	r3, [pc, #608]	@ (8013bf8 <_dtoa_r+0x2d0>)
 8013996:	bfbc      	itt	lt
 8013998:	2201      	movlt	r2, #1
 801399a:	6032      	strlt	r2, [r6, #0]
 801399c:	43bb      	bics	r3, r7
 801399e:	d112      	bne.n	80139c6 <_dtoa_r+0x9e>
 80139a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80139a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80139a6:	6013      	str	r3, [r2, #0]
 80139a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80139ac:	4323      	orrs	r3, r4
 80139ae:	f000 854d 	beq.w	801444c <_dtoa_r+0xb24>
 80139b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80139b4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8013c0c <_dtoa_r+0x2e4>
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	f000 854f 	beq.w	801445c <_dtoa_r+0xb34>
 80139be:	f10a 0303 	add.w	r3, sl, #3
 80139c2:	f000 bd49 	b.w	8014458 <_dtoa_r+0xb30>
 80139c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80139ca:	2200      	movs	r2, #0
 80139cc:	ec51 0b17 	vmov	r0, r1, d7
 80139d0:	2300      	movs	r3, #0
 80139d2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80139d6:	f7ed f887 	bl	8000ae8 <__aeabi_dcmpeq>
 80139da:	4680      	mov	r8, r0
 80139dc:	b158      	cbz	r0, 80139f6 <_dtoa_r+0xce>
 80139de:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80139e0:	2301      	movs	r3, #1
 80139e2:	6013      	str	r3, [r2, #0]
 80139e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80139e6:	b113      	cbz	r3, 80139ee <_dtoa_r+0xc6>
 80139e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80139ea:	4b84      	ldr	r3, [pc, #528]	@ (8013bfc <_dtoa_r+0x2d4>)
 80139ec:	6013      	str	r3, [r2, #0]
 80139ee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8013c10 <_dtoa_r+0x2e8>
 80139f2:	f000 bd33 	b.w	801445c <_dtoa_r+0xb34>
 80139f6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80139fa:	aa16      	add	r2, sp, #88	@ 0x58
 80139fc:	a917      	add	r1, sp, #92	@ 0x5c
 80139fe:	4658      	mov	r0, fp
 8013a00:	f001 fd86 	bl	8015510 <__d2b>
 8013a04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013a08:	4681      	mov	r9, r0
 8013a0a:	2e00      	cmp	r6, #0
 8013a0c:	d077      	beq.n	8013afe <_dtoa_r+0x1d6>
 8013a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013a10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013a18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013a20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013a24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013a28:	4619      	mov	r1, r3
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	4b74      	ldr	r3, [pc, #464]	@ (8013c00 <_dtoa_r+0x2d8>)
 8013a2e:	f7ec fc3b 	bl	80002a8 <__aeabi_dsub>
 8013a32:	a369      	add	r3, pc, #420	@ (adr r3, 8013bd8 <_dtoa_r+0x2b0>)
 8013a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a38:	f7ec fdee 	bl	8000618 <__aeabi_dmul>
 8013a3c:	a368      	add	r3, pc, #416	@ (adr r3, 8013be0 <_dtoa_r+0x2b8>)
 8013a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a42:	f7ec fc33 	bl	80002ac <__adddf3>
 8013a46:	4604      	mov	r4, r0
 8013a48:	4630      	mov	r0, r6
 8013a4a:	460d      	mov	r5, r1
 8013a4c:	f7ec fd7a 	bl	8000544 <__aeabi_i2d>
 8013a50:	a365      	add	r3, pc, #404	@ (adr r3, 8013be8 <_dtoa_r+0x2c0>)
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	f7ec fddf 	bl	8000618 <__aeabi_dmul>
 8013a5a:	4602      	mov	r2, r0
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	4620      	mov	r0, r4
 8013a60:	4629      	mov	r1, r5
 8013a62:	f7ec fc23 	bl	80002ac <__adddf3>
 8013a66:	4604      	mov	r4, r0
 8013a68:	460d      	mov	r5, r1
 8013a6a:	f7ed f885 	bl	8000b78 <__aeabi_d2iz>
 8013a6e:	2200      	movs	r2, #0
 8013a70:	4607      	mov	r7, r0
 8013a72:	2300      	movs	r3, #0
 8013a74:	4620      	mov	r0, r4
 8013a76:	4629      	mov	r1, r5
 8013a78:	f7ed f840 	bl	8000afc <__aeabi_dcmplt>
 8013a7c:	b140      	cbz	r0, 8013a90 <_dtoa_r+0x168>
 8013a7e:	4638      	mov	r0, r7
 8013a80:	f7ec fd60 	bl	8000544 <__aeabi_i2d>
 8013a84:	4622      	mov	r2, r4
 8013a86:	462b      	mov	r3, r5
 8013a88:	f7ed f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 8013a8c:	b900      	cbnz	r0, 8013a90 <_dtoa_r+0x168>
 8013a8e:	3f01      	subs	r7, #1
 8013a90:	2f16      	cmp	r7, #22
 8013a92:	d851      	bhi.n	8013b38 <_dtoa_r+0x210>
 8013a94:	4b5b      	ldr	r3, [pc, #364]	@ (8013c04 <_dtoa_r+0x2dc>)
 8013a96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013aa2:	f7ed f82b 	bl	8000afc <__aeabi_dcmplt>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d048      	beq.n	8013b3c <_dtoa_r+0x214>
 8013aaa:	3f01      	subs	r7, #1
 8013aac:	2300      	movs	r3, #0
 8013aae:	9312      	str	r3, [sp, #72]	@ 0x48
 8013ab0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013ab2:	1b9b      	subs	r3, r3, r6
 8013ab4:	1e5a      	subs	r2, r3, #1
 8013ab6:	bf44      	itt	mi
 8013ab8:	f1c3 0801 	rsbmi	r8, r3, #1
 8013abc:	2300      	movmi	r3, #0
 8013abe:	9208      	str	r2, [sp, #32]
 8013ac0:	bf54      	ite	pl
 8013ac2:	f04f 0800 	movpl.w	r8, #0
 8013ac6:	9308      	strmi	r3, [sp, #32]
 8013ac8:	2f00      	cmp	r7, #0
 8013aca:	db39      	blt.n	8013b40 <_dtoa_r+0x218>
 8013acc:	9b08      	ldr	r3, [sp, #32]
 8013ace:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013ad0:	443b      	add	r3, r7
 8013ad2:	9308      	str	r3, [sp, #32]
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ada:	2b09      	cmp	r3, #9
 8013adc:	d864      	bhi.n	8013ba8 <_dtoa_r+0x280>
 8013ade:	2b05      	cmp	r3, #5
 8013ae0:	bfc4      	itt	gt
 8013ae2:	3b04      	subgt	r3, #4
 8013ae4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ae8:	f1a3 0302 	sub.w	r3, r3, #2
 8013aec:	bfcc      	ite	gt
 8013aee:	2400      	movgt	r4, #0
 8013af0:	2401      	movle	r4, #1
 8013af2:	2b03      	cmp	r3, #3
 8013af4:	d863      	bhi.n	8013bbe <_dtoa_r+0x296>
 8013af6:	e8df f003 	tbb	[pc, r3]
 8013afa:	372a      	.short	0x372a
 8013afc:	5535      	.short	0x5535
 8013afe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8013b02:	441e      	add	r6, r3
 8013b04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8013b08:	2b20      	cmp	r3, #32
 8013b0a:	bfc1      	itttt	gt
 8013b0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8013b10:	409f      	lslgt	r7, r3
 8013b12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8013b16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8013b1a:	bfd6      	itet	le
 8013b1c:	f1c3 0320 	rsble	r3, r3, #32
 8013b20:	ea47 0003 	orrgt.w	r0, r7, r3
 8013b24:	fa04 f003 	lslle.w	r0, r4, r3
 8013b28:	f7ec fcfc 	bl	8000524 <__aeabi_ui2d>
 8013b2c:	2201      	movs	r2, #1
 8013b2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8013b32:	3e01      	subs	r6, #1
 8013b34:	9214      	str	r2, [sp, #80]	@ 0x50
 8013b36:	e777      	b.n	8013a28 <_dtoa_r+0x100>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e7b8      	b.n	8013aae <_dtoa_r+0x186>
 8013b3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8013b3e:	e7b7      	b.n	8013ab0 <_dtoa_r+0x188>
 8013b40:	427b      	negs	r3, r7
 8013b42:	930a      	str	r3, [sp, #40]	@ 0x28
 8013b44:	2300      	movs	r3, #0
 8013b46:	eba8 0807 	sub.w	r8, r8, r7
 8013b4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013b4c:	e7c4      	b.n	8013ad8 <_dtoa_r+0x1b0>
 8013b4e:	2300      	movs	r3, #0
 8013b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	dc35      	bgt.n	8013bc4 <_dtoa_r+0x29c>
 8013b58:	2301      	movs	r3, #1
 8013b5a:	9300      	str	r3, [sp, #0]
 8013b5c:	9307      	str	r3, [sp, #28]
 8013b5e:	461a      	mov	r2, r3
 8013b60:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b62:	e00b      	b.n	8013b7c <_dtoa_r+0x254>
 8013b64:	2301      	movs	r3, #1
 8013b66:	e7f3      	b.n	8013b50 <_dtoa_r+0x228>
 8013b68:	2300      	movs	r3, #0
 8013b6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013b6e:	18fb      	adds	r3, r7, r3
 8013b70:	9300      	str	r3, [sp, #0]
 8013b72:	3301      	adds	r3, #1
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	9307      	str	r3, [sp, #28]
 8013b78:	bfb8      	it	lt
 8013b7a:	2301      	movlt	r3, #1
 8013b7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8013b80:	2100      	movs	r1, #0
 8013b82:	2204      	movs	r2, #4
 8013b84:	f102 0514 	add.w	r5, r2, #20
 8013b88:	429d      	cmp	r5, r3
 8013b8a:	d91f      	bls.n	8013bcc <_dtoa_r+0x2a4>
 8013b8c:	6041      	str	r1, [r0, #4]
 8013b8e:	4658      	mov	r0, fp
 8013b90:	f001 f8da 	bl	8014d48 <_Balloc>
 8013b94:	4682      	mov	sl, r0
 8013b96:	2800      	cmp	r0, #0
 8013b98:	d13c      	bne.n	8013c14 <_dtoa_r+0x2ec>
 8013b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8013c08 <_dtoa_r+0x2e0>)
 8013b9c:	4602      	mov	r2, r0
 8013b9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013ba2:	e6d8      	b.n	8013956 <_dtoa_r+0x2e>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	e7e0      	b.n	8013b6a <_dtoa_r+0x242>
 8013ba8:	2401      	movs	r4, #1
 8013baa:	2300      	movs	r3, #0
 8013bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8013bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	9307      	str	r3, [sp, #28]
 8013bb8:	2200      	movs	r2, #0
 8013bba:	2312      	movs	r3, #18
 8013bbc:	e7d0      	b.n	8013b60 <_dtoa_r+0x238>
 8013bbe:	2301      	movs	r3, #1
 8013bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bc2:	e7f5      	b.n	8013bb0 <_dtoa_r+0x288>
 8013bc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	9307      	str	r3, [sp, #28]
 8013bca:	e7d7      	b.n	8013b7c <_dtoa_r+0x254>
 8013bcc:	3101      	adds	r1, #1
 8013bce:	0052      	lsls	r2, r2, #1
 8013bd0:	e7d8      	b.n	8013b84 <_dtoa_r+0x25c>
 8013bd2:	bf00      	nop
 8013bd4:	f3af 8000 	nop.w
 8013bd8:	636f4361 	.word	0x636f4361
 8013bdc:	3fd287a7 	.word	0x3fd287a7
 8013be0:	8b60c8b3 	.word	0x8b60c8b3
 8013be4:	3fc68a28 	.word	0x3fc68a28
 8013be8:	509f79fb 	.word	0x509f79fb
 8013bec:	3fd34413 	.word	0x3fd34413
 8013bf0:	0801787c 	.word	0x0801787c
 8013bf4:	08017893 	.word	0x08017893
 8013bf8:	7ff00000 	.word	0x7ff00000
 8013bfc:	08017be1 	.word	0x08017be1
 8013c00:	3ff80000 	.word	0x3ff80000
 8013c04:	080179f0 	.word	0x080179f0
 8013c08:	080178eb 	.word	0x080178eb
 8013c0c:	08017878 	.word	0x08017878
 8013c10:	08017be0 	.word	0x08017be0
 8013c14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013c18:	6018      	str	r0, [r3, #0]
 8013c1a:	9b07      	ldr	r3, [sp, #28]
 8013c1c:	2b0e      	cmp	r3, #14
 8013c1e:	f200 80a4 	bhi.w	8013d6a <_dtoa_r+0x442>
 8013c22:	2c00      	cmp	r4, #0
 8013c24:	f000 80a1 	beq.w	8013d6a <_dtoa_r+0x442>
 8013c28:	2f00      	cmp	r7, #0
 8013c2a:	dd33      	ble.n	8013c94 <_dtoa_r+0x36c>
 8013c2c:	4bad      	ldr	r3, [pc, #692]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013c2e:	f007 020f 	and.w	r2, r7, #15
 8013c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c36:	ed93 7b00 	vldr	d7, [r3]
 8013c3a:	05f8      	lsls	r0, r7, #23
 8013c3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013c40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8013c44:	d516      	bpl.n	8013c74 <_dtoa_r+0x34c>
 8013c46:	4ba8      	ldr	r3, [pc, #672]	@ (8013ee8 <_dtoa_r+0x5c0>)
 8013c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013c50:	f7ec fe0c 	bl	800086c <__aeabi_ddiv>
 8013c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c58:	f004 040f 	and.w	r4, r4, #15
 8013c5c:	2603      	movs	r6, #3
 8013c5e:	4da2      	ldr	r5, [pc, #648]	@ (8013ee8 <_dtoa_r+0x5c0>)
 8013c60:	b954      	cbnz	r4, 8013c78 <_dtoa_r+0x350>
 8013c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c6a:	f7ec fdff 	bl	800086c <__aeabi_ddiv>
 8013c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c72:	e028      	b.n	8013cc6 <_dtoa_r+0x39e>
 8013c74:	2602      	movs	r6, #2
 8013c76:	e7f2      	b.n	8013c5e <_dtoa_r+0x336>
 8013c78:	07e1      	lsls	r1, r4, #31
 8013c7a:	d508      	bpl.n	8013c8e <_dtoa_r+0x366>
 8013c7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013c84:	f7ec fcc8 	bl	8000618 <__aeabi_dmul>
 8013c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c8c:	3601      	adds	r6, #1
 8013c8e:	1064      	asrs	r4, r4, #1
 8013c90:	3508      	adds	r5, #8
 8013c92:	e7e5      	b.n	8013c60 <_dtoa_r+0x338>
 8013c94:	f000 80d2 	beq.w	8013e3c <_dtoa_r+0x514>
 8013c98:	427c      	negs	r4, r7
 8013c9a:	4b92      	ldr	r3, [pc, #584]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013c9c:	4d92      	ldr	r5, [pc, #584]	@ (8013ee8 <_dtoa_r+0x5c0>)
 8013c9e:	f004 020f 	and.w	r2, r4, #15
 8013ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013caa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013cae:	f7ec fcb3 	bl	8000618 <__aeabi_dmul>
 8013cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013cb6:	1124      	asrs	r4, r4, #4
 8013cb8:	2300      	movs	r3, #0
 8013cba:	2602      	movs	r6, #2
 8013cbc:	2c00      	cmp	r4, #0
 8013cbe:	f040 80b2 	bne.w	8013e26 <_dtoa_r+0x4fe>
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d1d3      	bne.n	8013c6e <_dtoa_r+0x346>
 8013cc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013cc8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f000 80b7 	beq.w	8013e40 <_dtoa_r+0x518>
 8013cd2:	4b86      	ldr	r3, [pc, #536]	@ (8013eec <_dtoa_r+0x5c4>)
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	4620      	mov	r0, r4
 8013cd8:	4629      	mov	r1, r5
 8013cda:	f7ec ff0f 	bl	8000afc <__aeabi_dcmplt>
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	f000 80ae 	beq.w	8013e40 <_dtoa_r+0x518>
 8013ce4:	9b07      	ldr	r3, [sp, #28]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f000 80aa 	beq.w	8013e40 <_dtoa_r+0x518>
 8013cec:	9b00      	ldr	r3, [sp, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	dd37      	ble.n	8013d62 <_dtoa_r+0x43a>
 8013cf2:	1e7b      	subs	r3, r7, #1
 8013cf4:	9304      	str	r3, [sp, #16]
 8013cf6:	4620      	mov	r0, r4
 8013cf8:	4b7d      	ldr	r3, [pc, #500]	@ (8013ef0 <_dtoa_r+0x5c8>)
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	4629      	mov	r1, r5
 8013cfe:	f7ec fc8b 	bl	8000618 <__aeabi_dmul>
 8013d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013d06:	9c00      	ldr	r4, [sp, #0]
 8013d08:	3601      	adds	r6, #1
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f7ec fc1a 	bl	8000544 <__aeabi_i2d>
 8013d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d14:	f7ec fc80 	bl	8000618 <__aeabi_dmul>
 8013d18:	4b76      	ldr	r3, [pc, #472]	@ (8013ef4 <_dtoa_r+0x5cc>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	f7ec fac6 	bl	80002ac <__adddf3>
 8013d20:	4605      	mov	r5, r0
 8013d22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013d26:	2c00      	cmp	r4, #0
 8013d28:	f040 808d 	bne.w	8013e46 <_dtoa_r+0x51e>
 8013d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d30:	4b71      	ldr	r3, [pc, #452]	@ (8013ef8 <_dtoa_r+0x5d0>)
 8013d32:	2200      	movs	r2, #0
 8013d34:	f7ec fab8 	bl	80002a8 <__aeabi_dsub>
 8013d38:	4602      	mov	r2, r0
 8013d3a:	460b      	mov	r3, r1
 8013d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d40:	462a      	mov	r2, r5
 8013d42:	4633      	mov	r3, r6
 8013d44:	f7ec fef8 	bl	8000b38 <__aeabi_dcmpgt>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	f040 828b 	bne.w	8014264 <_dtoa_r+0x93c>
 8013d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d52:	462a      	mov	r2, r5
 8013d54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8013d58:	f7ec fed0 	bl	8000afc <__aeabi_dcmplt>
 8013d5c:	2800      	cmp	r0, #0
 8013d5e:	f040 8128 	bne.w	8013fb2 <_dtoa_r+0x68a>
 8013d62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8013d66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013d6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f2c0 815a 	blt.w	8014026 <_dtoa_r+0x6fe>
 8013d72:	2f0e      	cmp	r7, #14
 8013d74:	f300 8157 	bgt.w	8014026 <_dtoa_r+0x6fe>
 8013d78:	4b5a      	ldr	r3, [pc, #360]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013d7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013d7e:	ed93 7b00 	vldr	d7, [r3]
 8013d82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	ed8d 7b00 	vstr	d7, [sp]
 8013d8a:	da03      	bge.n	8013d94 <_dtoa_r+0x46c>
 8013d8c:	9b07      	ldr	r3, [sp, #28]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f340 8101 	ble.w	8013f96 <_dtoa_r+0x66e>
 8013d94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8013d98:	4656      	mov	r6, sl
 8013d9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d9e:	4620      	mov	r0, r4
 8013da0:	4629      	mov	r1, r5
 8013da2:	f7ec fd63 	bl	800086c <__aeabi_ddiv>
 8013da6:	f7ec fee7 	bl	8000b78 <__aeabi_d2iz>
 8013daa:	4680      	mov	r8, r0
 8013dac:	f7ec fbca 	bl	8000544 <__aeabi_i2d>
 8013db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013db4:	f7ec fc30 	bl	8000618 <__aeabi_dmul>
 8013db8:	4602      	mov	r2, r0
 8013dba:	460b      	mov	r3, r1
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013dc4:	f7ec fa70 	bl	80002a8 <__aeabi_dsub>
 8013dc8:	f806 4b01 	strb.w	r4, [r6], #1
 8013dcc:	9d07      	ldr	r5, [sp, #28]
 8013dce:	eba6 040a 	sub.w	r4, r6, sl
 8013dd2:	42a5      	cmp	r5, r4
 8013dd4:	4602      	mov	r2, r0
 8013dd6:	460b      	mov	r3, r1
 8013dd8:	f040 8117 	bne.w	801400a <_dtoa_r+0x6e2>
 8013ddc:	f7ec fa66 	bl	80002ac <__adddf3>
 8013de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013de4:	4604      	mov	r4, r0
 8013de6:	460d      	mov	r5, r1
 8013de8:	f7ec fea6 	bl	8000b38 <__aeabi_dcmpgt>
 8013dec:	2800      	cmp	r0, #0
 8013dee:	f040 80f9 	bne.w	8013fe4 <_dtoa_r+0x6bc>
 8013df2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013df6:	4620      	mov	r0, r4
 8013df8:	4629      	mov	r1, r5
 8013dfa:	f7ec fe75 	bl	8000ae8 <__aeabi_dcmpeq>
 8013dfe:	b118      	cbz	r0, 8013e08 <_dtoa_r+0x4e0>
 8013e00:	f018 0f01 	tst.w	r8, #1
 8013e04:	f040 80ee 	bne.w	8013fe4 <_dtoa_r+0x6bc>
 8013e08:	4649      	mov	r1, r9
 8013e0a:	4658      	mov	r0, fp
 8013e0c:	f000 ffdc 	bl	8014dc8 <_Bfree>
 8013e10:	2300      	movs	r3, #0
 8013e12:	7033      	strb	r3, [r6, #0]
 8013e14:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013e16:	3701      	adds	r7, #1
 8013e18:	601f      	str	r7, [r3, #0]
 8013e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	f000 831d 	beq.w	801445c <_dtoa_r+0xb34>
 8013e22:	601e      	str	r6, [r3, #0]
 8013e24:	e31a      	b.n	801445c <_dtoa_r+0xb34>
 8013e26:	07e2      	lsls	r2, r4, #31
 8013e28:	d505      	bpl.n	8013e36 <_dtoa_r+0x50e>
 8013e2a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013e2e:	f7ec fbf3 	bl	8000618 <__aeabi_dmul>
 8013e32:	3601      	adds	r6, #1
 8013e34:	2301      	movs	r3, #1
 8013e36:	1064      	asrs	r4, r4, #1
 8013e38:	3508      	adds	r5, #8
 8013e3a:	e73f      	b.n	8013cbc <_dtoa_r+0x394>
 8013e3c:	2602      	movs	r6, #2
 8013e3e:	e742      	b.n	8013cc6 <_dtoa_r+0x39e>
 8013e40:	9c07      	ldr	r4, [sp, #28]
 8013e42:	9704      	str	r7, [sp, #16]
 8013e44:	e761      	b.n	8013d0a <_dtoa_r+0x3e2>
 8013e46:	4b27      	ldr	r3, [pc, #156]	@ (8013ee4 <_dtoa_r+0x5bc>)
 8013e48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8013e4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013e4e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013e52:	4454      	add	r4, sl
 8013e54:	2900      	cmp	r1, #0
 8013e56:	d053      	beq.n	8013f00 <_dtoa_r+0x5d8>
 8013e58:	4928      	ldr	r1, [pc, #160]	@ (8013efc <_dtoa_r+0x5d4>)
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	f7ec fd06 	bl	800086c <__aeabi_ddiv>
 8013e60:	4633      	mov	r3, r6
 8013e62:	462a      	mov	r2, r5
 8013e64:	f7ec fa20 	bl	80002a8 <__aeabi_dsub>
 8013e68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013e6c:	4656      	mov	r6, sl
 8013e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e72:	f7ec fe81 	bl	8000b78 <__aeabi_d2iz>
 8013e76:	4605      	mov	r5, r0
 8013e78:	f7ec fb64 	bl	8000544 <__aeabi_i2d>
 8013e7c:	4602      	mov	r2, r0
 8013e7e:	460b      	mov	r3, r1
 8013e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e84:	f7ec fa10 	bl	80002a8 <__aeabi_dsub>
 8013e88:	3530      	adds	r5, #48	@ 0x30
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	460b      	mov	r3, r1
 8013e8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013e92:	f806 5b01 	strb.w	r5, [r6], #1
 8013e96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013e9a:	f7ec fe2f 	bl	8000afc <__aeabi_dcmplt>
 8013e9e:	2800      	cmp	r0, #0
 8013ea0:	d171      	bne.n	8013f86 <_dtoa_r+0x65e>
 8013ea2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ea6:	4911      	ldr	r1, [pc, #68]	@ (8013eec <_dtoa_r+0x5c4>)
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	f7ec f9fd 	bl	80002a8 <__aeabi_dsub>
 8013eae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013eb2:	f7ec fe23 	bl	8000afc <__aeabi_dcmplt>
 8013eb6:	2800      	cmp	r0, #0
 8013eb8:	f040 8095 	bne.w	8013fe6 <_dtoa_r+0x6be>
 8013ebc:	42a6      	cmp	r6, r4
 8013ebe:	f43f af50 	beq.w	8013d62 <_dtoa_r+0x43a>
 8013ec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8013ef0 <_dtoa_r+0x5c8>)
 8013ec8:	2200      	movs	r2, #0
 8013eca:	f7ec fba5 	bl	8000618 <__aeabi_dmul>
 8013ece:	4b08      	ldr	r3, [pc, #32]	@ (8013ef0 <_dtoa_r+0x5c8>)
 8013ed0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013eda:	f7ec fb9d 	bl	8000618 <__aeabi_dmul>
 8013ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ee2:	e7c4      	b.n	8013e6e <_dtoa_r+0x546>
 8013ee4:	080179f0 	.word	0x080179f0
 8013ee8:	080179c8 	.word	0x080179c8
 8013eec:	3ff00000 	.word	0x3ff00000
 8013ef0:	40240000 	.word	0x40240000
 8013ef4:	401c0000 	.word	0x401c0000
 8013ef8:	40140000 	.word	0x40140000
 8013efc:	3fe00000 	.word	0x3fe00000
 8013f00:	4631      	mov	r1, r6
 8013f02:	4628      	mov	r0, r5
 8013f04:	f7ec fb88 	bl	8000618 <__aeabi_dmul>
 8013f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013f0c:	9415      	str	r4, [sp, #84]	@ 0x54
 8013f0e:	4656      	mov	r6, sl
 8013f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f14:	f7ec fe30 	bl	8000b78 <__aeabi_d2iz>
 8013f18:	4605      	mov	r5, r0
 8013f1a:	f7ec fb13 	bl	8000544 <__aeabi_i2d>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	460b      	mov	r3, r1
 8013f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f26:	f7ec f9bf 	bl	80002a8 <__aeabi_dsub>
 8013f2a:	3530      	adds	r5, #48	@ 0x30
 8013f2c:	f806 5b01 	strb.w	r5, [r6], #1
 8013f30:	4602      	mov	r2, r0
 8013f32:	460b      	mov	r3, r1
 8013f34:	42a6      	cmp	r6, r4
 8013f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f3a:	f04f 0200 	mov.w	r2, #0
 8013f3e:	d124      	bne.n	8013f8a <_dtoa_r+0x662>
 8013f40:	4bac      	ldr	r3, [pc, #688]	@ (80141f4 <_dtoa_r+0x8cc>)
 8013f42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013f46:	f7ec f9b1 	bl	80002ac <__adddf3>
 8013f4a:	4602      	mov	r2, r0
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f52:	f7ec fdf1 	bl	8000b38 <__aeabi_dcmpgt>
 8013f56:	2800      	cmp	r0, #0
 8013f58:	d145      	bne.n	8013fe6 <_dtoa_r+0x6be>
 8013f5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013f5e:	49a5      	ldr	r1, [pc, #660]	@ (80141f4 <_dtoa_r+0x8cc>)
 8013f60:	2000      	movs	r0, #0
 8013f62:	f7ec f9a1 	bl	80002a8 <__aeabi_dsub>
 8013f66:	4602      	mov	r2, r0
 8013f68:	460b      	mov	r3, r1
 8013f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013f6e:	f7ec fdc5 	bl	8000afc <__aeabi_dcmplt>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	f43f aef5 	beq.w	8013d62 <_dtoa_r+0x43a>
 8013f78:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8013f7a:	1e73      	subs	r3, r6, #1
 8013f7c:	9315      	str	r3, [sp, #84]	@ 0x54
 8013f7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013f82:	2b30      	cmp	r3, #48	@ 0x30
 8013f84:	d0f8      	beq.n	8013f78 <_dtoa_r+0x650>
 8013f86:	9f04      	ldr	r7, [sp, #16]
 8013f88:	e73e      	b.n	8013e08 <_dtoa_r+0x4e0>
 8013f8a:	4b9b      	ldr	r3, [pc, #620]	@ (80141f8 <_dtoa_r+0x8d0>)
 8013f8c:	f7ec fb44 	bl	8000618 <__aeabi_dmul>
 8013f90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013f94:	e7bc      	b.n	8013f10 <_dtoa_r+0x5e8>
 8013f96:	d10c      	bne.n	8013fb2 <_dtoa_r+0x68a>
 8013f98:	4b98      	ldr	r3, [pc, #608]	@ (80141fc <_dtoa_r+0x8d4>)
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013fa0:	f7ec fb3a 	bl	8000618 <__aeabi_dmul>
 8013fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013fa8:	f7ec fdbc 	bl	8000b24 <__aeabi_dcmpge>
 8013fac:	2800      	cmp	r0, #0
 8013fae:	f000 8157 	beq.w	8014260 <_dtoa_r+0x938>
 8013fb2:	2400      	movs	r4, #0
 8013fb4:	4625      	mov	r5, r4
 8013fb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fb8:	43db      	mvns	r3, r3
 8013fba:	9304      	str	r3, [sp, #16]
 8013fbc:	4656      	mov	r6, sl
 8013fbe:	2700      	movs	r7, #0
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	4658      	mov	r0, fp
 8013fc4:	f000 ff00 	bl	8014dc8 <_Bfree>
 8013fc8:	2d00      	cmp	r5, #0
 8013fca:	d0dc      	beq.n	8013f86 <_dtoa_r+0x65e>
 8013fcc:	b12f      	cbz	r7, 8013fda <_dtoa_r+0x6b2>
 8013fce:	42af      	cmp	r7, r5
 8013fd0:	d003      	beq.n	8013fda <_dtoa_r+0x6b2>
 8013fd2:	4639      	mov	r1, r7
 8013fd4:	4658      	mov	r0, fp
 8013fd6:	f000 fef7 	bl	8014dc8 <_Bfree>
 8013fda:	4629      	mov	r1, r5
 8013fdc:	4658      	mov	r0, fp
 8013fde:	f000 fef3 	bl	8014dc8 <_Bfree>
 8013fe2:	e7d0      	b.n	8013f86 <_dtoa_r+0x65e>
 8013fe4:	9704      	str	r7, [sp, #16]
 8013fe6:	4633      	mov	r3, r6
 8013fe8:	461e      	mov	r6, r3
 8013fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013fee:	2a39      	cmp	r2, #57	@ 0x39
 8013ff0:	d107      	bne.n	8014002 <_dtoa_r+0x6da>
 8013ff2:	459a      	cmp	sl, r3
 8013ff4:	d1f8      	bne.n	8013fe8 <_dtoa_r+0x6c0>
 8013ff6:	9a04      	ldr	r2, [sp, #16]
 8013ff8:	3201      	adds	r2, #1
 8013ffa:	9204      	str	r2, [sp, #16]
 8013ffc:	2230      	movs	r2, #48	@ 0x30
 8013ffe:	f88a 2000 	strb.w	r2, [sl]
 8014002:	781a      	ldrb	r2, [r3, #0]
 8014004:	3201      	adds	r2, #1
 8014006:	701a      	strb	r2, [r3, #0]
 8014008:	e7bd      	b.n	8013f86 <_dtoa_r+0x65e>
 801400a:	4b7b      	ldr	r3, [pc, #492]	@ (80141f8 <_dtoa_r+0x8d0>)
 801400c:	2200      	movs	r2, #0
 801400e:	f7ec fb03 	bl	8000618 <__aeabi_dmul>
 8014012:	2200      	movs	r2, #0
 8014014:	2300      	movs	r3, #0
 8014016:	4604      	mov	r4, r0
 8014018:	460d      	mov	r5, r1
 801401a:	f7ec fd65 	bl	8000ae8 <__aeabi_dcmpeq>
 801401e:	2800      	cmp	r0, #0
 8014020:	f43f aebb 	beq.w	8013d9a <_dtoa_r+0x472>
 8014024:	e6f0      	b.n	8013e08 <_dtoa_r+0x4e0>
 8014026:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014028:	2a00      	cmp	r2, #0
 801402a:	f000 80db 	beq.w	80141e4 <_dtoa_r+0x8bc>
 801402e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014030:	2a01      	cmp	r2, #1
 8014032:	f300 80bf 	bgt.w	80141b4 <_dtoa_r+0x88c>
 8014036:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014038:	2a00      	cmp	r2, #0
 801403a:	f000 80b7 	beq.w	80141ac <_dtoa_r+0x884>
 801403e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014042:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014044:	4646      	mov	r6, r8
 8014046:	9a08      	ldr	r2, [sp, #32]
 8014048:	2101      	movs	r1, #1
 801404a:	441a      	add	r2, r3
 801404c:	4658      	mov	r0, fp
 801404e:	4498      	add	r8, r3
 8014050:	9208      	str	r2, [sp, #32]
 8014052:	f000 ffb7 	bl	8014fc4 <__i2b>
 8014056:	4605      	mov	r5, r0
 8014058:	b15e      	cbz	r6, 8014072 <_dtoa_r+0x74a>
 801405a:	9b08      	ldr	r3, [sp, #32]
 801405c:	2b00      	cmp	r3, #0
 801405e:	dd08      	ble.n	8014072 <_dtoa_r+0x74a>
 8014060:	42b3      	cmp	r3, r6
 8014062:	9a08      	ldr	r2, [sp, #32]
 8014064:	bfa8      	it	ge
 8014066:	4633      	movge	r3, r6
 8014068:	eba8 0803 	sub.w	r8, r8, r3
 801406c:	1af6      	subs	r6, r6, r3
 801406e:	1ad3      	subs	r3, r2, r3
 8014070:	9308      	str	r3, [sp, #32]
 8014072:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014074:	b1f3      	cbz	r3, 80140b4 <_dtoa_r+0x78c>
 8014076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014078:	2b00      	cmp	r3, #0
 801407a:	f000 80b7 	beq.w	80141ec <_dtoa_r+0x8c4>
 801407e:	b18c      	cbz	r4, 80140a4 <_dtoa_r+0x77c>
 8014080:	4629      	mov	r1, r5
 8014082:	4622      	mov	r2, r4
 8014084:	4658      	mov	r0, fp
 8014086:	f001 f85d 	bl	8015144 <__pow5mult>
 801408a:	464a      	mov	r2, r9
 801408c:	4601      	mov	r1, r0
 801408e:	4605      	mov	r5, r0
 8014090:	4658      	mov	r0, fp
 8014092:	f000 ffad 	bl	8014ff0 <__multiply>
 8014096:	4649      	mov	r1, r9
 8014098:	9004      	str	r0, [sp, #16]
 801409a:	4658      	mov	r0, fp
 801409c:	f000 fe94 	bl	8014dc8 <_Bfree>
 80140a0:	9b04      	ldr	r3, [sp, #16]
 80140a2:	4699      	mov	r9, r3
 80140a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140a6:	1b1a      	subs	r2, r3, r4
 80140a8:	d004      	beq.n	80140b4 <_dtoa_r+0x78c>
 80140aa:	4649      	mov	r1, r9
 80140ac:	4658      	mov	r0, fp
 80140ae:	f001 f849 	bl	8015144 <__pow5mult>
 80140b2:	4681      	mov	r9, r0
 80140b4:	2101      	movs	r1, #1
 80140b6:	4658      	mov	r0, fp
 80140b8:	f000 ff84 	bl	8014fc4 <__i2b>
 80140bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140be:	4604      	mov	r4, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	f000 81cf 	beq.w	8014464 <_dtoa_r+0xb3c>
 80140c6:	461a      	mov	r2, r3
 80140c8:	4601      	mov	r1, r0
 80140ca:	4658      	mov	r0, fp
 80140cc:	f001 f83a 	bl	8015144 <__pow5mult>
 80140d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140d2:	2b01      	cmp	r3, #1
 80140d4:	4604      	mov	r4, r0
 80140d6:	f300 8095 	bgt.w	8014204 <_dtoa_r+0x8dc>
 80140da:	9b02      	ldr	r3, [sp, #8]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f040 8087 	bne.w	80141f0 <_dtoa_r+0x8c8>
 80140e2:	9b03      	ldr	r3, [sp, #12]
 80140e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	f040 8089 	bne.w	8014200 <_dtoa_r+0x8d8>
 80140ee:	9b03      	ldr	r3, [sp, #12]
 80140f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80140f4:	0d1b      	lsrs	r3, r3, #20
 80140f6:	051b      	lsls	r3, r3, #20
 80140f8:	b12b      	cbz	r3, 8014106 <_dtoa_r+0x7de>
 80140fa:	9b08      	ldr	r3, [sp, #32]
 80140fc:	3301      	adds	r3, #1
 80140fe:	9308      	str	r3, [sp, #32]
 8014100:	f108 0801 	add.w	r8, r8, #1
 8014104:	2301      	movs	r3, #1
 8014106:	930a      	str	r3, [sp, #40]	@ 0x28
 8014108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801410a:	2b00      	cmp	r3, #0
 801410c:	f000 81b0 	beq.w	8014470 <_dtoa_r+0xb48>
 8014110:	6923      	ldr	r3, [r4, #16]
 8014112:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014116:	6918      	ldr	r0, [r3, #16]
 8014118:	f000 ff08 	bl	8014f2c <__hi0bits>
 801411c:	f1c0 0020 	rsb	r0, r0, #32
 8014120:	9b08      	ldr	r3, [sp, #32]
 8014122:	4418      	add	r0, r3
 8014124:	f010 001f 	ands.w	r0, r0, #31
 8014128:	d077      	beq.n	801421a <_dtoa_r+0x8f2>
 801412a:	f1c0 0320 	rsb	r3, r0, #32
 801412e:	2b04      	cmp	r3, #4
 8014130:	dd6b      	ble.n	801420a <_dtoa_r+0x8e2>
 8014132:	9b08      	ldr	r3, [sp, #32]
 8014134:	f1c0 001c 	rsb	r0, r0, #28
 8014138:	4403      	add	r3, r0
 801413a:	4480      	add	r8, r0
 801413c:	4406      	add	r6, r0
 801413e:	9308      	str	r3, [sp, #32]
 8014140:	f1b8 0f00 	cmp.w	r8, #0
 8014144:	dd05      	ble.n	8014152 <_dtoa_r+0x82a>
 8014146:	4649      	mov	r1, r9
 8014148:	4642      	mov	r2, r8
 801414a:	4658      	mov	r0, fp
 801414c:	f001 f854 	bl	80151f8 <__lshift>
 8014150:	4681      	mov	r9, r0
 8014152:	9b08      	ldr	r3, [sp, #32]
 8014154:	2b00      	cmp	r3, #0
 8014156:	dd05      	ble.n	8014164 <_dtoa_r+0x83c>
 8014158:	4621      	mov	r1, r4
 801415a:	461a      	mov	r2, r3
 801415c:	4658      	mov	r0, fp
 801415e:	f001 f84b 	bl	80151f8 <__lshift>
 8014162:	4604      	mov	r4, r0
 8014164:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014166:	2b00      	cmp	r3, #0
 8014168:	d059      	beq.n	801421e <_dtoa_r+0x8f6>
 801416a:	4621      	mov	r1, r4
 801416c:	4648      	mov	r0, r9
 801416e:	f001 f8af 	bl	80152d0 <__mcmp>
 8014172:	2800      	cmp	r0, #0
 8014174:	da53      	bge.n	801421e <_dtoa_r+0x8f6>
 8014176:	1e7b      	subs	r3, r7, #1
 8014178:	9304      	str	r3, [sp, #16]
 801417a:	4649      	mov	r1, r9
 801417c:	2300      	movs	r3, #0
 801417e:	220a      	movs	r2, #10
 8014180:	4658      	mov	r0, fp
 8014182:	f000 fe43 	bl	8014e0c <__multadd>
 8014186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014188:	4681      	mov	r9, r0
 801418a:	2b00      	cmp	r3, #0
 801418c:	f000 8172 	beq.w	8014474 <_dtoa_r+0xb4c>
 8014190:	2300      	movs	r3, #0
 8014192:	4629      	mov	r1, r5
 8014194:	220a      	movs	r2, #10
 8014196:	4658      	mov	r0, fp
 8014198:	f000 fe38 	bl	8014e0c <__multadd>
 801419c:	9b00      	ldr	r3, [sp, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	4605      	mov	r5, r0
 80141a2:	dc67      	bgt.n	8014274 <_dtoa_r+0x94c>
 80141a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a6:	2b02      	cmp	r3, #2
 80141a8:	dc41      	bgt.n	801422e <_dtoa_r+0x906>
 80141aa:	e063      	b.n	8014274 <_dtoa_r+0x94c>
 80141ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80141ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80141b2:	e746      	b.n	8014042 <_dtoa_r+0x71a>
 80141b4:	9b07      	ldr	r3, [sp, #28]
 80141b6:	1e5c      	subs	r4, r3, #1
 80141b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141ba:	42a3      	cmp	r3, r4
 80141bc:	bfbf      	itttt	lt
 80141be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80141c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80141c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80141c4:	1ae3      	sublt	r3, r4, r3
 80141c6:	bfb4      	ite	lt
 80141c8:	18d2      	addlt	r2, r2, r3
 80141ca:	1b1c      	subge	r4, r3, r4
 80141cc:	9b07      	ldr	r3, [sp, #28]
 80141ce:	bfbc      	itt	lt
 80141d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80141d2:	2400      	movlt	r4, #0
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	bfb5      	itete	lt
 80141d8:	eba8 0603 	sublt.w	r6, r8, r3
 80141dc:	9b07      	ldrge	r3, [sp, #28]
 80141de:	2300      	movlt	r3, #0
 80141e0:	4646      	movge	r6, r8
 80141e2:	e730      	b.n	8014046 <_dtoa_r+0x71e>
 80141e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80141e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80141e8:	4646      	mov	r6, r8
 80141ea:	e735      	b.n	8014058 <_dtoa_r+0x730>
 80141ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80141ee:	e75c      	b.n	80140aa <_dtoa_r+0x782>
 80141f0:	2300      	movs	r3, #0
 80141f2:	e788      	b.n	8014106 <_dtoa_r+0x7de>
 80141f4:	3fe00000 	.word	0x3fe00000
 80141f8:	40240000 	.word	0x40240000
 80141fc:	40140000 	.word	0x40140000
 8014200:	9b02      	ldr	r3, [sp, #8]
 8014202:	e780      	b.n	8014106 <_dtoa_r+0x7de>
 8014204:	2300      	movs	r3, #0
 8014206:	930a      	str	r3, [sp, #40]	@ 0x28
 8014208:	e782      	b.n	8014110 <_dtoa_r+0x7e8>
 801420a:	d099      	beq.n	8014140 <_dtoa_r+0x818>
 801420c:	9a08      	ldr	r2, [sp, #32]
 801420e:	331c      	adds	r3, #28
 8014210:	441a      	add	r2, r3
 8014212:	4498      	add	r8, r3
 8014214:	441e      	add	r6, r3
 8014216:	9208      	str	r2, [sp, #32]
 8014218:	e792      	b.n	8014140 <_dtoa_r+0x818>
 801421a:	4603      	mov	r3, r0
 801421c:	e7f6      	b.n	801420c <_dtoa_r+0x8e4>
 801421e:	9b07      	ldr	r3, [sp, #28]
 8014220:	9704      	str	r7, [sp, #16]
 8014222:	2b00      	cmp	r3, #0
 8014224:	dc20      	bgt.n	8014268 <_dtoa_r+0x940>
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801422a:	2b02      	cmp	r3, #2
 801422c:	dd1e      	ble.n	801426c <_dtoa_r+0x944>
 801422e:	9b00      	ldr	r3, [sp, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	f47f aec0 	bne.w	8013fb6 <_dtoa_r+0x68e>
 8014236:	4621      	mov	r1, r4
 8014238:	2205      	movs	r2, #5
 801423a:	4658      	mov	r0, fp
 801423c:	f000 fde6 	bl	8014e0c <__multadd>
 8014240:	4601      	mov	r1, r0
 8014242:	4604      	mov	r4, r0
 8014244:	4648      	mov	r0, r9
 8014246:	f001 f843 	bl	80152d0 <__mcmp>
 801424a:	2800      	cmp	r0, #0
 801424c:	f77f aeb3 	ble.w	8013fb6 <_dtoa_r+0x68e>
 8014250:	4656      	mov	r6, sl
 8014252:	2331      	movs	r3, #49	@ 0x31
 8014254:	f806 3b01 	strb.w	r3, [r6], #1
 8014258:	9b04      	ldr	r3, [sp, #16]
 801425a:	3301      	adds	r3, #1
 801425c:	9304      	str	r3, [sp, #16]
 801425e:	e6ae      	b.n	8013fbe <_dtoa_r+0x696>
 8014260:	9c07      	ldr	r4, [sp, #28]
 8014262:	9704      	str	r7, [sp, #16]
 8014264:	4625      	mov	r5, r4
 8014266:	e7f3      	b.n	8014250 <_dtoa_r+0x928>
 8014268:	9b07      	ldr	r3, [sp, #28]
 801426a:	9300      	str	r3, [sp, #0]
 801426c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801426e:	2b00      	cmp	r3, #0
 8014270:	f000 8104 	beq.w	801447c <_dtoa_r+0xb54>
 8014274:	2e00      	cmp	r6, #0
 8014276:	dd05      	ble.n	8014284 <_dtoa_r+0x95c>
 8014278:	4629      	mov	r1, r5
 801427a:	4632      	mov	r2, r6
 801427c:	4658      	mov	r0, fp
 801427e:	f000 ffbb 	bl	80151f8 <__lshift>
 8014282:	4605      	mov	r5, r0
 8014284:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014286:	2b00      	cmp	r3, #0
 8014288:	d05a      	beq.n	8014340 <_dtoa_r+0xa18>
 801428a:	6869      	ldr	r1, [r5, #4]
 801428c:	4658      	mov	r0, fp
 801428e:	f000 fd5b 	bl	8014d48 <_Balloc>
 8014292:	4606      	mov	r6, r0
 8014294:	b928      	cbnz	r0, 80142a2 <_dtoa_r+0x97a>
 8014296:	4b84      	ldr	r3, [pc, #528]	@ (80144a8 <_dtoa_r+0xb80>)
 8014298:	4602      	mov	r2, r0
 801429a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801429e:	f7ff bb5a 	b.w	8013956 <_dtoa_r+0x2e>
 80142a2:	692a      	ldr	r2, [r5, #16]
 80142a4:	3202      	adds	r2, #2
 80142a6:	0092      	lsls	r2, r2, #2
 80142a8:	f105 010c 	add.w	r1, r5, #12
 80142ac:	300c      	adds	r0, #12
 80142ae:	f7ff fa92 	bl	80137d6 <memcpy>
 80142b2:	2201      	movs	r2, #1
 80142b4:	4631      	mov	r1, r6
 80142b6:	4658      	mov	r0, fp
 80142b8:	f000 ff9e 	bl	80151f8 <__lshift>
 80142bc:	f10a 0301 	add.w	r3, sl, #1
 80142c0:	9307      	str	r3, [sp, #28]
 80142c2:	9b00      	ldr	r3, [sp, #0]
 80142c4:	4453      	add	r3, sl
 80142c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80142c8:	9b02      	ldr	r3, [sp, #8]
 80142ca:	f003 0301 	and.w	r3, r3, #1
 80142ce:	462f      	mov	r7, r5
 80142d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80142d2:	4605      	mov	r5, r0
 80142d4:	9b07      	ldr	r3, [sp, #28]
 80142d6:	4621      	mov	r1, r4
 80142d8:	3b01      	subs	r3, #1
 80142da:	4648      	mov	r0, r9
 80142dc:	9300      	str	r3, [sp, #0]
 80142de:	f7ff fa99 	bl	8013814 <quorem>
 80142e2:	4639      	mov	r1, r7
 80142e4:	9002      	str	r0, [sp, #8]
 80142e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80142ea:	4648      	mov	r0, r9
 80142ec:	f000 fff0 	bl	80152d0 <__mcmp>
 80142f0:	462a      	mov	r2, r5
 80142f2:	9008      	str	r0, [sp, #32]
 80142f4:	4621      	mov	r1, r4
 80142f6:	4658      	mov	r0, fp
 80142f8:	f001 f806 	bl	8015308 <__mdiff>
 80142fc:	68c2      	ldr	r2, [r0, #12]
 80142fe:	4606      	mov	r6, r0
 8014300:	bb02      	cbnz	r2, 8014344 <_dtoa_r+0xa1c>
 8014302:	4601      	mov	r1, r0
 8014304:	4648      	mov	r0, r9
 8014306:	f000 ffe3 	bl	80152d0 <__mcmp>
 801430a:	4602      	mov	r2, r0
 801430c:	4631      	mov	r1, r6
 801430e:	4658      	mov	r0, fp
 8014310:	920e      	str	r2, [sp, #56]	@ 0x38
 8014312:	f000 fd59 	bl	8014dc8 <_Bfree>
 8014316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014318:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801431a:	9e07      	ldr	r6, [sp, #28]
 801431c:	ea43 0102 	orr.w	r1, r3, r2
 8014320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014322:	4319      	orrs	r1, r3
 8014324:	d110      	bne.n	8014348 <_dtoa_r+0xa20>
 8014326:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801432a:	d029      	beq.n	8014380 <_dtoa_r+0xa58>
 801432c:	9b08      	ldr	r3, [sp, #32]
 801432e:	2b00      	cmp	r3, #0
 8014330:	dd02      	ble.n	8014338 <_dtoa_r+0xa10>
 8014332:	9b02      	ldr	r3, [sp, #8]
 8014334:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014338:	9b00      	ldr	r3, [sp, #0]
 801433a:	f883 8000 	strb.w	r8, [r3]
 801433e:	e63f      	b.n	8013fc0 <_dtoa_r+0x698>
 8014340:	4628      	mov	r0, r5
 8014342:	e7bb      	b.n	80142bc <_dtoa_r+0x994>
 8014344:	2201      	movs	r2, #1
 8014346:	e7e1      	b.n	801430c <_dtoa_r+0x9e4>
 8014348:	9b08      	ldr	r3, [sp, #32]
 801434a:	2b00      	cmp	r3, #0
 801434c:	db04      	blt.n	8014358 <_dtoa_r+0xa30>
 801434e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014350:	430b      	orrs	r3, r1
 8014352:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014354:	430b      	orrs	r3, r1
 8014356:	d120      	bne.n	801439a <_dtoa_r+0xa72>
 8014358:	2a00      	cmp	r2, #0
 801435a:	dded      	ble.n	8014338 <_dtoa_r+0xa10>
 801435c:	4649      	mov	r1, r9
 801435e:	2201      	movs	r2, #1
 8014360:	4658      	mov	r0, fp
 8014362:	f000 ff49 	bl	80151f8 <__lshift>
 8014366:	4621      	mov	r1, r4
 8014368:	4681      	mov	r9, r0
 801436a:	f000 ffb1 	bl	80152d0 <__mcmp>
 801436e:	2800      	cmp	r0, #0
 8014370:	dc03      	bgt.n	801437a <_dtoa_r+0xa52>
 8014372:	d1e1      	bne.n	8014338 <_dtoa_r+0xa10>
 8014374:	f018 0f01 	tst.w	r8, #1
 8014378:	d0de      	beq.n	8014338 <_dtoa_r+0xa10>
 801437a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801437e:	d1d8      	bne.n	8014332 <_dtoa_r+0xa0a>
 8014380:	9a00      	ldr	r2, [sp, #0]
 8014382:	2339      	movs	r3, #57	@ 0x39
 8014384:	7013      	strb	r3, [r2, #0]
 8014386:	4633      	mov	r3, r6
 8014388:	461e      	mov	r6, r3
 801438a:	3b01      	subs	r3, #1
 801438c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014390:	2a39      	cmp	r2, #57	@ 0x39
 8014392:	d052      	beq.n	801443a <_dtoa_r+0xb12>
 8014394:	3201      	adds	r2, #1
 8014396:	701a      	strb	r2, [r3, #0]
 8014398:	e612      	b.n	8013fc0 <_dtoa_r+0x698>
 801439a:	2a00      	cmp	r2, #0
 801439c:	dd07      	ble.n	80143ae <_dtoa_r+0xa86>
 801439e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80143a2:	d0ed      	beq.n	8014380 <_dtoa_r+0xa58>
 80143a4:	9a00      	ldr	r2, [sp, #0]
 80143a6:	f108 0301 	add.w	r3, r8, #1
 80143aa:	7013      	strb	r3, [r2, #0]
 80143ac:	e608      	b.n	8013fc0 <_dtoa_r+0x698>
 80143ae:	9b07      	ldr	r3, [sp, #28]
 80143b0:	9a07      	ldr	r2, [sp, #28]
 80143b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80143b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80143b8:	4293      	cmp	r3, r2
 80143ba:	d028      	beq.n	801440e <_dtoa_r+0xae6>
 80143bc:	4649      	mov	r1, r9
 80143be:	2300      	movs	r3, #0
 80143c0:	220a      	movs	r2, #10
 80143c2:	4658      	mov	r0, fp
 80143c4:	f000 fd22 	bl	8014e0c <__multadd>
 80143c8:	42af      	cmp	r7, r5
 80143ca:	4681      	mov	r9, r0
 80143cc:	f04f 0300 	mov.w	r3, #0
 80143d0:	f04f 020a 	mov.w	r2, #10
 80143d4:	4639      	mov	r1, r7
 80143d6:	4658      	mov	r0, fp
 80143d8:	d107      	bne.n	80143ea <_dtoa_r+0xac2>
 80143da:	f000 fd17 	bl	8014e0c <__multadd>
 80143de:	4607      	mov	r7, r0
 80143e0:	4605      	mov	r5, r0
 80143e2:	9b07      	ldr	r3, [sp, #28]
 80143e4:	3301      	adds	r3, #1
 80143e6:	9307      	str	r3, [sp, #28]
 80143e8:	e774      	b.n	80142d4 <_dtoa_r+0x9ac>
 80143ea:	f000 fd0f 	bl	8014e0c <__multadd>
 80143ee:	4629      	mov	r1, r5
 80143f0:	4607      	mov	r7, r0
 80143f2:	2300      	movs	r3, #0
 80143f4:	220a      	movs	r2, #10
 80143f6:	4658      	mov	r0, fp
 80143f8:	f000 fd08 	bl	8014e0c <__multadd>
 80143fc:	4605      	mov	r5, r0
 80143fe:	e7f0      	b.n	80143e2 <_dtoa_r+0xaba>
 8014400:	9b00      	ldr	r3, [sp, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	bfcc      	ite	gt
 8014406:	461e      	movgt	r6, r3
 8014408:	2601      	movle	r6, #1
 801440a:	4456      	add	r6, sl
 801440c:	2700      	movs	r7, #0
 801440e:	4649      	mov	r1, r9
 8014410:	2201      	movs	r2, #1
 8014412:	4658      	mov	r0, fp
 8014414:	f000 fef0 	bl	80151f8 <__lshift>
 8014418:	4621      	mov	r1, r4
 801441a:	4681      	mov	r9, r0
 801441c:	f000 ff58 	bl	80152d0 <__mcmp>
 8014420:	2800      	cmp	r0, #0
 8014422:	dcb0      	bgt.n	8014386 <_dtoa_r+0xa5e>
 8014424:	d102      	bne.n	801442c <_dtoa_r+0xb04>
 8014426:	f018 0f01 	tst.w	r8, #1
 801442a:	d1ac      	bne.n	8014386 <_dtoa_r+0xa5e>
 801442c:	4633      	mov	r3, r6
 801442e:	461e      	mov	r6, r3
 8014430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014434:	2a30      	cmp	r2, #48	@ 0x30
 8014436:	d0fa      	beq.n	801442e <_dtoa_r+0xb06>
 8014438:	e5c2      	b.n	8013fc0 <_dtoa_r+0x698>
 801443a:	459a      	cmp	sl, r3
 801443c:	d1a4      	bne.n	8014388 <_dtoa_r+0xa60>
 801443e:	9b04      	ldr	r3, [sp, #16]
 8014440:	3301      	adds	r3, #1
 8014442:	9304      	str	r3, [sp, #16]
 8014444:	2331      	movs	r3, #49	@ 0x31
 8014446:	f88a 3000 	strb.w	r3, [sl]
 801444a:	e5b9      	b.n	8013fc0 <_dtoa_r+0x698>
 801444c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801444e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80144ac <_dtoa_r+0xb84>
 8014452:	b11b      	cbz	r3, 801445c <_dtoa_r+0xb34>
 8014454:	f10a 0308 	add.w	r3, sl, #8
 8014458:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801445a:	6013      	str	r3, [r2, #0]
 801445c:	4650      	mov	r0, sl
 801445e:	b019      	add	sp, #100	@ 0x64
 8014460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014466:	2b01      	cmp	r3, #1
 8014468:	f77f ae37 	ble.w	80140da <_dtoa_r+0x7b2>
 801446c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801446e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014470:	2001      	movs	r0, #1
 8014472:	e655      	b.n	8014120 <_dtoa_r+0x7f8>
 8014474:	9b00      	ldr	r3, [sp, #0]
 8014476:	2b00      	cmp	r3, #0
 8014478:	f77f aed6 	ble.w	8014228 <_dtoa_r+0x900>
 801447c:	4656      	mov	r6, sl
 801447e:	4621      	mov	r1, r4
 8014480:	4648      	mov	r0, r9
 8014482:	f7ff f9c7 	bl	8013814 <quorem>
 8014486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801448a:	f806 8b01 	strb.w	r8, [r6], #1
 801448e:	9b00      	ldr	r3, [sp, #0]
 8014490:	eba6 020a 	sub.w	r2, r6, sl
 8014494:	4293      	cmp	r3, r2
 8014496:	ddb3      	ble.n	8014400 <_dtoa_r+0xad8>
 8014498:	4649      	mov	r1, r9
 801449a:	2300      	movs	r3, #0
 801449c:	220a      	movs	r2, #10
 801449e:	4658      	mov	r0, fp
 80144a0:	f000 fcb4 	bl	8014e0c <__multadd>
 80144a4:	4681      	mov	r9, r0
 80144a6:	e7ea      	b.n	801447e <_dtoa_r+0xb56>
 80144a8:	080178eb 	.word	0x080178eb
 80144ac:	0801786f 	.word	0x0801786f

080144b0 <_free_r>:
 80144b0:	b538      	push	{r3, r4, r5, lr}
 80144b2:	4605      	mov	r5, r0
 80144b4:	2900      	cmp	r1, #0
 80144b6:	d041      	beq.n	801453c <_free_r+0x8c>
 80144b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144bc:	1f0c      	subs	r4, r1, #4
 80144be:	2b00      	cmp	r3, #0
 80144c0:	bfb8      	it	lt
 80144c2:	18e4      	addlt	r4, r4, r3
 80144c4:	f000 fc34 	bl	8014d30 <__malloc_lock>
 80144c8:	4a1d      	ldr	r2, [pc, #116]	@ (8014540 <_free_r+0x90>)
 80144ca:	6813      	ldr	r3, [r2, #0]
 80144cc:	b933      	cbnz	r3, 80144dc <_free_r+0x2c>
 80144ce:	6063      	str	r3, [r4, #4]
 80144d0:	6014      	str	r4, [r2, #0]
 80144d2:	4628      	mov	r0, r5
 80144d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80144d8:	f000 bc30 	b.w	8014d3c <__malloc_unlock>
 80144dc:	42a3      	cmp	r3, r4
 80144de:	d908      	bls.n	80144f2 <_free_r+0x42>
 80144e0:	6820      	ldr	r0, [r4, #0]
 80144e2:	1821      	adds	r1, r4, r0
 80144e4:	428b      	cmp	r3, r1
 80144e6:	bf01      	itttt	eq
 80144e8:	6819      	ldreq	r1, [r3, #0]
 80144ea:	685b      	ldreq	r3, [r3, #4]
 80144ec:	1809      	addeq	r1, r1, r0
 80144ee:	6021      	streq	r1, [r4, #0]
 80144f0:	e7ed      	b.n	80144ce <_free_r+0x1e>
 80144f2:	461a      	mov	r2, r3
 80144f4:	685b      	ldr	r3, [r3, #4]
 80144f6:	b10b      	cbz	r3, 80144fc <_free_r+0x4c>
 80144f8:	42a3      	cmp	r3, r4
 80144fa:	d9fa      	bls.n	80144f2 <_free_r+0x42>
 80144fc:	6811      	ldr	r1, [r2, #0]
 80144fe:	1850      	adds	r0, r2, r1
 8014500:	42a0      	cmp	r0, r4
 8014502:	d10b      	bne.n	801451c <_free_r+0x6c>
 8014504:	6820      	ldr	r0, [r4, #0]
 8014506:	4401      	add	r1, r0
 8014508:	1850      	adds	r0, r2, r1
 801450a:	4283      	cmp	r3, r0
 801450c:	6011      	str	r1, [r2, #0]
 801450e:	d1e0      	bne.n	80144d2 <_free_r+0x22>
 8014510:	6818      	ldr	r0, [r3, #0]
 8014512:	685b      	ldr	r3, [r3, #4]
 8014514:	6053      	str	r3, [r2, #4]
 8014516:	4408      	add	r0, r1
 8014518:	6010      	str	r0, [r2, #0]
 801451a:	e7da      	b.n	80144d2 <_free_r+0x22>
 801451c:	d902      	bls.n	8014524 <_free_r+0x74>
 801451e:	230c      	movs	r3, #12
 8014520:	602b      	str	r3, [r5, #0]
 8014522:	e7d6      	b.n	80144d2 <_free_r+0x22>
 8014524:	6820      	ldr	r0, [r4, #0]
 8014526:	1821      	adds	r1, r4, r0
 8014528:	428b      	cmp	r3, r1
 801452a:	bf04      	itt	eq
 801452c:	6819      	ldreq	r1, [r3, #0]
 801452e:	685b      	ldreq	r3, [r3, #4]
 8014530:	6063      	str	r3, [r4, #4]
 8014532:	bf04      	itt	eq
 8014534:	1809      	addeq	r1, r1, r0
 8014536:	6021      	streq	r1, [r4, #0]
 8014538:	6054      	str	r4, [r2, #4]
 801453a:	e7ca      	b.n	80144d2 <_free_r+0x22>
 801453c:	bd38      	pop	{r3, r4, r5, pc}
 801453e:	bf00      	nop
 8014540:	20003520 	.word	0x20003520

08014544 <rshift>:
 8014544:	6903      	ldr	r3, [r0, #16]
 8014546:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801454a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801454e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014552:	f100 0414 	add.w	r4, r0, #20
 8014556:	dd45      	ble.n	80145e4 <rshift+0xa0>
 8014558:	f011 011f 	ands.w	r1, r1, #31
 801455c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014560:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014564:	d10c      	bne.n	8014580 <rshift+0x3c>
 8014566:	f100 0710 	add.w	r7, r0, #16
 801456a:	4629      	mov	r1, r5
 801456c:	42b1      	cmp	r1, r6
 801456e:	d334      	bcc.n	80145da <rshift+0x96>
 8014570:	1a9b      	subs	r3, r3, r2
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	1eea      	subs	r2, r5, #3
 8014576:	4296      	cmp	r6, r2
 8014578:	bf38      	it	cc
 801457a:	2300      	movcc	r3, #0
 801457c:	4423      	add	r3, r4
 801457e:	e015      	b.n	80145ac <rshift+0x68>
 8014580:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014584:	f1c1 0820 	rsb	r8, r1, #32
 8014588:	40cf      	lsrs	r7, r1
 801458a:	f105 0e04 	add.w	lr, r5, #4
 801458e:	46a1      	mov	r9, r4
 8014590:	4576      	cmp	r6, lr
 8014592:	46f4      	mov	ip, lr
 8014594:	d815      	bhi.n	80145c2 <rshift+0x7e>
 8014596:	1a9a      	subs	r2, r3, r2
 8014598:	0092      	lsls	r2, r2, #2
 801459a:	3a04      	subs	r2, #4
 801459c:	3501      	adds	r5, #1
 801459e:	42ae      	cmp	r6, r5
 80145a0:	bf38      	it	cc
 80145a2:	2200      	movcc	r2, #0
 80145a4:	18a3      	adds	r3, r4, r2
 80145a6:	50a7      	str	r7, [r4, r2]
 80145a8:	b107      	cbz	r7, 80145ac <rshift+0x68>
 80145aa:	3304      	adds	r3, #4
 80145ac:	1b1a      	subs	r2, r3, r4
 80145ae:	42a3      	cmp	r3, r4
 80145b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80145b4:	bf08      	it	eq
 80145b6:	2300      	moveq	r3, #0
 80145b8:	6102      	str	r2, [r0, #16]
 80145ba:	bf08      	it	eq
 80145bc:	6143      	streq	r3, [r0, #20]
 80145be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145c2:	f8dc c000 	ldr.w	ip, [ip]
 80145c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80145ca:	ea4c 0707 	orr.w	r7, ip, r7
 80145ce:	f849 7b04 	str.w	r7, [r9], #4
 80145d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80145d6:	40cf      	lsrs	r7, r1
 80145d8:	e7da      	b.n	8014590 <rshift+0x4c>
 80145da:	f851 cb04 	ldr.w	ip, [r1], #4
 80145de:	f847 cf04 	str.w	ip, [r7, #4]!
 80145e2:	e7c3      	b.n	801456c <rshift+0x28>
 80145e4:	4623      	mov	r3, r4
 80145e6:	e7e1      	b.n	80145ac <rshift+0x68>

080145e8 <__hexdig_fun>:
 80145e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80145ec:	2b09      	cmp	r3, #9
 80145ee:	d802      	bhi.n	80145f6 <__hexdig_fun+0xe>
 80145f0:	3820      	subs	r0, #32
 80145f2:	b2c0      	uxtb	r0, r0
 80145f4:	4770      	bx	lr
 80145f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80145fa:	2b05      	cmp	r3, #5
 80145fc:	d801      	bhi.n	8014602 <__hexdig_fun+0x1a>
 80145fe:	3847      	subs	r0, #71	@ 0x47
 8014600:	e7f7      	b.n	80145f2 <__hexdig_fun+0xa>
 8014602:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014606:	2b05      	cmp	r3, #5
 8014608:	d801      	bhi.n	801460e <__hexdig_fun+0x26>
 801460a:	3827      	subs	r0, #39	@ 0x27
 801460c:	e7f1      	b.n	80145f2 <__hexdig_fun+0xa>
 801460e:	2000      	movs	r0, #0
 8014610:	4770      	bx	lr
	...

08014614 <__gethex>:
 8014614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014618:	b085      	sub	sp, #20
 801461a:	468a      	mov	sl, r1
 801461c:	9302      	str	r3, [sp, #8]
 801461e:	680b      	ldr	r3, [r1, #0]
 8014620:	9001      	str	r0, [sp, #4]
 8014622:	4690      	mov	r8, r2
 8014624:	1c9c      	adds	r4, r3, #2
 8014626:	46a1      	mov	r9, r4
 8014628:	f814 0b01 	ldrb.w	r0, [r4], #1
 801462c:	2830      	cmp	r0, #48	@ 0x30
 801462e:	d0fa      	beq.n	8014626 <__gethex+0x12>
 8014630:	eba9 0303 	sub.w	r3, r9, r3
 8014634:	f1a3 0b02 	sub.w	fp, r3, #2
 8014638:	f7ff ffd6 	bl	80145e8 <__hexdig_fun>
 801463c:	4605      	mov	r5, r0
 801463e:	2800      	cmp	r0, #0
 8014640:	d168      	bne.n	8014714 <__gethex+0x100>
 8014642:	49a0      	ldr	r1, [pc, #640]	@ (80148c4 <__gethex+0x2b0>)
 8014644:	2201      	movs	r2, #1
 8014646:	4648      	mov	r0, r9
 8014648:	f7ff f821 	bl	801368e <strncmp>
 801464c:	4607      	mov	r7, r0
 801464e:	2800      	cmp	r0, #0
 8014650:	d167      	bne.n	8014722 <__gethex+0x10e>
 8014652:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014656:	4626      	mov	r6, r4
 8014658:	f7ff ffc6 	bl	80145e8 <__hexdig_fun>
 801465c:	2800      	cmp	r0, #0
 801465e:	d062      	beq.n	8014726 <__gethex+0x112>
 8014660:	4623      	mov	r3, r4
 8014662:	7818      	ldrb	r0, [r3, #0]
 8014664:	2830      	cmp	r0, #48	@ 0x30
 8014666:	4699      	mov	r9, r3
 8014668:	f103 0301 	add.w	r3, r3, #1
 801466c:	d0f9      	beq.n	8014662 <__gethex+0x4e>
 801466e:	f7ff ffbb 	bl	80145e8 <__hexdig_fun>
 8014672:	fab0 f580 	clz	r5, r0
 8014676:	096d      	lsrs	r5, r5, #5
 8014678:	f04f 0b01 	mov.w	fp, #1
 801467c:	464a      	mov	r2, r9
 801467e:	4616      	mov	r6, r2
 8014680:	3201      	adds	r2, #1
 8014682:	7830      	ldrb	r0, [r6, #0]
 8014684:	f7ff ffb0 	bl	80145e8 <__hexdig_fun>
 8014688:	2800      	cmp	r0, #0
 801468a:	d1f8      	bne.n	801467e <__gethex+0x6a>
 801468c:	498d      	ldr	r1, [pc, #564]	@ (80148c4 <__gethex+0x2b0>)
 801468e:	2201      	movs	r2, #1
 8014690:	4630      	mov	r0, r6
 8014692:	f7fe fffc 	bl	801368e <strncmp>
 8014696:	2800      	cmp	r0, #0
 8014698:	d13f      	bne.n	801471a <__gethex+0x106>
 801469a:	b944      	cbnz	r4, 80146ae <__gethex+0x9a>
 801469c:	1c74      	adds	r4, r6, #1
 801469e:	4622      	mov	r2, r4
 80146a0:	4616      	mov	r6, r2
 80146a2:	3201      	adds	r2, #1
 80146a4:	7830      	ldrb	r0, [r6, #0]
 80146a6:	f7ff ff9f 	bl	80145e8 <__hexdig_fun>
 80146aa:	2800      	cmp	r0, #0
 80146ac:	d1f8      	bne.n	80146a0 <__gethex+0x8c>
 80146ae:	1ba4      	subs	r4, r4, r6
 80146b0:	00a7      	lsls	r7, r4, #2
 80146b2:	7833      	ldrb	r3, [r6, #0]
 80146b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80146b8:	2b50      	cmp	r3, #80	@ 0x50
 80146ba:	d13e      	bne.n	801473a <__gethex+0x126>
 80146bc:	7873      	ldrb	r3, [r6, #1]
 80146be:	2b2b      	cmp	r3, #43	@ 0x2b
 80146c0:	d033      	beq.n	801472a <__gethex+0x116>
 80146c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80146c4:	d034      	beq.n	8014730 <__gethex+0x11c>
 80146c6:	1c71      	adds	r1, r6, #1
 80146c8:	2400      	movs	r4, #0
 80146ca:	7808      	ldrb	r0, [r1, #0]
 80146cc:	f7ff ff8c 	bl	80145e8 <__hexdig_fun>
 80146d0:	1e43      	subs	r3, r0, #1
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	2b18      	cmp	r3, #24
 80146d6:	d830      	bhi.n	801473a <__gethex+0x126>
 80146d8:	f1a0 0210 	sub.w	r2, r0, #16
 80146dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80146e0:	f7ff ff82 	bl	80145e8 <__hexdig_fun>
 80146e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80146e8:	fa5f fc8c 	uxtb.w	ip, ip
 80146ec:	f1bc 0f18 	cmp.w	ip, #24
 80146f0:	f04f 030a 	mov.w	r3, #10
 80146f4:	d91e      	bls.n	8014734 <__gethex+0x120>
 80146f6:	b104      	cbz	r4, 80146fa <__gethex+0xe6>
 80146f8:	4252      	negs	r2, r2
 80146fa:	4417      	add	r7, r2
 80146fc:	f8ca 1000 	str.w	r1, [sl]
 8014700:	b1ed      	cbz	r5, 801473e <__gethex+0x12a>
 8014702:	f1bb 0f00 	cmp.w	fp, #0
 8014706:	bf0c      	ite	eq
 8014708:	2506      	moveq	r5, #6
 801470a:	2500      	movne	r5, #0
 801470c:	4628      	mov	r0, r5
 801470e:	b005      	add	sp, #20
 8014710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014714:	2500      	movs	r5, #0
 8014716:	462c      	mov	r4, r5
 8014718:	e7b0      	b.n	801467c <__gethex+0x68>
 801471a:	2c00      	cmp	r4, #0
 801471c:	d1c7      	bne.n	80146ae <__gethex+0x9a>
 801471e:	4627      	mov	r7, r4
 8014720:	e7c7      	b.n	80146b2 <__gethex+0x9e>
 8014722:	464e      	mov	r6, r9
 8014724:	462f      	mov	r7, r5
 8014726:	2501      	movs	r5, #1
 8014728:	e7c3      	b.n	80146b2 <__gethex+0x9e>
 801472a:	2400      	movs	r4, #0
 801472c:	1cb1      	adds	r1, r6, #2
 801472e:	e7cc      	b.n	80146ca <__gethex+0xb6>
 8014730:	2401      	movs	r4, #1
 8014732:	e7fb      	b.n	801472c <__gethex+0x118>
 8014734:	fb03 0002 	mla	r0, r3, r2, r0
 8014738:	e7ce      	b.n	80146d8 <__gethex+0xc4>
 801473a:	4631      	mov	r1, r6
 801473c:	e7de      	b.n	80146fc <__gethex+0xe8>
 801473e:	eba6 0309 	sub.w	r3, r6, r9
 8014742:	3b01      	subs	r3, #1
 8014744:	4629      	mov	r1, r5
 8014746:	2b07      	cmp	r3, #7
 8014748:	dc0a      	bgt.n	8014760 <__gethex+0x14c>
 801474a:	9801      	ldr	r0, [sp, #4]
 801474c:	f000 fafc 	bl	8014d48 <_Balloc>
 8014750:	4604      	mov	r4, r0
 8014752:	b940      	cbnz	r0, 8014766 <__gethex+0x152>
 8014754:	4b5c      	ldr	r3, [pc, #368]	@ (80148c8 <__gethex+0x2b4>)
 8014756:	4602      	mov	r2, r0
 8014758:	21e4      	movs	r1, #228	@ 0xe4
 801475a:	485c      	ldr	r0, [pc, #368]	@ (80148cc <__gethex+0x2b8>)
 801475c:	f001 fdea 	bl	8016334 <__assert_func>
 8014760:	3101      	adds	r1, #1
 8014762:	105b      	asrs	r3, r3, #1
 8014764:	e7ef      	b.n	8014746 <__gethex+0x132>
 8014766:	f100 0a14 	add.w	sl, r0, #20
 801476a:	2300      	movs	r3, #0
 801476c:	4655      	mov	r5, sl
 801476e:	469b      	mov	fp, r3
 8014770:	45b1      	cmp	r9, r6
 8014772:	d337      	bcc.n	80147e4 <__gethex+0x1d0>
 8014774:	f845 bb04 	str.w	fp, [r5], #4
 8014778:	eba5 050a 	sub.w	r5, r5, sl
 801477c:	10ad      	asrs	r5, r5, #2
 801477e:	6125      	str	r5, [r4, #16]
 8014780:	4658      	mov	r0, fp
 8014782:	f000 fbd3 	bl	8014f2c <__hi0bits>
 8014786:	016d      	lsls	r5, r5, #5
 8014788:	f8d8 6000 	ldr.w	r6, [r8]
 801478c:	1a2d      	subs	r5, r5, r0
 801478e:	42b5      	cmp	r5, r6
 8014790:	dd54      	ble.n	801483c <__gethex+0x228>
 8014792:	1bad      	subs	r5, r5, r6
 8014794:	4629      	mov	r1, r5
 8014796:	4620      	mov	r0, r4
 8014798:	f000 ff67 	bl	801566a <__any_on>
 801479c:	4681      	mov	r9, r0
 801479e:	b178      	cbz	r0, 80147c0 <__gethex+0x1ac>
 80147a0:	1e6b      	subs	r3, r5, #1
 80147a2:	1159      	asrs	r1, r3, #5
 80147a4:	f003 021f 	and.w	r2, r3, #31
 80147a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80147ac:	f04f 0901 	mov.w	r9, #1
 80147b0:	fa09 f202 	lsl.w	r2, r9, r2
 80147b4:	420a      	tst	r2, r1
 80147b6:	d003      	beq.n	80147c0 <__gethex+0x1ac>
 80147b8:	454b      	cmp	r3, r9
 80147ba:	dc36      	bgt.n	801482a <__gethex+0x216>
 80147bc:	f04f 0902 	mov.w	r9, #2
 80147c0:	4629      	mov	r1, r5
 80147c2:	4620      	mov	r0, r4
 80147c4:	f7ff febe 	bl	8014544 <rshift>
 80147c8:	442f      	add	r7, r5
 80147ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80147ce:	42bb      	cmp	r3, r7
 80147d0:	da42      	bge.n	8014858 <__gethex+0x244>
 80147d2:	9801      	ldr	r0, [sp, #4]
 80147d4:	4621      	mov	r1, r4
 80147d6:	f000 faf7 	bl	8014dc8 <_Bfree>
 80147da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80147dc:	2300      	movs	r3, #0
 80147de:	6013      	str	r3, [r2, #0]
 80147e0:	25a3      	movs	r5, #163	@ 0xa3
 80147e2:	e793      	b.n	801470c <__gethex+0xf8>
 80147e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80147e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80147ea:	d012      	beq.n	8014812 <__gethex+0x1fe>
 80147ec:	2b20      	cmp	r3, #32
 80147ee:	d104      	bne.n	80147fa <__gethex+0x1e6>
 80147f0:	f845 bb04 	str.w	fp, [r5], #4
 80147f4:	f04f 0b00 	mov.w	fp, #0
 80147f8:	465b      	mov	r3, fp
 80147fa:	7830      	ldrb	r0, [r6, #0]
 80147fc:	9303      	str	r3, [sp, #12]
 80147fe:	f7ff fef3 	bl	80145e8 <__hexdig_fun>
 8014802:	9b03      	ldr	r3, [sp, #12]
 8014804:	f000 000f 	and.w	r0, r0, #15
 8014808:	4098      	lsls	r0, r3
 801480a:	ea4b 0b00 	orr.w	fp, fp, r0
 801480e:	3304      	adds	r3, #4
 8014810:	e7ae      	b.n	8014770 <__gethex+0x15c>
 8014812:	45b1      	cmp	r9, r6
 8014814:	d8ea      	bhi.n	80147ec <__gethex+0x1d8>
 8014816:	492b      	ldr	r1, [pc, #172]	@ (80148c4 <__gethex+0x2b0>)
 8014818:	9303      	str	r3, [sp, #12]
 801481a:	2201      	movs	r2, #1
 801481c:	4630      	mov	r0, r6
 801481e:	f7fe ff36 	bl	801368e <strncmp>
 8014822:	9b03      	ldr	r3, [sp, #12]
 8014824:	2800      	cmp	r0, #0
 8014826:	d1e1      	bne.n	80147ec <__gethex+0x1d8>
 8014828:	e7a2      	b.n	8014770 <__gethex+0x15c>
 801482a:	1ea9      	subs	r1, r5, #2
 801482c:	4620      	mov	r0, r4
 801482e:	f000 ff1c 	bl	801566a <__any_on>
 8014832:	2800      	cmp	r0, #0
 8014834:	d0c2      	beq.n	80147bc <__gethex+0x1a8>
 8014836:	f04f 0903 	mov.w	r9, #3
 801483a:	e7c1      	b.n	80147c0 <__gethex+0x1ac>
 801483c:	da09      	bge.n	8014852 <__gethex+0x23e>
 801483e:	1b75      	subs	r5, r6, r5
 8014840:	4621      	mov	r1, r4
 8014842:	9801      	ldr	r0, [sp, #4]
 8014844:	462a      	mov	r2, r5
 8014846:	f000 fcd7 	bl	80151f8 <__lshift>
 801484a:	1b7f      	subs	r7, r7, r5
 801484c:	4604      	mov	r4, r0
 801484e:	f100 0a14 	add.w	sl, r0, #20
 8014852:	f04f 0900 	mov.w	r9, #0
 8014856:	e7b8      	b.n	80147ca <__gethex+0x1b6>
 8014858:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801485c:	42bd      	cmp	r5, r7
 801485e:	dd6f      	ble.n	8014940 <__gethex+0x32c>
 8014860:	1bed      	subs	r5, r5, r7
 8014862:	42ae      	cmp	r6, r5
 8014864:	dc34      	bgt.n	80148d0 <__gethex+0x2bc>
 8014866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801486a:	2b02      	cmp	r3, #2
 801486c:	d022      	beq.n	80148b4 <__gethex+0x2a0>
 801486e:	2b03      	cmp	r3, #3
 8014870:	d024      	beq.n	80148bc <__gethex+0x2a8>
 8014872:	2b01      	cmp	r3, #1
 8014874:	d115      	bne.n	80148a2 <__gethex+0x28e>
 8014876:	42ae      	cmp	r6, r5
 8014878:	d113      	bne.n	80148a2 <__gethex+0x28e>
 801487a:	2e01      	cmp	r6, #1
 801487c:	d10b      	bne.n	8014896 <__gethex+0x282>
 801487e:	9a02      	ldr	r2, [sp, #8]
 8014880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014884:	6013      	str	r3, [r2, #0]
 8014886:	2301      	movs	r3, #1
 8014888:	6123      	str	r3, [r4, #16]
 801488a:	f8ca 3000 	str.w	r3, [sl]
 801488e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014890:	2562      	movs	r5, #98	@ 0x62
 8014892:	601c      	str	r4, [r3, #0]
 8014894:	e73a      	b.n	801470c <__gethex+0xf8>
 8014896:	1e71      	subs	r1, r6, #1
 8014898:	4620      	mov	r0, r4
 801489a:	f000 fee6 	bl	801566a <__any_on>
 801489e:	2800      	cmp	r0, #0
 80148a0:	d1ed      	bne.n	801487e <__gethex+0x26a>
 80148a2:	9801      	ldr	r0, [sp, #4]
 80148a4:	4621      	mov	r1, r4
 80148a6:	f000 fa8f 	bl	8014dc8 <_Bfree>
 80148aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80148ac:	2300      	movs	r3, #0
 80148ae:	6013      	str	r3, [r2, #0]
 80148b0:	2550      	movs	r5, #80	@ 0x50
 80148b2:	e72b      	b.n	801470c <__gethex+0xf8>
 80148b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d1f3      	bne.n	80148a2 <__gethex+0x28e>
 80148ba:	e7e0      	b.n	801487e <__gethex+0x26a>
 80148bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d1dd      	bne.n	801487e <__gethex+0x26a>
 80148c2:	e7ee      	b.n	80148a2 <__gethex+0x28e>
 80148c4:	080177d8 	.word	0x080177d8
 80148c8:	080178eb 	.word	0x080178eb
 80148cc:	080178fc 	.word	0x080178fc
 80148d0:	1e6f      	subs	r7, r5, #1
 80148d2:	f1b9 0f00 	cmp.w	r9, #0
 80148d6:	d130      	bne.n	801493a <__gethex+0x326>
 80148d8:	b127      	cbz	r7, 80148e4 <__gethex+0x2d0>
 80148da:	4639      	mov	r1, r7
 80148dc:	4620      	mov	r0, r4
 80148de:	f000 fec4 	bl	801566a <__any_on>
 80148e2:	4681      	mov	r9, r0
 80148e4:	117a      	asrs	r2, r7, #5
 80148e6:	2301      	movs	r3, #1
 80148e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80148ec:	f007 071f 	and.w	r7, r7, #31
 80148f0:	40bb      	lsls	r3, r7
 80148f2:	4213      	tst	r3, r2
 80148f4:	4629      	mov	r1, r5
 80148f6:	4620      	mov	r0, r4
 80148f8:	bf18      	it	ne
 80148fa:	f049 0902 	orrne.w	r9, r9, #2
 80148fe:	f7ff fe21 	bl	8014544 <rshift>
 8014902:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014906:	1b76      	subs	r6, r6, r5
 8014908:	2502      	movs	r5, #2
 801490a:	f1b9 0f00 	cmp.w	r9, #0
 801490e:	d047      	beq.n	80149a0 <__gethex+0x38c>
 8014910:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014914:	2b02      	cmp	r3, #2
 8014916:	d015      	beq.n	8014944 <__gethex+0x330>
 8014918:	2b03      	cmp	r3, #3
 801491a:	d017      	beq.n	801494c <__gethex+0x338>
 801491c:	2b01      	cmp	r3, #1
 801491e:	d109      	bne.n	8014934 <__gethex+0x320>
 8014920:	f019 0f02 	tst.w	r9, #2
 8014924:	d006      	beq.n	8014934 <__gethex+0x320>
 8014926:	f8da 3000 	ldr.w	r3, [sl]
 801492a:	ea49 0903 	orr.w	r9, r9, r3
 801492e:	f019 0f01 	tst.w	r9, #1
 8014932:	d10e      	bne.n	8014952 <__gethex+0x33e>
 8014934:	f045 0510 	orr.w	r5, r5, #16
 8014938:	e032      	b.n	80149a0 <__gethex+0x38c>
 801493a:	f04f 0901 	mov.w	r9, #1
 801493e:	e7d1      	b.n	80148e4 <__gethex+0x2d0>
 8014940:	2501      	movs	r5, #1
 8014942:	e7e2      	b.n	801490a <__gethex+0x2f6>
 8014944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014946:	f1c3 0301 	rsb	r3, r3, #1
 801494a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801494c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801494e:	2b00      	cmp	r3, #0
 8014950:	d0f0      	beq.n	8014934 <__gethex+0x320>
 8014952:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014956:	f104 0314 	add.w	r3, r4, #20
 801495a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801495e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014962:	f04f 0c00 	mov.w	ip, #0
 8014966:	4618      	mov	r0, r3
 8014968:	f853 2b04 	ldr.w	r2, [r3], #4
 801496c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014970:	d01b      	beq.n	80149aa <__gethex+0x396>
 8014972:	3201      	adds	r2, #1
 8014974:	6002      	str	r2, [r0, #0]
 8014976:	2d02      	cmp	r5, #2
 8014978:	f104 0314 	add.w	r3, r4, #20
 801497c:	d13c      	bne.n	80149f8 <__gethex+0x3e4>
 801497e:	f8d8 2000 	ldr.w	r2, [r8]
 8014982:	3a01      	subs	r2, #1
 8014984:	42b2      	cmp	r2, r6
 8014986:	d109      	bne.n	801499c <__gethex+0x388>
 8014988:	1171      	asrs	r1, r6, #5
 801498a:	2201      	movs	r2, #1
 801498c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014990:	f006 061f 	and.w	r6, r6, #31
 8014994:	fa02 f606 	lsl.w	r6, r2, r6
 8014998:	421e      	tst	r6, r3
 801499a:	d13a      	bne.n	8014a12 <__gethex+0x3fe>
 801499c:	f045 0520 	orr.w	r5, r5, #32
 80149a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80149a2:	601c      	str	r4, [r3, #0]
 80149a4:	9b02      	ldr	r3, [sp, #8]
 80149a6:	601f      	str	r7, [r3, #0]
 80149a8:	e6b0      	b.n	801470c <__gethex+0xf8>
 80149aa:	4299      	cmp	r1, r3
 80149ac:	f843 cc04 	str.w	ip, [r3, #-4]
 80149b0:	d8d9      	bhi.n	8014966 <__gethex+0x352>
 80149b2:	68a3      	ldr	r3, [r4, #8]
 80149b4:	459b      	cmp	fp, r3
 80149b6:	db17      	blt.n	80149e8 <__gethex+0x3d4>
 80149b8:	6861      	ldr	r1, [r4, #4]
 80149ba:	9801      	ldr	r0, [sp, #4]
 80149bc:	3101      	adds	r1, #1
 80149be:	f000 f9c3 	bl	8014d48 <_Balloc>
 80149c2:	4681      	mov	r9, r0
 80149c4:	b918      	cbnz	r0, 80149ce <__gethex+0x3ba>
 80149c6:	4b1a      	ldr	r3, [pc, #104]	@ (8014a30 <__gethex+0x41c>)
 80149c8:	4602      	mov	r2, r0
 80149ca:	2184      	movs	r1, #132	@ 0x84
 80149cc:	e6c5      	b.n	801475a <__gethex+0x146>
 80149ce:	6922      	ldr	r2, [r4, #16]
 80149d0:	3202      	adds	r2, #2
 80149d2:	f104 010c 	add.w	r1, r4, #12
 80149d6:	0092      	lsls	r2, r2, #2
 80149d8:	300c      	adds	r0, #12
 80149da:	f7fe fefc 	bl	80137d6 <memcpy>
 80149de:	4621      	mov	r1, r4
 80149e0:	9801      	ldr	r0, [sp, #4]
 80149e2:	f000 f9f1 	bl	8014dc8 <_Bfree>
 80149e6:	464c      	mov	r4, r9
 80149e8:	6923      	ldr	r3, [r4, #16]
 80149ea:	1c5a      	adds	r2, r3, #1
 80149ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80149f0:	6122      	str	r2, [r4, #16]
 80149f2:	2201      	movs	r2, #1
 80149f4:	615a      	str	r2, [r3, #20]
 80149f6:	e7be      	b.n	8014976 <__gethex+0x362>
 80149f8:	6922      	ldr	r2, [r4, #16]
 80149fa:	455a      	cmp	r2, fp
 80149fc:	dd0b      	ble.n	8014a16 <__gethex+0x402>
 80149fe:	2101      	movs	r1, #1
 8014a00:	4620      	mov	r0, r4
 8014a02:	f7ff fd9f 	bl	8014544 <rshift>
 8014a06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a0a:	3701      	adds	r7, #1
 8014a0c:	42bb      	cmp	r3, r7
 8014a0e:	f6ff aee0 	blt.w	80147d2 <__gethex+0x1be>
 8014a12:	2501      	movs	r5, #1
 8014a14:	e7c2      	b.n	801499c <__gethex+0x388>
 8014a16:	f016 061f 	ands.w	r6, r6, #31
 8014a1a:	d0fa      	beq.n	8014a12 <__gethex+0x3fe>
 8014a1c:	4453      	add	r3, sl
 8014a1e:	f1c6 0620 	rsb	r6, r6, #32
 8014a22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014a26:	f000 fa81 	bl	8014f2c <__hi0bits>
 8014a2a:	42b0      	cmp	r0, r6
 8014a2c:	dbe7      	blt.n	80149fe <__gethex+0x3ea>
 8014a2e:	e7f0      	b.n	8014a12 <__gethex+0x3fe>
 8014a30:	080178eb 	.word	0x080178eb

08014a34 <L_shift>:
 8014a34:	f1c2 0208 	rsb	r2, r2, #8
 8014a38:	0092      	lsls	r2, r2, #2
 8014a3a:	b570      	push	{r4, r5, r6, lr}
 8014a3c:	f1c2 0620 	rsb	r6, r2, #32
 8014a40:	6843      	ldr	r3, [r0, #4]
 8014a42:	6804      	ldr	r4, [r0, #0]
 8014a44:	fa03 f506 	lsl.w	r5, r3, r6
 8014a48:	432c      	orrs	r4, r5
 8014a4a:	40d3      	lsrs	r3, r2
 8014a4c:	6004      	str	r4, [r0, #0]
 8014a4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014a52:	4288      	cmp	r0, r1
 8014a54:	d3f4      	bcc.n	8014a40 <L_shift+0xc>
 8014a56:	bd70      	pop	{r4, r5, r6, pc}

08014a58 <__match>:
 8014a58:	b530      	push	{r4, r5, lr}
 8014a5a:	6803      	ldr	r3, [r0, #0]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a62:	b914      	cbnz	r4, 8014a6a <__match+0x12>
 8014a64:	6003      	str	r3, [r0, #0]
 8014a66:	2001      	movs	r0, #1
 8014a68:	bd30      	pop	{r4, r5, pc}
 8014a6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014a72:	2d19      	cmp	r5, #25
 8014a74:	bf98      	it	ls
 8014a76:	3220      	addls	r2, #32
 8014a78:	42a2      	cmp	r2, r4
 8014a7a:	d0f0      	beq.n	8014a5e <__match+0x6>
 8014a7c:	2000      	movs	r0, #0
 8014a7e:	e7f3      	b.n	8014a68 <__match+0x10>

08014a80 <__hexnan>:
 8014a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a84:	680b      	ldr	r3, [r1, #0]
 8014a86:	6801      	ldr	r1, [r0, #0]
 8014a88:	115e      	asrs	r6, r3, #5
 8014a8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014a8e:	f013 031f 	ands.w	r3, r3, #31
 8014a92:	b087      	sub	sp, #28
 8014a94:	bf18      	it	ne
 8014a96:	3604      	addne	r6, #4
 8014a98:	2500      	movs	r5, #0
 8014a9a:	1f37      	subs	r7, r6, #4
 8014a9c:	4682      	mov	sl, r0
 8014a9e:	4690      	mov	r8, r2
 8014aa0:	9301      	str	r3, [sp, #4]
 8014aa2:	f846 5c04 	str.w	r5, [r6, #-4]
 8014aa6:	46b9      	mov	r9, r7
 8014aa8:	463c      	mov	r4, r7
 8014aaa:	9502      	str	r5, [sp, #8]
 8014aac:	46ab      	mov	fp, r5
 8014aae:	784a      	ldrb	r2, [r1, #1]
 8014ab0:	1c4b      	adds	r3, r1, #1
 8014ab2:	9303      	str	r3, [sp, #12]
 8014ab4:	b342      	cbz	r2, 8014b08 <__hexnan+0x88>
 8014ab6:	4610      	mov	r0, r2
 8014ab8:	9105      	str	r1, [sp, #20]
 8014aba:	9204      	str	r2, [sp, #16]
 8014abc:	f7ff fd94 	bl	80145e8 <__hexdig_fun>
 8014ac0:	2800      	cmp	r0, #0
 8014ac2:	d151      	bne.n	8014b68 <__hexnan+0xe8>
 8014ac4:	9a04      	ldr	r2, [sp, #16]
 8014ac6:	9905      	ldr	r1, [sp, #20]
 8014ac8:	2a20      	cmp	r2, #32
 8014aca:	d818      	bhi.n	8014afe <__hexnan+0x7e>
 8014acc:	9b02      	ldr	r3, [sp, #8]
 8014ace:	459b      	cmp	fp, r3
 8014ad0:	dd13      	ble.n	8014afa <__hexnan+0x7a>
 8014ad2:	454c      	cmp	r4, r9
 8014ad4:	d206      	bcs.n	8014ae4 <__hexnan+0x64>
 8014ad6:	2d07      	cmp	r5, #7
 8014ad8:	dc04      	bgt.n	8014ae4 <__hexnan+0x64>
 8014ada:	462a      	mov	r2, r5
 8014adc:	4649      	mov	r1, r9
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f7ff ffa8 	bl	8014a34 <L_shift>
 8014ae4:	4544      	cmp	r4, r8
 8014ae6:	d952      	bls.n	8014b8e <__hexnan+0x10e>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	f1a4 0904 	sub.w	r9, r4, #4
 8014aee:	f844 3c04 	str.w	r3, [r4, #-4]
 8014af2:	f8cd b008 	str.w	fp, [sp, #8]
 8014af6:	464c      	mov	r4, r9
 8014af8:	461d      	mov	r5, r3
 8014afa:	9903      	ldr	r1, [sp, #12]
 8014afc:	e7d7      	b.n	8014aae <__hexnan+0x2e>
 8014afe:	2a29      	cmp	r2, #41	@ 0x29
 8014b00:	d157      	bne.n	8014bb2 <__hexnan+0x132>
 8014b02:	3102      	adds	r1, #2
 8014b04:	f8ca 1000 	str.w	r1, [sl]
 8014b08:	f1bb 0f00 	cmp.w	fp, #0
 8014b0c:	d051      	beq.n	8014bb2 <__hexnan+0x132>
 8014b0e:	454c      	cmp	r4, r9
 8014b10:	d206      	bcs.n	8014b20 <__hexnan+0xa0>
 8014b12:	2d07      	cmp	r5, #7
 8014b14:	dc04      	bgt.n	8014b20 <__hexnan+0xa0>
 8014b16:	462a      	mov	r2, r5
 8014b18:	4649      	mov	r1, r9
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	f7ff ff8a 	bl	8014a34 <L_shift>
 8014b20:	4544      	cmp	r4, r8
 8014b22:	d936      	bls.n	8014b92 <__hexnan+0x112>
 8014b24:	f1a8 0204 	sub.w	r2, r8, #4
 8014b28:	4623      	mov	r3, r4
 8014b2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8014b2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8014b32:	429f      	cmp	r7, r3
 8014b34:	d2f9      	bcs.n	8014b2a <__hexnan+0xaa>
 8014b36:	1b3b      	subs	r3, r7, r4
 8014b38:	f023 0303 	bic.w	r3, r3, #3
 8014b3c:	3304      	adds	r3, #4
 8014b3e:	3401      	adds	r4, #1
 8014b40:	3e03      	subs	r6, #3
 8014b42:	42b4      	cmp	r4, r6
 8014b44:	bf88      	it	hi
 8014b46:	2304      	movhi	r3, #4
 8014b48:	4443      	add	r3, r8
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	f843 2b04 	str.w	r2, [r3], #4
 8014b50:	429f      	cmp	r7, r3
 8014b52:	d2fb      	bcs.n	8014b4c <__hexnan+0xcc>
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	b91b      	cbnz	r3, 8014b60 <__hexnan+0xe0>
 8014b58:	4547      	cmp	r7, r8
 8014b5a:	d128      	bne.n	8014bae <__hexnan+0x12e>
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	603b      	str	r3, [r7, #0]
 8014b60:	2005      	movs	r0, #5
 8014b62:	b007      	add	sp, #28
 8014b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b68:	3501      	adds	r5, #1
 8014b6a:	2d08      	cmp	r5, #8
 8014b6c:	f10b 0b01 	add.w	fp, fp, #1
 8014b70:	dd06      	ble.n	8014b80 <__hexnan+0x100>
 8014b72:	4544      	cmp	r4, r8
 8014b74:	d9c1      	bls.n	8014afa <__hexnan+0x7a>
 8014b76:	2300      	movs	r3, #0
 8014b78:	f844 3c04 	str.w	r3, [r4, #-4]
 8014b7c:	2501      	movs	r5, #1
 8014b7e:	3c04      	subs	r4, #4
 8014b80:	6822      	ldr	r2, [r4, #0]
 8014b82:	f000 000f 	and.w	r0, r0, #15
 8014b86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014b8a:	6020      	str	r0, [r4, #0]
 8014b8c:	e7b5      	b.n	8014afa <__hexnan+0x7a>
 8014b8e:	2508      	movs	r5, #8
 8014b90:	e7b3      	b.n	8014afa <__hexnan+0x7a>
 8014b92:	9b01      	ldr	r3, [sp, #4]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d0dd      	beq.n	8014b54 <__hexnan+0xd4>
 8014b98:	f1c3 0320 	rsb	r3, r3, #32
 8014b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8014ba0:	40da      	lsrs	r2, r3
 8014ba2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014ba6:	4013      	ands	r3, r2
 8014ba8:	f846 3c04 	str.w	r3, [r6, #-4]
 8014bac:	e7d2      	b.n	8014b54 <__hexnan+0xd4>
 8014bae:	3f04      	subs	r7, #4
 8014bb0:	e7d0      	b.n	8014b54 <__hexnan+0xd4>
 8014bb2:	2004      	movs	r0, #4
 8014bb4:	e7d5      	b.n	8014b62 <__hexnan+0xe2>
	...

08014bb8 <malloc>:
 8014bb8:	4b02      	ldr	r3, [pc, #8]	@ (8014bc4 <malloc+0xc>)
 8014bba:	4601      	mov	r1, r0
 8014bbc:	6818      	ldr	r0, [r3, #0]
 8014bbe:	f000 b825 	b.w	8014c0c <_malloc_r>
 8014bc2:	bf00      	nop
 8014bc4:	200002e0 	.word	0x200002e0

08014bc8 <sbrk_aligned>:
 8014bc8:	b570      	push	{r4, r5, r6, lr}
 8014bca:	4e0f      	ldr	r6, [pc, #60]	@ (8014c08 <sbrk_aligned+0x40>)
 8014bcc:	460c      	mov	r4, r1
 8014bce:	6831      	ldr	r1, [r6, #0]
 8014bd0:	4605      	mov	r5, r0
 8014bd2:	b911      	cbnz	r1, 8014bda <sbrk_aligned+0x12>
 8014bd4:	f001 fb9e 	bl	8016314 <_sbrk_r>
 8014bd8:	6030      	str	r0, [r6, #0]
 8014bda:	4621      	mov	r1, r4
 8014bdc:	4628      	mov	r0, r5
 8014bde:	f001 fb99 	bl	8016314 <_sbrk_r>
 8014be2:	1c43      	adds	r3, r0, #1
 8014be4:	d103      	bne.n	8014bee <sbrk_aligned+0x26>
 8014be6:	f04f 34ff 	mov.w	r4, #4294967295
 8014bea:	4620      	mov	r0, r4
 8014bec:	bd70      	pop	{r4, r5, r6, pc}
 8014bee:	1cc4      	adds	r4, r0, #3
 8014bf0:	f024 0403 	bic.w	r4, r4, #3
 8014bf4:	42a0      	cmp	r0, r4
 8014bf6:	d0f8      	beq.n	8014bea <sbrk_aligned+0x22>
 8014bf8:	1a21      	subs	r1, r4, r0
 8014bfa:	4628      	mov	r0, r5
 8014bfc:	f001 fb8a 	bl	8016314 <_sbrk_r>
 8014c00:	3001      	adds	r0, #1
 8014c02:	d1f2      	bne.n	8014bea <sbrk_aligned+0x22>
 8014c04:	e7ef      	b.n	8014be6 <sbrk_aligned+0x1e>
 8014c06:	bf00      	nop
 8014c08:	2000351c 	.word	0x2000351c

08014c0c <_malloc_r>:
 8014c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c10:	1ccd      	adds	r5, r1, #3
 8014c12:	f025 0503 	bic.w	r5, r5, #3
 8014c16:	3508      	adds	r5, #8
 8014c18:	2d0c      	cmp	r5, #12
 8014c1a:	bf38      	it	cc
 8014c1c:	250c      	movcc	r5, #12
 8014c1e:	2d00      	cmp	r5, #0
 8014c20:	4606      	mov	r6, r0
 8014c22:	db01      	blt.n	8014c28 <_malloc_r+0x1c>
 8014c24:	42a9      	cmp	r1, r5
 8014c26:	d904      	bls.n	8014c32 <_malloc_r+0x26>
 8014c28:	230c      	movs	r3, #12
 8014c2a:	6033      	str	r3, [r6, #0]
 8014c2c:	2000      	movs	r0, #0
 8014c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014d08 <_malloc_r+0xfc>
 8014c36:	f000 f87b 	bl	8014d30 <__malloc_lock>
 8014c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8014c3e:	461c      	mov	r4, r3
 8014c40:	bb44      	cbnz	r4, 8014c94 <_malloc_r+0x88>
 8014c42:	4629      	mov	r1, r5
 8014c44:	4630      	mov	r0, r6
 8014c46:	f7ff ffbf 	bl	8014bc8 <sbrk_aligned>
 8014c4a:	1c43      	adds	r3, r0, #1
 8014c4c:	4604      	mov	r4, r0
 8014c4e:	d158      	bne.n	8014d02 <_malloc_r+0xf6>
 8014c50:	f8d8 4000 	ldr.w	r4, [r8]
 8014c54:	4627      	mov	r7, r4
 8014c56:	2f00      	cmp	r7, #0
 8014c58:	d143      	bne.n	8014ce2 <_malloc_r+0xd6>
 8014c5a:	2c00      	cmp	r4, #0
 8014c5c:	d04b      	beq.n	8014cf6 <_malloc_r+0xea>
 8014c5e:	6823      	ldr	r3, [r4, #0]
 8014c60:	4639      	mov	r1, r7
 8014c62:	4630      	mov	r0, r6
 8014c64:	eb04 0903 	add.w	r9, r4, r3
 8014c68:	f001 fb54 	bl	8016314 <_sbrk_r>
 8014c6c:	4581      	cmp	r9, r0
 8014c6e:	d142      	bne.n	8014cf6 <_malloc_r+0xea>
 8014c70:	6821      	ldr	r1, [r4, #0]
 8014c72:	1a6d      	subs	r5, r5, r1
 8014c74:	4629      	mov	r1, r5
 8014c76:	4630      	mov	r0, r6
 8014c78:	f7ff ffa6 	bl	8014bc8 <sbrk_aligned>
 8014c7c:	3001      	adds	r0, #1
 8014c7e:	d03a      	beq.n	8014cf6 <_malloc_r+0xea>
 8014c80:	6823      	ldr	r3, [r4, #0]
 8014c82:	442b      	add	r3, r5
 8014c84:	6023      	str	r3, [r4, #0]
 8014c86:	f8d8 3000 	ldr.w	r3, [r8]
 8014c8a:	685a      	ldr	r2, [r3, #4]
 8014c8c:	bb62      	cbnz	r2, 8014ce8 <_malloc_r+0xdc>
 8014c8e:	f8c8 7000 	str.w	r7, [r8]
 8014c92:	e00f      	b.n	8014cb4 <_malloc_r+0xa8>
 8014c94:	6822      	ldr	r2, [r4, #0]
 8014c96:	1b52      	subs	r2, r2, r5
 8014c98:	d420      	bmi.n	8014cdc <_malloc_r+0xd0>
 8014c9a:	2a0b      	cmp	r2, #11
 8014c9c:	d917      	bls.n	8014cce <_malloc_r+0xc2>
 8014c9e:	1961      	adds	r1, r4, r5
 8014ca0:	42a3      	cmp	r3, r4
 8014ca2:	6025      	str	r5, [r4, #0]
 8014ca4:	bf18      	it	ne
 8014ca6:	6059      	strne	r1, [r3, #4]
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	bf08      	it	eq
 8014cac:	f8c8 1000 	streq.w	r1, [r8]
 8014cb0:	5162      	str	r2, [r4, r5]
 8014cb2:	604b      	str	r3, [r1, #4]
 8014cb4:	4630      	mov	r0, r6
 8014cb6:	f000 f841 	bl	8014d3c <__malloc_unlock>
 8014cba:	f104 000b 	add.w	r0, r4, #11
 8014cbe:	1d23      	adds	r3, r4, #4
 8014cc0:	f020 0007 	bic.w	r0, r0, #7
 8014cc4:	1ac2      	subs	r2, r0, r3
 8014cc6:	bf1c      	itt	ne
 8014cc8:	1a1b      	subne	r3, r3, r0
 8014cca:	50a3      	strne	r3, [r4, r2]
 8014ccc:	e7af      	b.n	8014c2e <_malloc_r+0x22>
 8014cce:	6862      	ldr	r2, [r4, #4]
 8014cd0:	42a3      	cmp	r3, r4
 8014cd2:	bf0c      	ite	eq
 8014cd4:	f8c8 2000 	streq.w	r2, [r8]
 8014cd8:	605a      	strne	r2, [r3, #4]
 8014cda:	e7eb      	b.n	8014cb4 <_malloc_r+0xa8>
 8014cdc:	4623      	mov	r3, r4
 8014cde:	6864      	ldr	r4, [r4, #4]
 8014ce0:	e7ae      	b.n	8014c40 <_malloc_r+0x34>
 8014ce2:	463c      	mov	r4, r7
 8014ce4:	687f      	ldr	r7, [r7, #4]
 8014ce6:	e7b6      	b.n	8014c56 <_malloc_r+0x4a>
 8014ce8:	461a      	mov	r2, r3
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	42a3      	cmp	r3, r4
 8014cee:	d1fb      	bne.n	8014ce8 <_malloc_r+0xdc>
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	6053      	str	r3, [r2, #4]
 8014cf4:	e7de      	b.n	8014cb4 <_malloc_r+0xa8>
 8014cf6:	230c      	movs	r3, #12
 8014cf8:	6033      	str	r3, [r6, #0]
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f000 f81e 	bl	8014d3c <__malloc_unlock>
 8014d00:	e794      	b.n	8014c2c <_malloc_r+0x20>
 8014d02:	6005      	str	r5, [r0, #0]
 8014d04:	e7d6      	b.n	8014cb4 <_malloc_r+0xa8>
 8014d06:	bf00      	nop
 8014d08:	20003520 	.word	0x20003520

08014d0c <__ascii_mbtowc>:
 8014d0c:	b082      	sub	sp, #8
 8014d0e:	b901      	cbnz	r1, 8014d12 <__ascii_mbtowc+0x6>
 8014d10:	a901      	add	r1, sp, #4
 8014d12:	b142      	cbz	r2, 8014d26 <__ascii_mbtowc+0x1a>
 8014d14:	b14b      	cbz	r3, 8014d2a <__ascii_mbtowc+0x1e>
 8014d16:	7813      	ldrb	r3, [r2, #0]
 8014d18:	600b      	str	r3, [r1, #0]
 8014d1a:	7812      	ldrb	r2, [r2, #0]
 8014d1c:	1e10      	subs	r0, r2, #0
 8014d1e:	bf18      	it	ne
 8014d20:	2001      	movne	r0, #1
 8014d22:	b002      	add	sp, #8
 8014d24:	4770      	bx	lr
 8014d26:	4610      	mov	r0, r2
 8014d28:	e7fb      	b.n	8014d22 <__ascii_mbtowc+0x16>
 8014d2a:	f06f 0001 	mvn.w	r0, #1
 8014d2e:	e7f8      	b.n	8014d22 <__ascii_mbtowc+0x16>

08014d30 <__malloc_lock>:
 8014d30:	4801      	ldr	r0, [pc, #4]	@ (8014d38 <__malloc_lock+0x8>)
 8014d32:	f7fe bd46 	b.w	80137c2 <__retarget_lock_acquire_recursive>
 8014d36:	bf00      	nop
 8014d38:	20003518 	.word	0x20003518

08014d3c <__malloc_unlock>:
 8014d3c:	4801      	ldr	r0, [pc, #4]	@ (8014d44 <__malloc_unlock+0x8>)
 8014d3e:	f7fe bd41 	b.w	80137c4 <__retarget_lock_release_recursive>
 8014d42:	bf00      	nop
 8014d44:	20003518 	.word	0x20003518

08014d48 <_Balloc>:
 8014d48:	b570      	push	{r4, r5, r6, lr}
 8014d4a:	69c6      	ldr	r6, [r0, #28]
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	460d      	mov	r5, r1
 8014d50:	b976      	cbnz	r6, 8014d70 <_Balloc+0x28>
 8014d52:	2010      	movs	r0, #16
 8014d54:	f7ff ff30 	bl	8014bb8 <malloc>
 8014d58:	4602      	mov	r2, r0
 8014d5a:	61e0      	str	r0, [r4, #28]
 8014d5c:	b920      	cbnz	r0, 8014d68 <_Balloc+0x20>
 8014d5e:	4b18      	ldr	r3, [pc, #96]	@ (8014dc0 <_Balloc+0x78>)
 8014d60:	4818      	ldr	r0, [pc, #96]	@ (8014dc4 <_Balloc+0x7c>)
 8014d62:	216b      	movs	r1, #107	@ 0x6b
 8014d64:	f001 fae6 	bl	8016334 <__assert_func>
 8014d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014d6c:	6006      	str	r6, [r0, #0]
 8014d6e:	60c6      	str	r6, [r0, #12]
 8014d70:	69e6      	ldr	r6, [r4, #28]
 8014d72:	68f3      	ldr	r3, [r6, #12]
 8014d74:	b183      	cbz	r3, 8014d98 <_Balloc+0x50>
 8014d76:	69e3      	ldr	r3, [r4, #28]
 8014d78:	68db      	ldr	r3, [r3, #12]
 8014d7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014d7e:	b9b8      	cbnz	r0, 8014db0 <_Balloc+0x68>
 8014d80:	2101      	movs	r1, #1
 8014d82:	fa01 f605 	lsl.w	r6, r1, r5
 8014d86:	1d72      	adds	r2, r6, #5
 8014d88:	0092      	lsls	r2, r2, #2
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f001 faf0 	bl	8016370 <_calloc_r>
 8014d90:	b160      	cbz	r0, 8014dac <_Balloc+0x64>
 8014d92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014d96:	e00e      	b.n	8014db6 <_Balloc+0x6e>
 8014d98:	2221      	movs	r2, #33	@ 0x21
 8014d9a:	2104      	movs	r1, #4
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f001 fae7 	bl	8016370 <_calloc_r>
 8014da2:	69e3      	ldr	r3, [r4, #28]
 8014da4:	60f0      	str	r0, [r6, #12]
 8014da6:	68db      	ldr	r3, [r3, #12]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d1e4      	bne.n	8014d76 <_Balloc+0x2e>
 8014dac:	2000      	movs	r0, #0
 8014dae:	bd70      	pop	{r4, r5, r6, pc}
 8014db0:	6802      	ldr	r2, [r0, #0]
 8014db2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014db6:	2300      	movs	r3, #0
 8014db8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014dbc:	e7f7      	b.n	8014dae <_Balloc+0x66>
 8014dbe:	bf00      	nop
 8014dc0:	0801787c 	.word	0x0801787c
 8014dc4:	0801795c 	.word	0x0801795c

08014dc8 <_Bfree>:
 8014dc8:	b570      	push	{r4, r5, r6, lr}
 8014dca:	69c6      	ldr	r6, [r0, #28]
 8014dcc:	4605      	mov	r5, r0
 8014dce:	460c      	mov	r4, r1
 8014dd0:	b976      	cbnz	r6, 8014df0 <_Bfree+0x28>
 8014dd2:	2010      	movs	r0, #16
 8014dd4:	f7ff fef0 	bl	8014bb8 <malloc>
 8014dd8:	4602      	mov	r2, r0
 8014dda:	61e8      	str	r0, [r5, #28]
 8014ddc:	b920      	cbnz	r0, 8014de8 <_Bfree+0x20>
 8014dde:	4b09      	ldr	r3, [pc, #36]	@ (8014e04 <_Bfree+0x3c>)
 8014de0:	4809      	ldr	r0, [pc, #36]	@ (8014e08 <_Bfree+0x40>)
 8014de2:	218f      	movs	r1, #143	@ 0x8f
 8014de4:	f001 faa6 	bl	8016334 <__assert_func>
 8014de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014dec:	6006      	str	r6, [r0, #0]
 8014dee:	60c6      	str	r6, [r0, #12]
 8014df0:	b13c      	cbz	r4, 8014e02 <_Bfree+0x3a>
 8014df2:	69eb      	ldr	r3, [r5, #28]
 8014df4:	6862      	ldr	r2, [r4, #4]
 8014df6:	68db      	ldr	r3, [r3, #12]
 8014df8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014dfc:	6021      	str	r1, [r4, #0]
 8014dfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014e02:	bd70      	pop	{r4, r5, r6, pc}
 8014e04:	0801787c 	.word	0x0801787c
 8014e08:	0801795c 	.word	0x0801795c

08014e0c <__multadd>:
 8014e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e10:	690d      	ldr	r5, [r1, #16]
 8014e12:	4607      	mov	r7, r0
 8014e14:	460c      	mov	r4, r1
 8014e16:	461e      	mov	r6, r3
 8014e18:	f101 0c14 	add.w	ip, r1, #20
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	f8dc 3000 	ldr.w	r3, [ip]
 8014e22:	b299      	uxth	r1, r3
 8014e24:	fb02 6101 	mla	r1, r2, r1, r6
 8014e28:	0c1e      	lsrs	r6, r3, #16
 8014e2a:	0c0b      	lsrs	r3, r1, #16
 8014e2c:	fb02 3306 	mla	r3, r2, r6, r3
 8014e30:	b289      	uxth	r1, r1
 8014e32:	3001      	adds	r0, #1
 8014e34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014e38:	4285      	cmp	r5, r0
 8014e3a:	f84c 1b04 	str.w	r1, [ip], #4
 8014e3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014e42:	dcec      	bgt.n	8014e1e <__multadd+0x12>
 8014e44:	b30e      	cbz	r6, 8014e8a <__multadd+0x7e>
 8014e46:	68a3      	ldr	r3, [r4, #8]
 8014e48:	42ab      	cmp	r3, r5
 8014e4a:	dc19      	bgt.n	8014e80 <__multadd+0x74>
 8014e4c:	6861      	ldr	r1, [r4, #4]
 8014e4e:	4638      	mov	r0, r7
 8014e50:	3101      	adds	r1, #1
 8014e52:	f7ff ff79 	bl	8014d48 <_Balloc>
 8014e56:	4680      	mov	r8, r0
 8014e58:	b928      	cbnz	r0, 8014e66 <__multadd+0x5a>
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8014e90 <__multadd+0x84>)
 8014e5e:	480d      	ldr	r0, [pc, #52]	@ (8014e94 <__multadd+0x88>)
 8014e60:	21ba      	movs	r1, #186	@ 0xba
 8014e62:	f001 fa67 	bl	8016334 <__assert_func>
 8014e66:	6922      	ldr	r2, [r4, #16]
 8014e68:	3202      	adds	r2, #2
 8014e6a:	f104 010c 	add.w	r1, r4, #12
 8014e6e:	0092      	lsls	r2, r2, #2
 8014e70:	300c      	adds	r0, #12
 8014e72:	f7fe fcb0 	bl	80137d6 <memcpy>
 8014e76:	4621      	mov	r1, r4
 8014e78:	4638      	mov	r0, r7
 8014e7a:	f7ff ffa5 	bl	8014dc8 <_Bfree>
 8014e7e:	4644      	mov	r4, r8
 8014e80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014e84:	3501      	adds	r5, #1
 8014e86:	615e      	str	r6, [r3, #20]
 8014e88:	6125      	str	r5, [r4, #16]
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e90:	080178eb 	.word	0x080178eb
 8014e94:	0801795c 	.word	0x0801795c

08014e98 <__s2b>:
 8014e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e9c:	460c      	mov	r4, r1
 8014e9e:	4615      	mov	r5, r2
 8014ea0:	461f      	mov	r7, r3
 8014ea2:	2209      	movs	r2, #9
 8014ea4:	3308      	adds	r3, #8
 8014ea6:	4606      	mov	r6, r0
 8014ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8014eac:	2100      	movs	r1, #0
 8014eae:	2201      	movs	r2, #1
 8014eb0:	429a      	cmp	r2, r3
 8014eb2:	db09      	blt.n	8014ec8 <__s2b+0x30>
 8014eb4:	4630      	mov	r0, r6
 8014eb6:	f7ff ff47 	bl	8014d48 <_Balloc>
 8014eba:	b940      	cbnz	r0, 8014ece <__s2b+0x36>
 8014ebc:	4602      	mov	r2, r0
 8014ebe:	4b19      	ldr	r3, [pc, #100]	@ (8014f24 <__s2b+0x8c>)
 8014ec0:	4819      	ldr	r0, [pc, #100]	@ (8014f28 <__s2b+0x90>)
 8014ec2:	21d3      	movs	r1, #211	@ 0xd3
 8014ec4:	f001 fa36 	bl	8016334 <__assert_func>
 8014ec8:	0052      	lsls	r2, r2, #1
 8014eca:	3101      	adds	r1, #1
 8014ecc:	e7f0      	b.n	8014eb0 <__s2b+0x18>
 8014ece:	9b08      	ldr	r3, [sp, #32]
 8014ed0:	6143      	str	r3, [r0, #20]
 8014ed2:	2d09      	cmp	r5, #9
 8014ed4:	f04f 0301 	mov.w	r3, #1
 8014ed8:	6103      	str	r3, [r0, #16]
 8014eda:	dd16      	ble.n	8014f0a <__s2b+0x72>
 8014edc:	f104 0909 	add.w	r9, r4, #9
 8014ee0:	46c8      	mov	r8, r9
 8014ee2:	442c      	add	r4, r5
 8014ee4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014ee8:	4601      	mov	r1, r0
 8014eea:	3b30      	subs	r3, #48	@ 0x30
 8014eec:	220a      	movs	r2, #10
 8014eee:	4630      	mov	r0, r6
 8014ef0:	f7ff ff8c 	bl	8014e0c <__multadd>
 8014ef4:	45a0      	cmp	r8, r4
 8014ef6:	d1f5      	bne.n	8014ee4 <__s2b+0x4c>
 8014ef8:	f1a5 0408 	sub.w	r4, r5, #8
 8014efc:	444c      	add	r4, r9
 8014efe:	1b2d      	subs	r5, r5, r4
 8014f00:	1963      	adds	r3, r4, r5
 8014f02:	42bb      	cmp	r3, r7
 8014f04:	db04      	blt.n	8014f10 <__s2b+0x78>
 8014f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f0a:	340a      	adds	r4, #10
 8014f0c:	2509      	movs	r5, #9
 8014f0e:	e7f6      	b.n	8014efe <__s2b+0x66>
 8014f10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014f14:	4601      	mov	r1, r0
 8014f16:	3b30      	subs	r3, #48	@ 0x30
 8014f18:	220a      	movs	r2, #10
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	f7ff ff76 	bl	8014e0c <__multadd>
 8014f20:	e7ee      	b.n	8014f00 <__s2b+0x68>
 8014f22:	bf00      	nop
 8014f24:	080178eb 	.word	0x080178eb
 8014f28:	0801795c 	.word	0x0801795c

08014f2c <__hi0bits>:
 8014f2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014f30:	4603      	mov	r3, r0
 8014f32:	bf36      	itet	cc
 8014f34:	0403      	lslcc	r3, r0, #16
 8014f36:	2000      	movcs	r0, #0
 8014f38:	2010      	movcc	r0, #16
 8014f3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014f3e:	bf3c      	itt	cc
 8014f40:	021b      	lslcc	r3, r3, #8
 8014f42:	3008      	addcc	r0, #8
 8014f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014f48:	bf3c      	itt	cc
 8014f4a:	011b      	lslcc	r3, r3, #4
 8014f4c:	3004      	addcc	r0, #4
 8014f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014f52:	bf3c      	itt	cc
 8014f54:	009b      	lslcc	r3, r3, #2
 8014f56:	3002      	addcc	r0, #2
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	db05      	blt.n	8014f68 <__hi0bits+0x3c>
 8014f5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014f60:	f100 0001 	add.w	r0, r0, #1
 8014f64:	bf08      	it	eq
 8014f66:	2020      	moveq	r0, #32
 8014f68:	4770      	bx	lr

08014f6a <__lo0bits>:
 8014f6a:	6803      	ldr	r3, [r0, #0]
 8014f6c:	4602      	mov	r2, r0
 8014f6e:	f013 0007 	ands.w	r0, r3, #7
 8014f72:	d00b      	beq.n	8014f8c <__lo0bits+0x22>
 8014f74:	07d9      	lsls	r1, r3, #31
 8014f76:	d421      	bmi.n	8014fbc <__lo0bits+0x52>
 8014f78:	0798      	lsls	r0, r3, #30
 8014f7a:	bf49      	itett	mi
 8014f7c:	085b      	lsrmi	r3, r3, #1
 8014f7e:	089b      	lsrpl	r3, r3, #2
 8014f80:	2001      	movmi	r0, #1
 8014f82:	6013      	strmi	r3, [r2, #0]
 8014f84:	bf5c      	itt	pl
 8014f86:	6013      	strpl	r3, [r2, #0]
 8014f88:	2002      	movpl	r0, #2
 8014f8a:	4770      	bx	lr
 8014f8c:	b299      	uxth	r1, r3
 8014f8e:	b909      	cbnz	r1, 8014f94 <__lo0bits+0x2a>
 8014f90:	0c1b      	lsrs	r3, r3, #16
 8014f92:	2010      	movs	r0, #16
 8014f94:	b2d9      	uxtb	r1, r3
 8014f96:	b909      	cbnz	r1, 8014f9c <__lo0bits+0x32>
 8014f98:	3008      	adds	r0, #8
 8014f9a:	0a1b      	lsrs	r3, r3, #8
 8014f9c:	0719      	lsls	r1, r3, #28
 8014f9e:	bf04      	itt	eq
 8014fa0:	091b      	lsreq	r3, r3, #4
 8014fa2:	3004      	addeq	r0, #4
 8014fa4:	0799      	lsls	r1, r3, #30
 8014fa6:	bf04      	itt	eq
 8014fa8:	089b      	lsreq	r3, r3, #2
 8014faa:	3002      	addeq	r0, #2
 8014fac:	07d9      	lsls	r1, r3, #31
 8014fae:	d403      	bmi.n	8014fb8 <__lo0bits+0x4e>
 8014fb0:	085b      	lsrs	r3, r3, #1
 8014fb2:	f100 0001 	add.w	r0, r0, #1
 8014fb6:	d003      	beq.n	8014fc0 <__lo0bits+0x56>
 8014fb8:	6013      	str	r3, [r2, #0]
 8014fba:	4770      	bx	lr
 8014fbc:	2000      	movs	r0, #0
 8014fbe:	4770      	bx	lr
 8014fc0:	2020      	movs	r0, #32
 8014fc2:	4770      	bx	lr

08014fc4 <__i2b>:
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	460c      	mov	r4, r1
 8014fc8:	2101      	movs	r1, #1
 8014fca:	f7ff febd 	bl	8014d48 <_Balloc>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	b928      	cbnz	r0, 8014fde <__i2b+0x1a>
 8014fd2:	4b05      	ldr	r3, [pc, #20]	@ (8014fe8 <__i2b+0x24>)
 8014fd4:	4805      	ldr	r0, [pc, #20]	@ (8014fec <__i2b+0x28>)
 8014fd6:	f240 1145 	movw	r1, #325	@ 0x145
 8014fda:	f001 f9ab 	bl	8016334 <__assert_func>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	6144      	str	r4, [r0, #20]
 8014fe2:	6103      	str	r3, [r0, #16]
 8014fe4:	bd10      	pop	{r4, pc}
 8014fe6:	bf00      	nop
 8014fe8:	080178eb 	.word	0x080178eb
 8014fec:	0801795c 	.word	0x0801795c

08014ff0 <__multiply>:
 8014ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ff4:	4614      	mov	r4, r2
 8014ff6:	690a      	ldr	r2, [r1, #16]
 8014ff8:	6923      	ldr	r3, [r4, #16]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	bfa8      	it	ge
 8014ffe:	4623      	movge	r3, r4
 8015000:	460f      	mov	r7, r1
 8015002:	bfa4      	itt	ge
 8015004:	460c      	movge	r4, r1
 8015006:	461f      	movge	r7, r3
 8015008:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801500c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015010:	68a3      	ldr	r3, [r4, #8]
 8015012:	6861      	ldr	r1, [r4, #4]
 8015014:	eb0a 0609 	add.w	r6, sl, r9
 8015018:	42b3      	cmp	r3, r6
 801501a:	b085      	sub	sp, #20
 801501c:	bfb8      	it	lt
 801501e:	3101      	addlt	r1, #1
 8015020:	f7ff fe92 	bl	8014d48 <_Balloc>
 8015024:	b930      	cbnz	r0, 8015034 <__multiply+0x44>
 8015026:	4602      	mov	r2, r0
 8015028:	4b44      	ldr	r3, [pc, #272]	@ (801513c <__multiply+0x14c>)
 801502a:	4845      	ldr	r0, [pc, #276]	@ (8015140 <__multiply+0x150>)
 801502c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015030:	f001 f980 	bl	8016334 <__assert_func>
 8015034:	f100 0514 	add.w	r5, r0, #20
 8015038:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801503c:	462b      	mov	r3, r5
 801503e:	2200      	movs	r2, #0
 8015040:	4543      	cmp	r3, r8
 8015042:	d321      	bcc.n	8015088 <__multiply+0x98>
 8015044:	f107 0114 	add.w	r1, r7, #20
 8015048:	f104 0214 	add.w	r2, r4, #20
 801504c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015050:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015054:	9302      	str	r3, [sp, #8]
 8015056:	1b13      	subs	r3, r2, r4
 8015058:	3b15      	subs	r3, #21
 801505a:	f023 0303 	bic.w	r3, r3, #3
 801505e:	3304      	adds	r3, #4
 8015060:	f104 0715 	add.w	r7, r4, #21
 8015064:	42ba      	cmp	r2, r7
 8015066:	bf38      	it	cc
 8015068:	2304      	movcc	r3, #4
 801506a:	9301      	str	r3, [sp, #4]
 801506c:	9b02      	ldr	r3, [sp, #8]
 801506e:	9103      	str	r1, [sp, #12]
 8015070:	428b      	cmp	r3, r1
 8015072:	d80c      	bhi.n	801508e <__multiply+0x9e>
 8015074:	2e00      	cmp	r6, #0
 8015076:	dd03      	ble.n	8015080 <__multiply+0x90>
 8015078:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801507c:	2b00      	cmp	r3, #0
 801507e:	d05b      	beq.n	8015138 <__multiply+0x148>
 8015080:	6106      	str	r6, [r0, #16]
 8015082:	b005      	add	sp, #20
 8015084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015088:	f843 2b04 	str.w	r2, [r3], #4
 801508c:	e7d8      	b.n	8015040 <__multiply+0x50>
 801508e:	f8b1 a000 	ldrh.w	sl, [r1]
 8015092:	f1ba 0f00 	cmp.w	sl, #0
 8015096:	d024      	beq.n	80150e2 <__multiply+0xf2>
 8015098:	f104 0e14 	add.w	lr, r4, #20
 801509c:	46a9      	mov	r9, r5
 801509e:	f04f 0c00 	mov.w	ip, #0
 80150a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80150a6:	f8d9 3000 	ldr.w	r3, [r9]
 80150aa:	fa1f fb87 	uxth.w	fp, r7
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80150b4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80150b8:	f8d9 7000 	ldr.w	r7, [r9]
 80150bc:	4463      	add	r3, ip
 80150be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80150c2:	fb0a c70b 	mla	r7, sl, fp, ip
 80150c6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80150d0:	4572      	cmp	r2, lr
 80150d2:	f849 3b04 	str.w	r3, [r9], #4
 80150d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80150da:	d8e2      	bhi.n	80150a2 <__multiply+0xb2>
 80150dc:	9b01      	ldr	r3, [sp, #4]
 80150de:	f845 c003 	str.w	ip, [r5, r3]
 80150e2:	9b03      	ldr	r3, [sp, #12]
 80150e4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80150e8:	3104      	adds	r1, #4
 80150ea:	f1b9 0f00 	cmp.w	r9, #0
 80150ee:	d021      	beq.n	8015134 <__multiply+0x144>
 80150f0:	682b      	ldr	r3, [r5, #0]
 80150f2:	f104 0c14 	add.w	ip, r4, #20
 80150f6:	46ae      	mov	lr, r5
 80150f8:	f04f 0a00 	mov.w	sl, #0
 80150fc:	f8bc b000 	ldrh.w	fp, [ip]
 8015100:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015104:	fb09 770b 	mla	r7, r9, fp, r7
 8015108:	4457      	add	r7, sl
 801510a:	b29b      	uxth	r3, r3
 801510c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015110:	f84e 3b04 	str.w	r3, [lr], #4
 8015114:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801511c:	f8be 3000 	ldrh.w	r3, [lr]
 8015120:	fb09 330a 	mla	r3, r9, sl, r3
 8015124:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015128:	4562      	cmp	r2, ip
 801512a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801512e:	d8e5      	bhi.n	80150fc <__multiply+0x10c>
 8015130:	9f01      	ldr	r7, [sp, #4]
 8015132:	51eb      	str	r3, [r5, r7]
 8015134:	3504      	adds	r5, #4
 8015136:	e799      	b.n	801506c <__multiply+0x7c>
 8015138:	3e01      	subs	r6, #1
 801513a:	e79b      	b.n	8015074 <__multiply+0x84>
 801513c:	080178eb 	.word	0x080178eb
 8015140:	0801795c 	.word	0x0801795c

08015144 <__pow5mult>:
 8015144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015148:	4615      	mov	r5, r2
 801514a:	f012 0203 	ands.w	r2, r2, #3
 801514e:	4607      	mov	r7, r0
 8015150:	460e      	mov	r6, r1
 8015152:	d007      	beq.n	8015164 <__pow5mult+0x20>
 8015154:	4c25      	ldr	r4, [pc, #148]	@ (80151ec <__pow5mult+0xa8>)
 8015156:	3a01      	subs	r2, #1
 8015158:	2300      	movs	r3, #0
 801515a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801515e:	f7ff fe55 	bl	8014e0c <__multadd>
 8015162:	4606      	mov	r6, r0
 8015164:	10ad      	asrs	r5, r5, #2
 8015166:	d03d      	beq.n	80151e4 <__pow5mult+0xa0>
 8015168:	69fc      	ldr	r4, [r7, #28]
 801516a:	b97c      	cbnz	r4, 801518c <__pow5mult+0x48>
 801516c:	2010      	movs	r0, #16
 801516e:	f7ff fd23 	bl	8014bb8 <malloc>
 8015172:	4602      	mov	r2, r0
 8015174:	61f8      	str	r0, [r7, #28]
 8015176:	b928      	cbnz	r0, 8015184 <__pow5mult+0x40>
 8015178:	4b1d      	ldr	r3, [pc, #116]	@ (80151f0 <__pow5mult+0xac>)
 801517a:	481e      	ldr	r0, [pc, #120]	@ (80151f4 <__pow5mult+0xb0>)
 801517c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015180:	f001 f8d8 	bl	8016334 <__assert_func>
 8015184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015188:	6004      	str	r4, [r0, #0]
 801518a:	60c4      	str	r4, [r0, #12]
 801518c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015194:	b94c      	cbnz	r4, 80151aa <__pow5mult+0x66>
 8015196:	f240 2171 	movw	r1, #625	@ 0x271
 801519a:	4638      	mov	r0, r7
 801519c:	f7ff ff12 	bl	8014fc4 <__i2b>
 80151a0:	2300      	movs	r3, #0
 80151a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80151a6:	4604      	mov	r4, r0
 80151a8:	6003      	str	r3, [r0, #0]
 80151aa:	f04f 0900 	mov.w	r9, #0
 80151ae:	07eb      	lsls	r3, r5, #31
 80151b0:	d50a      	bpl.n	80151c8 <__pow5mult+0x84>
 80151b2:	4631      	mov	r1, r6
 80151b4:	4622      	mov	r2, r4
 80151b6:	4638      	mov	r0, r7
 80151b8:	f7ff ff1a 	bl	8014ff0 <__multiply>
 80151bc:	4631      	mov	r1, r6
 80151be:	4680      	mov	r8, r0
 80151c0:	4638      	mov	r0, r7
 80151c2:	f7ff fe01 	bl	8014dc8 <_Bfree>
 80151c6:	4646      	mov	r6, r8
 80151c8:	106d      	asrs	r5, r5, #1
 80151ca:	d00b      	beq.n	80151e4 <__pow5mult+0xa0>
 80151cc:	6820      	ldr	r0, [r4, #0]
 80151ce:	b938      	cbnz	r0, 80151e0 <__pow5mult+0x9c>
 80151d0:	4622      	mov	r2, r4
 80151d2:	4621      	mov	r1, r4
 80151d4:	4638      	mov	r0, r7
 80151d6:	f7ff ff0b 	bl	8014ff0 <__multiply>
 80151da:	6020      	str	r0, [r4, #0]
 80151dc:	f8c0 9000 	str.w	r9, [r0]
 80151e0:	4604      	mov	r4, r0
 80151e2:	e7e4      	b.n	80151ae <__pow5mult+0x6a>
 80151e4:	4630      	mov	r0, r6
 80151e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151ea:	bf00      	nop
 80151ec:	080179b8 	.word	0x080179b8
 80151f0:	0801787c 	.word	0x0801787c
 80151f4:	0801795c 	.word	0x0801795c

080151f8 <__lshift>:
 80151f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151fc:	460c      	mov	r4, r1
 80151fe:	6849      	ldr	r1, [r1, #4]
 8015200:	6923      	ldr	r3, [r4, #16]
 8015202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015206:	68a3      	ldr	r3, [r4, #8]
 8015208:	4607      	mov	r7, r0
 801520a:	4691      	mov	r9, r2
 801520c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015210:	f108 0601 	add.w	r6, r8, #1
 8015214:	42b3      	cmp	r3, r6
 8015216:	db0b      	blt.n	8015230 <__lshift+0x38>
 8015218:	4638      	mov	r0, r7
 801521a:	f7ff fd95 	bl	8014d48 <_Balloc>
 801521e:	4605      	mov	r5, r0
 8015220:	b948      	cbnz	r0, 8015236 <__lshift+0x3e>
 8015222:	4602      	mov	r2, r0
 8015224:	4b28      	ldr	r3, [pc, #160]	@ (80152c8 <__lshift+0xd0>)
 8015226:	4829      	ldr	r0, [pc, #164]	@ (80152cc <__lshift+0xd4>)
 8015228:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801522c:	f001 f882 	bl	8016334 <__assert_func>
 8015230:	3101      	adds	r1, #1
 8015232:	005b      	lsls	r3, r3, #1
 8015234:	e7ee      	b.n	8015214 <__lshift+0x1c>
 8015236:	2300      	movs	r3, #0
 8015238:	f100 0114 	add.w	r1, r0, #20
 801523c:	f100 0210 	add.w	r2, r0, #16
 8015240:	4618      	mov	r0, r3
 8015242:	4553      	cmp	r3, sl
 8015244:	db33      	blt.n	80152ae <__lshift+0xb6>
 8015246:	6920      	ldr	r0, [r4, #16]
 8015248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801524c:	f104 0314 	add.w	r3, r4, #20
 8015250:	f019 091f 	ands.w	r9, r9, #31
 8015254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801525c:	d02b      	beq.n	80152b6 <__lshift+0xbe>
 801525e:	f1c9 0e20 	rsb	lr, r9, #32
 8015262:	468a      	mov	sl, r1
 8015264:	2200      	movs	r2, #0
 8015266:	6818      	ldr	r0, [r3, #0]
 8015268:	fa00 f009 	lsl.w	r0, r0, r9
 801526c:	4310      	orrs	r0, r2
 801526e:	f84a 0b04 	str.w	r0, [sl], #4
 8015272:	f853 2b04 	ldr.w	r2, [r3], #4
 8015276:	459c      	cmp	ip, r3
 8015278:	fa22 f20e 	lsr.w	r2, r2, lr
 801527c:	d8f3      	bhi.n	8015266 <__lshift+0x6e>
 801527e:	ebac 0304 	sub.w	r3, ip, r4
 8015282:	3b15      	subs	r3, #21
 8015284:	f023 0303 	bic.w	r3, r3, #3
 8015288:	3304      	adds	r3, #4
 801528a:	f104 0015 	add.w	r0, r4, #21
 801528e:	4584      	cmp	ip, r0
 8015290:	bf38      	it	cc
 8015292:	2304      	movcc	r3, #4
 8015294:	50ca      	str	r2, [r1, r3]
 8015296:	b10a      	cbz	r2, 801529c <__lshift+0xa4>
 8015298:	f108 0602 	add.w	r6, r8, #2
 801529c:	3e01      	subs	r6, #1
 801529e:	4638      	mov	r0, r7
 80152a0:	612e      	str	r6, [r5, #16]
 80152a2:	4621      	mov	r1, r4
 80152a4:	f7ff fd90 	bl	8014dc8 <_Bfree>
 80152a8:	4628      	mov	r0, r5
 80152aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80152b2:	3301      	adds	r3, #1
 80152b4:	e7c5      	b.n	8015242 <__lshift+0x4a>
 80152b6:	3904      	subs	r1, #4
 80152b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80152bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80152c0:	459c      	cmp	ip, r3
 80152c2:	d8f9      	bhi.n	80152b8 <__lshift+0xc0>
 80152c4:	e7ea      	b.n	801529c <__lshift+0xa4>
 80152c6:	bf00      	nop
 80152c8:	080178eb 	.word	0x080178eb
 80152cc:	0801795c 	.word	0x0801795c

080152d0 <__mcmp>:
 80152d0:	690a      	ldr	r2, [r1, #16]
 80152d2:	4603      	mov	r3, r0
 80152d4:	6900      	ldr	r0, [r0, #16]
 80152d6:	1a80      	subs	r0, r0, r2
 80152d8:	b530      	push	{r4, r5, lr}
 80152da:	d10e      	bne.n	80152fa <__mcmp+0x2a>
 80152dc:	3314      	adds	r3, #20
 80152de:	3114      	adds	r1, #20
 80152e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80152e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80152e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80152ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80152f0:	4295      	cmp	r5, r2
 80152f2:	d003      	beq.n	80152fc <__mcmp+0x2c>
 80152f4:	d205      	bcs.n	8015302 <__mcmp+0x32>
 80152f6:	f04f 30ff 	mov.w	r0, #4294967295
 80152fa:	bd30      	pop	{r4, r5, pc}
 80152fc:	42a3      	cmp	r3, r4
 80152fe:	d3f3      	bcc.n	80152e8 <__mcmp+0x18>
 8015300:	e7fb      	b.n	80152fa <__mcmp+0x2a>
 8015302:	2001      	movs	r0, #1
 8015304:	e7f9      	b.n	80152fa <__mcmp+0x2a>
	...

08015308 <__mdiff>:
 8015308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801530c:	4689      	mov	r9, r1
 801530e:	4606      	mov	r6, r0
 8015310:	4611      	mov	r1, r2
 8015312:	4648      	mov	r0, r9
 8015314:	4614      	mov	r4, r2
 8015316:	f7ff ffdb 	bl	80152d0 <__mcmp>
 801531a:	1e05      	subs	r5, r0, #0
 801531c:	d112      	bne.n	8015344 <__mdiff+0x3c>
 801531e:	4629      	mov	r1, r5
 8015320:	4630      	mov	r0, r6
 8015322:	f7ff fd11 	bl	8014d48 <_Balloc>
 8015326:	4602      	mov	r2, r0
 8015328:	b928      	cbnz	r0, 8015336 <__mdiff+0x2e>
 801532a:	4b3f      	ldr	r3, [pc, #252]	@ (8015428 <__mdiff+0x120>)
 801532c:	f240 2137 	movw	r1, #567	@ 0x237
 8015330:	483e      	ldr	r0, [pc, #248]	@ (801542c <__mdiff+0x124>)
 8015332:	f000 ffff 	bl	8016334 <__assert_func>
 8015336:	2301      	movs	r3, #1
 8015338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801533c:	4610      	mov	r0, r2
 801533e:	b003      	add	sp, #12
 8015340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015344:	bfbc      	itt	lt
 8015346:	464b      	movlt	r3, r9
 8015348:	46a1      	movlt	r9, r4
 801534a:	4630      	mov	r0, r6
 801534c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015350:	bfba      	itte	lt
 8015352:	461c      	movlt	r4, r3
 8015354:	2501      	movlt	r5, #1
 8015356:	2500      	movge	r5, #0
 8015358:	f7ff fcf6 	bl	8014d48 <_Balloc>
 801535c:	4602      	mov	r2, r0
 801535e:	b918      	cbnz	r0, 8015368 <__mdiff+0x60>
 8015360:	4b31      	ldr	r3, [pc, #196]	@ (8015428 <__mdiff+0x120>)
 8015362:	f240 2145 	movw	r1, #581	@ 0x245
 8015366:	e7e3      	b.n	8015330 <__mdiff+0x28>
 8015368:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801536c:	6926      	ldr	r6, [r4, #16]
 801536e:	60c5      	str	r5, [r0, #12]
 8015370:	f109 0310 	add.w	r3, r9, #16
 8015374:	f109 0514 	add.w	r5, r9, #20
 8015378:	f104 0e14 	add.w	lr, r4, #20
 801537c:	f100 0b14 	add.w	fp, r0, #20
 8015380:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015384:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015388:	9301      	str	r3, [sp, #4]
 801538a:	46d9      	mov	r9, fp
 801538c:	f04f 0c00 	mov.w	ip, #0
 8015390:	9b01      	ldr	r3, [sp, #4]
 8015392:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015396:	f853 af04 	ldr.w	sl, [r3, #4]!
 801539a:	9301      	str	r3, [sp, #4]
 801539c:	fa1f f38a 	uxth.w	r3, sl
 80153a0:	4619      	mov	r1, r3
 80153a2:	b283      	uxth	r3, r0
 80153a4:	1acb      	subs	r3, r1, r3
 80153a6:	0c00      	lsrs	r0, r0, #16
 80153a8:	4463      	add	r3, ip
 80153aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80153ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80153b8:	4576      	cmp	r6, lr
 80153ba:	f849 3b04 	str.w	r3, [r9], #4
 80153be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80153c2:	d8e5      	bhi.n	8015390 <__mdiff+0x88>
 80153c4:	1b33      	subs	r3, r6, r4
 80153c6:	3b15      	subs	r3, #21
 80153c8:	f023 0303 	bic.w	r3, r3, #3
 80153cc:	3415      	adds	r4, #21
 80153ce:	3304      	adds	r3, #4
 80153d0:	42a6      	cmp	r6, r4
 80153d2:	bf38      	it	cc
 80153d4:	2304      	movcc	r3, #4
 80153d6:	441d      	add	r5, r3
 80153d8:	445b      	add	r3, fp
 80153da:	461e      	mov	r6, r3
 80153dc:	462c      	mov	r4, r5
 80153de:	4544      	cmp	r4, r8
 80153e0:	d30e      	bcc.n	8015400 <__mdiff+0xf8>
 80153e2:	f108 0103 	add.w	r1, r8, #3
 80153e6:	1b49      	subs	r1, r1, r5
 80153e8:	f021 0103 	bic.w	r1, r1, #3
 80153ec:	3d03      	subs	r5, #3
 80153ee:	45a8      	cmp	r8, r5
 80153f0:	bf38      	it	cc
 80153f2:	2100      	movcc	r1, #0
 80153f4:	440b      	add	r3, r1
 80153f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80153fa:	b191      	cbz	r1, 8015422 <__mdiff+0x11a>
 80153fc:	6117      	str	r7, [r2, #16]
 80153fe:	e79d      	b.n	801533c <__mdiff+0x34>
 8015400:	f854 1b04 	ldr.w	r1, [r4], #4
 8015404:	46e6      	mov	lr, ip
 8015406:	0c08      	lsrs	r0, r1, #16
 8015408:	fa1c fc81 	uxtah	ip, ip, r1
 801540c:	4471      	add	r1, lr
 801540e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015412:	b289      	uxth	r1, r1
 8015414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015418:	f846 1b04 	str.w	r1, [r6], #4
 801541c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015420:	e7dd      	b.n	80153de <__mdiff+0xd6>
 8015422:	3f01      	subs	r7, #1
 8015424:	e7e7      	b.n	80153f6 <__mdiff+0xee>
 8015426:	bf00      	nop
 8015428:	080178eb 	.word	0x080178eb
 801542c:	0801795c 	.word	0x0801795c

08015430 <__ulp>:
 8015430:	b082      	sub	sp, #8
 8015432:	ed8d 0b00 	vstr	d0, [sp]
 8015436:	9a01      	ldr	r2, [sp, #4]
 8015438:	4b0f      	ldr	r3, [pc, #60]	@ (8015478 <__ulp+0x48>)
 801543a:	4013      	ands	r3, r2
 801543c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015440:	2b00      	cmp	r3, #0
 8015442:	dc08      	bgt.n	8015456 <__ulp+0x26>
 8015444:	425b      	negs	r3, r3
 8015446:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801544a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801544e:	da04      	bge.n	801545a <__ulp+0x2a>
 8015450:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015454:	4113      	asrs	r3, r2
 8015456:	2200      	movs	r2, #0
 8015458:	e008      	b.n	801546c <__ulp+0x3c>
 801545a:	f1a2 0314 	sub.w	r3, r2, #20
 801545e:	2b1e      	cmp	r3, #30
 8015460:	bfda      	itte	le
 8015462:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8015466:	40da      	lsrle	r2, r3
 8015468:	2201      	movgt	r2, #1
 801546a:	2300      	movs	r3, #0
 801546c:	4619      	mov	r1, r3
 801546e:	4610      	mov	r0, r2
 8015470:	ec41 0b10 	vmov	d0, r0, r1
 8015474:	b002      	add	sp, #8
 8015476:	4770      	bx	lr
 8015478:	7ff00000 	.word	0x7ff00000

0801547c <__b2d>:
 801547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015480:	6906      	ldr	r6, [r0, #16]
 8015482:	f100 0814 	add.w	r8, r0, #20
 8015486:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801548a:	1f37      	subs	r7, r6, #4
 801548c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015490:	4610      	mov	r0, r2
 8015492:	f7ff fd4b 	bl	8014f2c <__hi0bits>
 8015496:	f1c0 0320 	rsb	r3, r0, #32
 801549a:	280a      	cmp	r0, #10
 801549c:	600b      	str	r3, [r1, #0]
 801549e:	491b      	ldr	r1, [pc, #108]	@ (801550c <__b2d+0x90>)
 80154a0:	dc15      	bgt.n	80154ce <__b2d+0x52>
 80154a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80154a6:	fa22 f30c 	lsr.w	r3, r2, ip
 80154aa:	45b8      	cmp	r8, r7
 80154ac:	ea43 0501 	orr.w	r5, r3, r1
 80154b0:	bf34      	ite	cc
 80154b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80154b6:	2300      	movcs	r3, #0
 80154b8:	3015      	adds	r0, #21
 80154ba:	fa02 f000 	lsl.w	r0, r2, r0
 80154be:	fa23 f30c 	lsr.w	r3, r3, ip
 80154c2:	4303      	orrs	r3, r0
 80154c4:	461c      	mov	r4, r3
 80154c6:	ec45 4b10 	vmov	d0, r4, r5
 80154ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ce:	45b8      	cmp	r8, r7
 80154d0:	bf3a      	itte	cc
 80154d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80154d6:	f1a6 0708 	subcc.w	r7, r6, #8
 80154da:	2300      	movcs	r3, #0
 80154dc:	380b      	subs	r0, #11
 80154de:	d012      	beq.n	8015506 <__b2d+0x8a>
 80154e0:	f1c0 0120 	rsb	r1, r0, #32
 80154e4:	fa23 f401 	lsr.w	r4, r3, r1
 80154e8:	4082      	lsls	r2, r0
 80154ea:	4322      	orrs	r2, r4
 80154ec:	4547      	cmp	r7, r8
 80154ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80154f2:	bf8c      	ite	hi
 80154f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80154f8:	2200      	movls	r2, #0
 80154fa:	4083      	lsls	r3, r0
 80154fc:	40ca      	lsrs	r2, r1
 80154fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015502:	4313      	orrs	r3, r2
 8015504:	e7de      	b.n	80154c4 <__b2d+0x48>
 8015506:	ea42 0501 	orr.w	r5, r2, r1
 801550a:	e7db      	b.n	80154c4 <__b2d+0x48>
 801550c:	3ff00000 	.word	0x3ff00000

08015510 <__d2b>:
 8015510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015514:	460f      	mov	r7, r1
 8015516:	2101      	movs	r1, #1
 8015518:	ec59 8b10 	vmov	r8, r9, d0
 801551c:	4616      	mov	r6, r2
 801551e:	f7ff fc13 	bl	8014d48 <_Balloc>
 8015522:	4604      	mov	r4, r0
 8015524:	b930      	cbnz	r0, 8015534 <__d2b+0x24>
 8015526:	4602      	mov	r2, r0
 8015528:	4b23      	ldr	r3, [pc, #140]	@ (80155b8 <__d2b+0xa8>)
 801552a:	4824      	ldr	r0, [pc, #144]	@ (80155bc <__d2b+0xac>)
 801552c:	f240 310f 	movw	r1, #783	@ 0x30f
 8015530:	f000 ff00 	bl	8016334 <__assert_func>
 8015534:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801553c:	b10d      	cbz	r5, 8015542 <__d2b+0x32>
 801553e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015542:	9301      	str	r3, [sp, #4]
 8015544:	f1b8 0300 	subs.w	r3, r8, #0
 8015548:	d023      	beq.n	8015592 <__d2b+0x82>
 801554a:	4668      	mov	r0, sp
 801554c:	9300      	str	r3, [sp, #0]
 801554e:	f7ff fd0c 	bl	8014f6a <__lo0bits>
 8015552:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015556:	b1d0      	cbz	r0, 801558e <__d2b+0x7e>
 8015558:	f1c0 0320 	rsb	r3, r0, #32
 801555c:	fa02 f303 	lsl.w	r3, r2, r3
 8015560:	430b      	orrs	r3, r1
 8015562:	40c2      	lsrs	r2, r0
 8015564:	6163      	str	r3, [r4, #20]
 8015566:	9201      	str	r2, [sp, #4]
 8015568:	9b01      	ldr	r3, [sp, #4]
 801556a:	61a3      	str	r3, [r4, #24]
 801556c:	2b00      	cmp	r3, #0
 801556e:	bf0c      	ite	eq
 8015570:	2201      	moveq	r2, #1
 8015572:	2202      	movne	r2, #2
 8015574:	6122      	str	r2, [r4, #16]
 8015576:	b1a5      	cbz	r5, 80155a2 <__d2b+0x92>
 8015578:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801557c:	4405      	add	r5, r0
 801557e:	603d      	str	r5, [r7, #0]
 8015580:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015584:	6030      	str	r0, [r6, #0]
 8015586:	4620      	mov	r0, r4
 8015588:	b003      	add	sp, #12
 801558a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801558e:	6161      	str	r1, [r4, #20]
 8015590:	e7ea      	b.n	8015568 <__d2b+0x58>
 8015592:	a801      	add	r0, sp, #4
 8015594:	f7ff fce9 	bl	8014f6a <__lo0bits>
 8015598:	9b01      	ldr	r3, [sp, #4]
 801559a:	6163      	str	r3, [r4, #20]
 801559c:	3020      	adds	r0, #32
 801559e:	2201      	movs	r2, #1
 80155a0:	e7e8      	b.n	8015574 <__d2b+0x64>
 80155a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80155a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80155aa:	6038      	str	r0, [r7, #0]
 80155ac:	6918      	ldr	r0, [r3, #16]
 80155ae:	f7ff fcbd 	bl	8014f2c <__hi0bits>
 80155b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80155b6:	e7e5      	b.n	8015584 <__d2b+0x74>
 80155b8:	080178eb 	.word	0x080178eb
 80155bc:	0801795c 	.word	0x0801795c

080155c0 <__ratio>:
 80155c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155c4:	b085      	sub	sp, #20
 80155c6:	e9cd 1000 	strd	r1, r0, [sp]
 80155ca:	a902      	add	r1, sp, #8
 80155cc:	f7ff ff56 	bl	801547c <__b2d>
 80155d0:	9800      	ldr	r0, [sp, #0]
 80155d2:	a903      	add	r1, sp, #12
 80155d4:	ec55 4b10 	vmov	r4, r5, d0
 80155d8:	f7ff ff50 	bl	801547c <__b2d>
 80155dc:	9b01      	ldr	r3, [sp, #4]
 80155de:	6919      	ldr	r1, [r3, #16]
 80155e0:	9b00      	ldr	r3, [sp, #0]
 80155e2:	691b      	ldr	r3, [r3, #16]
 80155e4:	1ac9      	subs	r1, r1, r3
 80155e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80155ea:	1a9b      	subs	r3, r3, r2
 80155ec:	ec5b ab10 	vmov	sl, fp, d0
 80155f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	bfce      	itee	gt
 80155f8:	462a      	movgt	r2, r5
 80155fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80155fe:	465a      	movle	r2, fp
 8015600:	462f      	mov	r7, r5
 8015602:	46d9      	mov	r9, fp
 8015604:	bfcc      	ite	gt
 8015606:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801560a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801560e:	464b      	mov	r3, r9
 8015610:	4652      	mov	r2, sl
 8015612:	4620      	mov	r0, r4
 8015614:	4639      	mov	r1, r7
 8015616:	f7eb f929 	bl	800086c <__aeabi_ddiv>
 801561a:	ec41 0b10 	vmov	d0, r0, r1
 801561e:	b005      	add	sp, #20
 8015620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015624 <__copybits>:
 8015624:	3901      	subs	r1, #1
 8015626:	b570      	push	{r4, r5, r6, lr}
 8015628:	1149      	asrs	r1, r1, #5
 801562a:	6914      	ldr	r4, [r2, #16]
 801562c:	3101      	adds	r1, #1
 801562e:	f102 0314 	add.w	r3, r2, #20
 8015632:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015636:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801563a:	1f05      	subs	r5, r0, #4
 801563c:	42a3      	cmp	r3, r4
 801563e:	d30c      	bcc.n	801565a <__copybits+0x36>
 8015640:	1aa3      	subs	r3, r4, r2
 8015642:	3b11      	subs	r3, #17
 8015644:	f023 0303 	bic.w	r3, r3, #3
 8015648:	3211      	adds	r2, #17
 801564a:	42a2      	cmp	r2, r4
 801564c:	bf88      	it	hi
 801564e:	2300      	movhi	r3, #0
 8015650:	4418      	add	r0, r3
 8015652:	2300      	movs	r3, #0
 8015654:	4288      	cmp	r0, r1
 8015656:	d305      	bcc.n	8015664 <__copybits+0x40>
 8015658:	bd70      	pop	{r4, r5, r6, pc}
 801565a:	f853 6b04 	ldr.w	r6, [r3], #4
 801565e:	f845 6f04 	str.w	r6, [r5, #4]!
 8015662:	e7eb      	b.n	801563c <__copybits+0x18>
 8015664:	f840 3b04 	str.w	r3, [r0], #4
 8015668:	e7f4      	b.n	8015654 <__copybits+0x30>

0801566a <__any_on>:
 801566a:	f100 0214 	add.w	r2, r0, #20
 801566e:	6900      	ldr	r0, [r0, #16]
 8015670:	114b      	asrs	r3, r1, #5
 8015672:	4298      	cmp	r0, r3
 8015674:	b510      	push	{r4, lr}
 8015676:	db11      	blt.n	801569c <__any_on+0x32>
 8015678:	dd0a      	ble.n	8015690 <__any_on+0x26>
 801567a:	f011 011f 	ands.w	r1, r1, #31
 801567e:	d007      	beq.n	8015690 <__any_on+0x26>
 8015680:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015684:	fa24 f001 	lsr.w	r0, r4, r1
 8015688:	fa00 f101 	lsl.w	r1, r0, r1
 801568c:	428c      	cmp	r4, r1
 801568e:	d10b      	bne.n	80156a8 <__any_on+0x3e>
 8015690:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015694:	4293      	cmp	r3, r2
 8015696:	d803      	bhi.n	80156a0 <__any_on+0x36>
 8015698:	2000      	movs	r0, #0
 801569a:	bd10      	pop	{r4, pc}
 801569c:	4603      	mov	r3, r0
 801569e:	e7f7      	b.n	8015690 <__any_on+0x26>
 80156a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80156a4:	2900      	cmp	r1, #0
 80156a6:	d0f5      	beq.n	8015694 <__any_on+0x2a>
 80156a8:	2001      	movs	r0, #1
 80156aa:	e7f6      	b.n	801569a <__any_on+0x30>

080156ac <_strtol_l.constprop.0>:
 80156ac:	2b24      	cmp	r3, #36	@ 0x24
 80156ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156b2:	4686      	mov	lr, r0
 80156b4:	4690      	mov	r8, r2
 80156b6:	d801      	bhi.n	80156bc <_strtol_l.constprop.0+0x10>
 80156b8:	2b01      	cmp	r3, #1
 80156ba:	d106      	bne.n	80156ca <_strtol_l.constprop.0+0x1e>
 80156bc:	f7fe f856 	bl	801376c <__errno>
 80156c0:	2316      	movs	r3, #22
 80156c2:	6003      	str	r3, [r0, #0]
 80156c4:	2000      	movs	r0, #0
 80156c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156ca:	4834      	ldr	r0, [pc, #208]	@ (801579c <_strtol_l.constprop.0+0xf0>)
 80156cc:	460d      	mov	r5, r1
 80156ce:	462a      	mov	r2, r5
 80156d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80156d4:	5d06      	ldrb	r6, [r0, r4]
 80156d6:	f016 0608 	ands.w	r6, r6, #8
 80156da:	d1f8      	bne.n	80156ce <_strtol_l.constprop.0+0x22>
 80156dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80156de:	d12d      	bne.n	801573c <_strtol_l.constprop.0+0x90>
 80156e0:	782c      	ldrb	r4, [r5, #0]
 80156e2:	2601      	movs	r6, #1
 80156e4:	1c95      	adds	r5, r2, #2
 80156e6:	f033 0210 	bics.w	r2, r3, #16
 80156ea:	d109      	bne.n	8015700 <_strtol_l.constprop.0+0x54>
 80156ec:	2c30      	cmp	r4, #48	@ 0x30
 80156ee:	d12a      	bne.n	8015746 <_strtol_l.constprop.0+0x9a>
 80156f0:	782a      	ldrb	r2, [r5, #0]
 80156f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80156f6:	2a58      	cmp	r2, #88	@ 0x58
 80156f8:	d125      	bne.n	8015746 <_strtol_l.constprop.0+0x9a>
 80156fa:	786c      	ldrb	r4, [r5, #1]
 80156fc:	2310      	movs	r3, #16
 80156fe:	3502      	adds	r5, #2
 8015700:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015704:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015708:	2200      	movs	r2, #0
 801570a:	fbbc f9f3 	udiv	r9, ip, r3
 801570e:	4610      	mov	r0, r2
 8015710:	fb03 ca19 	mls	sl, r3, r9, ip
 8015714:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015718:	2f09      	cmp	r7, #9
 801571a:	d81b      	bhi.n	8015754 <_strtol_l.constprop.0+0xa8>
 801571c:	463c      	mov	r4, r7
 801571e:	42a3      	cmp	r3, r4
 8015720:	dd27      	ble.n	8015772 <_strtol_l.constprop.0+0xc6>
 8015722:	1c57      	adds	r7, r2, #1
 8015724:	d007      	beq.n	8015736 <_strtol_l.constprop.0+0x8a>
 8015726:	4581      	cmp	r9, r0
 8015728:	d320      	bcc.n	801576c <_strtol_l.constprop.0+0xc0>
 801572a:	d101      	bne.n	8015730 <_strtol_l.constprop.0+0x84>
 801572c:	45a2      	cmp	sl, r4
 801572e:	db1d      	blt.n	801576c <_strtol_l.constprop.0+0xc0>
 8015730:	fb00 4003 	mla	r0, r0, r3, r4
 8015734:	2201      	movs	r2, #1
 8015736:	f815 4b01 	ldrb.w	r4, [r5], #1
 801573a:	e7eb      	b.n	8015714 <_strtol_l.constprop.0+0x68>
 801573c:	2c2b      	cmp	r4, #43	@ 0x2b
 801573e:	bf04      	itt	eq
 8015740:	782c      	ldrbeq	r4, [r5, #0]
 8015742:	1c95      	addeq	r5, r2, #2
 8015744:	e7cf      	b.n	80156e6 <_strtol_l.constprop.0+0x3a>
 8015746:	2b00      	cmp	r3, #0
 8015748:	d1da      	bne.n	8015700 <_strtol_l.constprop.0+0x54>
 801574a:	2c30      	cmp	r4, #48	@ 0x30
 801574c:	bf0c      	ite	eq
 801574e:	2308      	moveq	r3, #8
 8015750:	230a      	movne	r3, #10
 8015752:	e7d5      	b.n	8015700 <_strtol_l.constprop.0+0x54>
 8015754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015758:	2f19      	cmp	r7, #25
 801575a:	d801      	bhi.n	8015760 <_strtol_l.constprop.0+0xb4>
 801575c:	3c37      	subs	r4, #55	@ 0x37
 801575e:	e7de      	b.n	801571e <_strtol_l.constprop.0+0x72>
 8015760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015764:	2f19      	cmp	r7, #25
 8015766:	d804      	bhi.n	8015772 <_strtol_l.constprop.0+0xc6>
 8015768:	3c57      	subs	r4, #87	@ 0x57
 801576a:	e7d8      	b.n	801571e <_strtol_l.constprop.0+0x72>
 801576c:	f04f 32ff 	mov.w	r2, #4294967295
 8015770:	e7e1      	b.n	8015736 <_strtol_l.constprop.0+0x8a>
 8015772:	1c53      	adds	r3, r2, #1
 8015774:	d108      	bne.n	8015788 <_strtol_l.constprop.0+0xdc>
 8015776:	2322      	movs	r3, #34	@ 0x22
 8015778:	f8ce 3000 	str.w	r3, [lr]
 801577c:	4660      	mov	r0, ip
 801577e:	f1b8 0f00 	cmp.w	r8, #0
 8015782:	d0a0      	beq.n	80156c6 <_strtol_l.constprop.0+0x1a>
 8015784:	1e69      	subs	r1, r5, #1
 8015786:	e006      	b.n	8015796 <_strtol_l.constprop.0+0xea>
 8015788:	b106      	cbz	r6, 801578c <_strtol_l.constprop.0+0xe0>
 801578a:	4240      	negs	r0, r0
 801578c:	f1b8 0f00 	cmp.w	r8, #0
 8015790:	d099      	beq.n	80156c6 <_strtol_l.constprop.0+0x1a>
 8015792:	2a00      	cmp	r2, #0
 8015794:	d1f6      	bne.n	8015784 <_strtol_l.constprop.0+0xd8>
 8015796:	f8c8 1000 	str.w	r1, [r8]
 801579a:	e794      	b.n	80156c6 <_strtol_l.constprop.0+0x1a>
 801579c:	08017ab9 	.word	0x08017ab9

080157a0 <_strtol_r>:
 80157a0:	f7ff bf84 	b.w	80156ac <_strtol_l.constprop.0>

080157a4 <__ascii_wctomb>:
 80157a4:	4603      	mov	r3, r0
 80157a6:	4608      	mov	r0, r1
 80157a8:	b141      	cbz	r1, 80157bc <__ascii_wctomb+0x18>
 80157aa:	2aff      	cmp	r2, #255	@ 0xff
 80157ac:	d904      	bls.n	80157b8 <__ascii_wctomb+0x14>
 80157ae:	228a      	movs	r2, #138	@ 0x8a
 80157b0:	601a      	str	r2, [r3, #0]
 80157b2:	f04f 30ff 	mov.w	r0, #4294967295
 80157b6:	4770      	bx	lr
 80157b8:	700a      	strb	r2, [r1, #0]
 80157ba:	2001      	movs	r0, #1
 80157bc:	4770      	bx	lr

080157be <__ssputs_r>:
 80157be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157c2:	688e      	ldr	r6, [r1, #8]
 80157c4:	461f      	mov	r7, r3
 80157c6:	42be      	cmp	r6, r7
 80157c8:	680b      	ldr	r3, [r1, #0]
 80157ca:	4682      	mov	sl, r0
 80157cc:	460c      	mov	r4, r1
 80157ce:	4690      	mov	r8, r2
 80157d0:	d82d      	bhi.n	801582e <__ssputs_r+0x70>
 80157d2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80157d6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80157da:	d026      	beq.n	801582a <__ssputs_r+0x6c>
 80157dc:	6965      	ldr	r5, [r4, #20]
 80157de:	6909      	ldr	r1, [r1, #16]
 80157e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80157e4:	eba3 0901 	sub.w	r9, r3, r1
 80157e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80157ec:	1c7b      	adds	r3, r7, #1
 80157ee:	444b      	add	r3, r9
 80157f0:	106d      	asrs	r5, r5, #1
 80157f2:	429d      	cmp	r5, r3
 80157f4:	bf38      	it	cc
 80157f6:	461d      	movcc	r5, r3
 80157f8:	0553      	lsls	r3, r2, #21
 80157fa:	d527      	bpl.n	801584c <__ssputs_r+0x8e>
 80157fc:	4629      	mov	r1, r5
 80157fe:	f7ff fa05 	bl	8014c0c <_malloc_r>
 8015802:	4606      	mov	r6, r0
 8015804:	b360      	cbz	r0, 8015860 <__ssputs_r+0xa2>
 8015806:	6921      	ldr	r1, [r4, #16]
 8015808:	464a      	mov	r2, r9
 801580a:	f7fd ffe4 	bl	80137d6 <memcpy>
 801580e:	89a3      	ldrh	r3, [r4, #12]
 8015810:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015818:	81a3      	strh	r3, [r4, #12]
 801581a:	6126      	str	r6, [r4, #16]
 801581c:	6165      	str	r5, [r4, #20]
 801581e:	444e      	add	r6, r9
 8015820:	eba5 0509 	sub.w	r5, r5, r9
 8015824:	6026      	str	r6, [r4, #0]
 8015826:	60a5      	str	r5, [r4, #8]
 8015828:	463e      	mov	r6, r7
 801582a:	42be      	cmp	r6, r7
 801582c:	d900      	bls.n	8015830 <__ssputs_r+0x72>
 801582e:	463e      	mov	r6, r7
 8015830:	6820      	ldr	r0, [r4, #0]
 8015832:	4632      	mov	r2, r6
 8015834:	4641      	mov	r1, r8
 8015836:	f000 fd52 	bl	80162de <memmove>
 801583a:	68a3      	ldr	r3, [r4, #8]
 801583c:	1b9b      	subs	r3, r3, r6
 801583e:	60a3      	str	r3, [r4, #8]
 8015840:	6823      	ldr	r3, [r4, #0]
 8015842:	4433      	add	r3, r6
 8015844:	6023      	str	r3, [r4, #0]
 8015846:	2000      	movs	r0, #0
 8015848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801584c:	462a      	mov	r2, r5
 801584e:	f000 fda3 	bl	8016398 <_realloc_r>
 8015852:	4606      	mov	r6, r0
 8015854:	2800      	cmp	r0, #0
 8015856:	d1e0      	bne.n	801581a <__ssputs_r+0x5c>
 8015858:	6921      	ldr	r1, [r4, #16]
 801585a:	4650      	mov	r0, sl
 801585c:	f7fe fe28 	bl	80144b0 <_free_r>
 8015860:	230c      	movs	r3, #12
 8015862:	f8ca 3000 	str.w	r3, [sl]
 8015866:	89a3      	ldrh	r3, [r4, #12]
 8015868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801586c:	81a3      	strh	r3, [r4, #12]
 801586e:	f04f 30ff 	mov.w	r0, #4294967295
 8015872:	e7e9      	b.n	8015848 <__ssputs_r+0x8a>

08015874 <_svfiprintf_r>:
 8015874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015878:	4698      	mov	r8, r3
 801587a:	898b      	ldrh	r3, [r1, #12]
 801587c:	061b      	lsls	r3, r3, #24
 801587e:	b09d      	sub	sp, #116	@ 0x74
 8015880:	4607      	mov	r7, r0
 8015882:	460d      	mov	r5, r1
 8015884:	4614      	mov	r4, r2
 8015886:	d510      	bpl.n	80158aa <_svfiprintf_r+0x36>
 8015888:	690b      	ldr	r3, [r1, #16]
 801588a:	b973      	cbnz	r3, 80158aa <_svfiprintf_r+0x36>
 801588c:	2140      	movs	r1, #64	@ 0x40
 801588e:	f7ff f9bd 	bl	8014c0c <_malloc_r>
 8015892:	6028      	str	r0, [r5, #0]
 8015894:	6128      	str	r0, [r5, #16]
 8015896:	b930      	cbnz	r0, 80158a6 <_svfiprintf_r+0x32>
 8015898:	230c      	movs	r3, #12
 801589a:	603b      	str	r3, [r7, #0]
 801589c:	f04f 30ff 	mov.w	r0, #4294967295
 80158a0:	b01d      	add	sp, #116	@ 0x74
 80158a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158a6:	2340      	movs	r3, #64	@ 0x40
 80158a8:	616b      	str	r3, [r5, #20]
 80158aa:	2300      	movs	r3, #0
 80158ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80158ae:	2320      	movs	r3, #32
 80158b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80158b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80158b8:	2330      	movs	r3, #48	@ 0x30
 80158ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015a58 <_svfiprintf_r+0x1e4>
 80158be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80158c2:	f04f 0901 	mov.w	r9, #1
 80158c6:	4623      	mov	r3, r4
 80158c8:	469a      	mov	sl, r3
 80158ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158ce:	b10a      	cbz	r2, 80158d4 <_svfiprintf_r+0x60>
 80158d0:	2a25      	cmp	r2, #37	@ 0x25
 80158d2:	d1f9      	bne.n	80158c8 <_svfiprintf_r+0x54>
 80158d4:	ebba 0b04 	subs.w	fp, sl, r4
 80158d8:	d00b      	beq.n	80158f2 <_svfiprintf_r+0x7e>
 80158da:	465b      	mov	r3, fp
 80158dc:	4622      	mov	r2, r4
 80158de:	4629      	mov	r1, r5
 80158e0:	4638      	mov	r0, r7
 80158e2:	f7ff ff6c 	bl	80157be <__ssputs_r>
 80158e6:	3001      	adds	r0, #1
 80158e8:	f000 80a7 	beq.w	8015a3a <_svfiprintf_r+0x1c6>
 80158ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80158ee:	445a      	add	r2, fp
 80158f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80158f2:	f89a 3000 	ldrb.w	r3, [sl]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	f000 809f 	beq.w	8015a3a <_svfiprintf_r+0x1c6>
 80158fc:	2300      	movs	r3, #0
 80158fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015906:	f10a 0a01 	add.w	sl, sl, #1
 801590a:	9304      	str	r3, [sp, #16]
 801590c:	9307      	str	r3, [sp, #28]
 801590e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015912:	931a      	str	r3, [sp, #104]	@ 0x68
 8015914:	4654      	mov	r4, sl
 8015916:	2205      	movs	r2, #5
 8015918:	f814 1b01 	ldrb.w	r1, [r4], #1
 801591c:	484e      	ldr	r0, [pc, #312]	@ (8015a58 <_svfiprintf_r+0x1e4>)
 801591e:	f7ea fc67 	bl	80001f0 <memchr>
 8015922:	9a04      	ldr	r2, [sp, #16]
 8015924:	b9d8      	cbnz	r0, 801595e <_svfiprintf_r+0xea>
 8015926:	06d0      	lsls	r0, r2, #27
 8015928:	bf44      	itt	mi
 801592a:	2320      	movmi	r3, #32
 801592c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015930:	0711      	lsls	r1, r2, #28
 8015932:	bf44      	itt	mi
 8015934:	232b      	movmi	r3, #43	@ 0x2b
 8015936:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801593a:	f89a 3000 	ldrb.w	r3, [sl]
 801593e:	2b2a      	cmp	r3, #42	@ 0x2a
 8015940:	d015      	beq.n	801596e <_svfiprintf_r+0xfa>
 8015942:	9a07      	ldr	r2, [sp, #28]
 8015944:	4654      	mov	r4, sl
 8015946:	2000      	movs	r0, #0
 8015948:	f04f 0c0a 	mov.w	ip, #10
 801594c:	4621      	mov	r1, r4
 801594e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015952:	3b30      	subs	r3, #48	@ 0x30
 8015954:	2b09      	cmp	r3, #9
 8015956:	d94b      	bls.n	80159f0 <_svfiprintf_r+0x17c>
 8015958:	b1b0      	cbz	r0, 8015988 <_svfiprintf_r+0x114>
 801595a:	9207      	str	r2, [sp, #28]
 801595c:	e014      	b.n	8015988 <_svfiprintf_r+0x114>
 801595e:	eba0 0308 	sub.w	r3, r0, r8
 8015962:	fa09 f303 	lsl.w	r3, r9, r3
 8015966:	4313      	orrs	r3, r2
 8015968:	9304      	str	r3, [sp, #16]
 801596a:	46a2      	mov	sl, r4
 801596c:	e7d2      	b.n	8015914 <_svfiprintf_r+0xa0>
 801596e:	9b03      	ldr	r3, [sp, #12]
 8015970:	1d19      	adds	r1, r3, #4
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	9103      	str	r1, [sp, #12]
 8015976:	2b00      	cmp	r3, #0
 8015978:	bfbb      	ittet	lt
 801597a:	425b      	neglt	r3, r3
 801597c:	f042 0202 	orrlt.w	r2, r2, #2
 8015980:	9307      	strge	r3, [sp, #28]
 8015982:	9307      	strlt	r3, [sp, #28]
 8015984:	bfb8      	it	lt
 8015986:	9204      	strlt	r2, [sp, #16]
 8015988:	7823      	ldrb	r3, [r4, #0]
 801598a:	2b2e      	cmp	r3, #46	@ 0x2e
 801598c:	d10a      	bne.n	80159a4 <_svfiprintf_r+0x130>
 801598e:	7863      	ldrb	r3, [r4, #1]
 8015990:	2b2a      	cmp	r3, #42	@ 0x2a
 8015992:	d132      	bne.n	80159fa <_svfiprintf_r+0x186>
 8015994:	9b03      	ldr	r3, [sp, #12]
 8015996:	1d1a      	adds	r2, r3, #4
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	9203      	str	r2, [sp, #12]
 801599c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80159a0:	3402      	adds	r4, #2
 80159a2:	9305      	str	r3, [sp, #20]
 80159a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015a68 <_svfiprintf_r+0x1f4>
 80159a8:	7821      	ldrb	r1, [r4, #0]
 80159aa:	2203      	movs	r2, #3
 80159ac:	4650      	mov	r0, sl
 80159ae:	f7ea fc1f 	bl	80001f0 <memchr>
 80159b2:	b138      	cbz	r0, 80159c4 <_svfiprintf_r+0x150>
 80159b4:	9b04      	ldr	r3, [sp, #16]
 80159b6:	eba0 000a 	sub.w	r0, r0, sl
 80159ba:	2240      	movs	r2, #64	@ 0x40
 80159bc:	4082      	lsls	r2, r0
 80159be:	4313      	orrs	r3, r2
 80159c0:	3401      	adds	r4, #1
 80159c2:	9304      	str	r3, [sp, #16]
 80159c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159c8:	4824      	ldr	r0, [pc, #144]	@ (8015a5c <_svfiprintf_r+0x1e8>)
 80159ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80159ce:	2206      	movs	r2, #6
 80159d0:	f7ea fc0e 	bl	80001f0 <memchr>
 80159d4:	2800      	cmp	r0, #0
 80159d6:	d036      	beq.n	8015a46 <_svfiprintf_r+0x1d2>
 80159d8:	4b21      	ldr	r3, [pc, #132]	@ (8015a60 <_svfiprintf_r+0x1ec>)
 80159da:	bb1b      	cbnz	r3, 8015a24 <_svfiprintf_r+0x1b0>
 80159dc:	9b03      	ldr	r3, [sp, #12]
 80159de:	3307      	adds	r3, #7
 80159e0:	f023 0307 	bic.w	r3, r3, #7
 80159e4:	3308      	adds	r3, #8
 80159e6:	9303      	str	r3, [sp, #12]
 80159e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159ea:	4433      	add	r3, r6
 80159ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80159ee:	e76a      	b.n	80158c6 <_svfiprintf_r+0x52>
 80159f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80159f4:	460c      	mov	r4, r1
 80159f6:	2001      	movs	r0, #1
 80159f8:	e7a8      	b.n	801594c <_svfiprintf_r+0xd8>
 80159fa:	2300      	movs	r3, #0
 80159fc:	3401      	adds	r4, #1
 80159fe:	9305      	str	r3, [sp, #20]
 8015a00:	4619      	mov	r1, r3
 8015a02:	f04f 0c0a 	mov.w	ip, #10
 8015a06:	4620      	mov	r0, r4
 8015a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a0c:	3a30      	subs	r2, #48	@ 0x30
 8015a0e:	2a09      	cmp	r2, #9
 8015a10:	d903      	bls.n	8015a1a <_svfiprintf_r+0x1a6>
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d0c6      	beq.n	80159a4 <_svfiprintf_r+0x130>
 8015a16:	9105      	str	r1, [sp, #20]
 8015a18:	e7c4      	b.n	80159a4 <_svfiprintf_r+0x130>
 8015a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a1e:	4604      	mov	r4, r0
 8015a20:	2301      	movs	r3, #1
 8015a22:	e7f0      	b.n	8015a06 <_svfiprintf_r+0x192>
 8015a24:	ab03      	add	r3, sp, #12
 8015a26:	9300      	str	r3, [sp, #0]
 8015a28:	462a      	mov	r2, r5
 8015a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8015a64 <_svfiprintf_r+0x1f0>)
 8015a2c:	a904      	add	r1, sp, #16
 8015a2e:	4638      	mov	r0, r7
 8015a30:	f7fc feb8 	bl	80127a4 <_printf_float>
 8015a34:	1c42      	adds	r2, r0, #1
 8015a36:	4606      	mov	r6, r0
 8015a38:	d1d6      	bne.n	80159e8 <_svfiprintf_r+0x174>
 8015a3a:	89ab      	ldrh	r3, [r5, #12]
 8015a3c:	065b      	lsls	r3, r3, #25
 8015a3e:	f53f af2d 	bmi.w	801589c <_svfiprintf_r+0x28>
 8015a42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a44:	e72c      	b.n	80158a0 <_svfiprintf_r+0x2c>
 8015a46:	ab03      	add	r3, sp, #12
 8015a48:	9300      	str	r3, [sp, #0]
 8015a4a:	462a      	mov	r2, r5
 8015a4c:	4b05      	ldr	r3, [pc, #20]	@ (8015a64 <_svfiprintf_r+0x1f0>)
 8015a4e:	a904      	add	r1, sp, #16
 8015a50:	4638      	mov	r0, r7
 8015a52:	f7fd f93f 	bl	8012cd4 <_printf_i>
 8015a56:	e7ed      	b.n	8015a34 <_svfiprintf_r+0x1c0>
 8015a58:	08017bb9 	.word	0x08017bb9
 8015a5c:	08017bc3 	.word	0x08017bc3
 8015a60:	080127a5 	.word	0x080127a5
 8015a64:	080157bf 	.word	0x080157bf
 8015a68:	08017bbf 	.word	0x08017bbf

08015a6c <_sungetc_r>:
 8015a6c:	b538      	push	{r3, r4, r5, lr}
 8015a6e:	1c4b      	adds	r3, r1, #1
 8015a70:	4614      	mov	r4, r2
 8015a72:	d103      	bne.n	8015a7c <_sungetc_r+0x10>
 8015a74:	f04f 35ff 	mov.w	r5, #4294967295
 8015a78:	4628      	mov	r0, r5
 8015a7a:	bd38      	pop	{r3, r4, r5, pc}
 8015a7c:	8993      	ldrh	r3, [r2, #12]
 8015a7e:	f023 0320 	bic.w	r3, r3, #32
 8015a82:	8193      	strh	r3, [r2, #12]
 8015a84:	6853      	ldr	r3, [r2, #4]
 8015a86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8015a88:	b2cd      	uxtb	r5, r1
 8015a8a:	b18a      	cbz	r2, 8015ab0 <_sungetc_r+0x44>
 8015a8c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	dd08      	ble.n	8015aa4 <_sungetc_r+0x38>
 8015a92:	6823      	ldr	r3, [r4, #0]
 8015a94:	1e5a      	subs	r2, r3, #1
 8015a96:	6022      	str	r2, [r4, #0]
 8015a98:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015a9c:	6863      	ldr	r3, [r4, #4]
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	6063      	str	r3, [r4, #4]
 8015aa2:	e7e9      	b.n	8015a78 <_sungetc_r+0xc>
 8015aa4:	4621      	mov	r1, r4
 8015aa6:	f000 fbe0 	bl	801626a <__submore>
 8015aaa:	2800      	cmp	r0, #0
 8015aac:	d0f1      	beq.n	8015a92 <_sungetc_r+0x26>
 8015aae:	e7e1      	b.n	8015a74 <_sungetc_r+0x8>
 8015ab0:	6921      	ldr	r1, [r4, #16]
 8015ab2:	6822      	ldr	r2, [r4, #0]
 8015ab4:	b141      	cbz	r1, 8015ac8 <_sungetc_r+0x5c>
 8015ab6:	4291      	cmp	r1, r2
 8015ab8:	d206      	bcs.n	8015ac8 <_sungetc_r+0x5c>
 8015aba:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8015abe:	42a9      	cmp	r1, r5
 8015ac0:	d102      	bne.n	8015ac8 <_sungetc_r+0x5c>
 8015ac2:	3a01      	subs	r2, #1
 8015ac4:	6022      	str	r2, [r4, #0]
 8015ac6:	e7ea      	b.n	8015a9e <_sungetc_r+0x32>
 8015ac8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8015acc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015ad0:	6363      	str	r3, [r4, #52]	@ 0x34
 8015ad2:	2303      	movs	r3, #3
 8015ad4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015ad6:	4623      	mov	r3, r4
 8015ad8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015adc:	6023      	str	r3, [r4, #0]
 8015ade:	2301      	movs	r3, #1
 8015ae0:	e7de      	b.n	8015aa0 <_sungetc_r+0x34>

08015ae2 <__ssrefill_r>:
 8015ae2:	b510      	push	{r4, lr}
 8015ae4:	460c      	mov	r4, r1
 8015ae6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8015ae8:	b169      	cbz	r1, 8015b06 <__ssrefill_r+0x24>
 8015aea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015aee:	4299      	cmp	r1, r3
 8015af0:	d001      	beq.n	8015af6 <__ssrefill_r+0x14>
 8015af2:	f7fe fcdd 	bl	80144b0 <_free_r>
 8015af6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015af8:	6063      	str	r3, [r4, #4]
 8015afa:	2000      	movs	r0, #0
 8015afc:	6360      	str	r0, [r4, #52]	@ 0x34
 8015afe:	b113      	cbz	r3, 8015b06 <__ssrefill_r+0x24>
 8015b00:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015b02:	6023      	str	r3, [r4, #0]
 8015b04:	bd10      	pop	{r4, pc}
 8015b06:	6923      	ldr	r3, [r4, #16]
 8015b08:	6023      	str	r3, [r4, #0]
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	6063      	str	r3, [r4, #4]
 8015b0e:	89a3      	ldrh	r3, [r4, #12]
 8015b10:	f043 0320 	orr.w	r3, r3, #32
 8015b14:	81a3      	strh	r3, [r4, #12]
 8015b16:	f04f 30ff 	mov.w	r0, #4294967295
 8015b1a:	e7f3      	b.n	8015b04 <__ssrefill_r+0x22>

08015b1c <__ssvfiscanf_r>:
 8015b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b20:	460c      	mov	r4, r1
 8015b22:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8015b26:	2100      	movs	r1, #0
 8015b28:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8015b2c:	49a5      	ldr	r1, [pc, #660]	@ (8015dc4 <__ssvfiscanf_r+0x2a8>)
 8015b2e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8015b30:	f10d 0804 	add.w	r8, sp, #4
 8015b34:	49a4      	ldr	r1, [pc, #656]	@ (8015dc8 <__ssvfiscanf_r+0x2ac>)
 8015b36:	4fa5      	ldr	r7, [pc, #660]	@ (8015dcc <__ssvfiscanf_r+0x2b0>)
 8015b38:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8015b40:	9300      	str	r3, [sp, #0]
 8015b42:	7813      	ldrb	r3, [r2, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f000 8158 	beq.w	8015dfa <__ssvfiscanf_r+0x2de>
 8015b4a:	5cf9      	ldrb	r1, [r7, r3]
 8015b4c:	f011 0108 	ands.w	r1, r1, #8
 8015b50:	f102 0501 	add.w	r5, r2, #1
 8015b54:	d019      	beq.n	8015b8a <__ssvfiscanf_r+0x6e>
 8015b56:	6863      	ldr	r3, [r4, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	dd0f      	ble.n	8015b7c <__ssvfiscanf_r+0x60>
 8015b5c:	6823      	ldr	r3, [r4, #0]
 8015b5e:	781a      	ldrb	r2, [r3, #0]
 8015b60:	5cba      	ldrb	r2, [r7, r2]
 8015b62:	0712      	lsls	r2, r2, #28
 8015b64:	d401      	bmi.n	8015b6a <__ssvfiscanf_r+0x4e>
 8015b66:	462a      	mov	r2, r5
 8015b68:	e7eb      	b.n	8015b42 <__ssvfiscanf_r+0x26>
 8015b6a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015b6c:	3201      	adds	r2, #1
 8015b6e:	9245      	str	r2, [sp, #276]	@ 0x114
 8015b70:	6862      	ldr	r2, [r4, #4]
 8015b72:	3301      	adds	r3, #1
 8015b74:	3a01      	subs	r2, #1
 8015b76:	6062      	str	r2, [r4, #4]
 8015b78:	6023      	str	r3, [r4, #0]
 8015b7a:	e7ec      	b.n	8015b56 <__ssvfiscanf_r+0x3a>
 8015b7c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015b7e:	4621      	mov	r1, r4
 8015b80:	4630      	mov	r0, r6
 8015b82:	4798      	blx	r3
 8015b84:	2800      	cmp	r0, #0
 8015b86:	d0e9      	beq.n	8015b5c <__ssvfiscanf_r+0x40>
 8015b88:	e7ed      	b.n	8015b66 <__ssvfiscanf_r+0x4a>
 8015b8a:	2b25      	cmp	r3, #37	@ 0x25
 8015b8c:	d012      	beq.n	8015bb4 <__ssvfiscanf_r+0x98>
 8015b8e:	4699      	mov	r9, r3
 8015b90:	6863      	ldr	r3, [r4, #4]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	f340 8093 	ble.w	8015cbe <__ssvfiscanf_r+0x1a2>
 8015b98:	6822      	ldr	r2, [r4, #0]
 8015b9a:	7813      	ldrb	r3, [r2, #0]
 8015b9c:	454b      	cmp	r3, r9
 8015b9e:	f040 812c 	bne.w	8015dfa <__ssvfiscanf_r+0x2de>
 8015ba2:	6863      	ldr	r3, [r4, #4]
 8015ba4:	3b01      	subs	r3, #1
 8015ba6:	6063      	str	r3, [r4, #4]
 8015ba8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8015baa:	3201      	adds	r2, #1
 8015bac:	3301      	adds	r3, #1
 8015bae:	6022      	str	r2, [r4, #0]
 8015bb0:	9345      	str	r3, [sp, #276]	@ 0x114
 8015bb2:	e7d8      	b.n	8015b66 <__ssvfiscanf_r+0x4a>
 8015bb4:	9141      	str	r1, [sp, #260]	@ 0x104
 8015bb6:	9143      	str	r1, [sp, #268]	@ 0x10c
 8015bb8:	7853      	ldrb	r3, [r2, #1]
 8015bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8015bbc:	bf02      	ittt	eq
 8015bbe:	2310      	moveq	r3, #16
 8015bc0:	1c95      	addeq	r5, r2, #2
 8015bc2:	9341      	streq	r3, [sp, #260]	@ 0x104
 8015bc4:	220a      	movs	r2, #10
 8015bc6:	46a9      	mov	r9, r5
 8015bc8:	f819 1b01 	ldrb.w	r1, [r9], #1
 8015bcc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8015bd0:	2b09      	cmp	r3, #9
 8015bd2:	d91e      	bls.n	8015c12 <__ssvfiscanf_r+0xf6>
 8015bd4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8015dd0 <__ssvfiscanf_r+0x2b4>
 8015bd8:	2203      	movs	r2, #3
 8015bda:	4650      	mov	r0, sl
 8015bdc:	f7ea fb08 	bl	80001f0 <memchr>
 8015be0:	b138      	cbz	r0, 8015bf2 <__ssvfiscanf_r+0xd6>
 8015be2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015be4:	eba0 000a 	sub.w	r0, r0, sl
 8015be8:	2301      	movs	r3, #1
 8015bea:	4083      	lsls	r3, r0
 8015bec:	4313      	orrs	r3, r2
 8015bee:	9341      	str	r3, [sp, #260]	@ 0x104
 8015bf0:	464d      	mov	r5, r9
 8015bf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015bf6:	2b78      	cmp	r3, #120	@ 0x78
 8015bf8:	d806      	bhi.n	8015c08 <__ssvfiscanf_r+0xec>
 8015bfa:	2b57      	cmp	r3, #87	@ 0x57
 8015bfc:	d810      	bhi.n	8015c20 <__ssvfiscanf_r+0x104>
 8015bfe:	2b25      	cmp	r3, #37	@ 0x25
 8015c00:	d0c5      	beq.n	8015b8e <__ssvfiscanf_r+0x72>
 8015c02:	d857      	bhi.n	8015cb4 <__ssvfiscanf_r+0x198>
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d065      	beq.n	8015cd4 <__ssvfiscanf_r+0x1b8>
 8015c08:	2303      	movs	r3, #3
 8015c0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8015c0c:	230a      	movs	r3, #10
 8015c0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8015c10:	e078      	b.n	8015d04 <__ssvfiscanf_r+0x1e8>
 8015c12:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8015c14:	fb02 1103 	mla	r1, r2, r3, r1
 8015c18:	3930      	subs	r1, #48	@ 0x30
 8015c1a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8015c1c:	464d      	mov	r5, r9
 8015c1e:	e7d2      	b.n	8015bc6 <__ssvfiscanf_r+0xaa>
 8015c20:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8015c24:	2a20      	cmp	r2, #32
 8015c26:	d8ef      	bhi.n	8015c08 <__ssvfiscanf_r+0xec>
 8015c28:	a101      	add	r1, pc, #4	@ (adr r1, 8015c30 <__ssvfiscanf_r+0x114>)
 8015c2a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015c2e:	bf00      	nop
 8015c30:	08015ce3 	.word	0x08015ce3
 8015c34:	08015c09 	.word	0x08015c09
 8015c38:	08015c09 	.word	0x08015c09
 8015c3c:	08015d3d 	.word	0x08015d3d
 8015c40:	08015c09 	.word	0x08015c09
 8015c44:	08015c09 	.word	0x08015c09
 8015c48:	08015c09 	.word	0x08015c09
 8015c4c:	08015c09 	.word	0x08015c09
 8015c50:	08015c09 	.word	0x08015c09
 8015c54:	08015c09 	.word	0x08015c09
 8015c58:	08015c09 	.word	0x08015c09
 8015c5c:	08015d53 	.word	0x08015d53
 8015c60:	08015d39 	.word	0x08015d39
 8015c64:	08015cbb 	.word	0x08015cbb
 8015c68:	08015cbb 	.word	0x08015cbb
 8015c6c:	08015cbb 	.word	0x08015cbb
 8015c70:	08015c09 	.word	0x08015c09
 8015c74:	08015cf5 	.word	0x08015cf5
 8015c78:	08015c09 	.word	0x08015c09
 8015c7c:	08015c09 	.word	0x08015c09
 8015c80:	08015c09 	.word	0x08015c09
 8015c84:	08015c09 	.word	0x08015c09
 8015c88:	08015d63 	.word	0x08015d63
 8015c8c:	08015cfd 	.word	0x08015cfd
 8015c90:	08015cdb 	.word	0x08015cdb
 8015c94:	08015c09 	.word	0x08015c09
 8015c98:	08015c09 	.word	0x08015c09
 8015c9c:	08015d5f 	.word	0x08015d5f
 8015ca0:	08015c09 	.word	0x08015c09
 8015ca4:	08015d39 	.word	0x08015d39
 8015ca8:	08015c09 	.word	0x08015c09
 8015cac:	08015c09 	.word	0x08015c09
 8015cb0:	08015ce3 	.word	0x08015ce3
 8015cb4:	3b45      	subs	r3, #69	@ 0x45
 8015cb6:	2b02      	cmp	r3, #2
 8015cb8:	d8a6      	bhi.n	8015c08 <__ssvfiscanf_r+0xec>
 8015cba:	2305      	movs	r3, #5
 8015cbc:	e021      	b.n	8015d02 <__ssvfiscanf_r+0x1e6>
 8015cbe:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015cc0:	4621      	mov	r1, r4
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	4798      	blx	r3
 8015cc6:	2800      	cmp	r0, #0
 8015cc8:	f43f af66 	beq.w	8015b98 <__ssvfiscanf_r+0x7c>
 8015ccc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	f040 808b 	bne.w	8015dea <__ssvfiscanf_r+0x2ce>
 8015cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cd8:	e08b      	b.n	8015df2 <__ssvfiscanf_r+0x2d6>
 8015cda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015cdc:	f042 0220 	orr.w	r2, r2, #32
 8015ce0:	9241      	str	r2, [sp, #260]	@ 0x104
 8015ce2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8015ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015ce8:	9241      	str	r2, [sp, #260]	@ 0x104
 8015cea:	2210      	movs	r2, #16
 8015cec:	2b6e      	cmp	r3, #110	@ 0x6e
 8015cee:	9242      	str	r2, [sp, #264]	@ 0x108
 8015cf0:	d902      	bls.n	8015cf8 <__ssvfiscanf_r+0x1dc>
 8015cf2:	e005      	b.n	8015d00 <__ssvfiscanf_r+0x1e4>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	9342      	str	r3, [sp, #264]	@ 0x108
 8015cf8:	2303      	movs	r3, #3
 8015cfa:	e002      	b.n	8015d02 <__ssvfiscanf_r+0x1e6>
 8015cfc:	2308      	movs	r3, #8
 8015cfe:	9342      	str	r3, [sp, #264]	@ 0x108
 8015d00:	2304      	movs	r3, #4
 8015d02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8015d04:	6863      	ldr	r3, [r4, #4]
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	dd39      	ble.n	8015d7e <__ssvfiscanf_r+0x262>
 8015d0a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015d0c:	0659      	lsls	r1, r3, #25
 8015d0e:	d404      	bmi.n	8015d1a <__ssvfiscanf_r+0x1fe>
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	781a      	ldrb	r2, [r3, #0]
 8015d14:	5cba      	ldrb	r2, [r7, r2]
 8015d16:	0712      	lsls	r2, r2, #28
 8015d18:	d438      	bmi.n	8015d8c <__ssvfiscanf_r+0x270>
 8015d1a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8015d1c:	2b02      	cmp	r3, #2
 8015d1e:	dc47      	bgt.n	8015db0 <__ssvfiscanf_r+0x294>
 8015d20:	466b      	mov	r3, sp
 8015d22:	4622      	mov	r2, r4
 8015d24:	a941      	add	r1, sp, #260	@ 0x104
 8015d26:	4630      	mov	r0, r6
 8015d28:	f000 f86c 	bl	8015e04 <_scanf_chars>
 8015d2c:	2801      	cmp	r0, #1
 8015d2e:	d064      	beq.n	8015dfa <__ssvfiscanf_r+0x2de>
 8015d30:	2802      	cmp	r0, #2
 8015d32:	f47f af18 	bne.w	8015b66 <__ssvfiscanf_r+0x4a>
 8015d36:	e7c9      	b.n	8015ccc <__ssvfiscanf_r+0x1b0>
 8015d38:	220a      	movs	r2, #10
 8015d3a:	e7d7      	b.n	8015cec <__ssvfiscanf_r+0x1d0>
 8015d3c:	4629      	mov	r1, r5
 8015d3e:	4640      	mov	r0, r8
 8015d40:	f000 fa5a 	bl	80161f8 <__sccl>
 8015d44:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d4a:	9341      	str	r3, [sp, #260]	@ 0x104
 8015d4c:	4605      	mov	r5, r0
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e7d7      	b.n	8015d02 <__ssvfiscanf_r+0x1e6>
 8015d52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8015d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d58:	9341      	str	r3, [sp, #260]	@ 0x104
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	e7d1      	b.n	8015d02 <__ssvfiscanf_r+0x1e6>
 8015d5e:	2302      	movs	r3, #2
 8015d60:	e7cf      	b.n	8015d02 <__ssvfiscanf_r+0x1e6>
 8015d62:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8015d64:	06c3      	lsls	r3, r0, #27
 8015d66:	f53f aefe 	bmi.w	8015b66 <__ssvfiscanf_r+0x4a>
 8015d6a:	9b00      	ldr	r3, [sp, #0]
 8015d6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015d6e:	1d19      	adds	r1, r3, #4
 8015d70:	9100      	str	r1, [sp, #0]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	07c0      	lsls	r0, r0, #31
 8015d76:	bf4c      	ite	mi
 8015d78:	801a      	strhmi	r2, [r3, #0]
 8015d7a:	601a      	strpl	r2, [r3, #0]
 8015d7c:	e6f3      	b.n	8015b66 <__ssvfiscanf_r+0x4a>
 8015d7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015d80:	4621      	mov	r1, r4
 8015d82:	4630      	mov	r0, r6
 8015d84:	4798      	blx	r3
 8015d86:	2800      	cmp	r0, #0
 8015d88:	d0bf      	beq.n	8015d0a <__ssvfiscanf_r+0x1ee>
 8015d8a:	e79f      	b.n	8015ccc <__ssvfiscanf_r+0x1b0>
 8015d8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8015d8e:	3201      	adds	r2, #1
 8015d90:	9245      	str	r2, [sp, #276]	@ 0x114
 8015d92:	6862      	ldr	r2, [r4, #4]
 8015d94:	3a01      	subs	r2, #1
 8015d96:	2a00      	cmp	r2, #0
 8015d98:	6062      	str	r2, [r4, #4]
 8015d9a:	dd02      	ble.n	8015da2 <__ssvfiscanf_r+0x286>
 8015d9c:	3301      	adds	r3, #1
 8015d9e:	6023      	str	r3, [r4, #0]
 8015da0:	e7b6      	b.n	8015d10 <__ssvfiscanf_r+0x1f4>
 8015da2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8015da4:	4621      	mov	r1, r4
 8015da6:	4630      	mov	r0, r6
 8015da8:	4798      	blx	r3
 8015daa:	2800      	cmp	r0, #0
 8015dac:	d0b0      	beq.n	8015d10 <__ssvfiscanf_r+0x1f4>
 8015dae:	e78d      	b.n	8015ccc <__ssvfiscanf_r+0x1b0>
 8015db0:	2b04      	cmp	r3, #4
 8015db2:	dc0f      	bgt.n	8015dd4 <__ssvfiscanf_r+0x2b8>
 8015db4:	466b      	mov	r3, sp
 8015db6:	4622      	mov	r2, r4
 8015db8:	a941      	add	r1, sp, #260	@ 0x104
 8015dba:	4630      	mov	r0, r6
 8015dbc:	f000 f87c 	bl	8015eb8 <_scanf_i>
 8015dc0:	e7b4      	b.n	8015d2c <__ssvfiscanf_r+0x210>
 8015dc2:	bf00      	nop
 8015dc4:	08015a6d 	.word	0x08015a6d
 8015dc8:	08015ae3 	.word	0x08015ae3
 8015dcc:	08017ab9 	.word	0x08017ab9
 8015dd0:	08017bbf 	.word	0x08017bbf
 8015dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8015e00 <__ssvfiscanf_r+0x2e4>)
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	f43f aec5 	beq.w	8015b66 <__ssvfiscanf_r+0x4a>
 8015ddc:	466b      	mov	r3, sp
 8015dde:	4622      	mov	r2, r4
 8015de0:	a941      	add	r1, sp, #260	@ 0x104
 8015de2:	4630      	mov	r0, r6
 8015de4:	f7fd f896 	bl	8012f14 <_scanf_float>
 8015de8:	e7a0      	b.n	8015d2c <__ssvfiscanf_r+0x210>
 8015dea:	89a3      	ldrh	r3, [r4, #12]
 8015dec:	065b      	lsls	r3, r3, #25
 8015dee:	f53f af71 	bmi.w	8015cd4 <__ssvfiscanf_r+0x1b8>
 8015df2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8015df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dfa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8015dfc:	e7f9      	b.n	8015df2 <__ssvfiscanf_r+0x2d6>
 8015dfe:	bf00      	nop
 8015e00:	08012f15 	.word	0x08012f15

08015e04 <_scanf_chars>:
 8015e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e08:	4615      	mov	r5, r2
 8015e0a:	688a      	ldr	r2, [r1, #8]
 8015e0c:	4680      	mov	r8, r0
 8015e0e:	460c      	mov	r4, r1
 8015e10:	b932      	cbnz	r2, 8015e20 <_scanf_chars+0x1c>
 8015e12:	698a      	ldr	r2, [r1, #24]
 8015e14:	2a00      	cmp	r2, #0
 8015e16:	bf14      	ite	ne
 8015e18:	f04f 32ff 	movne.w	r2, #4294967295
 8015e1c:	2201      	moveq	r2, #1
 8015e1e:	608a      	str	r2, [r1, #8]
 8015e20:	6822      	ldr	r2, [r4, #0]
 8015e22:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8015eb4 <_scanf_chars+0xb0>
 8015e26:	06d1      	lsls	r1, r2, #27
 8015e28:	bf5f      	itttt	pl
 8015e2a:	681a      	ldrpl	r2, [r3, #0]
 8015e2c:	1d11      	addpl	r1, r2, #4
 8015e2e:	6019      	strpl	r1, [r3, #0]
 8015e30:	6816      	ldrpl	r6, [r2, #0]
 8015e32:	2700      	movs	r7, #0
 8015e34:	69a0      	ldr	r0, [r4, #24]
 8015e36:	b188      	cbz	r0, 8015e5c <_scanf_chars+0x58>
 8015e38:	2801      	cmp	r0, #1
 8015e3a:	d107      	bne.n	8015e4c <_scanf_chars+0x48>
 8015e3c:	682b      	ldr	r3, [r5, #0]
 8015e3e:	781a      	ldrb	r2, [r3, #0]
 8015e40:	6963      	ldr	r3, [r4, #20]
 8015e42:	5c9b      	ldrb	r3, [r3, r2]
 8015e44:	b953      	cbnz	r3, 8015e5c <_scanf_chars+0x58>
 8015e46:	2f00      	cmp	r7, #0
 8015e48:	d031      	beq.n	8015eae <_scanf_chars+0xaa>
 8015e4a:	e022      	b.n	8015e92 <_scanf_chars+0x8e>
 8015e4c:	2802      	cmp	r0, #2
 8015e4e:	d120      	bne.n	8015e92 <_scanf_chars+0x8e>
 8015e50:	682b      	ldr	r3, [r5, #0]
 8015e52:	781b      	ldrb	r3, [r3, #0]
 8015e54:	f819 3003 	ldrb.w	r3, [r9, r3]
 8015e58:	071b      	lsls	r3, r3, #28
 8015e5a:	d41a      	bmi.n	8015e92 <_scanf_chars+0x8e>
 8015e5c:	6823      	ldr	r3, [r4, #0]
 8015e5e:	06da      	lsls	r2, r3, #27
 8015e60:	bf5e      	ittt	pl
 8015e62:	682b      	ldrpl	r3, [r5, #0]
 8015e64:	781b      	ldrbpl	r3, [r3, #0]
 8015e66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8015e6a:	682a      	ldr	r2, [r5, #0]
 8015e6c:	686b      	ldr	r3, [r5, #4]
 8015e6e:	3201      	adds	r2, #1
 8015e70:	602a      	str	r2, [r5, #0]
 8015e72:	68a2      	ldr	r2, [r4, #8]
 8015e74:	3b01      	subs	r3, #1
 8015e76:	3a01      	subs	r2, #1
 8015e78:	606b      	str	r3, [r5, #4]
 8015e7a:	3701      	adds	r7, #1
 8015e7c:	60a2      	str	r2, [r4, #8]
 8015e7e:	b142      	cbz	r2, 8015e92 <_scanf_chars+0x8e>
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	dcd7      	bgt.n	8015e34 <_scanf_chars+0x30>
 8015e84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8015e88:	4629      	mov	r1, r5
 8015e8a:	4640      	mov	r0, r8
 8015e8c:	4798      	blx	r3
 8015e8e:	2800      	cmp	r0, #0
 8015e90:	d0d0      	beq.n	8015e34 <_scanf_chars+0x30>
 8015e92:	6823      	ldr	r3, [r4, #0]
 8015e94:	f013 0310 	ands.w	r3, r3, #16
 8015e98:	d105      	bne.n	8015ea6 <_scanf_chars+0xa2>
 8015e9a:	68e2      	ldr	r2, [r4, #12]
 8015e9c:	3201      	adds	r2, #1
 8015e9e:	60e2      	str	r2, [r4, #12]
 8015ea0:	69a2      	ldr	r2, [r4, #24]
 8015ea2:	b102      	cbz	r2, 8015ea6 <_scanf_chars+0xa2>
 8015ea4:	7033      	strb	r3, [r6, #0]
 8015ea6:	6923      	ldr	r3, [r4, #16]
 8015ea8:	443b      	add	r3, r7
 8015eaa:	6123      	str	r3, [r4, #16]
 8015eac:	2000      	movs	r0, #0
 8015eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015eb2:	bf00      	nop
 8015eb4:	08017ab9 	.word	0x08017ab9

08015eb8 <_scanf_i>:
 8015eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ebc:	4698      	mov	r8, r3
 8015ebe:	4b74      	ldr	r3, [pc, #464]	@ (8016090 <_scanf_i+0x1d8>)
 8015ec0:	460c      	mov	r4, r1
 8015ec2:	4682      	mov	sl, r0
 8015ec4:	4616      	mov	r6, r2
 8015ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015eca:	b087      	sub	sp, #28
 8015ecc:	ab03      	add	r3, sp, #12
 8015ece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015ed2:	4b70      	ldr	r3, [pc, #448]	@ (8016094 <_scanf_i+0x1dc>)
 8015ed4:	69a1      	ldr	r1, [r4, #24]
 8015ed6:	4a70      	ldr	r2, [pc, #448]	@ (8016098 <_scanf_i+0x1e0>)
 8015ed8:	2903      	cmp	r1, #3
 8015eda:	bf08      	it	eq
 8015edc:	461a      	moveq	r2, r3
 8015ede:	68a3      	ldr	r3, [r4, #8]
 8015ee0:	9201      	str	r2, [sp, #4]
 8015ee2:	1e5a      	subs	r2, r3, #1
 8015ee4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8015ee8:	bf88      	it	hi
 8015eea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8015eee:	4627      	mov	r7, r4
 8015ef0:	bf82      	ittt	hi
 8015ef2:	eb03 0905 	addhi.w	r9, r3, r5
 8015ef6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8015efa:	60a3      	strhi	r3, [r4, #8]
 8015efc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8015f00:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8015f04:	bf98      	it	ls
 8015f06:	f04f 0900 	movls.w	r9, #0
 8015f0a:	6023      	str	r3, [r4, #0]
 8015f0c:	463d      	mov	r5, r7
 8015f0e:	f04f 0b00 	mov.w	fp, #0
 8015f12:	6831      	ldr	r1, [r6, #0]
 8015f14:	ab03      	add	r3, sp, #12
 8015f16:	7809      	ldrb	r1, [r1, #0]
 8015f18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8015f1c:	2202      	movs	r2, #2
 8015f1e:	f7ea f967 	bl	80001f0 <memchr>
 8015f22:	b328      	cbz	r0, 8015f70 <_scanf_i+0xb8>
 8015f24:	f1bb 0f01 	cmp.w	fp, #1
 8015f28:	d159      	bne.n	8015fde <_scanf_i+0x126>
 8015f2a:	6862      	ldr	r2, [r4, #4]
 8015f2c:	b92a      	cbnz	r2, 8015f3a <_scanf_i+0x82>
 8015f2e:	6822      	ldr	r2, [r4, #0]
 8015f30:	2108      	movs	r1, #8
 8015f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8015f36:	6061      	str	r1, [r4, #4]
 8015f38:	6022      	str	r2, [r4, #0]
 8015f3a:	6822      	ldr	r2, [r4, #0]
 8015f3c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8015f40:	6022      	str	r2, [r4, #0]
 8015f42:	68a2      	ldr	r2, [r4, #8]
 8015f44:	1e51      	subs	r1, r2, #1
 8015f46:	60a1      	str	r1, [r4, #8]
 8015f48:	b192      	cbz	r2, 8015f70 <_scanf_i+0xb8>
 8015f4a:	6832      	ldr	r2, [r6, #0]
 8015f4c:	1c51      	adds	r1, r2, #1
 8015f4e:	6031      	str	r1, [r6, #0]
 8015f50:	7812      	ldrb	r2, [r2, #0]
 8015f52:	f805 2b01 	strb.w	r2, [r5], #1
 8015f56:	6872      	ldr	r2, [r6, #4]
 8015f58:	3a01      	subs	r2, #1
 8015f5a:	2a00      	cmp	r2, #0
 8015f5c:	6072      	str	r2, [r6, #4]
 8015f5e:	dc07      	bgt.n	8015f70 <_scanf_i+0xb8>
 8015f60:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8015f64:	4631      	mov	r1, r6
 8015f66:	4650      	mov	r0, sl
 8015f68:	4790      	blx	r2
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	f040 8085 	bne.w	801607a <_scanf_i+0x1c2>
 8015f70:	f10b 0b01 	add.w	fp, fp, #1
 8015f74:	f1bb 0f03 	cmp.w	fp, #3
 8015f78:	d1cb      	bne.n	8015f12 <_scanf_i+0x5a>
 8015f7a:	6863      	ldr	r3, [r4, #4]
 8015f7c:	b90b      	cbnz	r3, 8015f82 <_scanf_i+0xca>
 8015f7e:	230a      	movs	r3, #10
 8015f80:	6063      	str	r3, [r4, #4]
 8015f82:	6863      	ldr	r3, [r4, #4]
 8015f84:	4945      	ldr	r1, [pc, #276]	@ (801609c <_scanf_i+0x1e4>)
 8015f86:	6960      	ldr	r0, [r4, #20]
 8015f88:	1ac9      	subs	r1, r1, r3
 8015f8a:	f000 f935 	bl	80161f8 <__sccl>
 8015f8e:	f04f 0b00 	mov.w	fp, #0
 8015f92:	68a3      	ldr	r3, [r4, #8]
 8015f94:	6822      	ldr	r2, [r4, #0]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d03d      	beq.n	8016016 <_scanf_i+0x15e>
 8015f9a:	6831      	ldr	r1, [r6, #0]
 8015f9c:	6960      	ldr	r0, [r4, #20]
 8015f9e:	f891 c000 	ldrb.w	ip, [r1]
 8015fa2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8015fa6:	2800      	cmp	r0, #0
 8015fa8:	d035      	beq.n	8016016 <_scanf_i+0x15e>
 8015faa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8015fae:	d124      	bne.n	8015ffa <_scanf_i+0x142>
 8015fb0:	0510      	lsls	r0, r2, #20
 8015fb2:	d522      	bpl.n	8015ffa <_scanf_i+0x142>
 8015fb4:	f10b 0b01 	add.w	fp, fp, #1
 8015fb8:	f1b9 0f00 	cmp.w	r9, #0
 8015fbc:	d003      	beq.n	8015fc6 <_scanf_i+0x10e>
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8015fc4:	60a3      	str	r3, [r4, #8]
 8015fc6:	6873      	ldr	r3, [r6, #4]
 8015fc8:	3b01      	subs	r3, #1
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	6073      	str	r3, [r6, #4]
 8015fce:	dd1b      	ble.n	8016008 <_scanf_i+0x150>
 8015fd0:	6833      	ldr	r3, [r6, #0]
 8015fd2:	3301      	adds	r3, #1
 8015fd4:	6033      	str	r3, [r6, #0]
 8015fd6:	68a3      	ldr	r3, [r4, #8]
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	60a3      	str	r3, [r4, #8]
 8015fdc:	e7d9      	b.n	8015f92 <_scanf_i+0xda>
 8015fde:	f1bb 0f02 	cmp.w	fp, #2
 8015fe2:	d1ae      	bne.n	8015f42 <_scanf_i+0x8a>
 8015fe4:	6822      	ldr	r2, [r4, #0]
 8015fe6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8015fea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8015fee:	d1bf      	bne.n	8015f70 <_scanf_i+0xb8>
 8015ff0:	2110      	movs	r1, #16
 8015ff2:	6061      	str	r1, [r4, #4]
 8015ff4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8015ff8:	e7a2      	b.n	8015f40 <_scanf_i+0x88>
 8015ffa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8015ffe:	6022      	str	r2, [r4, #0]
 8016000:	780b      	ldrb	r3, [r1, #0]
 8016002:	f805 3b01 	strb.w	r3, [r5], #1
 8016006:	e7de      	b.n	8015fc6 <_scanf_i+0x10e>
 8016008:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801600c:	4631      	mov	r1, r6
 801600e:	4650      	mov	r0, sl
 8016010:	4798      	blx	r3
 8016012:	2800      	cmp	r0, #0
 8016014:	d0df      	beq.n	8015fd6 <_scanf_i+0x11e>
 8016016:	6823      	ldr	r3, [r4, #0]
 8016018:	05d9      	lsls	r1, r3, #23
 801601a:	d50d      	bpl.n	8016038 <_scanf_i+0x180>
 801601c:	42bd      	cmp	r5, r7
 801601e:	d909      	bls.n	8016034 <_scanf_i+0x17c>
 8016020:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016024:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016028:	4632      	mov	r2, r6
 801602a:	4650      	mov	r0, sl
 801602c:	4798      	blx	r3
 801602e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016032:	464d      	mov	r5, r9
 8016034:	42bd      	cmp	r5, r7
 8016036:	d028      	beq.n	801608a <_scanf_i+0x1d2>
 8016038:	6822      	ldr	r2, [r4, #0]
 801603a:	f012 0210 	ands.w	r2, r2, #16
 801603e:	d113      	bne.n	8016068 <_scanf_i+0x1b0>
 8016040:	702a      	strb	r2, [r5, #0]
 8016042:	6863      	ldr	r3, [r4, #4]
 8016044:	9e01      	ldr	r6, [sp, #4]
 8016046:	4639      	mov	r1, r7
 8016048:	4650      	mov	r0, sl
 801604a:	47b0      	blx	r6
 801604c:	f8d8 3000 	ldr.w	r3, [r8]
 8016050:	6821      	ldr	r1, [r4, #0]
 8016052:	1d1a      	adds	r2, r3, #4
 8016054:	f8c8 2000 	str.w	r2, [r8]
 8016058:	f011 0f20 	tst.w	r1, #32
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	d00f      	beq.n	8016080 <_scanf_i+0x1c8>
 8016060:	6018      	str	r0, [r3, #0]
 8016062:	68e3      	ldr	r3, [r4, #12]
 8016064:	3301      	adds	r3, #1
 8016066:	60e3      	str	r3, [r4, #12]
 8016068:	6923      	ldr	r3, [r4, #16]
 801606a:	1bed      	subs	r5, r5, r7
 801606c:	445d      	add	r5, fp
 801606e:	442b      	add	r3, r5
 8016070:	6123      	str	r3, [r4, #16]
 8016072:	2000      	movs	r0, #0
 8016074:	b007      	add	sp, #28
 8016076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801607a:	f04f 0b00 	mov.w	fp, #0
 801607e:	e7ca      	b.n	8016016 <_scanf_i+0x15e>
 8016080:	07ca      	lsls	r2, r1, #31
 8016082:	bf4c      	ite	mi
 8016084:	8018      	strhmi	r0, [r3, #0]
 8016086:	6018      	strpl	r0, [r3, #0]
 8016088:	e7eb      	b.n	8016062 <_scanf_i+0x1aa>
 801608a:	2001      	movs	r0, #1
 801608c:	e7f2      	b.n	8016074 <_scanf_i+0x1bc>
 801608e:	bf00      	nop
 8016090:	0801734c 	.word	0x0801734c
 8016094:	080157a1 	.word	0x080157a1
 8016098:	080164d1 	.word	0x080164d1
 801609c:	08017bda 	.word	0x08017bda

080160a0 <__sflush_r>:
 80160a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80160a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160a8:	0716      	lsls	r6, r2, #28
 80160aa:	4605      	mov	r5, r0
 80160ac:	460c      	mov	r4, r1
 80160ae:	d454      	bmi.n	801615a <__sflush_r+0xba>
 80160b0:	684b      	ldr	r3, [r1, #4]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	dc02      	bgt.n	80160bc <__sflush_r+0x1c>
 80160b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	dd48      	ble.n	801614e <__sflush_r+0xae>
 80160bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80160be:	2e00      	cmp	r6, #0
 80160c0:	d045      	beq.n	801614e <__sflush_r+0xae>
 80160c2:	2300      	movs	r3, #0
 80160c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80160c8:	682f      	ldr	r7, [r5, #0]
 80160ca:	6a21      	ldr	r1, [r4, #32]
 80160cc:	602b      	str	r3, [r5, #0]
 80160ce:	d030      	beq.n	8016132 <__sflush_r+0x92>
 80160d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80160d2:	89a3      	ldrh	r3, [r4, #12]
 80160d4:	0759      	lsls	r1, r3, #29
 80160d6:	d505      	bpl.n	80160e4 <__sflush_r+0x44>
 80160d8:	6863      	ldr	r3, [r4, #4]
 80160da:	1ad2      	subs	r2, r2, r3
 80160dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80160de:	b10b      	cbz	r3, 80160e4 <__sflush_r+0x44>
 80160e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80160e2:	1ad2      	subs	r2, r2, r3
 80160e4:	2300      	movs	r3, #0
 80160e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80160e8:	6a21      	ldr	r1, [r4, #32]
 80160ea:	4628      	mov	r0, r5
 80160ec:	47b0      	blx	r6
 80160ee:	1c43      	adds	r3, r0, #1
 80160f0:	89a3      	ldrh	r3, [r4, #12]
 80160f2:	d106      	bne.n	8016102 <__sflush_r+0x62>
 80160f4:	6829      	ldr	r1, [r5, #0]
 80160f6:	291d      	cmp	r1, #29
 80160f8:	d82b      	bhi.n	8016152 <__sflush_r+0xb2>
 80160fa:	4a2a      	ldr	r2, [pc, #168]	@ (80161a4 <__sflush_r+0x104>)
 80160fc:	410a      	asrs	r2, r1
 80160fe:	07d6      	lsls	r6, r2, #31
 8016100:	d427      	bmi.n	8016152 <__sflush_r+0xb2>
 8016102:	2200      	movs	r2, #0
 8016104:	6062      	str	r2, [r4, #4]
 8016106:	04d9      	lsls	r1, r3, #19
 8016108:	6922      	ldr	r2, [r4, #16]
 801610a:	6022      	str	r2, [r4, #0]
 801610c:	d504      	bpl.n	8016118 <__sflush_r+0x78>
 801610e:	1c42      	adds	r2, r0, #1
 8016110:	d101      	bne.n	8016116 <__sflush_r+0x76>
 8016112:	682b      	ldr	r3, [r5, #0]
 8016114:	b903      	cbnz	r3, 8016118 <__sflush_r+0x78>
 8016116:	6560      	str	r0, [r4, #84]	@ 0x54
 8016118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801611a:	602f      	str	r7, [r5, #0]
 801611c:	b1b9      	cbz	r1, 801614e <__sflush_r+0xae>
 801611e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016122:	4299      	cmp	r1, r3
 8016124:	d002      	beq.n	801612c <__sflush_r+0x8c>
 8016126:	4628      	mov	r0, r5
 8016128:	f7fe f9c2 	bl	80144b0 <_free_r>
 801612c:	2300      	movs	r3, #0
 801612e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016130:	e00d      	b.n	801614e <__sflush_r+0xae>
 8016132:	2301      	movs	r3, #1
 8016134:	4628      	mov	r0, r5
 8016136:	47b0      	blx	r6
 8016138:	4602      	mov	r2, r0
 801613a:	1c50      	adds	r0, r2, #1
 801613c:	d1c9      	bne.n	80160d2 <__sflush_r+0x32>
 801613e:	682b      	ldr	r3, [r5, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d0c6      	beq.n	80160d2 <__sflush_r+0x32>
 8016144:	2b1d      	cmp	r3, #29
 8016146:	d001      	beq.n	801614c <__sflush_r+0xac>
 8016148:	2b16      	cmp	r3, #22
 801614a:	d11e      	bne.n	801618a <__sflush_r+0xea>
 801614c:	602f      	str	r7, [r5, #0]
 801614e:	2000      	movs	r0, #0
 8016150:	e022      	b.n	8016198 <__sflush_r+0xf8>
 8016152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016156:	b21b      	sxth	r3, r3
 8016158:	e01b      	b.n	8016192 <__sflush_r+0xf2>
 801615a:	690f      	ldr	r7, [r1, #16]
 801615c:	2f00      	cmp	r7, #0
 801615e:	d0f6      	beq.n	801614e <__sflush_r+0xae>
 8016160:	0793      	lsls	r3, r2, #30
 8016162:	680e      	ldr	r6, [r1, #0]
 8016164:	bf08      	it	eq
 8016166:	694b      	ldreq	r3, [r1, #20]
 8016168:	600f      	str	r7, [r1, #0]
 801616a:	bf18      	it	ne
 801616c:	2300      	movne	r3, #0
 801616e:	eba6 0807 	sub.w	r8, r6, r7
 8016172:	608b      	str	r3, [r1, #8]
 8016174:	f1b8 0f00 	cmp.w	r8, #0
 8016178:	dde9      	ble.n	801614e <__sflush_r+0xae>
 801617a:	6a21      	ldr	r1, [r4, #32]
 801617c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801617e:	4643      	mov	r3, r8
 8016180:	463a      	mov	r2, r7
 8016182:	4628      	mov	r0, r5
 8016184:	47b0      	blx	r6
 8016186:	2800      	cmp	r0, #0
 8016188:	dc08      	bgt.n	801619c <__sflush_r+0xfc>
 801618a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801618e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016192:	81a3      	strh	r3, [r4, #12]
 8016194:	f04f 30ff 	mov.w	r0, #4294967295
 8016198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801619c:	4407      	add	r7, r0
 801619e:	eba8 0800 	sub.w	r8, r8, r0
 80161a2:	e7e7      	b.n	8016174 <__sflush_r+0xd4>
 80161a4:	dfbffffe 	.word	0xdfbffffe

080161a8 <_fflush_r>:
 80161a8:	b538      	push	{r3, r4, r5, lr}
 80161aa:	690b      	ldr	r3, [r1, #16]
 80161ac:	4605      	mov	r5, r0
 80161ae:	460c      	mov	r4, r1
 80161b0:	b913      	cbnz	r3, 80161b8 <_fflush_r+0x10>
 80161b2:	2500      	movs	r5, #0
 80161b4:	4628      	mov	r0, r5
 80161b6:	bd38      	pop	{r3, r4, r5, pc}
 80161b8:	b118      	cbz	r0, 80161c2 <_fflush_r+0x1a>
 80161ba:	6a03      	ldr	r3, [r0, #32]
 80161bc:	b90b      	cbnz	r3, 80161c2 <_fflush_r+0x1a>
 80161be:	f7fd f949 	bl	8013454 <__sinit>
 80161c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d0f3      	beq.n	80161b2 <_fflush_r+0xa>
 80161ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80161cc:	07d0      	lsls	r0, r2, #31
 80161ce:	d404      	bmi.n	80161da <_fflush_r+0x32>
 80161d0:	0599      	lsls	r1, r3, #22
 80161d2:	d402      	bmi.n	80161da <_fflush_r+0x32>
 80161d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80161d6:	f7fd faf4 	bl	80137c2 <__retarget_lock_acquire_recursive>
 80161da:	4628      	mov	r0, r5
 80161dc:	4621      	mov	r1, r4
 80161de:	f7ff ff5f 	bl	80160a0 <__sflush_r>
 80161e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80161e4:	07da      	lsls	r2, r3, #31
 80161e6:	4605      	mov	r5, r0
 80161e8:	d4e4      	bmi.n	80161b4 <_fflush_r+0xc>
 80161ea:	89a3      	ldrh	r3, [r4, #12]
 80161ec:	059b      	lsls	r3, r3, #22
 80161ee:	d4e1      	bmi.n	80161b4 <_fflush_r+0xc>
 80161f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80161f2:	f7fd fae7 	bl	80137c4 <__retarget_lock_release_recursive>
 80161f6:	e7dd      	b.n	80161b4 <_fflush_r+0xc>

080161f8 <__sccl>:
 80161f8:	b570      	push	{r4, r5, r6, lr}
 80161fa:	780b      	ldrb	r3, [r1, #0]
 80161fc:	4604      	mov	r4, r0
 80161fe:	2b5e      	cmp	r3, #94	@ 0x5e
 8016200:	bf0b      	itete	eq
 8016202:	784b      	ldrbeq	r3, [r1, #1]
 8016204:	1c4a      	addne	r2, r1, #1
 8016206:	1c8a      	addeq	r2, r1, #2
 8016208:	2100      	movne	r1, #0
 801620a:	bf08      	it	eq
 801620c:	2101      	moveq	r1, #1
 801620e:	3801      	subs	r0, #1
 8016210:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016214:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016218:	42a8      	cmp	r0, r5
 801621a:	d1fb      	bne.n	8016214 <__sccl+0x1c>
 801621c:	b90b      	cbnz	r3, 8016222 <__sccl+0x2a>
 801621e:	1e50      	subs	r0, r2, #1
 8016220:	bd70      	pop	{r4, r5, r6, pc}
 8016222:	f081 0101 	eor.w	r1, r1, #1
 8016226:	54e1      	strb	r1, [r4, r3]
 8016228:	4610      	mov	r0, r2
 801622a:	4602      	mov	r2, r0
 801622c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016230:	2d2d      	cmp	r5, #45	@ 0x2d
 8016232:	d005      	beq.n	8016240 <__sccl+0x48>
 8016234:	2d5d      	cmp	r5, #93	@ 0x5d
 8016236:	d016      	beq.n	8016266 <__sccl+0x6e>
 8016238:	2d00      	cmp	r5, #0
 801623a:	d0f1      	beq.n	8016220 <__sccl+0x28>
 801623c:	462b      	mov	r3, r5
 801623e:	e7f2      	b.n	8016226 <__sccl+0x2e>
 8016240:	7846      	ldrb	r6, [r0, #1]
 8016242:	2e5d      	cmp	r6, #93	@ 0x5d
 8016244:	d0fa      	beq.n	801623c <__sccl+0x44>
 8016246:	42b3      	cmp	r3, r6
 8016248:	dcf8      	bgt.n	801623c <__sccl+0x44>
 801624a:	3002      	adds	r0, #2
 801624c:	461a      	mov	r2, r3
 801624e:	3201      	adds	r2, #1
 8016250:	4296      	cmp	r6, r2
 8016252:	54a1      	strb	r1, [r4, r2]
 8016254:	dcfb      	bgt.n	801624e <__sccl+0x56>
 8016256:	1af2      	subs	r2, r6, r3
 8016258:	3a01      	subs	r2, #1
 801625a:	1c5d      	adds	r5, r3, #1
 801625c:	42b3      	cmp	r3, r6
 801625e:	bfa8      	it	ge
 8016260:	2200      	movge	r2, #0
 8016262:	18ab      	adds	r3, r5, r2
 8016264:	e7e1      	b.n	801622a <__sccl+0x32>
 8016266:	4610      	mov	r0, r2
 8016268:	e7da      	b.n	8016220 <__sccl+0x28>

0801626a <__submore>:
 801626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801626e:	460c      	mov	r4, r1
 8016270:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016276:	4299      	cmp	r1, r3
 8016278:	d11d      	bne.n	80162b6 <__submore+0x4c>
 801627a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801627e:	f7fe fcc5 	bl	8014c0c <_malloc_r>
 8016282:	b918      	cbnz	r0, 801628c <__submore+0x22>
 8016284:	f04f 30ff 	mov.w	r0, #4294967295
 8016288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801628c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016290:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016292:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016296:	6360      	str	r0, [r4, #52]	@ 0x34
 8016298:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801629c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80162a0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80162a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80162a8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80162ac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80162b0:	6020      	str	r0, [r4, #0]
 80162b2:	2000      	movs	r0, #0
 80162b4:	e7e8      	b.n	8016288 <__submore+0x1e>
 80162b6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80162b8:	0077      	lsls	r7, r6, #1
 80162ba:	463a      	mov	r2, r7
 80162bc:	f000 f86c 	bl	8016398 <_realloc_r>
 80162c0:	4605      	mov	r5, r0
 80162c2:	2800      	cmp	r0, #0
 80162c4:	d0de      	beq.n	8016284 <__submore+0x1a>
 80162c6:	eb00 0806 	add.w	r8, r0, r6
 80162ca:	4601      	mov	r1, r0
 80162cc:	4632      	mov	r2, r6
 80162ce:	4640      	mov	r0, r8
 80162d0:	f7fd fa81 	bl	80137d6 <memcpy>
 80162d4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80162d8:	f8c4 8000 	str.w	r8, [r4]
 80162dc:	e7e9      	b.n	80162b2 <__submore+0x48>

080162de <memmove>:
 80162de:	4288      	cmp	r0, r1
 80162e0:	b510      	push	{r4, lr}
 80162e2:	eb01 0402 	add.w	r4, r1, r2
 80162e6:	d902      	bls.n	80162ee <memmove+0x10>
 80162e8:	4284      	cmp	r4, r0
 80162ea:	4623      	mov	r3, r4
 80162ec:	d807      	bhi.n	80162fe <memmove+0x20>
 80162ee:	1e43      	subs	r3, r0, #1
 80162f0:	42a1      	cmp	r1, r4
 80162f2:	d008      	beq.n	8016306 <memmove+0x28>
 80162f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80162fc:	e7f8      	b.n	80162f0 <memmove+0x12>
 80162fe:	4402      	add	r2, r0
 8016300:	4601      	mov	r1, r0
 8016302:	428a      	cmp	r2, r1
 8016304:	d100      	bne.n	8016308 <memmove+0x2a>
 8016306:	bd10      	pop	{r4, pc}
 8016308:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801630c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016310:	e7f7      	b.n	8016302 <memmove+0x24>
	...

08016314 <_sbrk_r>:
 8016314:	b538      	push	{r3, r4, r5, lr}
 8016316:	4d06      	ldr	r5, [pc, #24]	@ (8016330 <_sbrk_r+0x1c>)
 8016318:	2300      	movs	r3, #0
 801631a:	4604      	mov	r4, r0
 801631c:	4608      	mov	r0, r1
 801631e:	602b      	str	r3, [r5, #0]
 8016320:	f7f1 fa6e 	bl	8007800 <_sbrk>
 8016324:	1c43      	adds	r3, r0, #1
 8016326:	d102      	bne.n	801632e <_sbrk_r+0x1a>
 8016328:	682b      	ldr	r3, [r5, #0]
 801632a:	b103      	cbz	r3, 801632e <_sbrk_r+0x1a>
 801632c:	6023      	str	r3, [r4, #0]
 801632e:	bd38      	pop	{r3, r4, r5, pc}
 8016330:	20003514 	.word	0x20003514

08016334 <__assert_func>:
 8016334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016336:	4614      	mov	r4, r2
 8016338:	461a      	mov	r2, r3
 801633a:	4b09      	ldr	r3, [pc, #36]	@ (8016360 <__assert_func+0x2c>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	4605      	mov	r5, r0
 8016340:	68d8      	ldr	r0, [r3, #12]
 8016342:	b954      	cbnz	r4, 801635a <__assert_func+0x26>
 8016344:	4b07      	ldr	r3, [pc, #28]	@ (8016364 <__assert_func+0x30>)
 8016346:	461c      	mov	r4, r3
 8016348:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801634c:	9100      	str	r1, [sp, #0]
 801634e:	462b      	mov	r3, r5
 8016350:	4905      	ldr	r1, [pc, #20]	@ (8016368 <__assert_func+0x34>)
 8016352:	f000 f8bf 	bl	80164d4 <fiprintf>
 8016356:	f000 f8cf 	bl	80164f8 <abort>
 801635a:	4b04      	ldr	r3, [pc, #16]	@ (801636c <__assert_func+0x38>)
 801635c:	e7f4      	b.n	8016348 <__assert_func+0x14>
 801635e:	bf00      	nop
 8016360:	200002e0 	.word	0x200002e0
 8016364:	08017c20 	.word	0x08017c20
 8016368:	08017bf2 	.word	0x08017bf2
 801636c:	08017be5 	.word	0x08017be5

08016370 <_calloc_r>:
 8016370:	b570      	push	{r4, r5, r6, lr}
 8016372:	fba1 5402 	umull	r5, r4, r1, r2
 8016376:	b93c      	cbnz	r4, 8016388 <_calloc_r+0x18>
 8016378:	4629      	mov	r1, r5
 801637a:	f7fe fc47 	bl	8014c0c <_malloc_r>
 801637e:	4606      	mov	r6, r0
 8016380:	b928      	cbnz	r0, 801638e <_calloc_r+0x1e>
 8016382:	2600      	movs	r6, #0
 8016384:	4630      	mov	r0, r6
 8016386:	bd70      	pop	{r4, r5, r6, pc}
 8016388:	220c      	movs	r2, #12
 801638a:	6002      	str	r2, [r0, #0]
 801638c:	e7f9      	b.n	8016382 <_calloc_r+0x12>
 801638e:	462a      	mov	r2, r5
 8016390:	4621      	mov	r1, r4
 8016392:	f7fd f958 	bl	8013646 <memset>
 8016396:	e7f5      	b.n	8016384 <_calloc_r+0x14>

08016398 <_realloc_r>:
 8016398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801639c:	4680      	mov	r8, r0
 801639e:	4615      	mov	r5, r2
 80163a0:	460c      	mov	r4, r1
 80163a2:	b921      	cbnz	r1, 80163ae <_realloc_r+0x16>
 80163a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163a8:	4611      	mov	r1, r2
 80163aa:	f7fe bc2f 	b.w	8014c0c <_malloc_r>
 80163ae:	b92a      	cbnz	r2, 80163bc <_realloc_r+0x24>
 80163b0:	f7fe f87e 	bl	80144b0 <_free_r>
 80163b4:	2400      	movs	r4, #0
 80163b6:	4620      	mov	r0, r4
 80163b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163bc:	f000 f8a3 	bl	8016506 <_malloc_usable_size_r>
 80163c0:	4285      	cmp	r5, r0
 80163c2:	4606      	mov	r6, r0
 80163c4:	d802      	bhi.n	80163cc <_realloc_r+0x34>
 80163c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80163ca:	d8f4      	bhi.n	80163b6 <_realloc_r+0x1e>
 80163cc:	4629      	mov	r1, r5
 80163ce:	4640      	mov	r0, r8
 80163d0:	f7fe fc1c 	bl	8014c0c <_malloc_r>
 80163d4:	4607      	mov	r7, r0
 80163d6:	2800      	cmp	r0, #0
 80163d8:	d0ec      	beq.n	80163b4 <_realloc_r+0x1c>
 80163da:	42b5      	cmp	r5, r6
 80163dc:	462a      	mov	r2, r5
 80163de:	4621      	mov	r1, r4
 80163e0:	bf28      	it	cs
 80163e2:	4632      	movcs	r2, r6
 80163e4:	f7fd f9f7 	bl	80137d6 <memcpy>
 80163e8:	4621      	mov	r1, r4
 80163ea:	4640      	mov	r0, r8
 80163ec:	f7fe f860 	bl	80144b0 <_free_r>
 80163f0:	463c      	mov	r4, r7
 80163f2:	e7e0      	b.n	80163b6 <_realloc_r+0x1e>

080163f4 <_strtoul_l.constprop.0>:
 80163f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163f8:	4e34      	ldr	r6, [pc, #208]	@ (80164cc <_strtoul_l.constprop.0+0xd8>)
 80163fa:	4686      	mov	lr, r0
 80163fc:	460d      	mov	r5, r1
 80163fe:	4628      	mov	r0, r5
 8016400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016404:	5d37      	ldrb	r7, [r6, r4]
 8016406:	f017 0708 	ands.w	r7, r7, #8
 801640a:	d1f8      	bne.n	80163fe <_strtoul_l.constprop.0+0xa>
 801640c:	2c2d      	cmp	r4, #45	@ 0x2d
 801640e:	d12f      	bne.n	8016470 <_strtoul_l.constprop.0+0x7c>
 8016410:	782c      	ldrb	r4, [r5, #0]
 8016412:	2701      	movs	r7, #1
 8016414:	1c85      	adds	r5, r0, #2
 8016416:	f033 0010 	bics.w	r0, r3, #16
 801641a:	d109      	bne.n	8016430 <_strtoul_l.constprop.0+0x3c>
 801641c:	2c30      	cmp	r4, #48	@ 0x30
 801641e:	d12c      	bne.n	801647a <_strtoul_l.constprop.0+0x86>
 8016420:	7828      	ldrb	r0, [r5, #0]
 8016422:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8016426:	2858      	cmp	r0, #88	@ 0x58
 8016428:	d127      	bne.n	801647a <_strtoul_l.constprop.0+0x86>
 801642a:	786c      	ldrb	r4, [r5, #1]
 801642c:	2310      	movs	r3, #16
 801642e:	3502      	adds	r5, #2
 8016430:	f04f 38ff 	mov.w	r8, #4294967295
 8016434:	2600      	movs	r6, #0
 8016436:	fbb8 f8f3 	udiv	r8, r8, r3
 801643a:	fb03 f908 	mul.w	r9, r3, r8
 801643e:	ea6f 0909 	mvn.w	r9, r9
 8016442:	4630      	mov	r0, r6
 8016444:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8016448:	f1bc 0f09 	cmp.w	ip, #9
 801644c:	d81c      	bhi.n	8016488 <_strtoul_l.constprop.0+0x94>
 801644e:	4664      	mov	r4, ip
 8016450:	42a3      	cmp	r3, r4
 8016452:	dd2a      	ble.n	80164aa <_strtoul_l.constprop.0+0xb6>
 8016454:	f1b6 3fff 	cmp.w	r6, #4294967295
 8016458:	d007      	beq.n	801646a <_strtoul_l.constprop.0+0x76>
 801645a:	4580      	cmp	r8, r0
 801645c:	d322      	bcc.n	80164a4 <_strtoul_l.constprop.0+0xb0>
 801645e:	d101      	bne.n	8016464 <_strtoul_l.constprop.0+0x70>
 8016460:	45a1      	cmp	r9, r4
 8016462:	db1f      	blt.n	80164a4 <_strtoul_l.constprop.0+0xb0>
 8016464:	fb00 4003 	mla	r0, r0, r3, r4
 8016468:	2601      	movs	r6, #1
 801646a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801646e:	e7e9      	b.n	8016444 <_strtoul_l.constprop.0+0x50>
 8016470:	2c2b      	cmp	r4, #43	@ 0x2b
 8016472:	bf04      	itt	eq
 8016474:	782c      	ldrbeq	r4, [r5, #0]
 8016476:	1c85      	addeq	r5, r0, #2
 8016478:	e7cd      	b.n	8016416 <_strtoul_l.constprop.0+0x22>
 801647a:	2b00      	cmp	r3, #0
 801647c:	d1d8      	bne.n	8016430 <_strtoul_l.constprop.0+0x3c>
 801647e:	2c30      	cmp	r4, #48	@ 0x30
 8016480:	bf0c      	ite	eq
 8016482:	2308      	moveq	r3, #8
 8016484:	230a      	movne	r3, #10
 8016486:	e7d3      	b.n	8016430 <_strtoul_l.constprop.0+0x3c>
 8016488:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801648c:	f1bc 0f19 	cmp.w	ip, #25
 8016490:	d801      	bhi.n	8016496 <_strtoul_l.constprop.0+0xa2>
 8016492:	3c37      	subs	r4, #55	@ 0x37
 8016494:	e7dc      	b.n	8016450 <_strtoul_l.constprop.0+0x5c>
 8016496:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801649a:	f1bc 0f19 	cmp.w	ip, #25
 801649e:	d804      	bhi.n	80164aa <_strtoul_l.constprop.0+0xb6>
 80164a0:	3c57      	subs	r4, #87	@ 0x57
 80164a2:	e7d5      	b.n	8016450 <_strtoul_l.constprop.0+0x5c>
 80164a4:	f04f 36ff 	mov.w	r6, #4294967295
 80164a8:	e7df      	b.n	801646a <_strtoul_l.constprop.0+0x76>
 80164aa:	1c73      	adds	r3, r6, #1
 80164ac:	d106      	bne.n	80164bc <_strtoul_l.constprop.0+0xc8>
 80164ae:	2322      	movs	r3, #34	@ 0x22
 80164b0:	f8ce 3000 	str.w	r3, [lr]
 80164b4:	4630      	mov	r0, r6
 80164b6:	b932      	cbnz	r2, 80164c6 <_strtoul_l.constprop.0+0xd2>
 80164b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164bc:	b107      	cbz	r7, 80164c0 <_strtoul_l.constprop.0+0xcc>
 80164be:	4240      	negs	r0, r0
 80164c0:	2a00      	cmp	r2, #0
 80164c2:	d0f9      	beq.n	80164b8 <_strtoul_l.constprop.0+0xc4>
 80164c4:	b106      	cbz	r6, 80164c8 <_strtoul_l.constprop.0+0xd4>
 80164c6:	1e69      	subs	r1, r5, #1
 80164c8:	6011      	str	r1, [r2, #0]
 80164ca:	e7f5      	b.n	80164b8 <_strtoul_l.constprop.0+0xc4>
 80164cc:	08017ab9 	.word	0x08017ab9

080164d0 <_strtoul_r>:
 80164d0:	f7ff bf90 	b.w	80163f4 <_strtoul_l.constprop.0>

080164d4 <fiprintf>:
 80164d4:	b40e      	push	{r1, r2, r3}
 80164d6:	b503      	push	{r0, r1, lr}
 80164d8:	4601      	mov	r1, r0
 80164da:	ab03      	add	r3, sp, #12
 80164dc:	4805      	ldr	r0, [pc, #20]	@ (80164f4 <fiprintf+0x20>)
 80164de:	f853 2b04 	ldr.w	r2, [r3], #4
 80164e2:	6800      	ldr	r0, [r0, #0]
 80164e4:	9301      	str	r3, [sp, #4]
 80164e6:	f000 f83f 	bl	8016568 <_vfiprintf_r>
 80164ea:	b002      	add	sp, #8
 80164ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80164f0:	b003      	add	sp, #12
 80164f2:	4770      	bx	lr
 80164f4:	200002e0 	.word	0x200002e0

080164f8 <abort>:
 80164f8:	b508      	push	{r3, lr}
 80164fa:	2006      	movs	r0, #6
 80164fc:	f000 fa08 	bl	8016910 <raise>
 8016500:	2001      	movs	r0, #1
 8016502:	f7f1 f905 	bl	8007710 <_exit>

08016506 <_malloc_usable_size_r>:
 8016506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801650a:	1f18      	subs	r0, r3, #4
 801650c:	2b00      	cmp	r3, #0
 801650e:	bfbc      	itt	lt
 8016510:	580b      	ldrlt	r3, [r1, r0]
 8016512:	18c0      	addlt	r0, r0, r3
 8016514:	4770      	bx	lr

08016516 <__sfputc_r>:
 8016516:	6893      	ldr	r3, [r2, #8]
 8016518:	3b01      	subs	r3, #1
 801651a:	2b00      	cmp	r3, #0
 801651c:	b410      	push	{r4}
 801651e:	6093      	str	r3, [r2, #8]
 8016520:	da08      	bge.n	8016534 <__sfputc_r+0x1e>
 8016522:	6994      	ldr	r4, [r2, #24]
 8016524:	42a3      	cmp	r3, r4
 8016526:	db01      	blt.n	801652c <__sfputc_r+0x16>
 8016528:	290a      	cmp	r1, #10
 801652a:	d103      	bne.n	8016534 <__sfputc_r+0x1e>
 801652c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016530:	f000 b932 	b.w	8016798 <__swbuf_r>
 8016534:	6813      	ldr	r3, [r2, #0]
 8016536:	1c58      	adds	r0, r3, #1
 8016538:	6010      	str	r0, [r2, #0]
 801653a:	7019      	strb	r1, [r3, #0]
 801653c:	4608      	mov	r0, r1
 801653e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016542:	4770      	bx	lr

08016544 <__sfputs_r>:
 8016544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016546:	4606      	mov	r6, r0
 8016548:	460f      	mov	r7, r1
 801654a:	4614      	mov	r4, r2
 801654c:	18d5      	adds	r5, r2, r3
 801654e:	42ac      	cmp	r4, r5
 8016550:	d101      	bne.n	8016556 <__sfputs_r+0x12>
 8016552:	2000      	movs	r0, #0
 8016554:	e007      	b.n	8016566 <__sfputs_r+0x22>
 8016556:	f814 1b01 	ldrb.w	r1, [r4], #1
 801655a:	463a      	mov	r2, r7
 801655c:	4630      	mov	r0, r6
 801655e:	f7ff ffda 	bl	8016516 <__sfputc_r>
 8016562:	1c43      	adds	r3, r0, #1
 8016564:	d1f3      	bne.n	801654e <__sfputs_r+0xa>
 8016566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016568 <_vfiprintf_r>:
 8016568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801656c:	460d      	mov	r5, r1
 801656e:	b09d      	sub	sp, #116	@ 0x74
 8016570:	4614      	mov	r4, r2
 8016572:	4698      	mov	r8, r3
 8016574:	4606      	mov	r6, r0
 8016576:	b118      	cbz	r0, 8016580 <_vfiprintf_r+0x18>
 8016578:	6a03      	ldr	r3, [r0, #32]
 801657a:	b90b      	cbnz	r3, 8016580 <_vfiprintf_r+0x18>
 801657c:	f7fc ff6a 	bl	8013454 <__sinit>
 8016580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016582:	07d9      	lsls	r1, r3, #31
 8016584:	d405      	bmi.n	8016592 <_vfiprintf_r+0x2a>
 8016586:	89ab      	ldrh	r3, [r5, #12]
 8016588:	059a      	lsls	r2, r3, #22
 801658a:	d402      	bmi.n	8016592 <_vfiprintf_r+0x2a>
 801658c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801658e:	f7fd f918 	bl	80137c2 <__retarget_lock_acquire_recursive>
 8016592:	89ab      	ldrh	r3, [r5, #12]
 8016594:	071b      	lsls	r3, r3, #28
 8016596:	d501      	bpl.n	801659c <_vfiprintf_r+0x34>
 8016598:	692b      	ldr	r3, [r5, #16]
 801659a:	b99b      	cbnz	r3, 80165c4 <_vfiprintf_r+0x5c>
 801659c:	4629      	mov	r1, r5
 801659e:	4630      	mov	r0, r6
 80165a0:	f000 f938 	bl	8016814 <__swsetup_r>
 80165a4:	b170      	cbz	r0, 80165c4 <_vfiprintf_r+0x5c>
 80165a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80165a8:	07dc      	lsls	r4, r3, #31
 80165aa:	d504      	bpl.n	80165b6 <_vfiprintf_r+0x4e>
 80165ac:	f04f 30ff 	mov.w	r0, #4294967295
 80165b0:	b01d      	add	sp, #116	@ 0x74
 80165b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b6:	89ab      	ldrh	r3, [r5, #12]
 80165b8:	0598      	lsls	r0, r3, #22
 80165ba:	d4f7      	bmi.n	80165ac <_vfiprintf_r+0x44>
 80165bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80165be:	f7fd f901 	bl	80137c4 <__retarget_lock_release_recursive>
 80165c2:	e7f3      	b.n	80165ac <_vfiprintf_r+0x44>
 80165c4:	2300      	movs	r3, #0
 80165c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80165c8:	2320      	movs	r3, #32
 80165ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80165ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80165d2:	2330      	movs	r3, #48	@ 0x30
 80165d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016784 <_vfiprintf_r+0x21c>
 80165d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80165dc:	f04f 0901 	mov.w	r9, #1
 80165e0:	4623      	mov	r3, r4
 80165e2:	469a      	mov	sl, r3
 80165e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165e8:	b10a      	cbz	r2, 80165ee <_vfiprintf_r+0x86>
 80165ea:	2a25      	cmp	r2, #37	@ 0x25
 80165ec:	d1f9      	bne.n	80165e2 <_vfiprintf_r+0x7a>
 80165ee:	ebba 0b04 	subs.w	fp, sl, r4
 80165f2:	d00b      	beq.n	801660c <_vfiprintf_r+0xa4>
 80165f4:	465b      	mov	r3, fp
 80165f6:	4622      	mov	r2, r4
 80165f8:	4629      	mov	r1, r5
 80165fa:	4630      	mov	r0, r6
 80165fc:	f7ff ffa2 	bl	8016544 <__sfputs_r>
 8016600:	3001      	adds	r0, #1
 8016602:	f000 80a7 	beq.w	8016754 <_vfiprintf_r+0x1ec>
 8016606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016608:	445a      	add	r2, fp
 801660a:	9209      	str	r2, [sp, #36]	@ 0x24
 801660c:	f89a 3000 	ldrb.w	r3, [sl]
 8016610:	2b00      	cmp	r3, #0
 8016612:	f000 809f 	beq.w	8016754 <_vfiprintf_r+0x1ec>
 8016616:	2300      	movs	r3, #0
 8016618:	f04f 32ff 	mov.w	r2, #4294967295
 801661c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016620:	f10a 0a01 	add.w	sl, sl, #1
 8016624:	9304      	str	r3, [sp, #16]
 8016626:	9307      	str	r3, [sp, #28]
 8016628:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801662c:	931a      	str	r3, [sp, #104]	@ 0x68
 801662e:	4654      	mov	r4, sl
 8016630:	2205      	movs	r2, #5
 8016632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016636:	4853      	ldr	r0, [pc, #332]	@ (8016784 <_vfiprintf_r+0x21c>)
 8016638:	f7e9 fdda 	bl	80001f0 <memchr>
 801663c:	9a04      	ldr	r2, [sp, #16]
 801663e:	b9d8      	cbnz	r0, 8016678 <_vfiprintf_r+0x110>
 8016640:	06d1      	lsls	r1, r2, #27
 8016642:	bf44      	itt	mi
 8016644:	2320      	movmi	r3, #32
 8016646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801664a:	0713      	lsls	r3, r2, #28
 801664c:	bf44      	itt	mi
 801664e:	232b      	movmi	r3, #43	@ 0x2b
 8016650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016654:	f89a 3000 	ldrb.w	r3, [sl]
 8016658:	2b2a      	cmp	r3, #42	@ 0x2a
 801665a:	d015      	beq.n	8016688 <_vfiprintf_r+0x120>
 801665c:	9a07      	ldr	r2, [sp, #28]
 801665e:	4654      	mov	r4, sl
 8016660:	2000      	movs	r0, #0
 8016662:	f04f 0c0a 	mov.w	ip, #10
 8016666:	4621      	mov	r1, r4
 8016668:	f811 3b01 	ldrb.w	r3, [r1], #1
 801666c:	3b30      	subs	r3, #48	@ 0x30
 801666e:	2b09      	cmp	r3, #9
 8016670:	d94b      	bls.n	801670a <_vfiprintf_r+0x1a2>
 8016672:	b1b0      	cbz	r0, 80166a2 <_vfiprintf_r+0x13a>
 8016674:	9207      	str	r2, [sp, #28]
 8016676:	e014      	b.n	80166a2 <_vfiprintf_r+0x13a>
 8016678:	eba0 0308 	sub.w	r3, r0, r8
 801667c:	fa09 f303 	lsl.w	r3, r9, r3
 8016680:	4313      	orrs	r3, r2
 8016682:	9304      	str	r3, [sp, #16]
 8016684:	46a2      	mov	sl, r4
 8016686:	e7d2      	b.n	801662e <_vfiprintf_r+0xc6>
 8016688:	9b03      	ldr	r3, [sp, #12]
 801668a:	1d19      	adds	r1, r3, #4
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	9103      	str	r1, [sp, #12]
 8016690:	2b00      	cmp	r3, #0
 8016692:	bfbb      	ittet	lt
 8016694:	425b      	neglt	r3, r3
 8016696:	f042 0202 	orrlt.w	r2, r2, #2
 801669a:	9307      	strge	r3, [sp, #28]
 801669c:	9307      	strlt	r3, [sp, #28]
 801669e:	bfb8      	it	lt
 80166a0:	9204      	strlt	r2, [sp, #16]
 80166a2:	7823      	ldrb	r3, [r4, #0]
 80166a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80166a6:	d10a      	bne.n	80166be <_vfiprintf_r+0x156>
 80166a8:	7863      	ldrb	r3, [r4, #1]
 80166aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80166ac:	d132      	bne.n	8016714 <_vfiprintf_r+0x1ac>
 80166ae:	9b03      	ldr	r3, [sp, #12]
 80166b0:	1d1a      	adds	r2, r3, #4
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	9203      	str	r2, [sp, #12]
 80166b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80166ba:	3402      	adds	r4, #2
 80166bc:	9305      	str	r3, [sp, #20]
 80166be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016794 <_vfiprintf_r+0x22c>
 80166c2:	7821      	ldrb	r1, [r4, #0]
 80166c4:	2203      	movs	r2, #3
 80166c6:	4650      	mov	r0, sl
 80166c8:	f7e9 fd92 	bl	80001f0 <memchr>
 80166cc:	b138      	cbz	r0, 80166de <_vfiprintf_r+0x176>
 80166ce:	9b04      	ldr	r3, [sp, #16]
 80166d0:	eba0 000a 	sub.w	r0, r0, sl
 80166d4:	2240      	movs	r2, #64	@ 0x40
 80166d6:	4082      	lsls	r2, r0
 80166d8:	4313      	orrs	r3, r2
 80166da:	3401      	adds	r4, #1
 80166dc:	9304      	str	r3, [sp, #16]
 80166de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166e2:	4829      	ldr	r0, [pc, #164]	@ (8016788 <_vfiprintf_r+0x220>)
 80166e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80166e8:	2206      	movs	r2, #6
 80166ea:	f7e9 fd81 	bl	80001f0 <memchr>
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d03f      	beq.n	8016772 <_vfiprintf_r+0x20a>
 80166f2:	4b26      	ldr	r3, [pc, #152]	@ (801678c <_vfiprintf_r+0x224>)
 80166f4:	bb1b      	cbnz	r3, 801673e <_vfiprintf_r+0x1d6>
 80166f6:	9b03      	ldr	r3, [sp, #12]
 80166f8:	3307      	adds	r3, #7
 80166fa:	f023 0307 	bic.w	r3, r3, #7
 80166fe:	3308      	adds	r3, #8
 8016700:	9303      	str	r3, [sp, #12]
 8016702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016704:	443b      	add	r3, r7
 8016706:	9309      	str	r3, [sp, #36]	@ 0x24
 8016708:	e76a      	b.n	80165e0 <_vfiprintf_r+0x78>
 801670a:	fb0c 3202 	mla	r2, ip, r2, r3
 801670e:	460c      	mov	r4, r1
 8016710:	2001      	movs	r0, #1
 8016712:	e7a8      	b.n	8016666 <_vfiprintf_r+0xfe>
 8016714:	2300      	movs	r3, #0
 8016716:	3401      	adds	r4, #1
 8016718:	9305      	str	r3, [sp, #20]
 801671a:	4619      	mov	r1, r3
 801671c:	f04f 0c0a 	mov.w	ip, #10
 8016720:	4620      	mov	r0, r4
 8016722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016726:	3a30      	subs	r2, #48	@ 0x30
 8016728:	2a09      	cmp	r2, #9
 801672a:	d903      	bls.n	8016734 <_vfiprintf_r+0x1cc>
 801672c:	2b00      	cmp	r3, #0
 801672e:	d0c6      	beq.n	80166be <_vfiprintf_r+0x156>
 8016730:	9105      	str	r1, [sp, #20]
 8016732:	e7c4      	b.n	80166be <_vfiprintf_r+0x156>
 8016734:	fb0c 2101 	mla	r1, ip, r1, r2
 8016738:	4604      	mov	r4, r0
 801673a:	2301      	movs	r3, #1
 801673c:	e7f0      	b.n	8016720 <_vfiprintf_r+0x1b8>
 801673e:	ab03      	add	r3, sp, #12
 8016740:	9300      	str	r3, [sp, #0]
 8016742:	462a      	mov	r2, r5
 8016744:	4b12      	ldr	r3, [pc, #72]	@ (8016790 <_vfiprintf_r+0x228>)
 8016746:	a904      	add	r1, sp, #16
 8016748:	4630      	mov	r0, r6
 801674a:	f7fc f82b 	bl	80127a4 <_printf_float>
 801674e:	4607      	mov	r7, r0
 8016750:	1c78      	adds	r0, r7, #1
 8016752:	d1d6      	bne.n	8016702 <_vfiprintf_r+0x19a>
 8016754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016756:	07d9      	lsls	r1, r3, #31
 8016758:	d405      	bmi.n	8016766 <_vfiprintf_r+0x1fe>
 801675a:	89ab      	ldrh	r3, [r5, #12]
 801675c:	059a      	lsls	r2, r3, #22
 801675e:	d402      	bmi.n	8016766 <_vfiprintf_r+0x1fe>
 8016760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016762:	f7fd f82f 	bl	80137c4 <__retarget_lock_release_recursive>
 8016766:	89ab      	ldrh	r3, [r5, #12]
 8016768:	065b      	lsls	r3, r3, #25
 801676a:	f53f af1f 	bmi.w	80165ac <_vfiprintf_r+0x44>
 801676e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016770:	e71e      	b.n	80165b0 <_vfiprintf_r+0x48>
 8016772:	ab03      	add	r3, sp, #12
 8016774:	9300      	str	r3, [sp, #0]
 8016776:	462a      	mov	r2, r5
 8016778:	4b05      	ldr	r3, [pc, #20]	@ (8016790 <_vfiprintf_r+0x228>)
 801677a:	a904      	add	r1, sp, #16
 801677c:	4630      	mov	r0, r6
 801677e:	f7fc faa9 	bl	8012cd4 <_printf_i>
 8016782:	e7e4      	b.n	801674e <_vfiprintf_r+0x1e6>
 8016784:	08017bb9 	.word	0x08017bb9
 8016788:	08017bc3 	.word	0x08017bc3
 801678c:	080127a5 	.word	0x080127a5
 8016790:	08016545 	.word	0x08016545
 8016794:	08017bbf 	.word	0x08017bbf

08016798 <__swbuf_r>:
 8016798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679a:	460e      	mov	r6, r1
 801679c:	4614      	mov	r4, r2
 801679e:	4605      	mov	r5, r0
 80167a0:	b118      	cbz	r0, 80167aa <__swbuf_r+0x12>
 80167a2:	6a03      	ldr	r3, [r0, #32]
 80167a4:	b90b      	cbnz	r3, 80167aa <__swbuf_r+0x12>
 80167a6:	f7fc fe55 	bl	8013454 <__sinit>
 80167aa:	69a3      	ldr	r3, [r4, #24]
 80167ac:	60a3      	str	r3, [r4, #8]
 80167ae:	89a3      	ldrh	r3, [r4, #12]
 80167b0:	071a      	lsls	r2, r3, #28
 80167b2:	d501      	bpl.n	80167b8 <__swbuf_r+0x20>
 80167b4:	6923      	ldr	r3, [r4, #16]
 80167b6:	b943      	cbnz	r3, 80167ca <__swbuf_r+0x32>
 80167b8:	4621      	mov	r1, r4
 80167ba:	4628      	mov	r0, r5
 80167bc:	f000 f82a 	bl	8016814 <__swsetup_r>
 80167c0:	b118      	cbz	r0, 80167ca <__swbuf_r+0x32>
 80167c2:	f04f 37ff 	mov.w	r7, #4294967295
 80167c6:	4638      	mov	r0, r7
 80167c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167ca:	6823      	ldr	r3, [r4, #0]
 80167cc:	6922      	ldr	r2, [r4, #16]
 80167ce:	1a98      	subs	r0, r3, r2
 80167d0:	6963      	ldr	r3, [r4, #20]
 80167d2:	b2f6      	uxtb	r6, r6
 80167d4:	4283      	cmp	r3, r0
 80167d6:	4637      	mov	r7, r6
 80167d8:	dc05      	bgt.n	80167e6 <__swbuf_r+0x4e>
 80167da:	4621      	mov	r1, r4
 80167dc:	4628      	mov	r0, r5
 80167de:	f7ff fce3 	bl	80161a8 <_fflush_r>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d1ed      	bne.n	80167c2 <__swbuf_r+0x2a>
 80167e6:	68a3      	ldr	r3, [r4, #8]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	60a3      	str	r3, [r4, #8]
 80167ec:	6823      	ldr	r3, [r4, #0]
 80167ee:	1c5a      	adds	r2, r3, #1
 80167f0:	6022      	str	r2, [r4, #0]
 80167f2:	701e      	strb	r6, [r3, #0]
 80167f4:	6962      	ldr	r2, [r4, #20]
 80167f6:	1c43      	adds	r3, r0, #1
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d004      	beq.n	8016806 <__swbuf_r+0x6e>
 80167fc:	89a3      	ldrh	r3, [r4, #12]
 80167fe:	07db      	lsls	r3, r3, #31
 8016800:	d5e1      	bpl.n	80167c6 <__swbuf_r+0x2e>
 8016802:	2e0a      	cmp	r6, #10
 8016804:	d1df      	bne.n	80167c6 <__swbuf_r+0x2e>
 8016806:	4621      	mov	r1, r4
 8016808:	4628      	mov	r0, r5
 801680a:	f7ff fccd 	bl	80161a8 <_fflush_r>
 801680e:	2800      	cmp	r0, #0
 8016810:	d0d9      	beq.n	80167c6 <__swbuf_r+0x2e>
 8016812:	e7d6      	b.n	80167c2 <__swbuf_r+0x2a>

08016814 <__swsetup_r>:
 8016814:	b538      	push	{r3, r4, r5, lr}
 8016816:	4b29      	ldr	r3, [pc, #164]	@ (80168bc <__swsetup_r+0xa8>)
 8016818:	4605      	mov	r5, r0
 801681a:	6818      	ldr	r0, [r3, #0]
 801681c:	460c      	mov	r4, r1
 801681e:	b118      	cbz	r0, 8016828 <__swsetup_r+0x14>
 8016820:	6a03      	ldr	r3, [r0, #32]
 8016822:	b90b      	cbnz	r3, 8016828 <__swsetup_r+0x14>
 8016824:	f7fc fe16 	bl	8013454 <__sinit>
 8016828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801682c:	0719      	lsls	r1, r3, #28
 801682e:	d422      	bmi.n	8016876 <__swsetup_r+0x62>
 8016830:	06da      	lsls	r2, r3, #27
 8016832:	d407      	bmi.n	8016844 <__swsetup_r+0x30>
 8016834:	2209      	movs	r2, #9
 8016836:	602a      	str	r2, [r5, #0]
 8016838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801683c:	81a3      	strh	r3, [r4, #12]
 801683e:	f04f 30ff 	mov.w	r0, #4294967295
 8016842:	e033      	b.n	80168ac <__swsetup_r+0x98>
 8016844:	0758      	lsls	r0, r3, #29
 8016846:	d512      	bpl.n	801686e <__swsetup_r+0x5a>
 8016848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801684a:	b141      	cbz	r1, 801685e <__swsetup_r+0x4a>
 801684c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016850:	4299      	cmp	r1, r3
 8016852:	d002      	beq.n	801685a <__swsetup_r+0x46>
 8016854:	4628      	mov	r0, r5
 8016856:	f7fd fe2b 	bl	80144b0 <_free_r>
 801685a:	2300      	movs	r3, #0
 801685c:	6363      	str	r3, [r4, #52]	@ 0x34
 801685e:	89a3      	ldrh	r3, [r4, #12]
 8016860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016864:	81a3      	strh	r3, [r4, #12]
 8016866:	2300      	movs	r3, #0
 8016868:	6063      	str	r3, [r4, #4]
 801686a:	6923      	ldr	r3, [r4, #16]
 801686c:	6023      	str	r3, [r4, #0]
 801686e:	89a3      	ldrh	r3, [r4, #12]
 8016870:	f043 0308 	orr.w	r3, r3, #8
 8016874:	81a3      	strh	r3, [r4, #12]
 8016876:	6923      	ldr	r3, [r4, #16]
 8016878:	b94b      	cbnz	r3, 801688e <__swsetup_r+0x7a>
 801687a:	89a3      	ldrh	r3, [r4, #12]
 801687c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8016880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016884:	d003      	beq.n	801688e <__swsetup_r+0x7a>
 8016886:	4621      	mov	r1, r4
 8016888:	4628      	mov	r0, r5
 801688a:	f000 f883 	bl	8016994 <__smakebuf_r>
 801688e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016892:	f013 0201 	ands.w	r2, r3, #1
 8016896:	d00a      	beq.n	80168ae <__swsetup_r+0x9a>
 8016898:	2200      	movs	r2, #0
 801689a:	60a2      	str	r2, [r4, #8]
 801689c:	6962      	ldr	r2, [r4, #20]
 801689e:	4252      	negs	r2, r2
 80168a0:	61a2      	str	r2, [r4, #24]
 80168a2:	6922      	ldr	r2, [r4, #16]
 80168a4:	b942      	cbnz	r2, 80168b8 <__swsetup_r+0xa4>
 80168a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80168aa:	d1c5      	bne.n	8016838 <__swsetup_r+0x24>
 80168ac:	bd38      	pop	{r3, r4, r5, pc}
 80168ae:	0799      	lsls	r1, r3, #30
 80168b0:	bf58      	it	pl
 80168b2:	6962      	ldrpl	r2, [r4, #20]
 80168b4:	60a2      	str	r2, [r4, #8]
 80168b6:	e7f4      	b.n	80168a2 <__swsetup_r+0x8e>
 80168b8:	2000      	movs	r0, #0
 80168ba:	e7f7      	b.n	80168ac <__swsetup_r+0x98>
 80168bc:	200002e0 	.word	0x200002e0

080168c0 <_raise_r>:
 80168c0:	291f      	cmp	r1, #31
 80168c2:	b538      	push	{r3, r4, r5, lr}
 80168c4:	4605      	mov	r5, r0
 80168c6:	460c      	mov	r4, r1
 80168c8:	d904      	bls.n	80168d4 <_raise_r+0x14>
 80168ca:	2316      	movs	r3, #22
 80168cc:	6003      	str	r3, [r0, #0]
 80168ce:	f04f 30ff 	mov.w	r0, #4294967295
 80168d2:	bd38      	pop	{r3, r4, r5, pc}
 80168d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80168d6:	b112      	cbz	r2, 80168de <_raise_r+0x1e>
 80168d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80168dc:	b94b      	cbnz	r3, 80168f2 <_raise_r+0x32>
 80168de:	4628      	mov	r0, r5
 80168e0:	f000 f830 	bl	8016944 <_getpid_r>
 80168e4:	4622      	mov	r2, r4
 80168e6:	4601      	mov	r1, r0
 80168e8:	4628      	mov	r0, r5
 80168ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168ee:	f000 b817 	b.w	8016920 <_kill_r>
 80168f2:	2b01      	cmp	r3, #1
 80168f4:	d00a      	beq.n	801690c <_raise_r+0x4c>
 80168f6:	1c59      	adds	r1, r3, #1
 80168f8:	d103      	bne.n	8016902 <_raise_r+0x42>
 80168fa:	2316      	movs	r3, #22
 80168fc:	6003      	str	r3, [r0, #0]
 80168fe:	2001      	movs	r0, #1
 8016900:	e7e7      	b.n	80168d2 <_raise_r+0x12>
 8016902:	2100      	movs	r1, #0
 8016904:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016908:	4620      	mov	r0, r4
 801690a:	4798      	blx	r3
 801690c:	2000      	movs	r0, #0
 801690e:	e7e0      	b.n	80168d2 <_raise_r+0x12>

08016910 <raise>:
 8016910:	4b02      	ldr	r3, [pc, #8]	@ (801691c <raise+0xc>)
 8016912:	4601      	mov	r1, r0
 8016914:	6818      	ldr	r0, [r3, #0]
 8016916:	f7ff bfd3 	b.w	80168c0 <_raise_r>
 801691a:	bf00      	nop
 801691c:	200002e0 	.word	0x200002e0

08016920 <_kill_r>:
 8016920:	b538      	push	{r3, r4, r5, lr}
 8016922:	4d07      	ldr	r5, [pc, #28]	@ (8016940 <_kill_r+0x20>)
 8016924:	2300      	movs	r3, #0
 8016926:	4604      	mov	r4, r0
 8016928:	4608      	mov	r0, r1
 801692a:	4611      	mov	r1, r2
 801692c:	602b      	str	r3, [r5, #0]
 801692e:	f7f0 fedf 	bl	80076f0 <_kill>
 8016932:	1c43      	adds	r3, r0, #1
 8016934:	d102      	bne.n	801693c <_kill_r+0x1c>
 8016936:	682b      	ldr	r3, [r5, #0]
 8016938:	b103      	cbz	r3, 801693c <_kill_r+0x1c>
 801693a:	6023      	str	r3, [r4, #0]
 801693c:	bd38      	pop	{r3, r4, r5, pc}
 801693e:	bf00      	nop
 8016940:	20003514 	.word	0x20003514

08016944 <_getpid_r>:
 8016944:	f7f0 becc 	b.w	80076e0 <_getpid>

08016948 <__swhatbuf_r>:
 8016948:	b570      	push	{r4, r5, r6, lr}
 801694a:	460c      	mov	r4, r1
 801694c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016950:	2900      	cmp	r1, #0
 8016952:	b096      	sub	sp, #88	@ 0x58
 8016954:	4615      	mov	r5, r2
 8016956:	461e      	mov	r6, r3
 8016958:	da0d      	bge.n	8016976 <__swhatbuf_r+0x2e>
 801695a:	89a3      	ldrh	r3, [r4, #12]
 801695c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016960:	f04f 0100 	mov.w	r1, #0
 8016964:	bf14      	ite	ne
 8016966:	2340      	movne	r3, #64	@ 0x40
 8016968:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801696c:	2000      	movs	r0, #0
 801696e:	6031      	str	r1, [r6, #0]
 8016970:	602b      	str	r3, [r5, #0]
 8016972:	b016      	add	sp, #88	@ 0x58
 8016974:	bd70      	pop	{r4, r5, r6, pc}
 8016976:	466a      	mov	r2, sp
 8016978:	f000 f848 	bl	8016a0c <_fstat_r>
 801697c:	2800      	cmp	r0, #0
 801697e:	dbec      	blt.n	801695a <__swhatbuf_r+0x12>
 8016980:	9901      	ldr	r1, [sp, #4]
 8016982:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016986:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801698a:	4259      	negs	r1, r3
 801698c:	4159      	adcs	r1, r3
 801698e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016992:	e7eb      	b.n	801696c <__swhatbuf_r+0x24>

08016994 <__smakebuf_r>:
 8016994:	898b      	ldrh	r3, [r1, #12]
 8016996:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016998:	079d      	lsls	r5, r3, #30
 801699a:	4606      	mov	r6, r0
 801699c:	460c      	mov	r4, r1
 801699e:	d507      	bpl.n	80169b0 <__smakebuf_r+0x1c>
 80169a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80169a4:	6023      	str	r3, [r4, #0]
 80169a6:	6123      	str	r3, [r4, #16]
 80169a8:	2301      	movs	r3, #1
 80169aa:	6163      	str	r3, [r4, #20]
 80169ac:	b003      	add	sp, #12
 80169ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80169b0:	ab01      	add	r3, sp, #4
 80169b2:	466a      	mov	r2, sp
 80169b4:	f7ff ffc8 	bl	8016948 <__swhatbuf_r>
 80169b8:	9f00      	ldr	r7, [sp, #0]
 80169ba:	4605      	mov	r5, r0
 80169bc:	4639      	mov	r1, r7
 80169be:	4630      	mov	r0, r6
 80169c0:	f7fe f924 	bl	8014c0c <_malloc_r>
 80169c4:	b948      	cbnz	r0, 80169da <__smakebuf_r+0x46>
 80169c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169ca:	059a      	lsls	r2, r3, #22
 80169cc:	d4ee      	bmi.n	80169ac <__smakebuf_r+0x18>
 80169ce:	f023 0303 	bic.w	r3, r3, #3
 80169d2:	f043 0302 	orr.w	r3, r3, #2
 80169d6:	81a3      	strh	r3, [r4, #12]
 80169d8:	e7e2      	b.n	80169a0 <__smakebuf_r+0xc>
 80169da:	89a3      	ldrh	r3, [r4, #12]
 80169dc:	6020      	str	r0, [r4, #0]
 80169de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80169e2:	81a3      	strh	r3, [r4, #12]
 80169e4:	9b01      	ldr	r3, [sp, #4]
 80169e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80169ea:	b15b      	cbz	r3, 8016a04 <__smakebuf_r+0x70>
 80169ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169f0:	4630      	mov	r0, r6
 80169f2:	f000 f81d 	bl	8016a30 <_isatty_r>
 80169f6:	b128      	cbz	r0, 8016a04 <__smakebuf_r+0x70>
 80169f8:	89a3      	ldrh	r3, [r4, #12]
 80169fa:	f023 0303 	bic.w	r3, r3, #3
 80169fe:	f043 0301 	orr.w	r3, r3, #1
 8016a02:	81a3      	strh	r3, [r4, #12]
 8016a04:	89a3      	ldrh	r3, [r4, #12]
 8016a06:	431d      	orrs	r5, r3
 8016a08:	81a5      	strh	r5, [r4, #12]
 8016a0a:	e7cf      	b.n	80169ac <__smakebuf_r+0x18>

08016a0c <_fstat_r>:
 8016a0c:	b538      	push	{r3, r4, r5, lr}
 8016a0e:	4d07      	ldr	r5, [pc, #28]	@ (8016a2c <_fstat_r+0x20>)
 8016a10:	2300      	movs	r3, #0
 8016a12:	4604      	mov	r4, r0
 8016a14:	4608      	mov	r0, r1
 8016a16:	4611      	mov	r1, r2
 8016a18:	602b      	str	r3, [r5, #0]
 8016a1a:	f7f0 fec9 	bl	80077b0 <_fstat>
 8016a1e:	1c43      	adds	r3, r0, #1
 8016a20:	d102      	bne.n	8016a28 <_fstat_r+0x1c>
 8016a22:	682b      	ldr	r3, [r5, #0]
 8016a24:	b103      	cbz	r3, 8016a28 <_fstat_r+0x1c>
 8016a26:	6023      	str	r3, [r4, #0]
 8016a28:	bd38      	pop	{r3, r4, r5, pc}
 8016a2a:	bf00      	nop
 8016a2c:	20003514 	.word	0x20003514

08016a30 <_isatty_r>:
 8016a30:	b538      	push	{r3, r4, r5, lr}
 8016a32:	4d06      	ldr	r5, [pc, #24]	@ (8016a4c <_isatty_r+0x1c>)
 8016a34:	2300      	movs	r3, #0
 8016a36:	4604      	mov	r4, r0
 8016a38:	4608      	mov	r0, r1
 8016a3a:	602b      	str	r3, [r5, #0]
 8016a3c:	f7f0 fec8 	bl	80077d0 <_isatty>
 8016a40:	1c43      	adds	r3, r0, #1
 8016a42:	d102      	bne.n	8016a4a <_isatty_r+0x1a>
 8016a44:	682b      	ldr	r3, [r5, #0]
 8016a46:	b103      	cbz	r3, 8016a4a <_isatty_r+0x1a>
 8016a48:	6023      	str	r3, [r4, #0]
 8016a4a:	bd38      	pop	{r3, r4, r5, pc}
 8016a4c:	20003514 	.word	0x20003514

08016a50 <_init>:
 8016a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a52:	bf00      	nop
 8016a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a56:	bc08      	pop	{r3}
 8016a58:	469e      	mov	lr, r3
 8016a5a:	4770      	bx	lr

08016a5c <_fini>:
 8016a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a5e:	bf00      	nop
 8016a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a62:	bc08      	pop	{r3}
 8016a64:	469e      	mov	lr, r3
 8016a66:	4770      	bx	lr
